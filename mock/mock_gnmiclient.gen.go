// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openconfig/gnmi/proto/gnmi (interfaces: GNMIClient)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gnmi "github.com/openconfig/gnmi/proto/gnmi"
	grpc "google.golang.org/grpc"
)

// MockGNMIClient is a mock of GNMIClient interface.
type MockGNMIClient struct {
	ctrl     *gomock.Controller
	recorder *MockGNMIClientMockRecorder
}

// MockGNMIClientMockRecorder is the mock recorder for MockGNMIClient.
type MockGNMIClientMockRecorder struct {
	mock *MockGNMIClient
}

// NewMockGNMIClient creates a new mock instance.
func NewMockGNMIClient(ctrl *gomock.Controller) *MockGNMIClient {
	mock := &MockGNMIClient{ctrl: ctrl}
	mock.recorder = &MockGNMIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGNMIClient) EXPECT() *MockGNMIClientMockRecorder {
	return m.recorder
}

// Capabilities mocks base method.
func (m *MockGNMIClient) Capabilities(arg0 context.Context, arg1 *gnmi.CapabilityRequest, arg2 ...grpc.CallOption) (*gnmi.CapabilityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Capabilities", varargs...)
	ret0, _ := ret[0].(*gnmi.CapabilityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Capabilities indicates an expected call of Capabilities.
func (mr *MockGNMIClientMockRecorder) Capabilities(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Capabilities", reflect.TypeOf((*MockGNMIClient)(nil).Capabilities), varargs...)
}

// Get mocks base method.
func (m *MockGNMIClient) Get(arg0 context.Context, arg1 *gnmi.GetRequest, arg2 ...grpc.CallOption) (*gnmi.GetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*gnmi.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockGNMIClientMockRecorder) Get(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGNMIClient)(nil).Get), varargs...)
}

// Set mocks base method.
func (m *MockGNMIClient) Set(arg0 context.Context, arg1 *gnmi.SetRequest, arg2 ...grpc.CallOption) (*gnmi.SetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Set", varargs...)
	ret0, _ := ret[0].(*gnmi.SetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set.
func (mr *MockGNMIClientMockRecorder) Set(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockGNMIClient)(nil).Set), varargs...)
}

// Subscribe mocks base method.
func (m *MockGNMIClient) Subscribe(arg0 context.Context, arg1 ...grpc.CallOption) (gnmi.GNMI_SubscribeClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Subscribe", varargs...)
	ret0, _ := ret[0].(gnmi.GNMI_SubscribeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockGNMIClientMockRecorder) Subscribe(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockGNMIClient)(nil).Subscribe), varargs...)
}
