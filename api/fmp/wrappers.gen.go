// Copyright (c) 2023 Arista Networks, Inc.  All rights reserved.
// Arista Networks, Inc. Confidential and Proprietary.
// Subject to Arista Networks, Inc.'s EULA.
// FOR INTERNAL USE ONLY. NOT FOR DISTRIBUTION.
//
// Code generated by boomtown. DO NOT EDIT.
//
package fmp

// PassesPartialEqFilter returns whether the MapBoolBool matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapBoolBool) PassesPartialEqFilter(cmp *MapBoolBool) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || filt != self {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the MapBoolBytes matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapBoolBytes) PassesPartialEqFilter(cmp *MapBoolBytes) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || string(self) != string(filt) {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the MapBoolDouble matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapBoolDouble) PassesPartialEqFilter(cmp *MapBoolDouble) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || filt != self {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the MapBoolFloat matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapBoolFloat) PassesPartialEqFilter(cmp *MapBoolFloat) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || filt != self {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the MapBoolInt32 matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapBoolInt32) PassesPartialEqFilter(cmp *MapBoolInt32) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || filt != self {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the MapBoolInt64 matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapBoolInt64) PassesPartialEqFilter(cmp *MapBoolInt64) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || filt != self {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the MapBoolString matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapBoolString) PassesPartialEqFilter(cmp *MapBoolString) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || filt != self {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the MapBoolUInt32 matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapBoolUInt32) PassesPartialEqFilter(cmp *MapBoolUInt32) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || filt != self {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the MapBoolUInt64 matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapBoolUInt64) PassesPartialEqFilter(cmp *MapBoolUInt64) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || filt != self {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the MapInt32Bool matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapInt32Bool) PassesPartialEqFilter(cmp *MapInt32Bool) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || filt != self {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the MapInt32Bytes matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapInt32Bytes) PassesPartialEqFilter(cmp *MapInt32Bytes) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || string(self) != string(filt) {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the MapInt32Double matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapInt32Double) PassesPartialEqFilter(cmp *MapInt32Double) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || filt != self {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the MapInt32Float matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapInt32Float) PassesPartialEqFilter(cmp *MapInt32Float) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || filt != self {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the MapInt32Int32 matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapInt32Int32) PassesPartialEqFilter(cmp *MapInt32Int32) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || filt != self {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the MapInt32Int64 matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapInt32Int64) PassesPartialEqFilter(cmp *MapInt32Int64) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || filt != self {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the MapInt32String matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapInt32String) PassesPartialEqFilter(cmp *MapInt32String) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || filt != self {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the MapInt32UInt32 matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapInt32UInt32) PassesPartialEqFilter(cmp *MapInt32UInt32) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || filt != self {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the MapInt32UInt64 matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapInt32UInt64) PassesPartialEqFilter(cmp *MapInt32UInt64) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || filt != self {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the MapInt64Bool matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapInt64Bool) PassesPartialEqFilter(cmp *MapInt64Bool) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || filt != self {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the MapInt64Bytes matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapInt64Bytes) PassesPartialEqFilter(cmp *MapInt64Bytes) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || string(self) != string(filt) {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the MapInt64Double matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapInt64Double) PassesPartialEqFilter(cmp *MapInt64Double) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || filt != self {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the MapInt64Float matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapInt64Float) PassesPartialEqFilter(cmp *MapInt64Float) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || filt != self {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the MapInt64Int32 matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapInt64Int32) PassesPartialEqFilter(cmp *MapInt64Int32) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || filt != self {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the MapInt64Int64 matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapInt64Int64) PassesPartialEqFilter(cmp *MapInt64Int64) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || filt != self {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the MapInt64String matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapInt64String) PassesPartialEqFilter(cmp *MapInt64String) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || filt != self {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the MapInt64UInt32 matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapInt64UInt32) PassesPartialEqFilter(cmp *MapInt64UInt32) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || filt != self {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the MapInt64UInt64 matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapInt64UInt64) PassesPartialEqFilter(cmp *MapInt64UInt64) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || filt != self {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the MapStringBool matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapStringBool) PassesPartialEqFilter(cmp *MapStringBool) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || filt != self {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the MapStringBytes matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapStringBytes) PassesPartialEqFilter(cmp *MapStringBytes) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || string(self) != string(filt) {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the MapStringDouble matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapStringDouble) PassesPartialEqFilter(cmp *MapStringDouble) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || filt != self {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the MapStringFloat matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapStringFloat) PassesPartialEqFilter(cmp *MapStringFloat) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || filt != self {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the MapStringInt32 matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapStringInt32) PassesPartialEqFilter(cmp *MapStringInt32) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || filt != self {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the MapStringInt64 matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapStringInt64) PassesPartialEqFilter(cmp *MapStringInt64) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || filt != self {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the MapStringString matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapStringString) PassesPartialEqFilter(cmp *MapStringString) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || filt != self {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the MapStringUInt32 matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapStringUInt32) PassesPartialEqFilter(cmp *MapStringUInt32) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || filt != self {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the MapStringUInt64 matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapStringUInt64) PassesPartialEqFilter(cmp *MapStringUInt64) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || filt != self {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the MapUInt32Bool matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapUInt32Bool) PassesPartialEqFilter(cmp *MapUInt32Bool) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || filt != self {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the MapUInt32Bytes matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapUInt32Bytes) PassesPartialEqFilter(cmp *MapUInt32Bytes) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || string(self) != string(filt) {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the MapUInt32Double matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapUInt32Double) PassesPartialEqFilter(cmp *MapUInt32Double) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || filt != self {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the MapUInt32Float matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapUInt32Float) PassesPartialEqFilter(cmp *MapUInt32Float) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || filt != self {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the MapUInt32Int32 matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapUInt32Int32) PassesPartialEqFilter(cmp *MapUInt32Int32) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || filt != self {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the MapUInt32Int64 matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapUInt32Int64) PassesPartialEqFilter(cmp *MapUInt32Int64) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || filt != self {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the MapUInt32String matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapUInt32String) PassesPartialEqFilter(cmp *MapUInt32String) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || filt != self {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the MapUInt32UInt32 matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapUInt32UInt32) PassesPartialEqFilter(cmp *MapUInt32UInt32) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || filt != self {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the MapUInt32UInt64 matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapUInt32UInt64) PassesPartialEqFilter(cmp *MapUInt32UInt64) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || filt != self {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the MapUInt64Bool matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapUInt64Bool) PassesPartialEqFilter(cmp *MapUInt64Bool) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || filt != self {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the MapUInt64Bytes matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapUInt64Bytes) PassesPartialEqFilter(cmp *MapUInt64Bytes) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || string(self) != string(filt) {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the MapUInt64Double matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapUInt64Double) PassesPartialEqFilter(cmp *MapUInt64Double) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || filt != self {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the MapUInt64Float matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapUInt64Float) PassesPartialEqFilter(cmp *MapUInt64Float) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || filt != self {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the MapUInt64Int32 matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapUInt64Int32) PassesPartialEqFilter(cmp *MapUInt64Int32) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || filt != self {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the MapUInt64Int64 matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapUInt64Int64) PassesPartialEqFilter(cmp *MapUInt64Int64) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || filt != self {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the MapUInt64String matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapUInt64String) PassesPartialEqFilter(cmp *MapUInt64String) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || filt != self {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the MapUInt64UInt32 matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapUInt64UInt32) PassesPartialEqFilter(cmp *MapUInt64UInt32) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || filt != self {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the MapUInt64UInt64 matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MapUInt64UInt64) PassesPartialEqFilter(cmp *MapUInt64UInt64) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if m == nil {
		return false
	}
	if len(cmp.Values) > len(m.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := m.Values[k]
		if !exists || filt != self {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the RepeatedBool matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (r *RepeatedBool) PassesPartialEqFilter(cmp *RepeatedBool) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if r == nil {
		return false
	}
	if len(r.Values) != len(cmp.Values) {
		return false
	}
	for i, f := range r.Values {
		if cmp.Values[i] != f {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the RepeatedBytes matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (r *RepeatedBytes) PassesPartialEqFilter(cmp *RepeatedBytes) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if r == nil {
		return false
	}
	if len(r.Values) != len(cmp.Values) {
		return false
	}
	for i, f := range r.Values {
		if string(cmp.Values[i]) != string(f) {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the RepeatedDouble matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (r *RepeatedDouble) PassesPartialEqFilter(cmp *RepeatedDouble) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if r == nil {
		return false
	}
	if len(r.Values) != len(cmp.Values) {
		return false
	}
	for i, f := range r.Values {
		if cmp.Values[i] != f {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the RepeatedFloat matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (r *RepeatedFloat) PassesPartialEqFilter(cmp *RepeatedFloat) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if r == nil {
		return false
	}
	if len(r.Values) != len(cmp.Values) {
		return false
	}
	for i, f := range r.Values {
		if cmp.Values[i] != f {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the RepeatedInt32 matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (r *RepeatedInt32) PassesPartialEqFilter(cmp *RepeatedInt32) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if r == nil {
		return false
	}
	if len(r.Values) != len(cmp.Values) {
		return false
	}
	for i, f := range r.Values {
		if cmp.Values[i] != f {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the RepeatedInt64 matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (r *RepeatedInt64) PassesPartialEqFilter(cmp *RepeatedInt64) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if r == nil {
		return false
	}
	if len(r.Values) != len(cmp.Values) {
		return false
	}
	for i, f := range r.Values {
		if cmp.Values[i] != f {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the RepeatedString matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (r *RepeatedString) PassesPartialEqFilter(cmp *RepeatedString) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if r == nil {
		return false
	}
	if len(r.Values) != len(cmp.Values) {
		return false
	}
	for i, f := range r.Values {
		if cmp.Values[i] != f {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the RepeatedUInt32 matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (r *RepeatedUInt32) PassesPartialEqFilter(cmp *RepeatedUInt32) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if r == nil {
		return false
	}
	if len(r.Values) != len(cmp.Values) {
		return false
	}
	for i, f := range r.Values {
		if cmp.Values[i] != f {
			return false
		}
	}
	return true
}

// PassesPartialEqFilter returns whether the RepeatedUInt64 matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (r *RepeatedUInt64) PassesPartialEqFilter(cmp *RepeatedUInt64) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}
	if r == nil {
		return false
	}
	if len(r.Values) != len(cmp.Values) {
		return false
	}
	for i, f := range r.Values {
		if cmp.Values[i] != f {
			return false
		}
	}
	return true
}
