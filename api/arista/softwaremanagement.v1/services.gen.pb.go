// Copyright (c) 2023 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

// EOS images, Streaming Agent, and other extensions in CloudVision are managed using this
// resource API. Images and extensions can be added, deleted and updated.
//
// New software is added to CloudVision either by uploading files directly from your computer using
// the Software Upload REST API or by downloading them from Arista's Software Download site using
// this resource API. To upload software using the Software Upload REST API in CloudVision, navigate
// to Settings > Developer Tools > REST API Explorer > softwareRepository.
//
// No matter how the image or extension is added, you can use the resource API to update or delete
// it.

//
// Code generated by boomtown. DO NOT EDIT.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v4.24.4
// source: arista/softwaremanagement.v1/services.gen.proto

package softwaremanagement

import (
	subscriptions "github.com/aristanetworks/cloudvision-go/api/arista/subscriptions"
	time "github.com/aristanetworks/cloudvision-go/api/arista/time"
	fmp "github.com/aristanetworks/cloudvision-go/api/fmp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MetaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time holds the timestamp of the last item included in the metadata calculation.
	Time *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,2,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
	// Count is the number of items present under the conditions of the request.
	Count *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *MetaResponse) Reset() {
	*x = MetaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaResponse) ProtoMessage() {}

func (x *MetaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaResponse.ProtoReflect.Descriptor instead.
func (*MetaResponse) Descriptor() ([]byte, []int) {
	return file_arista_softwaremanagement_v1_services_gen_proto_rawDescGZIP(), []int{0}
}

func (x *MetaResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *MetaResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation(0)
}

func (x *MetaResponse) GetCount() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Count
	}
	return nil
}

type ReleasesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *ReleasesRequest) Reset() {
	*x = ReleasesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleasesRequest) ProtoMessage() {}

func (x *ReleasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleasesRequest.ProtoReflect.Descriptor instead.
func (*ReleasesRequest) Descriptor() ([]byte, []int) {
	return file_arista_softwaremanagement_v1_services_gen_proto_rawDescGZIP(), []int{1}
}

func (x *ReleasesRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type ReleasesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *Releases `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// Releases instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *ReleasesResponse) Reset() {
	*x = ReleasesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleasesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleasesResponse) ProtoMessage() {}

func (x *ReleasesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleasesResponse.ProtoReflect.Descriptor instead.
func (*ReleasesResponse) Descriptor() ([]byte, []int) {
	return file_arista_softwaremanagement_v1_services_gen_proto_rawDescGZIP(), []int{2}
}

func (x *ReleasesResponse) GetValue() *Releases {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ReleasesResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type ReleasesStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*Releases `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each Releases at end.
	//   - Each Releases response is fully-specified (all fields set).
	//   - start: Returns the state of each Releases at start, followed by updates until now.
	//   - Each Releases response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each Releases at start, followed by updates
	//     until end.
	//   - Each Releases response at start is fully-specified, but updates until end may
	//     be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *ReleasesStreamRequest) Reset() {
	*x = ReleasesStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleasesStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleasesStreamRequest) ProtoMessage() {}

func (x *ReleasesStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleasesStreamRequest.ProtoReflect.Descriptor instead.
func (*ReleasesStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_softwaremanagement_v1_services_gen_proto_rawDescGZIP(), []int{3}
}

func (x *ReleasesStreamRequest) GetPartialEqFilter() []*Releases {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *ReleasesStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type ReleasesStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *Releases `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this Releases's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the Releases value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *ReleasesStreamResponse) Reset() {
	*x = ReleasesStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleasesStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleasesStreamResponse) ProtoMessage() {}

func (x *ReleasesStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleasesStreamResponse.ProtoReflect.Descriptor instead.
func (*ReleasesStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_softwaremanagement_v1_services_gen_proto_rawDescGZIP(), []int{4}
}

func (x *ReleasesStreamResponse) GetValue() *Releases {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ReleasesStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *ReleasesStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation(0)
}

type RepositoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a Repository instance to retrieve.
	// This value must be populated.
	Key *RepositoryKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *RepositoryRequest) Reset() {
	*x = RepositoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryRequest) ProtoMessage() {}

func (x *RepositoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryRequest.ProtoReflect.Descriptor instead.
func (*RepositoryRequest) Descriptor() ([]byte, []int) {
	return file_arista_softwaremanagement_v1_services_gen_proto_rawDescGZIP(), []int{5}
}

func (x *RepositoryRequest) GetKey() *RepositoryKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *RepositoryRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type RepositoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *Repository `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// Repository instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *RepositoryResponse) Reset() {
	*x = RepositoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryResponse) ProtoMessage() {}

func (x *RepositoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryResponse.ProtoReflect.Descriptor instead.
func (*RepositoryResponse) Descriptor() ([]byte, []int) {
	return file_arista_softwaremanagement_v1_services_gen_proto_rawDescGZIP(), []int{6}
}

func (x *RepositoryResponse) GetValue() *Repository {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *RepositoryResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type RepositorySomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*RepositoryKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *RepositorySomeRequest) Reset() {
	*x = RepositorySomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositorySomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositorySomeRequest) ProtoMessage() {}

func (x *RepositorySomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositorySomeRequest.ProtoReflect.Descriptor instead.
func (*RepositorySomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_softwaremanagement_v1_services_gen_proto_rawDescGZIP(), []int{7}
}

func (x *RepositorySomeRequest) GetKeys() []*RepositoryKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *RepositorySomeRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type RepositorySomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *Repository `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Time  *timestamppb.Timestamp  `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *RepositorySomeResponse) Reset() {
	*x = RepositorySomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositorySomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositorySomeResponse) ProtoMessage() {}

func (x *RepositorySomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositorySomeResponse.ProtoReflect.Descriptor instead.
func (*RepositorySomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_softwaremanagement_v1_services_gen_proto_rawDescGZIP(), []int{8}
}

func (x *RepositorySomeResponse) GetValue() *Repository {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *RepositorySomeResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *RepositorySomeResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type RepositoryStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*Repository `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each Repository at end.
	//   - Each Repository response is fully-specified (all fields set).
	//   - start: Returns the state of each Repository at start, followed by updates until now.
	//   - Each Repository response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each Repository at start, followed by updates
	//     until end.
	//   - Each Repository response at start is fully-specified, but updates until end may
	//     be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *RepositoryStreamRequest) Reset() {
	*x = RepositoryStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryStreamRequest) ProtoMessage() {}

func (x *RepositoryStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryStreamRequest.ProtoReflect.Descriptor instead.
func (*RepositoryStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_softwaremanagement_v1_services_gen_proto_rawDescGZIP(), []int{9}
}

func (x *RepositoryStreamRequest) GetPartialEqFilter() []*Repository {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *RepositoryStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type RepositoryStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *Repository `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this Repository's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the Repository value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *RepositoryStreamResponse) Reset() {
	*x = RepositoryStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryStreamResponse) ProtoMessage() {}

func (x *RepositoryStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryStreamResponse.ProtoReflect.Descriptor instead.
func (*RepositoryStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_softwaremanagement_v1_services_gen_proto_rawDescGZIP(), []int{10}
}

func (x *RepositoryStreamResponse) GetValue() *Repository {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *RepositoryStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *RepositoryStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation(0)
}

type RepositoryBatchedStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*Repository `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each Repository at end.
	//   - Each Repository response is fully-specified (all fields set).
	//   - start: Returns the state of each Repository at start, followed by updates until now.
	//   - Each Repository response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each Repository at start, followed by updates
	//     until end.
	//   - Each Repository response at start is fully-specified, but updates until end may
	//     be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	// MaxMessages limits the maximum number of messages that can be contained in one batch.
	// MaxMessages is required to be at least 1.
	// The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
	// INTERNAL_BATCH_LIMIT is set based on the maximum message size.
	MaxMessages *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=max_messages,json=maxMessages,proto3" json:"max_messages,omitempty"`
}

func (x *RepositoryBatchedStreamRequest) Reset() {
	*x = RepositoryBatchedStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryBatchedStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryBatchedStreamRequest) ProtoMessage() {}

func (x *RepositoryBatchedStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryBatchedStreamRequest.ProtoReflect.Descriptor instead.
func (*RepositoryBatchedStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_softwaremanagement_v1_services_gen_proto_rawDescGZIP(), []int{11}
}

func (x *RepositoryBatchedStreamRequest) GetPartialEqFilter() []*Repository {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *RepositoryBatchedStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *RepositoryBatchedStreamRequest) GetMaxMessages() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxMessages
	}
	return nil
}

type RepositoryBatchedStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Values are the values deemed relevant to the initiating request.
	// The length of this structure is guaranteed to be between (inclusive) 1 and
	// min(req.max_messages, INTERNAL_BATCH_LIMIT).
	Responses []*RepositoryStreamResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *RepositoryBatchedStreamResponse) Reset() {
	*x = RepositoryBatchedStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryBatchedStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryBatchedStreamResponse) ProtoMessage() {}

func (x *RepositoryBatchedStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryBatchedStreamResponse.ProtoReflect.Descriptor instead.
func (*RepositoryBatchedStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_softwaremanagement_v1_services_gen_proto_rawDescGZIP(), []int{12}
}

func (x *RepositoryBatchedStreamResponse) GetResponses() []*RepositoryStreamResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type RepositoryConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a RepositoryConfig instance to retrieve.
	// This value must be populated.
	Key *RepositoryKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *RepositoryConfigRequest) Reset() {
	*x = RepositoryConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryConfigRequest) ProtoMessage() {}

func (x *RepositoryConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryConfigRequest.ProtoReflect.Descriptor instead.
func (*RepositoryConfigRequest) Descriptor() ([]byte, []int) {
	return file_arista_softwaremanagement_v1_services_gen_proto_rawDescGZIP(), []int{13}
}

func (x *RepositoryConfigRequest) GetKey() *RepositoryKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *RepositoryConfigRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type RepositoryConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *RepositoryConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// RepositoryConfig instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *RepositoryConfigResponse) Reset() {
	*x = RepositoryConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryConfigResponse) ProtoMessage() {}

func (x *RepositoryConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryConfigResponse.ProtoReflect.Descriptor instead.
func (*RepositoryConfigResponse) Descriptor() ([]byte, []int) {
	return file_arista_softwaremanagement_v1_services_gen_proto_rawDescGZIP(), []int{14}
}

func (x *RepositoryConfigResponse) GetValue() *RepositoryConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *RepositoryConfigResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type RepositoryConfigSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*RepositoryKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *RepositoryConfigSomeRequest) Reset() {
	*x = RepositoryConfigSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryConfigSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryConfigSomeRequest) ProtoMessage() {}

func (x *RepositoryConfigSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryConfigSomeRequest.ProtoReflect.Descriptor instead.
func (*RepositoryConfigSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_softwaremanagement_v1_services_gen_proto_rawDescGZIP(), []int{15}
}

func (x *RepositoryConfigSomeRequest) GetKeys() []*RepositoryKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *RepositoryConfigSomeRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type RepositoryConfigSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *RepositoryConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Time  *timestamppb.Timestamp  `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *RepositoryConfigSomeResponse) Reset() {
	*x = RepositoryConfigSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryConfigSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryConfigSomeResponse) ProtoMessage() {}

func (x *RepositoryConfigSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryConfigSomeResponse.ProtoReflect.Descriptor instead.
func (*RepositoryConfigSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_softwaremanagement_v1_services_gen_proto_rawDescGZIP(), []int{16}
}

func (x *RepositoryConfigSomeResponse) GetValue() *RepositoryConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *RepositoryConfigSomeResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *RepositoryConfigSomeResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type RepositoryConfigStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*RepositoryConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each RepositoryConfig at end.
	//   - Each RepositoryConfig response is fully-specified (all fields set).
	//   - start: Returns the state of each RepositoryConfig at start, followed by updates until now.
	//   - Each RepositoryConfig response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each RepositoryConfig at start, followed by updates
	//     until end.
	//   - Each RepositoryConfig response at start is fully-specified, but updates until end may
	//     be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *RepositoryConfigStreamRequest) Reset() {
	*x = RepositoryConfigStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryConfigStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryConfigStreamRequest) ProtoMessage() {}

func (x *RepositoryConfigStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryConfigStreamRequest.ProtoReflect.Descriptor instead.
func (*RepositoryConfigStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_softwaremanagement_v1_services_gen_proto_rawDescGZIP(), []int{17}
}

func (x *RepositoryConfigStreamRequest) GetPartialEqFilter() []*RepositoryConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *RepositoryConfigStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type RepositoryConfigStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *RepositoryConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this RepositoryConfig's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the RepositoryConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *RepositoryConfigStreamResponse) Reset() {
	*x = RepositoryConfigStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryConfigStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryConfigStreamResponse) ProtoMessage() {}

func (x *RepositoryConfigStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryConfigStreamResponse.ProtoReflect.Descriptor instead.
func (*RepositoryConfigStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_softwaremanagement_v1_services_gen_proto_rawDescGZIP(), []int{18}
}

func (x *RepositoryConfigStreamResponse) GetValue() *RepositoryConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *RepositoryConfigStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *RepositoryConfigStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation(0)
}

type RepositoryConfigBatchedStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*RepositoryConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each RepositoryConfig at end.
	//   - Each RepositoryConfig response is fully-specified (all fields set).
	//   - start: Returns the state of each RepositoryConfig at start, followed by updates until now.
	//   - Each RepositoryConfig response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each RepositoryConfig at start, followed by updates
	//     until end.
	//   - Each RepositoryConfig response at start is fully-specified, but updates until end may
	//     be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	// MaxMessages limits the maximum number of messages that can be contained in one batch.
	// MaxMessages is required to be at least 1.
	// The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
	// INTERNAL_BATCH_LIMIT is set based on the maximum message size.
	MaxMessages *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=max_messages,json=maxMessages,proto3" json:"max_messages,omitempty"`
}

func (x *RepositoryConfigBatchedStreamRequest) Reset() {
	*x = RepositoryConfigBatchedStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryConfigBatchedStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryConfigBatchedStreamRequest) ProtoMessage() {}

func (x *RepositoryConfigBatchedStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryConfigBatchedStreamRequest.ProtoReflect.Descriptor instead.
func (*RepositoryConfigBatchedStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_softwaremanagement_v1_services_gen_proto_rawDescGZIP(), []int{19}
}

func (x *RepositoryConfigBatchedStreamRequest) GetPartialEqFilter() []*RepositoryConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *RepositoryConfigBatchedStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *RepositoryConfigBatchedStreamRequest) GetMaxMessages() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxMessages
	}
	return nil
}

type RepositoryConfigBatchedStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Values are the values deemed relevant to the initiating request.
	// The length of this structure is guaranteed to be between (inclusive) 1 and
	// min(req.max_messages, INTERNAL_BATCH_LIMIT).
	Responses []*RepositoryConfigStreamResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *RepositoryConfigBatchedStreamResponse) Reset() {
	*x = RepositoryConfigBatchedStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryConfigBatchedStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryConfigBatchedStreamResponse) ProtoMessage() {}

func (x *RepositoryConfigBatchedStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryConfigBatchedStreamResponse.ProtoReflect.Descriptor instead.
func (*RepositoryConfigBatchedStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_softwaremanagement_v1_services_gen_proto_rawDescGZIP(), []int{20}
}

func (x *RepositoryConfigBatchedStreamResponse) GetResponses() []*RepositoryConfigStreamResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type RepositoryConfigSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RepositoryConfig carries the value to set into the datastore.
	// See the documentation on the RepositoryConfig struct for which fields are required.
	Value *RepositoryConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *RepositoryConfigSetRequest) Reset() {
	*x = RepositoryConfigSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryConfigSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryConfigSetRequest) ProtoMessage() {}

func (x *RepositoryConfigSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryConfigSetRequest.ProtoReflect.Descriptor instead.
func (*RepositoryConfigSetRequest) Descriptor() ([]byte, []int) {
	return file_arista_softwaremanagement_v1_services_gen_proto_rawDescGZIP(), []int{21}
}

func (x *RepositoryConfigSetRequest) GetValue() *RepositoryConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

type RepositoryConfigSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value carries all the values given in the RepositoryConfigSetRequest as well
	// as any server-generated values.
	Value *RepositoryConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//   - it is after the time the request was received
	//   - a time-ranged query with StartTime==CreatedAt will include this instance.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *RepositoryConfigSetResponse) Reset() {
	*x = RepositoryConfigSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryConfigSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryConfigSetResponse) ProtoMessage() {}

func (x *RepositoryConfigSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryConfigSetResponse.ProtoReflect.Descriptor instead.
func (*RepositoryConfigSetResponse) Descriptor() ([]byte, []int) {
	return file_arista_softwaremanagement_v1_services_gen_proto_rawDescGZIP(), []int{22}
}

func (x *RepositoryConfigSetResponse) GetValue() *RepositoryConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *RepositoryConfigSetResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type RepositoryConfigSetSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value contains a list of RepositoryConfig values to write.
	// It is possible to provide more values than can fit within either:
	//   - the maxiumum send size of the client
	//   - the maximum receive size of the server
	//
	// If this error occurs you must reduce the number of values sent.
	// See gRPC "maximum message size" documentation for more information.
	Values []*RepositoryConfig `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *RepositoryConfigSetSomeRequest) Reset() {
	*x = RepositoryConfigSetSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryConfigSetSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryConfigSetSomeRequest) ProtoMessage() {}

func (x *RepositoryConfigSetSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryConfigSetSomeRequest.ProtoReflect.Descriptor instead.
func (*RepositoryConfigSetSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_softwaremanagement_v1_services_gen_proto_rawDescGZIP(), []int{23}
}

func (x *RepositoryConfigSetSomeRequest) GetValues() []*RepositoryConfig {
	if x != nil {
		return x.Values
	}
	return nil
}

type RepositoryConfigSetSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *RepositoryKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Error string         `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *RepositoryConfigSetSomeResponse) Reset() {
	*x = RepositoryConfigSetSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryConfigSetSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryConfigSetSomeResponse) ProtoMessage() {}

func (x *RepositoryConfigSetSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryConfigSetSomeResponse.ProtoReflect.Descriptor instead.
func (*RepositoryConfigSetSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_softwaremanagement_v1_services_gen_proto_rawDescGZIP(), []int{24}
}

func (x *RepositoryConfigSetSomeResponse) GetKey() *RepositoryKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *RepositoryConfigSetSomeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type RepositoryConfigDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key indicates which RepositoryConfig instance to remove.
	// This field must always be set.
	Key *RepositoryKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *RepositoryConfigDeleteRequest) Reset() {
	*x = RepositoryConfigDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryConfigDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryConfigDeleteRequest) ProtoMessage() {}

func (x *RepositoryConfigDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryConfigDeleteRequest.ProtoReflect.Descriptor instead.
func (*RepositoryConfigDeleteRequest) Descriptor() ([]byte, []int) {
	return file_arista_softwaremanagement_v1_services_gen_proto_rawDescGZIP(), []int{25}
}

func (x *RepositoryConfigDeleteRequest) GetKey() *RepositoryKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type RepositoryConfigDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key echoes back the key of the deleted RepositoryConfig instance.
	Key *RepositoryKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//   - it is after the time the request was received
	//   - a time-ranged query with StartTime==DeletedAt will not include this instance.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *RepositoryConfigDeleteResponse) Reset() {
	*x = RepositoryConfigDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryConfigDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryConfigDeleteResponse) ProtoMessage() {}

func (x *RepositoryConfigDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryConfigDeleteResponse.ProtoReflect.Descriptor instead.
func (*RepositoryConfigDeleteResponse) Descriptor() ([]byte, []int) {
	return file_arista_softwaremanagement_v1_services_gen_proto_rawDescGZIP(), []int{26}
}

func (x *RepositoryConfigDeleteResponse) GetKey() *RepositoryKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *RepositoryConfigDeleteResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type RepositoryConfigDeleteSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key contains a list of RepositoryConfig keys to delete
	Keys []*RepositoryKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *RepositoryConfigDeleteSomeRequest) Reset() {
	*x = RepositoryConfigDeleteSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryConfigDeleteSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryConfigDeleteSomeRequest) ProtoMessage() {}

func (x *RepositoryConfigDeleteSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryConfigDeleteSomeRequest.ProtoReflect.Descriptor instead.
func (*RepositoryConfigDeleteSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_softwaremanagement_v1_services_gen_proto_rawDescGZIP(), []int{27}
}

func (x *RepositoryConfigDeleteSomeRequest) GetKeys() []*RepositoryKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

// RepositoryConfigDeleteSomeResponse is only sent when there is an error.
type RepositoryConfigDeleteSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *RepositoryKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Error string         `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *RepositoryConfigDeleteSomeResponse) Reset() {
	*x = RepositoryConfigDeleteSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryConfigDeleteSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryConfigDeleteSomeResponse) ProtoMessage() {}

func (x *RepositoryConfigDeleteSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryConfigDeleteSomeResponse.ProtoReflect.Descriptor instead.
func (*RepositoryConfigDeleteSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_softwaremanagement_v1_services_gen_proto_rawDescGZIP(), []int{28}
}

func (x *RepositoryConfigDeleteSomeResponse) GetKey() *RepositoryKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *RepositoryConfigDeleteSomeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type RepositoryConfigDeleteAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a DeleteAll.
	// This requires all provided fields to be equal to the response.
	// A filtered DeleteAll will use GetAll with filter to find things to delete.
	PartialEqFilter []*RepositoryConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
}

func (x *RepositoryConfigDeleteAllRequest) Reset() {
	*x = RepositoryConfigDeleteAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryConfigDeleteAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryConfigDeleteAllRequest) ProtoMessage() {}

func (x *RepositoryConfigDeleteAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryConfigDeleteAllRequest.ProtoReflect.Descriptor instead.
func (*RepositoryConfigDeleteAllRequest) Descriptor() ([]byte, []int) {
	return file_arista_softwaremanagement_v1_services_gen_proto_rawDescGZIP(), []int{29}
}

func (x *RepositoryConfigDeleteAllRequest) GetPartialEqFilter() []*RepositoryConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

type RepositoryConfigDeleteAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This describes the class of delete error.
	// A DeleteAllResponse is only sent when there is an error.
	Type fmp.DeleteError `protobuf:"varint,1,opt,name=type,proto3,enum=fmp.DeleteError" json:"type,omitempty"`
	// This indicates the error message from the delete failure.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// This is the key of the RepositoryConfig instance that failed to be deleted.
	Key *RepositoryKey `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp when the key was being deleted.
	Time *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *RepositoryConfigDeleteAllResponse) Reset() {
	*x = RepositoryConfigDeleteAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryConfigDeleteAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryConfigDeleteAllResponse) ProtoMessage() {}

func (x *RepositoryConfigDeleteAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryConfigDeleteAllResponse.ProtoReflect.Descriptor instead.
func (*RepositoryConfigDeleteAllResponse) Descriptor() ([]byte, []int) {
	return file_arista_softwaremanagement_v1_services_gen_proto_rawDescGZIP(), []int{30}
}

func (x *RepositoryConfigDeleteAllResponse) GetType() fmp.DeleteError {
	if x != nil {
		return x.Type
	}
	return fmp.DeleteError(0)
}

func (x *RepositoryConfigDeleteAllResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *RepositoryConfigDeleteAllResponse) GetKey() *RepositoryKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *RepositoryConfigDeleteAllResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

var File_arista_softwaremanagement_v1_services_gen_proto protoreflect.FileDescriptor

var file_arista_softwaremanagement_v1_services_gen_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72,
	0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x67, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x1c, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61,
	0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x1a,
	0x35, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2f, 0x73, 0x6f,
	0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x66, 0x6d, 0x70, 0x2f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa7, 0x01, 0x0a,
	0x0c, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x41, 0x0a, 0x0f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x10, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x98, 0x01, 0x0a,
	0x15, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77,
	0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xbb, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77,
	0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x12, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61,
	0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0x88, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x04, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x2e, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xbc, 0x01, 0x0a,
	0x16, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x6f, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x17,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74,
	0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x18, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xe4, 0x01, 0x0a,
	0x1e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x54, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x22, 0x77, 0x0a, 0x1f, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x88, 0x01, 0x0a,
	0x17, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4b,
	0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66,
	0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x1b, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x04, 0x6b, 0x65,
	0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xc8, 0x01, 0x0a, 0x1c,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66,
	0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0xcb, 0x01, 0x0a, 0x1e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66,
	0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0xf0, 0x01, 0x0a, 0x24, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66,
	0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x25, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x09,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72,
	0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x62, 0x0a, 0x1a, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x93, 0x01, 0x0a,
	0x1b, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0x68, 0x0a, 0x1e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f,
	0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x76, 0x0a, 0x1f,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x5e, 0x0a, 0x1d, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74,
	0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x22, 0x8f, 0x01, 0x0a, 0x1e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f,
	0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4b, 0x65,
	0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x64, 0x0a, 0x21, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x04, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x79, 0x0a, 0x22,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72,
	0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x7e, 0x0a, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x11, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45,
	0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xec, 0x01, 0x0a, 0x21, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x66, 0x6d,
	0x70, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f,
	0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4b, 0x65,
	0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x32, 0xdf, 0x03, 0x0a, 0x0f, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x67, 0x0a, 0x06, 0x47, 0x65,
	0x74, 0x4f, 0x6e, 0x65, 0x12, 0x2d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f,
	0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66,
	0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x33, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x34, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74,
	0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x78, 0x0a, 0x09, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x33, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x30, 0x01, 0x12, 0x72, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x33, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0xfa, 0x07, 0x0a, 0x11, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6b,
	0x0a, 0x06, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x12, 0x2f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x07, 0x47,
	0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x33, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x30, 0x01, 0x12, 0x79, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x35, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f,
	0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x7c,
	0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x35, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x36, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74,
	0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x6c, 0x0a, 0x07,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x35, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x0d, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x35, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74,
	0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01,
	0x12, 0x8e, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x12, 0x3c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74,
	0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61,
	0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30,
	0x01, 0x12, 0x91, 0x01, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x3c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f,
	0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0x89, 0x0e, 0x0a, 0x17, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x77, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x12, 0x35, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x36, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74,
	0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x07, 0x47,
	0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x39, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3a, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77,
	0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12,
	0x85, 0x01, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x3b, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x88, 0x01, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x3b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74,
	0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x30, 0x01, 0x12, 0x72, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x3b, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x3b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f,
	0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x30, 0x01, 0x12, 0x7a, 0x0a, 0x03, 0x53, 0x65, 0x74, 0x12, 0x38, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66,
	0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x88,
	0x01, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x3c, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x83, 0x01, 0x0a, 0x06, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x3b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f,
	0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77,
	0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x91, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x3f,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x40, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72,
	0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x30, 0x01, 0x12, 0x8e, 0x01, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c,
	0x6c, 0x12, 0x3e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77,
	0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77,
	0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x30, 0x01, 0x12, 0x9a, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x42, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30,
	0x01, 0x12, 0x9d, 0x01, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x42, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30,
	0x01, 0x42, 0x9e, 0x01, 0x0a, 0x20, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x42, 0x1a, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x50, 0x01, 0x5a, 0x5c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x6f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61,
	0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x3b,
	0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_arista_softwaremanagement_v1_services_gen_proto_rawDescOnce sync.Once
	file_arista_softwaremanagement_v1_services_gen_proto_rawDescData = file_arista_softwaremanagement_v1_services_gen_proto_rawDesc
)

func file_arista_softwaremanagement_v1_services_gen_proto_rawDescGZIP() []byte {
	file_arista_softwaremanagement_v1_services_gen_proto_rawDescOnce.Do(func() {
		file_arista_softwaremanagement_v1_services_gen_proto_rawDescData = protoimpl.X.CompressGZIP(file_arista_softwaremanagement_v1_services_gen_proto_rawDescData)
	})
	return file_arista_softwaremanagement_v1_services_gen_proto_rawDescData
}

var file_arista_softwaremanagement_v1_services_gen_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_arista_softwaremanagement_v1_services_gen_proto_goTypes = []interface{}{
	(*MetaResponse)(nil),                          // 0: arista.softwaremanagement.v1.MetaResponse
	(*ReleasesRequest)(nil),                       // 1: arista.softwaremanagement.v1.ReleasesRequest
	(*ReleasesResponse)(nil),                      // 2: arista.softwaremanagement.v1.ReleasesResponse
	(*ReleasesStreamRequest)(nil),                 // 3: arista.softwaremanagement.v1.ReleasesStreamRequest
	(*ReleasesStreamResponse)(nil),                // 4: arista.softwaremanagement.v1.ReleasesStreamResponse
	(*RepositoryRequest)(nil),                     // 5: arista.softwaremanagement.v1.RepositoryRequest
	(*RepositoryResponse)(nil),                    // 6: arista.softwaremanagement.v1.RepositoryResponse
	(*RepositorySomeRequest)(nil),                 // 7: arista.softwaremanagement.v1.RepositorySomeRequest
	(*RepositorySomeResponse)(nil),                // 8: arista.softwaremanagement.v1.RepositorySomeResponse
	(*RepositoryStreamRequest)(nil),               // 9: arista.softwaremanagement.v1.RepositoryStreamRequest
	(*RepositoryStreamResponse)(nil),              // 10: arista.softwaremanagement.v1.RepositoryStreamResponse
	(*RepositoryBatchedStreamRequest)(nil),        // 11: arista.softwaremanagement.v1.RepositoryBatchedStreamRequest
	(*RepositoryBatchedStreamResponse)(nil),       // 12: arista.softwaremanagement.v1.RepositoryBatchedStreamResponse
	(*RepositoryConfigRequest)(nil),               // 13: arista.softwaremanagement.v1.RepositoryConfigRequest
	(*RepositoryConfigResponse)(nil),              // 14: arista.softwaremanagement.v1.RepositoryConfigResponse
	(*RepositoryConfigSomeRequest)(nil),           // 15: arista.softwaremanagement.v1.RepositoryConfigSomeRequest
	(*RepositoryConfigSomeResponse)(nil),          // 16: arista.softwaremanagement.v1.RepositoryConfigSomeResponse
	(*RepositoryConfigStreamRequest)(nil),         // 17: arista.softwaremanagement.v1.RepositoryConfigStreamRequest
	(*RepositoryConfigStreamResponse)(nil),        // 18: arista.softwaremanagement.v1.RepositoryConfigStreamResponse
	(*RepositoryConfigBatchedStreamRequest)(nil),  // 19: arista.softwaremanagement.v1.RepositoryConfigBatchedStreamRequest
	(*RepositoryConfigBatchedStreamResponse)(nil), // 20: arista.softwaremanagement.v1.RepositoryConfigBatchedStreamResponse
	(*RepositoryConfigSetRequest)(nil),            // 21: arista.softwaremanagement.v1.RepositoryConfigSetRequest
	(*RepositoryConfigSetResponse)(nil),           // 22: arista.softwaremanagement.v1.RepositoryConfigSetResponse
	(*RepositoryConfigSetSomeRequest)(nil),        // 23: arista.softwaremanagement.v1.RepositoryConfigSetSomeRequest
	(*RepositoryConfigSetSomeResponse)(nil),       // 24: arista.softwaremanagement.v1.RepositoryConfigSetSomeResponse
	(*RepositoryConfigDeleteRequest)(nil),         // 25: arista.softwaremanagement.v1.RepositoryConfigDeleteRequest
	(*RepositoryConfigDeleteResponse)(nil),        // 26: arista.softwaremanagement.v1.RepositoryConfigDeleteResponse
	(*RepositoryConfigDeleteSomeRequest)(nil),     // 27: arista.softwaremanagement.v1.RepositoryConfigDeleteSomeRequest
	(*RepositoryConfigDeleteSomeResponse)(nil),    // 28: arista.softwaremanagement.v1.RepositoryConfigDeleteSomeResponse
	(*RepositoryConfigDeleteAllRequest)(nil),      // 29: arista.softwaremanagement.v1.RepositoryConfigDeleteAllRequest
	(*RepositoryConfigDeleteAllResponse)(nil),     // 30: arista.softwaremanagement.v1.RepositoryConfigDeleteAllResponse
	(*timestamppb.Timestamp)(nil),                 // 31: google.protobuf.Timestamp
	(subscriptions.Operation)(0),                  // 32: arista.subscriptions.Operation
	(*wrapperspb.UInt32Value)(nil),                // 33: google.protobuf.UInt32Value
	(*Releases)(nil),                              // 34: arista.softwaremanagement.v1.Releases
	(*time.TimeBounds)(nil),                       // 35: arista.time.TimeBounds
	(*RepositoryKey)(nil),                         // 36: arista.softwaremanagement.v1.RepositoryKey
	(*Repository)(nil),                            // 37: arista.softwaremanagement.v1.Repository
	(*wrapperspb.StringValue)(nil),                // 38: google.protobuf.StringValue
	(*RepositoryConfig)(nil),                      // 39: arista.softwaremanagement.v1.RepositoryConfig
	(fmp.DeleteError)(0),                          // 40: fmp.DeleteError
}
var file_arista_softwaremanagement_v1_services_gen_proto_depIdxs = []int32{
	31, // 0: arista.softwaremanagement.v1.MetaResponse.time:type_name -> google.protobuf.Timestamp
	32, // 1: arista.softwaremanagement.v1.MetaResponse.type:type_name -> arista.subscriptions.Operation
	33, // 2: arista.softwaremanagement.v1.MetaResponse.count:type_name -> google.protobuf.UInt32Value
	31, // 3: arista.softwaremanagement.v1.ReleasesRequest.time:type_name -> google.protobuf.Timestamp
	34, // 4: arista.softwaremanagement.v1.ReleasesResponse.value:type_name -> arista.softwaremanagement.v1.Releases
	31, // 5: arista.softwaremanagement.v1.ReleasesResponse.time:type_name -> google.protobuf.Timestamp
	34, // 6: arista.softwaremanagement.v1.ReleasesStreamRequest.partial_eq_filter:type_name -> arista.softwaremanagement.v1.Releases
	35, // 7: arista.softwaremanagement.v1.ReleasesStreamRequest.time:type_name -> arista.time.TimeBounds
	34, // 8: arista.softwaremanagement.v1.ReleasesStreamResponse.value:type_name -> arista.softwaremanagement.v1.Releases
	31, // 9: arista.softwaremanagement.v1.ReleasesStreamResponse.time:type_name -> google.protobuf.Timestamp
	32, // 10: arista.softwaremanagement.v1.ReleasesStreamResponse.type:type_name -> arista.subscriptions.Operation
	36, // 11: arista.softwaremanagement.v1.RepositoryRequest.key:type_name -> arista.softwaremanagement.v1.RepositoryKey
	31, // 12: arista.softwaremanagement.v1.RepositoryRequest.time:type_name -> google.protobuf.Timestamp
	37, // 13: arista.softwaremanagement.v1.RepositoryResponse.value:type_name -> arista.softwaremanagement.v1.Repository
	31, // 14: arista.softwaremanagement.v1.RepositoryResponse.time:type_name -> google.protobuf.Timestamp
	36, // 15: arista.softwaremanagement.v1.RepositorySomeRequest.keys:type_name -> arista.softwaremanagement.v1.RepositoryKey
	31, // 16: arista.softwaremanagement.v1.RepositorySomeRequest.time:type_name -> google.protobuf.Timestamp
	37, // 17: arista.softwaremanagement.v1.RepositorySomeResponse.value:type_name -> arista.softwaremanagement.v1.Repository
	38, // 18: arista.softwaremanagement.v1.RepositorySomeResponse.error:type_name -> google.protobuf.StringValue
	31, // 19: arista.softwaremanagement.v1.RepositorySomeResponse.time:type_name -> google.protobuf.Timestamp
	37, // 20: arista.softwaremanagement.v1.RepositoryStreamRequest.partial_eq_filter:type_name -> arista.softwaremanagement.v1.Repository
	35, // 21: arista.softwaremanagement.v1.RepositoryStreamRequest.time:type_name -> arista.time.TimeBounds
	37, // 22: arista.softwaremanagement.v1.RepositoryStreamResponse.value:type_name -> arista.softwaremanagement.v1.Repository
	31, // 23: arista.softwaremanagement.v1.RepositoryStreamResponse.time:type_name -> google.protobuf.Timestamp
	32, // 24: arista.softwaremanagement.v1.RepositoryStreamResponse.type:type_name -> arista.subscriptions.Operation
	37, // 25: arista.softwaremanagement.v1.RepositoryBatchedStreamRequest.partial_eq_filter:type_name -> arista.softwaremanagement.v1.Repository
	35, // 26: arista.softwaremanagement.v1.RepositoryBatchedStreamRequest.time:type_name -> arista.time.TimeBounds
	33, // 27: arista.softwaremanagement.v1.RepositoryBatchedStreamRequest.max_messages:type_name -> google.protobuf.UInt32Value
	10, // 28: arista.softwaremanagement.v1.RepositoryBatchedStreamResponse.responses:type_name -> arista.softwaremanagement.v1.RepositoryStreamResponse
	36, // 29: arista.softwaremanagement.v1.RepositoryConfigRequest.key:type_name -> arista.softwaremanagement.v1.RepositoryKey
	31, // 30: arista.softwaremanagement.v1.RepositoryConfigRequest.time:type_name -> google.protobuf.Timestamp
	39, // 31: arista.softwaremanagement.v1.RepositoryConfigResponse.value:type_name -> arista.softwaremanagement.v1.RepositoryConfig
	31, // 32: arista.softwaremanagement.v1.RepositoryConfigResponse.time:type_name -> google.protobuf.Timestamp
	36, // 33: arista.softwaremanagement.v1.RepositoryConfigSomeRequest.keys:type_name -> arista.softwaremanagement.v1.RepositoryKey
	31, // 34: arista.softwaremanagement.v1.RepositoryConfigSomeRequest.time:type_name -> google.protobuf.Timestamp
	39, // 35: arista.softwaremanagement.v1.RepositoryConfigSomeResponse.value:type_name -> arista.softwaremanagement.v1.RepositoryConfig
	38, // 36: arista.softwaremanagement.v1.RepositoryConfigSomeResponse.error:type_name -> google.protobuf.StringValue
	31, // 37: arista.softwaremanagement.v1.RepositoryConfigSomeResponse.time:type_name -> google.protobuf.Timestamp
	39, // 38: arista.softwaremanagement.v1.RepositoryConfigStreamRequest.partial_eq_filter:type_name -> arista.softwaremanagement.v1.RepositoryConfig
	35, // 39: arista.softwaremanagement.v1.RepositoryConfigStreamRequest.time:type_name -> arista.time.TimeBounds
	39, // 40: arista.softwaremanagement.v1.RepositoryConfigStreamResponse.value:type_name -> arista.softwaremanagement.v1.RepositoryConfig
	31, // 41: arista.softwaremanagement.v1.RepositoryConfigStreamResponse.time:type_name -> google.protobuf.Timestamp
	32, // 42: arista.softwaremanagement.v1.RepositoryConfigStreamResponse.type:type_name -> arista.subscriptions.Operation
	39, // 43: arista.softwaremanagement.v1.RepositoryConfigBatchedStreamRequest.partial_eq_filter:type_name -> arista.softwaremanagement.v1.RepositoryConfig
	35, // 44: arista.softwaremanagement.v1.RepositoryConfigBatchedStreamRequest.time:type_name -> arista.time.TimeBounds
	33, // 45: arista.softwaremanagement.v1.RepositoryConfigBatchedStreamRequest.max_messages:type_name -> google.protobuf.UInt32Value
	18, // 46: arista.softwaremanagement.v1.RepositoryConfigBatchedStreamResponse.responses:type_name -> arista.softwaremanagement.v1.RepositoryConfigStreamResponse
	39, // 47: arista.softwaremanagement.v1.RepositoryConfigSetRequest.value:type_name -> arista.softwaremanagement.v1.RepositoryConfig
	39, // 48: arista.softwaremanagement.v1.RepositoryConfigSetResponse.value:type_name -> arista.softwaremanagement.v1.RepositoryConfig
	31, // 49: arista.softwaremanagement.v1.RepositoryConfigSetResponse.time:type_name -> google.protobuf.Timestamp
	39, // 50: arista.softwaremanagement.v1.RepositoryConfigSetSomeRequest.values:type_name -> arista.softwaremanagement.v1.RepositoryConfig
	36, // 51: arista.softwaremanagement.v1.RepositoryConfigSetSomeResponse.key:type_name -> arista.softwaremanagement.v1.RepositoryKey
	36, // 52: arista.softwaremanagement.v1.RepositoryConfigDeleteRequest.key:type_name -> arista.softwaremanagement.v1.RepositoryKey
	36, // 53: arista.softwaremanagement.v1.RepositoryConfigDeleteResponse.key:type_name -> arista.softwaremanagement.v1.RepositoryKey
	31, // 54: arista.softwaremanagement.v1.RepositoryConfigDeleteResponse.time:type_name -> google.protobuf.Timestamp
	36, // 55: arista.softwaremanagement.v1.RepositoryConfigDeleteSomeRequest.keys:type_name -> arista.softwaremanagement.v1.RepositoryKey
	36, // 56: arista.softwaremanagement.v1.RepositoryConfigDeleteSomeResponse.key:type_name -> arista.softwaremanagement.v1.RepositoryKey
	39, // 57: arista.softwaremanagement.v1.RepositoryConfigDeleteAllRequest.partial_eq_filter:type_name -> arista.softwaremanagement.v1.RepositoryConfig
	40, // 58: arista.softwaremanagement.v1.RepositoryConfigDeleteAllResponse.type:type_name -> fmp.DeleteError
	38, // 59: arista.softwaremanagement.v1.RepositoryConfigDeleteAllResponse.error:type_name -> google.protobuf.StringValue
	36, // 60: arista.softwaremanagement.v1.RepositoryConfigDeleteAllResponse.key:type_name -> arista.softwaremanagement.v1.RepositoryKey
	31, // 61: arista.softwaremanagement.v1.RepositoryConfigDeleteAllResponse.time:type_name -> google.protobuf.Timestamp
	1,  // 62: arista.softwaremanagement.v1.ReleasesService.GetOne:input_type -> arista.softwaremanagement.v1.ReleasesRequest
	3,  // 63: arista.softwaremanagement.v1.ReleasesService.GetAll:input_type -> arista.softwaremanagement.v1.ReleasesStreamRequest
	3,  // 64: arista.softwaremanagement.v1.ReleasesService.Subscribe:input_type -> arista.softwaremanagement.v1.ReleasesStreamRequest
	3,  // 65: arista.softwaremanagement.v1.ReleasesService.SubscribeMeta:input_type -> arista.softwaremanagement.v1.ReleasesStreamRequest
	5,  // 66: arista.softwaremanagement.v1.RepositoryService.GetOne:input_type -> arista.softwaremanagement.v1.RepositoryRequest
	7,  // 67: arista.softwaremanagement.v1.RepositoryService.GetSome:input_type -> arista.softwaremanagement.v1.RepositorySomeRequest
	9,  // 68: arista.softwaremanagement.v1.RepositoryService.GetAll:input_type -> arista.softwaremanagement.v1.RepositoryStreamRequest
	9,  // 69: arista.softwaremanagement.v1.RepositoryService.Subscribe:input_type -> arista.softwaremanagement.v1.RepositoryStreamRequest
	9,  // 70: arista.softwaremanagement.v1.RepositoryService.GetMeta:input_type -> arista.softwaremanagement.v1.RepositoryStreamRequest
	9,  // 71: arista.softwaremanagement.v1.RepositoryService.SubscribeMeta:input_type -> arista.softwaremanagement.v1.RepositoryStreamRequest
	11, // 72: arista.softwaremanagement.v1.RepositoryService.GetAllBatched:input_type -> arista.softwaremanagement.v1.RepositoryBatchedStreamRequest
	11, // 73: arista.softwaremanagement.v1.RepositoryService.SubscribeBatched:input_type -> arista.softwaremanagement.v1.RepositoryBatchedStreamRequest
	13, // 74: arista.softwaremanagement.v1.RepositoryConfigService.GetOne:input_type -> arista.softwaremanagement.v1.RepositoryConfigRequest
	15, // 75: arista.softwaremanagement.v1.RepositoryConfigService.GetSome:input_type -> arista.softwaremanagement.v1.RepositoryConfigSomeRequest
	17, // 76: arista.softwaremanagement.v1.RepositoryConfigService.GetAll:input_type -> arista.softwaremanagement.v1.RepositoryConfigStreamRequest
	17, // 77: arista.softwaremanagement.v1.RepositoryConfigService.Subscribe:input_type -> arista.softwaremanagement.v1.RepositoryConfigStreamRequest
	17, // 78: arista.softwaremanagement.v1.RepositoryConfigService.GetMeta:input_type -> arista.softwaremanagement.v1.RepositoryConfigStreamRequest
	17, // 79: arista.softwaremanagement.v1.RepositoryConfigService.SubscribeMeta:input_type -> arista.softwaremanagement.v1.RepositoryConfigStreamRequest
	21, // 80: arista.softwaremanagement.v1.RepositoryConfigService.Set:input_type -> arista.softwaremanagement.v1.RepositoryConfigSetRequest
	23, // 81: arista.softwaremanagement.v1.RepositoryConfigService.SetSome:input_type -> arista.softwaremanagement.v1.RepositoryConfigSetSomeRequest
	25, // 82: arista.softwaremanagement.v1.RepositoryConfigService.Delete:input_type -> arista.softwaremanagement.v1.RepositoryConfigDeleteRequest
	27, // 83: arista.softwaremanagement.v1.RepositoryConfigService.DeleteSome:input_type -> arista.softwaremanagement.v1.RepositoryConfigDeleteSomeRequest
	29, // 84: arista.softwaremanagement.v1.RepositoryConfigService.DeleteAll:input_type -> arista.softwaremanagement.v1.RepositoryConfigDeleteAllRequest
	19, // 85: arista.softwaremanagement.v1.RepositoryConfigService.GetAllBatched:input_type -> arista.softwaremanagement.v1.RepositoryConfigBatchedStreamRequest
	19, // 86: arista.softwaremanagement.v1.RepositoryConfigService.SubscribeBatched:input_type -> arista.softwaremanagement.v1.RepositoryConfigBatchedStreamRequest
	2,  // 87: arista.softwaremanagement.v1.ReleasesService.GetOne:output_type -> arista.softwaremanagement.v1.ReleasesResponse
	4,  // 88: arista.softwaremanagement.v1.ReleasesService.GetAll:output_type -> arista.softwaremanagement.v1.ReleasesStreamResponse
	4,  // 89: arista.softwaremanagement.v1.ReleasesService.Subscribe:output_type -> arista.softwaremanagement.v1.ReleasesStreamResponse
	0,  // 90: arista.softwaremanagement.v1.ReleasesService.SubscribeMeta:output_type -> arista.softwaremanagement.v1.MetaResponse
	6,  // 91: arista.softwaremanagement.v1.RepositoryService.GetOne:output_type -> arista.softwaremanagement.v1.RepositoryResponse
	8,  // 92: arista.softwaremanagement.v1.RepositoryService.GetSome:output_type -> arista.softwaremanagement.v1.RepositorySomeResponse
	10, // 93: arista.softwaremanagement.v1.RepositoryService.GetAll:output_type -> arista.softwaremanagement.v1.RepositoryStreamResponse
	10, // 94: arista.softwaremanagement.v1.RepositoryService.Subscribe:output_type -> arista.softwaremanagement.v1.RepositoryStreamResponse
	0,  // 95: arista.softwaremanagement.v1.RepositoryService.GetMeta:output_type -> arista.softwaremanagement.v1.MetaResponse
	0,  // 96: arista.softwaremanagement.v1.RepositoryService.SubscribeMeta:output_type -> arista.softwaremanagement.v1.MetaResponse
	12, // 97: arista.softwaremanagement.v1.RepositoryService.GetAllBatched:output_type -> arista.softwaremanagement.v1.RepositoryBatchedStreamResponse
	12, // 98: arista.softwaremanagement.v1.RepositoryService.SubscribeBatched:output_type -> arista.softwaremanagement.v1.RepositoryBatchedStreamResponse
	14, // 99: arista.softwaremanagement.v1.RepositoryConfigService.GetOne:output_type -> arista.softwaremanagement.v1.RepositoryConfigResponse
	16, // 100: arista.softwaremanagement.v1.RepositoryConfigService.GetSome:output_type -> arista.softwaremanagement.v1.RepositoryConfigSomeResponse
	18, // 101: arista.softwaremanagement.v1.RepositoryConfigService.GetAll:output_type -> arista.softwaremanagement.v1.RepositoryConfigStreamResponse
	18, // 102: arista.softwaremanagement.v1.RepositoryConfigService.Subscribe:output_type -> arista.softwaremanagement.v1.RepositoryConfigStreamResponse
	0,  // 103: arista.softwaremanagement.v1.RepositoryConfigService.GetMeta:output_type -> arista.softwaremanagement.v1.MetaResponse
	0,  // 104: arista.softwaremanagement.v1.RepositoryConfigService.SubscribeMeta:output_type -> arista.softwaremanagement.v1.MetaResponse
	22, // 105: arista.softwaremanagement.v1.RepositoryConfigService.Set:output_type -> arista.softwaremanagement.v1.RepositoryConfigSetResponse
	24, // 106: arista.softwaremanagement.v1.RepositoryConfigService.SetSome:output_type -> arista.softwaremanagement.v1.RepositoryConfigSetSomeResponse
	26, // 107: arista.softwaremanagement.v1.RepositoryConfigService.Delete:output_type -> arista.softwaremanagement.v1.RepositoryConfigDeleteResponse
	28, // 108: arista.softwaremanagement.v1.RepositoryConfigService.DeleteSome:output_type -> arista.softwaremanagement.v1.RepositoryConfigDeleteSomeResponse
	30, // 109: arista.softwaremanagement.v1.RepositoryConfigService.DeleteAll:output_type -> arista.softwaremanagement.v1.RepositoryConfigDeleteAllResponse
	20, // 110: arista.softwaremanagement.v1.RepositoryConfigService.GetAllBatched:output_type -> arista.softwaremanagement.v1.RepositoryConfigBatchedStreamResponse
	20, // 111: arista.softwaremanagement.v1.RepositoryConfigService.SubscribeBatched:output_type -> arista.softwaremanagement.v1.RepositoryConfigBatchedStreamResponse
	87, // [87:112] is the sub-list for method output_type
	62, // [62:87] is the sub-list for method input_type
	62, // [62:62] is the sub-list for extension type_name
	62, // [62:62] is the sub-list for extension extendee
	0,  // [0:62] is the sub-list for field type_name
}

func init() { file_arista_softwaremanagement_v1_services_gen_proto_init() }
func file_arista_softwaremanagement_v1_services_gen_proto_init() {
	if File_arista_softwaremanagement_v1_services_gen_proto != nil {
		return
	}
	file_arista_softwaremanagement_v1_softwaremanagement_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleasesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleasesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleasesStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleasesStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositorySomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositorySomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryBatchedStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryBatchedStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryConfigSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryConfigSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryConfigStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryConfigStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryConfigBatchedStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryConfigBatchedStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryConfigSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryConfigSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryConfigSetSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryConfigSetSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryConfigDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryConfigDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryConfigDeleteSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryConfigDeleteSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryConfigDeleteAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_softwaremanagement_v1_services_gen_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryConfigDeleteAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_arista_softwaremanagement_v1_services_gen_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_arista_softwaremanagement_v1_services_gen_proto_goTypes,
		DependencyIndexes: file_arista_softwaremanagement_v1_services_gen_proto_depIdxs,
		MessageInfos:      file_arista_softwaremanagement_v1_services_gen_proto_msgTypes,
	}.Build()
	File_arista_softwaremanagement_v1_services_gen_proto = out.File
	file_arista_softwaremanagement_v1_services_gen_proto_rawDesc = nil
	file_arista_softwaremanagement_v1_services_gen_proto_goTypes = nil
	file_arista_softwaremanagement_v1_services_gen_proto_depIdxs = nil
}
