// Copyright (c) 2023 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

// EOS images, Streaming Agent, and other extensions in CloudVision are managed using this
// resource API. Images and extensions can be added, deleted and updated.
//
// New software is added to CloudVision either by uploading files directly from your computer using
// the Software Upload REST API or by downloading them from Arista's Software Download site using
// this resource API. To upload software using the Software Upload REST API in CloudVision, navigate
// to Settings > Developer Tools > REST API Explorer > softwareRepository.
//
// No matter how the image or extension is added, you can use the resource API to update or delete
// it.

//
// Code generated by boomtown. DO NOT EDIT.
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: arista/softwaremanagement.v1/services.gen.proto

package softwaremanagement

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ReleasesService_GetOne_FullMethodName        = "/arista.softwaremanagement.v1.ReleasesService/GetOne"
	ReleasesService_GetAll_FullMethodName        = "/arista.softwaremanagement.v1.ReleasesService/GetAll"
	ReleasesService_Subscribe_FullMethodName     = "/arista.softwaremanagement.v1.ReleasesService/Subscribe"
	ReleasesService_SubscribeMeta_FullMethodName = "/arista.softwaremanagement.v1.ReleasesService/SubscribeMeta"
)

// ReleasesServiceClient is the client API for ReleasesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReleasesServiceClient interface {
	GetOne(ctx context.Context, in *ReleasesRequest, opts ...grpc.CallOption) (*ReleasesResponse, error)
	GetAll(ctx context.Context, in *ReleasesStreamRequest, opts ...grpc.CallOption) (ReleasesService_GetAllClient, error)
	Subscribe(ctx context.Context, in *ReleasesStreamRequest, opts ...grpc.CallOption) (ReleasesService_SubscribeClient, error)
	SubscribeMeta(ctx context.Context, in *ReleasesStreamRequest, opts ...grpc.CallOption) (ReleasesService_SubscribeMetaClient, error)
}

type releasesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReleasesServiceClient(cc grpc.ClientConnInterface) ReleasesServiceClient {
	return &releasesServiceClient{cc}
}

func (c *releasesServiceClient) GetOne(ctx context.Context, in *ReleasesRequest, opts ...grpc.CallOption) (*ReleasesResponse, error) {
	out := new(ReleasesResponse)
	err := c.cc.Invoke(ctx, ReleasesService_GetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releasesServiceClient) GetAll(ctx context.Context, in *ReleasesStreamRequest, opts ...grpc.CallOption) (ReleasesService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &ReleasesService_ServiceDesc.Streams[0], ReleasesService_GetAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &releasesServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ReleasesService_GetAllClient interface {
	Recv() (*ReleasesStreamResponse, error)
	grpc.ClientStream
}

type releasesServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *releasesServiceGetAllClient) Recv() (*ReleasesStreamResponse, error) {
	m := new(ReleasesStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *releasesServiceClient) Subscribe(ctx context.Context, in *ReleasesStreamRequest, opts ...grpc.CallOption) (ReleasesService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ReleasesService_ServiceDesc.Streams[1], ReleasesService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &releasesServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ReleasesService_SubscribeClient interface {
	Recv() (*ReleasesStreamResponse, error)
	grpc.ClientStream
}

type releasesServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *releasesServiceSubscribeClient) Recv() (*ReleasesStreamResponse, error) {
	m := new(ReleasesStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *releasesServiceClient) SubscribeMeta(ctx context.Context, in *ReleasesStreamRequest, opts ...grpc.CallOption) (ReleasesService_SubscribeMetaClient, error) {
	stream, err := c.cc.NewStream(ctx, &ReleasesService_ServiceDesc.Streams[2], ReleasesService_SubscribeMeta_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &releasesServiceSubscribeMetaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ReleasesService_SubscribeMetaClient interface {
	Recv() (*MetaResponse, error)
	grpc.ClientStream
}

type releasesServiceSubscribeMetaClient struct {
	grpc.ClientStream
}

func (x *releasesServiceSubscribeMetaClient) Recv() (*MetaResponse, error) {
	m := new(MetaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ReleasesServiceServer is the server API for ReleasesService service.
// All implementations must embed UnimplementedReleasesServiceServer
// for forward compatibility
type ReleasesServiceServer interface {
	GetOne(context.Context, *ReleasesRequest) (*ReleasesResponse, error)
	GetAll(*ReleasesStreamRequest, ReleasesService_GetAllServer) error
	Subscribe(*ReleasesStreamRequest, ReleasesService_SubscribeServer) error
	SubscribeMeta(*ReleasesStreamRequest, ReleasesService_SubscribeMetaServer) error
	mustEmbedUnimplementedReleasesServiceServer()
}

// UnimplementedReleasesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReleasesServiceServer struct {
}

func (UnimplementedReleasesServiceServer) GetOne(context.Context, *ReleasesRequest) (*ReleasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedReleasesServiceServer) GetAll(*ReleasesStreamRequest, ReleasesService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedReleasesServiceServer) Subscribe(*ReleasesStreamRequest, ReleasesService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedReleasesServiceServer) SubscribeMeta(*ReleasesStreamRequest, ReleasesService_SubscribeMetaServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMeta not implemented")
}
func (UnimplementedReleasesServiceServer) mustEmbedUnimplementedReleasesServiceServer() {}

// UnsafeReleasesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReleasesServiceServer will
// result in compilation errors.
type UnsafeReleasesServiceServer interface {
	mustEmbedUnimplementedReleasesServiceServer()
}

func RegisterReleasesServiceServer(s grpc.ServiceRegistrar, srv ReleasesServiceServer) {
	s.RegisterService(&ReleasesService_ServiceDesc, srv)
}

func _ReleasesService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleasesServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReleasesService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleasesServiceServer).GetOne(ctx, req.(*ReleasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReleasesService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReleasesStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReleasesServiceServer).GetAll(m, &releasesServiceGetAllServer{stream})
}

type ReleasesService_GetAllServer interface {
	Send(*ReleasesStreamResponse) error
	grpc.ServerStream
}

type releasesServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *releasesServiceGetAllServer) Send(m *ReleasesStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ReleasesService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReleasesStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReleasesServiceServer).Subscribe(m, &releasesServiceSubscribeServer{stream})
}

type ReleasesService_SubscribeServer interface {
	Send(*ReleasesStreamResponse) error
	grpc.ServerStream
}

type releasesServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *releasesServiceSubscribeServer) Send(m *ReleasesStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ReleasesService_SubscribeMeta_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReleasesStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReleasesServiceServer).SubscribeMeta(m, &releasesServiceSubscribeMetaServer{stream})
}

type ReleasesService_SubscribeMetaServer interface {
	Send(*MetaResponse) error
	grpc.ServerStream
}

type releasesServiceSubscribeMetaServer struct {
	grpc.ServerStream
}

func (x *releasesServiceSubscribeMetaServer) Send(m *MetaResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ReleasesService_ServiceDesc is the grpc.ServiceDesc for ReleasesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReleasesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.softwaremanagement.v1.ReleasesService",
	HandlerType: (*ReleasesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _ReleasesService_GetOne_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAll",
			Handler:       _ReleasesService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _ReleasesService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeMeta",
			Handler:       _ReleasesService_SubscribeMeta_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/softwaremanagement.v1/services.gen.proto",
}

const (
	RepositoryService_GetOne_FullMethodName           = "/arista.softwaremanagement.v1.RepositoryService/GetOne"
	RepositoryService_GetSome_FullMethodName          = "/arista.softwaremanagement.v1.RepositoryService/GetSome"
	RepositoryService_GetAll_FullMethodName           = "/arista.softwaremanagement.v1.RepositoryService/GetAll"
	RepositoryService_Subscribe_FullMethodName        = "/arista.softwaremanagement.v1.RepositoryService/Subscribe"
	RepositoryService_GetMeta_FullMethodName          = "/arista.softwaremanagement.v1.RepositoryService/GetMeta"
	RepositoryService_SubscribeMeta_FullMethodName    = "/arista.softwaremanagement.v1.RepositoryService/SubscribeMeta"
	RepositoryService_GetAllBatched_FullMethodName    = "/arista.softwaremanagement.v1.RepositoryService/GetAllBatched"
	RepositoryService_SubscribeBatched_FullMethodName = "/arista.softwaremanagement.v1.RepositoryService/SubscribeBatched"
)

// RepositoryServiceClient is the client API for RepositoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RepositoryServiceClient interface {
	GetOne(ctx context.Context, in *RepositoryRequest, opts ...grpc.CallOption) (*RepositoryResponse, error)
	GetSome(ctx context.Context, in *RepositorySomeRequest, opts ...grpc.CallOption) (RepositoryService_GetSomeClient, error)
	GetAll(ctx context.Context, in *RepositoryStreamRequest, opts ...grpc.CallOption) (RepositoryService_GetAllClient, error)
	Subscribe(ctx context.Context, in *RepositoryStreamRequest, opts ...grpc.CallOption) (RepositoryService_SubscribeClient, error)
	GetMeta(ctx context.Context, in *RepositoryStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error)
	SubscribeMeta(ctx context.Context, in *RepositoryStreamRequest, opts ...grpc.CallOption) (RepositoryService_SubscribeMetaClient, error)
	GetAllBatched(ctx context.Context, in *RepositoryBatchedStreamRequest, opts ...grpc.CallOption) (RepositoryService_GetAllBatchedClient, error)
	SubscribeBatched(ctx context.Context, in *RepositoryBatchedStreamRequest, opts ...grpc.CallOption) (RepositoryService_SubscribeBatchedClient, error)
}

type repositoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRepositoryServiceClient(cc grpc.ClientConnInterface) RepositoryServiceClient {
	return &repositoryServiceClient{cc}
}

func (c *repositoryServiceClient) GetOne(ctx context.Context, in *RepositoryRequest, opts ...grpc.CallOption) (*RepositoryResponse, error) {
	out := new(RepositoryResponse)
	err := c.cc.Invoke(ctx, RepositoryService_GetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) GetSome(ctx context.Context, in *RepositorySomeRequest, opts ...grpc.CallOption) (RepositoryService_GetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &RepositoryService_ServiceDesc.Streams[0], RepositoryService_GetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &repositoryServiceGetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RepositoryService_GetSomeClient interface {
	Recv() (*RepositorySomeResponse, error)
	grpc.ClientStream
}

type repositoryServiceGetSomeClient struct {
	grpc.ClientStream
}

func (x *repositoryServiceGetSomeClient) Recv() (*RepositorySomeResponse, error) {
	m := new(RepositorySomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *repositoryServiceClient) GetAll(ctx context.Context, in *RepositoryStreamRequest, opts ...grpc.CallOption) (RepositoryService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &RepositoryService_ServiceDesc.Streams[1], RepositoryService_GetAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &repositoryServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RepositoryService_GetAllClient interface {
	Recv() (*RepositoryStreamResponse, error)
	grpc.ClientStream
}

type repositoryServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *repositoryServiceGetAllClient) Recv() (*RepositoryStreamResponse, error) {
	m := new(RepositoryStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *repositoryServiceClient) Subscribe(ctx context.Context, in *RepositoryStreamRequest, opts ...grpc.CallOption) (RepositoryService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &RepositoryService_ServiceDesc.Streams[2], RepositoryService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &repositoryServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RepositoryService_SubscribeClient interface {
	Recv() (*RepositoryStreamResponse, error)
	grpc.ClientStream
}

type repositoryServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *repositoryServiceSubscribeClient) Recv() (*RepositoryStreamResponse, error) {
	m := new(RepositoryStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *repositoryServiceClient) GetMeta(ctx context.Context, in *RepositoryStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error) {
	out := new(MetaResponse)
	err := c.cc.Invoke(ctx, RepositoryService_GetMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) SubscribeMeta(ctx context.Context, in *RepositoryStreamRequest, opts ...grpc.CallOption) (RepositoryService_SubscribeMetaClient, error) {
	stream, err := c.cc.NewStream(ctx, &RepositoryService_ServiceDesc.Streams[3], RepositoryService_SubscribeMeta_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &repositoryServiceSubscribeMetaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RepositoryService_SubscribeMetaClient interface {
	Recv() (*MetaResponse, error)
	grpc.ClientStream
}

type repositoryServiceSubscribeMetaClient struct {
	grpc.ClientStream
}

func (x *repositoryServiceSubscribeMetaClient) Recv() (*MetaResponse, error) {
	m := new(MetaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *repositoryServiceClient) GetAllBatched(ctx context.Context, in *RepositoryBatchedStreamRequest, opts ...grpc.CallOption) (RepositoryService_GetAllBatchedClient, error) {
	stream, err := c.cc.NewStream(ctx, &RepositoryService_ServiceDesc.Streams[4], RepositoryService_GetAllBatched_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &repositoryServiceGetAllBatchedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RepositoryService_GetAllBatchedClient interface {
	Recv() (*RepositoryBatchedStreamResponse, error)
	grpc.ClientStream
}

type repositoryServiceGetAllBatchedClient struct {
	grpc.ClientStream
}

func (x *repositoryServiceGetAllBatchedClient) Recv() (*RepositoryBatchedStreamResponse, error) {
	m := new(RepositoryBatchedStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *repositoryServiceClient) SubscribeBatched(ctx context.Context, in *RepositoryBatchedStreamRequest, opts ...grpc.CallOption) (RepositoryService_SubscribeBatchedClient, error) {
	stream, err := c.cc.NewStream(ctx, &RepositoryService_ServiceDesc.Streams[5], RepositoryService_SubscribeBatched_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &repositoryServiceSubscribeBatchedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RepositoryService_SubscribeBatchedClient interface {
	Recv() (*RepositoryBatchedStreamResponse, error)
	grpc.ClientStream
}

type repositoryServiceSubscribeBatchedClient struct {
	grpc.ClientStream
}

func (x *repositoryServiceSubscribeBatchedClient) Recv() (*RepositoryBatchedStreamResponse, error) {
	m := new(RepositoryBatchedStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RepositoryServiceServer is the server API for RepositoryService service.
// All implementations must embed UnimplementedRepositoryServiceServer
// for forward compatibility
type RepositoryServiceServer interface {
	GetOne(context.Context, *RepositoryRequest) (*RepositoryResponse, error)
	GetSome(*RepositorySomeRequest, RepositoryService_GetSomeServer) error
	GetAll(*RepositoryStreamRequest, RepositoryService_GetAllServer) error
	Subscribe(*RepositoryStreamRequest, RepositoryService_SubscribeServer) error
	GetMeta(context.Context, *RepositoryStreamRequest) (*MetaResponse, error)
	SubscribeMeta(*RepositoryStreamRequest, RepositoryService_SubscribeMetaServer) error
	GetAllBatched(*RepositoryBatchedStreamRequest, RepositoryService_GetAllBatchedServer) error
	SubscribeBatched(*RepositoryBatchedStreamRequest, RepositoryService_SubscribeBatchedServer) error
	mustEmbedUnimplementedRepositoryServiceServer()
}

// UnimplementedRepositoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRepositoryServiceServer struct {
}

func (UnimplementedRepositoryServiceServer) GetOne(context.Context, *RepositoryRequest) (*RepositoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedRepositoryServiceServer) GetSome(*RepositorySomeRequest, RepositoryService_GetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSome not implemented")
}
func (UnimplementedRepositoryServiceServer) GetAll(*RepositoryStreamRequest, RepositoryService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedRepositoryServiceServer) Subscribe(*RepositoryStreamRequest, RepositoryService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedRepositoryServiceServer) GetMeta(context.Context, *RepositoryStreamRequest) (*MetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeta not implemented")
}
func (UnimplementedRepositoryServiceServer) SubscribeMeta(*RepositoryStreamRequest, RepositoryService_SubscribeMetaServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMeta not implemented")
}
func (UnimplementedRepositoryServiceServer) GetAllBatched(*RepositoryBatchedStreamRequest, RepositoryService_GetAllBatchedServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllBatched not implemented")
}
func (UnimplementedRepositoryServiceServer) SubscribeBatched(*RepositoryBatchedStreamRequest, RepositoryService_SubscribeBatchedServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeBatched not implemented")
}
func (UnimplementedRepositoryServiceServer) mustEmbedUnimplementedRepositoryServiceServer() {}

// UnsafeRepositoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RepositoryServiceServer will
// result in compilation errors.
type UnsafeRepositoryServiceServer interface {
	mustEmbedUnimplementedRepositoryServiceServer()
}

func RegisterRepositoryServiceServer(s grpc.ServiceRegistrar, srv RepositoryServiceServer) {
	s.RegisterService(&RepositoryService_ServiceDesc, srv)
}

func _RepositoryService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepositoryService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).GetOne(ctx, req.(*RepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_GetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RepositorySomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RepositoryServiceServer).GetSome(m, &repositoryServiceGetSomeServer{stream})
}

type RepositoryService_GetSomeServer interface {
	Send(*RepositorySomeResponse) error
	grpc.ServerStream
}

type repositoryServiceGetSomeServer struct {
	grpc.ServerStream
}

func (x *repositoryServiceGetSomeServer) Send(m *RepositorySomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RepositoryService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RepositoryStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RepositoryServiceServer).GetAll(m, &repositoryServiceGetAllServer{stream})
}

type RepositoryService_GetAllServer interface {
	Send(*RepositoryStreamResponse) error
	grpc.ServerStream
}

type repositoryServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *repositoryServiceGetAllServer) Send(m *RepositoryStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RepositoryService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RepositoryStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RepositoryServiceServer).Subscribe(m, &repositoryServiceSubscribeServer{stream})
}

type RepositoryService_SubscribeServer interface {
	Send(*RepositoryStreamResponse) error
	grpc.ServerStream
}

type repositoryServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *repositoryServiceSubscribeServer) Send(m *RepositoryStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RepositoryService_GetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepositoryStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).GetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepositoryService_GetMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).GetMeta(ctx, req.(*RepositoryStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_SubscribeMeta_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RepositoryStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RepositoryServiceServer).SubscribeMeta(m, &repositoryServiceSubscribeMetaServer{stream})
}

type RepositoryService_SubscribeMetaServer interface {
	Send(*MetaResponse) error
	grpc.ServerStream
}

type repositoryServiceSubscribeMetaServer struct {
	grpc.ServerStream
}

func (x *repositoryServiceSubscribeMetaServer) Send(m *MetaResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RepositoryService_GetAllBatched_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RepositoryBatchedStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RepositoryServiceServer).GetAllBatched(m, &repositoryServiceGetAllBatchedServer{stream})
}

type RepositoryService_GetAllBatchedServer interface {
	Send(*RepositoryBatchedStreamResponse) error
	grpc.ServerStream
}

type repositoryServiceGetAllBatchedServer struct {
	grpc.ServerStream
}

func (x *repositoryServiceGetAllBatchedServer) Send(m *RepositoryBatchedStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RepositoryService_SubscribeBatched_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RepositoryBatchedStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RepositoryServiceServer).SubscribeBatched(m, &repositoryServiceSubscribeBatchedServer{stream})
}

type RepositoryService_SubscribeBatchedServer interface {
	Send(*RepositoryBatchedStreamResponse) error
	grpc.ServerStream
}

type repositoryServiceSubscribeBatchedServer struct {
	grpc.ServerStream
}

func (x *repositoryServiceSubscribeBatchedServer) Send(m *RepositoryBatchedStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// RepositoryService_ServiceDesc is the grpc.ServiceDesc for RepositoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RepositoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.softwaremanagement.v1.RepositoryService",
	HandlerType: (*RepositoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _RepositoryService_GetOne_Handler,
		},
		{
			MethodName: "GetMeta",
			Handler:    _RepositoryService_GetMeta_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSome",
			Handler:       _RepositoryService_GetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAll",
			Handler:       _RepositoryService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _RepositoryService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeMeta",
			Handler:       _RepositoryService_SubscribeMeta_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllBatched",
			Handler:       _RepositoryService_GetAllBatched_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeBatched",
			Handler:       _RepositoryService_SubscribeBatched_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/softwaremanagement.v1/services.gen.proto",
}

const (
	RepositoryConfigService_GetOne_FullMethodName           = "/arista.softwaremanagement.v1.RepositoryConfigService/GetOne"
	RepositoryConfigService_GetSome_FullMethodName          = "/arista.softwaremanagement.v1.RepositoryConfigService/GetSome"
	RepositoryConfigService_GetAll_FullMethodName           = "/arista.softwaremanagement.v1.RepositoryConfigService/GetAll"
	RepositoryConfigService_Subscribe_FullMethodName        = "/arista.softwaremanagement.v1.RepositoryConfigService/Subscribe"
	RepositoryConfigService_GetMeta_FullMethodName          = "/arista.softwaremanagement.v1.RepositoryConfigService/GetMeta"
	RepositoryConfigService_SubscribeMeta_FullMethodName    = "/arista.softwaremanagement.v1.RepositoryConfigService/SubscribeMeta"
	RepositoryConfigService_Set_FullMethodName              = "/arista.softwaremanagement.v1.RepositoryConfigService/Set"
	RepositoryConfigService_SetSome_FullMethodName          = "/arista.softwaremanagement.v1.RepositoryConfigService/SetSome"
	RepositoryConfigService_Delete_FullMethodName           = "/arista.softwaremanagement.v1.RepositoryConfigService/Delete"
	RepositoryConfigService_DeleteSome_FullMethodName       = "/arista.softwaremanagement.v1.RepositoryConfigService/DeleteSome"
	RepositoryConfigService_DeleteAll_FullMethodName        = "/arista.softwaremanagement.v1.RepositoryConfigService/DeleteAll"
	RepositoryConfigService_GetAllBatched_FullMethodName    = "/arista.softwaremanagement.v1.RepositoryConfigService/GetAllBatched"
	RepositoryConfigService_SubscribeBatched_FullMethodName = "/arista.softwaremanagement.v1.RepositoryConfigService/SubscribeBatched"
)

// RepositoryConfigServiceClient is the client API for RepositoryConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RepositoryConfigServiceClient interface {
	GetOne(ctx context.Context, in *RepositoryConfigRequest, opts ...grpc.CallOption) (*RepositoryConfigResponse, error)
	GetSome(ctx context.Context, in *RepositoryConfigSomeRequest, opts ...grpc.CallOption) (RepositoryConfigService_GetSomeClient, error)
	GetAll(ctx context.Context, in *RepositoryConfigStreamRequest, opts ...grpc.CallOption) (RepositoryConfigService_GetAllClient, error)
	Subscribe(ctx context.Context, in *RepositoryConfigStreamRequest, opts ...grpc.CallOption) (RepositoryConfigService_SubscribeClient, error)
	GetMeta(ctx context.Context, in *RepositoryConfigStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error)
	SubscribeMeta(ctx context.Context, in *RepositoryConfigStreamRequest, opts ...grpc.CallOption) (RepositoryConfigService_SubscribeMetaClient, error)
	Set(ctx context.Context, in *RepositoryConfigSetRequest, opts ...grpc.CallOption) (*RepositoryConfigSetResponse, error)
	SetSome(ctx context.Context, in *RepositoryConfigSetSomeRequest, opts ...grpc.CallOption) (RepositoryConfigService_SetSomeClient, error)
	Delete(ctx context.Context, in *RepositoryConfigDeleteRequest, opts ...grpc.CallOption) (*RepositoryConfigDeleteResponse, error)
	DeleteSome(ctx context.Context, in *RepositoryConfigDeleteSomeRequest, opts ...grpc.CallOption) (RepositoryConfigService_DeleteSomeClient, error)
	DeleteAll(ctx context.Context, in *RepositoryConfigDeleteAllRequest, opts ...grpc.CallOption) (RepositoryConfigService_DeleteAllClient, error)
	GetAllBatched(ctx context.Context, in *RepositoryConfigBatchedStreamRequest, opts ...grpc.CallOption) (RepositoryConfigService_GetAllBatchedClient, error)
	SubscribeBatched(ctx context.Context, in *RepositoryConfigBatchedStreamRequest, opts ...grpc.CallOption) (RepositoryConfigService_SubscribeBatchedClient, error)
}

type repositoryConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRepositoryConfigServiceClient(cc grpc.ClientConnInterface) RepositoryConfigServiceClient {
	return &repositoryConfigServiceClient{cc}
}

func (c *repositoryConfigServiceClient) GetOne(ctx context.Context, in *RepositoryConfigRequest, opts ...grpc.CallOption) (*RepositoryConfigResponse, error) {
	out := new(RepositoryConfigResponse)
	err := c.cc.Invoke(ctx, RepositoryConfigService_GetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryConfigServiceClient) GetSome(ctx context.Context, in *RepositoryConfigSomeRequest, opts ...grpc.CallOption) (RepositoryConfigService_GetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &RepositoryConfigService_ServiceDesc.Streams[0], RepositoryConfigService_GetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &repositoryConfigServiceGetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RepositoryConfigService_GetSomeClient interface {
	Recv() (*RepositoryConfigSomeResponse, error)
	grpc.ClientStream
}

type repositoryConfigServiceGetSomeClient struct {
	grpc.ClientStream
}

func (x *repositoryConfigServiceGetSomeClient) Recv() (*RepositoryConfigSomeResponse, error) {
	m := new(RepositoryConfigSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *repositoryConfigServiceClient) GetAll(ctx context.Context, in *RepositoryConfigStreamRequest, opts ...grpc.CallOption) (RepositoryConfigService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &RepositoryConfigService_ServiceDesc.Streams[1], RepositoryConfigService_GetAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &repositoryConfigServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RepositoryConfigService_GetAllClient interface {
	Recv() (*RepositoryConfigStreamResponse, error)
	grpc.ClientStream
}

type repositoryConfigServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *repositoryConfigServiceGetAllClient) Recv() (*RepositoryConfigStreamResponse, error) {
	m := new(RepositoryConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *repositoryConfigServiceClient) Subscribe(ctx context.Context, in *RepositoryConfigStreamRequest, opts ...grpc.CallOption) (RepositoryConfigService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &RepositoryConfigService_ServiceDesc.Streams[2], RepositoryConfigService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &repositoryConfigServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RepositoryConfigService_SubscribeClient interface {
	Recv() (*RepositoryConfigStreamResponse, error)
	grpc.ClientStream
}

type repositoryConfigServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *repositoryConfigServiceSubscribeClient) Recv() (*RepositoryConfigStreamResponse, error) {
	m := new(RepositoryConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *repositoryConfigServiceClient) GetMeta(ctx context.Context, in *RepositoryConfigStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error) {
	out := new(MetaResponse)
	err := c.cc.Invoke(ctx, RepositoryConfigService_GetMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryConfigServiceClient) SubscribeMeta(ctx context.Context, in *RepositoryConfigStreamRequest, opts ...grpc.CallOption) (RepositoryConfigService_SubscribeMetaClient, error) {
	stream, err := c.cc.NewStream(ctx, &RepositoryConfigService_ServiceDesc.Streams[3], RepositoryConfigService_SubscribeMeta_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &repositoryConfigServiceSubscribeMetaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RepositoryConfigService_SubscribeMetaClient interface {
	Recv() (*MetaResponse, error)
	grpc.ClientStream
}

type repositoryConfigServiceSubscribeMetaClient struct {
	grpc.ClientStream
}

func (x *repositoryConfigServiceSubscribeMetaClient) Recv() (*MetaResponse, error) {
	m := new(MetaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *repositoryConfigServiceClient) Set(ctx context.Context, in *RepositoryConfigSetRequest, opts ...grpc.CallOption) (*RepositoryConfigSetResponse, error) {
	out := new(RepositoryConfigSetResponse)
	err := c.cc.Invoke(ctx, RepositoryConfigService_Set_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryConfigServiceClient) SetSome(ctx context.Context, in *RepositoryConfigSetSomeRequest, opts ...grpc.CallOption) (RepositoryConfigService_SetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &RepositoryConfigService_ServiceDesc.Streams[4], RepositoryConfigService_SetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &repositoryConfigServiceSetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RepositoryConfigService_SetSomeClient interface {
	Recv() (*RepositoryConfigSetSomeResponse, error)
	grpc.ClientStream
}

type repositoryConfigServiceSetSomeClient struct {
	grpc.ClientStream
}

func (x *repositoryConfigServiceSetSomeClient) Recv() (*RepositoryConfigSetSomeResponse, error) {
	m := new(RepositoryConfigSetSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *repositoryConfigServiceClient) Delete(ctx context.Context, in *RepositoryConfigDeleteRequest, opts ...grpc.CallOption) (*RepositoryConfigDeleteResponse, error) {
	out := new(RepositoryConfigDeleteResponse)
	err := c.cc.Invoke(ctx, RepositoryConfigService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryConfigServiceClient) DeleteSome(ctx context.Context, in *RepositoryConfigDeleteSomeRequest, opts ...grpc.CallOption) (RepositoryConfigService_DeleteSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &RepositoryConfigService_ServiceDesc.Streams[5], RepositoryConfigService_DeleteSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &repositoryConfigServiceDeleteSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RepositoryConfigService_DeleteSomeClient interface {
	Recv() (*RepositoryConfigDeleteSomeResponse, error)
	grpc.ClientStream
}

type repositoryConfigServiceDeleteSomeClient struct {
	grpc.ClientStream
}

func (x *repositoryConfigServiceDeleteSomeClient) Recv() (*RepositoryConfigDeleteSomeResponse, error) {
	m := new(RepositoryConfigDeleteSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *repositoryConfigServiceClient) DeleteAll(ctx context.Context, in *RepositoryConfigDeleteAllRequest, opts ...grpc.CallOption) (RepositoryConfigService_DeleteAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &RepositoryConfigService_ServiceDesc.Streams[6], RepositoryConfigService_DeleteAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &repositoryConfigServiceDeleteAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RepositoryConfigService_DeleteAllClient interface {
	Recv() (*RepositoryConfigDeleteAllResponse, error)
	grpc.ClientStream
}

type repositoryConfigServiceDeleteAllClient struct {
	grpc.ClientStream
}

func (x *repositoryConfigServiceDeleteAllClient) Recv() (*RepositoryConfigDeleteAllResponse, error) {
	m := new(RepositoryConfigDeleteAllResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *repositoryConfigServiceClient) GetAllBatched(ctx context.Context, in *RepositoryConfigBatchedStreamRequest, opts ...grpc.CallOption) (RepositoryConfigService_GetAllBatchedClient, error) {
	stream, err := c.cc.NewStream(ctx, &RepositoryConfigService_ServiceDesc.Streams[7], RepositoryConfigService_GetAllBatched_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &repositoryConfigServiceGetAllBatchedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RepositoryConfigService_GetAllBatchedClient interface {
	Recv() (*RepositoryConfigBatchedStreamResponse, error)
	grpc.ClientStream
}

type repositoryConfigServiceGetAllBatchedClient struct {
	grpc.ClientStream
}

func (x *repositoryConfigServiceGetAllBatchedClient) Recv() (*RepositoryConfigBatchedStreamResponse, error) {
	m := new(RepositoryConfigBatchedStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *repositoryConfigServiceClient) SubscribeBatched(ctx context.Context, in *RepositoryConfigBatchedStreamRequest, opts ...grpc.CallOption) (RepositoryConfigService_SubscribeBatchedClient, error) {
	stream, err := c.cc.NewStream(ctx, &RepositoryConfigService_ServiceDesc.Streams[8], RepositoryConfigService_SubscribeBatched_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &repositoryConfigServiceSubscribeBatchedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RepositoryConfigService_SubscribeBatchedClient interface {
	Recv() (*RepositoryConfigBatchedStreamResponse, error)
	grpc.ClientStream
}

type repositoryConfigServiceSubscribeBatchedClient struct {
	grpc.ClientStream
}

func (x *repositoryConfigServiceSubscribeBatchedClient) Recv() (*RepositoryConfigBatchedStreamResponse, error) {
	m := new(RepositoryConfigBatchedStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RepositoryConfigServiceServer is the server API for RepositoryConfigService service.
// All implementations must embed UnimplementedRepositoryConfigServiceServer
// for forward compatibility
type RepositoryConfigServiceServer interface {
	GetOne(context.Context, *RepositoryConfigRequest) (*RepositoryConfigResponse, error)
	GetSome(*RepositoryConfigSomeRequest, RepositoryConfigService_GetSomeServer) error
	GetAll(*RepositoryConfigStreamRequest, RepositoryConfigService_GetAllServer) error
	Subscribe(*RepositoryConfigStreamRequest, RepositoryConfigService_SubscribeServer) error
	GetMeta(context.Context, *RepositoryConfigStreamRequest) (*MetaResponse, error)
	SubscribeMeta(*RepositoryConfigStreamRequest, RepositoryConfigService_SubscribeMetaServer) error
	Set(context.Context, *RepositoryConfigSetRequest) (*RepositoryConfigSetResponse, error)
	SetSome(*RepositoryConfigSetSomeRequest, RepositoryConfigService_SetSomeServer) error
	Delete(context.Context, *RepositoryConfigDeleteRequest) (*RepositoryConfigDeleteResponse, error)
	DeleteSome(*RepositoryConfigDeleteSomeRequest, RepositoryConfigService_DeleteSomeServer) error
	DeleteAll(*RepositoryConfigDeleteAllRequest, RepositoryConfigService_DeleteAllServer) error
	GetAllBatched(*RepositoryConfigBatchedStreamRequest, RepositoryConfigService_GetAllBatchedServer) error
	SubscribeBatched(*RepositoryConfigBatchedStreamRequest, RepositoryConfigService_SubscribeBatchedServer) error
	mustEmbedUnimplementedRepositoryConfigServiceServer()
}

// UnimplementedRepositoryConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRepositoryConfigServiceServer struct {
}

func (UnimplementedRepositoryConfigServiceServer) GetOne(context.Context, *RepositoryConfigRequest) (*RepositoryConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedRepositoryConfigServiceServer) GetSome(*RepositoryConfigSomeRequest, RepositoryConfigService_GetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSome not implemented")
}
func (UnimplementedRepositoryConfigServiceServer) GetAll(*RepositoryConfigStreamRequest, RepositoryConfigService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedRepositoryConfigServiceServer) Subscribe(*RepositoryConfigStreamRequest, RepositoryConfigService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedRepositoryConfigServiceServer) GetMeta(context.Context, *RepositoryConfigStreamRequest) (*MetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeta not implemented")
}
func (UnimplementedRepositoryConfigServiceServer) SubscribeMeta(*RepositoryConfigStreamRequest, RepositoryConfigService_SubscribeMetaServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMeta not implemented")
}
func (UnimplementedRepositoryConfigServiceServer) Set(context.Context, *RepositoryConfigSetRequest) (*RepositoryConfigSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedRepositoryConfigServiceServer) SetSome(*RepositoryConfigSetSomeRequest, RepositoryConfigService_SetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method SetSome not implemented")
}
func (UnimplementedRepositoryConfigServiceServer) Delete(context.Context, *RepositoryConfigDeleteRequest) (*RepositoryConfigDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRepositoryConfigServiceServer) DeleteSome(*RepositoryConfigDeleteSomeRequest, RepositoryConfigService_DeleteSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteSome not implemented")
}
func (UnimplementedRepositoryConfigServiceServer) DeleteAll(*RepositoryConfigDeleteAllRequest, RepositoryConfigService_DeleteAllServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteAll not implemented")
}
func (UnimplementedRepositoryConfigServiceServer) GetAllBatched(*RepositoryConfigBatchedStreamRequest, RepositoryConfigService_GetAllBatchedServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllBatched not implemented")
}
func (UnimplementedRepositoryConfigServiceServer) SubscribeBatched(*RepositoryConfigBatchedStreamRequest, RepositoryConfigService_SubscribeBatchedServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeBatched not implemented")
}
func (UnimplementedRepositoryConfigServiceServer) mustEmbedUnimplementedRepositoryConfigServiceServer() {
}

// UnsafeRepositoryConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RepositoryConfigServiceServer will
// result in compilation errors.
type UnsafeRepositoryConfigServiceServer interface {
	mustEmbedUnimplementedRepositoryConfigServiceServer()
}

func RegisterRepositoryConfigServiceServer(s grpc.ServiceRegistrar, srv RepositoryConfigServiceServer) {
	s.RegisterService(&RepositoryConfigService_ServiceDesc, srv)
}

func _RepositoryConfigService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepositoryConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryConfigServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepositoryConfigService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryConfigServiceServer).GetOne(ctx, req.(*RepositoryConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryConfigService_GetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RepositoryConfigSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RepositoryConfigServiceServer).GetSome(m, &repositoryConfigServiceGetSomeServer{stream})
}

type RepositoryConfigService_GetSomeServer interface {
	Send(*RepositoryConfigSomeResponse) error
	grpc.ServerStream
}

type repositoryConfigServiceGetSomeServer struct {
	grpc.ServerStream
}

func (x *repositoryConfigServiceGetSomeServer) Send(m *RepositoryConfigSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RepositoryConfigService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RepositoryConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RepositoryConfigServiceServer).GetAll(m, &repositoryConfigServiceGetAllServer{stream})
}

type RepositoryConfigService_GetAllServer interface {
	Send(*RepositoryConfigStreamResponse) error
	grpc.ServerStream
}

type repositoryConfigServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *repositoryConfigServiceGetAllServer) Send(m *RepositoryConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RepositoryConfigService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RepositoryConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RepositoryConfigServiceServer).Subscribe(m, &repositoryConfigServiceSubscribeServer{stream})
}

type RepositoryConfigService_SubscribeServer interface {
	Send(*RepositoryConfigStreamResponse) error
	grpc.ServerStream
}

type repositoryConfigServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *repositoryConfigServiceSubscribeServer) Send(m *RepositoryConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RepositoryConfigService_GetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepositoryConfigStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryConfigServiceServer).GetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepositoryConfigService_GetMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryConfigServiceServer).GetMeta(ctx, req.(*RepositoryConfigStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryConfigService_SubscribeMeta_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RepositoryConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RepositoryConfigServiceServer).SubscribeMeta(m, &repositoryConfigServiceSubscribeMetaServer{stream})
}

type RepositoryConfigService_SubscribeMetaServer interface {
	Send(*MetaResponse) error
	grpc.ServerStream
}

type repositoryConfigServiceSubscribeMetaServer struct {
	grpc.ServerStream
}

func (x *repositoryConfigServiceSubscribeMetaServer) Send(m *MetaResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RepositoryConfigService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepositoryConfigSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryConfigServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepositoryConfigService_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryConfigServiceServer).Set(ctx, req.(*RepositoryConfigSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryConfigService_SetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RepositoryConfigSetSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RepositoryConfigServiceServer).SetSome(m, &repositoryConfigServiceSetSomeServer{stream})
}

type RepositoryConfigService_SetSomeServer interface {
	Send(*RepositoryConfigSetSomeResponse) error
	grpc.ServerStream
}

type repositoryConfigServiceSetSomeServer struct {
	grpc.ServerStream
}

func (x *repositoryConfigServiceSetSomeServer) Send(m *RepositoryConfigSetSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RepositoryConfigService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepositoryConfigDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryConfigServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepositoryConfigService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryConfigServiceServer).Delete(ctx, req.(*RepositoryConfigDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryConfigService_DeleteSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RepositoryConfigDeleteSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RepositoryConfigServiceServer).DeleteSome(m, &repositoryConfigServiceDeleteSomeServer{stream})
}

type RepositoryConfigService_DeleteSomeServer interface {
	Send(*RepositoryConfigDeleteSomeResponse) error
	grpc.ServerStream
}

type repositoryConfigServiceDeleteSomeServer struct {
	grpc.ServerStream
}

func (x *repositoryConfigServiceDeleteSomeServer) Send(m *RepositoryConfigDeleteSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RepositoryConfigService_DeleteAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RepositoryConfigDeleteAllRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RepositoryConfigServiceServer).DeleteAll(m, &repositoryConfigServiceDeleteAllServer{stream})
}

type RepositoryConfigService_DeleteAllServer interface {
	Send(*RepositoryConfigDeleteAllResponse) error
	grpc.ServerStream
}

type repositoryConfigServiceDeleteAllServer struct {
	grpc.ServerStream
}

func (x *repositoryConfigServiceDeleteAllServer) Send(m *RepositoryConfigDeleteAllResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RepositoryConfigService_GetAllBatched_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RepositoryConfigBatchedStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RepositoryConfigServiceServer).GetAllBatched(m, &repositoryConfigServiceGetAllBatchedServer{stream})
}

type RepositoryConfigService_GetAllBatchedServer interface {
	Send(*RepositoryConfigBatchedStreamResponse) error
	grpc.ServerStream
}

type repositoryConfigServiceGetAllBatchedServer struct {
	grpc.ServerStream
}

func (x *repositoryConfigServiceGetAllBatchedServer) Send(m *RepositoryConfigBatchedStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RepositoryConfigService_SubscribeBatched_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RepositoryConfigBatchedStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RepositoryConfigServiceServer).SubscribeBatched(m, &repositoryConfigServiceSubscribeBatchedServer{stream})
}

type RepositoryConfigService_SubscribeBatchedServer interface {
	Send(*RepositoryConfigBatchedStreamResponse) error
	grpc.ServerStream
}

type repositoryConfigServiceSubscribeBatchedServer struct {
	grpc.ServerStream
}

func (x *repositoryConfigServiceSubscribeBatchedServer) Send(m *RepositoryConfigBatchedStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// RepositoryConfigService_ServiceDesc is the grpc.ServiceDesc for RepositoryConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RepositoryConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.softwaremanagement.v1.RepositoryConfigService",
	HandlerType: (*RepositoryConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _RepositoryConfigService_GetOne_Handler,
		},
		{
			MethodName: "GetMeta",
			Handler:    _RepositoryConfigService_GetMeta_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _RepositoryConfigService_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RepositoryConfigService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSome",
			Handler:       _RepositoryConfigService_GetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAll",
			Handler:       _RepositoryConfigService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _RepositoryConfigService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeMeta",
			Handler:       _RepositoryConfigService_SubscribeMeta_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SetSome",
			Handler:       _RepositoryConfigService_SetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteSome",
			Handler:       _RepositoryConfigService_DeleteSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteAll",
			Handler:       _RepositoryConfigService_DeleteAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllBatched",
			Handler:       _RepositoryConfigService_GetAllBatched_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeBatched",
			Handler:       _RepositoryConfigService_SubscribeBatched_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/softwaremanagement.v1/services.gen.proto",
}
