// Copyright (c) 2023 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

// EOS images, Streaming Agent, and other extensions in CloudVision are managed using this
// resource API. Images and extensions can be added, deleted and updated.
//
// New software is added to CloudVision either by uploading files directly from your computer using
// the Software Upload REST API or by downloading them from Arista's Software Download site using
// this resource API. To upload software using the Software Upload REST API in CloudVision, navigate
// to Settings > Developer Tools > REST API Explorer > softwareRepository.
//
// No matter how the image or extension is added, you can use the resource API to update or delete
// it.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v4.24.4
// source: arista/softwaremanagement.v1/softwaremanagement.proto

package softwaremanagement

import (
	fmp "github.com/aristanetworks/cloudvision-go/api/fmp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SoftwareSource describes the software upload mode.
type SoftwareSource int32

const (
	// SOFTWARE_SOURCE_UNSPECIFIED indicates that the source is not known
	SoftwareSource_SOFTWARE_SOURCE_UNSPECIFIED SoftwareSource = 0
	// SOFTWARE_SOURCE_CLOUD indicates that the image or extension has been downloaded from
	// Arista's Software Download site
	SoftwareSource_SOFTWARE_SOURCE_CLOUD SoftwareSource = 1
	// SOFTWARE_SOURCE_LOCAL indicates that the image or extension file has been uploaded directly
	// to CloudVision by the user
	SoftwareSource_SOFTWARE_SOURCE_LOCAL SoftwareSource = 2
	// SOFTWARE_SOURCE_PRELOADED indicates that the image or extension file has been added as part
	// of an upgrade of CloudVision.
	SoftwareSource_SOFTWARE_SOURCE_PRELOADED SoftwareSource = 3
	// SOFTWARE_SOURCE_NP_MIGRATION indicates that the image or extension file has been internally
	// transferred from Network Provisioning to Software Management Studio as part of the
	// migration process.
	SoftwareSource_SOFTWARE_SOURCE_NP_MIGRATION SoftwareSource = 4
)

// Enum value maps for SoftwareSource.
var (
	SoftwareSource_name = map[int32]string{
		0: "SOFTWARE_SOURCE_UNSPECIFIED",
		1: "SOFTWARE_SOURCE_CLOUD",
		2: "SOFTWARE_SOURCE_LOCAL",
		3: "SOFTWARE_SOURCE_PRELOADED",
		4: "SOFTWARE_SOURCE_NP_MIGRATION",
	}
	SoftwareSource_value = map[string]int32{
		"SOFTWARE_SOURCE_UNSPECIFIED":  0,
		"SOFTWARE_SOURCE_CLOUD":        1,
		"SOFTWARE_SOURCE_LOCAL":        2,
		"SOFTWARE_SOURCE_PRELOADED":    3,
		"SOFTWARE_SOURCE_NP_MIGRATION": 4,
	}
)

func (x SoftwareSource) Enum() *SoftwareSource {
	p := new(SoftwareSource)
	*p = x
	return p
}

func (x SoftwareSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SoftwareSource) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_softwaremanagement_v1_softwaremanagement_proto_enumTypes[0].Descriptor()
}

func (SoftwareSource) Type() protoreflect.EnumType {
	return &file_arista_softwaremanagement_v1_softwaremanagement_proto_enumTypes[0]
}

func (x SoftwareSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SoftwareSource.Descriptor instead.
func (SoftwareSource) EnumDescriptor() ([]byte, []int) {
	return file_arista_softwaremanagement_v1_softwaremanagement_proto_rawDescGZIP(), []int{0}
}

// Progress is used by the Repository service to describe the stages of the software upload
// and verification process.
type Progress int32

const (
	// PROGRESS_UNSPECIFIED indicates that upload progress is not currently reportable
	Progress_PROGRESS_UNSPECIFIED Progress = 0
	// PROGRESS_INITIAL indicates that a software upload has begun
	Progress_PROGRESS_INITIAL Progress = 1
	// PROGRESS_QUEUED indicates that an image or extension upload is waiting in a queue
	Progress_PROGRESS_QUEUED Progress = 2
	// PROGRESS_LOADING indicates that an image or extension is currently being retrieved from
	// Arista's Software Download site or CloudVision file server for processing
	Progress_PROGRESS_LOADING Progress = 3
	// PROGRESS_VALIDATING indicates that an image or extension is being validated
	Progress_PROGRESS_VALIDATING Progress = 4
	// PROGRESS_SAVING indicates that an image or extension is being uploaded to
	// CloudVision file server
	Progress_PROGRESS_SAVING Progress = 5
	// PROGRESS_SUCCESS indicates that an image or extension has been successfully uploaded and
	// validated. This is a terminal state of an upload.
	Progress_PROGRESS_SUCCESS Progress = 6
	// PROGRESS_ERROR indicates that an image or extension failed at either the upload or
	// validation phase. This is a terminal state of an upload.
	Progress_PROGRESS_ERROR Progress = 7
)

// Enum value maps for Progress.
var (
	Progress_name = map[int32]string{
		0: "PROGRESS_UNSPECIFIED",
		1: "PROGRESS_INITIAL",
		2: "PROGRESS_QUEUED",
		3: "PROGRESS_LOADING",
		4: "PROGRESS_VALIDATING",
		5: "PROGRESS_SAVING",
		6: "PROGRESS_SUCCESS",
		7: "PROGRESS_ERROR",
	}
	Progress_value = map[string]int32{
		"PROGRESS_UNSPECIFIED": 0,
		"PROGRESS_INITIAL":     1,
		"PROGRESS_QUEUED":      2,
		"PROGRESS_LOADING":     3,
		"PROGRESS_VALIDATING":  4,
		"PROGRESS_SAVING":      5,
		"PROGRESS_SUCCESS":     6,
		"PROGRESS_ERROR":       7,
	}
)

func (x Progress) Enum() *Progress {
	p := new(Progress)
	*p = x
	return p
}

func (x Progress) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Progress) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_softwaremanagement_v1_softwaremanagement_proto_enumTypes[1].Descriptor()
}

func (Progress) Type() protoreflect.EnumType {
	return &file_arista_softwaremanagement_v1_softwaremanagement_proto_enumTypes[1]
}

func (x Progress) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Progress.Descriptor instead.
func (Progress) EnumDescriptor() ([]byte, []int) {
	return file_arista_softwaremanagement_v1_softwaremanagement_proto_rawDescGZIP(), []int{1}
}

// SoftwareType is an enum containing the possible Software types. `SOFTWARE_TYPE_TERMINATTR`,
// which corresponds to an EOS Streaming Agent, is first-classed due to it's importance to
// CloudVision.
type SoftwareType int32

const (
	// SOFTWARE_TYPE_UNSPECIFIED indicates that the type cannot or has not been determined
	SoftwareType_SOFTWARE_TYPE_UNSPECIFIED SoftwareType = 0
	// SOFTWARE_TYPE_SWI identifies an EOS swi image type. The corresponding image files will
	// have a .swi extension.
	SoftwareType_SOFTWARE_TYPE_SWI SoftwareType = 1
	// SOFTWARE_TYPE_TERMINATTR identifies a Streaming Agent extension. The corresponding
	// files will contain the term: "TerminAttr" (case insensitive) and a .swix extension.
	SoftwareType_SOFTWARE_TYPE_TERMINATTR SoftwareType = 2
	// SOFTWARE_TYPE_SWIX identifies an extension type. The corresponding files will have a .swix
	// extension.
	SoftwareType_SOFTWARE_TYPE_SWIX SoftwareType = 3
	// SOFTWARE_TYPE_RPM identifies an RPM file. The corresponding files will have a .rpm
	// extension.
	SoftwareType_SOFTWARE_TYPE_RPM SoftwareType = 4
)

// Enum value maps for SoftwareType.
var (
	SoftwareType_name = map[int32]string{
		0: "SOFTWARE_TYPE_UNSPECIFIED",
		1: "SOFTWARE_TYPE_SWI",
		2: "SOFTWARE_TYPE_TERMINATTR",
		3: "SOFTWARE_TYPE_SWIX",
		4: "SOFTWARE_TYPE_RPM",
	}
	SoftwareType_value = map[string]int32{
		"SOFTWARE_TYPE_UNSPECIFIED": 0,
		"SOFTWARE_TYPE_SWI":         1,
		"SOFTWARE_TYPE_TERMINATTR":  2,
		"SOFTWARE_TYPE_SWIX":        3,
		"SOFTWARE_TYPE_RPM":         4,
	}
)

func (x SoftwareType) Enum() *SoftwareType {
	p := new(SoftwareType)
	*p = x
	return p
}

func (x SoftwareType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SoftwareType) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_softwaremanagement_v1_softwaremanagement_proto_enumTypes[2].Descriptor()
}

func (SoftwareType) Type() protoreflect.EnumType {
	return &file_arista_softwaremanagement_v1_softwaremanagement_proto_enumTypes[2]
}

func (x SoftwareType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SoftwareType.Descriptor instead.
func (SoftwareType) EnumDescriptor() ([]byte, []int) {
	return file_arista_softwaremanagement_v1_softwaremanagement_proto_rawDescGZIP(), []int{2}
}

// ImageFormatVersion is an enum defining the image format versions of a SWI image.
type ImageFormatVersion int32

const (
	// IMAGE_FORMAT_VERSION_UNSPECIFIED indicates an unknown image format
	ImageFormatVersion_IMAGE_FORMAT_VERSION_UNSPECIFIED ImageFormatVersion = 0
	// IMAGE_FORMAT_VERSION_1_0 indicates legacy swi format
	ImageFormatVersion_IMAGE_FORMAT_VERSION_1_0 ImageFormatVersion = 1
	// IMAGE_FORMAT_VERSION_2_0 indicates modular swi format
	ImageFormatVersion_IMAGE_FORMAT_VERSION_2_0 ImageFormatVersion = 2
	// IMAGE_FORMAT_VERSION_3_0 indicates optimised modular swi format
	ImageFormatVersion_IMAGE_FORMAT_VERSION_3_0 ImageFormatVersion = 3
)

// Enum value maps for ImageFormatVersion.
var (
	ImageFormatVersion_name = map[int32]string{
		0: "IMAGE_FORMAT_VERSION_UNSPECIFIED",
		1: "IMAGE_FORMAT_VERSION_1_0",
		2: "IMAGE_FORMAT_VERSION_2_0",
		3: "IMAGE_FORMAT_VERSION_3_0",
	}
	ImageFormatVersion_value = map[string]int32{
		"IMAGE_FORMAT_VERSION_UNSPECIFIED": 0,
		"IMAGE_FORMAT_VERSION_1_0":         1,
		"IMAGE_FORMAT_VERSION_2_0":         2,
		"IMAGE_FORMAT_VERSION_3_0":         3,
	}
)

func (x ImageFormatVersion) Enum() *ImageFormatVersion {
	p := new(ImageFormatVersion)
	*p = x
	return p
}

func (x ImageFormatVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImageFormatVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_softwaremanagement_v1_softwaremanagement_proto_enumTypes[3].Descriptor()
}

func (ImageFormatVersion) Type() protoreflect.EnumType {
	return &file_arista_softwaremanagement_v1_softwaremanagement_proto_enumTypes[3]
}

func (x ImageFormatVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImageFormatVersion.Descriptor instead.
func (ImageFormatVersion) EnumDescriptor() ([]byte, []int) {
	return file_arista_softwaremanagement_v1_softwaremanagement_proto_rawDescGZIP(), []int{3}
}

// Arch is an enum used to specify the target architecture of an image or extension.
type Arch int32

const (
	// ARCH_UNSPECIFIED indicates an unknown or unspecified architecture
	Arch_ARCH_UNSPECIFIED Arch = 0
	// ARCH_NO_ARCH indicates that the software is architecture agnostic
	Arch_ARCH_NO_ARCH Arch = 1
	// ARCH_I386 indicates that the software is intended for the i386 architecture
	Arch_ARCH_I386 Arch = 2
	// ARCH_I686 indicates that the software is intended for the i686 architecture
	Arch_ARCH_I686 Arch = 3
	// ARCH_X86_64 indicates that the software is intended to be run on 64-bit platforms
	Arch_ARCH_X86_64 Arch = 4
	// ARCH_AARCH64 indicates that the software is intended to be run on ARM 64-bit platforms
	Arch_ARCH_AARCH64 Arch = 5
)

// Enum value maps for Arch.
var (
	Arch_name = map[int32]string{
		0: "ARCH_UNSPECIFIED",
		1: "ARCH_NO_ARCH",
		2: "ARCH_I386",
		3: "ARCH_I686",
		4: "ARCH_X86_64",
		5: "ARCH_AARCH64",
	}
	Arch_value = map[string]int32{
		"ARCH_UNSPECIFIED": 0,
		"ARCH_NO_ARCH":     1,
		"ARCH_I386":        2,
		"ARCH_I686":        3,
		"ARCH_X86_64":      4,
		"ARCH_AARCH64":     5,
	}
)

func (x Arch) Enum() *Arch {
	p := new(Arch)
	*p = x
	return p
}

func (x Arch) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Arch) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_softwaremanagement_v1_softwaremanagement_proto_enumTypes[4].Descriptor()
}

func (Arch) Type() protoreflect.EnumType {
	return &file_arista_softwaremanagement_v1_softwaremanagement_proto_enumTypes[4]
}

func (x Arch) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Arch.Descriptor instead.
func (Arch) EnumDescriptor() ([]byte, []int) {
	return file_arista_softwaremanagement_v1_softwaremanagement_proto_rawDescGZIP(), []int{4}
}

// Variant is an enum containing the possible .swi variant types.
type Variant int32

const (
	// VARIANT_UNSPECIFIED is used to indicate an unknown or unspecified EOS image variant
	Variant_VARIANT_UNSPECIFIED Variant = 0
	// VARIANT_US specifies a US or default version of an EOS image variant
	Variant_VARIANT_US Variant = 1
	// VARIANT_INTERNATIONAL specifies an international EOS image variant
	Variant_VARIANT_INTERNATIONAL Variant = 2
)

// Enum value maps for Variant.
var (
	Variant_name = map[int32]string{
		0: "VARIANT_UNSPECIFIED",
		1: "VARIANT_US",
		2: "VARIANT_INTERNATIONAL",
	}
	Variant_value = map[string]int32{
		"VARIANT_UNSPECIFIED":   0,
		"VARIANT_US":            1,
		"VARIANT_INTERNATIONAL": 2,
	}
)

func (x Variant) Enum() *Variant {
	p := new(Variant)
	*p = x
	return p
}

func (x Variant) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Variant) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_softwaremanagement_v1_softwaremanagement_proto_enumTypes[5].Descriptor()
}

func (Variant) Type() protoreflect.EnumType {
	return &file_arista_softwaremanagement_v1_softwaremanagement_proto_enumTypes[5]
}

func (x Variant) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Variant.Descriptor instead.
func (Variant) EnumDescriptor() ([]byte, []int) {
	return file_arista_softwaremanagement_v1_softwaremanagement_proto_rawDescGZIP(), []int{5}
}

// Flavor is an enum containing the possible .swi flavor types.
type Flavor int32

const (
	// FLAVOR_UNSPECIFIED indicates that the swi image flavor is unknown
	Flavor_FLAVOR_UNSPECIFIED Flavor = 0
	// FLAVOR_DEFAULT is the default swi image
	Flavor_FLAVOR_DEFAULT Flavor = 1
	// FLAVOR_2GB is an obsolete image supporting a reduced-size 2GB image version that runs
	// only on older models of devices with two gigabytes of flash memory
	Flavor_FLAVOR_2GB Flavor = 2
	// FLAVOR_CLOUD is a swi image that runs in a virtualized cloud environment
	Flavor_FLAVOR_CLOUD Flavor = 3
	// FLAVOR_DPE is a swi image that provides MacSec without a license
	Flavor_FLAVOR_DPE Flavor = 4
	// FLAVOR_PDP is an image that defaults to support PDP but can also support CoPP
	Flavor_FLAVOR_PDP Flavor = 5
	// FLAVOR_2GB_PDP is a 2GB image that defaults to support PDP if available, but can support
	// CoPP
	Flavor_FLAVOR_2GB_PDP Flavor = 6
	// FLAVOR_DPE_CTNR is a swi image that provides MacSec without a license and natively
	// supports running containers on EOS
	Flavor_FLAVOR_DPE_CTNR Flavor = 7
)

// Enum value maps for Flavor.
var (
	Flavor_name = map[int32]string{
		0: "FLAVOR_UNSPECIFIED",
		1: "FLAVOR_DEFAULT",
		2: "FLAVOR_2GB",
		3: "FLAVOR_CLOUD",
		4: "FLAVOR_DPE",
		5: "FLAVOR_PDP",
		6: "FLAVOR_2GB_PDP",
		7: "FLAVOR_DPE_CTNR",
	}
	Flavor_value = map[string]int32{
		"FLAVOR_UNSPECIFIED": 0,
		"FLAVOR_DEFAULT":     1,
		"FLAVOR_2GB":         2,
		"FLAVOR_CLOUD":       3,
		"FLAVOR_DPE":         4,
		"FLAVOR_PDP":         5,
		"FLAVOR_2GB_PDP":     6,
		"FLAVOR_DPE_CTNR":    7,
	}
)

func (x Flavor) Enum() *Flavor {
	p := new(Flavor)
	*p = x
	return p
}

func (x Flavor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Flavor) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_softwaremanagement_v1_softwaremanagement_proto_enumTypes[6].Descriptor()
}

func (Flavor) Type() protoreflect.EnumType {
	return &file_arista_softwaremanagement_v1_softwaremanagement_proto_enumTypes[6]
}

func (x Flavor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Flavor.Descriptor instead.
func (Flavor) EnumDescriptor() ([]byte, []int) {
	return file_arista_softwaremanagement_v1_softwaremanagement_proto_rawDescGZIP(), []int{6}
}

// DigestType is the digest algorithm used as a checksum on the software file.
type DigestType int32

const (
	// DIGEST_TYPE_UNSPECIFIED indicates that the digest type is unknown
	DigestType_DIGEST_TYPE_UNSPECIFIED DigestType = 0
	// DIGEST_TYPE_SHA512 indicates that the SHA512 algorithm is used to calculate the digest
	DigestType_DIGEST_TYPE_SHA512 DigestType = 1
)

// Enum value maps for DigestType.
var (
	DigestType_name = map[int32]string{
		0: "DIGEST_TYPE_UNSPECIFIED",
		1: "DIGEST_TYPE_SHA512",
	}
	DigestType_value = map[string]int32{
		"DIGEST_TYPE_UNSPECIFIED": 0,
		"DIGEST_TYPE_SHA512":      1,
	}
)

func (x DigestType) Enum() *DigestType {
	p := new(DigestType)
	*p = x
	return p
}

func (x DigestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DigestType) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_softwaremanagement_v1_softwaremanagement_proto_enumTypes[7].Descriptor()
}

func (DigestType) Type() protoreflect.EnumType {
	return &file_arista_softwaremanagement_v1_softwaremanagement_proto_enumTypes[7]
}

func (x DigestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DigestType.Descriptor instead.
func (DigestType) EnumDescriptor() ([]byte, []int) {
	return file_arista_softwaremanagement_v1_softwaremanagement_proto_rawDescGZIP(), []int{7}
}

// RecommendedAction is an enum containing all of the possible steps a user can take to address
// problems encountered while performing software management-related actions.
type RecommendedAction int32

const (
	// RECOMMENDED_ACTION_UNSPECIFIED indicates that no remedial action is needed.
	RecommendedAction_RECOMMENDED_ACTION_UNSPECIFIED RecommendedAction = 0
	// RECOMMENDED_ACTION_CONTACT_TAC indicates that in order to resolve the current issue,
	// Arista TAC assistance is recommended.
	RecommendedAction_RECOMMENDED_ACTION_CONTACT_TAC RecommendedAction = 1
	// RECOMMENDED_ACTION_ADD_TOKEN indicates that a particular issue can be resolved by adding
	// the access token stored in CloudVision.
	RecommendedAction_RECOMMENDED_ACTION_ADD_TOKEN RecommendedAction = 2
	// RECOMMENDED_ACTION_UPDATE_TOKEN indicates that a particular issue can be resolved by updating
	// the access token stored in CloudVision.
	RecommendedAction_RECOMMENDED_ACTION_UPDATE_TOKEN RecommendedAction = 3
	// RECOMMENDED_ACTION_ACCEPT_EULA indicates that a particular issue can be resolved by accepting
	// the EULA agreement available at the Arista Software Download site.
	RecommendedAction_RECOMMENDED_ACTION_ACCEPT_EULA RecommendedAction = 4
	// RECOMMENDED_ACTION_RETRY indicates that a paticular issue may be resolved by
	// re-attempting the previous action.
	RecommendedAction_RECOMMENDED_ACTION_RETRY RecommendedAction = 5
)

// Enum value maps for RecommendedAction.
var (
	RecommendedAction_name = map[int32]string{
		0: "RECOMMENDED_ACTION_UNSPECIFIED",
		1: "RECOMMENDED_ACTION_CONTACT_TAC",
		2: "RECOMMENDED_ACTION_ADD_TOKEN",
		3: "RECOMMENDED_ACTION_UPDATE_TOKEN",
		4: "RECOMMENDED_ACTION_ACCEPT_EULA",
		5: "RECOMMENDED_ACTION_RETRY",
	}
	RecommendedAction_value = map[string]int32{
		"RECOMMENDED_ACTION_UNSPECIFIED":  0,
		"RECOMMENDED_ACTION_CONTACT_TAC":  1,
		"RECOMMENDED_ACTION_ADD_TOKEN":    2,
		"RECOMMENDED_ACTION_UPDATE_TOKEN": 3,
		"RECOMMENDED_ACTION_ACCEPT_EULA":  4,
		"RECOMMENDED_ACTION_RETRY":        5,
	}
)

func (x RecommendedAction) Enum() *RecommendedAction {
	p := new(RecommendedAction)
	*p = x
	return p
}

func (x RecommendedAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecommendedAction) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_softwaremanagement_v1_softwaremanagement_proto_enumTypes[8].Descriptor()
}

func (RecommendedAction) Type() protoreflect.EnumType {
	return &file_arista_softwaremanagement_v1_softwaremanagement_proto_enumTypes[8]
}

func (x RecommendedAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecommendedAction.Descriptor instead.
func (RecommendedAction) EnumDescriptor() ([]byte, []int) {
	return file_arista_softwaremanagement_v1_softwaremanagement_proto_rawDescGZIP(), []int{8}
}

// Level specifies relative importance of the information returned in the message field of the
// software releases status.
type Level int32

const (
	// LEVEL_UNSPECIFIED is set when the message level is unknown
	Level_LEVEL_UNSPECIFIED Level = 0
	// LEVEL_INFO is set when the message contains useful, informational content. No user action is
	// required.
	Level_LEVEL_INFO Level = 1
	// LEVEL_WARNING is set when the message contains important information for the user that
	// should be addressed for continued proper behavior
	Level_LEVEL_WARNING Level = 2
	// LEVEL_ERROR is set when the message contains information alerting the user to an error
	// condition that occurred while retrieving the set of software releases. Remedial user action
	// may be required to clear this condition.
	Level_LEVEL_ERROR Level = 3
)

// Enum value maps for Level.
var (
	Level_name = map[int32]string{
		0: "LEVEL_UNSPECIFIED",
		1: "LEVEL_INFO",
		2: "LEVEL_WARNING",
		3: "LEVEL_ERROR",
	}
	Level_value = map[string]int32{
		"LEVEL_UNSPECIFIED": 0,
		"LEVEL_INFO":        1,
		"LEVEL_WARNING":     2,
		"LEVEL_ERROR":       3,
	}
)

func (x Level) Enum() *Level {
	p := new(Level)
	*p = x
	return p
}

func (x Level) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Level) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_softwaremanagement_v1_softwaremanagement_proto_enumTypes[9].Descriptor()
}

func (Level) Type() protoreflect.EnumType {
	return &file_arista_softwaremanagement_v1_softwaremanagement_proto_enumTypes[9]
}

func (x Level) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Level.Descriptor instead.
func (Level) EnumDescriptor() ([]byte, []int) {
	return file_arista_softwaremanagement_v1_softwaremanagement_proto_rawDescGZIP(), []int{9}
}

// RepositoryKey is the key used by the `Repository` state and config models to uniquely
// identify an image or extension.
//
// The `name` field must contain the file suffix. Valid file types include .swi, .swix and .rpm
// files. Streaming Agent files must also contain the term: `TerminAttr` (case insensitive).
type RepositoryKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is a unique identifier that will be used to identify the image or extension in
	// CloudVision
	Name *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RepositoryKey) Reset() {
	*x = RepositoryKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_softwaremanagement_v1_softwaremanagement_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryKey) ProtoMessage() {}

func (x *RepositoryKey) ProtoReflect() protoreflect.Message {
	mi := &file_arista_softwaremanagement_v1_softwaremanagement_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryKey.ProtoReflect.Descriptor instead.
func (*RepositoryKey) Descriptor() ([]byte, []int) {
	return file_arista_softwaremanagement_v1_softwaremanagement_proto_rawDescGZIP(), []int{0}
}

func (x *RepositoryKey) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

// Repository is the state model that displays metadata for software images and extensions.
//
// `Repository` objects are created when new software is added via a `Set`
// request issued to the `RepositoryConfig` resource or when using the Software Upload REST API.
// The `key` uniquely identifies the software state and is identical to the key used to create it
// via the call to `Set`.
type Repository struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key is the unique identifier
	Key *RepositoryKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// uploaded_by specifies the author of the upload
	UploadedBy *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=uploaded_by,json=uploadedBy,proto3" json:"uploaded_by,omitempty"`
	// uploaded_at specifies the date and time of the upload
	UploadedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=uploaded_at,json=uploadedAt,proto3" json:"uploaded_at,omitempty"`
	// last_modified_by is the author of the most recent metadata modification
	LastModifiedBy *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=last_modified_by,json=lastModifiedBy,proto3" json:"last_modified_by,omitempty"`
	// last_modified_at is the date and time of the most recent metadata modification
	LastModifiedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=last_modified_at,json=lastModifiedAt,proto3" json:"last_modified_at,omitempty"`
	// software_status displays status of the software that is being added to CloudVision
	SoftwareStatus *SoftwareStatus `protobuf:"bytes,6,opt,name=software_status,json=softwareStatus,proto3" json:"software_status,omitempty"`
	// software_metadata displays details about available software
	SoftwareMetadata *SoftwareMetadata `protobuf:"bytes,7,opt,name=software_metadata,json=softwareMetadata,proto3" json:"software_metadata,omitempty"`
}

func (x *Repository) Reset() {
	*x = Repository{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_softwaremanagement_v1_softwaremanagement_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Repository) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Repository) ProtoMessage() {}

func (x *Repository) ProtoReflect() protoreflect.Message {
	mi := &file_arista_softwaremanagement_v1_softwaremanagement_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Repository.ProtoReflect.Descriptor instead.
func (*Repository) Descriptor() ([]byte, []int) {
	return file_arista_softwaremanagement_v1_softwaremanagement_proto_rawDescGZIP(), []int{1}
}

func (x *Repository) GetKey() *RepositoryKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Repository) GetUploadedBy() *wrapperspb.StringValue {
	if x != nil {
		return x.UploadedBy
	}
	return nil
}

func (x *Repository) GetUploadedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UploadedAt
	}
	return nil
}

func (x *Repository) GetLastModifiedBy() *wrapperspb.StringValue {
	if x != nil {
		return x.LastModifiedBy
	}
	return nil
}

func (x *Repository) GetLastModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastModifiedAt
	}
	return nil
}

func (x *Repository) GetSoftwareStatus() *SoftwareStatus {
	if x != nil {
		return x.SoftwareStatus
	}
	return nil
}

func (x *Repository) GetSoftwareMetadata() *SoftwareMetadata {
	if x != nil {
		return x.SoftwareMetadata
	}
	return nil
}

// RepositoryConfig objects are used to add, delete, and update images or extensions in
// CloudVision.
//
// The `Set` method is used to add and modify software stored in CloudVision.
// The `Delete` method is used to remove software.
//
// Adding Software to CloudVision:
//
// When a `Set` is made, the software identified by the URI will be downloaded from Arista's
// Software Download site and stored in CloudVision. The status of the software will be reflected
// by a corresponding `Repository` entry identified by the same `RepositoryKey`.
//
// Here is an example where a .swi EOS image is added to CloudVision:
//
// ```
//
//	{
//	 "value": {
//	   "key": {
//	     "name": "EOS64-4.30.0.1F.swi"
//	   },
//	   "uri": "/support/download/EOS-USA/Active Releases/4.30/EOS-4.30.0.1F/EOS64-4.30.0.1F.swi",
//	   "rebootRequired": true
//	 },
//	}
//
// ```
//
// The following is an example of a configuration that will add the
// _AristaAppForSplunk-2.0.1-4.27.swix_ extension to CloudVision:
//
// ```
//
//	{
//	 "value": {
//	   "key": {
//	     "name": "AristaAppForSplunk-2.0.1-4.27.swix"
//	   },
//	   "uri": "/support/download/Extensions/Splunk/AristaAppForSplunk-2.0.1-4.27.swix",
//	   "rebootRequired": false
//	 },
//	}
//
// ```
//
// Updating Existing Software:
//
// `Repository` metadata objects can be _updated_ by using the config `Set` method and
// specifying the field or fields to be modified. Currently, `reboot_required` is the only field
// that can be modified after software has been added to CloudVision. All other fields must match
// the existing configuration, or can be omitted.
//
// NOTE: The `reboot_required` field must be `true` for .swi images.
//
// In this example, we update the `reboot_required` field changing it from `false` to `true`
// while leaving out the uri field:
//
// ```
//
//	{
//	 "value": {
//	   "key": {
//	     "name": "AristaAppForSplunk-2.0.1-4.27.swix"
//	   },
//	   "rebootRequired": true
//	 },
//	}
//
// ```
//
// Deleting Software:
//
// `Repository` objects can be deleted using the `RepositoryConfig` `Delete` method.
// A `Delete` request will specify the `key` which uniquely identifies the image or extension in
// CloudVision. For example, a delete request will look like the following:
// ```
//
//	{
//	 "value": {
//	   "key": {
//	     "name": "AristaAppForSplunk-2.0.1-4.27.swix"
//	   },
//	 },
//	}
//
// ```
type RepositoryConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key is a unique identifier that must be supplied by the user to start a valid upload of
	// software
	Key *RepositoryKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// uri value depends on the origin of the software. If you are downloading an image or
	// extension file from Arista's Software Download site, use the site identifier. If you are
	// uploading software from your computer using the Software Upload REST API, this field will
	// be populated with the CloudVision file server identifier.
	Uri *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	// reboot_required is a Boolean indicating if a device requires a reboot after software
	// installation. .swi images always require a reboot.
	RebootRequired *wrapperspb.BoolValue `protobuf:"bytes,3,opt,name=reboot_required,json=rebootRequired,proto3" json:"reboot_required,omitempty"`
}

func (x *RepositoryConfig) Reset() {
	*x = RepositoryConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_softwaremanagement_v1_softwaremanagement_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryConfig) ProtoMessage() {}

func (x *RepositoryConfig) ProtoReflect() protoreflect.Message {
	mi := &file_arista_softwaremanagement_v1_softwaremanagement_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryConfig.ProtoReflect.Descriptor instead.
func (*RepositoryConfig) Descriptor() ([]byte, []int) {
	return file_arista_softwaremanagement_v1_softwaremanagement_proto_rawDescGZIP(), []int{2}
}

func (x *RepositoryConfig) GetKey() *RepositoryKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *RepositoryConfig) GetUri() *wrapperspb.StringValue {
	if x != nil {
		return x.Uri
	}
	return nil
}

func (x *RepositoryConfig) GetRebootRequired() *wrapperspb.BoolValue {
	if x != nil {
		return x.RebootRequired
	}
	return nil
}

// SoftwareStatus contains a progress field and a description explaining the progress during
// software upload.
type SoftwareStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// progress displays the current status of the software upload
	Progress Progress `protobuf:"varint,1,opt,name=progress,proto3,enum=arista.softwaremanagement.v1.Progress" json:"progress,omitempty"`
	// message describes the progress of the software upload
	Message *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// recommended_action expresses a particular user-actionable step that can be carried out to
	// ensure the proper operation of CloudVision while managing software.
	RecommendedAction RecommendedAction `protobuf:"varint,3,opt,name=recommended_action,json=recommendedAction,proto3,enum=arista.softwaremanagement.v1.RecommendedAction" json:"recommended_action,omitempty"`
}

func (x *SoftwareStatus) Reset() {
	*x = SoftwareStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_softwaremanagement_v1_softwaremanagement_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoftwareStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoftwareStatus) ProtoMessage() {}

func (x *SoftwareStatus) ProtoReflect() protoreflect.Message {
	mi := &file_arista_softwaremanagement_v1_softwaremanagement_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoftwareStatus.ProtoReflect.Descriptor instead.
func (*SoftwareStatus) Descriptor() ([]byte, []int) {
	return file_arista_softwaremanagement_v1_softwaremanagement_proto_rawDescGZIP(), []int{3}
}

func (x *SoftwareStatus) GetProgress() Progress {
	if x != nil {
		return x.Progress
	}
	return Progress_PROGRESS_UNSPECIFIED
}

func (x *SoftwareStatus) GetMessage() *wrapperspb.StringValue {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *SoftwareStatus) GetRecommendedAction() RecommendedAction {
	if x != nil {
		return x.RecommendedAction
	}
	return RecommendedAction_RECOMMENDED_ACTION_UNSPECIFIED
}

// SoftwareMetadata is the detailed metadata describing software files.
type SoftwareMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// digest_type specifies the type of digest algorithm used to calculate the digest for this
	// image or extension
	DigestType DigestType `protobuf:"varint,1,opt,name=digest_type,json=digestType,proto3,enum=arista.softwaremanagement.v1.DigestType" json:"digest_type,omitempty"`
	// digest is the digest value for the image or extension
	Digest *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=digest,proto3" json:"digest,omitempty"`
	// size is the size of the image or extension in bytes
	Size *wrapperspb.UInt64Value `protobuf:"bytes,3,opt,name=size,proto3" json:"size,omitempty"`
	// reboot_required boolean indicating if a device requires a reboot after software installation
	RebootRequired *wrapperspb.BoolValue `protobuf:"bytes,4,opt,name=reboot_required,json=rebootRequired,proto3" json:"reboot_required,omitempty"`
	// software_type determines which version field is populated - .swi image metadata appears in
	// swi_metadata. .swix and .rpm extensions appear in extension_metadata.
	SoftwareType SoftwareType `protobuf:"varint,5,opt,name=software_type,json=softwareType,proto3,enum=arista.softwaremanagement.v1.SoftwareType" json:"software_type,omitempty"`
	// swi_metadata is versioning information for .swi type images
	SwiMetadata *SwiMetadata `protobuf:"bytes,6,opt,name=swi_metadata,json=swiMetadata,proto3" json:"swi_metadata,omitempty"`
	// extension_metadata is versioning information for extensions (.rpm and .swix)
	ExtensionMetadata *ExtensionMetadata `protobuf:"bytes,7,opt,name=extension_metadata,json=extensionMetadata,proto3" json:"extension_metadata,omitempty"`
	// file_server_path is the location of the image or extension as stored in CloudVision
	FileServerPath *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=file_server_path,json=fileServerPath,proto3" json:"file_server_path,omitempty"`
	// software_source indicates if the software being processed has been downloaded
	// from Arista's Software Download site or uploaded to CloudVision from a user's local computer
	SoftwareSource SoftwareSource `protobuf:"varint,9,opt,name=software_source,json=softwareSource,proto3,enum=arista.softwaremanagement.v1.SoftwareSource" json:"software_source,omitempty"`
}

func (x *SoftwareMetadata) Reset() {
	*x = SoftwareMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_softwaremanagement_v1_softwaremanagement_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoftwareMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoftwareMetadata) ProtoMessage() {}

func (x *SoftwareMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_arista_softwaremanagement_v1_softwaremanagement_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoftwareMetadata.ProtoReflect.Descriptor instead.
func (*SoftwareMetadata) Descriptor() ([]byte, []int) {
	return file_arista_softwaremanagement_v1_softwaremanagement_proto_rawDescGZIP(), []int{4}
}

func (x *SoftwareMetadata) GetDigestType() DigestType {
	if x != nil {
		return x.DigestType
	}
	return DigestType_DIGEST_TYPE_UNSPECIFIED
}

func (x *SoftwareMetadata) GetDigest() *wrapperspb.StringValue {
	if x != nil {
		return x.Digest
	}
	return nil
}

func (x *SoftwareMetadata) GetSize() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *SoftwareMetadata) GetRebootRequired() *wrapperspb.BoolValue {
	if x != nil {
		return x.RebootRequired
	}
	return nil
}

func (x *SoftwareMetadata) GetSoftwareType() SoftwareType {
	if x != nil {
		return x.SoftwareType
	}
	return SoftwareType_SOFTWARE_TYPE_UNSPECIFIED
}

func (x *SoftwareMetadata) GetSwiMetadata() *SwiMetadata {
	if x != nil {
		return x.SwiMetadata
	}
	return nil
}

func (x *SoftwareMetadata) GetExtensionMetadata() *ExtensionMetadata {
	if x != nil {
		return x.ExtensionMetadata
	}
	return nil
}

func (x *SoftwareMetadata) GetFileServerPath() *wrapperspb.StringValue {
	if x != nil {
		return x.FileServerPath
	}
	return nil
}

func (x *SoftwareMetadata) GetSoftwareSource() SoftwareSource {
	if x != nil {
		return x.SoftwareSource
	}
	return SoftwareSource_SOFTWARE_SOURCE_UNSPECIFIED
}

// SwiMetadata is versioning metadata describing .swi type images.
type SwiMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// version specifies the version of the swi image
	Version *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// release specifies the swi image release information
	Release *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=release,proto3" json:"release,omitempty"`
	// variant specifies the swi image variant
	Variant Variant `protobuf:"varint,3,opt,name=variant,proto3,enum=arista.softwaremanagement.v1.Variant" json:"variant,omitempty"`
	// flavor is the swi image flavor
	Flavor Flavor `protobuf:"varint,4,opt,name=flavor,proto3,enum=arista.softwaremanagement.v1.Flavor" json:"flavor,omitempty"`
	// arch is the swi architecture
	Arch Arch `protobuf:"varint,5,opt,name=arch,proto3,enum=arista.softwaremanagement.v1.Arch" json:"arch,omitempty"`
	// max_hardware_epoch specifies the max hardware epoch value supported
	MaxHardwareEpoch *wrapperspb.UInt32Value `protobuf:"bytes,6,opt,name=max_hardware_epoch,json=maxHardwareEpoch,proto3" json:"max_hardware_epoch,omitempty"`
	// blessed indicates if the swi image is blessed
	Blessed *wrapperspb.BoolValue `protobuf:"bytes,7,opt,name=blessed,proto3" json:"blessed,omitempty"`
	// image_format_version specifies the EOS image format version
	ImageFormatVersion ImageFormatVersion `protobuf:"varint,8,opt,name=image_format_version,json=imageFormatVersion,proto3,enum=arista.softwaremanagement.v1.ImageFormatVersion" json:"image_format_version,omitempty"`
	// embedded_terminattr specifies the default embedded TerminAttr version pre-installed in the
	// EOS swi image
	EmbeddedTerminattr *ExtensionMetadata `protobuf:"bytes,9,opt,name=embedded_terminattr,json=embeddedTerminattr,proto3" json:"embedded_terminattr,omitempty"`
	// optimization specifies any adaptations made to the image for specific products or
	// use-cases
	Optimization *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=optimization,proto3" json:"optimization,omitempty"`
}

func (x *SwiMetadata) Reset() {
	*x = SwiMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_softwaremanagement_v1_softwaremanagement_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwiMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwiMetadata) ProtoMessage() {}

func (x *SwiMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_arista_softwaremanagement_v1_softwaremanagement_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwiMetadata.ProtoReflect.Descriptor instead.
func (*SwiMetadata) Descriptor() ([]byte, []int) {
	return file_arista_softwaremanagement_v1_softwaremanagement_proto_rawDescGZIP(), []int{5}
}

func (x *SwiMetadata) GetVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *SwiMetadata) GetRelease() *wrapperspb.StringValue {
	if x != nil {
		return x.Release
	}
	return nil
}

func (x *SwiMetadata) GetVariant() Variant {
	if x != nil {
		return x.Variant
	}
	return Variant_VARIANT_UNSPECIFIED
}

func (x *SwiMetadata) GetFlavor() Flavor {
	if x != nil {
		return x.Flavor
	}
	return Flavor_FLAVOR_UNSPECIFIED
}

func (x *SwiMetadata) GetArch() Arch {
	if x != nil {
		return x.Arch
	}
	return Arch_ARCH_UNSPECIFIED
}

func (x *SwiMetadata) GetMaxHardwareEpoch() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxHardwareEpoch
	}
	return nil
}

func (x *SwiMetadata) GetBlessed() *wrapperspb.BoolValue {
	if x != nil {
		return x.Blessed
	}
	return nil
}

func (x *SwiMetadata) GetImageFormatVersion() ImageFormatVersion {
	if x != nil {
		return x.ImageFormatVersion
	}
	return ImageFormatVersion_IMAGE_FORMAT_VERSION_UNSPECIFIED
}

func (x *SwiMetadata) GetEmbeddedTerminattr() *ExtensionMetadata {
	if x != nil {
		return x.EmbeddedTerminattr
	}
	return nil
}

func (x *SwiMetadata) GetOptimization() *wrapperspb.StringValue {
	if x != nil {
		return x.Optimization
	}
	return nil
}

// ExtensionMetadata is versioning metadata describing extensions (.swix and .rpm).
type ExtensionMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// description is the swix or rpm description
	Description *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// name is the name of the swix or rpm extension
	Name *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// version is the version of the swix or rpm extension
	Version *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// release is the value of the swix or rpm extension release
	Release *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=release,proto3" json:"release,omitempty"`
	// epoch is versioning metadata in swix or rpm extensions which allows handling for
	// hard-to-compare version numbers
	Epoch *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// arch is the architecture of the swix or rpm extension
	Arch Arch `protobuf:"varint,6,opt,name=arch,proto3,enum=arista.softwaremanagement.v1.Arch" json:"arch,omitempty"`
	// supported_eos_versions is a list which contains EOS versions supported by the extension.
	// An empty list indicates there are no known restrictions on the EOS versions supported by
	// the extension
	SupportedEosVersions *fmp.RepeatedString `protobuf:"bytes,7,opt,name=supported_eos_versions,json=supportedEosVersions,proto3" json:"supported_eos_versions,omitempty"`
}

func (x *ExtensionMetadata) Reset() {
	*x = ExtensionMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_softwaremanagement_v1_softwaremanagement_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtensionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtensionMetadata) ProtoMessage() {}

func (x *ExtensionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_arista_softwaremanagement_v1_softwaremanagement_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtensionMetadata.ProtoReflect.Descriptor instead.
func (*ExtensionMetadata) Descriptor() ([]byte, []int) {
	return file_arista_softwaremanagement_v1_softwaremanagement_proto_rawDescGZIP(), []int{6}
}

func (x *ExtensionMetadata) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ExtensionMetadata) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ExtensionMetadata) GetVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *ExtensionMetadata) GetRelease() *wrapperspb.StringValue {
	if x != nil {
		return x.Release
	}
	return nil
}

func (x *ExtensionMetadata) GetEpoch() *wrapperspb.StringValue {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *ExtensionMetadata) GetArch() Arch {
	if x != nil {
		return x.Arch
	}
	return Arch_ARCH_UNSPECIFIED
}

func (x *ExtensionMetadata) GetSupportedEosVersions() *fmp.RepeatedString {
	if x != nil {
		return x.SupportedEosVersions
	}
	return nil
}

// ReleasesStatus contains information about the state of the available software releases
// which are retrieved from Arista's Software Download site by CloudVision.
type ReleasesStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// level is the relative importance of the message field contained in the status
	Level Level `protobuf:"varint,1,opt,name=level,proto3,enum=arista.softwaremanagement.v1.Level" json:"level,omitempty"`
	// message is populated with a string which will provide more information regarding
	// the latest interaction with the Arista's Software Download site while pulling the set of
	// available software releases
	Message *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// recommended_action expresses a particular user-actionable step that can be carried out to
	// ensure the proper operation of CloudVision while interacting with Arista's Software
	// Download site to obtain the set of available software releases.
	RecommendedAction RecommendedAction `protobuf:"varint,3,opt,name=recommended_action,json=recommendedAction,proto3,enum=arista.softwaremanagement.v1.RecommendedAction" json:"recommended_action,omitempty"`
}

func (x *ReleasesStatus) Reset() {
	*x = ReleasesStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_softwaremanagement_v1_softwaremanagement_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleasesStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleasesStatus) ProtoMessage() {}

func (x *ReleasesStatus) ProtoReflect() protoreflect.Message {
	mi := &file_arista_softwaremanagement_v1_softwaremanagement_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleasesStatus.ProtoReflect.Descriptor instead.
func (*ReleasesStatus) Descriptor() ([]byte, []int) {
	return file_arista_softwaremanagement_v1_softwaremanagement_proto_rawDescGZIP(), []int{7}
}

func (x *ReleasesStatus) GetLevel() Level {
	if x != nil {
		return x.Level
	}
	return Level_LEVEL_UNSPECIFIED
}

func (x *ReleasesStatus) GetMessage() *wrapperspb.StringValue {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ReleasesStatus) GetRecommendedAction() RecommendedAction {
	if x != nil {
		return x.RecommendedAction
	}
	return RecommendedAction_RECOMMENDED_ACTION_UNSPECIFIED
}

// Releases is the entire set of software releases available from the Arista's Software
// Download site. Once downloaded, a software release can be deployed to devices managed by
// CloudVision.
type Releases struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// status is providing additional information about the retrieval of the software releases
	// returned in the message
	Status *ReleasesStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// uris are the URI paths specifying the location of the available software releases that
	// can be downloaded from the Arista's Software Download site. These URIs are used
	// by the `RepositoryConfig` API to add a software release to CloudVision.
	Uris *fmp.RepeatedString `protobuf:"bytes,2,opt,name=uris,proto3" json:"uris,omitempty"`
}

func (x *Releases) Reset() {
	*x = Releases{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_softwaremanagement_v1_softwaremanagement_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Releases) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Releases) ProtoMessage() {}

func (x *Releases) ProtoReflect() protoreflect.Message {
	mi := &file_arista_softwaremanagement_v1_softwaremanagement_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Releases.ProtoReflect.Descriptor instead.
func (*Releases) Descriptor() ([]byte, []int) {
	return file_arista_softwaremanagement_v1_softwaremanagement_proto_rawDescGZIP(), []int{8}
}

func (x *Releases) GetStatus() *ReleasesStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Releases) GetUris() *fmp.RepeatedString {
	if x != nil {
		return x.Uris
	}
	return nil
}

var File_arista_softwaremanagement_v1_softwaremanagement_proto protoreflect.FileDescriptor

var file_arista_softwaremanagement_v1_softwaremanagement_proto_rawDesc = []byte{
	0x0a, 0x35, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72,
	0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2f, 0x73,
	0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x66, 0x6d, 0x70, 0x2f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x66, 0x6d,
	0x70, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x47, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4b, 0x65,
	0x79, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x3a, 0x04, 0x80, 0x8e, 0x19, 0x01, 0x22, 0x91, 0x04, 0x0a, 0x0a, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x3d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4b,
	0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x65, 0x64, 0x42, 0x79, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x46, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x6c, 0x61, 0x73,
	0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x12, 0x44, 0x0a, 0x10, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x55, 0x0a, 0x0f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61,
	0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61,
	0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5b, 0x0a, 0x11, 0x73, 0x6f, 0x66, 0x74,
	0x77, 0x61, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66,
	0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x10, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72, 0x6f, 0x22, 0xce, 0x01,
	0x0a, 0x10, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x3d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72,
	0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2e, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x75, 0x72,
	0x69, 0x12, 0x43, 0x0a, 0x0f, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72, 0x77, 0x22, 0xec,
	0x01, 0x0a, 0x0e, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x42, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66,
	0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5e, 0x0a,
	0x12, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa8, 0x05,
	0x0a, 0x10, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x49, 0x0a, 0x0b, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a,
	0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x64, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x62, 0x6f,
	0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x0d, 0x73, 0x6f,
	0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2a, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77,
	0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x73,
	0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a, 0x0c, 0x73,
	0x77, 0x69, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77,
	0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x77, 0x69, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x73, 0x77,
	0x69, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x5e, 0x0a, 0x12, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x11, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x46, 0x0a, 0x10, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x55, 0x0a, 0x0f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61,
	0x72, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61,
	0x72, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xbe, 0x05, 0x0a, 0x0b, 0x53, 0x77, 0x69,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74,
	0x52, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x06, 0x66, 0x6c, 0x61,
	0x76, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x52,
	0x06, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x04, 0x61, 0x72, 0x63, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x52, 0x04, 0x61, 0x72, 0x63, 0x68, 0x12,
	0x4a, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x48, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x34, 0x0a, 0x07, 0x62,
	0x6c, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x62, 0x6c, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x12, 0x62, 0x0a, 0x14, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x30, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72,
	0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x12, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x13, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65,
	0x64, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x74, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74,
	0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x12, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x54, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x74, 0x72, 0x12, 0x40, 0x0a, 0x0c, 0x6f, 0x70, 0x74, 0x69, 0x6d,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6f, 0x70, 0x74,
	0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xac, 0x03, 0x0a, 0x11, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x36, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x36, 0x0a, 0x04, 0x61, 0x72, 0x63, 0x68, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66,
	0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x52, 0x04, 0x61, 0x72, 0x63, 0x68, 0x12, 0x49, 0x0a,
	0x16, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6f, 0x73, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x66, 0x6d, 0x70, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x14, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x45, 0x6f, 0x73,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xe3, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5e,
	0x0a, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x72, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x81,
	0x01, 0x0a, 0x08, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x27, 0x0a, 0x04, 0x75, 0x72, 0x69, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x75, 0x72, 0x69, 0x73, 0x3a, 0x06, 0xa2, 0x8e, 0x19, 0x02,
	0x72, 0x6f, 0x2a, 0xa8, 0x01, 0x0a, 0x0e, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x4f, 0x46, 0x54, 0x57, 0x41, 0x52,
	0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x4f, 0x46, 0x54, 0x57, 0x41,
	0x52, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x10,
	0x01, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x4f, 0x46, 0x54, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19,
	0x53, 0x4f, 0x46, 0x54, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x50, 0x52, 0x45, 0x4c, 0x4f, 0x41, 0x44, 0x45, 0x44, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x53,
	0x4f, 0x46, 0x54, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4e,
	0x50, 0x5f, 0x4d, 0x49, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x2a, 0xbd, 0x01,
	0x0a, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52,
	0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53,
	0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52,
	0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x14, 0x0a, 0x10, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x4c, 0x4f, 0x41, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53,
	0x53, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x13,
	0x0a, 0x0f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x41, 0x56, 0x49, 0x4e,
	0x47, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x4f,
	0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x07, 0x2a, 0x91, 0x01,
	0x0a, 0x0c, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d,
	0x0a, 0x19, 0x53, 0x4f, 0x46, 0x54, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a,
	0x11, 0x53, 0x4f, 0x46, 0x54, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x57, 0x49, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x4f, 0x46, 0x54, 0x57, 0x41, 0x52, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x54, 0x52,
	0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x4f, 0x46, 0x54, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x57, 0x49, 0x58, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x4f,
	0x46, 0x54, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x50, 0x4d, 0x10,
	0x04, 0x2a, 0x94, 0x01, 0x0a, 0x12, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x4d, 0x41, 0x47,
	0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c,
	0x0a, 0x18, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x56,
	0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18,
	0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x56, 0x45, 0x52,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x32, 0x5f, 0x30, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x4d,
	0x41, 0x47, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x33, 0x5f, 0x30, 0x10, 0x03, 0x2a, 0x6f, 0x0a, 0x04, 0x41, 0x72, 0x63, 0x68,
	0x12, 0x14, 0x0a, 0x10, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x4e,
	0x4f, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x52, 0x43, 0x48,
	0x5f, 0x49, 0x33, 0x38, 0x36, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x52, 0x43, 0x48, 0x5f,
	0x49, 0x36, 0x38, 0x36, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x58,
	0x38, 0x36, 0x5f, 0x36, 0x34, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x52, 0x43, 0x48, 0x5f,
	0x41, 0x41, 0x52, 0x43, 0x48, 0x36, 0x34, 0x10, 0x05, 0x2a, 0x4d, 0x0a, 0x07, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x13, 0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x10, 0x01, 0x12, 0x19, 0x0a,
	0x15, 0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x2a, 0x9f, 0x01, 0x0a, 0x06, 0x46, 0x6c, 0x61,
	0x76, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x46,
	0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x12,
	0x0e, 0x0a, 0x0a, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x32, 0x47, 0x42, 0x10, 0x02, 0x12,
	0x10, 0x0a, 0x0c, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x10,
	0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x44, 0x50, 0x45, 0x10,
	0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x44, 0x50, 0x10,
	0x05, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x32, 0x47, 0x42, 0x5f,
	0x50, 0x44, 0x50, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f,
	0x44, 0x50, 0x45, 0x5f, 0x43, 0x54, 0x4e, 0x52, 0x10, 0x07, 0x2a, 0x41, 0x0a, 0x0a, 0x44, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x49, 0x47, 0x45,
	0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x49, 0x47, 0x45, 0x53, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x41, 0x35, 0x31, 0x32, 0x10, 0x01, 0x2a, 0xe4, 0x01,
	0x0a, 0x11, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44,
	0x45, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45, 0x43, 0x4f, 0x4d,
	0x4d, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x41, 0x43, 0x54, 0x5f, 0x54, 0x41, 0x43, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x52,
	0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x23, 0x0a,
	0x1f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e,
	0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x45,
	0x44, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x5f,
	0x45, 0x55, 0x4c, 0x41, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d,
	0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x54,
	0x52, 0x59, 0x10, 0x05, 0x2a, 0x52, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x15, 0x0a,
	0x11, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x57, 0x41,
	0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x42, 0x96, 0x01, 0x0a, 0x20, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x42, 0x12, 0x53,
	0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x01, 0x5a, 0x5c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x6f, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72,
	0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x3b, 0x73,
	0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_arista_softwaremanagement_v1_softwaremanagement_proto_rawDescOnce sync.Once
	file_arista_softwaremanagement_v1_softwaremanagement_proto_rawDescData = file_arista_softwaremanagement_v1_softwaremanagement_proto_rawDesc
)

func file_arista_softwaremanagement_v1_softwaremanagement_proto_rawDescGZIP() []byte {
	file_arista_softwaremanagement_v1_softwaremanagement_proto_rawDescOnce.Do(func() {
		file_arista_softwaremanagement_v1_softwaremanagement_proto_rawDescData = protoimpl.X.CompressGZIP(file_arista_softwaremanagement_v1_softwaremanagement_proto_rawDescData)
	})
	return file_arista_softwaremanagement_v1_softwaremanagement_proto_rawDescData
}

var file_arista_softwaremanagement_v1_softwaremanagement_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_arista_softwaremanagement_v1_softwaremanagement_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_arista_softwaremanagement_v1_softwaremanagement_proto_goTypes = []interface{}{
	(SoftwareSource)(0),            // 0: arista.softwaremanagement.v1.SoftwareSource
	(Progress)(0),                  // 1: arista.softwaremanagement.v1.Progress
	(SoftwareType)(0),              // 2: arista.softwaremanagement.v1.SoftwareType
	(ImageFormatVersion)(0),        // 3: arista.softwaremanagement.v1.ImageFormatVersion
	(Arch)(0),                      // 4: arista.softwaremanagement.v1.Arch
	(Variant)(0),                   // 5: arista.softwaremanagement.v1.Variant
	(Flavor)(0),                    // 6: arista.softwaremanagement.v1.Flavor
	(DigestType)(0),                // 7: arista.softwaremanagement.v1.DigestType
	(RecommendedAction)(0),         // 8: arista.softwaremanagement.v1.RecommendedAction
	(Level)(0),                     // 9: arista.softwaremanagement.v1.Level
	(*RepositoryKey)(nil),          // 10: arista.softwaremanagement.v1.RepositoryKey
	(*Repository)(nil),             // 11: arista.softwaremanagement.v1.Repository
	(*RepositoryConfig)(nil),       // 12: arista.softwaremanagement.v1.RepositoryConfig
	(*SoftwareStatus)(nil),         // 13: arista.softwaremanagement.v1.SoftwareStatus
	(*SoftwareMetadata)(nil),       // 14: arista.softwaremanagement.v1.SoftwareMetadata
	(*SwiMetadata)(nil),            // 15: arista.softwaremanagement.v1.SwiMetadata
	(*ExtensionMetadata)(nil),      // 16: arista.softwaremanagement.v1.ExtensionMetadata
	(*ReleasesStatus)(nil),         // 17: arista.softwaremanagement.v1.ReleasesStatus
	(*Releases)(nil),               // 18: arista.softwaremanagement.v1.Releases
	(*wrapperspb.StringValue)(nil), // 19: google.protobuf.StringValue
	(*timestamppb.Timestamp)(nil),  // 20: google.protobuf.Timestamp
	(*wrapperspb.BoolValue)(nil),   // 21: google.protobuf.BoolValue
	(*wrapperspb.UInt64Value)(nil), // 22: google.protobuf.UInt64Value
	(*wrapperspb.UInt32Value)(nil), // 23: google.protobuf.UInt32Value
	(*fmp.RepeatedString)(nil),     // 24: fmp.RepeatedString
}
var file_arista_softwaremanagement_v1_softwaremanagement_proto_depIdxs = []int32{
	19, // 0: arista.softwaremanagement.v1.RepositoryKey.name:type_name -> google.protobuf.StringValue
	10, // 1: arista.softwaremanagement.v1.Repository.key:type_name -> arista.softwaremanagement.v1.RepositoryKey
	19, // 2: arista.softwaremanagement.v1.Repository.uploaded_by:type_name -> google.protobuf.StringValue
	20, // 3: arista.softwaremanagement.v1.Repository.uploaded_at:type_name -> google.protobuf.Timestamp
	19, // 4: arista.softwaremanagement.v1.Repository.last_modified_by:type_name -> google.protobuf.StringValue
	20, // 5: arista.softwaremanagement.v1.Repository.last_modified_at:type_name -> google.protobuf.Timestamp
	13, // 6: arista.softwaremanagement.v1.Repository.software_status:type_name -> arista.softwaremanagement.v1.SoftwareStatus
	14, // 7: arista.softwaremanagement.v1.Repository.software_metadata:type_name -> arista.softwaremanagement.v1.SoftwareMetadata
	10, // 8: arista.softwaremanagement.v1.RepositoryConfig.key:type_name -> arista.softwaremanagement.v1.RepositoryKey
	19, // 9: arista.softwaremanagement.v1.RepositoryConfig.uri:type_name -> google.protobuf.StringValue
	21, // 10: arista.softwaremanagement.v1.RepositoryConfig.reboot_required:type_name -> google.protobuf.BoolValue
	1,  // 11: arista.softwaremanagement.v1.SoftwareStatus.progress:type_name -> arista.softwaremanagement.v1.Progress
	19, // 12: arista.softwaremanagement.v1.SoftwareStatus.message:type_name -> google.protobuf.StringValue
	8,  // 13: arista.softwaremanagement.v1.SoftwareStatus.recommended_action:type_name -> arista.softwaremanagement.v1.RecommendedAction
	7,  // 14: arista.softwaremanagement.v1.SoftwareMetadata.digest_type:type_name -> arista.softwaremanagement.v1.DigestType
	19, // 15: arista.softwaremanagement.v1.SoftwareMetadata.digest:type_name -> google.protobuf.StringValue
	22, // 16: arista.softwaremanagement.v1.SoftwareMetadata.size:type_name -> google.protobuf.UInt64Value
	21, // 17: arista.softwaremanagement.v1.SoftwareMetadata.reboot_required:type_name -> google.protobuf.BoolValue
	2,  // 18: arista.softwaremanagement.v1.SoftwareMetadata.software_type:type_name -> arista.softwaremanagement.v1.SoftwareType
	15, // 19: arista.softwaremanagement.v1.SoftwareMetadata.swi_metadata:type_name -> arista.softwaremanagement.v1.SwiMetadata
	16, // 20: arista.softwaremanagement.v1.SoftwareMetadata.extension_metadata:type_name -> arista.softwaremanagement.v1.ExtensionMetadata
	19, // 21: arista.softwaremanagement.v1.SoftwareMetadata.file_server_path:type_name -> google.protobuf.StringValue
	0,  // 22: arista.softwaremanagement.v1.SoftwareMetadata.software_source:type_name -> arista.softwaremanagement.v1.SoftwareSource
	19, // 23: arista.softwaremanagement.v1.SwiMetadata.version:type_name -> google.protobuf.StringValue
	19, // 24: arista.softwaremanagement.v1.SwiMetadata.release:type_name -> google.protobuf.StringValue
	5,  // 25: arista.softwaremanagement.v1.SwiMetadata.variant:type_name -> arista.softwaremanagement.v1.Variant
	6,  // 26: arista.softwaremanagement.v1.SwiMetadata.flavor:type_name -> arista.softwaremanagement.v1.Flavor
	4,  // 27: arista.softwaremanagement.v1.SwiMetadata.arch:type_name -> arista.softwaremanagement.v1.Arch
	23, // 28: arista.softwaremanagement.v1.SwiMetadata.max_hardware_epoch:type_name -> google.protobuf.UInt32Value
	21, // 29: arista.softwaremanagement.v1.SwiMetadata.blessed:type_name -> google.protobuf.BoolValue
	3,  // 30: arista.softwaremanagement.v1.SwiMetadata.image_format_version:type_name -> arista.softwaremanagement.v1.ImageFormatVersion
	16, // 31: arista.softwaremanagement.v1.SwiMetadata.embedded_terminattr:type_name -> arista.softwaremanagement.v1.ExtensionMetadata
	19, // 32: arista.softwaremanagement.v1.SwiMetadata.optimization:type_name -> google.protobuf.StringValue
	19, // 33: arista.softwaremanagement.v1.ExtensionMetadata.description:type_name -> google.protobuf.StringValue
	19, // 34: arista.softwaremanagement.v1.ExtensionMetadata.name:type_name -> google.protobuf.StringValue
	19, // 35: arista.softwaremanagement.v1.ExtensionMetadata.version:type_name -> google.protobuf.StringValue
	19, // 36: arista.softwaremanagement.v1.ExtensionMetadata.release:type_name -> google.protobuf.StringValue
	19, // 37: arista.softwaremanagement.v1.ExtensionMetadata.epoch:type_name -> google.protobuf.StringValue
	4,  // 38: arista.softwaremanagement.v1.ExtensionMetadata.arch:type_name -> arista.softwaremanagement.v1.Arch
	24, // 39: arista.softwaremanagement.v1.ExtensionMetadata.supported_eos_versions:type_name -> fmp.RepeatedString
	9,  // 40: arista.softwaremanagement.v1.ReleasesStatus.level:type_name -> arista.softwaremanagement.v1.Level
	19, // 41: arista.softwaremanagement.v1.ReleasesStatus.message:type_name -> google.protobuf.StringValue
	8,  // 42: arista.softwaremanagement.v1.ReleasesStatus.recommended_action:type_name -> arista.softwaremanagement.v1.RecommendedAction
	17, // 43: arista.softwaremanagement.v1.Releases.status:type_name -> arista.softwaremanagement.v1.ReleasesStatus
	24, // 44: arista.softwaremanagement.v1.Releases.uris:type_name -> fmp.RepeatedString
	45, // [45:45] is the sub-list for method output_type
	45, // [45:45] is the sub-list for method input_type
	45, // [45:45] is the sub-list for extension type_name
	45, // [45:45] is the sub-list for extension extendee
	0,  // [0:45] is the sub-list for field type_name
}

func init() { file_arista_softwaremanagement_v1_softwaremanagement_proto_init() }
func file_arista_softwaremanagement_v1_softwaremanagement_proto_init() {
	if File_arista_softwaremanagement_v1_softwaremanagement_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_arista_softwaremanagement_v1_softwaremanagement_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_softwaremanagement_v1_softwaremanagement_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Repository); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_softwaremanagement_v1_softwaremanagement_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_softwaremanagement_v1_softwaremanagement_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SoftwareStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_softwaremanagement_v1_softwaremanagement_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SoftwareMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_softwaremanagement_v1_softwaremanagement_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwiMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_softwaremanagement_v1_softwaremanagement_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtensionMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_softwaremanagement_v1_softwaremanagement_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleasesStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_softwaremanagement_v1_softwaremanagement_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Releases); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_arista_softwaremanagement_v1_softwaremanagement_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_arista_softwaremanagement_v1_softwaremanagement_proto_goTypes,
		DependencyIndexes: file_arista_softwaremanagement_v1_softwaremanagement_proto_depIdxs,
		EnumInfos:         file_arista_softwaremanagement_v1_softwaremanagement_proto_enumTypes,
		MessageInfos:      file_arista_softwaremanagement_v1_softwaremanagement_proto_msgTypes,
	}.Build()
	File_arista_softwaremanagement_v1_softwaremanagement_proto = out.File
	file_arista_softwaremanagement_v1_softwaremanagement_proto_rawDesc = nil
	file_arista_softwaremanagement_v1_softwaremanagement_proto_goTypes = nil
	file_arista_softwaremanagement_v1_softwaremanagement_proto_depIdxs = nil
}
