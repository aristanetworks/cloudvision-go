// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package connectivitymonitor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProbeServiceClient is the client API for ProbeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProbeServiceClient interface {
	GetOne(ctx context.Context, in *ProbeRequest, opts ...grpc.CallOption) (*ProbeResponse, error)
	GetSome(ctx context.Context, in *ProbeSomeRequest, opts ...grpc.CallOption) (ProbeService_GetSomeClient, error)
	GetAll(ctx context.Context, in *ProbeStreamRequest, opts ...grpc.CallOption) (ProbeService_GetAllClient, error)
	Subscribe(ctx context.Context, in *ProbeStreamRequest, opts ...grpc.CallOption) (ProbeService_SubscribeClient, error)
	GetMeta(ctx context.Context, in *ProbeStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error)
	SubscribeMeta(ctx context.Context, in *ProbeStreamRequest, opts ...grpc.CallOption) (ProbeService_SubscribeMetaClient, error)
}

type probeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProbeServiceClient(cc grpc.ClientConnInterface) ProbeServiceClient {
	return &probeServiceClient{cc}
}

func (c *probeServiceClient) GetOne(ctx context.Context, in *ProbeRequest, opts ...grpc.CallOption) (*ProbeResponse, error) {
	out := new(ProbeResponse)
	err := c.cc.Invoke(ctx, "/arista.connectivitymonitor.v1.ProbeService/GetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *probeServiceClient) GetSome(ctx context.Context, in *ProbeSomeRequest, opts ...grpc.CallOption) (ProbeService_GetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProbeService_ServiceDesc.Streams[0], "/arista.connectivitymonitor.v1.ProbeService/GetSome", opts...)
	if err != nil {
		return nil, err
	}
	x := &probeServiceGetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProbeService_GetSomeClient interface {
	Recv() (*ProbeSomeResponse, error)
	grpc.ClientStream
}

type probeServiceGetSomeClient struct {
	grpc.ClientStream
}

func (x *probeServiceGetSomeClient) Recv() (*ProbeSomeResponse, error) {
	m := new(ProbeSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *probeServiceClient) GetAll(ctx context.Context, in *ProbeStreamRequest, opts ...grpc.CallOption) (ProbeService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProbeService_ServiceDesc.Streams[1], "/arista.connectivitymonitor.v1.ProbeService/GetAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &probeServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProbeService_GetAllClient interface {
	Recv() (*ProbeStreamResponse, error)
	grpc.ClientStream
}

type probeServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *probeServiceGetAllClient) Recv() (*ProbeStreamResponse, error) {
	m := new(ProbeStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *probeServiceClient) Subscribe(ctx context.Context, in *ProbeStreamRequest, opts ...grpc.CallOption) (ProbeService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProbeService_ServiceDesc.Streams[2], "/arista.connectivitymonitor.v1.ProbeService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &probeServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProbeService_SubscribeClient interface {
	Recv() (*ProbeStreamResponse, error)
	grpc.ClientStream
}

type probeServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *probeServiceSubscribeClient) Recv() (*ProbeStreamResponse, error) {
	m := new(ProbeStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *probeServiceClient) GetMeta(ctx context.Context, in *ProbeStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error) {
	out := new(MetaResponse)
	err := c.cc.Invoke(ctx, "/arista.connectivitymonitor.v1.ProbeService/GetMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *probeServiceClient) SubscribeMeta(ctx context.Context, in *ProbeStreamRequest, opts ...grpc.CallOption) (ProbeService_SubscribeMetaClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProbeService_ServiceDesc.Streams[3], "/arista.connectivitymonitor.v1.ProbeService/SubscribeMeta", opts...)
	if err != nil {
		return nil, err
	}
	x := &probeServiceSubscribeMetaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProbeService_SubscribeMetaClient interface {
	Recv() (*MetaResponse, error)
	grpc.ClientStream
}

type probeServiceSubscribeMetaClient struct {
	grpc.ClientStream
}

func (x *probeServiceSubscribeMetaClient) Recv() (*MetaResponse, error) {
	m := new(MetaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProbeServiceServer is the server API for ProbeService service.
// All implementations must embed UnimplementedProbeServiceServer
// for forward compatibility
type ProbeServiceServer interface {
	GetOne(context.Context, *ProbeRequest) (*ProbeResponse, error)
	GetSome(*ProbeSomeRequest, ProbeService_GetSomeServer) error
	GetAll(*ProbeStreamRequest, ProbeService_GetAllServer) error
	Subscribe(*ProbeStreamRequest, ProbeService_SubscribeServer) error
	GetMeta(context.Context, *ProbeStreamRequest) (*MetaResponse, error)
	SubscribeMeta(*ProbeStreamRequest, ProbeService_SubscribeMetaServer) error
	mustEmbedUnimplementedProbeServiceServer()
}

// UnimplementedProbeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProbeServiceServer struct {
}

func (UnimplementedProbeServiceServer) GetOne(context.Context, *ProbeRequest) (*ProbeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedProbeServiceServer) GetSome(*ProbeSomeRequest, ProbeService_GetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSome not implemented")
}
func (UnimplementedProbeServiceServer) GetAll(*ProbeStreamRequest, ProbeService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedProbeServiceServer) Subscribe(*ProbeStreamRequest, ProbeService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedProbeServiceServer) GetMeta(context.Context, *ProbeStreamRequest) (*MetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeta not implemented")
}
func (UnimplementedProbeServiceServer) SubscribeMeta(*ProbeStreamRequest, ProbeService_SubscribeMetaServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMeta not implemented")
}
func (UnimplementedProbeServiceServer) mustEmbedUnimplementedProbeServiceServer() {}

// UnsafeProbeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProbeServiceServer will
// result in compilation errors.
type UnsafeProbeServiceServer interface {
	mustEmbedUnimplementedProbeServiceServer()
}

func RegisterProbeServiceServer(s grpc.ServiceRegistrar, srv ProbeServiceServer) {
	s.RegisterService(&ProbeService_ServiceDesc, srv)
}

func _ProbeService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProbeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProbeServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arista.connectivitymonitor.v1.ProbeService/GetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProbeServiceServer).GetOne(ctx, req.(*ProbeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProbeService_GetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProbeSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProbeServiceServer).GetSome(m, &probeServiceGetSomeServer{stream})
}

type ProbeService_GetSomeServer interface {
	Send(*ProbeSomeResponse) error
	grpc.ServerStream
}

type probeServiceGetSomeServer struct {
	grpc.ServerStream
}

func (x *probeServiceGetSomeServer) Send(m *ProbeSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ProbeService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProbeStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProbeServiceServer).GetAll(m, &probeServiceGetAllServer{stream})
}

type ProbeService_GetAllServer interface {
	Send(*ProbeStreamResponse) error
	grpc.ServerStream
}

type probeServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *probeServiceGetAllServer) Send(m *ProbeStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ProbeService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProbeStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProbeServiceServer).Subscribe(m, &probeServiceSubscribeServer{stream})
}

type ProbeService_SubscribeServer interface {
	Send(*ProbeStreamResponse) error
	grpc.ServerStream
}

type probeServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *probeServiceSubscribeServer) Send(m *ProbeStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ProbeService_GetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProbeStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProbeServiceServer).GetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arista.connectivitymonitor.v1.ProbeService/GetMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProbeServiceServer).GetMeta(ctx, req.(*ProbeStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProbeService_SubscribeMeta_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProbeStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProbeServiceServer).SubscribeMeta(m, &probeServiceSubscribeMetaServer{stream})
}

type ProbeService_SubscribeMetaServer interface {
	Send(*MetaResponse) error
	grpc.ServerStream
}

type probeServiceSubscribeMetaServer struct {
	grpc.ServerStream
}

func (x *probeServiceSubscribeMetaServer) Send(m *MetaResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ProbeService_ServiceDesc is the grpc.ServiceDesc for ProbeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProbeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.connectivitymonitor.v1.ProbeService",
	HandlerType: (*ProbeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _ProbeService_GetOne_Handler,
		},
		{
			MethodName: "GetMeta",
			Handler:    _ProbeService_GetMeta_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSome",
			Handler:       _ProbeService_GetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAll",
			Handler:       _ProbeService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _ProbeService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeMeta",
			Handler:       _ProbeService_SubscribeMeta_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/connectivitymonitor.v1/services.gen.proto",
}

// ProbeStatsServiceClient is the client API for ProbeStatsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProbeStatsServiceClient interface {
	GetOne(ctx context.Context, in *ProbeStatsRequest, opts ...grpc.CallOption) (*ProbeStatsResponse, error)
	GetSome(ctx context.Context, in *ProbeStatsSomeRequest, opts ...grpc.CallOption) (ProbeStatsService_GetSomeClient, error)
	GetAll(ctx context.Context, in *ProbeStatsStreamRequest, opts ...grpc.CallOption) (ProbeStatsService_GetAllClient, error)
	Subscribe(ctx context.Context, in *ProbeStatsStreamRequest, opts ...grpc.CallOption) (ProbeStatsService_SubscribeClient, error)
	GetMeta(ctx context.Context, in *ProbeStatsStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error)
	SubscribeMeta(ctx context.Context, in *ProbeStatsStreamRequest, opts ...grpc.CallOption) (ProbeStatsService_SubscribeMetaClient, error)
}

type probeStatsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProbeStatsServiceClient(cc grpc.ClientConnInterface) ProbeStatsServiceClient {
	return &probeStatsServiceClient{cc}
}

func (c *probeStatsServiceClient) GetOne(ctx context.Context, in *ProbeStatsRequest, opts ...grpc.CallOption) (*ProbeStatsResponse, error) {
	out := new(ProbeStatsResponse)
	err := c.cc.Invoke(ctx, "/arista.connectivitymonitor.v1.ProbeStatsService/GetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *probeStatsServiceClient) GetSome(ctx context.Context, in *ProbeStatsSomeRequest, opts ...grpc.CallOption) (ProbeStatsService_GetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProbeStatsService_ServiceDesc.Streams[0], "/arista.connectivitymonitor.v1.ProbeStatsService/GetSome", opts...)
	if err != nil {
		return nil, err
	}
	x := &probeStatsServiceGetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProbeStatsService_GetSomeClient interface {
	Recv() (*ProbeStatsSomeResponse, error)
	grpc.ClientStream
}

type probeStatsServiceGetSomeClient struct {
	grpc.ClientStream
}

func (x *probeStatsServiceGetSomeClient) Recv() (*ProbeStatsSomeResponse, error) {
	m := new(ProbeStatsSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *probeStatsServiceClient) GetAll(ctx context.Context, in *ProbeStatsStreamRequest, opts ...grpc.CallOption) (ProbeStatsService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProbeStatsService_ServiceDesc.Streams[1], "/arista.connectivitymonitor.v1.ProbeStatsService/GetAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &probeStatsServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProbeStatsService_GetAllClient interface {
	Recv() (*ProbeStatsStreamResponse, error)
	grpc.ClientStream
}

type probeStatsServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *probeStatsServiceGetAllClient) Recv() (*ProbeStatsStreamResponse, error) {
	m := new(ProbeStatsStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *probeStatsServiceClient) Subscribe(ctx context.Context, in *ProbeStatsStreamRequest, opts ...grpc.CallOption) (ProbeStatsService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProbeStatsService_ServiceDesc.Streams[2], "/arista.connectivitymonitor.v1.ProbeStatsService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &probeStatsServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProbeStatsService_SubscribeClient interface {
	Recv() (*ProbeStatsStreamResponse, error)
	grpc.ClientStream
}

type probeStatsServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *probeStatsServiceSubscribeClient) Recv() (*ProbeStatsStreamResponse, error) {
	m := new(ProbeStatsStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *probeStatsServiceClient) GetMeta(ctx context.Context, in *ProbeStatsStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error) {
	out := new(MetaResponse)
	err := c.cc.Invoke(ctx, "/arista.connectivitymonitor.v1.ProbeStatsService/GetMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *probeStatsServiceClient) SubscribeMeta(ctx context.Context, in *ProbeStatsStreamRequest, opts ...grpc.CallOption) (ProbeStatsService_SubscribeMetaClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProbeStatsService_ServiceDesc.Streams[3], "/arista.connectivitymonitor.v1.ProbeStatsService/SubscribeMeta", opts...)
	if err != nil {
		return nil, err
	}
	x := &probeStatsServiceSubscribeMetaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProbeStatsService_SubscribeMetaClient interface {
	Recv() (*MetaResponse, error)
	grpc.ClientStream
}

type probeStatsServiceSubscribeMetaClient struct {
	grpc.ClientStream
}

func (x *probeStatsServiceSubscribeMetaClient) Recv() (*MetaResponse, error) {
	m := new(MetaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProbeStatsServiceServer is the server API for ProbeStatsService service.
// All implementations must embed UnimplementedProbeStatsServiceServer
// for forward compatibility
type ProbeStatsServiceServer interface {
	GetOne(context.Context, *ProbeStatsRequest) (*ProbeStatsResponse, error)
	GetSome(*ProbeStatsSomeRequest, ProbeStatsService_GetSomeServer) error
	GetAll(*ProbeStatsStreamRequest, ProbeStatsService_GetAllServer) error
	Subscribe(*ProbeStatsStreamRequest, ProbeStatsService_SubscribeServer) error
	GetMeta(context.Context, *ProbeStatsStreamRequest) (*MetaResponse, error)
	SubscribeMeta(*ProbeStatsStreamRequest, ProbeStatsService_SubscribeMetaServer) error
	mustEmbedUnimplementedProbeStatsServiceServer()
}

// UnimplementedProbeStatsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProbeStatsServiceServer struct {
}

func (UnimplementedProbeStatsServiceServer) GetOne(context.Context, *ProbeStatsRequest) (*ProbeStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedProbeStatsServiceServer) GetSome(*ProbeStatsSomeRequest, ProbeStatsService_GetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSome not implemented")
}
func (UnimplementedProbeStatsServiceServer) GetAll(*ProbeStatsStreamRequest, ProbeStatsService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedProbeStatsServiceServer) Subscribe(*ProbeStatsStreamRequest, ProbeStatsService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedProbeStatsServiceServer) GetMeta(context.Context, *ProbeStatsStreamRequest) (*MetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeta not implemented")
}
func (UnimplementedProbeStatsServiceServer) SubscribeMeta(*ProbeStatsStreamRequest, ProbeStatsService_SubscribeMetaServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMeta not implemented")
}
func (UnimplementedProbeStatsServiceServer) mustEmbedUnimplementedProbeStatsServiceServer() {}

// UnsafeProbeStatsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProbeStatsServiceServer will
// result in compilation errors.
type UnsafeProbeStatsServiceServer interface {
	mustEmbedUnimplementedProbeStatsServiceServer()
}

func RegisterProbeStatsServiceServer(s grpc.ServiceRegistrar, srv ProbeStatsServiceServer) {
	s.RegisterService(&ProbeStatsService_ServiceDesc, srv)
}

func _ProbeStatsService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProbeStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProbeStatsServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arista.connectivitymonitor.v1.ProbeStatsService/GetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProbeStatsServiceServer).GetOne(ctx, req.(*ProbeStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProbeStatsService_GetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProbeStatsSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProbeStatsServiceServer).GetSome(m, &probeStatsServiceGetSomeServer{stream})
}

type ProbeStatsService_GetSomeServer interface {
	Send(*ProbeStatsSomeResponse) error
	grpc.ServerStream
}

type probeStatsServiceGetSomeServer struct {
	grpc.ServerStream
}

func (x *probeStatsServiceGetSomeServer) Send(m *ProbeStatsSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ProbeStatsService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProbeStatsStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProbeStatsServiceServer).GetAll(m, &probeStatsServiceGetAllServer{stream})
}

type ProbeStatsService_GetAllServer interface {
	Send(*ProbeStatsStreamResponse) error
	grpc.ServerStream
}

type probeStatsServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *probeStatsServiceGetAllServer) Send(m *ProbeStatsStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ProbeStatsService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProbeStatsStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProbeStatsServiceServer).Subscribe(m, &probeStatsServiceSubscribeServer{stream})
}

type ProbeStatsService_SubscribeServer interface {
	Send(*ProbeStatsStreamResponse) error
	grpc.ServerStream
}

type probeStatsServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *probeStatsServiceSubscribeServer) Send(m *ProbeStatsStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ProbeStatsService_GetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProbeStatsStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProbeStatsServiceServer).GetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arista.connectivitymonitor.v1.ProbeStatsService/GetMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProbeStatsServiceServer).GetMeta(ctx, req.(*ProbeStatsStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProbeStatsService_SubscribeMeta_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProbeStatsStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProbeStatsServiceServer).SubscribeMeta(m, &probeStatsServiceSubscribeMetaServer{stream})
}

type ProbeStatsService_SubscribeMetaServer interface {
	Send(*MetaResponse) error
	grpc.ServerStream
}

type probeStatsServiceSubscribeMetaServer struct {
	grpc.ServerStream
}

func (x *probeStatsServiceSubscribeMetaServer) Send(m *MetaResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ProbeStatsService_ServiceDesc is the grpc.ServiceDesc for ProbeStatsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProbeStatsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.connectivitymonitor.v1.ProbeStatsService",
	HandlerType: (*ProbeStatsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _ProbeStatsService_GetOne_Handler,
		},
		{
			MethodName: "GetMeta",
			Handler:    _ProbeStatsService_GetMeta_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSome",
			Handler:       _ProbeStatsService_GetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAll",
			Handler:       _ProbeStatsService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _ProbeStatsService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeMeta",
			Handler:       _ProbeStatsService_SubscribeMeta_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/connectivitymonitor.v1/services.gen.proto",
}
