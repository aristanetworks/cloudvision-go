// Copyright (c) 2023 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.0
// 	protoc        v4.24.4
// source: arista/connectivitymonitor.v1/connectivitymonitor.proto

package connectivitymonitor

import (
	_ "github.com/aristanetworks/cloudvision-go/api/fmp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ProbeKey uniquely identifies a connectivity monitor probe.
type ProbeKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// device_id is the id of the device in the probe.
	DeviceId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// host is the hostname used in the probe.
	Host *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	// vrf is the name of the VRF in the probe.
	Vrf *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=vrf,proto3" json:"vrf,omitempty"`
}

func (x *ProbeKey) Reset() {
	*x = ProbeKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_connectivitymonitor_v1_connectivitymonitor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProbeKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProbeKey) ProtoMessage() {}

func (x *ProbeKey) ProtoReflect() protoreflect.Message {
	mi := &file_arista_connectivitymonitor_v1_connectivitymonitor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProbeKey.ProtoReflect.Descriptor instead.
func (*ProbeKey) Descriptor() ([]byte, []int) {
	return file_arista_connectivitymonitor_v1_connectivitymonitor_proto_rawDescGZIP(), []int{0}
}

func (x *ProbeKey) GetDeviceId() *wrapperspb.StringValue {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

func (x *ProbeKey) GetHost() *wrapperspb.StringValue {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *ProbeKey) GetVrf() *wrapperspb.StringValue {
	if x != nil {
		return x.Vrf
	}
	return nil
}

// ProbeStatsKey uniquely identifies a connectivity monitor probe's statistics,
// per source interface.
type ProbeStatsKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// device_id is the id of the device in the probe.
	DeviceId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// host is the hostname used in the probe.
	Host *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	// vrf is the name of the VRF in the probe.
	Vrf *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=vrf,proto3" json:"vrf,omitempty"`
	// source_intf is the name of the interface in the probe.
	SourceIntf *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=source_intf,json=sourceIntf,proto3" json:"source_intf,omitempty"`
}

func (x *ProbeStatsKey) Reset() {
	*x = ProbeStatsKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_connectivitymonitor_v1_connectivitymonitor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProbeStatsKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProbeStatsKey) ProtoMessage() {}

func (x *ProbeStatsKey) ProtoReflect() protoreflect.Message {
	mi := &file_arista_connectivitymonitor_v1_connectivitymonitor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProbeStatsKey.ProtoReflect.Descriptor instead.
func (*ProbeStatsKey) Descriptor() ([]byte, []int) {
	return file_arista_connectivitymonitor_v1_connectivitymonitor_proto_rawDescGZIP(), []int{1}
}

func (x *ProbeStatsKey) GetDeviceId() *wrapperspb.StringValue {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

func (x *ProbeStatsKey) GetHost() *wrapperspb.StringValue {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *ProbeStatsKey) GetVrf() *wrapperspb.StringValue {
	if x != nil {
		return x.Vrf
	}
	return nil
}

func (x *ProbeStatsKey) GetSourceIntf() *wrapperspb.StringValue {
	if x != nil {
		return x.SourceIntf
	}
	return nil
}

// Probe is identifying information of a connectivity monitor probe.
// It is used to retrieve probe information without getting the corresponding stats so that
// probe information can be displayed without streaming all related data, such as in the UI.
type Probe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key uniquely identifies the connectivity monitor probe.
	Key *ProbeKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// ip_addr is the IP Address of the probe.
	IpAddr *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=ip_addr,json=ipAddr,proto3" json:"ip_addr,omitempty"`
	// host_name is the name of the host of the probe.
	HostName *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	// description is the description of the probe.
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Probe) Reset() {
	*x = Probe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_connectivitymonitor_v1_connectivitymonitor_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Probe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Probe) ProtoMessage() {}

func (x *Probe) ProtoReflect() protoreflect.Message {
	mi := &file_arista_connectivitymonitor_v1_connectivitymonitor_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Probe.ProtoReflect.Descriptor instead.
func (*Probe) Descriptor() ([]byte, []int) {
	return file_arista_connectivitymonitor_v1_connectivitymonitor_proto_rawDescGZIP(), []int{2}
}

func (x *Probe) GetKey() *ProbeKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Probe) GetIpAddr() *wrapperspb.StringValue {
	if x != nil {
		return x.IpAddr
	}
	return nil
}

func (x *Probe) GetHostName() *wrapperspb.StringValue {
	if x != nil {
		return x.HostName
	}
	return nil
}

func (x *Probe) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

// ProbeStats is the connectivity monitor statistics related to the specified probe.
type ProbeStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key uniquely identifies the connectivity monitor probe.
	Key *ProbeStatsKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// latency_millis is the latency between the device interface and the host.
	// Value is in milliseconds.
	LatencyMillis *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=latency_millis,json=latencyMillis,proto3" json:"latency_millis,omitempty"`
	// jitter_millis is the amount of jitter experienced by requests
	// between the device interface and host.
	// Value is in milliseconds.
	JitterMillis *wrapperspb.DoubleValue `protobuf:"bytes,3,opt,name=jitter_millis,json=jitterMillis,proto3" json:"jitter_millis,omitempty"`
	// http_response_time_millis is the amount of time taken to respond to a http
	// request between the device interface and the host.
	// Value is in milliseconds.
	HttpResponseTimeMillis *wrapperspb.DoubleValue `protobuf:"bytes,4,opt,name=http_response_time_millis,json=httpResponseTimeMillis,proto3" json:"http_response_time_millis,omitempty"`
	// packet_loss_percent is the amount of packet loss experienced
	// by requests between the device interface and host.
	// Value is a percentage.
	PacketLossPercent *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=packet_loss_percent,json=packetLossPercent,proto3" json:"packet_loss_percent,omitempty"`
	// error is the error reported on the connection.
	Error *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ProbeStats) Reset() {
	*x = ProbeStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_connectivitymonitor_v1_connectivitymonitor_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProbeStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProbeStats) ProtoMessage() {}

func (x *ProbeStats) ProtoReflect() protoreflect.Message {
	mi := &file_arista_connectivitymonitor_v1_connectivitymonitor_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProbeStats.ProtoReflect.Descriptor instead.
func (*ProbeStats) Descriptor() ([]byte, []int) {
	return file_arista_connectivitymonitor_v1_connectivitymonitor_proto_rawDescGZIP(), []int{3}
}

func (x *ProbeStats) GetKey() *ProbeStatsKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ProbeStats) GetLatencyMillis() *wrapperspb.DoubleValue {
	if x != nil {
		return x.LatencyMillis
	}
	return nil
}

func (x *ProbeStats) GetJitterMillis() *wrapperspb.DoubleValue {
	if x != nil {
		return x.JitterMillis
	}
	return nil
}

func (x *ProbeStats) GetHttpResponseTimeMillis() *wrapperspb.DoubleValue {
	if x != nil {
		return x.HttpResponseTimeMillis
	}
	return nil
}

func (x *ProbeStats) GetPacketLossPercent() *wrapperspb.Int64Value {
	if x != nil {
		return x.PacketLossPercent
	}
	return nil
}

func (x *ProbeStats) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

var File_arista_connectivitymonitor_v1_connectivitymonitor_proto protoreflect.FileDescriptor

var file_arista_connectivitymonitor_v1_connectivitymonitor_proto_rawDesc = []byte{
	0x0a, 0x37, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x66, 0x6d, 0x70, 0x2f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xad,
	0x01, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x09, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x03, 0x76, 0x72, 0x66, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x03, 0x76, 0x72, 0x66, 0x3a, 0x04, 0x80, 0x8e, 0x19, 0x01, 0x22, 0xf1,
	0x01, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4b, 0x65, 0x79,
	0x12, 0x39, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x2e, 0x0a,
	0x03, 0x76, 0x72, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x76, 0x72, 0x66, 0x12, 0x3d, 0x0a,
	0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x66, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x74, 0x66, 0x3a, 0x04, 0x80, 0x8e,
	0x19, 0x01, 0x22, 0xfc, 0x01, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x12, 0x39, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x4b,
	0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x07, 0x69, 0x70, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x12, 0x39,
	0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72,
	0x6f, 0x22, 0xb6, 0x03, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x3e, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x62, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x43, 0x0a, 0x0e, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x69, 0x6c, 0x6c,
	0x69, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d,
	0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x41, 0x0a, 0x0d, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f,
	0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6a, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x57, 0x0a, 0x19, 0x68, 0x74, 0x74, 0x70,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d,
	0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x68, 0x74, 0x74, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69,
	0x73, 0x12, 0x4b, 0x0a, 0x13, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x73, 0x73,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x32,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72, 0x6f, 0x42, 0x60, 0x5a, 0x5e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x3b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_arista_connectivitymonitor_v1_connectivitymonitor_proto_rawDescOnce sync.Once
	file_arista_connectivitymonitor_v1_connectivitymonitor_proto_rawDescData = file_arista_connectivitymonitor_v1_connectivitymonitor_proto_rawDesc
)

func file_arista_connectivitymonitor_v1_connectivitymonitor_proto_rawDescGZIP() []byte {
	file_arista_connectivitymonitor_v1_connectivitymonitor_proto_rawDescOnce.Do(func() {
		file_arista_connectivitymonitor_v1_connectivitymonitor_proto_rawDescData = protoimpl.X.CompressGZIP(file_arista_connectivitymonitor_v1_connectivitymonitor_proto_rawDescData)
	})
	return file_arista_connectivitymonitor_v1_connectivitymonitor_proto_rawDescData
}

var file_arista_connectivitymonitor_v1_connectivitymonitor_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_arista_connectivitymonitor_v1_connectivitymonitor_proto_goTypes = []interface{}{
	(*ProbeKey)(nil),               // 0: arista.connectivitymonitor.v1.ProbeKey
	(*ProbeStatsKey)(nil),          // 1: arista.connectivitymonitor.v1.ProbeStatsKey
	(*Probe)(nil),                  // 2: arista.connectivitymonitor.v1.Probe
	(*ProbeStats)(nil),             // 3: arista.connectivitymonitor.v1.ProbeStats
	(*wrapperspb.StringValue)(nil), // 4: google.protobuf.StringValue
	(*wrapperspb.DoubleValue)(nil), // 5: google.protobuf.DoubleValue
	(*wrapperspb.Int64Value)(nil),  // 6: google.protobuf.Int64Value
}
var file_arista_connectivitymonitor_v1_connectivitymonitor_proto_depIdxs = []int32{
	4,  // 0: arista.connectivitymonitor.v1.ProbeKey.device_id:type_name -> google.protobuf.StringValue
	4,  // 1: arista.connectivitymonitor.v1.ProbeKey.host:type_name -> google.protobuf.StringValue
	4,  // 2: arista.connectivitymonitor.v1.ProbeKey.vrf:type_name -> google.protobuf.StringValue
	4,  // 3: arista.connectivitymonitor.v1.ProbeStatsKey.device_id:type_name -> google.protobuf.StringValue
	4,  // 4: arista.connectivitymonitor.v1.ProbeStatsKey.host:type_name -> google.protobuf.StringValue
	4,  // 5: arista.connectivitymonitor.v1.ProbeStatsKey.vrf:type_name -> google.protobuf.StringValue
	4,  // 6: arista.connectivitymonitor.v1.ProbeStatsKey.source_intf:type_name -> google.protobuf.StringValue
	0,  // 7: arista.connectivitymonitor.v1.Probe.key:type_name -> arista.connectivitymonitor.v1.ProbeKey
	4,  // 8: arista.connectivitymonitor.v1.Probe.ip_addr:type_name -> google.protobuf.StringValue
	4,  // 9: arista.connectivitymonitor.v1.Probe.host_name:type_name -> google.protobuf.StringValue
	4,  // 10: arista.connectivitymonitor.v1.Probe.description:type_name -> google.protobuf.StringValue
	1,  // 11: arista.connectivitymonitor.v1.ProbeStats.key:type_name -> arista.connectivitymonitor.v1.ProbeStatsKey
	5,  // 12: arista.connectivitymonitor.v1.ProbeStats.latency_millis:type_name -> google.protobuf.DoubleValue
	5,  // 13: arista.connectivitymonitor.v1.ProbeStats.jitter_millis:type_name -> google.protobuf.DoubleValue
	5,  // 14: arista.connectivitymonitor.v1.ProbeStats.http_response_time_millis:type_name -> google.protobuf.DoubleValue
	6,  // 15: arista.connectivitymonitor.v1.ProbeStats.packet_loss_percent:type_name -> google.protobuf.Int64Value
	4,  // 16: arista.connectivitymonitor.v1.ProbeStats.error:type_name -> google.protobuf.StringValue
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_arista_connectivitymonitor_v1_connectivitymonitor_proto_init() }
func file_arista_connectivitymonitor_v1_connectivitymonitor_proto_init() {
	if File_arista_connectivitymonitor_v1_connectivitymonitor_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_arista_connectivitymonitor_v1_connectivitymonitor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProbeKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_connectivitymonitor_v1_connectivitymonitor_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProbeStatsKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_connectivitymonitor_v1_connectivitymonitor_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Probe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_connectivitymonitor_v1_connectivitymonitor_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProbeStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_arista_connectivitymonitor_v1_connectivitymonitor_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_arista_connectivitymonitor_v1_connectivitymonitor_proto_goTypes,
		DependencyIndexes: file_arista_connectivitymonitor_v1_connectivitymonitor_proto_depIdxs,
		MessageInfos:      file_arista_connectivitymonitor_v1_connectivitymonitor_proto_msgTypes,
	}.Build()
	File_arista_connectivitymonitor_v1_connectivitymonitor_proto = out.File
	file_arista_connectivitymonitor_v1_connectivitymonitor_proto_rawDesc = nil
	file_arista_connectivitymonitor_v1_connectivitymonitor_proto_goTypes = nil
	file_arista_connectivitymonitor_v1_connectivitymonitor_proto_depIdxs = nil
}
