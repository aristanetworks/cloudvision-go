// Copyright (c) 2024 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

//
// Code generated by boomtown. DO NOT EDIT.
//

package redirector

// HasKey returns whether the given Assignment has a key provided in the model.
func (a *Assignment) HasKey() bool {
	return a.GetKey() != nil
}

// HasKey returns whether the given AssignmentRequest has a key provided in the request.
func (a *AssignmentRequest) HasKey() bool {
	return a.GetKey() != nil
}

// PassesPartialEqFilter returns whether the Cluster matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (c *Cluster) PassesPartialEqFilter(cmp *Cluster) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if c == nil {
		return false
	}

	if cmp.Name != nil {
		if c.Name == nil {
			return false
		}
		if c.Name.Value != cmp.Name.Value {
			return false
		}
	}
	if !c.Hosts.PassesPartialEqFilter(cmp.Hosts) {
		return false
	}

	return true
}

// PassesPartialEqFilter returns whether the Clusters matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (c *Clusters) PassesPartialEqFilter(cmp *Clusters) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if c == nil {
		return false
	}
	if len(c.Values) != len(cmp.Values) {
		return false
	}
	for i, f := range c.Values {
		if !f.PassesPartialEqFilter(cmp.Values[i]) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the AssignmentKey matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (a *AssignmentKey) PassesPartialEqFilter(cmp *AssignmentKey) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if a == nil {
		return false
	}

	if cmp.SystemId != nil {
		if a.SystemId == nil {
			return false
		}
		if a.SystemId.Value != cmp.SystemId.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the Assignment matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (a *Assignment) PassesPartialEqFilter(cmp *Assignment) bool {
	// if the resource is nil, there is nothing to send to the client
	if a == nil {
		return false
	}

	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if !a.Key.PassesPartialEqFilter(cmp.Key) {
		return false
	}

	if !a.Clusters.PassesPartialEqFilter(cmp.Clusters) {
		return false
	}

	return true
}

// MatchesAnyPartialEqFilter returns whether the receiver matches any filters in the given set.
func (a *Assignment) MatchesAnyPartialEqFilter(filters []*Assignment) bool {
	if len(filters) == 0 {
		return true
	}

	for _, filt := range filters {
		if a.PassesPartialEqFilter(filt) {
			return true
		}
	}

	return false
}
