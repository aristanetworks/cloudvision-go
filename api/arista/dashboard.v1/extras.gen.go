// Copyright (c) 2024 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

//
// Code generated by boomtown. DO NOT EDIT.
//

package dashboard

import "google.golang.org/grpc"

// Client composes the service clients within the dashboard package.
// This client can then be composed into a larger hierarchy for more complex clients.
//
// Because method names include the name of the Resource they operate on, the embedded
// clients are unnamed fields to reduce stutter.
//
// Included resources:
//   - Dashboard
//   - DashboardConfig
//   - GlobalDashboardConfig
type Client struct {
	Dashboard             DashboardServiceClient
	DashboardConfig       DashboardConfigServiceClient
	GlobalDashboardConfig GlobalDashboardConfigServiceClient
}

// NewClient creates a new composed-client from the given connection.
func NewClient(conn grpc.ClientConnInterface) Client {
	return Client{
		Dashboard:             NewDashboardServiceClient(conn),
		DashboardConfig:       NewDashboardConfigServiceClient(conn),
		GlobalDashboardConfig: NewGlobalDashboardConfigServiceClient(conn),
	}
}

// Server aggregates the various server interfaces required by gRPC.
// The included resources are:
//   - Dashboard
//   - DashboardConfig
//   - GlobalDashboardConfig
type Server struct {
	Dashboard             DashboardServiceServer
	DashboardConfig       DashboardConfigServiceServer
	GlobalDashboardConfig GlobalDashboardConfigServiceServer
}

// Register takes the given gRPC Server and registers our services with it.
func (s Server) Register(target *grpc.Server) {
	RegisterDashboardServiceServer(target, s.Dashboard)
	RegisterDashboardConfigServiceServer(target, s.DashboardConfig)
	RegisterGlobalDashboardConfigServiceServer(target, s.GlobalDashboardConfig)
}

// RegisterUnimplementeds adds unimplemented servers to the given gRPC Server
func RegisterUnimplementeds(target *grpc.Server) error {
	RegisterDashboardServiceServer(target,
		UnimplementedDashboardServiceServer{})
	RegisterDashboardConfigServiceServer(target,
		UnimplementedDashboardConfigServiceServer{})
	RegisterGlobalDashboardConfigServiceServer(target,
		UnimplementedGlobalDashboardConfigServiceServer{})
	return nil
}

// HasKey returns whether the given Dashboard has a key provided in the model.
func (d *Dashboard) HasKey() bool {
	return d.GetKey() != nil
}

// HasKey returns whether the given DashboardRequest has a key provided in the request.
func (d *DashboardRequest) HasKey() bool {
	return d.GetKey() != nil
}

// HasKey returns whether the given DashboardConfig has a key provided in the model.
func (d *DashboardConfig) HasKey() bool {
	return d.GetKey() != nil
}

// HasKey returns whether the given DashboardConfigRequest has a key provided in the request.
func (d *DashboardConfigRequest) HasKey() bool {
	return d.GetKey() != nil
}

// HasKey returns whether the given DashboardConfigSetRequest has a key provided in the request.
func (d *DashboardConfigSetRequest) HasKey() bool {
	return d.GetValue().HasKey()
}

// HasKey returns whether the given DashboardConfigDeleteRequest has a key provided in the request.
func (d *DashboardConfigDeleteRequest) HasKey() bool {
	return d.GetKey() != nil
}

// PassesPartialEqFilter returns whether the DashboardMetadata matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (d *DashboardMetadata) PassesPartialEqFilter(cmp *DashboardMetadata) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if d == nil {
		return false
	}

	if cmp.SchemaVersion != nil {
		if d.SchemaVersion == nil {
			return false
		}
		if d.SchemaVersion.Value != cmp.SchemaVersion.Value {
			return false
		}
	}

	if cmp.LegacyKey != nil {
		if d.LegacyKey == nil {
			return false
		}
		if d.LegacyKey.Value != cmp.LegacyKey.Value {
			return false
		}
	}

	if cmp.LegacyVersion != nil {
		if d.LegacyVersion == nil {
			return false
		}
		if d.LegacyVersion.Value != cmp.LegacyVersion.Value {
			return false
		}
	}

	if cmp.FromPackage != nil {
		if d.FromPackage == nil {
			return false
		}
		if d.FromPackage.Value != cmp.FromPackage.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the Dimensions matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (d *Dimensions) PassesPartialEqFilter(cmp *Dimensions) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if d == nil {
		return false
	}

	if cmp.Width != nil {
		if d.Width == nil {
			return false
		}
		if d.Width.Value != cmp.Width.Value {
			return false
		}
	}

	if cmp.Height != nil {
		if d.Height == nil {
			return false
		}
		if d.Height.Value != cmp.Height.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the Position matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (p *Position) PassesPartialEqFilter(cmp *Position) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if p == nil {
		return false
	}

	if cmp.X != nil {
		if p.X == nil {
			return false
		}
		if p.X.Value != cmp.X.Value {
			return false
		}
	}

	if cmp.Y != nil {
		if p.Y == nil {
			return false
		}
		if p.Y.Value != cmp.Y.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the Widget matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (w *Widget) PassesPartialEqFilter(cmp *Widget) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if w == nil {
		return false
	}

	if cmp.Id != nil {
		if w.Id == nil {
			return false
		}
		if w.Id.Value != cmp.Id.Value {
			return false
		}
	}

	if cmp.Name != nil {
		if w.Name == nil {
			return false
		}
		if w.Name.Value != cmp.Name.Value {
			return false
		}
	}
	if !w.Position.PassesPartialEqFilter(cmp.Position) {
		return false
	}
	if !w.Dimensions.PassesPartialEqFilter(cmp.Dimensions) {
		return false
	}

	if cmp.Type != nil {
		if w.Type == nil {
			return false
		}
		if w.Type.Value != cmp.Type.Value {
			return false
		}
	}

	if cmp.Inputs != nil {
		if w.Inputs == nil {
			return false
		}
		if w.Inputs.Value != cmp.Inputs.Value {
			return false
		}
	}

	if cmp.Location != nil {
		if w.Location == nil {
			return false
		}
		if w.Location.Value != cmp.Location.Value {
			return false
		}
	}
	if !w.Styles.PassesPartialEqFilter(cmp.Styles) {
		return false
	}

	if cmp.Parent != nil {
		if w.Parent == nil {
			return false
		}
		if w.Parent.Value != cmp.Parent.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the WidgetStyles matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (w *WidgetStyles) PassesPartialEqFilter(cmp *WidgetStyles) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if w == nil {
		return false
	}

	if cmp.HideTitle != nil {
		if w.HideTitle == nil {
			return false
		}
		if w.HideTitle.Value != cmp.HideTitle.Value {
			return false
		}
	}

	if cmp.BackgroundColor != nil {
		if w.BackgroundColor == nil {
			return false
		}
		if w.BackgroundColor.Value != cmp.BackgroundColor.Value {
			return false
		}
	}

	if cmp.HideHorizontalBar != nil {
		if w.HideHorizontalBar == nil {
			return false
		}
		if w.HideHorizontalBar.Value != cmp.HideHorizontalBar.Value {
			return false
		}
	}

	if cmp.TitleSize != nil {
		if w.TitleSize == nil {
			return false
		}
		if w.TitleSize.Value != cmp.TitleSize.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the Widgets matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (w *Widgets) PassesPartialEqFilter(cmp *Widgets) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if w == nil {
		return false
	}
	if len(w.Values) != len(cmp.Values) {
		return false
	}
	for i, f := range w.Values {
		if !f.PassesPartialEqFilter(cmp.Values[i]) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the DashboardKey matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (d *DashboardKey) PassesPartialEqFilter(cmp *DashboardKey) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if d == nil {
		return false
	}

	if cmp.DashboardId != nil {
		if d.DashboardId == nil {
			return false
		}
		if d.DashboardId.Value != cmp.DashboardId.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the Dashboard matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (d *Dashboard) PassesPartialEqFilter(cmp *Dashboard) bool {
	// if the resource is nil, there is nothing to send to the client
	if d == nil {
		return false
	}

	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if !d.Key.PassesPartialEqFilter(cmp.Key) {
		return false
	}

	if cmp.CreatedAt != nil {
		if cmp.CreatedAt.Seconds != 0 {
			if d.CreatedAt.Seconds != cmp.CreatedAt.Seconds {
				return false
			}
		}
		if cmp.CreatedAt.Nanos != 0 {
			if d.CreatedAt.Nanos != cmp.CreatedAt.Nanos {
				return false
			}
		}
	}

	if cmp.CreatedBy != nil {
		if d.CreatedBy == nil {
			return false
		}
		if d.CreatedBy.Value != cmp.CreatedBy.Value {
			return false
		}
	}

	if cmp.LastModifiedAt != nil {
		if cmp.LastModifiedAt.Seconds != 0 {
			if d.LastModifiedAt.Seconds != cmp.LastModifiedAt.Seconds {
				return false
			}
		}
		if cmp.LastModifiedAt.Nanos != 0 {
			if d.LastModifiedAt.Nanos != cmp.LastModifiedAt.Nanos {
				return false
			}
		}
	}

	if cmp.LastModifiedBy != nil {
		if d.LastModifiedBy == nil {
			return false
		}
		if d.LastModifiedBy.Value != cmp.LastModifiedBy.Value {
			return false
		}
	}

	if !d.MetaData.PassesPartialEqFilter(cmp.MetaData) {
		return false
	}

	if cmp.Name != nil {
		if d.Name == nil {
			return false
		}
		if d.Name.Value != cmp.Name.Value {
			return false
		}
	}

	if cmp.Description != nil {
		if d.Description == nil {
			return false
		}
		if d.Description.Value != cmp.Description.Value {
			return false
		}
	}

	if !d.Widgets.PassesPartialEqFilter(cmp.Widgets) {
		return false
	}

	return true
}

// MatchesAnyPartialEqFilter returns whether the receiver matches any filters in the given set.
func (d *Dashboard) MatchesAnyPartialEqFilter(filters []*Dashboard) bool {
	if len(filters) == 0 {
		return true
	}

	for _, filt := range filters {
		if d.PassesPartialEqFilter(filt) {
			return true
		}
	}

	return false
}

// PassesPartialEqFilter returns whether the DashboardConfig matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (d *DashboardConfig) PassesPartialEqFilter(cmp *DashboardConfig) bool {
	// if the resource is nil, there is nothing to send to the client
	if d == nil {
		return false
	}

	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if !d.Key.PassesPartialEqFilter(cmp.Key) {
		return false
	}

	if cmp.Name != nil {
		if d.Name == nil {
			return false
		}
		if d.Name.Value != cmp.Name.Value {
			return false
		}
	}

	if cmp.Description != nil {
		if d.Description == nil {
			return false
		}
		if d.Description.Value != cmp.Description.Value {
			return false
		}
	}

	if !d.Widgets.PassesPartialEqFilter(cmp.Widgets) {
		return false
	}

	return true
}

// MatchesAnyPartialEqFilter returns whether the receiver matches any filters in the given set.
func (d *DashboardConfig) MatchesAnyPartialEqFilter(filters []*DashboardConfig) bool {
	if len(filters) == 0 {
		return true
	}

	for _, filt := range filters {
		if d.PassesPartialEqFilter(filt) {
			return true
		}
	}

	return false
}

// PassesPartialEqFilter returns whether the GlobalDashboardConfig matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (g *GlobalDashboardConfig) PassesPartialEqFilter(cmp *GlobalDashboardConfig) bool {
	// if the resource is nil, there is nothing to send to the client
	if g == nil {
		return false
	}

	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if !g.DefaultDashboard.PassesPartialEqFilter(cmp.DefaultDashboard) {
		return false
	}

	return true
}

// MatchesAnyPartialEqFilter returns whether the receiver matches any filters in the given set.
func (g *GlobalDashboardConfig) MatchesAnyPartialEqFilter(filters []*GlobalDashboardConfig) bool {
	if len(filters) == 0 {
		return true
	}

	for _, filt := range filters {
		if g.PassesPartialEqFilter(filt) {
			return true
		}
	}

	return false
}
