// Copyright (c) 2023 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

//
// Code generated by boomtown. DO NOT EDIT.
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: arista/action.v1/services.gen.proto

package action

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ActionService_GetOne_FullMethodName        = "/arista.action.v1.ActionService/GetOne"
	ActionService_GetSome_FullMethodName       = "/arista.action.v1.ActionService/GetSome"
	ActionService_GetAll_FullMethodName        = "/arista.action.v1.ActionService/GetAll"
	ActionService_Subscribe_FullMethodName     = "/arista.action.v1.ActionService/Subscribe"
	ActionService_GetMeta_FullMethodName       = "/arista.action.v1.ActionService/GetMeta"
	ActionService_SubscribeMeta_FullMethodName = "/arista.action.v1.ActionService/SubscribeMeta"
)

// ActionServiceClient is the client API for ActionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActionServiceClient interface {
	GetOne(ctx context.Context, in *ActionRequest, opts ...grpc.CallOption) (*ActionResponse, error)
	GetSome(ctx context.Context, in *ActionSomeRequest, opts ...grpc.CallOption) (ActionService_GetSomeClient, error)
	GetAll(ctx context.Context, in *ActionStreamRequest, opts ...grpc.CallOption) (ActionService_GetAllClient, error)
	Subscribe(ctx context.Context, in *ActionStreamRequest, opts ...grpc.CallOption) (ActionService_SubscribeClient, error)
	GetMeta(ctx context.Context, in *ActionStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error)
	SubscribeMeta(ctx context.Context, in *ActionStreamRequest, opts ...grpc.CallOption) (ActionService_SubscribeMetaClient, error)
}

type actionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewActionServiceClient(cc grpc.ClientConnInterface) ActionServiceClient {
	return &actionServiceClient{cc}
}

func (c *actionServiceClient) GetOne(ctx context.Context, in *ActionRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, ActionService_GetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) GetSome(ctx context.Context, in *ActionSomeRequest, opts ...grpc.CallOption) (ActionService_GetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ActionService_ServiceDesc.Streams[0], ActionService_GetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &actionServiceGetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ActionService_GetSomeClient interface {
	Recv() (*ActionSomeResponse, error)
	grpc.ClientStream
}

type actionServiceGetSomeClient struct {
	grpc.ClientStream
}

func (x *actionServiceGetSomeClient) Recv() (*ActionSomeResponse, error) {
	m := new(ActionSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *actionServiceClient) GetAll(ctx context.Context, in *ActionStreamRequest, opts ...grpc.CallOption) (ActionService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &ActionService_ServiceDesc.Streams[1], ActionService_GetAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &actionServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ActionService_GetAllClient interface {
	Recv() (*ActionStreamResponse, error)
	grpc.ClientStream
}

type actionServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *actionServiceGetAllClient) Recv() (*ActionStreamResponse, error) {
	m := new(ActionStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *actionServiceClient) Subscribe(ctx context.Context, in *ActionStreamRequest, opts ...grpc.CallOption) (ActionService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ActionService_ServiceDesc.Streams[2], ActionService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &actionServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ActionService_SubscribeClient interface {
	Recv() (*ActionStreamResponse, error)
	grpc.ClientStream
}

type actionServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *actionServiceSubscribeClient) Recv() (*ActionStreamResponse, error) {
	m := new(ActionStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *actionServiceClient) GetMeta(ctx context.Context, in *ActionStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error) {
	out := new(MetaResponse)
	err := c.cc.Invoke(ctx, ActionService_GetMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) SubscribeMeta(ctx context.Context, in *ActionStreamRequest, opts ...grpc.CallOption) (ActionService_SubscribeMetaClient, error) {
	stream, err := c.cc.NewStream(ctx, &ActionService_ServiceDesc.Streams[3], ActionService_SubscribeMeta_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &actionServiceSubscribeMetaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ActionService_SubscribeMetaClient interface {
	Recv() (*MetaResponse, error)
	grpc.ClientStream
}

type actionServiceSubscribeMetaClient struct {
	grpc.ClientStream
}

func (x *actionServiceSubscribeMetaClient) Recv() (*MetaResponse, error) {
	m := new(MetaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ActionServiceServer is the server API for ActionService service.
// All implementations must embed UnimplementedActionServiceServer
// for forward compatibility
type ActionServiceServer interface {
	GetOne(context.Context, *ActionRequest) (*ActionResponse, error)
	GetSome(*ActionSomeRequest, ActionService_GetSomeServer) error
	GetAll(*ActionStreamRequest, ActionService_GetAllServer) error
	Subscribe(*ActionStreamRequest, ActionService_SubscribeServer) error
	GetMeta(context.Context, *ActionStreamRequest) (*MetaResponse, error)
	SubscribeMeta(*ActionStreamRequest, ActionService_SubscribeMetaServer) error
	mustEmbedUnimplementedActionServiceServer()
}

// UnimplementedActionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedActionServiceServer struct {
}

func (UnimplementedActionServiceServer) GetOne(context.Context, *ActionRequest) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedActionServiceServer) GetSome(*ActionSomeRequest, ActionService_GetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSome not implemented")
}
func (UnimplementedActionServiceServer) GetAll(*ActionStreamRequest, ActionService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedActionServiceServer) Subscribe(*ActionStreamRequest, ActionService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedActionServiceServer) GetMeta(context.Context, *ActionStreamRequest) (*MetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeta not implemented")
}
func (UnimplementedActionServiceServer) SubscribeMeta(*ActionStreamRequest, ActionService_SubscribeMetaServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMeta not implemented")
}
func (UnimplementedActionServiceServer) mustEmbedUnimplementedActionServiceServer() {}

// UnsafeActionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActionServiceServer will
// result in compilation errors.
type UnsafeActionServiceServer interface {
	mustEmbedUnimplementedActionServiceServer()
}

func RegisterActionServiceServer(s grpc.ServiceRegistrar, srv ActionServiceServer) {
	s.RegisterService(&ActionService_ServiceDesc, srv)
}

func _ActionService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActionService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).GetOne(ctx, req.(*ActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_GetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ActionSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ActionServiceServer).GetSome(m, &actionServiceGetSomeServer{stream})
}

type ActionService_GetSomeServer interface {
	Send(*ActionSomeResponse) error
	grpc.ServerStream
}

type actionServiceGetSomeServer struct {
	grpc.ServerStream
}

func (x *actionServiceGetSomeServer) Send(m *ActionSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ActionService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ActionStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ActionServiceServer).GetAll(m, &actionServiceGetAllServer{stream})
}

type ActionService_GetAllServer interface {
	Send(*ActionStreamResponse) error
	grpc.ServerStream
}

type actionServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *actionServiceGetAllServer) Send(m *ActionStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ActionService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ActionStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ActionServiceServer).Subscribe(m, &actionServiceSubscribeServer{stream})
}

type ActionService_SubscribeServer interface {
	Send(*ActionStreamResponse) error
	grpc.ServerStream
}

type actionServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *actionServiceSubscribeServer) Send(m *ActionStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ActionService_GetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).GetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActionService_GetMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).GetMeta(ctx, req.(*ActionStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_SubscribeMeta_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ActionStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ActionServiceServer).SubscribeMeta(m, &actionServiceSubscribeMetaServer{stream})
}

type ActionService_SubscribeMetaServer interface {
	Send(*MetaResponse) error
	grpc.ServerStream
}

type actionServiceSubscribeMetaServer struct {
	grpc.ServerStream
}

func (x *actionServiceSubscribeMetaServer) Send(m *MetaResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ActionService_ServiceDesc is the grpc.ServiceDesc for ActionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.action.v1.ActionService",
	HandlerType: (*ActionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _ActionService_GetOne_Handler,
		},
		{
			MethodName: "GetMeta",
			Handler:    _ActionService_GetMeta_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSome",
			Handler:       _ActionService_GetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAll",
			Handler:       _ActionService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _ActionService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeMeta",
			Handler:       _ActionService_SubscribeMeta_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/action.v1/services.gen.proto",
}

const (
	ActionArgConfigService_GetOne_FullMethodName        = "/arista.action.v1.ActionArgConfigService/GetOne"
	ActionArgConfigService_GetSome_FullMethodName       = "/arista.action.v1.ActionArgConfigService/GetSome"
	ActionArgConfigService_GetAll_FullMethodName        = "/arista.action.v1.ActionArgConfigService/GetAll"
	ActionArgConfigService_Subscribe_FullMethodName     = "/arista.action.v1.ActionArgConfigService/Subscribe"
	ActionArgConfigService_GetMeta_FullMethodName       = "/arista.action.v1.ActionArgConfigService/GetMeta"
	ActionArgConfigService_SubscribeMeta_FullMethodName = "/arista.action.v1.ActionArgConfigService/SubscribeMeta"
	ActionArgConfigService_Set_FullMethodName           = "/arista.action.v1.ActionArgConfigService/Set"
	ActionArgConfigService_SetSome_FullMethodName       = "/arista.action.v1.ActionArgConfigService/SetSome"
	ActionArgConfigService_Delete_FullMethodName        = "/arista.action.v1.ActionArgConfigService/Delete"
	ActionArgConfigService_DeleteSome_FullMethodName    = "/arista.action.v1.ActionArgConfigService/DeleteSome"
	ActionArgConfigService_DeleteAll_FullMethodName     = "/arista.action.v1.ActionArgConfigService/DeleteAll"
)

// ActionArgConfigServiceClient is the client API for ActionArgConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActionArgConfigServiceClient interface {
	GetOne(ctx context.Context, in *ActionArgConfigRequest, opts ...grpc.CallOption) (*ActionArgConfigResponse, error)
	GetSome(ctx context.Context, in *ActionArgConfigSomeRequest, opts ...grpc.CallOption) (ActionArgConfigService_GetSomeClient, error)
	GetAll(ctx context.Context, in *ActionArgConfigStreamRequest, opts ...grpc.CallOption) (ActionArgConfigService_GetAllClient, error)
	Subscribe(ctx context.Context, in *ActionArgConfigStreamRequest, opts ...grpc.CallOption) (ActionArgConfigService_SubscribeClient, error)
	GetMeta(ctx context.Context, in *ActionArgConfigStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error)
	SubscribeMeta(ctx context.Context, in *ActionArgConfigStreamRequest, opts ...grpc.CallOption) (ActionArgConfigService_SubscribeMetaClient, error)
	Set(ctx context.Context, in *ActionArgConfigSetRequest, opts ...grpc.CallOption) (*ActionArgConfigSetResponse, error)
	SetSome(ctx context.Context, in *ActionArgConfigSetSomeRequest, opts ...grpc.CallOption) (ActionArgConfigService_SetSomeClient, error)
	Delete(ctx context.Context, in *ActionArgConfigDeleteRequest, opts ...grpc.CallOption) (*ActionArgConfigDeleteResponse, error)
	DeleteSome(ctx context.Context, in *ActionArgConfigDeleteSomeRequest, opts ...grpc.CallOption) (ActionArgConfigService_DeleteSomeClient, error)
	DeleteAll(ctx context.Context, in *ActionArgConfigDeleteAllRequest, opts ...grpc.CallOption) (ActionArgConfigService_DeleteAllClient, error)
}

type actionArgConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewActionArgConfigServiceClient(cc grpc.ClientConnInterface) ActionArgConfigServiceClient {
	return &actionArgConfigServiceClient{cc}
}

func (c *actionArgConfigServiceClient) GetOne(ctx context.Context, in *ActionArgConfigRequest, opts ...grpc.CallOption) (*ActionArgConfigResponse, error) {
	out := new(ActionArgConfigResponse)
	err := c.cc.Invoke(ctx, ActionArgConfigService_GetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionArgConfigServiceClient) GetSome(ctx context.Context, in *ActionArgConfigSomeRequest, opts ...grpc.CallOption) (ActionArgConfigService_GetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ActionArgConfigService_ServiceDesc.Streams[0], ActionArgConfigService_GetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &actionArgConfigServiceGetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ActionArgConfigService_GetSomeClient interface {
	Recv() (*ActionArgConfigSomeResponse, error)
	grpc.ClientStream
}

type actionArgConfigServiceGetSomeClient struct {
	grpc.ClientStream
}

func (x *actionArgConfigServiceGetSomeClient) Recv() (*ActionArgConfigSomeResponse, error) {
	m := new(ActionArgConfigSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *actionArgConfigServiceClient) GetAll(ctx context.Context, in *ActionArgConfigStreamRequest, opts ...grpc.CallOption) (ActionArgConfigService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &ActionArgConfigService_ServiceDesc.Streams[1], ActionArgConfigService_GetAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &actionArgConfigServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ActionArgConfigService_GetAllClient interface {
	Recv() (*ActionArgConfigStreamResponse, error)
	grpc.ClientStream
}

type actionArgConfigServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *actionArgConfigServiceGetAllClient) Recv() (*ActionArgConfigStreamResponse, error) {
	m := new(ActionArgConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *actionArgConfigServiceClient) Subscribe(ctx context.Context, in *ActionArgConfigStreamRequest, opts ...grpc.CallOption) (ActionArgConfigService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ActionArgConfigService_ServiceDesc.Streams[2], ActionArgConfigService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &actionArgConfigServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ActionArgConfigService_SubscribeClient interface {
	Recv() (*ActionArgConfigStreamResponse, error)
	grpc.ClientStream
}

type actionArgConfigServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *actionArgConfigServiceSubscribeClient) Recv() (*ActionArgConfigStreamResponse, error) {
	m := new(ActionArgConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *actionArgConfigServiceClient) GetMeta(ctx context.Context, in *ActionArgConfigStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error) {
	out := new(MetaResponse)
	err := c.cc.Invoke(ctx, ActionArgConfigService_GetMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionArgConfigServiceClient) SubscribeMeta(ctx context.Context, in *ActionArgConfigStreamRequest, opts ...grpc.CallOption) (ActionArgConfigService_SubscribeMetaClient, error) {
	stream, err := c.cc.NewStream(ctx, &ActionArgConfigService_ServiceDesc.Streams[3], ActionArgConfigService_SubscribeMeta_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &actionArgConfigServiceSubscribeMetaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ActionArgConfigService_SubscribeMetaClient interface {
	Recv() (*MetaResponse, error)
	grpc.ClientStream
}

type actionArgConfigServiceSubscribeMetaClient struct {
	grpc.ClientStream
}

func (x *actionArgConfigServiceSubscribeMetaClient) Recv() (*MetaResponse, error) {
	m := new(MetaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *actionArgConfigServiceClient) Set(ctx context.Context, in *ActionArgConfigSetRequest, opts ...grpc.CallOption) (*ActionArgConfigSetResponse, error) {
	out := new(ActionArgConfigSetResponse)
	err := c.cc.Invoke(ctx, ActionArgConfigService_Set_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionArgConfigServiceClient) SetSome(ctx context.Context, in *ActionArgConfigSetSomeRequest, opts ...grpc.CallOption) (ActionArgConfigService_SetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ActionArgConfigService_ServiceDesc.Streams[4], ActionArgConfigService_SetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &actionArgConfigServiceSetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ActionArgConfigService_SetSomeClient interface {
	Recv() (*ActionArgConfigSetSomeResponse, error)
	grpc.ClientStream
}

type actionArgConfigServiceSetSomeClient struct {
	grpc.ClientStream
}

func (x *actionArgConfigServiceSetSomeClient) Recv() (*ActionArgConfigSetSomeResponse, error) {
	m := new(ActionArgConfigSetSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *actionArgConfigServiceClient) Delete(ctx context.Context, in *ActionArgConfigDeleteRequest, opts ...grpc.CallOption) (*ActionArgConfigDeleteResponse, error) {
	out := new(ActionArgConfigDeleteResponse)
	err := c.cc.Invoke(ctx, ActionArgConfigService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionArgConfigServiceClient) DeleteSome(ctx context.Context, in *ActionArgConfigDeleteSomeRequest, opts ...grpc.CallOption) (ActionArgConfigService_DeleteSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ActionArgConfigService_ServiceDesc.Streams[5], ActionArgConfigService_DeleteSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &actionArgConfigServiceDeleteSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ActionArgConfigService_DeleteSomeClient interface {
	Recv() (*ActionArgConfigDeleteSomeResponse, error)
	grpc.ClientStream
}

type actionArgConfigServiceDeleteSomeClient struct {
	grpc.ClientStream
}

func (x *actionArgConfigServiceDeleteSomeClient) Recv() (*ActionArgConfigDeleteSomeResponse, error) {
	m := new(ActionArgConfigDeleteSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *actionArgConfigServiceClient) DeleteAll(ctx context.Context, in *ActionArgConfigDeleteAllRequest, opts ...grpc.CallOption) (ActionArgConfigService_DeleteAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &ActionArgConfigService_ServiceDesc.Streams[6], ActionArgConfigService_DeleteAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &actionArgConfigServiceDeleteAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ActionArgConfigService_DeleteAllClient interface {
	Recv() (*ActionArgConfigDeleteAllResponse, error)
	grpc.ClientStream
}

type actionArgConfigServiceDeleteAllClient struct {
	grpc.ClientStream
}

func (x *actionArgConfigServiceDeleteAllClient) Recv() (*ActionArgConfigDeleteAllResponse, error) {
	m := new(ActionArgConfigDeleteAllResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ActionArgConfigServiceServer is the server API for ActionArgConfigService service.
// All implementations must embed UnimplementedActionArgConfigServiceServer
// for forward compatibility
type ActionArgConfigServiceServer interface {
	GetOne(context.Context, *ActionArgConfigRequest) (*ActionArgConfigResponse, error)
	GetSome(*ActionArgConfigSomeRequest, ActionArgConfigService_GetSomeServer) error
	GetAll(*ActionArgConfigStreamRequest, ActionArgConfigService_GetAllServer) error
	Subscribe(*ActionArgConfigStreamRequest, ActionArgConfigService_SubscribeServer) error
	GetMeta(context.Context, *ActionArgConfigStreamRequest) (*MetaResponse, error)
	SubscribeMeta(*ActionArgConfigStreamRequest, ActionArgConfigService_SubscribeMetaServer) error
	Set(context.Context, *ActionArgConfigSetRequest) (*ActionArgConfigSetResponse, error)
	SetSome(*ActionArgConfigSetSomeRequest, ActionArgConfigService_SetSomeServer) error
	Delete(context.Context, *ActionArgConfigDeleteRequest) (*ActionArgConfigDeleteResponse, error)
	DeleteSome(*ActionArgConfigDeleteSomeRequest, ActionArgConfigService_DeleteSomeServer) error
	DeleteAll(*ActionArgConfigDeleteAllRequest, ActionArgConfigService_DeleteAllServer) error
	mustEmbedUnimplementedActionArgConfigServiceServer()
}

// UnimplementedActionArgConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedActionArgConfigServiceServer struct {
}

func (UnimplementedActionArgConfigServiceServer) GetOne(context.Context, *ActionArgConfigRequest) (*ActionArgConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedActionArgConfigServiceServer) GetSome(*ActionArgConfigSomeRequest, ActionArgConfigService_GetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSome not implemented")
}
func (UnimplementedActionArgConfigServiceServer) GetAll(*ActionArgConfigStreamRequest, ActionArgConfigService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedActionArgConfigServiceServer) Subscribe(*ActionArgConfigStreamRequest, ActionArgConfigService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedActionArgConfigServiceServer) GetMeta(context.Context, *ActionArgConfigStreamRequest) (*MetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeta not implemented")
}
func (UnimplementedActionArgConfigServiceServer) SubscribeMeta(*ActionArgConfigStreamRequest, ActionArgConfigService_SubscribeMetaServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMeta not implemented")
}
func (UnimplementedActionArgConfigServiceServer) Set(context.Context, *ActionArgConfigSetRequest) (*ActionArgConfigSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedActionArgConfigServiceServer) SetSome(*ActionArgConfigSetSomeRequest, ActionArgConfigService_SetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method SetSome not implemented")
}
func (UnimplementedActionArgConfigServiceServer) Delete(context.Context, *ActionArgConfigDeleteRequest) (*ActionArgConfigDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedActionArgConfigServiceServer) DeleteSome(*ActionArgConfigDeleteSomeRequest, ActionArgConfigService_DeleteSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteSome not implemented")
}
func (UnimplementedActionArgConfigServiceServer) DeleteAll(*ActionArgConfigDeleteAllRequest, ActionArgConfigService_DeleteAllServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteAll not implemented")
}
func (UnimplementedActionArgConfigServiceServer) mustEmbedUnimplementedActionArgConfigServiceServer() {
}

// UnsafeActionArgConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActionArgConfigServiceServer will
// result in compilation errors.
type UnsafeActionArgConfigServiceServer interface {
	mustEmbedUnimplementedActionArgConfigServiceServer()
}

func RegisterActionArgConfigServiceServer(s grpc.ServiceRegistrar, srv ActionArgConfigServiceServer) {
	s.RegisterService(&ActionArgConfigService_ServiceDesc, srv)
}

func _ActionArgConfigService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionArgConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionArgConfigServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActionArgConfigService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionArgConfigServiceServer).GetOne(ctx, req.(*ActionArgConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionArgConfigService_GetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ActionArgConfigSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ActionArgConfigServiceServer).GetSome(m, &actionArgConfigServiceGetSomeServer{stream})
}

type ActionArgConfigService_GetSomeServer interface {
	Send(*ActionArgConfigSomeResponse) error
	grpc.ServerStream
}

type actionArgConfigServiceGetSomeServer struct {
	grpc.ServerStream
}

func (x *actionArgConfigServiceGetSomeServer) Send(m *ActionArgConfigSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ActionArgConfigService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ActionArgConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ActionArgConfigServiceServer).GetAll(m, &actionArgConfigServiceGetAllServer{stream})
}

type ActionArgConfigService_GetAllServer interface {
	Send(*ActionArgConfigStreamResponse) error
	grpc.ServerStream
}

type actionArgConfigServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *actionArgConfigServiceGetAllServer) Send(m *ActionArgConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ActionArgConfigService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ActionArgConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ActionArgConfigServiceServer).Subscribe(m, &actionArgConfigServiceSubscribeServer{stream})
}

type ActionArgConfigService_SubscribeServer interface {
	Send(*ActionArgConfigStreamResponse) error
	grpc.ServerStream
}

type actionArgConfigServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *actionArgConfigServiceSubscribeServer) Send(m *ActionArgConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ActionArgConfigService_GetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionArgConfigStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionArgConfigServiceServer).GetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActionArgConfigService_GetMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionArgConfigServiceServer).GetMeta(ctx, req.(*ActionArgConfigStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionArgConfigService_SubscribeMeta_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ActionArgConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ActionArgConfigServiceServer).SubscribeMeta(m, &actionArgConfigServiceSubscribeMetaServer{stream})
}

type ActionArgConfigService_SubscribeMetaServer interface {
	Send(*MetaResponse) error
	grpc.ServerStream
}

type actionArgConfigServiceSubscribeMetaServer struct {
	grpc.ServerStream
}

func (x *actionArgConfigServiceSubscribeMetaServer) Send(m *MetaResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ActionArgConfigService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionArgConfigSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionArgConfigServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActionArgConfigService_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionArgConfigServiceServer).Set(ctx, req.(*ActionArgConfigSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionArgConfigService_SetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ActionArgConfigSetSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ActionArgConfigServiceServer).SetSome(m, &actionArgConfigServiceSetSomeServer{stream})
}

type ActionArgConfigService_SetSomeServer interface {
	Send(*ActionArgConfigSetSomeResponse) error
	grpc.ServerStream
}

type actionArgConfigServiceSetSomeServer struct {
	grpc.ServerStream
}

func (x *actionArgConfigServiceSetSomeServer) Send(m *ActionArgConfigSetSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ActionArgConfigService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionArgConfigDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionArgConfigServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActionArgConfigService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionArgConfigServiceServer).Delete(ctx, req.(*ActionArgConfigDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionArgConfigService_DeleteSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ActionArgConfigDeleteSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ActionArgConfigServiceServer).DeleteSome(m, &actionArgConfigServiceDeleteSomeServer{stream})
}

type ActionArgConfigService_DeleteSomeServer interface {
	Send(*ActionArgConfigDeleteSomeResponse) error
	grpc.ServerStream
}

type actionArgConfigServiceDeleteSomeServer struct {
	grpc.ServerStream
}

func (x *actionArgConfigServiceDeleteSomeServer) Send(m *ActionArgConfigDeleteSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ActionArgConfigService_DeleteAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ActionArgConfigDeleteAllRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ActionArgConfigServiceServer).DeleteAll(m, &actionArgConfigServiceDeleteAllServer{stream})
}

type ActionArgConfigService_DeleteAllServer interface {
	Send(*ActionArgConfigDeleteAllResponse) error
	grpc.ServerStream
}

type actionArgConfigServiceDeleteAllServer struct {
	grpc.ServerStream
}

func (x *actionArgConfigServiceDeleteAllServer) Send(m *ActionArgConfigDeleteAllResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ActionArgConfigService_ServiceDesc is the grpc.ServiceDesc for ActionArgConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActionArgConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.action.v1.ActionArgConfigService",
	HandlerType: (*ActionArgConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _ActionArgConfigService_GetOne_Handler,
		},
		{
			MethodName: "GetMeta",
			Handler:    _ActionArgConfigService_GetMeta_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _ActionArgConfigService_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ActionArgConfigService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSome",
			Handler:       _ActionArgConfigService_GetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAll",
			Handler:       _ActionArgConfigService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _ActionArgConfigService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeMeta",
			Handler:       _ActionArgConfigService_SubscribeMeta_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SetSome",
			Handler:       _ActionArgConfigService_SetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteSome",
			Handler:       _ActionArgConfigService_DeleteSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteAll",
			Handler:       _ActionArgConfigService_DeleteAll_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/action.v1/services.gen.proto",
}

const (
	ActionConfigService_GetOne_FullMethodName        = "/arista.action.v1.ActionConfigService/GetOne"
	ActionConfigService_GetSome_FullMethodName       = "/arista.action.v1.ActionConfigService/GetSome"
	ActionConfigService_GetAll_FullMethodName        = "/arista.action.v1.ActionConfigService/GetAll"
	ActionConfigService_Subscribe_FullMethodName     = "/arista.action.v1.ActionConfigService/Subscribe"
	ActionConfigService_GetMeta_FullMethodName       = "/arista.action.v1.ActionConfigService/GetMeta"
	ActionConfigService_SubscribeMeta_FullMethodName = "/arista.action.v1.ActionConfigService/SubscribeMeta"
	ActionConfigService_Set_FullMethodName           = "/arista.action.v1.ActionConfigService/Set"
	ActionConfigService_SetSome_FullMethodName       = "/arista.action.v1.ActionConfigService/SetSome"
	ActionConfigService_Delete_FullMethodName        = "/arista.action.v1.ActionConfigService/Delete"
	ActionConfigService_DeleteSome_FullMethodName    = "/arista.action.v1.ActionConfigService/DeleteSome"
	ActionConfigService_DeleteAll_FullMethodName     = "/arista.action.v1.ActionConfigService/DeleteAll"
)

// ActionConfigServiceClient is the client API for ActionConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActionConfigServiceClient interface {
	GetOne(ctx context.Context, in *ActionConfigRequest, opts ...grpc.CallOption) (*ActionConfigResponse, error)
	GetSome(ctx context.Context, in *ActionConfigSomeRequest, opts ...grpc.CallOption) (ActionConfigService_GetSomeClient, error)
	GetAll(ctx context.Context, in *ActionConfigStreamRequest, opts ...grpc.CallOption) (ActionConfigService_GetAllClient, error)
	Subscribe(ctx context.Context, in *ActionConfigStreamRequest, opts ...grpc.CallOption) (ActionConfigService_SubscribeClient, error)
	GetMeta(ctx context.Context, in *ActionConfigStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error)
	SubscribeMeta(ctx context.Context, in *ActionConfigStreamRequest, opts ...grpc.CallOption) (ActionConfigService_SubscribeMetaClient, error)
	Set(ctx context.Context, in *ActionConfigSetRequest, opts ...grpc.CallOption) (*ActionConfigSetResponse, error)
	SetSome(ctx context.Context, in *ActionConfigSetSomeRequest, opts ...grpc.CallOption) (ActionConfigService_SetSomeClient, error)
	Delete(ctx context.Context, in *ActionConfigDeleteRequest, opts ...grpc.CallOption) (*ActionConfigDeleteResponse, error)
	DeleteSome(ctx context.Context, in *ActionConfigDeleteSomeRequest, opts ...grpc.CallOption) (ActionConfigService_DeleteSomeClient, error)
	DeleteAll(ctx context.Context, in *ActionConfigDeleteAllRequest, opts ...grpc.CallOption) (ActionConfigService_DeleteAllClient, error)
}

type actionConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewActionConfigServiceClient(cc grpc.ClientConnInterface) ActionConfigServiceClient {
	return &actionConfigServiceClient{cc}
}

func (c *actionConfigServiceClient) GetOne(ctx context.Context, in *ActionConfigRequest, opts ...grpc.CallOption) (*ActionConfigResponse, error) {
	out := new(ActionConfigResponse)
	err := c.cc.Invoke(ctx, ActionConfigService_GetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionConfigServiceClient) GetSome(ctx context.Context, in *ActionConfigSomeRequest, opts ...grpc.CallOption) (ActionConfigService_GetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ActionConfigService_ServiceDesc.Streams[0], ActionConfigService_GetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &actionConfigServiceGetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ActionConfigService_GetSomeClient interface {
	Recv() (*ActionConfigSomeResponse, error)
	grpc.ClientStream
}

type actionConfigServiceGetSomeClient struct {
	grpc.ClientStream
}

func (x *actionConfigServiceGetSomeClient) Recv() (*ActionConfigSomeResponse, error) {
	m := new(ActionConfigSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *actionConfigServiceClient) GetAll(ctx context.Context, in *ActionConfigStreamRequest, opts ...grpc.CallOption) (ActionConfigService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &ActionConfigService_ServiceDesc.Streams[1], ActionConfigService_GetAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &actionConfigServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ActionConfigService_GetAllClient interface {
	Recv() (*ActionConfigStreamResponse, error)
	grpc.ClientStream
}

type actionConfigServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *actionConfigServiceGetAllClient) Recv() (*ActionConfigStreamResponse, error) {
	m := new(ActionConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *actionConfigServiceClient) Subscribe(ctx context.Context, in *ActionConfigStreamRequest, opts ...grpc.CallOption) (ActionConfigService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ActionConfigService_ServiceDesc.Streams[2], ActionConfigService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &actionConfigServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ActionConfigService_SubscribeClient interface {
	Recv() (*ActionConfigStreamResponse, error)
	grpc.ClientStream
}

type actionConfigServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *actionConfigServiceSubscribeClient) Recv() (*ActionConfigStreamResponse, error) {
	m := new(ActionConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *actionConfigServiceClient) GetMeta(ctx context.Context, in *ActionConfigStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error) {
	out := new(MetaResponse)
	err := c.cc.Invoke(ctx, ActionConfigService_GetMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionConfigServiceClient) SubscribeMeta(ctx context.Context, in *ActionConfigStreamRequest, opts ...grpc.CallOption) (ActionConfigService_SubscribeMetaClient, error) {
	stream, err := c.cc.NewStream(ctx, &ActionConfigService_ServiceDesc.Streams[3], ActionConfigService_SubscribeMeta_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &actionConfigServiceSubscribeMetaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ActionConfigService_SubscribeMetaClient interface {
	Recv() (*MetaResponse, error)
	grpc.ClientStream
}

type actionConfigServiceSubscribeMetaClient struct {
	grpc.ClientStream
}

func (x *actionConfigServiceSubscribeMetaClient) Recv() (*MetaResponse, error) {
	m := new(MetaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *actionConfigServiceClient) Set(ctx context.Context, in *ActionConfigSetRequest, opts ...grpc.CallOption) (*ActionConfigSetResponse, error) {
	out := new(ActionConfigSetResponse)
	err := c.cc.Invoke(ctx, ActionConfigService_Set_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionConfigServiceClient) SetSome(ctx context.Context, in *ActionConfigSetSomeRequest, opts ...grpc.CallOption) (ActionConfigService_SetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ActionConfigService_ServiceDesc.Streams[4], ActionConfigService_SetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &actionConfigServiceSetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ActionConfigService_SetSomeClient interface {
	Recv() (*ActionConfigSetSomeResponse, error)
	grpc.ClientStream
}

type actionConfigServiceSetSomeClient struct {
	grpc.ClientStream
}

func (x *actionConfigServiceSetSomeClient) Recv() (*ActionConfigSetSomeResponse, error) {
	m := new(ActionConfigSetSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *actionConfigServiceClient) Delete(ctx context.Context, in *ActionConfigDeleteRequest, opts ...grpc.CallOption) (*ActionConfigDeleteResponse, error) {
	out := new(ActionConfigDeleteResponse)
	err := c.cc.Invoke(ctx, ActionConfigService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionConfigServiceClient) DeleteSome(ctx context.Context, in *ActionConfigDeleteSomeRequest, opts ...grpc.CallOption) (ActionConfigService_DeleteSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ActionConfigService_ServiceDesc.Streams[5], ActionConfigService_DeleteSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &actionConfigServiceDeleteSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ActionConfigService_DeleteSomeClient interface {
	Recv() (*ActionConfigDeleteSomeResponse, error)
	grpc.ClientStream
}

type actionConfigServiceDeleteSomeClient struct {
	grpc.ClientStream
}

func (x *actionConfigServiceDeleteSomeClient) Recv() (*ActionConfigDeleteSomeResponse, error) {
	m := new(ActionConfigDeleteSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *actionConfigServiceClient) DeleteAll(ctx context.Context, in *ActionConfigDeleteAllRequest, opts ...grpc.CallOption) (ActionConfigService_DeleteAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &ActionConfigService_ServiceDesc.Streams[6], ActionConfigService_DeleteAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &actionConfigServiceDeleteAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ActionConfigService_DeleteAllClient interface {
	Recv() (*ActionConfigDeleteAllResponse, error)
	grpc.ClientStream
}

type actionConfigServiceDeleteAllClient struct {
	grpc.ClientStream
}

func (x *actionConfigServiceDeleteAllClient) Recv() (*ActionConfigDeleteAllResponse, error) {
	m := new(ActionConfigDeleteAllResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ActionConfigServiceServer is the server API for ActionConfigService service.
// All implementations must embed UnimplementedActionConfigServiceServer
// for forward compatibility
type ActionConfigServiceServer interface {
	GetOne(context.Context, *ActionConfigRequest) (*ActionConfigResponse, error)
	GetSome(*ActionConfigSomeRequest, ActionConfigService_GetSomeServer) error
	GetAll(*ActionConfigStreamRequest, ActionConfigService_GetAllServer) error
	Subscribe(*ActionConfigStreamRequest, ActionConfigService_SubscribeServer) error
	GetMeta(context.Context, *ActionConfigStreamRequest) (*MetaResponse, error)
	SubscribeMeta(*ActionConfigStreamRequest, ActionConfigService_SubscribeMetaServer) error
	Set(context.Context, *ActionConfigSetRequest) (*ActionConfigSetResponse, error)
	SetSome(*ActionConfigSetSomeRequest, ActionConfigService_SetSomeServer) error
	Delete(context.Context, *ActionConfigDeleteRequest) (*ActionConfigDeleteResponse, error)
	DeleteSome(*ActionConfigDeleteSomeRequest, ActionConfigService_DeleteSomeServer) error
	DeleteAll(*ActionConfigDeleteAllRequest, ActionConfigService_DeleteAllServer) error
	mustEmbedUnimplementedActionConfigServiceServer()
}

// UnimplementedActionConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedActionConfigServiceServer struct {
}

func (UnimplementedActionConfigServiceServer) GetOne(context.Context, *ActionConfigRequest) (*ActionConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedActionConfigServiceServer) GetSome(*ActionConfigSomeRequest, ActionConfigService_GetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSome not implemented")
}
func (UnimplementedActionConfigServiceServer) GetAll(*ActionConfigStreamRequest, ActionConfigService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedActionConfigServiceServer) Subscribe(*ActionConfigStreamRequest, ActionConfigService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedActionConfigServiceServer) GetMeta(context.Context, *ActionConfigStreamRequest) (*MetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeta not implemented")
}
func (UnimplementedActionConfigServiceServer) SubscribeMeta(*ActionConfigStreamRequest, ActionConfigService_SubscribeMetaServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMeta not implemented")
}
func (UnimplementedActionConfigServiceServer) Set(context.Context, *ActionConfigSetRequest) (*ActionConfigSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedActionConfigServiceServer) SetSome(*ActionConfigSetSomeRequest, ActionConfigService_SetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method SetSome not implemented")
}
func (UnimplementedActionConfigServiceServer) Delete(context.Context, *ActionConfigDeleteRequest) (*ActionConfigDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedActionConfigServiceServer) DeleteSome(*ActionConfigDeleteSomeRequest, ActionConfigService_DeleteSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteSome not implemented")
}
func (UnimplementedActionConfigServiceServer) DeleteAll(*ActionConfigDeleteAllRequest, ActionConfigService_DeleteAllServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteAll not implemented")
}
func (UnimplementedActionConfigServiceServer) mustEmbedUnimplementedActionConfigServiceServer() {}

// UnsafeActionConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActionConfigServiceServer will
// result in compilation errors.
type UnsafeActionConfigServiceServer interface {
	mustEmbedUnimplementedActionConfigServiceServer()
}

func RegisterActionConfigServiceServer(s grpc.ServiceRegistrar, srv ActionConfigServiceServer) {
	s.RegisterService(&ActionConfigService_ServiceDesc, srv)
}

func _ActionConfigService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionConfigServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActionConfigService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionConfigServiceServer).GetOne(ctx, req.(*ActionConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionConfigService_GetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ActionConfigSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ActionConfigServiceServer).GetSome(m, &actionConfigServiceGetSomeServer{stream})
}

type ActionConfigService_GetSomeServer interface {
	Send(*ActionConfigSomeResponse) error
	grpc.ServerStream
}

type actionConfigServiceGetSomeServer struct {
	grpc.ServerStream
}

func (x *actionConfigServiceGetSomeServer) Send(m *ActionConfigSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ActionConfigService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ActionConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ActionConfigServiceServer).GetAll(m, &actionConfigServiceGetAllServer{stream})
}

type ActionConfigService_GetAllServer interface {
	Send(*ActionConfigStreamResponse) error
	grpc.ServerStream
}

type actionConfigServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *actionConfigServiceGetAllServer) Send(m *ActionConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ActionConfigService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ActionConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ActionConfigServiceServer).Subscribe(m, &actionConfigServiceSubscribeServer{stream})
}

type ActionConfigService_SubscribeServer interface {
	Send(*ActionConfigStreamResponse) error
	grpc.ServerStream
}

type actionConfigServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *actionConfigServiceSubscribeServer) Send(m *ActionConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ActionConfigService_GetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionConfigStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionConfigServiceServer).GetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActionConfigService_GetMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionConfigServiceServer).GetMeta(ctx, req.(*ActionConfigStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionConfigService_SubscribeMeta_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ActionConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ActionConfigServiceServer).SubscribeMeta(m, &actionConfigServiceSubscribeMetaServer{stream})
}

type ActionConfigService_SubscribeMetaServer interface {
	Send(*MetaResponse) error
	grpc.ServerStream
}

type actionConfigServiceSubscribeMetaServer struct {
	grpc.ServerStream
}

func (x *actionConfigServiceSubscribeMetaServer) Send(m *MetaResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ActionConfigService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionConfigSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionConfigServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActionConfigService_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionConfigServiceServer).Set(ctx, req.(*ActionConfigSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionConfigService_SetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ActionConfigSetSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ActionConfigServiceServer).SetSome(m, &actionConfigServiceSetSomeServer{stream})
}

type ActionConfigService_SetSomeServer interface {
	Send(*ActionConfigSetSomeResponse) error
	grpc.ServerStream
}

type actionConfigServiceSetSomeServer struct {
	grpc.ServerStream
}

func (x *actionConfigServiceSetSomeServer) Send(m *ActionConfigSetSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ActionConfigService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionConfigDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionConfigServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActionConfigService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionConfigServiceServer).Delete(ctx, req.(*ActionConfigDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionConfigService_DeleteSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ActionConfigDeleteSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ActionConfigServiceServer).DeleteSome(m, &actionConfigServiceDeleteSomeServer{stream})
}

type ActionConfigService_DeleteSomeServer interface {
	Send(*ActionConfigDeleteSomeResponse) error
	grpc.ServerStream
}

type actionConfigServiceDeleteSomeServer struct {
	grpc.ServerStream
}

func (x *actionConfigServiceDeleteSomeServer) Send(m *ActionConfigDeleteSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ActionConfigService_DeleteAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ActionConfigDeleteAllRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ActionConfigServiceServer).DeleteAll(m, &actionConfigServiceDeleteAllServer{stream})
}

type ActionConfigService_DeleteAllServer interface {
	Send(*ActionConfigDeleteAllResponse) error
	grpc.ServerStream
}

type actionConfigServiceDeleteAllServer struct {
	grpc.ServerStream
}

func (x *actionConfigServiceDeleteAllServer) Send(m *ActionConfigDeleteAllResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ActionConfigService_ServiceDesc is the grpc.ServiceDesc for ActionConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActionConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.action.v1.ActionConfigService",
	HandlerType: (*ActionConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _ActionConfigService_GetOne_Handler,
		},
		{
			MethodName: "GetMeta",
			Handler:    _ActionConfigService_GetMeta_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _ActionConfigService_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ActionConfigService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSome",
			Handler:       _ActionConfigService_GetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAll",
			Handler:       _ActionConfigService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _ActionConfigService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeMeta",
			Handler:       _ActionConfigService_SubscribeMeta_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SetSome",
			Handler:       _ActionConfigService_SetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteSome",
			Handler:       _ActionConfigService_DeleteSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteAll",
			Handler:       _ActionConfigService_DeleteAll_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/action.v1/services.gen.proto",
}

const (
	ActionRunService_GetOne_FullMethodName        = "/arista.action.v1.ActionRunService/GetOne"
	ActionRunService_GetSome_FullMethodName       = "/arista.action.v1.ActionRunService/GetSome"
	ActionRunService_GetAll_FullMethodName        = "/arista.action.v1.ActionRunService/GetAll"
	ActionRunService_Subscribe_FullMethodName     = "/arista.action.v1.ActionRunService/Subscribe"
	ActionRunService_GetMeta_FullMethodName       = "/arista.action.v1.ActionRunService/GetMeta"
	ActionRunService_SubscribeMeta_FullMethodName = "/arista.action.v1.ActionRunService/SubscribeMeta"
)

// ActionRunServiceClient is the client API for ActionRunService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActionRunServiceClient interface {
	GetOne(ctx context.Context, in *ActionRunRequest, opts ...grpc.CallOption) (*ActionRunResponse, error)
	GetSome(ctx context.Context, in *ActionRunSomeRequest, opts ...grpc.CallOption) (ActionRunService_GetSomeClient, error)
	GetAll(ctx context.Context, in *ActionRunStreamRequest, opts ...grpc.CallOption) (ActionRunService_GetAllClient, error)
	Subscribe(ctx context.Context, in *ActionRunStreamRequest, opts ...grpc.CallOption) (ActionRunService_SubscribeClient, error)
	GetMeta(ctx context.Context, in *ActionRunStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error)
	SubscribeMeta(ctx context.Context, in *ActionRunStreamRequest, opts ...grpc.CallOption) (ActionRunService_SubscribeMetaClient, error)
}

type actionRunServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewActionRunServiceClient(cc grpc.ClientConnInterface) ActionRunServiceClient {
	return &actionRunServiceClient{cc}
}

func (c *actionRunServiceClient) GetOne(ctx context.Context, in *ActionRunRequest, opts ...grpc.CallOption) (*ActionRunResponse, error) {
	out := new(ActionRunResponse)
	err := c.cc.Invoke(ctx, ActionRunService_GetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionRunServiceClient) GetSome(ctx context.Context, in *ActionRunSomeRequest, opts ...grpc.CallOption) (ActionRunService_GetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ActionRunService_ServiceDesc.Streams[0], ActionRunService_GetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &actionRunServiceGetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ActionRunService_GetSomeClient interface {
	Recv() (*ActionRunSomeResponse, error)
	grpc.ClientStream
}

type actionRunServiceGetSomeClient struct {
	grpc.ClientStream
}

func (x *actionRunServiceGetSomeClient) Recv() (*ActionRunSomeResponse, error) {
	m := new(ActionRunSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *actionRunServiceClient) GetAll(ctx context.Context, in *ActionRunStreamRequest, opts ...grpc.CallOption) (ActionRunService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &ActionRunService_ServiceDesc.Streams[1], ActionRunService_GetAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &actionRunServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ActionRunService_GetAllClient interface {
	Recv() (*ActionRunStreamResponse, error)
	grpc.ClientStream
}

type actionRunServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *actionRunServiceGetAllClient) Recv() (*ActionRunStreamResponse, error) {
	m := new(ActionRunStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *actionRunServiceClient) Subscribe(ctx context.Context, in *ActionRunStreamRequest, opts ...grpc.CallOption) (ActionRunService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ActionRunService_ServiceDesc.Streams[2], ActionRunService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &actionRunServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ActionRunService_SubscribeClient interface {
	Recv() (*ActionRunStreamResponse, error)
	grpc.ClientStream
}

type actionRunServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *actionRunServiceSubscribeClient) Recv() (*ActionRunStreamResponse, error) {
	m := new(ActionRunStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *actionRunServiceClient) GetMeta(ctx context.Context, in *ActionRunStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error) {
	out := new(MetaResponse)
	err := c.cc.Invoke(ctx, ActionRunService_GetMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionRunServiceClient) SubscribeMeta(ctx context.Context, in *ActionRunStreamRequest, opts ...grpc.CallOption) (ActionRunService_SubscribeMetaClient, error) {
	stream, err := c.cc.NewStream(ctx, &ActionRunService_ServiceDesc.Streams[3], ActionRunService_SubscribeMeta_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &actionRunServiceSubscribeMetaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ActionRunService_SubscribeMetaClient interface {
	Recv() (*MetaResponse, error)
	grpc.ClientStream
}

type actionRunServiceSubscribeMetaClient struct {
	grpc.ClientStream
}

func (x *actionRunServiceSubscribeMetaClient) Recv() (*MetaResponse, error) {
	m := new(MetaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ActionRunServiceServer is the server API for ActionRunService service.
// All implementations must embed UnimplementedActionRunServiceServer
// for forward compatibility
type ActionRunServiceServer interface {
	GetOne(context.Context, *ActionRunRequest) (*ActionRunResponse, error)
	GetSome(*ActionRunSomeRequest, ActionRunService_GetSomeServer) error
	GetAll(*ActionRunStreamRequest, ActionRunService_GetAllServer) error
	Subscribe(*ActionRunStreamRequest, ActionRunService_SubscribeServer) error
	GetMeta(context.Context, *ActionRunStreamRequest) (*MetaResponse, error)
	SubscribeMeta(*ActionRunStreamRequest, ActionRunService_SubscribeMetaServer) error
	mustEmbedUnimplementedActionRunServiceServer()
}

// UnimplementedActionRunServiceServer must be embedded to have forward compatible implementations.
type UnimplementedActionRunServiceServer struct {
}

func (UnimplementedActionRunServiceServer) GetOne(context.Context, *ActionRunRequest) (*ActionRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedActionRunServiceServer) GetSome(*ActionRunSomeRequest, ActionRunService_GetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSome not implemented")
}
func (UnimplementedActionRunServiceServer) GetAll(*ActionRunStreamRequest, ActionRunService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedActionRunServiceServer) Subscribe(*ActionRunStreamRequest, ActionRunService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedActionRunServiceServer) GetMeta(context.Context, *ActionRunStreamRequest) (*MetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeta not implemented")
}
func (UnimplementedActionRunServiceServer) SubscribeMeta(*ActionRunStreamRequest, ActionRunService_SubscribeMetaServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMeta not implemented")
}
func (UnimplementedActionRunServiceServer) mustEmbedUnimplementedActionRunServiceServer() {}

// UnsafeActionRunServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActionRunServiceServer will
// result in compilation errors.
type UnsafeActionRunServiceServer interface {
	mustEmbedUnimplementedActionRunServiceServer()
}

func RegisterActionRunServiceServer(s grpc.ServiceRegistrar, srv ActionRunServiceServer) {
	s.RegisterService(&ActionRunService_ServiceDesc, srv)
}

func _ActionRunService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionRunServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActionRunService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionRunServiceServer).GetOne(ctx, req.(*ActionRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionRunService_GetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ActionRunSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ActionRunServiceServer).GetSome(m, &actionRunServiceGetSomeServer{stream})
}

type ActionRunService_GetSomeServer interface {
	Send(*ActionRunSomeResponse) error
	grpc.ServerStream
}

type actionRunServiceGetSomeServer struct {
	grpc.ServerStream
}

func (x *actionRunServiceGetSomeServer) Send(m *ActionRunSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ActionRunService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ActionRunStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ActionRunServiceServer).GetAll(m, &actionRunServiceGetAllServer{stream})
}

type ActionRunService_GetAllServer interface {
	Send(*ActionRunStreamResponse) error
	grpc.ServerStream
}

type actionRunServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *actionRunServiceGetAllServer) Send(m *ActionRunStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ActionRunService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ActionRunStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ActionRunServiceServer).Subscribe(m, &actionRunServiceSubscribeServer{stream})
}

type ActionRunService_SubscribeServer interface {
	Send(*ActionRunStreamResponse) error
	grpc.ServerStream
}

type actionRunServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *actionRunServiceSubscribeServer) Send(m *ActionRunStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ActionRunService_GetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionRunStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionRunServiceServer).GetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActionRunService_GetMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionRunServiceServer).GetMeta(ctx, req.(*ActionRunStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionRunService_SubscribeMeta_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ActionRunStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ActionRunServiceServer).SubscribeMeta(m, &actionRunServiceSubscribeMetaServer{stream})
}

type ActionRunService_SubscribeMetaServer interface {
	Send(*MetaResponse) error
	grpc.ServerStream
}

type actionRunServiceSubscribeMetaServer struct {
	grpc.ServerStream
}

func (x *actionRunServiceSubscribeMetaServer) Send(m *MetaResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ActionRunService_ServiceDesc is the grpc.ServiceDesc for ActionRunService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActionRunService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.action.v1.ActionRunService",
	HandlerType: (*ActionRunServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _ActionRunService_GetOne_Handler,
		},
		{
			MethodName: "GetMeta",
			Handler:    _ActionRunService_GetMeta_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSome",
			Handler:       _ActionRunService_GetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAll",
			Handler:       _ActionRunService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _ActionRunService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeMeta",
			Handler:       _ActionRunService_SubscribeMeta_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/action.v1/services.gen.proto",
}

const (
	ActionRunConfigService_GetOne_FullMethodName        = "/arista.action.v1.ActionRunConfigService/GetOne"
	ActionRunConfigService_GetSome_FullMethodName       = "/arista.action.v1.ActionRunConfigService/GetSome"
	ActionRunConfigService_GetAll_FullMethodName        = "/arista.action.v1.ActionRunConfigService/GetAll"
	ActionRunConfigService_Subscribe_FullMethodName     = "/arista.action.v1.ActionRunConfigService/Subscribe"
	ActionRunConfigService_GetMeta_FullMethodName       = "/arista.action.v1.ActionRunConfigService/GetMeta"
	ActionRunConfigService_SubscribeMeta_FullMethodName = "/arista.action.v1.ActionRunConfigService/SubscribeMeta"
	ActionRunConfigService_Set_FullMethodName           = "/arista.action.v1.ActionRunConfigService/Set"
	ActionRunConfigService_SetSome_FullMethodName       = "/arista.action.v1.ActionRunConfigService/SetSome"
	ActionRunConfigService_Delete_FullMethodName        = "/arista.action.v1.ActionRunConfigService/Delete"
	ActionRunConfigService_DeleteSome_FullMethodName    = "/arista.action.v1.ActionRunConfigService/DeleteSome"
	ActionRunConfigService_DeleteAll_FullMethodName     = "/arista.action.v1.ActionRunConfigService/DeleteAll"
)

// ActionRunConfigServiceClient is the client API for ActionRunConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActionRunConfigServiceClient interface {
	GetOne(ctx context.Context, in *ActionRunConfigRequest, opts ...grpc.CallOption) (*ActionRunConfigResponse, error)
	GetSome(ctx context.Context, in *ActionRunConfigSomeRequest, opts ...grpc.CallOption) (ActionRunConfigService_GetSomeClient, error)
	GetAll(ctx context.Context, in *ActionRunConfigStreamRequest, opts ...grpc.CallOption) (ActionRunConfigService_GetAllClient, error)
	Subscribe(ctx context.Context, in *ActionRunConfigStreamRequest, opts ...grpc.CallOption) (ActionRunConfigService_SubscribeClient, error)
	GetMeta(ctx context.Context, in *ActionRunConfigStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error)
	SubscribeMeta(ctx context.Context, in *ActionRunConfigStreamRequest, opts ...grpc.CallOption) (ActionRunConfigService_SubscribeMetaClient, error)
	Set(ctx context.Context, in *ActionRunConfigSetRequest, opts ...grpc.CallOption) (*ActionRunConfigSetResponse, error)
	SetSome(ctx context.Context, in *ActionRunConfigSetSomeRequest, opts ...grpc.CallOption) (ActionRunConfigService_SetSomeClient, error)
	Delete(ctx context.Context, in *ActionRunConfigDeleteRequest, opts ...grpc.CallOption) (*ActionRunConfigDeleteResponse, error)
	DeleteSome(ctx context.Context, in *ActionRunConfigDeleteSomeRequest, opts ...grpc.CallOption) (ActionRunConfigService_DeleteSomeClient, error)
	DeleteAll(ctx context.Context, in *ActionRunConfigDeleteAllRequest, opts ...grpc.CallOption) (ActionRunConfigService_DeleteAllClient, error)
}

type actionRunConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewActionRunConfigServiceClient(cc grpc.ClientConnInterface) ActionRunConfigServiceClient {
	return &actionRunConfigServiceClient{cc}
}

func (c *actionRunConfigServiceClient) GetOne(ctx context.Context, in *ActionRunConfigRequest, opts ...grpc.CallOption) (*ActionRunConfigResponse, error) {
	out := new(ActionRunConfigResponse)
	err := c.cc.Invoke(ctx, ActionRunConfigService_GetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionRunConfigServiceClient) GetSome(ctx context.Context, in *ActionRunConfigSomeRequest, opts ...grpc.CallOption) (ActionRunConfigService_GetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ActionRunConfigService_ServiceDesc.Streams[0], ActionRunConfigService_GetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &actionRunConfigServiceGetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ActionRunConfigService_GetSomeClient interface {
	Recv() (*ActionRunConfigSomeResponse, error)
	grpc.ClientStream
}

type actionRunConfigServiceGetSomeClient struct {
	grpc.ClientStream
}

func (x *actionRunConfigServiceGetSomeClient) Recv() (*ActionRunConfigSomeResponse, error) {
	m := new(ActionRunConfigSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *actionRunConfigServiceClient) GetAll(ctx context.Context, in *ActionRunConfigStreamRequest, opts ...grpc.CallOption) (ActionRunConfigService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &ActionRunConfigService_ServiceDesc.Streams[1], ActionRunConfigService_GetAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &actionRunConfigServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ActionRunConfigService_GetAllClient interface {
	Recv() (*ActionRunConfigStreamResponse, error)
	grpc.ClientStream
}

type actionRunConfigServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *actionRunConfigServiceGetAllClient) Recv() (*ActionRunConfigStreamResponse, error) {
	m := new(ActionRunConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *actionRunConfigServiceClient) Subscribe(ctx context.Context, in *ActionRunConfigStreamRequest, opts ...grpc.CallOption) (ActionRunConfigService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ActionRunConfigService_ServiceDesc.Streams[2], ActionRunConfigService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &actionRunConfigServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ActionRunConfigService_SubscribeClient interface {
	Recv() (*ActionRunConfigStreamResponse, error)
	grpc.ClientStream
}

type actionRunConfigServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *actionRunConfigServiceSubscribeClient) Recv() (*ActionRunConfigStreamResponse, error) {
	m := new(ActionRunConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *actionRunConfigServiceClient) GetMeta(ctx context.Context, in *ActionRunConfigStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error) {
	out := new(MetaResponse)
	err := c.cc.Invoke(ctx, ActionRunConfigService_GetMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionRunConfigServiceClient) SubscribeMeta(ctx context.Context, in *ActionRunConfigStreamRequest, opts ...grpc.CallOption) (ActionRunConfigService_SubscribeMetaClient, error) {
	stream, err := c.cc.NewStream(ctx, &ActionRunConfigService_ServiceDesc.Streams[3], ActionRunConfigService_SubscribeMeta_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &actionRunConfigServiceSubscribeMetaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ActionRunConfigService_SubscribeMetaClient interface {
	Recv() (*MetaResponse, error)
	grpc.ClientStream
}

type actionRunConfigServiceSubscribeMetaClient struct {
	grpc.ClientStream
}

func (x *actionRunConfigServiceSubscribeMetaClient) Recv() (*MetaResponse, error) {
	m := new(MetaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *actionRunConfigServiceClient) Set(ctx context.Context, in *ActionRunConfigSetRequest, opts ...grpc.CallOption) (*ActionRunConfigSetResponse, error) {
	out := new(ActionRunConfigSetResponse)
	err := c.cc.Invoke(ctx, ActionRunConfigService_Set_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionRunConfigServiceClient) SetSome(ctx context.Context, in *ActionRunConfigSetSomeRequest, opts ...grpc.CallOption) (ActionRunConfigService_SetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ActionRunConfigService_ServiceDesc.Streams[4], ActionRunConfigService_SetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &actionRunConfigServiceSetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ActionRunConfigService_SetSomeClient interface {
	Recv() (*ActionRunConfigSetSomeResponse, error)
	grpc.ClientStream
}

type actionRunConfigServiceSetSomeClient struct {
	grpc.ClientStream
}

func (x *actionRunConfigServiceSetSomeClient) Recv() (*ActionRunConfigSetSomeResponse, error) {
	m := new(ActionRunConfigSetSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *actionRunConfigServiceClient) Delete(ctx context.Context, in *ActionRunConfigDeleteRequest, opts ...grpc.CallOption) (*ActionRunConfigDeleteResponse, error) {
	out := new(ActionRunConfigDeleteResponse)
	err := c.cc.Invoke(ctx, ActionRunConfigService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionRunConfigServiceClient) DeleteSome(ctx context.Context, in *ActionRunConfigDeleteSomeRequest, opts ...grpc.CallOption) (ActionRunConfigService_DeleteSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ActionRunConfigService_ServiceDesc.Streams[5], ActionRunConfigService_DeleteSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &actionRunConfigServiceDeleteSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ActionRunConfigService_DeleteSomeClient interface {
	Recv() (*ActionRunConfigDeleteSomeResponse, error)
	grpc.ClientStream
}

type actionRunConfigServiceDeleteSomeClient struct {
	grpc.ClientStream
}

func (x *actionRunConfigServiceDeleteSomeClient) Recv() (*ActionRunConfigDeleteSomeResponse, error) {
	m := new(ActionRunConfigDeleteSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *actionRunConfigServiceClient) DeleteAll(ctx context.Context, in *ActionRunConfigDeleteAllRequest, opts ...grpc.CallOption) (ActionRunConfigService_DeleteAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &ActionRunConfigService_ServiceDesc.Streams[6], ActionRunConfigService_DeleteAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &actionRunConfigServiceDeleteAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ActionRunConfigService_DeleteAllClient interface {
	Recv() (*ActionRunConfigDeleteAllResponse, error)
	grpc.ClientStream
}

type actionRunConfigServiceDeleteAllClient struct {
	grpc.ClientStream
}

func (x *actionRunConfigServiceDeleteAllClient) Recv() (*ActionRunConfigDeleteAllResponse, error) {
	m := new(ActionRunConfigDeleteAllResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ActionRunConfigServiceServer is the server API for ActionRunConfigService service.
// All implementations must embed UnimplementedActionRunConfigServiceServer
// for forward compatibility
type ActionRunConfigServiceServer interface {
	GetOne(context.Context, *ActionRunConfigRequest) (*ActionRunConfigResponse, error)
	GetSome(*ActionRunConfigSomeRequest, ActionRunConfigService_GetSomeServer) error
	GetAll(*ActionRunConfigStreamRequest, ActionRunConfigService_GetAllServer) error
	Subscribe(*ActionRunConfigStreamRequest, ActionRunConfigService_SubscribeServer) error
	GetMeta(context.Context, *ActionRunConfigStreamRequest) (*MetaResponse, error)
	SubscribeMeta(*ActionRunConfigStreamRequest, ActionRunConfigService_SubscribeMetaServer) error
	Set(context.Context, *ActionRunConfigSetRequest) (*ActionRunConfigSetResponse, error)
	SetSome(*ActionRunConfigSetSomeRequest, ActionRunConfigService_SetSomeServer) error
	Delete(context.Context, *ActionRunConfigDeleteRequest) (*ActionRunConfigDeleteResponse, error)
	DeleteSome(*ActionRunConfigDeleteSomeRequest, ActionRunConfigService_DeleteSomeServer) error
	DeleteAll(*ActionRunConfigDeleteAllRequest, ActionRunConfigService_DeleteAllServer) error
	mustEmbedUnimplementedActionRunConfigServiceServer()
}

// UnimplementedActionRunConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedActionRunConfigServiceServer struct {
}

func (UnimplementedActionRunConfigServiceServer) GetOne(context.Context, *ActionRunConfigRequest) (*ActionRunConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedActionRunConfigServiceServer) GetSome(*ActionRunConfigSomeRequest, ActionRunConfigService_GetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSome not implemented")
}
func (UnimplementedActionRunConfigServiceServer) GetAll(*ActionRunConfigStreamRequest, ActionRunConfigService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedActionRunConfigServiceServer) Subscribe(*ActionRunConfigStreamRequest, ActionRunConfigService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedActionRunConfigServiceServer) GetMeta(context.Context, *ActionRunConfigStreamRequest) (*MetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeta not implemented")
}
func (UnimplementedActionRunConfigServiceServer) SubscribeMeta(*ActionRunConfigStreamRequest, ActionRunConfigService_SubscribeMetaServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMeta not implemented")
}
func (UnimplementedActionRunConfigServiceServer) Set(context.Context, *ActionRunConfigSetRequest) (*ActionRunConfigSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedActionRunConfigServiceServer) SetSome(*ActionRunConfigSetSomeRequest, ActionRunConfigService_SetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method SetSome not implemented")
}
func (UnimplementedActionRunConfigServiceServer) Delete(context.Context, *ActionRunConfigDeleteRequest) (*ActionRunConfigDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedActionRunConfigServiceServer) DeleteSome(*ActionRunConfigDeleteSomeRequest, ActionRunConfigService_DeleteSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteSome not implemented")
}
func (UnimplementedActionRunConfigServiceServer) DeleteAll(*ActionRunConfigDeleteAllRequest, ActionRunConfigService_DeleteAllServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteAll not implemented")
}
func (UnimplementedActionRunConfigServiceServer) mustEmbedUnimplementedActionRunConfigServiceServer() {
}

// UnsafeActionRunConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActionRunConfigServiceServer will
// result in compilation errors.
type UnsafeActionRunConfigServiceServer interface {
	mustEmbedUnimplementedActionRunConfigServiceServer()
}

func RegisterActionRunConfigServiceServer(s grpc.ServiceRegistrar, srv ActionRunConfigServiceServer) {
	s.RegisterService(&ActionRunConfigService_ServiceDesc, srv)
}

func _ActionRunConfigService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionRunConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionRunConfigServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActionRunConfigService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionRunConfigServiceServer).GetOne(ctx, req.(*ActionRunConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionRunConfigService_GetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ActionRunConfigSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ActionRunConfigServiceServer).GetSome(m, &actionRunConfigServiceGetSomeServer{stream})
}

type ActionRunConfigService_GetSomeServer interface {
	Send(*ActionRunConfigSomeResponse) error
	grpc.ServerStream
}

type actionRunConfigServiceGetSomeServer struct {
	grpc.ServerStream
}

func (x *actionRunConfigServiceGetSomeServer) Send(m *ActionRunConfigSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ActionRunConfigService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ActionRunConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ActionRunConfigServiceServer).GetAll(m, &actionRunConfigServiceGetAllServer{stream})
}

type ActionRunConfigService_GetAllServer interface {
	Send(*ActionRunConfigStreamResponse) error
	grpc.ServerStream
}

type actionRunConfigServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *actionRunConfigServiceGetAllServer) Send(m *ActionRunConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ActionRunConfigService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ActionRunConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ActionRunConfigServiceServer).Subscribe(m, &actionRunConfigServiceSubscribeServer{stream})
}

type ActionRunConfigService_SubscribeServer interface {
	Send(*ActionRunConfigStreamResponse) error
	grpc.ServerStream
}

type actionRunConfigServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *actionRunConfigServiceSubscribeServer) Send(m *ActionRunConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ActionRunConfigService_GetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionRunConfigStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionRunConfigServiceServer).GetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActionRunConfigService_GetMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionRunConfigServiceServer).GetMeta(ctx, req.(*ActionRunConfigStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionRunConfigService_SubscribeMeta_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ActionRunConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ActionRunConfigServiceServer).SubscribeMeta(m, &actionRunConfigServiceSubscribeMetaServer{stream})
}

type ActionRunConfigService_SubscribeMetaServer interface {
	Send(*MetaResponse) error
	grpc.ServerStream
}

type actionRunConfigServiceSubscribeMetaServer struct {
	grpc.ServerStream
}

func (x *actionRunConfigServiceSubscribeMetaServer) Send(m *MetaResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ActionRunConfigService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionRunConfigSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionRunConfigServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActionRunConfigService_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionRunConfigServiceServer).Set(ctx, req.(*ActionRunConfigSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionRunConfigService_SetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ActionRunConfigSetSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ActionRunConfigServiceServer).SetSome(m, &actionRunConfigServiceSetSomeServer{stream})
}

type ActionRunConfigService_SetSomeServer interface {
	Send(*ActionRunConfigSetSomeResponse) error
	grpc.ServerStream
}

type actionRunConfigServiceSetSomeServer struct {
	grpc.ServerStream
}

func (x *actionRunConfigServiceSetSomeServer) Send(m *ActionRunConfigSetSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ActionRunConfigService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionRunConfigDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionRunConfigServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActionRunConfigService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionRunConfigServiceServer).Delete(ctx, req.(*ActionRunConfigDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionRunConfigService_DeleteSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ActionRunConfigDeleteSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ActionRunConfigServiceServer).DeleteSome(m, &actionRunConfigServiceDeleteSomeServer{stream})
}

type ActionRunConfigService_DeleteSomeServer interface {
	Send(*ActionRunConfigDeleteSomeResponse) error
	grpc.ServerStream
}

type actionRunConfigServiceDeleteSomeServer struct {
	grpc.ServerStream
}

func (x *actionRunConfigServiceDeleteSomeServer) Send(m *ActionRunConfigDeleteSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ActionRunConfigService_DeleteAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ActionRunConfigDeleteAllRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ActionRunConfigServiceServer).DeleteAll(m, &actionRunConfigServiceDeleteAllServer{stream})
}

type ActionRunConfigService_DeleteAllServer interface {
	Send(*ActionRunConfigDeleteAllResponse) error
	grpc.ServerStream
}

type actionRunConfigServiceDeleteAllServer struct {
	grpc.ServerStream
}

func (x *actionRunConfigServiceDeleteAllServer) Send(m *ActionRunConfigDeleteAllResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ActionRunConfigService_ServiceDesc is the grpc.ServiceDesc for ActionRunConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActionRunConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.action.v1.ActionRunConfigService",
	HandlerType: (*ActionRunConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _ActionRunConfigService_GetOne_Handler,
		},
		{
			MethodName: "GetMeta",
			Handler:    _ActionRunConfigService_GetMeta_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _ActionRunConfigService_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ActionRunConfigService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSome",
			Handler:       _ActionRunConfigService_GetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAll",
			Handler:       _ActionRunConfigService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _ActionRunConfigService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeMeta",
			Handler:       _ActionRunConfigService_SubscribeMeta_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SetSome",
			Handler:       _ActionRunConfigService_SetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteSome",
			Handler:       _ActionRunConfigService_DeleteSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteAll",
			Handler:       _ActionRunConfigService_DeleteAll_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/action.v1/services.gen.proto",
}
