// Copyright (c) 2023 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v4.24.4
// source: arista/action.v1/action.proto

package action

import (
	_ "github.com/aristanetworks/cloudvision-go/api/fmp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ActionLanguage is the language of an action.
type ActionLanguage int32

const (
	// ACTION_LANGUAGE_UNSPECIFIED is the default value for this type.
	ActionLanguage_ACTION_LANGUAGE_UNSPECIFIED ActionLanguage = 0
	// ACTION_LANGUAGE_PYTHON_2 indicates that the action body follows Python 2.x syntax.
	//
	// Deprecated: Marked as deprecated in arista/action.v1/action.proto.
	ActionLanguage_ACTION_LANGUAGE_PYTHON_2 ActionLanguage = 1
	// ACTION_LANGUAGE_PYTHON_3 indicates that the action body follows Python 3.x syntax.
	ActionLanguage_ACTION_LANGUAGE_PYTHON_3 ActionLanguage = 2
	// ACTION_LANGUAGE_GO_TEMPLATE indicates that the action body is a Go language template
	// (e.g. as used in ZTP).
	ActionLanguage_ACTION_LANGUAGE_GO_TEMPLATE ActionLanguage = 3
)

// Enum value maps for ActionLanguage.
var (
	ActionLanguage_name = map[int32]string{
		0: "ACTION_LANGUAGE_UNSPECIFIED",
		1: "ACTION_LANGUAGE_PYTHON_2",
		2: "ACTION_LANGUAGE_PYTHON_3",
		3: "ACTION_LANGUAGE_GO_TEMPLATE",
	}
	ActionLanguage_value = map[string]int32{
		"ACTION_LANGUAGE_UNSPECIFIED": 0,
		"ACTION_LANGUAGE_PYTHON_2":    1,
		"ACTION_LANGUAGE_PYTHON_3":    2,
		"ACTION_LANGUAGE_GO_TEMPLATE": 3,
	}
)

func (x ActionLanguage) Enum() *ActionLanguage {
	p := new(ActionLanguage)
	*p = x
	return p
}

func (x ActionLanguage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionLanguage) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_action_v1_action_proto_enumTypes[0].Descriptor()
}

func (ActionLanguage) Type() protoreflect.EnumType {
	return &file_arista_action_v1_action_proto_enumTypes[0]
}

func (x ActionLanguage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionLanguage.Descriptor instead.
func (ActionLanguage) EnumDescriptor() ([]byte, []int) {
	return file_arista_action_v1_action_proto_rawDescGZIP(), []int{0}
}

// ActionType is the type of an action.
type ActionType int32

const (
	// ACTION_TYPE_UNSPECIFIED is the default value for this type.
	ActionType_ACTION_TYPE_UNSPECIFIED ActionType = 0
	// ACTION_TYPE_CHANGECONTROL_CUSTOM indicates a scripted action that can be used as part of
	// a change control.
	ActionType_ACTION_TYPE_CHANGECONTROL_CUSTOM ActionType = 1
	// ACTION_TYPE_CHANGECONTROL_BUILT_IN indicates a built-in action with no scripted component
	// which can be used as part of a change control.
	ActionType_ACTION_TYPE_CHANGECONTROL_BUILT_IN ActionType = 2
	// ACTION_TYPE_STUDIO_AUTOFILL is an action which can be bound to an input in a studio.
	ActionType_ACTION_TYPE_STUDIO_AUTOFILL ActionType = 3
	// ACTION_TYPE_PACKAGING_INSTALL_HOOK is a type of Action which can run during package lifecycle
	// events (e.g. pre-install or post-uninstall) to handle any migration or configuration changes
	// that need to happen for a Package to be (un)installed successfully.
	ActionType_ACTION_TYPE_PACKAGING_INSTALL_HOOK ActionType = 4
	// ACTION_TYPE_ZTP_BOOTSTRAP is a type of Action which can be used to bootstrap a device.
	ActionType_ACTION_TYPE_ZTP_BOOTSTRAP ActionType = 5
	// ACTION_TYPE_STUDIO_BUILD_HOOK is a type of Action which can run at various points in a
	// workspace build pipeline (e.g. workspace pre-build, studio pre-render), facilitating
	// customization of the workspace build beyond the standard process. Build hooks in a given
	// stage can express dependencies on each other which allows ordering of the actions' execution.
	//
	// For ACTION_TYPE_STUDIO_BUILD_HOOK each hook invocation will provide the following
	// arguments:
	//
	// * WorkspaceID (mandatory): the ID of the Workspace
	// * StudioID (optional, if running in the context of a Studio): the ID of the Studio
	ActionType_ACTION_TYPE_STUDIO_BUILD_HOOK ActionType = 6
)

// Enum value maps for ActionType.
var (
	ActionType_name = map[int32]string{
		0: "ACTION_TYPE_UNSPECIFIED",
		1: "ACTION_TYPE_CHANGECONTROL_CUSTOM",
		2: "ACTION_TYPE_CHANGECONTROL_BUILT_IN",
		3: "ACTION_TYPE_STUDIO_AUTOFILL",
		4: "ACTION_TYPE_PACKAGING_INSTALL_HOOK",
		5: "ACTION_TYPE_ZTP_BOOTSTRAP",
		6: "ACTION_TYPE_STUDIO_BUILD_HOOK",
	}
	ActionType_value = map[string]int32{
		"ACTION_TYPE_UNSPECIFIED":            0,
		"ACTION_TYPE_CHANGECONTROL_CUSTOM":   1,
		"ACTION_TYPE_CHANGECONTROL_BUILT_IN": 2,
		"ACTION_TYPE_STUDIO_AUTOFILL":        3,
		"ACTION_TYPE_PACKAGING_INSTALL_HOOK": 4,
		"ACTION_TYPE_ZTP_BOOTSTRAP":          5,
		"ACTION_TYPE_STUDIO_BUILD_HOOK":      6,
	}
)

func (x ActionType) Enum() *ActionType {
	p := new(ActionType)
	*p = x
	return p
}

func (x ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_action_v1_action_proto_enumTypes[1].Descriptor()
}

func (ActionType) Type() protoreflect.EnumType {
	return &file_arista_action_v1_action_proto_enumTypes[1]
}

func (x ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionType.Descriptor instead.
func (ActionType) EnumDescriptor() ([]byte, []int) {
	return file_arista_action_v1_action_proto_rawDescGZIP(), []int{1}
}

// ActionAudit contains additional information for the Action state model.
type ActionAudit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// created_at records the time when the action was originally created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// created_by records the user who created the action.
	CreatedBy *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// last_modified_at records the time when the action was most recently modified.
	LastModifiedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_modified_at,json=lastModifiedAt,proto3" json:"last_modified_at,omitempty"`
	// last_modified_by records the user who most recently modified the action.
	LastModifiedBy *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=last_modified_by,json=lastModifiedBy,proto3" json:"last_modified_by,omitempty"`
	// from_package indicates that this action was created by a package, and can only be modified
	// by the packaging service.
	FromPackage *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=from_package,json=fromPackage,proto3" json:"from_package,omitempty"`
}

func (x *ActionAudit) Reset() {
	*x = ActionAudit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_action_v1_action_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionAudit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionAudit) ProtoMessage() {}

func (x *ActionAudit) ProtoReflect() protoreflect.Message {
	mi := &file_arista_action_v1_action_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionAudit.ProtoReflect.Descriptor instead.
func (*ActionAudit) Descriptor() ([]byte, []int) {
	return file_arista_action_v1_action_proto_rawDescGZIP(), []int{0}
}

func (x *ActionAudit) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ActionAudit) GetCreatedBy() *wrapperspb.StringValue {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *ActionAudit) GetLastModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastModifiedAt
	}
	return nil
}

func (x *ActionAudit) GetLastModifiedBy() *wrapperspb.StringValue {
	if x != nil {
		return x.LastModifiedBy
	}
	return nil
}

func (x *ActionAudit) GetFromPackage() *wrapperspb.StringValue {
	if x != nil {
		return x.FromPackage
	}
	return nil
}

// ActionKey is the model key of an action.
type ActionKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id uniquely identifies the action. Although chosen by the caller, it is recommended
	// to be a random UUID.
	Id *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ActionKey) Reset() {
	*x = ActionKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_action_v1_action_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionKey) ProtoMessage() {}

func (x *ActionKey) ProtoReflect() protoreflect.Message {
	mi := &file_arista_action_v1_action_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionKey.ProtoReflect.Descriptor instead.
func (*ActionKey) Descriptor() ([]byte, []int) {
	return file_arista_action_v1_action_proto_rawDescGZIP(), []int{1}
}

func (x *ActionKey) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

// ActionArgDefinition is the definition of an argument (static or dynamic).
type ActionArgDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// required indicates that this argument must always be set when calling the action.
	Required *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=required,proto3" json:"required,omitempty"`
	// default is the default value for this argument. If set to null, there is no default
	// value.
	Default *ActionArgValue `protobuf:"bytes,2,opt,name=default,proto3" json:"default,omitempty"`
	// description is a user-friendly description of the argument.
	Description *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// hidden can be set to true to indicate that the value of this argument can be set, but not
	// retrieved from this API.
	Hidden *wrapperspb.BoolValue `protobuf:"bytes,4,opt,name=hidden,proto3" json:"hidden,omitempty"`
}

func (x *ActionArgDefinition) Reset() {
	*x = ActionArgDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_action_v1_action_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionArgDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionArgDefinition) ProtoMessage() {}

func (x *ActionArgDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_arista_action_v1_action_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionArgDefinition.ProtoReflect.Descriptor instead.
func (*ActionArgDefinition) Descriptor() ([]byte, []int) {
	return file_arista_action_v1_action_proto_rawDescGZIP(), []int{2}
}

func (x *ActionArgDefinition) GetRequired() *wrapperspb.BoolValue {
	if x != nil {
		return x.Required
	}
	return nil
}

func (x *ActionArgDefinition) GetDefault() *ActionArgValue {
	if x != nil {
		return x.Default
	}
	return nil
}

func (x *ActionArgDefinition) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ActionArgDefinition) GetHidden() *wrapperspb.BoolValue {
	if x != nil {
		return x.Hidden
	}
	return nil
}

// ActionSchema is the schema of an action. Corresponds to the definition of multiple
// arguments.
type ActionSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values is a map of argument name to its defintion.
	Values map[string]*ActionArgDefinition `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ActionSchema) Reset() {
	*x = ActionSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_action_v1_action_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionSchema) ProtoMessage() {}

func (x *ActionSchema) ProtoReflect() protoreflect.Message {
	mi := &file_arista_action_v1_action_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionSchema.ProtoReflect.Descriptor instead.
func (*ActionSchema) Descriptor() ([]byte, []int) {
	return file_arista_action_v1_action_proto_rawDescGZIP(), []int{3}
}

func (x *ActionSchema) GetValues() map[string]*ActionArgDefinition {
	if x != nil {
		return x.Values
	}
	return nil
}

// ActionCore contains the core fields of an action.
type ActionCore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the user-friendly name of the action.
	Name *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// type is the specific type of the action.
	Type ActionType `protobuf:"varint,2,opt,name=type,proto3,enum=arista.action.v1.ActionType" json:"type,omitempty"`
	// description is a user-friendly description of the action.
	Description *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// static_args defines arguments which can be permanently changed for subsequent runs
	// of this action (set ActionArgConfig to accomplish that). The names of arguments in
	// static_args cannot also appear in dynamic_args.
	StaticArgs *ActionSchema `protobuf:"bytes,4,opt,name=static_args,json=staticArgs,proto3" json:"static_args,omitempty"`
	// dynamic_args defines arguments which are scoped to a specific run of the action.
	// The names of arguments in dynamic_args cannot also appear in static_args.
	DynamicArgs *ActionSchema `protobuf:"bytes,5,opt,name=dynamic_args,json=dynamicArgs,proto3" json:"dynamic_args,omitempty"`
}

func (x *ActionCore) Reset() {
	*x = ActionCore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_action_v1_action_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionCore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionCore) ProtoMessage() {}

func (x *ActionCore) ProtoReflect() protoreflect.Message {
	mi := &file_arista_action_v1_action_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionCore.ProtoReflect.Descriptor instead.
func (*ActionCore) Descriptor() ([]byte, []int) {
	return file_arista_action_v1_action_proto_rawDescGZIP(), []int{4}
}

func (x *ActionCore) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ActionCore) GetType() ActionType {
	if x != nil {
		return x.Type
	}
	return ActionType_ACTION_TYPE_UNSPECIFIED
}

func (x *ActionCore) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ActionCore) GetStaticArgs() *ActionSchema {
	if x != nil {
		return x.StaticArgs
	}
	return nil
}

func (x *ActionCore) GetDynamicArgs() *ActionSchema {
	if x != nil {
		return x.DynamicArgs
	}
	return nil
}

// Action is the state model of an action.
type Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key uniquely identifies the action.
	Key *ActionKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// core contains some common attributes (state/config) of the action.
	Core *ActionCore `protobuf:"bytes,2,opt,name=core,proto3" json:"core,omitempty"`
	// audit contains meta information about the action.
	Audit *ActionAudit `protobuf:"bytes,3,opt,name=audit,proto3" json:"audit,omitempty"`
	// language specifies the language of the action body, if applicable.
	Language ActionLanguage `protobuf:"varint,4,opt,name=language,proto3,enum=arista.action.v1.ActionLanguage" json:"language,omitempty"`
	// body contains the action code (script), if applicable.
	Body *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *Action) Reset() {
	*x = Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_action_v1_action_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_arista_action_v1_action_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_arista_action_v1_action_proto_rawDescGZIP(), []int{5}
}

func (x *Action) GetKey() *ActionKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Action) GetCore() *ActionCore {
	if x != nil {
		return x.Core
	}
	return nil
}

func (x *Action) GetAudit() *ActionAudit {
	if x != nil {
		return x.Audit
	}
	return nil
}

func (x *Action) GetLanguage() ActionLanguage {
	if x != nil {
		return x.Language
	}
	return ActionLanguage_ACTION_LANGUAGE_UNSPECIFIED
}

func (x *Action) GetBody() *wrapperspb.StringValue {
	if x != nil {
		return x.Body
	}
	return nil
}

// ActionConfig is the config of an action. Unimplemented for builtin actions
type ActionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key uniquely identifies the action.
	Key *ActionKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// core contains some common attributes (state/config) of the action.
	Core *ActionCore `protobuf:"bytes,2,opt,name=core,proto3" json:"core,omitempty"`
	// language specifies the language of the action body, if applicable.
	Language ActionLanguage `protobuf:"varint,3,opt,name=language,proto3,enum=arista.action.v1.ActionLanguage" json:"language,omitempty"`
	// body contains the action code (script), if applicable.
	Body *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *ActionConfig) Reset() {
	*x = ActionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_action_v1_action_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionConfig) ProtoMessage() {}

func (x *ActionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_arista_action_v1_action_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionConfig.ProtoReflect.Descriptor instead.
func (*ActionConfig) Descriptor() ([]byte, []int) {
	return file_arista_action_v1_action_proto_rawDescGZIP(), []int{6}
}

func (x *ActionConfig) GetKey() *ActionKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ActionConfig) GetCore() *ActionCore {
	if x != nil {
		return x.Core
	}
	return nil
}

func (x *ActionConfig) GetLanguage() ActionLanguage {
	if x != nil {
		return x.Language
	}
	return ActionLanguage_ACTION_LANGUAGE_UNSPECIFIED
}

func (x *ActionConfig) GetBody() *wrapperspb.StringValue {
	if x != nil {
		return x.Body
	}
	return nil
}

// ActionArgValue contains the value of one argument of an action.
type ActionArgValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value is the string value to set the argument for runtime.
	Value *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ActionArgValue) Reset() {
	*x = ActionArgValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_action_v1_action_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionArgValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionArgValue) ProtoMessage() {}

func (x *ActionArgValue) ProtoReflect() protoreflect.Message {
	mi := &file_arista_action_v1_action_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionArgValue.ProtoReflect.Descriptor instead.
func (*ActionArgValue) Descriptor() ([]byte, []int) {
	return file_arista_action_v1_action_proto_rawDescGZIP(), []int{7}
}

func (x *ActionArgValue) GetValue() *wrapperspb.StringValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// ActionArgValues contains the values of the arguments of an action.
type ActionArgValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values is a map of arg name to value.
	Values map[string]*ActionArgValue `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ActionArgValues) Reset() {
	*x = ActionArgValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_action_v1_action_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionArgValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionArgValues) ProtoMessage() {}

func (x *ActionArgValues) ProtoReflect() protoreflect.Message {
	mi := &file_arista_action_v1_action_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionArgValues.ProtoReflect.Descriptor instead.
func (*ActionArgValues) Descriptor() ([]byte, []int) {
	return file_arista_action_v1_action_proto_rawDescGZIP(), []int{8}
}

func (x *ActionArgValues) GetValues() map[string]*ActionArgValue {
	if x != nil {
		return x.Values
	}
	return nil
}

// ActionArgConfig is the model for the definition of static arguments
type ActionArgConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key uniquely identifies the action to which the arguments apply.
	Key *ActionKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// static_args contains the arguments that are to be applied to all subsequent runs
	// of the action. Argument names and values must adhere to the ActionSchema static_args.
	//
	// When retrieving values of the arguments that had been set, but which are defined as
	// `hidden` in ActionSchema static_args, fake hardcoded values are returned instead
	// of the real values.
	StaticArgs *ActionArgValues `protobuf:"bytes,2,opt,name=static_args,json=staticArgs,proto3" json:"static_args,omitempty"`
}

func (x *ActionArgConfig) Reset() {
	*x = ActionArgConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_action_v1_action_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionArgConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionArgConfig) ProtoMessage() {}

func (x *ActionArgConfig) ProtoReflect() protoreflect.Message {
	mi := &file_arista_action_v1_action_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionArgConfig.ProtoReflect.Descriptor instead.
func (*ActionArgConfig) Descriptor() ([]byte, []int) {
	return file_arista_action_v1_action_proto_rawDescGZIP(), []int{9}
}

func (x *ActionArgConfig) GetKey() *ActionKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ActionArgConfig) GetStaticArgs() *ActionArgValues {
	if x != nil {
		return x.StaticArgs
	}
	return nil
}

// ActionRunKey is the model key that can uniquely identify an action run.
type ActionRunKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// run_id uniquely identifies an action run
	RunId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
}

func (x *ActionRunKey) Reset() {
	*x = ActionRunKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_action_v1_action_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionRunKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionRunKey) ProtoMessage() {}

func (x *ActionRunKey) ProtoReflect() protoreflect.Message {
	mi := &file_arista_action_v1_action_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionRunKey.ProtoReflect.Descriptor instead.
func (*ActionRunKey) Descriptor() ([]byte, []int) {
	return file_arista_action_v1_action_proto_rawDescGZIP(), []int{10}
}

func (x *ActionRunKey) GetRunId() *wrapperspb.StringValue {
	if x != nil {
		return x.RunId
	}
	return nil
}

// ActionRunConfig is the configuration of a single execution of an action. Creating a record under
// a new key triggers a run. Attempting to set again an existing entry is an error.
type ActionRunConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key uniquely identifies the ActionRunConfig and the corresponding ActionRun.
	Key *ActionRunKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// action_id uniquely identifies the Action being run.
	ActionId *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
	// dynamic_args contains the values of dynamic arguments defined for the action.
	DynamicArgs *ActionArgValues `protobuf:"bytes,3,opt,name=dynamic_args,json=dynamicArgs,proto3" json:"dynamic_args,omitempty"`
}

func (x *ActionRunConfig) Reset() {
	*x = ActionRunConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_action_v1_action_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionRunConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionRunConfig) ProtoMessage() {}

func (x *ActionRunConfig) ProtoReflect() protoreflect.Message {
	mi := &file_arista_action_v1_action_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionRunConfig.ProtoReflect.Descriptor instead.
func (*ActionRunConfig) Descriptor() ([]byte, []int) {
	return file_arista_action_v1_action_proto_rawDescGZIP(), []int{11}
}

func (x *ActionRunConfig) GetKey() *ActionRunKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ActionRunConfig) GetActionId() *wrapperspb.StringValue {
	if x != nil {
		return x.ActionId
	}
	return nil
}

func (x *ActionRunConfig) GetDynamicArgs() *ActionArgValues {
	if x != nil {
		return x.DynamicArgs
	}
	return nil
}

// ActionRun is the state of a single run (single execution) of an action.
type ActionRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key uniquely identifies the ActionRun and the corresponding ActionRunConfig.
	Key *ActionRunKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// action_id uniquely identifies the Action being run.
	ActionId *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
	// created_at records the time when the action run has been requested.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// created_by records the user who requested the action execution.
	CreatedBy *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// finished_at records the time when the action finished running.
	FinishedAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=finished_at,json=finishedAt,proto3" json:"finished_at,omitempty"`
	// is_finished is true only when the action has finished running and the fields `code`,
	// `output`, `error`, and `finished_at` are assigned their final values.
	IsFinished *wrapperspb.BoolValue `protobuf:"bytes,9,opt,name=is_finished,json=isFinished,proto3" json:"is_finished,omitempty"`
	// code contains the exit code of the action.
	//
	// The `code` may be ignored if `error` is empty or nil.
	Code *wrapperspb.Int32Value `protobuf:"bytes,10,opt,name=code,proto3" json:"code,omitempty"`
	// output contains the output produced by the action, truncated to the first 100,000 bytes.
	Output *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=output,proto3" json:"output,omitempty"`
	// error contains a failure description for unsuccessful runs, either caused by the body
	// or by the execution environment.
	//
	// Often it is a python traceback which contains multiple newline characters.
	// Maximum size is 100,000 bytes.
	Error *wrapperspb.StringValue `protobuf:"bytes,12,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ActionRun) Reset() {
	*x = ActionRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_action_v1_action_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionRun) ProtoMessage() {}

func (x *ActionRun) ProtoReflect() protoreflect.Message {
	mi := &file_arista_action_v1_action_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionRun.ProtoReflect.Descriptor instead.
func (*ActionRun) Descriptor() ([]byte, []int) {
	return file_arista_action_v1_action_proto_rawDescGZIP(), []int{12}
}

func (x *ActionRun) GetKey() *ActionRunKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ActionRun) GetActionId() *wrapperspb.StringValue {
	if x != nil {
		return x.ActionId
	}
	return nil
}

func (x *ActionRun) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ActionRun) GetCreatedBy() *wrapperspb.StringValue {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *ActionRun) GetFinishedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FinishedAt
	}
	return nil
}

func (x *ActionRun) GetIsFinished() *wrapperspb.BoolValue {
	if x != nil {
		return x.IsFinished
	}
	return nil
}

func (x *ActionRun) GetCode() *wrapperspb.Int32Value {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *ActionRun) GetOutput() *wrapperspb.StringValue {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *ActionRun) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

var File_arista_action_v1_action_proto protoreflect.FileDescriptor

var file_arista_action_v1_action_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x10, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x1a, 0x14, 0x66, 0x6d, 0x70, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd4, 0x02, 0x0a, 0x0b, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x12, 0x44, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x46, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e,
	0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x12, 0x3f,
	0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x22,
	0x3f, 0x0a, 0x09, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x04, 0x80, 0x8e, 0x19, 0x01,
	0x22, 0xfd, 0x01, 0x0a, 0x13, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x12, 0x3a, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x06,
	0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x22, 0xb4, 0x01, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x12, 0x42, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x60, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x72, 0x67, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb4, 0x02, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0b, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x41, 0x72, 0x67, 0x73, 0x12, 0x41, 0x0a, 0x0c, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x52, 0x0b, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x41, 0x72, 0x67, 0x73, 0x22, 0x96,
	0x02, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x04, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x72, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x74, 0x12,
	0x3c, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x3a,
	0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72, 0x6f, 0x22, 0xe7, 0x01, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x04, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x72, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72,
	0x77, 0x22, 0x44, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x72, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x1a, 0x5b, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x8c, 0x01, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x42, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x61, 0x72, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x72, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x41, 0x72, 0x67, 0x73, 0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72, 0x77, 0x22, 0x49,
	0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x33,
	0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x72, 0x75,
	0x6e, 0x49, 0x64, 0x3a, 0x04, 0x80, 0x8e, 0x19, 0x01, 0x22, 0xcc, 0x01, 0x0a, 0x0f, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x39, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0c, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x52, 0x0b, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x41, 0x72, 0x67, 0x73,
	0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72, 0x77, 0x22, 0x9f, 0x04, 0x0a, 0x09, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x12, 0x30, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e,
	0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x3b, 0x0a, 0x0b, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x32, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72, 0x6f, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a, 0x04,
	0x08, 0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x2a, 0x92, 0x01, 0x0a, 0x0e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a,
	0x1b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20,
	0x0a, 0x18, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47,
	0x45, 0x5f, 0x50, 0x59, 0x54, 0x48, 0x4f, 0x4e, 0x5f, 0x32, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x01,
	0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x41, 0x4e, 0x47, 0x55,
	0x41, 0x47, 0x45, 0x5f, 0x50, 0x59, 0x54, 0x48, 0x4f, 0x4e, 0x5f, 0x33, 0x10, 0x02, 0x12, 0x1f,
	0x0a, 0x1b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47,
	0x45, 0x5f, 0x47, 0x4f, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x03, 0x2a,
	0x82, 0x02, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b,
	0x0a, 0x17, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10,
	0x01, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x42,
	0x55, 0x49, 0x4c, 0x54, 0x5f, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x55, 0x44, 0x49, 0x4f, 0x5f,
	0x41, 0x55, 0x54, 0x4f, 0x46, 0x49, 0x4c, 0x4c, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47,
	0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x5f, 0x48, 0x4f, 0x4f, 0x4b,
	0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x5a, 0x54, 0x50, 0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x53, 0x54, 0x52, 0x41, 0x50, 0x10,
	0x05, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x54, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x48, 0x4f,
	0x4f, 0x4b, 0x10, 0x06, 0x42, 0x46, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x6f,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x3b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_arista_action_v1_action_proto_rawDescOnce sync.Once
	file_arista_action_v1_action_proto_rawDescData = file_arista_action_v1_action_proto_rawDesc
)

func file_arista_action_v1_action_proto_rawDescGZIP() []byte {
	file_arista_action_v1_action_proto_rawDescOnce.Do(func() {
		file_arista_action_v1_action_proto_rawDescData = protoimpl.X.CompressGZIP(file_arista_action_v1_action_proto_rawDescData)
	})
	return file_arista_action_v1_action_proto_rawDescData
}

var file_arista_action_v1_action_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_arista_action_v1_action_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_arista_action_v1_action_proto_goTypes = []interface{}{
	(ActionLanguage)(0),            // 0: arista.action.v1.ActionLanguage
	(ActionType)(0),                // 1: arista.action.v1.ActionType
	(*ActionAudit)(nil),            // 2: arista.action.v1.ActionAudit
	(*ActionKey)(nil),              // 3: arista.action.v1.ActionKey
	(*ActionArgDefinition)(nil),    // 4: arista.action.v1.ActionArgDefinition
	(*ActionSchema)(nil),           // 5: arista.action.v1.ActionSchema
	(*ActionCore)(nil),             // 6: arista.action.v1.ActionCore
	(*Action)(nil),                 // 7: arista.action.v1.Action
	(*ActionConfig)(nil),           // 8: arista.action.v1.ActionConfig
	(*ActionArgValue)(nil),         // 9: arista.action.v1.ActionArgValue
	(*ActionArgValues)(nil),        // 10: arista.action.v1.ActionArgValues
	(*ActionArgConfig)(nil),        // 11: arista.action.v1.ActionArgConfig
	(*ActionRunKey)(nil),           // 12: arista.action.v1.ActionRunKey
	(*ActionRunConfig)(nil),        // 13: arista.action.v1.ActionRunConfig
	(*ActionRun)(nil),              // 14: arista.action.v1.ActionRun
	nil,                            // 15: arista.action.v1.ActionSchema.ValuesEntry
	nil,                            // 16: arista.action.v1.ActionArgValues.ValuesEntry
	(*timestamppb.Timestamp)(nil),  // 17: google.protobuf.Timestamp
	(*wrapperspb.StringValue)(nil), // 18: google.protobuf.StringValue
	(*wrapperspb.BoolValue)(nil),   // 19: google.protobuf.BoolValue
	(*wrapperspb.Int32Value)(nil),  // 20: google.protobuf.Int32Value
}
var file_arista_action_v1_action_proto_depIdxs = []int32{
	17, // 0: arista.action.v1.ActionAudit.created_at:type_name -> google.protobuf.Timestamp
	18, // 1: arista.action.v1.ActionAudit.created_by:type_name -> google.protobuf.StringValue
	17, // 2: arista.action.v1.ActionAudit.last_modified_at:type_name -> google.protobuf.Timestamp
	18, // 3: arista.action.v1.ActionAudit.last_modified_by:type_name -> google.protobuf.StringValue
	18, // 4: arista.action.v1.ActionAudit.from_package:type_name -> google.protobuf.StringValue
	18, // 5: arista.action.v1.ActionKey.id:type_name -> google.protobuf.StringValue
	19, // 6: arista.action.v1.ActionArgDefinition.required:type_name -> google.protobuf.BoolValue
	9,  // 7: arista.action.v1.ActionArgDefinition.default:type_name -> arista.action.v1.ActionArgValue
	18, // 8: arista.action.v1.ActionArgDefinition.description:type_name -> google.protobuf.StringValue
	19, // 9: arista.action.v1.ActionArgDefinition.hidden:type_name -> google.protobuf.BoolValue
	15, // 10: arista.action.v1.ActionSchema.values:type_name -> arista.action.v1.ActionSchema.ValuesEntry
	18, // 11: arista.action.v1.ActionCore.name:type_name -> google.protobuf.StringValue
	1,  // 12: arista.action.v1.ActionCore.type:type_name -> arista.action.v1.ActionType
	18, // 13: arista.action.v1.ActionCore.description:type_name -> google.protobuf.StringValue
	5,  // 14: arista.action.v1.ActionCore.static_args:type_name -> arista.action.v1.ActionSchema
	5,  // 15: arista.action.v1.ActionCore.dynamic_args:type_name -> arista.action.v1.ActionSchema
	3,  // 16: arista.action.v1.Action.key:type_name -> arista.action.v1.ActionKey
	6,  // 17: arista.action.v1.Action.core:type_name -> arista.action.v1.ActionCore
	2,  // 18: arista.action.v1.Action.audit:type_name -> arista.action.v1.ActionAudit
	0,  // 19: arista.action.v1.Action.language:type_name -> arista.action.v1.ActionLanguage
	18, // 20: arista.action.v1.Action.body:type_name -> google.protobuf.StringValue
	3,  // 21: arista.action.v1.ActionConfig.key:type_name -> arista.action.v1.ActionKey
	6,  // 22: arista.action.v1.ActionConfig.core:type_name -> arista.action.v1.ActionCore
	0,  // 23: arista.action.v1.ActionConfig.language:type_name -> arista.action.v1.ActionLanguage
	18, // 24: arista.action.v1.ActionConfig.body:type_name -> google.protobuf.StringValue
	18, // 25: arista.action.v1.ActionArgValue.value:type_name -> google.protobuf.StringValue
	16, // 26: arista.action.v1.ActionArgValues.values:type_name -> arista.action.v1.ActionArgValues.ValuesEntry
	3,  // 27: arista.action.v1.ActionArgConfig.key:type_name -> arista.action.v1.ActionKey
	10, // 28: arista.action.v1.ActionArgConfig.static_args:type_name -> arista.action.v1.ActionArgValues
	18, // 29: arista.action.v1.ActionRunKey.run_id:type_name -> google.protobuf.StringValue
	12, // 30: arista.action.v1.ActionRunConfig.key:type_name -> arista.action.v1.ActionRunKey
	18, // 31: arista.action.v1.ActionRunConfig.action_id:type_name -> google.protobuf.StringValue
	10, // 32: arista.action.v1.ActionRunConfig.dynamic_args:type_name -> arista.action.v1.ActionArgValues
	12, // 33: arista.action.v1.ActionRun.key:type_name -> arista.action.v1.ActionRunKey
	18, // 34: arista.action.v1.ActionRun.action_id:type_name -> google.protobuf.StringValue
	17, // 35: arista.action.v1.ActionRun.created_at:type_name -> google.protobuf.Timestamp
	18, // 36: arista.action.v1.ActionRun.created_by:type_name -> google.protobuf.StringValue
	17, // 37: arista.action.v1.ActionRun.finished_at:type_name -> google.protobuf.Timestamp
	19, // 38: arista.action.v1.ActionRun.is_finished:type_name -> google.protobuf.BoolValue
	20, // 39: arista.action.v1.ActionRun.code:type_name -> google.protobuf.Int32Value
	18, // 40: arista.action.v1.ActionRun.output:type_name -> google.protobuf.StringValue
	18, // 41: arista.action.v1.ActionRun.error:type_name -> google.protobuf.StringValue
	4,  // 42: arista.action.v1.ActionSchema.ValuesEntry.value:type_name -> arista.action.v1.ActionArgDefinition
	9,  // 43: arista.action.v1.ActionArgValues.ValuesEntry.value:type_name -> arista.action.v1.ActionArgValue
	44, // [44:44] is the sub-list for method output_type
	44, // [44:44] is the sub-list for method input_type
	44, // [44:44] is the sub-list for extension type_name
	44, // [44:44] is the sub-list for extension extendee
	0,  // [0:44] is the sub-list for field type_name
}

func init() { file_arista_action_v1_action_proto_init() }
func file_arista_action_v1_action_proto_init() {
	if File_arista_action_v1_action_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_arista_action_v1_action_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionAudit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_action_v1_action_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_action_v1_action_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionArgDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_action_v1_action_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_action_v1_action_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionCore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_action_v1_action_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_action_v1_action_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_action_v1_action_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionArgValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_action_v1_action_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionArgValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_action_v1_action_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionArgConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_action_v1_action_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionRunKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_action_v1_action_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionRunConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_action_v1_action_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_arista_action_v1_action_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_arista_action_v1_action_proto_goTypes,
		DependencyIndexes: file_arista_action_v1_action_proto_depIdxs,
		EnumInfos:         file_arista_action_v1_action_proto_enumTypes,
		MessageInfos:      file_arista_action_v1_action_proto_msgTypes,
	}.Build()
	File_arista_action_v1_action_proto = out.File
	file_arista_action_v1_action_proto_rawDesc = nil
	file_arista_action_v1_action_proto_goTypes = nil
	file_arista_action_v1_action_proto_depIdxs = nil
}
