// Copyright (c) 2024 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

//
// Code generated by boomtown. DO NOT EDIT.
//

package imagestatus

// HasKey returns whether the given Summary has a key provided in the model.
func (s *Summary) HasKey() bool {
	return s.GetKey() != nil
}

// HasKey returns whether the given SummaryRequest has a key provided in the request.
func (s *SummaryRequest) HasKey() bool {
	return s.GetKey() != nil
}

// PassesPartialEqFilter returns whether this DiffOp matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (d DiffOp) PassesPartialEqFilter(cmp DiffOp) bool {
	if cmp != DiffOp(0) {
		return d == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether this ErrorCode matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (e ErrorCode) PassesPartialEqFilter(cmp ErrorCode) bool {
	if cmp != ErrorCode(0) {
		return e == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether this ExtensionInstallStatus matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (e ExtensionInstallStatus) PassesPartialEqFilter(cmp ExtensionInstallStatus) bool {
	if cmp != ExtensionInstallStatus(0) {
		return e == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether this SoftwareComplianceCode matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (s SoftwareComplianceCode) PassesPartialEqFilter(cmp SoftwareComplianceCode) bool {
	if cmp != SoftwareComplianceCode(0) {
		return s == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether this WarningCode matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (w WarningCode) PassesPartialEqFilter(cmp WarningCode) bool {
	if cmp != WarningCode(0) {
		return w == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether the ComplianceStatus matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (c *ComplianceStatus) PassesPartialEqFilter(cmp *ComplianceStatus) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if c == nil {
		return false
	}
	if !c.SoftwareImageComplianceCode.PassesPartialEqFilter(cmp.SoftwareImageComplianceCode) {
		return false
	}
	if !c.TerminattrComplianceCode.PassesPartialEqFilter(cmp.TerminattrComplianceCode) {
		return false
	}
	if !c.ExtensionsComplianceCode.PassesPartialEqFilter(cmp.ExtensionsComplianceCode) {
		return false
	}

	return true
}

// PassesPartialEqFilter returns whether the ComplianceStatusBySup matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (c *ComplianceStatusBySup) PassesPartialEqFilter(cmp *ComplianceStatusBySup) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if c == nil {
		return false
	}
	if len(cmp.Values) > len(c.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := c.Values[k]
		if !exists || !self.PassesPartialEqFilter(filt) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the Extension matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (e *Extension) PassesPartialEqFilter(cmp *Extension) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if e == nil {
		return false
	}

	if cmp.Name != nil {
		if e.Name == nil {
			return false
		}
		if e.Name.Value != cmp.Name.Value {
			return false
		}
	}

	if cmp.Version != nil {
		if e.Version == nil {
			return false
		}
		if e.Version.Value != cmp.Version.Value {
			return false
		}
	}

	if cmp.RebootRequired != nil {
		if e.RebootRequired == nil {
			return false
		}
		if e.RebootRequired.Value != cmp.RebootRequired.Value {
			return false
		}
	}

	if cmp.Present != nil {
		if e.Present == nil {
			return false
		}
		if e.Present.Value != cmp.Present.Value {
			return false
		}
	}
	if !e.Installed.PassesPartialEqFilter(cmp.Installed) {
		return false
	}

	if cmp.StatusDetail != nil {
		if e.StatusDetail == nil {
			return false
		}
		if e.StatusDetail.Value != cmp.StatusDetail.Value {
			return false
		}
	}

	if cmp.IsEmbedded != nil {
		if e.IsEmbedded == nil {
			return false
		}
		if e.IsEmbedded.Value != cmp.IsEmbedded.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the ExtensionDiff matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (e *ExtensionDiff) PassesPartialEqFilter(cmp *ExtensionDiff) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if e == nil {
		return false
	}
	if !e.Code.PassesPartialEqFilter(cmp.Code) {
		return false
	}
	if !e.A.PassesPartialEqFilter(cmp.A) {
		return false
	}
	if !e.B.PassesPartialEqFilter(cmp.B) {
		return false
	}

	return true
}

// PassesPartialEqFilter returns whether the ExtensionDiffs matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (e *ExtensionDiffs) PassesPartialEqFilter(cmp *ExtensionDiffs) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if e == nil {
		return false
	}
	if len(e.Values) != len(cmp.Values) {
		return false
	}
	for i, f := range e.Values {
		if !f.PassesPartialEqFilter(cmp.Values[i]) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the ExtensionDiffsBySup matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (e *ExtensionDiffsBySup) PassesPartialEqFilter(cmp *ExtensionDiffsBySup) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if e == nil {
		return false
	}
	if len(cmp.Values) > len(e.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := e.Values[k]
		if !exists || !self.PassesPartialEqFilter(filt) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the Extensions matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (e *Extensions) PassesPartialEqFilter(cmp *Extensions) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if e == nil {
		return false
	}
	if len(e.Values) != len(cmp.Values) {
		return false
	}
	for i, f := range e.Values {
		if !f.PassesPartialEqFilter(cmp.Values[i]) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the ImageError matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (i *ImageError) PassesPartialEqFilter(cmp *ImageError) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if i == nil {
		return false
	}

	if cmp.Sku != nil {
		if i.Sku == nil {
			return false
		}
		if i.Sku.Value != cmp.Sku.Value {
			return false
		}
	}
	if !i.ErrorCode.PassesPartialEqFilter(cmp.ErrorCode) {
		return false
	}

	if cmp.ErrorMsg != nil {
		if i.ErrorMsg == nil {
			return false
		}
		if i.ErrorMsg.Value != cmp.ErrorMsg.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the ImageErrors matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (i *ImageErrors) PassesPartialEqFilter(cmp *ImageErrors) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if i == nil {
		return false
	}
	if len(i.Values) != len(cmp.Values) {
		return false
	}
	for i, f := range i.Values {
		if !f.PassesPartialEqFilter(cmp.Values[i]) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the ImageMetadata matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (i *ImageMetadata) PassesPartialEqFilter(cmp *ImageMetadata) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if i == nil {
		return false
	}

	if cmp.Version != nil {
		if i.Version == nil {
			return false
		}
		if i.Version.Value != cmp.Version.Value {
			return false
		}
	}

	if cmp.Release != nil {
		if i.Release == nil {
			return false
		}
		if i.Release.Value != cmp.Release.Value {
			return false
		}
	}

	if cmp.Flavor != nil {
		if i.Flavor == nil {
			return false
		}
		if i.Flavor.Value != cmp.Flavor.Value {
			return false
		}
	}

	if cmp.Variant != nil {
		if i.Variant == nil {
			return false
		}
		if i.Variant.Value != cmp.Variant.Value {
			return false
		}
	}

	if cmp.Arch != nil {
		if i.Arch == nil {
			return false
		}
		if i.Arch.Value != cmp.Arch.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the ImageSummary matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (i *ImageSummary) PassesPartialEqFilter(cmp *ImageSummary) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if i == nil {
		return false
	}

	if cmp.Sku != nil {
		if i.Sku == nil {
			return false
		}
		if i.Sku.Value != cmp.Sku.Value {
			return false
		}
	}

	if cmp.RunningImageUpdateTime != nil {
		if cmp.RunningImageUpdateTime.Seconds != 0 {
			if i.RunningImageUpdateTime.Seconds != cmp.RunningImageUpdateTime.Seconds {
				return false
			}
		}
		if cmp.RunningImageUpdateTime.Nanos != 0 {
			if i.RunningImageUpdateTime.Nanos != cmp.RunningImageUpdateTime.Nanos {
				return false
			}
		}
	}

	if cmp.DesignedImageUpdateTime != nil {
		if cmp.DesignedImageUpdateTime.Seconds != 0 {
			if i.DesignedImageUpdateTime.Seconds != cmp.DesignedImageUpdateTime.Seconds {
				return false
			}
		}
		if cmp.DesignedImageUpdateTime.Nanos != 0 {
			if i.DesignedImageUpdateTime.Nanos != cmp.DesignedImageUpdateTime.Nanos {
				return false
			}
		}
	}

	if cmp.DualSup != nil {
		if i.DualSup == nil {
			return false
		}
		if i.DualSup.Value != cmp.DualSup.Value {
			return false
		}
	}

	if cmp.ActiveSlot != nil {
		if i.ActiveSlot == nil {
			return false
		}
		if i.ActiveSlot.Value != cmp.ActiveSlot.Value {
			return false
		}
	}

	if cmp.StandbySlot != nil {
		if i.StandbySlot == nil {
			return false
		}
		if i.StandbySlot.Value != cmp.StandbySlot.Value {
			return false
		}
	}
	if !i.SoftwareImageDiff.PassesPartialEqFilter(cmp.SoftwareImageDiff) {
		return false
	}
	if !i.TerminattrDiff.PassesPartialEqFilter(cmp.TerminattrDiff) {
		return false
	}
	if !i.ExtensionsDiff.PassesPartialEqFilter(cmp.ExtensionsDiff) {
		return false
	}
	if !i.ComplianceStatus.PassesPartialEqFilter(cmp.ComplianceStatus) {
		return false
	}
	if !i.Compliance.PassesPartialEqFilter(cmp.Compliance) {
		return false
	}
	if !i.RebootRequired.PassesPartialEqFilter(cmp.RebootRequired) {
		return false
	}

	if cmp.Digest != nil {
		if i.Digest == nil {
			return false
		}
		if i.Digest.Value != cmp.Digest.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the ImageWarning matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (i *ImageWarning) PassesPartialEqFilter(cmp *ImageWarning) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if i == nil {
		return false
	}

	if cmp.Sku != nil {
		if i.Sku == nil {
			return false
		}
		if i.Sku.Value != cmp.Sku.Value {
			return false
		}
	}
	if !i.WarningCode.PassesPartialEqFilter(cmp.WarningCode) {
		return false
	}

	if cmp.WarningMsg != nil {
		if i.WarningMsg == nil {
			return false
		}
		if i.WarningMsg.Value != cmp.WarningMsg.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the ImageWarnings matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (i *ImageWarnings) PassesPartialEqFilter(cmp *ImageWarnings) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if i == nil {
		return false
	}
	if len(i.Values) != len(cmp.Values) {
		return false
	}
	for i, f := range i.Values {
		if !f.PassesPartialEqFilter(cmp.Values[i]) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the RebootRequired matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (r *RebootRequired) PassesPartialEqFilter(cmp *RebootRequired) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if r == nil {
		return false
	}

	if cmp.SoftwareImageRebootRequired != nil {
		if r.SoftwareImageRebootRequired == nil {
			return false
		}
		if r.SoftwareImageRebootRequired.Value != cmp.SoftwareImageRebootRequired.Value {
			return false
		}
	}

	if cmp.TerminattrRebootRequired != nil {
		if r.TerminattrRebootRequired == nil {
			return false
		}
		if r.TerminattrRebootRequired.Value != cmp.TerminattrRebootRequired.Value {
			return false
		}
	}

	if cmp.ExtensionRebootRequired != nil {
		if r.ExtensionRebootRequired == nil {
			return false
		}
		if r.ExtensionRebootRequired.Value != cmp.ExtensionRebootRequired.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the SoftwareImage matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (s *SoftwareImage) PassesPartialEqFilter(cmp *SoftwareImage) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if s == nil {
		return false
	}

	if cmp.Name != nil {
		if s.Name == nil {
			return false
		}
		if s.Name.Value != cmp.Name.Value {
			return false
		}
	}

	if cmp.Version != nil {
		if s.Version == nil {
			return false
		}
		if s.Version.Value != cmp.Version.Value {
			return false
		}
	}
	if !s.Metadata.PassesPartialEqFilter(cmp.Metadata) {
		return false
	}

	return true
}

// PassesPartialEqFilter returns whether the SoftwareImageDiff matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (s *SoftwareImageDiff) PassesPartialEqFilter(cmp *SoftwareImageDiff) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if s == nil {
		return false
	}
	if !s.Code.PassesPartialEqFilter(cmp.Code) {
		return false
	}
	if !s.A.PassesPartialEqFilter(cmp.A) {
		return false
	}
	if !s.B.PassesPartialEqFilter(cmp.B) {
		return false
	}

	return true
}

// PassesPartialEqFilter returns whether the SoftwareImageDiffsBySup matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (s *SoftwareImageDiffsBySup) PassesPartialEqFilter(cmp *SoftwareImageDiffsBySup) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if s == nil {
		return false
	}
	if len(cmp.Values) > len(s.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := s.Values[k]
		if !exists || !self.PassesPartialEqFilter(filt) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the TerminAttrDiffsBySup matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (t *TerminAttrDiffsBySup) PassesPartialEqFilter(cmp *TerminAttrDiffsBySup) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if t == nil {
		return false
	}
	if len(cmp.Values) > len(t.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := t.Values[k]
		if !exists || !self.PassesPartialEqFilter(filt) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the SummaryKey matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (s *SummaryKey) PassesPartialEqFilter(cmp *SummaryKey) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if s == nil {
		return false
	}

	if cmp.DeviceId != nil {
		if s.DeviceId == nil {
			return false
		}
		if s.DeviceId.Value != cmp.DeviceId.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the Summary matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (s *Summary) PassesPartialEqFilter(cmp *Summary) bool {
	// if the resource is nil, there is nothing to send to the client
	if s == nil {
		return false
	}

	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if !s.Key.PassesPartialEqFilter(cmp.Key) {
		return false
	}

	if !s.Summary.PassesPartialEqFilter(cmp.Summary) {
		return false
	}

	if !s.Errors.PassesPartialEqFilter(cmp.Errors) {
		return false
	}

	if !s.Warnings.PassesPartialEqFilter(cmp.Warnings) {
		return false
	}

	return true
}

// MatchesAnyPartialEqFilter returns whether the receiver matches any filters in the given set.
func (s *Summary) MatchesAnyPartialEqFilter(filters []*Summary) bool {
	if len(filters) == 0 {
		return true
	}

	for _, filt := range filters {
		if s.PassesPartialEqFilter(filt) {
			return true
		}
	}

	return false
}
