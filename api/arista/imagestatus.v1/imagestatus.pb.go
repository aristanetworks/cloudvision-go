// Copyright (c) 2023 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.7
// source: arista/imagestatus.v1/imagestatus.proto

package imagestatus

import (
	_ "github.com/aristanetworks/cloudvision-go/api/fmp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ExtensionInstallStatus indicates whether an extension is installed, not installed
// or force installed.
type ExtensionInstallStatus int32

const (
	// EXTENSION_INSTALL_STATUS_UNSPECIFIED indicates extensions install status is unspecified.
	ExtensionInstallStatus_EXTENSION_INSTALL_STATUS_UNSPECIFIED ExtensionInstallStatus = 0
	// EXTENSION_INSTALL_STATUS_NOT_INSTALLED indicates extension is not installed on the device.
	ExtensionInstallStatus_EXTENSION_INSTALL_STATUS_NOT_INSTALLED ExtensionInstallStatus = 1
	// EXTENSION_INSTALL_STATUS_INSTALLED indicates extension is installed on the device.
	ExtensionInstallStatus_EXTENSION_INSTALL_STATUS_INSTALLED ExtensionInstallStatus = 2
	// EXTENSION_INSTALL_STATUS_FORCE_INSTALLED indicates extension is force installed on
	// device.
	ExtensionInstallStatus_EXTENSION_INSTALL_STATUS_FORCE_INSTALLED ExtensionInstallStatus = 3
)

// Enum value maps for ExtensionInstallStatus.
var (
	ExtensionInstallStatus_name = map[int32]string{
		0: "EXTENSION_INSTALL_STATUS_UNSPECIFIED",
		1: "EXTENSION_INSTALL_STATUS_NOT_INSTALLED",
		2: "EXTENSION_INSTALL_STATUS_INSTALLED",
		3: "EXTENSION_INSTALL_STATUS_FORCE_INSTALLED",
	}
	ExtensionInstallStatus_value = map[string]int32{
		"EXTENSION_INSTALL_STATUS_UNSPECIFIED":     0,
		"EXTENSION_INSTALL_STATUS_NOT_INSTALLED":   1,
		"EXTENSION_INSTALL_STATUS_INSTALLED":       2,
		"EXTENSION_INSTALL_STATUS_FORCE_INSTALLED": 3,
	}
)

func (x ExtensionInstallStatus) Enum() *ExtensionInstallStatus {
	p := new(ExtensionInstallStatus)
	*p = x
	return p
}

func (x ExtensionInstallStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExtensionInstallStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_imagestatus_v1_imagestatus_proto_enumTypes[0].Descriptor()
}

func (ExtensionInstallStatus) Type() protoreflect.EnumType {
	return &file_arista_imagestatus_v1_imagestatus_proto_enumTypes[0]
}

func (x ExtensionInstallStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExtensionInstallStatus.Descriptor instead.
func (ExtensionInstallStatus) EnumDescriptor() ([]byte, []int) {
	return file_arista_imagestatus_v1_imagestatus_proto_rawDescGZIP(), []int{0}
}

// SoftwareComplianceCode indicates possible compliance status.
type SoftwareComplianceCode int32

const (
	// SOFTWARE_COMPLIANCE_CODE_UNSPECIFIED indicates compliance code is unspecified.
	SoftwareComplianceCode_SOFTWARE_COMPLIANCE_CODE_UNSPECIFIED SoftwareComplianceCode = 0
	// SOFTWARE_COMPLIANCE_CODE_IN_SYNC indicates designed and running images/extensions
	// are identical.
	SoftwareComplianceCode_SOFTWARE_COMPLIANCE_CODE_IN_SYNC SoftwareComplianceCode = 1
	// SOFTWARE_COMPLIANCE_CODE_OUT_OF_SYNC indicates designed and running images/extensions
	// are not identical.
	SoftwareComplianceCode_SOFTWARE_COMPLIANCE_CODE_OUT_OF_SYNC SoftwareComplianceCode = 2
)

// Enum value maps for SoftwareComplianceCode.
var (
	SoftwareComplianceCode_name = map[int32]string{
		0: "SOFTWARE_COMPLIANCE_CODE_UNSPECIFIED",
		1: "SOFTWARE_COMPLIANCE_CODE_IN_SYNC",
		2: "SOFTWARE_COMPLIANCE_CODE_OUT_OF_SYNC",
	}
	SoftwareComplianceCode_value = map[string]int32{
		"SOFTWARE_COMPLIANCE_CODE_UNSPECIFIED": 0,
		"SOFTWARE_COMPLIANCE_CODE_IN_SYNC":     1,
		"SOFTWARE_COMPLIANCE_CODE_OUT_OF_SYNC": 2,
	}
)

func (x SoftwareComplianceCode) Enum() *SoftwareComplianceCode {
	p := new(SoftwareComplianceCode)
	*p = x
	return p
}

func (x SoftwareComplianceCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SoftwareComplianceCode) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_imagestatus_v1_imagestatus_proto_enumTypes[1].Descriptor()
}

func (SoftwareComplianceCode) Type() protoreflect.EnumType {
	return &file_arista_imagestatus_v1_imagestatus_proto_enumTypes[1]
}

func (x SoftwareComplianceCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SoftwareComplianceCode.Descriptor instead.
func (SoftwareComplianceCode) EnumDescriptor() ([]byte, []int) {
	return file_arista_imagestatus_v1_imagestatus_proto_rawDescGZIP(), []int{1}
}

// DiffOp represents the operation performed to get from one side of the diff
// to the other.
type DiffOp int32

const (
	// DIFF_OP_UNSPECIFIED indicates op code is unspecified.
	DiffOp_DIFF_OP_UNSPECIFIED DiffOp = 0
	// DIFF_OP_NOP indicates no change.
	DiffOp_DIFF_OP_NOP DiffOp = 1
	// DIFF_OP_ADD is an addition of a software.
	DiffOp_DIFF_OP_ADD DiffOp = 2
	// DIFF_OP_DELETE is deletion of a software.
	DiffOp_DIFF_OP_DELETE DiffOp = 3
	// DIFF_OP_CHANGE is an update to the software.
	DiffOp_DIFF_OP_CHANGE DiffOp = 4
)

// Enum value maps for DiffOp.
var (
	DiffOp_name = map[int32]string{
		0: "DIFF_OP_UNSPECIFIED",
		1: "DIFF_OP_NOP",
		2: "DIFF_OP_ADD",
		3: "DIFF_OP_DELETE",
		4: "DIFF_OP_CHANGE",
	}
	DiffOp_value = map[string]int32{
		"DIFF_OP_UNSPECIFIED": 0,
		"DIFF_OP_NOP":         1,
		"DIFF_OP_ADD":         2,
		"DIFF_OP_DELETE":      3,
		"DIFF_OP_CHANGE":      4,
	}
)

func (x DiffOp) Enum() *DiffOp {
	p := new(DiffOp)
	*p = x
	return p
}

func (x DiffOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiffOp) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_imagestatus_v1_imagestatus_proto_enumTypes[2].Descriptor()
}

func (DiffOp) Type() protoreflect.EnumType {
	return &file_arista_imagestatus_v1_imagestatus_proto_enumTypes[2]
}

func (x DiffOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiffOp.Descriptor instead.
func (DiffOp) EnumDescriptor() ([]byte, []int) {
	return file_arista_imagestatus_v1_imagestatus_proto_rawDescGZIP(), []int{2}
}

// ErrorCode indicates errors produced during image validations.
type ErrorCode int32

const (
	// ERROR_CODE_UNSPECIFIED indicates error code is unspecified.
	ErrorCode_ERROR_CODE_UNSPECIFIED ErrorCode = 0
	// ERROR_CODE_SUPPORT_NOT_INTRODUCED represents case where the given EOS version does
	// not support the SKU.
	ErrorCode_ERROR_CODE_SUPPORT_NOT_INTRODUCED ErrorCode = 1
	// ERROR_CODE_SUPPORT_REMOVED represents case where the given EOS version no longer
	// supports the SKU.
	ErrorCode_ERROR_CODE_SUPPORT_REMOVED ErrorCode = 2
	// ERROR_CODE_DEVICE_UNREACHABLE represents the case where the device
	// is unreachable during a compliance computation.
	ErrorCode_ERROR_CODE_DEVICE_UNREACHABLE ErrorCode = 3
	// ERROR_CODE_VALIDATION_FAILED represents case where the validations checks
	// failed.
	ErrorCode_ERROR_CODE_VALIDATION_FAILED ErrorCode = 4
	// ERROR_CODE_GET_PROPOSED_IMAGE_INFO_FAILED represents case where we are
	// unable to get proposed image information for a device.
	ErrorCode_ERROR_CODE_GET_PROPOSED_IMAGE_INFO_FAILED ErrorCode = 5
	// ERROR_CODE_GET_RUNNING_IMAGE_INFO_FROM_ACTIVE_SUPERVISOR_FAILED represents case where we
	// fail to get running image information from an active supervisor.
	//
	// Deprecated: Do not use.
	ErrorCode_ERROR_CODE_GET_RUNNING_IMAGE_INFO_FROM_ACTIVE_SUPERVISOR_FAILED ErrorCode = 6
	// ERROR_CODE_GET_RUNNING_IMAGE_INFO_FROM_PEER_SUPERVISOR_FAILED represents case when we
	// fail to get information from peer supervisor.
	//
	// Deprecated: Do not use.
	ErrorCode_ERROR_CODE_GET_RUNNING_IMAGE_INFO_FROM_PEER_SUPERVISOR_FAILED ErrorCode = 7
	// ERROR_CODE_EOS_TA_ARCHITECTURE_INCOMPATIBLE represents the case where EOS architecture and
	// TerminAttr architecture are incompatible.
	ErrorCode_ERROR_CODE_EOS_TA_ARCHITECTURE_INCOMPATIBLE ErrorCode = 8
	// ERROR_CODE_TA_CV_INCOMPATIBLE represents the case where TerminAttr is incompatible with
	// CloudVision; i.e., the TerminAttr version is below CloudVision's minimum supported version.
	ErrorCode_ERROR_CODE_TA_CV_INCOMPATIBLE ErrorCode = 9
	// ERROR_CODE_EOS_CV_INCOMPATIBLE represents the case where the EOS version is incompatible with
	// CloudVision; i.e., the EOS version is outside of CloudVision's supported range of versions.
	ErrorCode_ERROR_CODE_EOS_CV_INCOMPATIBLE ErrorCode = 10
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0:  "ERROR_CODE_UNSPECIFIED",
		1:  "ERROR_CODE_SUPPORT_NOT_INTRODUCED",
		2:  "ERROR_CODE_SUPPORT_REMOVED",
		3:  "ERROR_CODE_DEVICE_UNREACHABLE",
		4:  "ERROR_CODE_VALIDATION_FAILED",
		5:  "ERROR_CODE_GET_PROPOSED_IMAGE_INFO_FAILED",
		6:  "ERROR_CODE_GET_RUNNING_IMAGE_INFO_FROM_ACTIVE_SUPERVISOR_FAILED",
		7:  "ERROR_CODE_GET_RUNNING_IMAGE_INFO_FROM_PEER_SUPERVISOR_FAILED",
		8:  "ERROR_CODE_EOS_TA_ARCHITECTURE_INCOMPATIBLE",
		9:  "ERROR_CODE_TA_CV_INCOMPATIBLE",
		10: "ERROR_CODE_EOS_CV_INCOMPATIBLE",
	}
	ErrorCode_value = map[string]int32{
		"ERROR_CODE_UNSPECIFIED":                                          0,
		"ERROR_CODE_SUPPORT_NOT_INTRODUCED":                               1,
		"ERROR_CODE_SUPPORT_REMOVED":                                      2,
		"ERROR_CODE_DEVICE_UNREACHABLE":                                   3,
		"ERROR_CODE_VALIDATION_FAILED":                                    4,
		"ERROR_CODE_GET_PROPOSED_IMAGE_INFO_FAILED":                       5,
		"ERROR_CODE_GET_RUNNING_IMAGE_INFO_FROM_ACTIVE_SUPERVISOR_FAILED": 6,
		"ERROR_CODE_GET_RUNNING_IMAGE_INFO_FROM_PEER_SUPERVISOR_FAILED":   7,
		"ERROR_CODE_EOS_TA_ARCHITECTURE_INCOMPATIBLE":                     8,
		"ERROR_CODE_TA_CV_INCOMPATIBLE":                                   9,
		"ERROR_CODE_EOS_CV_INCOMPATIBLE":                                  10,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_imagestatus_v1_imagestatus_proto_enumTypes[3].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_arista_imagestatus_v1_imagestatus_proto_enumTypes[3]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_arista_imagestatus_v1_imagestatus_proto_rawDescGZIP(), []int{3}
}

// WarningCode indicates warnings produced during image validations.
type WarningCode int32

const (
	// WARNING_CODE_UNSPECIFIED indicates warning code is unspecified.
	WarningCode_WARNING_CODE_UNSPECIFIED WarningCode = 0
	// WARNING_CODE_NOT_APPLICABLE represents cases where EOS <-> SKU/TA compatibility
	// is not applicable for non physical switches like vEos.
	WarningCode_WARNING_CODE_NOT_APPLICABLE WarningCode = 1
	// WARNING_CODE_SKUINFO_UNAVAILABLE represents case where
	// information about certain skus is missing.
	WarningCode_WARNING_CODE_SKUINFO_UNAVAILABLE WarningCode = 2
	// WARNING_CODE_DEVICE_SKU_UNAVAILABLE represents unavailability of skus for an EOS Device.
	WarningCode_WARNING_CODE_DEVICE_SKU_UNAVAILABLE WarningCode = 3
	// WARNING_CODE_SWI_UNKNOWN represents cases where EOS version is not found in release database.
	WarningCode_WARNING_CODE_SWI_UNKNOWN WarningCode = 4
	// WARNING_CODE_TA_EOS_INCOMPATIBLE represents cases where TA and EOS are not compatible.
	// TA is lower than embedded TA in swi or given TA is unsupported by the EOS.
	WarningCode_WARNING_CODE_TA_EOS_INCOMPATIBLE WarningCode = 5
	// WARNING_CODE_TA_CV_INCOMPATIBLE represents cases where TA is incompatible with CV.
	// TA is lower than minimum supported TA on CV.
	// Deprecated - use ERROR_CODE_TA_CV_INCOMPATIBLE.
	//
	// Deprecated: Do not use.
	WarningCode_WARNING_CODE_TA_CV_INCOMPATIBLE WarningCode = 6
	// WARNING_CODE_EOS_CV_INCOMPATIBLE represents cases where EOS is no longer or not yet
	// supported by CV. Given EOS is outside range of CV's minimum and maximum EOS.
	// Deprecated - use ERROR_CODE_EOS_CV_INCOMPATIBLE.
	//
	// Deprecated: Do not use.
	WarningCode_WARNING_CODE_EOS_CV_INCOMPATIBLE WarningCode = 7
	// WARNING_CODE_EOS_ARCH_UNKNOWN represents cases where the specified architecture is
	// not valid for EOS.
	WarningCode_WARNING_CODE_EOS_ARCH_UNKNOWN WarningCode = 8
	// WARNING_CODE_TA_EMBEDDEDEXT_INCOMPATIBLE represents cases where TA extension is lower
	// in version than embedded TA in SWI.
	WarningCode_WARNING_CODE_TA_EMBEDDEDEXT_INCOMPATIBLE WarningCode = 9
	// WARNING_CODE_ARCH_INCOMPATIBLE represents cases where EOS arch and TA arch are
	// different. Deprecated.
	//
	// Deprecated: Do not use.
	WarningCode_WARNING_CODE_ARCH_INCOMPATIBLE WarningCode = 10
)

// Enum value maps for WarningCode.
var (
	WarningCode_name = map[int32]string{
		0:  "WARNING_CODE_UNSPECIFIED",
		1:  "WARNING_CODE_NOT_APPLICABLE",
		2:  "WARNING_CODE_SKUINFO_UNAVAILABLE",
		3:  "WARNING_CODE_DEVICE_SKU_UNAVAILABLE",
		4:  "WARNING_CODE_SWI_UNKNOWN",
		5:  "WARNING_CODE_TA_EOS_INCOMPATIBLE",
		6:  "WARNING_CODE_TA_CV_INCOMPATIBLE",
		7:  "WARNING_CODE_EOS_CV_INCOMPATIBLE",
		8:  "WARNING_CODE_EOS_ARCH_UNKNOWN",
		9:  "WARNING_CODE_TA_EMBEDDEDEXT_INCOMPATIBLE",
		10: "WARNING_CODE_ARCH_INCOMPATIBLE",
	}
	WarningCode_value = map[string]int32{
		"WARNING_CODE_UNSPECIFIED":                 0,
		"WARNING_CODE_NOT_APPLICABLE":              1,
		"WARNING_CODE_SKUINFO_UNAVAILABLE":         2,
		"WARNING_CODE_DEVICE_SKU_UNAVAILABLE":      3,
		"WARNING_CODE_SWI_UNKNOWN":                 4,
		"WARNING_CODE_TA_EOS_INCOMPATIBLE":         5,
		"WARNING_CODE_TA_CV_INCOMPATIBLE":          6,
		"WARNING_CODE_EOS_CV_INCOMPATIBLE":         7,
		"WARNING_CODE_EOS_ARCH_UNKNOWN":            8,
		"WARNING_CODE_TA_EMBEDDEDEXT_INCOMPATIBLE": 9,
		"WARNING_CODE_ARCH_INCOMPATIBLE":           10,
	}
)

func (x WarningCode) Enum() *WarningCode {
	p := new(WarningCode)
	*p = x
	return p
}

func (x WarningCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WarningCode) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_imagestatus_v1_imagestatus_proto_enumTypes[4].Descriptor()
}

func (WarningCode) Type() protoreflect.EnumType {
	return &file_arista_imagestatus_v1_imagestatus_proto_enumTypes[4]
}

func (x WarningCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WarningCode.Descriptor instead.
func (WarningCode) EnumDescriptor() ([]byte, []int) {
	return file_arista_imagestatus_v1_imagestatus_proto_rawDescGZIP(), []int{4}
}

// SoftwareImage provides information of the running/designed EOS image.
type SoftwareImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the EOS image.
	Name *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// version is the version of the EOS image.
	Version *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// metadata  is the metadata of EOS image.
	Metadata *ImageMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *SoftwareImage) Reset() {
	*x = SoftwareImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_imagestatus_v1_imagestatus_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoftwareImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoftwareImage) ProtoMessage() {}

func (x *SoftwareImage) ProtoReflect() protoreflect.Message {
	mi := &file_arista_imagestatus_v1_imagestatus_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoftwareImage.ProtoReflect.Descriptor instead.
func (*SoftwareImage) Descriptor() ([]byte, []int) {
	return file_arista_imagestatus_v1_imagestatus_proto_rawDescGZIP(), []int{0}
}

func (x *SoftwareImage) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *SoftwareImage) GetVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *SoftwareImage) GetMetadata() *ImageMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// ImageMetadata provides information regarding the software image.
type ImageMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// version is the version of the EOS image.
	Version *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// release is the release name of the EOS image.
	Release *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=release,proto3" json:"release,omitempty"`
	// flavor is the flavor information of the EOS image.
	// default flavor is DEFAULT. Other flavors can be DPE, 2GB, etc.
	Flavor *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=flavor,proto3" json:"flavor,omitempty"`
	// variant is the variant information of the EOS image.
	// possible values: INT or US.
	Variant *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=variant,proto3" json:"variant,omitempty"`
	// arch is the architecture of the EOS image.
	Arch *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=arch,proto3" json:"arch,omitempty"`
}

func (x *ImageMetadata) Reset() {
	*x = ImageMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_imagestatus_v1_imagestatus_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageMetadata) ProtoMessage() {}

func (x *ImageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_arista_imagestatus_v1_imagestatus_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageMetadata.ProtoReflect.Descriptor instead.
func (*ImageMetadata) Descriptor() ([]byte, []int) {
	return file_arista_imagestatus_v1_imagestatus_proto_rawDescGZIP(), []int{1}
}

func (x *ImageMetadata) GetVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *ImageMetadata) GetRelease() *wrapperspb.StringValue {
	if x != nil {
		return x.Release
	}
	return nil
}

func (x *ImageMetadata) GetFlavor() *wrapperspb.StringValue {
	if x != nil {
		return x.Flavor
	}
	return nil
}

func (x *ImageMetadata) GetVariant() *wrapperspb.StringValue {
	if x != nil {
		return x.Variant
	}
	return nil
}

func (x *ImageMetadata) GetArch() *wrapperspb.StringValue {
	if x != nil {
		return x.Arch
	}
	return nil
}

// Extension provides information of the running/designed extensions.
type Extension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the extension.
	Name *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// version is the version of the extension.
	Version *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// reboot_required indicates whether applying/deleting this extension
	// would result in a reboot.
	RebootRequired *wrapperspb.BoolValue `protobuf:"bytes,3,opt,name=reboot_required,json=rebootRequired,proto3" json:"reboot_required,omitempty"`
	// present indicates whether the extension is present in the device
	// or not.
	Present *wrapperspb.BoolValue `protobuf:"bytes,4,opt,name=present,proto3" json:"present,omitempty"`
	// installed indicates whether the extension is installed, not
	// installed or force installed.
	Installed ExtensionInstallStatus `protobuf:"varint,5,opt,name=installed,proto3,enum=arista.imagestatus.v1.ExtensionInstallStatus" json:"installed,omitempty"`
	// status_detail gives the details behind installation of the extension.
	StatusDetail *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`
	// is_embedded indicates whether the extension is embedded in the EOS swi
	// or not.
	IsEmbedded *wrapperspb.BoolValue `protobuf:"bytes,7,opt,name=is_embedded,json=isEmbedded,proto3" json:"is_embedded,omitempty"`
}

func (x *Extension) Reset() {
	*x = Extension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_imagestatus_v1_imagestatus_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Extension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Extension) ProtoMessage() {}

func (x *Extension) ProtoReflect() protoreflect.Message {
	mi := &file_arista_imagestatus_v1_imagestatus_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Extension.ProtoReflect.Descriptor instead.
func (*Extension) Descriptor() ([]byte, []int) {
	return file_arista_imagestatus_v1_imagestatus_proto_rawDescGZIP(), []int{2}
}

func (x *Extension) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Extension) GetVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *Extension) GetRebootRequired() *wrapperspb.BoolValue {
	if x != nil {
		return x.RebootRequired
	}
	return nil
}

func (x *Extension) GetPresent() *wrapperspb.BoolValue {
	if x != nil {
		return x.Present
	}
	return nil
}

func (x *Extension) GetInstalled() ExtensionInstallStatus {
	if x != nil {
		return x.Installed
	}
	return ExtensionInstallStatus_EXTENSION_INSTALL_STATUS_UNSPECIFIED
}

func (x *Extension) GetStatusDetail() *wrapperspb.StringValue {
	if x != nil {
		return x.StatusDetail
	}
	return nil
}

func (x *Extension) GetIsEmbedded() *wrapperspb.BoolValue {
	if x != nil {
		return x.IsEmbedded
	}
	return nil
}

// Extensions provides an ordered list of running/designed extensions.
type Extensions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values represents extension information.
	Values []*Extension `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *Extensions) Reset() {
	*x = Extensions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_imagestatus_v1_imagestatus_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Extensions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Extensions) ProtoMessage() {}

func (x *Extensions) ProtoReflect() protoreflect.Message {
	mi := &file_arista_imagestatus_v1_imagestatus_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Extensions.ProtoReflect.Descriptor instead.
func (*Extensions) Descriptor() ([]byte, []int) {
	return file_arista_imagestatus_v1_imagestatus_proto_rawDescGZIP(), []int{3}
}

func (x *Extensions) GetValues() []*Extension {
	if x != nil {
		return x.Values
	}
	return nil
}

// ComplianceStatus indicates compliance status for software image, terminattr
// and extensions.
type ComplianceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// software_image_compliance_code is the compliance code for images.
	SoftwareImageComplianceCode SoftwareComplianceCode `protobuf:"varint,1,opt,name=software_image_compliance_code,json=softwareImageComplianceCode,proto3,enum=arista.imagestatus.v1.SoftwareComplianceCode" json:"software_image_compliance_code,omitempty"`
	// terminattr_compliance_code is the compliance code for TerminAttr.
	TerminattrComplianceCode SoftwareComplianceCode `protobuf:"varint,2,opt,name=terminattr_compliance_code,json=terminattrComplianceCode,proto3,enum=arista.imagestatus.v1.SoftwareComplianceCode" json:"terminattr_compliance_code,omitempty"`
	// extensions_compliance_code is the compliance code for extensions.
	ExtensionsComplianceCode SoftwareComplianceCode `protobuf:"varint,3,opt,name=extensions_compliance_code,json=extensionsComplianceCode,proto3,enum=arista.imagestatus.v1.SoftwareComplianceCode" json:"extensions_compliance_code,omitempty"`
}

func (x *ComplianceStatus) Reset() {
	*x = ComplianceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_imagestatus_v1_imagestatus_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceStatus) ProtoMessage() {}

func (x *ComplianceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_arista_imagestatus_v1_imagestatus_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceStatus.ProtoReflect.Descriptor instead.
func (*ComplianceStatus) Descriptor() ([]byte, []int) {
	return file_arista_imagestatus_v1_imagestatus_proto_rawDescGZIP(), []int{4}
}

func (x *ComplianceStatus) GetSoftwareImageComplianceCode() SoftwareComplianceCode {
	if x != nil {
		return x.SoftwareImageComplianceCode
	}
	return SoftwareComplianceCode_SOFTWARE_COMPLIANCE_CODE_UNSPECIFIED
}

func (x *ComplianceStatus) GetTerminattrComplianceCode() SoftwareComplianceCode {
	if x != nil {
		return x.TerminattrComplianceCode
	}
	return SoftwareComplianceCode_SOFTWARE_COMPLIANCE_CODE_UNSPECIFIED
}

func (x *ComplianceStatus) GetExtensionsComplianceCode() SoftwareComplianceCode {
	if x != nil {
		return x.ExtensionsComplianceCode
	}
	return SoftwareComplianceCode_SOFTWARE_COMPLIANCE_CODE_UNSPECIFIED
}

// ComplianceStatusBySup is a map that indicates the compliance code for each
// supervisor.
type ComplianceStatusBySup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values is the mapping of supervisor type to compliance code.
	Values map[string]*ComplianceStatus `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ComplianceStatusBySup) Reset() {
	*x = ComplianceStatusBySup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_imagestatus_v1_imagestatus_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceStatusBySup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceStatusBySup) ProtoMessage() {}

func (x *ComplianceStatusBySup) ProtoReflect() protoreflect.Message {
	mi := &file_arista_imagestatus_v1_imagestatus_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceStatusBySup.ProtoReflect.Descriptor instead.
func (*ComplianceStatusBySup) Descriptor() ([]byte, []int) {
	return file_arista_imagestatus_v1_imagestatus_proto_rawDescGZIP(), []int{5}
}

func (x *ComplianceStatusBySup) GetValues() map[string]*ComplianceStatus {
	if x != nil {
		return x.Values
	}
	return nil
}

// RebootRequired indicates the reboot information per software image,
// terminattr and extension for the switch as a whole.
type RebootRequired struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// software_image_reboot_required indicates whether reboot is required
	// for the software image being applied.
	SoftwareImageRebootRequired *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=software_image_reboot_required,json=softwareImageRebootRequired,proto3" json:"software_image_reboot_required,omitempty"`
	// terminattr_reboot_required indicates whether reboot is required
	// for the terminattr being applied/deleted.
	TerminattrRebootRequired *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=terminattr_reboot_required,json=terminattrRebootRequired,proto3" json:"terminattr_reboot_required,omitempty"`
	// extension_reboot_required indicates whether reboot is required
	// for the extensions being applied/deleted.
	ExtensionRebootRequired *wrapperspb.BoolValue `protobuf:"bytes,3,opt,name=extension_reboot_required,json=extensionRebootRequired,proto3" json:"extension_reboot_required,omitempty"`
}

func (x *RebootRequired) Reset() {
	*x = RebootRequired{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_imagestatus_v1_imagestatus_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebootRequired) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebootRequired) ProtoMessage() {}

func (x *RebootRequired) ProtoReflect() protoreflect.Message {
	mi := &file_arista_imagestatus_v1_imagestatus_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebootRequired.ProtoReflect.Descriptor instead.
func (*RebootRequired) Descriptor() ([]byte, []int) {
	return file_arista_imagestatus_v1_imagestatus_proto_rawDescGZIP(), []int{6}
}

func (x *RebootRequired) GetSoftwareImageRebootRequired() *wrapperspb.BoolValue {
	if x != nil {
		return x.SoftwareImageRebootRequired
	}
	return nil
}

func (x *RebootRequired) GetTerminattrRebootRequired() *wrapperspb.BoolValue {
	if x != nil {
		return x.TerminattrRebootRequired
	}
	return nil
}

func (x *RebootRequired) GetExtensionRebootRequired() *wrapperspb.BoolValue {
	if x != nil {
		return x.ExtensionRebootRequired
	}
	return nil
}

// SoftwareImageDiff is the diff for the running/designed images.
type SoftwareImageDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// code indicates the operation performed to get from one side of the diff
	// to the other.
	Code DiffOp `protobuf:"varint,1,opt,name=code,proto3,enum=arista.imagestatus.v1.DiffOp" json:"code,omitempty"`
	// a is the software image on the a side (left hand side).
	A *SoftwareImage `protobuf:"bytes,2,opt,name=a,proto3" json:"a,omitempty"`
	// b is the software image on the b side (right hand side).
	B *SoftwareImage `protobuf:"bytes,3,opt,name=b,proto3" json:"b,omitempty"`
}

func (x *SoftwareImageDiff) Reset() {
	*x = SoftwareImageDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_imagestatus_v1_imagestatus_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoftwareImageDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoftwareImageDiff) ProtoMessage() {}

func (x *SoftwareImageDiff) ProtoReflect() protoreflect.Message {
	mi := &file_arista_imagestatus_v1_imagestatus_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoftwareImageDiff.ProtoReflect.Descriptor instead.
func (*SoftwareImageDiff) Descriptor() ([]byte, []int) {
	return file_arista_imagestatus_v1_imagestatus_proto_rawDescGZIP(), []int{7}
}

func (x *SoftwareImageDiff) GetCode() DiffOp {
	if x != nil {
		return x.Code
	}
	return DiffOp_DIFF_OP_UNSPECIFIED
}

func (x *SoftwareImageDiff) GetA() *SoftwareImage {
	if x != nil {
		return x.A
	}
	return nil
}

func (x *SoftwareImageDiff) GetB() *SoftwareImage {
	if x != nil {
		return x.B
	}
	return nil
}

// SoftwareImageDiffsBySup is software image diff information for each
// supervisor.
type SoftwareImageDiffsBySup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values is the mapping of supervisor type to image diff.
	Values map[string]*SoftwareImageDiff `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SoftwareImageDiffsBySup) Reset() {
	*x = SoftwareImageDiffsBySup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_imagestatus_v1_imagestatus_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoftwareImageDiffsBySup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoftwareImageDiffsBySup) ProtoMessage() {}

func (x *SoftwareImageDiffsBySup) ProtoReflect() protoreflect.Message {
	mi := &file_arista_imagestatus_v1_imagestatus_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoftwareImageDiffsBySup.ProtoReflect.Descriptor instead.
func (*SoftwareImageDiffsBySup) Descriptor() ([]byte, []int) {
	return file_arista_imagestatus_v1_imagestatus_proto_rawDescGZIP(), []int{8}
}

func (x *SoftwareImageDiffsBySup) GetValues() map[string]*SoftwareImageDiff {
	if x != nil {
		return x.Values
	}
	return nil
}

// ExtensionDiff is the diff for the running/designed extensions.
type ExtensionDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// code indicates the operation performed to get from one side of the diff
	// to the other.
	Code DiffOp `protobuf:"varint,1,opt,name=code,proto3,enum=arista.imagestatus.v1.DiffOp" json:"code,omitempty"`
	// a is the extension on the a side (left hand side).
	A *Extension `protobuf:"bytes,2,opt,name=a,proto3" json:"a,omitempty"`
	// b is the extension on the b side (right hand side).
	B *Extension `protobuf:"bytes,3,opt,name=b,proto3" json:"b,omitempty"`
}

func (x *ExtensionDiff) Reset() {
	*x = ExtensionDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_imagestatus_v1_imagestatus_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtensionDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtensionDiff) ProtoMessage() {}

func (x *ExtensionDiff) ProtoReflect() protoreflect.Message {
	mi := &file_arista_imagestatus_v1_imagestatus_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtensionDiff.ProtoReflect.Descriptor instead.
func (*ExtensionDiff) Descriptor() ([]byte, []int) {
	return file_arista_imagestatus_v1_imagestatus_proto_rawDescGZIP(), []int{9}
}

func (x *ExtensionDiff) GetCode() DiffOp {
	if x != nil {
		return x.Code
	}
	return DiffOp_DIFF_OP_UNSPECIFIED
}

func (x *ExtensionDiff) GetA() *Extension {
	if x != nil {
		return x.A
	}
	return nil
}

func (x *ExtensionDiff) GetB() *Extension {
	if x != nil {
		return x.B
	}
	return nil
}

// TerminAttrDiffsBySup is the terminattr diff information for each supervisor.
type TerminAttrDiffsBySup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values is the mapping of supervisor type to terminattr diff.
	Values map[string]*ExtensionDiff `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TerminAttrDiffsBySup) Reset() {
	*x = TerminAttrDiffsBySup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_imagestatus_v1_imagestatus_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminAttrDiffsBySup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminAttrDiffsBySup) ProtoMessage() {}

func (x *TerminAttrDiffsBySup) ProtoReflect() protoreflect.Message {
	mi := &file_arista_imagestatus_v1_imagestatus_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminAttrDiffsBySup.ProtoReflect.Descriptor instead.
func (*TerminAttrDiffsBySup) Descriptor() ([]byte, []int) {
	return file_arista_imagestatus_v1_imagestatus_proto_rawDescGZIP(), []int{10}
}

func (x *TerminAttrDiffsBySup) GetValues() map[string]*ExtensionDiff {
	if x != nil {
		return x.Values
	}
	return nil
}

// ExtensionDiffs is a list of extension diff information in the order they
// will be applied.
type ExtensionDiffs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values is an ordered list of extension diffs applied to the device.
	Values []*ExtensionDiff `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *ExtensionDiffs) Reset() {
	*x = ExtensionDiffs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_imagestatus_v1_imagestatus_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtensionDiffs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtensionDiffs) ProtoMessage() {}

func (x *ExtensionDiffs) ProtoReflect() protoreflect.Message {
	mi := &file_arista_imagestatus_v1_imagestatus_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtensionDiffs.ProtoReflect.Descriptor instead.
func (*ExtensionDiffs) Descriptor() ([]byte, []int) {
	return file_arista_imagestatus_v1_imagestatus_proto_rawDescGZIP(), []int{11}
}

func (x *ExtensionDiffs) GetValues() []*ExtensionDiff {
	if x != nil {
		return x.Values
	}
	return nil
}

// ExtensionDiffsBySup is the extension diff information for each supervisor.
type ExtensionDiffsBySup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values is the mapping of supervisor type to extension diff.
	Values map[string]*ExtensionDiffs `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ExtensionDiffsBySup) Reset() {
	*x = ExtensionDiffsBySup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_imagestatus_v1_imagestatus_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtensionDiffsBySup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtensionDiffsBySup) ProtoMessage() {}

func (x *ExtensionDiffsBySup) ProtoReflect() protoreflect.Message {
	mi := &file_arista_imagestatus_v1_imagestatus_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtensionDiffsBySup.ProtoReflect.Descriptor instead.
func (*ExtensionDiffsBySup) Descriptor() ([]byte, []int) {
	return file_arista_imagestatus_v1_imagestatus_proto_rawDescGZIP(), []int{12}
}

func (x *ExtensionDiffsBySup) GetValues() map[string]*ExtensionDiffs {
	if x != nil {
		return x.Values
	}
	return nil
}

// ImageSummary represents device image summary.
type ImageSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sku indicates the top-level sku or model number.
	Sku *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sku,proto3" json:"sku,omitempty"`
	// running_image_update_time is the most recent timestamp at which one of
	// running image side properties is updated.
	RunningImageUpdateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=running_image_update_time,json=runningImageUpdateTime,proto3" json:"running_image_update_time,omitempty"`
	// designed_image_update_time is the most recent timestamp at which one of
	// designed image side properties is updated.
	DesignedImageUpdateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=designed_image_update_time,json=designedImageUpdateTime,proto3" json:"designed_image_update_time,omitempty"`
	// dual_sup indicates if a device is a dual supervisor.
	DualSup *wrapperspb.BoolValue `protobuf:"bytes,4,opt,name=dual_sup,json=dualSup,proto3" json:"dual_sup,omitempty"`
	// active_slot indicates the physical slot number for the the active
	// supervisor.
	ActiveSlot *wrapperspb.Int32Value `protobuf:"bytes,5,opt,name=active_slot,json=activeSlot,proto3" json:"active_slot,omitempty"`
	// standby_slot indicates the physical slot number for the standby
	// supervisor.
	StandbySlot *wrapperspb.Int32Value `protobuf:"bytes,6,opt,name=standby_slot,json=standbySlot,proto3" json:"standby_slot,omitempty"`
	// software_image_diff indicates the image diff for each supervisor.
	SoftwareImageDiff *SoftwareImageDiffsBySup `protobuf:"bytes,7,opt,name=software_image_diff,json=softwareImageDiff,proto3" json:"software_image_diff,omitempty"`
	// terminattr_diff indicates the terminattr diff for each supervisor.
	TerminattrDiff *TerminAttrDiffsBySup `protobuf:"bytes,8,opt,name=terminattr_diff,json=terminattrDiff,proto3" json:"terminattr_diff,omitempty"`
	// extensions_diff indicates the extension diff for each supervisor.
	ExtensionsDiff *ExtensionDiffsBySup `protobuf:"bytes,9,opt,name=extensions_diff,json=extensionsDiff,proto3" json:"extensions_diff,omitempty"`
	// compliance_status is the aggregated compliance status (including both
	// active/standby and image/TA/extension compliance).
	ComplianceStatus SoftwareComplianceCode `protobuf:"varint,10,opt,name=compliance_status,json=complianceStatus,proto3,enum=arista.imagestatus.v1.SoftwareComplianceCode" json:"compliance_status,omitempty"`
	// compliance provides compliance information for each supervisor.
	Compliance *ComplianceStatusBySup `protobuf:"bytes,11,opt,name=compliance,proto3" json:"compliance,omitempty"`
	// reboot_required indicates whether a reboot is required if the designed
	// image is pushed to the device.
	RebootRequired *RebootRequired `protobuf:"bytes,12,opt,name=reboot_required,json=rebootRequired,proto3" json:"reboot_required,omitempty"`
	// digest is the digest of the image summary. It can use SHA-256 hash
	// algorithm for example. It is computed by stringifying the
	//software_image_diff, terminattr_diff and extensions_diff and computing the
	// hash.
	Digest *wrapperspb.StringValue `protobuf:"bytes,13,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (x *ImageSummary) Reset() {
	*x = ImageSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_imagestatus_v1_imagestatus_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageSummary) ProtoMessage() {}

func (x *ImageSummary) ProtoReflect() protoreflect.Message {
	mi := &file_arista_imagestatus_v1_imagestatus_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageSummary.ProtoReflect.Descriptor instead.
func (*ImageSummary) Descriptor() ([]byte, []int) {
	return file_arista_imagestatus_v1_imagestatus_proto_rawDescGZIP(), []int{13}
}

func (x *ImageSummary) GetSku() *wrapperspb.StringValue {
	if x != nil {
		return x.Sku
	}
	return nil
}

func (x *ImageSummary) GetRunningImageUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RunningImageUpdateTime
	}
	return nil
}

func (x *ImageSummary) GetDesignedImageUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DesignedImageUpdateTime
	}
	return nil
}

func (x *ImageSummary) GetDualSup() *wrapperspb.BoolValue {
	if x != nil {
		return x.DualSup
	}
	return nil
}

func (x *ImageSummary) GetActiveSlot() *wrapperspb.Int32Value {
	if x != nil {
		return x.ActiveSlot
	}
	return nil
}

func (x *ImageSummary) GetStandbySlot() *wrapperspb.Int32Value {
	if x != nil {
		return x.StandbySlot
	}
	return nil
}

func (x *ImageSummary) GetSoftwareImageDiff() *SoftwareImageDiffsBySup {
	if x != nil {
		return x.SoftwareImageDiff
	}
	return nil
}

func (x *ImageSummary) GetTerminattrDiff() *TerminAttrDiffsBySup {
	if x != nil {
		return x.TerminattrDiff
	}
	return nil
}

func (x *ImageSummary) GetExtensionsDiff() *ExtensionDiffsBySup {
	if x != nil {
		return x.ExtensionsDiff
	}
	return nil
}

func (x *ImageSummary) GetComplianceStatus() SoftwareComplianceCode {
	if x != nil {
		return x.ComplianceStatus
	}
	return SoftwareComplianceCode_SOFTWARE_COMPLIANCE_CODE_UNSPECIFIED
}

func (x *ImageSummary) GetCompliance() *ComplianceStatusBySup {
	if x != nil {
		return x.Compliance
	}
	return nil
}

func (x *ImageSummary) GetRebootRequired() *RebootRequired {
	if x != nil {
		return x.RebootRequired
	}
	return nil
}

func (x *ImageSummary) GetDigest() *wrapperspb.StringValue {
	if x != nil {
		return x.Digest
	}
	return nil
}

// SummaryKey uniquely identifies a device summary request.
type SummaryKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// device_id is the serial number of the device
	DeviceId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (x *SummaryKey) Reset() {
	*x = SummaryKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_imagestatus_v1_imagestatus_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummaryKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummaryKey) ProtoMessage() {}

func (x *SummaryKey) ProtoReflect() protoreflect.Message {
	mi := &file_arista_imagestatus_v1_imagestatus_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummaryKey.ProtoReflect.Descriptor instead.
func (*SummaryKey) Descriptor() ([]byte, []int) {
	return file_arista_imagestatus_v1_imagestatus_proto_rawDescGZIP(), []int{14}
}

func (x *SummaryKey) GetDeviceId() *wrapperspb.StringValue {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

// Summary represents the device image summary.
type Summary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key represents the image summary key.
	Key *SummaryKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// summary is the image diff summary.
	Summary *ImageSummary `protobuf:"bytes,2,opt,name=summary,proto3" json:"summary,omitempty"`
	// errors are the image errors encountered while validating the image. These are
	// displayed on the change control review page (for changes made outside the workspace).
	Errors *ImageErrors `protobuf:"bytes,3,opt,name=errors,proto3" json:"errors,omitempty"`
	// warnings are the image warnings encountered while validating the image. These are
	// displayed on the change control review page (for changes made outside the workspace).
	Warnings *ImageWarnings `protobuf:"bytes,4,opt,name=warnings,proto3" json:"warnings,omitempty"`
}

func (x *Summary) Reset() {
	*x = Summary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_imagestatus_v1_imagestatus_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Summary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Summary) ProtoMessage() {}

func (x *Summary) ProtoReflect() protoreflect.Message {
	mi := &file_arista_imagestatus_v1_imagestatus_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Summary.ProtoReflect.Descriptor instead.
func (*Summary) Descriptor() ([]byte, []int) {
	return file_arista_imagestatus_v1_imagestatus_proto_rawDescGZIP(), []int{15}
}

func (x *Summary) GetKey() *SummaryKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Summary) GetSummary() *ImageSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *Summary) GetErrors() *ImageErrors {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *Summary) GetWarnings() *ImageWarnings {
	if x != nil {
		return x.Warnings
	}
	return nil
}

// ImageError wraps `ErrorCode` enum with a reason string.
type ImageError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sku represents the name of the sku.
	Sku *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sku,proto3" json:"sku,omitempty"`
	// error_code is the error code.
	ErrorCode ErrorCode `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3,enum=arista.imagestatus.v1.ErrorCode" json:"error_code,omitempty"`
	// error_msg provides a description of the error.
	ErrorMsg *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
}

func (x *ImageError) Reset() {
	*x = ImageError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_imagestatus_v1_imagestatus_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageError) ProtoMessage() {}

func (x *ImageError) ProtoReflect() protoreflect.Message {
	mi := &file_arista_imagestatus_v1_imagestatus_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageError.ProtoReflect.Descriptor instead.
func (*ImageError) Descriptor() ([]byte, []int) {
	return file_arista_imagestatus_v1_imagestatus_proto_rawDescGZIP(), []int{16}
}

func (x *ImageError) GetSku() *wrapperspb.StringValue {
	if x != nil {
		return x.Sku
	}
	return nil
}

func (x *ImageError) GetErrorCode() ErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCode_ERROR_CODE_UNSPECIFIED
}

func (x *ImageError) GetErrorMsg() *wrapperspb.StringValue {
	if x != nil {
		return x.ErrorMsg
	}
	return nil
}

// ImageErrors is the list of errors reported by CVP when handling image
// validations.
type ImageErrors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values is a list of image errors.
	Values []*ImageError `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *ImageErrors) Reset() {
	*x = ImageErrors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_imagestatus_v1_imagestatus_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageErrors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageErrors) ProtoMessage() {}

func (x *ImageErrors) ProtoReflect() protoreflect.Message {
	mi := &file_arista_imagestatus_v1_imagestatus_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageErrors.ProtoReflect.Descriptor instead.
func (*ImageErrors) Descriptor() ([]byte, []int) {
	return file_arista_imagestatus_v1_imagestatus_proto_rawDescGZIP(), []int{17}
}

func (x *ImageErrors) GetValues() []*ImageError {
	if x != nil {
		return x.Values
	}
	return nil
}

// ImageWarning wraps `WarningCode` enum with a reason string.
type ImageWarning struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sku represents the name of the sku.
	Sku *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sku,proto3" json:"sku,omitempty"`
	// warning_code is the warning code.
	WarningCode WarningCode `protobuf:"varint,2,opt,name=warning_code,json=warningCode,proto3,enum=arista.imagestatus.v1.WarningCode" json:"warning_code,omitempty"`
	// warning_msg provides a description of the warning.
	WarningMsg *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=warning_msg,json=warningMsg,proto3" json:"warning_msg,omitempty"`
}

func (x *ImageWarning) Reset() {
	*x = ImageWarning{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_imagestatus_v1_imagestatus_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageWarning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageWarning) ProtoMessage() {}

func (x *ImageWarning) ProtoReflect() protoreflect.Message {
	mi := &file_arista_imagestatus_v1_imagestatus_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageWarning.ProtoReflect.Descriptor instead.
func (*ImageWarning) Descriptor() ([]byte, []int) {
	return file_arista_imagestatus_v1_imagestatus_proto_rawDescGZIP(), []int{18}
}

func (x *ImageWarning) GetSku() *wrapperspb.StringValue {
	if x != nil {
		return x.Sku
	}
	return nil
}

func (x *ImageWarning) GetWarningCode() WarningCode {
	if x != nil {
		return x.WarningCode
	}
	return WarningCode_WARNING_CODE_UNSPECIFIED
}

func (x *ImageWarning) GetWarningMsg() *wrapperspb.StringValue {
	if x != nil {
		return x.WarningMsg
	}
	return nil
}

// ImageWarnings is the list of warnings reported by CVP when handling image
// validations.
type ImageWarnings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values is a list of image warnings.
	Values []*ImageWarning `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *ImageWarnings) Reset() {
	*x = ImageWarnings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_imagestatus_v1_imagestatus_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageWarnings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageWarnings) ProtoMessage() {}

func (x *ImageWarnings) ProtoReflect() protoreflect.Message {
	mi := &file_arista_imagestatus_v1_imagestatus_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageWarnings.ProtoReflect.Descriptor instead.
func (*ImageWarnings) Descriptor() ([]byte, []int) {
	return file_arista_imagestatus_v1_imagestatus_proto_rawDescGZIP(), []int{19}
}

func (x *ImageWarnings) GetValues() []*ImageWarning {
	if x != nil {
		return x.Values
	}
	return nil
}

var File_arista_imagestatus_v1_imagestatus_proto protoreflect.FileDescriptor

var file_arista_imagestatus_v1_imagestatus_proto_rawDesc = []byte{
	0x0a, 0x27, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x14, 0x66, 0x6d, 0x70, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbb, 0x01, 0x0a, 0x0d, 0x53, 0x6f, 0x66, 0x74,
	0x77, 0x61, 0x72, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9f, 0x02, 0x0a, 0x0d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x36, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x66, 0x6c, 0x61, 0x76, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x12, 0x36, 0x0a,
	0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x61, 0x72, 0x63, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x04, 0x61, 0x72, 0x63, 0x68, 0x22, 0xbd, 0x03, 0x0a, 0x09, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x43, 0x0a, 0x0f, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x09, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x3b, 0x0a, 0x0b, 0x69, 0x73,
	0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x69, 0x73, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x22, 0x46, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22,
	0xe0, 0x02, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x72, 0x0a, 0x1e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x1b, 0x73, 0x6f, 0x66,
	0x74, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x6b, 0x0a, 0x1a, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x18, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x74, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x6b, 0x0a, 0x1a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x18, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0xcd, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x79, 0x53, 0x75, 0x70, 0x12, 0x50, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x79, 0x53, 0x75, 0x70, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x62,
	0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xa3, 0x02, 0x0a, 0x0e, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x5f, 0x0a, 0x1e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72,
	0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x73, 0x6f, 0x66, 0x74, 0x77,
	0x61, 0x72, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x58, 0x0a, 0x1a, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x74, 0x72, 0x5f, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x18, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x74, 0x72, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x12, 0x56, 0x0a, 0x19, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x17, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0xae, 0x01, 0x0a, 0x11, 0x53, 0x6f, 0x66,
	0x74, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x69, 0x66, 0x66, 0x12, 0x31,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x4f, 0x70, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x32, 0x0a, 0x01, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x01, 0x61, 0x12, 0x32, 0x0a, 0x01, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72,
	0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x01, 0x62, 0x22, 0xd2, 0x01, 0x0a, 0x17, 0x53, 0x6f,
	0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x69, 0x66, 0x66, 0x73,
	0x42, 0x79, 0x53, 0x75, 0x70, 0x12, 0x52, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f,
	0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x69, 0x66, 0x66, 0x73,
	0x42, 0x79, 0x53, 0x75, 0x70, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x63, 0x0a, 0x0b, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44,
	0x69, 0x66, 0x66, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa2,
	0x01, 0x0a, 0x0d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x66, 0x66,
	0x12, 0x31, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x4f, 0x70, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x01, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x01, 0x61, 0x12, 0x2e, 0x0a, 0x01, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x01, 0x62, 0x22, 0xc8, 0x01, 0x0a, 0x14, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x44, 0x69, 0x66, 0x66, 0x73, 0x42, 0x79, 0x53, 0x75, 0x70, 0x12, 0x4f, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x44,
	0x69, 0x66, 0x66, 0x73, 0x42, 0x79, 0x53, 0x75, 0x70, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x5f, 0x0a,
	0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x44,
	0x69, 0x66, 0x66, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4e,
	0x0a, 0x0e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x66, 0x66, 0x73,
	0x12, 0x3c, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x44, 0x69, 0x66, 0x66, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xc7,
	0x01, 0x0a, 0x13, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x66, 0x66,
	0x73, 0x42, 0x79, 0x53, 0x75, 0x70, 0x12, 0x4e, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x66, 0x66, 0x73, 0x42, 0x79, 0x53,
	0x75, 0x70, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x60, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x66, 0x66, 0x73, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xde, 0x07, 0x0a, 0x0c, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x03, 0x73, 0x6b, 0x75,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x73, 0x6b, 0x75, 0x12, 0x55, 0x0a, 0x19, 0x72, 0x75, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x16, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x57, 0x0a, 0x1a, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x17, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x61,
	0x6c, 0x5f, 0x73, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x64, 0x75, 0x61, 0x6c, 0x53, 0x75, 0x70,
	0x12, 0x3c, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x3e,
	0x0a, 0x0c, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x5e,
	0x0a, 0x13, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x64, 0x69, 0x66, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x44, 0x69, 0x66, 0x66, 0x73, 0x42, 0x79, 0x53, 0x75, 0x70, 0x52, 0x11, 0x73, 0x6f, 0x66,
	0x74, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x69, 0x66, 0x66, 0x12, 0x54,
	0x0a, 0x0f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x64, 0x69, 0x66,
	0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x44, 0x69, 0x66, 0x66, 0x73, 0x42,
	0x79, 0x53, 0x75, 0x70, 0x52, 0x0e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x74, 0x72,
	0x44, 0x69, 0x66, 0x66, 0x12, 0x53, 0x0a, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x44,
	0x69, 0x66, 0x66, 0x73, 0x42, 0x79, 0x53, 0x75, 0x70, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x69, 0x66, 0x66, 0x12, 0x5a, 0x0a, 0x11, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x66,
	0x74, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4c, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x79, 0x53, 0x75, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x0f, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x52, 0x0e, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x22, 0x4d, 0x0a, 0x0a, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x3a, 0x04, 0x80, 0x8e, 0x19, 0x01, 0x22, 0x83, 0x02, 0x0a, 0x07, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x33, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x07, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52,
	0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x3a, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x77, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72, 0x6f, 0x22, 0xb8,
	0x01, 0x0a, 0x0a, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2e, 0x0a,
	0x03, 0x73, 0x6b, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x73, 0x6b, 0x75, 0x12, 0x3f, 0x0a,
	0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x39,
	0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x48, 0x0a, 0x0b, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x39, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x0c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x57, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x03, 0x73, 0x6b, 0x75, 0x12, 0x45, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0b,
	0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x77,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a,
	0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x73, 0x67, 0x22, 0x4c, 0x0a, 0x0d, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2a, 0xc4, 0x01, 0x0a, 0x16, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2a, 0x0a,
	0x26, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x58, 0x54,
	0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x2c, 0x0a, 0x28, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x4f,
	0x52, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x2a,
	0x92, 0x01, 0x0a, 0x16, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x4f,
	0x46, 0x54, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x4f, 0x46, 0x54, 0x57, 0x41, 0x52, 0x45,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x49, 0x4e, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x4f,
	0x46, 0x54, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x53, 0x59,
	0x4e, 0x43, 0x10, 0x02, 0x2a, 0x6b, 0x0a, 0x06, 0x44, 0x69, 0x66, 0x66, 0x4f, 0x70, 0x12, 0x17,
	0x0a, 0x13, 0x44, 0x49, 0x46, 0x46, 0x5f, 0x4f, 0x50, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x49, 0x46, 0x46, 0x5f,
	0x4f, 0x50, 0x5f, 0x4e, 0x4f, 0x50, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x49, 0x46, 0x46,
	0x5f, 0x4f, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x49, 0x46,
	0x46, 0x5f, 0x4f, 0x50, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x12, 0x12, 0x0a,
	0x0e, 0x44, 0x49, 0x46, 0x46, 0x5f, 0x4f, 0x50, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10,
	0x04, 0x2a, 0xea, 0x03, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x16, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x2d, 0x0a, 0x29, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53,
	0x45, 0x44, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x47, 0x0a, 0x3f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47,
	0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x46, 0x52, 0x4f, 0x4d,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x55, 0x50, 0x45, 0x52, 0x56, 0x49, 0x53,
	0x4f, 0x52, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x1a, 0x02, 0x08, 0x01, 0x12,
	0x45, 0x0a, 0x3d, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x47, 0x45,
	0x54, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x53,
	0x55, 0x50, 0x45, 0x52, 0x56, 0x49, 0x53, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x07, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x2f, 0x0a, 0x2b, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x4f, 0x53, 0x5f, 0x54, 0x41, 0x5f, 0x41, 0x52, 0x43, 0x48,
	0x49, 0x54, 0x45, 0x43, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x41,
	0x54, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x08, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x41, 0x5f, 0x43, 0x56, 0x5f, 0x49, 0x4e, 0x43, 0x4f,
	0x4d, 0x50, 0x41, 0x54, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x09, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x4f, 0x53, 0x5f, 0x43, 0x56, 0x5f,
	0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x54, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x0a, 0x2a, 0xab,
	0x03, 0x0a, 0x0b, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c,
	0x0a, 0x18, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b,
	0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x24, 0x0a,
	0x20, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x4b,
	0x55, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x4b, 0x55, 0x5f, 0x55,
	0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18,
	0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x57, 0x49,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x57, 0x41,
	0x52, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x41, 0x5f, 0x45, 0x4f,
	0x53, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x54, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x05,
	0x12, 0x27, 0x0a, 0x1f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x54, 0x41, 0x5f, 0x43, 0x56, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x54, 0x49,
	0x42, 0x4c, 0x45, 0x10, 0x06, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x28, 0x0a, 0x20, 0x57, 0x41, 0x52,
	0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x4f, 0x53, 0x5f, 0x43, 0x56,
	0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x54, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x07, 0x1a,
	0x02, 0x08, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x45, 0x4f, 0x53, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x08, 0x12, 0x2c, 0x0a, 0x28, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e,
	0x47, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x41, 0x5f, 0x45, 0x4d, 0x42, 0x45, 0x44, 0x44,
	0x45, 0x44, 0x45, 0x58, 0x54, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x54, 0x49, 0x42,
	0x4c, 0x45, 0x10, 0x09, 0x12, 0x26, 0x0a, 0x1e, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50,
	0x41, 0x54, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x0a, 0x1a, 0x02, 0x08, 0x01, 0x42, 0x5e, 0x0a, 0x19,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x0b, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x01, 0x5a, 0x32, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31,
	0x3b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_arista_imagestatus_v1_imagestatus_proto_rawDescOnce sync.Once
	file_arista_imagestatus_v1_imagestatus_proto_rawDescData = file_arista_imagestatus_v1_imagestatus_proto_rawDesc
)

func file_arista_imagestatus_v1_imagestatus_proto_rawDescGZIP() []byte {
	file_arista_imagestatus_v1_imagestatus_proto_rawDescOnce.Do(func() {
		file_arista_imagestatus_v1_imagestatus_proto_rawDescData = protoimpl.X.CompressGZIP(file_arista_imagestatus_v1_imagestatus_proto_rawDescData)
	})
	return file_arista_imagestatus_v1_imagestatus_proto_rawDescData
}

var file_arista_imagestatus_v1_imagestatus_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_arista_imagestatus_v1_imagestatus_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_arista_imagestatus_v1_imagestatus_proto_goTypes = []interface{}{
	(ExtensionInstallStatus)(0),     // 0: arista.imagestatus.v1.ExtensionInstallStatus
	(SoftwareComplianceCode)(0),     // 1: arista.imagestatus.v1.SoftwareComplianceCode
	(DiffOp)(0),                     // 2: arista.imagestatus.v1.DiffOp
	(ErrorCode)(0),                  // 3: arista.imagestatus.v1.ErrorCode
	(WarningCode)(0),                // 4: arista.imagestatus.v1.WarningCode
	(*SoftwareImage)(nil),           // 5: arista.imagestatus.v1.SoftwareImage
	(*ImageMetadata)(nil),           // 6: arista.imagestatus.v1.ImageMetadata
	(*Extension)(nil),               // 7: arista.imagestatus.v1.Extension
	(*Extensions)(nil),              // 8: arista.imagestatus.v1.Extensions
	(*ComplianceStatus)(nil),        // 9: arista.imagestatus.v1.ComplianceStatus
	(*ComplianceStatusBySup)(nil),   // 10: arista.imagestatus.v1.ComplianceStatusBySup
	(*RebootRequired)(nil),          // 11: arista.imagestatus.v1.RebootRequired
	(*SoftwareImageDiff)(nil),       // 12: arista.imagestatus.v1.SoftwareImageDiff
	(*SoftwareImageDiffsBySup)(nil), // 13: arista.imagestatus.v1.SoftwareImageDiffsBySup
	(*ExtensionDiff)(nil),           // 14: arista.imagestatus.v1.ExtensionDiff
	(*TerminAttrDiffsBySup)(nil),    // 15: arista.imagestatus.v1.TerminAttrDiffsBySup
	(*ExtensionDiffs)(nil),          // 16: arista.imagestatus.v1.ExtensionDiffs
	(*ExtensionDiffsBySup)(nil),     // 17: arista.imagestatus.v1.ExtensionDiffsBySup
	(*ImageSummary)(nil),            // 18: arista.imagestatus.v1.ImageSummary
	(*SummaryKey)(nil),              // 19: arista.imagestatus.v1.SummaryKey
	(*Summary)(nil),                 // 20: arista.imagestatus.v1.Summary
	(*ImageError)(nil),              // 21: arista.imagestatus.v1.ImageError
	(*ImageErrors)(nil),             // 22: arista.imagestatus.v1.ImageErrors
	(*ImageWarning)(nil),            // 23: arista.imagestatus.v1.ImageWarning
	(*ImageWarnings)(nil),           // 24: arista.imagestatus.v1.ImageWarnings
	nil,                             // 25: arista.imagestatus.v1.ComplianceStatusBySup.ValuesEntry
	nil,                             // 26: arista.imagestatus.v1.SoftwareImageDiffsBySup.ValuesEntry
	nil,                             // 27: arista.imagestatus.v1.TerminAttrDiffsBySup.ValuesEntry
	nil,                             // 28: arista.imagestatus.v1.ExtensionDiffsBySup.ValuesEntry
	(*wrapperspb.StringValue)(nil),  // 29: google.protobuf.StringValue
	(*wrapperspb.BoolValue)(nil),    // 30: google.protobuf.BoolValue
	(*timestamppb.Timestamp)(nil),   // 31: google.protobuf.Timestamp
	(*wrapperspb.Int32Value)(nil),   // 32: google.protobuf.Int32Value
}
var file_arista_imagestatus_v1_imagestatus_proto_depIdxs = []int32{
	29, // 0: arista.imagestatus.v1.SoftwareImage.name:type_name -> google.protobuf.StringValue
	29, // 1: arista.imagestatus.v1.SoftwareImage.version:type_name -> google.protobuf.StringValue
	6,  // 2: arista.imagestatus.v1.SoftwareImage.metadata:type_name -> arista.imagestatus.v1.ImageMetadata
	29, // 3: arista.imagestatus.v1.ImageMetadata.version:type_name -> google.protobuf.StringValue
	29, // 4: arista.imagestatus.v1.ImageMetadata.release:type_name -> google.protobuf.StringValue
	29, // 5: arista.imagestatus.v1.ImageMetadata.flavor:type_name -> google.protobuf.StringValue
	29, // 6: arista.imagestatus.v1.ImageMetadata.variant:type_name -> google.protobuf.StringValue
	29, // 7: arista.imagestatus.v1.ImageMetadata.arch:type_name -> google.protobuf.StringValue
	29, // 8: arista.imagestatus.v1.Extension.name:type_name -> google.protobuf.StringValue
	29, // 9: arista.imagestatus.v1.Extension.version:type_name -> google.protobuf.StringValue
	30, // 10: arista.imagestatus.v1.Extension.reboot_required:type_name -> google.protobuf.BoolValue
	30, // 11: arista.imagestatus.v1.Extension.present:type_name -> google.protobuf.BoolValue
	0,  // 12: arista.imagestatus.v1.Extension.installed:type_name -> arista.imagestatus.v1.ExtensionInstallStatus
	29, // 13: arista.imagestatus.v1.Extension.status_detail:type_name -> google.protobuf.StringValue
	30, // 14: arista.imagestatus.v1.Extension.is_embedded:type_name -> google.protobuf.BoolValue
	7,  // 15: arista.imagestatus.v1.Extensions.values:type_name -> arista.imagestatus.v1.Extension
	1,  // 16: arista.imagestatus.v1.ComplianceStatus.software_image_compliance_code:type_name -> arista.imagestatus.v1.SoftwareComplianceCode
	1,  // 17: arista.imagestatus.v1.ComplianceStatus.terminattr_compliance_code:type_name -> arista.imagestatus.v1.SoftwareComplianceCode
	1,  // 18: arista.imagestatus.v1.ComplianceStatus.extensions_compliance_code:type_name -> arista.imagestatus.v1.SoftwareComplianceCode
	25, // 19: arista.imagestatus.v1.ComplianceStatusBySup.values:type_name -> arista.imagestatus.v1.ComplianceStatusBySup.ValuesEntry
	30, // 20: arista.imagestatus.v1.RebootRequired.software_image_reboot_required:type_name -> google.protobuf.BoolValue
	30, // 21: arista.imagestatus.v1.RebootRequired.terminattr_reboot_required:type_name -> google.protobuf.BoolValue
	30, // 22: arista.imagestatus.v1.RebootRequired.extension_reboot_required:type_name -> google.protobuf.BoolValue
	2,  // 23: arista.imagestatus.v1.SoftwareImageDiff.code:type_name -> arista.imagestatus.v1.DiffOp
	5,  // 24: arista.imagestatus.v1.SoftwareImageDiff.a:type_name -> arista.imagestatus.v1.SoftwareImage
	5,  // 25: arista.imagestatus.v1.SoftwareImageDiff.b:type_name -> arista.imagestatus.v1.SoftwareImage
	26, // 26: arista.imagestatus.v1.SoftwareImageDiffsBySup.values:type_name -> arista.imagestatus.v1.SoftwareImageDiffsBySup.ValuesEntry
	2,  // 27: arista.imagestatus.v1.ExtensionDiff.code:type_name -> arista.imagestatus.v1.DiffOp
	7,  // 28: arista.imagestatus.v1.ExtensionDiff.a:type_name -> arista.imagestatus.v1.Extension
	7,  // 29: arista.imagestatus.v1.ExtensionDiff.b:type_name -> arista.imagestatus.v1.Extension
	27, // 30: arista.imagestatus.v1.TerminAttrDiffsBySup.values:type_name -> arista.imagestatus.v1.TerminAttrDiffsBySup.ValuesEntry
	14, // 31: arista.imagestatus.v1.ExtensionDiffs.values:type_name -> arista.imagestatus.v1.ExtensionDiff
	28, // 32: arista.imagestatus.v1.ExtensionDiffsBySup.values:type_name -> arista.imagestatus.v1.ExtensionDiffsBySup.ValuesEntry
	29, // 33: arista.imagestatus.v1.ImageSummary.sku:type_name -> google.protobuf.StringValue
	31, // 34: arista.imagestatus.v1.ImageSummary.running_image_update_time:type_name -> google.protobuf.Timestamp
	31, // 35: arista.imagestatus.v1.ImageSummary.designed_image_update_time:type_name -> google.protobuf.Timestamp
	30, // 36: arista.imagestatus.v1.ImageSummary.dual_sup:type_name -> google.protobuf.BoolValue
	32, // 37: arista.imagestatus.v1.ImageSummary.active_slot:type_name -> google.protobuf.Int32Value
	32, // 38: arista.imagestatus.v1.ImageSummary.standby_slot:type_name -> google.protobuf.Int32Value
	13, // 39: arista.imagestatus.v1.ImageSummary.software_image_diff:type_name -> arista.imagestatus.v1.SoftwareImageDiffsBySup
	15, // 40: arista.imagestatus.v1.ImageSummary.terminattr_diff:type_name -> arista.imagestatus.v1.TerminAttrDiffsBySup
	17, // 41: arista.imagestatus.v1.ImageSummary.extensions_diff:type_name -> arista.imagestatus.v1.ExtensionDiffsBySup
	1,  // 42: arista.imagestatus.v1.ImageSummary.compliance_status:type_name -> arista.imagestatus.v1.SoftwareComplianceCode
	10, // 43: arista.imagestatus.v1.ImageSummary.compliance:type_name -> arista.imagestatus.v1.ComplianceStatusBySup
	11, // 44: arista.imagestatus.v1.ImageSummary.reboot_required:type_name -> arista.imagestatus.v1.RebootRequired
	29, // 45: arista.imagestatus.v1.ImageSummary.digest:type_name -> google.protobuf.StringValue
	29, // 46: arista.imagestatus.v1.SummaryKey.device_id:type_name -> google.protobuf.StringValue
	19, // 47: arista.imagestatus.v1.Summary.key:type_name -> arista.imagestatus.v1.SummaryKey
	18, // 48: arista.imagestatus.v1.Summary.summary:type_name -> arista.imagestatus.v1.ImageSummary
	22, // 49: arista.imagestatus.v1.Summary.errors:type_name -> arista.imagestatus.v1.ImageErrors
	24, // 50: arista.imagestatus.v1.Summary.warnings:type_name -> arista.imagestatus.v1.ImageWarnings
	29, // 51: arista.imagestatus.v1.ImageError.sku:type_name -> google.protobuf.StringValue
	3,  // 52: arista.imagestatus.v1.ImageError.error_code:type_name -> arista.imagestatus.v1.ErrorCode
	29, // 53: arista.imagestatus.v1.ImageError.error_msg:type_name -> google.protobuf.StringValue
	21, // 54: arista.imagestatus.v1.ImageErrors.values:type_name -> arista.imagestatus.v1.ImageError
	29, // 55: arista.imagestatus.v1.ImageWarning.sku:type_name -> google.protobuf.StringValue
	4,  // 56: arista.imagestatus.v1.ImageWarning.warning_code:type_name -> arista.imagestatus.v1.WarningCode
	29, // 57: arista.imagestatus.v1.ImageWarning.warning_msg:type_name -> google.protobuf.StringValue
	23, // 58: arista.imagestatus.v1.ImageWarnings.values:type_name -> arista.imagestatus.v1.ImageWarning
	9,  // 59: arista.imagestatus.v1.ComplianceStatusBySup.ValuesEntry.value:type_name -> arista.imagestatus.v1.ComplianceStatus
	12, // 60: arista.imagestatus.v1.SoftwareImageDiffsBySup.ValuesEntry.value:type_name -> arista.imagestatus.v1.SoftwareImageDiff
	14, // 61: arista.imagestatus.v1.TerminAttrDiffsBySup.ValuesEntry.value:type_name -> arista.imagestatus.v1.ExtensionDiff
	16, // 62: arista.imagestatus.v1.ExtensionDiffsBySup.ValuesEntry.value:type_name -> arista.imagestatus.v1.ExtensionDiffs
	63, // [63:63] is the sub-list for method output_type
	63, // [63:63] is the sub-list for method input_type
	63, // [63:63] is the sub-list for extension type_name
	63, // [63:63] is the sub-list for extension extendee
	0,  // [0:63] is the sub-list for field type_name
}

func init() { file_arista_imagestatus_v1_imagestatus_proto_init() }
func file_arista_imagestatus_v1_imagestatus_proto_init() {
	if File_arista_imagestatus_v1_imagestatus_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_arista_imagestatus_v1_imagestatus_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SoftwareImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_imagestatus_v1_imagestatus_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_imagestatus_v1_imagestatus_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Extension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_imagestatus_v1_imagestatus_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Extensions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_imagestatus_v1_imagestatus_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_imagestatus_v1_imagestatus_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceStatusBySup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_imagestatus_v1_imagestatus_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RebootRequired); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_imagestatus_v1_imagestatus_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SoftwareImageDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_imagestatus_v1_imagestatus_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SoftwareImageDiffsBySup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_imagestatus_v1_imagestatus_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtensionDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_imagestatus_v1_imagestatus_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminAttrDiffsBySup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_imagestatus_v1_imagestatus_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtensionDiffs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_imagestatus_v1_imagestatus_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtensionDiffsBySup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_imagestatus_v1_imagestatus_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_imagestatus_v1_imagestatus_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummaryKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_imagestatus_v1_imagestatus_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Summary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_imagestatus_v1_imagestatus_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_imagestatus_v1_imagestatus_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageErrors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_imagestatus_v1_imagestatus_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageWarning); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_imagestatus_v1_imagestatus_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageWarnings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_arista_imagestatus_v1_imagestatus_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_arista_imagestatus_v1_imagestatus_proto_goTypes,
		DependencyIndexes: file_arista_imagestatus_v1_imagestatus_proto_depIdxs,
		EnumInfos:         file_arista_imagestatus_v1_imagestatus_proto_enumTypes,
		MessageInfos:      file_arista_imagestatus_v1_imagestatus_proto_msgTypes,
	}.Build()
	File_arista_imagestatus_v1_imagestatus_proto = out.File
	file_arista_imagestatus_v1_imagestatus_proto_rawDesc = nil
	file_arista_imagestatus_v1_imagestatus_proto_goTypes = nil
	file_arista_imagestatus_v1_imagestatus_proto_depIdxs = nil
}
