// Copyright (c) 2023 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

//
// Code generated by boomtown. DO NOT EDIT.
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: arista/imagestatus.v1/services.gen.proto

package imagestatus

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SummaryService_GetOne_FullMethodName    = "/arista.imagestatus.v1.SummaryService/GetOne"
	SummaryService_GetAll_FullMethodName    = "/arista.imagestatus.v1.SummaryService/GetAll"
	SummaryService_Subscribe_FullMethodName = "/arista.imagestatus.v1.SummaryService/Subscribe"
)

// SummaryServiceClient is the client API for SummaryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SummaryServiceClient interface {
	GetOne(ctx context.Context, in *SummaryRequest, opts ...grpc.CallOption) (*SummaryResponse, error)
	GetAll(ctx context.Context, in *SummaryStreamRequest, opts ...grpc.CallOption) (SummaryService_GetAllClient, error)
	Subscribe(ctx context.Context, in *SummaryStreamRequest, opts ...grpc.CallOption) (SummaryService_SubscribeClient, error)
}

type summaryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSummaryServiceClient(cc grpc.ClientConnInterface) SummaryServiceClient {
	return &summaryServiceClient{cc}
}

func (c *summaryServiceClient) GetOne(ctx context.Context, in *SummaryRequest, opts ...grpc.CallOption) (*SummaryResponse, error) {
	out := new(SummaryResponse)
	err := c.cc.Invoke(ctx, SummaryService_GetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summaryServiceClient) GetAll(ctx context.Context, in *SummaryStreamRequest, opts ...grpc.CallOption) (SummaryService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &SummaryService_ServiceDesc.Streams[0], SummaryService_GetAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &summaryServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SummaryService_GetAllClient interface {
	Recv() (*SummaryStreamResponse, error)
	grpc.ClientStream
}

type summaryServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *summaryServiceGetAllClient) Recv() (*SummaryStreamResponse, error) {
	m := new(SummaryStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *summaryServiceClient) Subscribe(ctx context.Context, in *SummaryStreamRequest, opts ...grpc.CallOption) (SummaryService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &SummaryService_ServiceDesc.Streams[1], SummaryService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &summaryServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SummaryService_SubscribeClient interface {
	Recv() (*SummaryStreamResponse, error)
	grpc.ClientStream
}

type summaryServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *summaryServiceSubscribeClient) Recv() (*SummaryStreamResponse, error) {
	m := new(SummaryStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SummaryServiceServer is the server API for SummaryService service.
// All implementations must embed UnimplementedSummaryServiceServer
// for forward compatibility
type SummaryServiceServer interface {
	GetOne(context.Context, *SummaryRequest) (*SummaryResponse, error)
	GetAll(*SummaryStreamRequest, SummaryService_GetAllServer) error
	Subscribe(*SummaryStreamRequest, SummaryService_SubscribeServer) error
	mustEmbedUnimplementedSummaryServiceServer()
}

// UnimplementedSummaryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSummaryServiceServer struct {
}

func (UnimplementedSummaryServiceServer) GetOne(context.Context, *SummaryRequest) (*SummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedSummaryServiceServer) GetAll(*SummaryStreamRequest, SummaryService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedSummaryServiceServer) Subscribe(*SummaryStreamRequest, SummaryService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedSummaryServiceServer) mustEmbedUnimplementedSummaryServiceServer() {}

// UnsafeSummaryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SummaryServiceServer will
// result in compilation errors.
type UnsafeSummaryServiceServer interface {
	mustEmbedUnimplementedSummaryServiceServer()
}

func RegisterSummaryServiceServer(s grpc.ServiceRegistrar, srv SummaryServiceServer) {
	s.RegisterService(&SummaryService_ServiceDesc, srv)
}

func _SummaryService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummaryServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SummaryService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummaryServiceServer).GetOne(ctx, req.(*SummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummaryService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SummaryStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SummaryServiceServer).GetAll(m, &summaryServiceGetAllServer{stream})
}

type SummaryService_GetAllServer interface {
	Send(*SummaryStreamResponse) error
	grpc.ServerStream
}

type summaryServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *summaryServiceGetAllServer) Send(m *SummaryStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SummaryService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SummaryStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SummaryServiceServer).Subscribe(m, &summaryServiceSubscribeServer{stream})
}

type SummaryService_SubscribeServer interface {
	Send(*SummaryStreamResponse) error
	grpc.ServerStream
}

type summaryServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *summaryServiceSubscribeServer) Send(m *SummaryStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// SummaryService_ServiceDesc is the grpc.ServiceDesc for SummaryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SummaryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.imagestatus.v1.SummaryService",
	HandlerType: (*SummaryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _SummaryService_GetOne_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAll",
			Handler:       _SummaryService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _SummaryService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/imagestatus.v1/services.gen.proto",
}
