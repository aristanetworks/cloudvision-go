// Copyright (c) 2023 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

// CloudVision allows users to version control provisioning operations
// that impact device configuration and image management. A workspace is
// something like a git branch, within which changes can be made without
// immediately impacting a device's running configuration. Changes can be
// made, modified, and previewed in a workspace. Once satisfied with the
// set of changes, a user may submit a workspace to the "mainline" branch,
// allowing the changes to be propagated to devices via Change Controls.
//
// A workspace comprises a set of diff operations (e.g., add/modify/remove)
// that will be applied to the mainline if the workspace is submitted
// successfully.
//
// A workspace itself is generic and can be used for any conceivable
// set of device provisioning operations, but it is not capable of
// describing the specific kind of changes. Rather, it holds changes
// defined by other Resource APIs that are "workspace-aware", such as
// studio.v1 and tag.v2. These APIs allow users to make changes within
// the context of a specific workspace, identified in the resource key
// with the field `workspace_id`.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v4.24.4
// source: arista/workspace.v1/workspace.proto

package workspace

import (
	configstatus_v1 "github.com/aristanetworks/cloudvision-go/api/arista/configstatus.v1"
	imagestatus_v1 "github.com/aristanetworks/cloudvision-go/api/arista/imagestatus.v1"
	fmp "github.com/aristanetworks/cloudvision-go/api/fmp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// WorkspaceState enumerates the general states of a workspace. Some of these states
// are derived as a result of executing a specific request on the workspace (see Request).
type WorkspaceState int32

const (
	// WORKSPACE_STATE_UNSPECIFIED indicates unspecified workspace state.
	WorkspaceState_WORKSPACE_STATE_UNSPECIFIED WorkspaceState = 0
	// WORKSPACE_STATE_PENDING indicates that the changes in the workspace are open and
	// have not been submitted.
	WorkspaceState_WORKSPACE_STATE_PENDING WorkspaceState = 1
	// WORKSPACE_STATE_SUBMITTED indicates that the changes in the workspace have been
	// submitted to the mainline.
	WorkspaceState_WORKSPACE_STATE_SUBMITTED WorkspaceState = 2
	// WORKSPACE_STATE_ABANDONED indicates that the workspace has been intentionally
	// closed, and may no longer be updated.
	WorkspaceState_WORKSPACE_STATE_ABANDONED WorkspaceState = 3
	// WORKSPACE_STATE_CONFLICTS indicates that the changes in the workspace are in
	// conflict with the current state of the system.
	WorkspaceState_WORKSPACE_STATE_CONFLICTS WorkspaceState = 4
	// WORKSPACE_STATE_ROLLED_BACK indicates that the workspace was submitted, but
	// has been rolled back (the changes have been undone).
	WorkspaceState_WORKSPACE_STATE_ROLLED_BACK WorkspaceState = 5
)

// Enum value maps for WorkspaceState.
var (
	WorkspaceState_name = map[int32]string{
		0: "WORKSPACE_STATE_UNSPECIFIED",
		1: "WORKSPACE_STATE_PENDING",
		2: "WORKSPACE_STATE_SUBMITTED",
		3: "WORKSPACE_STATE_ABANDONED",
		4: "WORKSPACE_STATE_CONFLICTS",
		5: "WORKSPACE_STATE_ROLLED_BACK",
	}
	WorkspaceState_value = map[string]int32{
		"WORKSPACE_STATE_UNSPECIFIED": 0,
		"WORKSPACE_STATE_PENDING":     1,
		"WORKSPACE_STATE_SUBMITTED":   2,
		"WORKSPACE_STATE_ABANDONED":   3,
		"WORKSPACE_STATE_CONFLICTS":   4,
		"WORKSPACE_STATE_ROLLED_BACK": 5,
	}
)

func (x WorkspaceState) Enum() *WorkspaceState {
	p := new(WorkspaceState)
	*p = x
	return p
}

func (x WorkspaceState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkspaceState) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_workspace_v1_workspace_proto_enumTypes[0].Descriptor()
}

func (WorkspaceState) Type() protoreflect.EnumType {
	return &file_arista_workspace_v1_workspace_proto_enumTypes[0]
}

func (x WorkspaceState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkspaceState.Descriptor instead.
func (WorkspaceState) EnumDescriptor() ([]byte, []int) {
	return file_arista_workspace_v1_workspace_proto_rawDescGZIP(), []int{0}
}

// Request enumerates the set of asynchronous operations that can be performed on a
// workspace.
type Request int32

const (
	// REQUEST_UNSPECIFIED describes unspecified request.
	Request_REQUEST_UNSPECIFIED Request = 0
	// REQUEST_START_BUILD describes a request to start building a workspace. This kicks
	// of a multi-stage operation to compile and validate the changes in a workspace (see
	// BuildStage for more details).
	Request_REQUEST_START_BUILD Request = 1
	// REQUEST_CANCEL_BUILD describes a request to stop building a workspace.
	Request_REQUEST_CANCEL_BUILD Request = 2
	// REQUEST_SUBMIT describes a request to submit a workspace to the mainline. Before
	// submission, some checks are made that can cause the request to fail. E.g., if there
	// is a modified configuration for a non-streaming device in the workspace, then the
	// request will fail. Once submitted, changes are applied and change controls are
	// created (if necessary).
	Request_REQUEST_SUBMIT Request = 3
	// REQUEST_ABANDON describes a request to abandon a workspace. This operation does
	// not delete the workspace from the system, but closes it to any further updates.
	Request_REQUEST_ABANDON Request = 4
	// REQUEST_ROLLBACK describes a request to rollback a submitted workspace, undoing
	// corresponding changes in the mainline.
	Request_REQUEST_ROLLBACK Request = 5
	// REQUEST_SUBMIT_FORCE describes a request to submit a workspace without making any
	// checks that could normally cause the submission to fail. See REQUEST_SUBMIT for
	// more details.
	Request_REQUEST_SUBMIT_FORCE Request = 6
	// REQUEST_REBASE describes a request to rebase a workspace. This operation updates
	// workspace state to reflect the latest mainline content, and re-applies workspace
	// changes on top of that.
	Request_REQUEST_REBASE Request = 7
)

// Enum value maps for Request.
var (
	Request_name = map[int32]string{
		0: "REQUEST_UNSPECIFIED",
		1: "REQUEST_START_BUILD",
		2: "REQUEST_CANCEL_BUILD",
		3: "REQUEST_SUBMIT",
		4: "REQUEST_ABANDON",
		5: "REQUEST_ROLLBACK",
		6: "REQUEST_SUBMIT_FORCE",
		7: "REQUEST_REBASE",
	}
	Request_value = map[string]int32{
		"REQUEST_UNSPECIFIED":  0,
		"REQUEST_START_BUILD":  1,
		"REQUEST_CANCEL_BUILD": 2,
		"REQUEST_SUBMIT":       3,
		"REQUEST_ABANDON":      4,
		"REQUEST_ROLLBACK":     5,
		"REQUEST_SUBMIT_FORCE": 6,
		"REQUEST_REBASE":       7,
	}
)

func (x Request) Enum() *Request {
	p := new(Request)
	*p = x
	return p
}

func (x Request) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Request) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_workspace_v1_workspace_proto_enumTypes[1].Descriptor()
}

func (Request) Type() protoreflect.EnumType {
	return &file_arista_workspace_v1_workspace_proto_enumTypes[1]
}

func (x Request) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Request.Descriptor instead.
func (Request) EnumDescriptor() ([]byte, []int) {
	return file_arista_workspace_v1_workspace_proto_rawDescGZIP(), []int{1}
}

// ResponseStatus enumerates the set of execution statuses of a Response.
type ResponseStatus int32

const (
	// RESPONSE_STATUS_UNSPECIFIED indicates unspecified response status.
	ResponseStatus_RESPONSE_STATUS_UNSPECIFIED ResponseStatus = 0
	// RESPONSE_STATUS_SUCCESS indicates that the original Request was successful
	// in its execution.
	ResponseStatus_RESPONSE_STATUS_SUCCESS ResponseStatus = 1
	// RESPONSE_STATUS_FAIL indicates that the original Request was unsuccessful
	// in its execution.
	ResponseStatus_RESPONSE_STATUS_FAIL ResponseStatus = 2
)

// Enum value maps for ResponseStatus.
var (
	ResponseStatus_name = map[int32]string{
		0: "RESPONSE_STATUS_UNSPECIFIED",
		1: "RESPONSE_STATUS_SUCCESS",
		2: "RESPONSE_STATUS_FAIL",
	}
	ResponseStatus_value = map[string]int32{
		"RESPONSE_STATUS_UNSPECIFIED": 0,
		"RESPONSE_STATUS_SUCCESS":     1,
		"RESPONSE_STATUS_FAIL":        2,
	}
)

func (x ResponseStatus) Enum() *ResponseStatus {
	p := new(ResponseStatus)
	*p = x
	return p
}

func (x ResponseStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_workspace_v1_workspace_proto_enumTypes[2].Descriptor()
}

func (ResponseStatus) Type() protoreflect.EnumType {
	return &file_arista_workspace_v1_workspace_proto_enumTypes[2]
}

func (x ResponseStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponseStatus.Descriptor instead.
func (ResponseStatus) EnumDescriptor() ([]byte, []int) {
	return file_arista_workspace_v1_workspace_proto_rawDescGZIP(), []int{2}
}

// ResponseCode is a code for a Response indicating a particular scenario.
type ResponseCode int32

const (
	// RESPONSE_CODE_UNSPECIFIED indicates unspecified response code.
	ResponseCode_RESPONSE_CODE_UNSPECIFIED ResponseCode = 0
	// RESPONSE_CODE_INACTIVE_DEVICES_EXIST indicates that there are devices that have inactive
	// streaming status.
	ResponseCode_RESPONSE_CODE_INACTIVE_DEVICES_EXIST ResponseCode = 1
	// RESPONSE_CODE_DECOMMISSION_DEVICES_INCOMPLETE indicates that the decommission process is
	// incomplete for devices.
	ResponseCode_RESPONSE_CODE_DECOMMISSION_DEVICES_INCOMPLETE ResponseCode = 2
)

// Enum value maps for ResponseCode.
var (
	ResponseCode_name = map[int32]string{
		0: "RESPONSE_CODE_UNSPECIFIED",
		1: "RESPONSE_CODE_INACTIVE_DEVICES_EXIST",
		2: "RESPONSE_CODE_DECOMMISSION_DEVICES_INCOMPLETE",
	}
	ResponseCode_value = map[string]int32{
		"RESPONSE_CODE_UNSPECIFIED":                     0,
		"RESPONSE_CODE_INACTIVE_DEVICES_EXIST":          1,
		"RESPONSE_CODE_DECOMMISSION_DEVICES_INCOMPLETE": 2,
	}
)

func (x ResponseCode) Enum() *ResponseCode {
	p := new(ResponseCode)
	*p = x
	return p
}

func (x ResponseCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseCode) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_workspace_v1_workspace_proto_enumTypes[3].Descriptor()
}

func (ResponseCode) Type() protoreflect.EnumType {
	return &file_arista_workspace_v1_workspace_proto_enumTypes[3]
}

func (x ResponseCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponseCode.Descriptor instead.
func (ResponseCode) EnumDescriptor() ([]byte, []int) {
	return file_arista_workspace_v1_workspace_proto_rawDescGZIP(), []int{3}
}

// BuildState enumerates the set of states that a BuildStage can be in during a
// workspace build cycle.
type BuildState int32

const (
	// BUILD_STATE_UNSPECIFIED indicates unspecified build state.
	BuildState_BUILD_STATE_UNSPECIFIED BuildState = 0
	// BUILD_STATE_IN_PROGRESS indicates that the BuildStage was started but has
	// not yet completed.
	BuildState_BUILD_STATE_IN_PROGRESS BuildState = 1
	// BUILD_STATE_CANCELED indicates that the BuildStage was started but then
	// stopped before completion.
	BuildState_BUILD_STATE_CANCELED BuildState = 2
	// BUILD_STATE_SUCCESS indicates that the BuildStage was started and ran to
	// completion successfully.
	BuildState_BUILD_STATE_SUCCESS BuildState = 3
	// BUILD_STATE_FAIL indicates that the BuildStage was started and ran to
	// completion unsuccessfully.
	BuildState_BUILD_STATE_FAIL BuildState = 4
	// BUILD_STATE_SKIPPED indicates that the BuildStage was not run.
	BuildState_BUILD_STATE_SKIPPED BuildState = 5
)

// Enum value maps for BuildState.
var (
	BuildState_name = map[int32]string{
		0: "BUILD_STATE_UNSPECIFIED",
		1: "BUILD_STATE_IN_PROGRESS",
		2: "BUILD_STATE_CANCELED",
		3: "BUILD_STATE_SUCCESS",
		4: "BUILD_STATE_FAIL",
		5: "BUILD_STATE_SKIPPED",
	}
	BuildState_value = map[string]int32{
		"BUILD_STATE_UNSPECIFIED": 0,
		"BUILD_STATE_IN_PROGRESS": 1,
		"BUILD_STATE_CANCELED":    2,
		"BUILD_STATE_SUCCESS":     3,
		"BUILD_STATE_FAIL":        4,
		"BUILD_STATE_SKIPPED":     5,
	}
)

func (x BuildState) Enum() *BuildState {
	p := new(BuildState)
	*p = x
	return p
}

func (x BuildState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BuildState) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_workspace_v1_workspace_proto_enumTypes[4].Descriptor()
}

func (BuildState) Type() protoreflect.EnumType {
	return &file_arista_workspace_v1_workspace_proto_enumTypes[4]
}

func (x BuildState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BuildState.Descriptor instead.
func (BuildState) EnumDescriptor() ([]byte, []int) {
	return file_arista_workspace_v1_workspace_proto_rawDescGZIP(), []int{4}
}

// BuildStage enumerates the types of stages of a build of a workspace.
type BuildStage int32

const (
	// BUILD_STAGE_UNSPECIFIED indicates unspecified build stage.
	BuildStage_BUILD_STAGE_UNSPECIFIED BuildStage = 0
	// BUILD_STAGE_INPUT_VALIDATION describes the stage that detects input
	// errors in studios based on their schemas.
	BuildStage_BUILD_STAGE_INPUT_VALIDATION BuildStage = 1
	// BUILD_STAGE_CONFIGLET_BUILD describes the stage that generates EOS CLI
	// configs and images for devices by evaluating studio templates against
	// their inputs.
	BuildStage_BUILD_STAGE_CONFIGLET_BUILD BuildStage = 2
	// BUILD_STAGE_CONFIG_VALIDATION describes the stage that validates the
	// generated EOS CLI configs (e.g., checks for errors in the config).
	BuildStage_BUILD_STAGE_CONFIG_VALIDATION BuildStage = 3
	// BUILD_STAGE_IMAGE_VALIDATION describes the stage that validates the
	// generated images (e.g., checks device compatibility).
	BuildStage_BUILD_STAGE_IMAGE_VALIDATION BuildStage = 4
)

// Enum value maps for BuildStage.
var (
	BuildStage_name = map[int32]string{
		0: "BUILD_STAGE_UNSPECIFIED",
		1: "BUILD_STAGE_INPUT_VALIDATION",
		2: "BUILD_STAGE_CONFIGLET_BUILD",
		3: "BUILD_STAGE_CONFIG_VALIDATION",
		4: "BUILD_STAGE_IMAGE_VALIDATION",
	}
	BuildStage_value = map[string]int32{
		"BUILD_STAGE_UNSPECIFIED":       0,
		"BUILD_STAGE_INPUT_VALIDATION":  1,
		"BUILD_STAGE_CONFIGLET_BUILD":   2,
		"BUILD_STAGE_CONFIG_VALIDATION": 3,
		"BUILD_STAGE_IMAGE_VALIDATION":  4,
	}
)

func (x BuildStage) Enum() *BuildStage {
	p := new(BuildStage)
	*p = x
	return p
}

func (x BuildStage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BuildStage) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_workspace_v1_workspace_proto_enumTypes[5].Descriptor()
}

func (BuildStage) Type() protoreflect.EnumType {
	return &file_arista_workspace_v1_workspace_proto_enumTypes[5]
}

func (x BuildStage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BuildStage.Descriptor instead.
func (BuildStage) EnumDescriptor() ([]byte, []int) {
	return file_arista_workspace_v1_workspace_proto_rawDescGZIP(), []int{5}
}

// DeviceAuthzStatus holds the result of the authorization check on device.
type DeviceAuthzStatus int32

const (
	// DEVICE_AUTHZ_STATUS_UNSPECIFIED indicates the authorization check is pending.
	DeviceAuthzStatus_DEVICE_AUTHZ_STATUS_UNSPECIFIED DeviceAuthzStatus = 0
	// DEVICE_AUTHZ_STATUS_AUTHORIZED indicates the subject
	// is authorized to provision this device.
	DeviceAuthzStatus_DEVICE_AUTHZ_STATUS_AUTHORIZED DeviceAuthzStatus = 1
	// DEVICE_AUTHZ_STATUS_UNAUTHORIZED indicates the subject
	// is unauthorized to provision this device.
	DeviceAuthzStatus_DEVICE_AUTHZ_STATUS_UNAUTHORIZED DeviceAuthzStatus = 2
)

// Enum value maps for DeviceAuthzStatus.
var (
	DeviceAuthzStatus_name = map[int32]string{
		0: "DEVICE_AUTHZ_STATUS_UNSPECIFIED",
		1: "DEVICE_AUTHZ_STATUS_AUTHORIZED",
		2: "DEVICE_AUTHZ_STATUS_UNAUTHORIZED",
	}
	DeviceAuthzStatus_value = map[string]int32{
		"DEVICE_AUTHZ_STATUS_UNSPECIFIED":  0,
		"DEVICE_AUTHZ_STATUS_AUTHORIZED":   1,
		"DEVICE_AUTHZ_STATUS_UNAUTHORIZED": 2,
	}
)

func (x DeviceAuthzStatus) Enum() *DeviceAuthzStatus {
	p := new(DeviceAuthzStatus)
	*p = x
	return p
}

func (x DeviceAuthzStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceAuthzStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_workspace_v1_workspace_proto_enumTypes[6].Descriptor()
}

func (DeviceAuthzStatus) Type() protoreflect.EnumType {
	return &file_arista_workspace_v1_workspace_proto_enumTypes[6]
}

func (x DeviceAuthzStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceAuthzStatus.Descriptor instead.
func (DeviceAuthzStatus) EnumDescriptor() ([]byte, []int) {
	return file_arista_workspace_v1_workspace_proto_rawDescGZIP(), []int{6}
}

// ConfigValidationSkipCause enumerates the set of reasons a device can skip the config
// validation stage.
type ConfigValidationSkipCause int32

const (
	// CONFIG_VALIDATION_SKIP_CAUSE_UNSPECIFIED indicates config validation skip cause is
	// unspecified.
	ConfigValidationSkipCause_CONFIG_VALIDATION_SKIP_CAUSE_UNSPECIFIED ConfigValidationSkipCause = 0
	// CONFIG_VALIDATION_SKIP_CAUSE_INACTIVE indicates that the stage was skipped
	// because the device is not streaming.
	ConfigValidationSkipCause_CONFIG_VALIDATION_SKIP_CAUSE_INACTIVE ConfigValidationSkipCause = 1
	// CONFIG_VALIDATION_SKIP_CAUSE_PRE_PROVISIONED indicates that the stage was
	// skipped because the device is pre-provisioned.
	ConfigValidationSkipCause_CONFIG_VALIDATION_SKIP_CAUSE_PRE_PROVISIONED ConfigValidationSkipCause = 2
	// CONFIG_VALIDATION_SKIP_CAUSE_CONFIG_UNCHANGED indicates that the stage was
	// skipped because the device has no configuration changes in the workspace.
	ConfigValidationSkipCause_CONFIG_VALIDATION_SKIP_CAUSE_CONFIG_UNCHANGED ConfigValidationSkipCause = 3
	// CONFIG_VALIDATION_SKIP_CAUSE_NO_CONFIG_SOURCES indicates that the stage was
	// skipped because the device has no config sources in the workspace.
	ConfigValidationSkipCause_CONFIG_VALIDATION_SKIP_CAUSE_NO_CONFIG_SOURCES ConfigValidationSkipCause = 4
	// CONFIG_VALIDATION_SKIP_CAUSE_DEVICE_DECOMMISSIONED indicates that the stage was
	// skipped because the device is decommissioned in the workspace.
	ConfigValidationSkipCause_CONFIG_VALIDATION_SKIP_CAUSE_DEVICE_DECOMMISSIONED ConfigValidationSkipCause = 5
)

// Enum value maps for ConfigValidationSkipCause.
var (
	ConfigValidationSkipCause_name = map[int32]string{
		0: "CONFIG_VALIDATION_SKIP_CAUSE_UNSPECIFIED",
		1: "CONFIG_VALIDATION_SKIP_CAUSE_INACTIVE",
		2: "CONFIG_VALIDATION_SKIP_CAUSE_PRE_PROVISIONED",
		3: "CONFIG_VALIDATION_SKIP_CAUSE_CONFIG_UNCHANGED",
		4: "CONFIG_VALIDATION_SKIP_CAUSE_NO_CONFIG_SOURCES",
		5: "CONFIG_VALIDATION_SKIP_CAUSE_DEVICE_DECOMMISSIONED",
	}
	ConfigValidationSkipCause_value = map[string]int32{
		"CONFIG_VALIDATION_SKIP_CAUSE_UNSPECIFIED":           0,
		"CONFIG_VALIDATION_SKIP_CAUSE_INACTIVE":              1,
		"CONFIG_VALIDATION_SKIP_CAUSE_PRE_PROVISIONED":       2,
		"CONFIG_VALIDATION_SKIP_CAUSE_CONFIG_UNCHANGED":      3,
		"CONFIG_VALIDATION_SKIP_CAUSE_NO_CONFIG_SOURCES":     4,
		"CONFIG_VALIDATION_SKIP_CAUSE_DEVICE_DECOMMISSIONED": 5,
	}
)

func (x ConfigValidationSkipCause) Enum() *ConfigValidationSkipCause {
	p := new(ConfigValidationSkipCause)
	*p = x
	return p
}

func (x ConfigValidationSkipCause) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigValidationSkipCause) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_workspace_v1_workspace_proto_enumTypes[7].Descriptor()
}

func (ConfigValidationSkipCause) Type() protoreflect.EnumType {
	return &file_arista_workspace_v1_workspace_proto_enumTypes[7]
}

func (x ConfigValidationSkipCause) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigValidationSkipCause.Descriptor instead.
func (ConfigValidationSkipCause) EnumDescriptor() ([]byte, []int) {
	return file_arista_workspace_v1_workspace_proto_rawDescGZIP(), []int{7}
}

// ImageValidationSkipCause enumerates the set of reasons a device can skip the image
// validation stage.
type ImageValidationSkipCause int32

const (
	// IMAGE_VALIDATION_SKIP_CAUSE_UNSPECIFIED indicates image validation skip cause is
	// unspecified.
	ImageValidationSkipCause_IMAGE_VALIDATION_SKIP_CAUSE_UNSPECIFIED ImageValidationSkipCause = 0
	// IMAGE_VALIDATION_SKIP_CAUSE_INACTIVE indicates that the stage was skipped
	// because the device is not streaming.
	ImageValidationSkipCause_IMAGE_VALIDATION_SKIP_CAUSE_INACTIVE ImageValidationSkipCause = 1
	// IMAGE_VALIDATION_SKIP_CAUSE_PRE_PROVISIONED indicates that the stage was
	// skipped because the device is pre-provisioned.
	ImageValidationSkipCause_IMAGE_VALIDATION_SKIP_CAUSE_PRE_PROVISIONED ImageValidationSkipCause = 2
	// IMAGE_VALIDATION_SKIP_CAUSE_IMAGE_UNCHANGED indicates that the stage was
	// skipped because the device has no image changes in the workspace.
	ImageValidationSkipCause_IMAGE_VALIDATION_SKIP_CAUSE_IMAGE_UNCHANGED ImageValidationSkipCause = 3
	// IMAGE_VALIDATION_SKIP_CAUSE_NO_PROPOSED_SOFTWARE indicates that the stage was
	// skipped because the device has no proposed software changes in the workspace.
	ImageValidationSkipCause_IMAGE_VALIDATION_SKIP_CAUSE_NO_PROPOSED_SOFTWARE ImageValidationSkipCause = 4
)

// Enum value maps for ImageValidationSkipCause.
var (
	ImageValidationSkipCause_name = map[int32]string{
		0: "IMAGE_VALIDATION_SKIP_CAUSE_UNSPECIFIED",
		1: "IMAGE_VALIDATION_SKIP_CAUSE_INACTIVE",
		2: "IMAGE_VALIDATION_SKIP_CAUSE_PRE_PROVISIONED",
		3: "IMAGE_VALIDATION_SKIP_CAUSE_IMAGE_UNCHANGED",
		4: "IMAGE_VALIDATION_SKIP_CAUSE_NO_PROPOSED_SOFTWARE",
	}
	ImageValidationSkipCause_value = map[string]int32{
		"IMAGE_VALIDATION_SKIP_CAUSE_UNSPECIFIED":          0,
		"IMAGE_VALIDATION_SKIP_CAUSE_INACTIVE":             1,
		"IMAGE_VALIDATION_SKIP_CAUSE_PRE_PROVISIONED":      2,
		"IMAGE_VALIDATION_SKIP_CAUSE_IMAGE_UNCHANGED":      3,
		"IMAGE_VALIDATION_SKIP_CAUSE_NO_PROPOSED_SOFTWARE": 4,
	}
)

func (x ImageValidationSkipCause) Enum() *ImageValidationSkipCause {
	p := new(ImageValidationSkipCause)
	*p = x
	return p
}

func (x ImageValidationSkipCause) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImageValidationSkipCause) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_workspace_v1_workspace_proto_enumTypes[8].Descriptor()
}

func (ImageValidationSkipCause) Type() protoreflect.EnumType {
	return &file_arista_workspace_v1_workspace_proto_enumTypes[8]
}

func (x ImageValidationSkipCause) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImageValidationSkipCause.Descriptor instead.
func (ImageValidationSkipCause) EnumDescriptor() ([]byte, []int) {
	return file_arista_workspace_v1_workspace_proto_rawDescGZIP(), []int{8}
}

// ConfigSyncSkipCause enumerates the set of reasons a device can skip config sync.
type ConfigSyncSkipCause int32

const (
	// CONFIG_SYNC_SKIP_CAUSE_UNSPECIFIED indicates that config sync skip cause is
	// unspecified.
	ConfigSyncSkipCause_CONFIG_SYNC_SKIP_CAUSE_UNSPECIFIED ConfigSyncSkipCause = 0
	// CONFIG_SYNC_SKIP_CAUSE_INACTIVE indicates that config sync is skipped because
	// device is not streaming.
	ConfigSyncSkipCause_CONFIG_SYNC_SKIP_CAUSE_INACTIVE ConfigSyncSkipCause = 1
	// CONFIG_SYNC_SKIP_CAUSE_PRE_PROVISIONED indicates that config sync is skipped
	// because device is pre-provisioned.
	ConfigSyncSkipCause_CONFIG_SYNC_SKIP_CAUSE_PRE_PROVISIONED ConfigSyncSkipCause = 2
	// CONFIG_SYNC_SKIP_CAUSE_IN_COMPLIANCE indicates that config sync is skipped
	// because device is in compliance.
	ConfigSyncSkipCause_CONFIG_SYNC_SKIP_CAUSE_IN_COMPLIANCE ConfigSyncSkipCause = 3
	// CONFIG_SYNC_SKIP_CAUSE_NO_CONFIG_SOURCES indicates that the sync was
	// skipped because the device has no config sources.
	ConfigSyncSkipCause_CONFIG_SYNC_SKIP_CAUSE_NO_CONFIG_SOURCES ConfigSyncSkipCause = 4
	// CONFIG_SYNC_SKIP_CAUSE_DEVICE_DECOMMISSIONED indicates that sync was
	// skipped because the device is decommissioned in the workspace.
	ConfigSyncSkipCause_CONFIG_SYNC_SKIP_CAUSE_DEVICE_DECOMMISSIONED ConfigSyncSkipCause = 5
)

// Enum value maps for ConfigSyncSkipCause.
var (
	ConfigSyncSkipCause_name = map[int32]string{
		0: "CONFIG_SYNC_SKIP_CAUSE_UNSPECIFIED",
		1: "CONFIG_SYNC_SKIP_CAUSE_INACTIVE",
		2: "CONFIG_SYNC_SKIP_CAUSE_PRE_PROVISIONED",
		3: "CONFIG_SYNC_SKIP_CAUSE_IN_COMPLIANCE",
		4: "CONFIG_SYNC_SKIP_CAUSE_NO_CONFIG_SOURCES",
		5: "CONFIG_SYNC_SKIP_CAUSE_DEVICE_DECOMMISSIONED",
	}
	ConfigSyncSkipCause_value = map[string]int32{
		"CONFIG_SYNC_SKIP_CAUSE_UNSPECIFIED":           0,
		"CONFIG_SYNC_SKIP_CAUSE_INACTIVE":              1,
		"CONFIG_SYNC_SKIP_CAUSE_PRE_PROVISIONED":       2,
		"CONFIG_SYNC_SKIP_CAUSE_IN_COMPLIANCE":         3,
		"CONFIG_SYNC_SKIP_CAUSE_NO_CONFIG_SOURCES":     4,
		"CONFIG_SYNC_SKIP_CAUSE_DEVICE_DECOMMISSIONED": 5,
	}
)

func (x ConfigSyncSkipCause) Enum() *ConfigSyncSkipCause {
	p := new(ConfigSyncSkipCause)
	*p = x
	return p
}

func (x ConfigSyncSkipCause) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigSyncSkipCause) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_workspace_v1_workspace_proto_enumTypes[9].Descriptor()
}

func (ConfigSyncSkipCause) Type() protoreflect.EnumType {
	return &file_arista_workspace_v1_workspace_proto_enumTypes[9]
}

func (x ConfigSyncSkipCause) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigSyncSkipCause.Descriptor instead.
func (ConfigSyncSkipCause) EnumDescriptor() ([]byte, []int) {
	return file_arista_workspace_v1_workspace_proto_rawDescGZIP(), []int{9}
}

// SyncOperation enumerates sync operations.
type SyncOperation int32

const (
	// SYNC_OPERATION_UNSPECIFIED indicates unspecified sync operation.
	SyncOperation_SYNC_OPERATION_UNSPECIFIED SyncOperation = 0
	// SYNC_OPERATION_CONFIG indicates config sync operation.
	SyncOperation_SYNC_OPERATION_CONFIG SyncOperation = 1
)

// Enum value maps for SyncOperation.
var (
	SyncOperation_name = map[int32]string{
		0: "SYNC_OPERATION_UNSPECIFIED",
		1: "SYNC_OPERATION_CONFIG",
	}
	SyncOperation_value = map[string]int32{
		"SYNC_OPERATION_UNSPECIFIED": 0,
		"SYNC_OPERATION_CONFIG":      1,
	}
)

func (x SyncOperation) Enum() *SyncOperation {
	p := new(SyncOperation)
	*p = x
	return p
}

func (x SyncOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SyncOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_workspace_v1_workspace_proto_enumTypes[10].Descriptor()
}

func (SyncOperation) Type() protoreflect.EnumType {
	return &file_arista_workspace_v1_workspace_proto_enumTypes[10]
}

func (x SyncOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SyncOperation.Descriptor instead.
func (SyncOperation) EnumDescriptor() ([]byte, []int) {
	return file_arista_workspace_v1_workspace_proto_rawDescGZIP(), []int{10}
}

// RequestParams define the parameters for a Request.
type RequestParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// request_id is the unique ID of the request. This is used to identify
	// the Response for the request in Responses.
	RequestId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *RequestParams) Reset() {
	*x = RequestParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_workspace_v1_workspace_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestParams) ProtoMessage() {}

func (x *RequestParams) ProtoReflect() protoreflect.Message {
	mi := &file_arista_workspace_v1_workspace_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestParams.ProtoReflect.Descriptor instead.
func (*RequestParams) Descriptor() ([]byte, []int) {
	return file_arista_workspace_v1_workspace_proto_rawDescGZIP(), []int{0}
}

func (x *RequestParams) GetRequestId() *wrapperspb.StringValue {
	if x != nil {
		return x.RequestId
	}
	return nil
}

// Response is a response to a Request.
type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// status is the execution status of the response.
	Status ResponseStatus `protobuf:"varint,1,opt,name=status,proto3,enum=arista.workspace.v1.ResponseStatus" json:"status,omitempty"`
	// message is a string that provides more details about the response.
	Message *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// code is the code of the response.
	Code ResponseCode `protobuf:"varint,3,opt,name=code,proto3,enum=arista.workspace.v1.ResponseCode" json:"code,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_workspace_v1_workspace_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_arista_workspace_v1_workspace_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_arista_workspace_v1_workspace_proto_rawDescGZIP(), []int{1}
}

func (x *Response) GetStatus() ResponseStatus {
	if x != nil {
		return x.Status
	}
	return ResponseStatus_RESPONSE_STATUS_UNSPECIFIED
}

func (x *Response) GetMessage() *wrapperspb.StringValue {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *Response) GetCode() ResponseCode {
	if x != nil {
		return x.Code
	}
	return ResponseCode_RESPONSE_CODE_UNSPECIFIED
}

// Responses is a collection of responses for completed requests.
type Responses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values is a map from request ID to Response.
	Values map[string]*Response `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Responses) Reset() {
	*x = Responses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_workspace_v1_workspace_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Responses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Responses) ProtoMessage() {}

func (x *Responses) ProtoReflect() protoreflect.Message {
	mi := &file_arista_workspace_v1_workspace_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Responses.ProtoReflect.Descriptor instead.
func (*Responses) Descriptor() ([]byte, []int) {
	return file_arista_workspace_v1_workspace_proto_rawDescGZIP(), []int{2}
}

func (x *Responses) GetValues() map[string]*Response {
	if x != nil {
		return x.Values
	}
	return nil
}

// WorkspaceKey uniquely identifies a workspace.
type WorkspaceKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// workspace_id is the unique ID of the workspace.
	WorkspaceId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *WorkspaceKey) Reset() {
	*x = WorkspaceKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_workspace_v1_workspace_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceKey) ProtoMessage() {}

func (x *WorkspaceKey) ProtoReflect() protoreflect.Message {
	mi := &file_arista_workspace_v1_workspace_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceKey.ProtoReflect.Descriptor instead.
func (*WorkspaceKey) Descriptor() ([]byte, []int) {
	return file_arista_workspace_v1_workspace_proto_rawDescGZIP(), []int{3}
}

func (x *WorkspaceKey) GetWorkspaceId() *wrapperspb.StringValue {
	if x != nil {
		return x.WorkspaceId
	}
	return nil
}

// WorkspaceConfig holds the configuration of a workspace.
type WorkspaceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key identifies the workspace.
	Key *WorkspaceKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// display_name is the user-defined name of the workspace.
	DisplayName *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// description is a brief description of the workspace.
	Description *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// request (if not REQUEST_UNSPECIFIED) kicks off an asynchronous operation
	// on the workspace.
	Request Request `protobuf:"varint,4,opt,name=request,proto3,enum=arista.workspace.v1.Request" json:"request,omitempty"`
	// request_params specify the parameters for `request`.
	RequestParams *RequestParams `protobuf:"bytes,5,opt,name=request_params,json=requestParams,proto3" json:"request_params,omitempty"`
}

func (x *WorkspaceConfig) Reset() {
	*x = WorkspaceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_workspace_v1_workspace_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceConfig) ProtoMessage() {}

func (x *WorkspaceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_arista_workspace_v1_workspace_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceConfig.ProtoReflect.Descriptor instead.
func (*WorkspaceConfig) Descriptor() ([]byte, []int) {
	return file_arista_workspace_v1_workspace_proto_rawDescGZIP(), []int{4}
}

func (x *WorkspaceConfig) GetKey() *WorkspaceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *WorkspaceConfig) GetDisplayName() *wrapperspb.StringValue {
	if x != nil {
		return x.DisplayName
	}
	return nil
}

func (x *WorkspaceConfig) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *WorkspaceConfig) GetRequest() Request {
	if x != nil {
		return x.Request
	}
	return Request_REQUEST_UNSPECIFIED
}

func (x *WorkspaceConfig) GetRequestParams() *RequestParams {
	if x != nil {
		return x.RequestParams
	}
	return nil
}

// Workspace holds the status of a workspace.
type Workspace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key identifies the workspace.
	Key *WorkspaceKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// created_at indicates when the workspace was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// created_by indicates who created the workspace.
	CreatedBy *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// last_modified_at indicates when the workspace was last updated.
	LastModifiedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=last_modified_at,json=lastModifiedAt,proto3" json:"last_modified_at,omitempty"`
	// last_modified_by indicates who last updated the workspace.
	LastModifiedBy *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=last_modified_by,json=lastModifiedBy,proto3" json:"last_modified_by,omitempty"`
	// state describes the status of the workspace.
	State WorkspaceState `protobuf:"varint,6,opt,name=state,proto3,enum=arista.workspace.v1.WorkspaceState" json:"state,omitempty"`
	// last_build_id is the last build ID that was set in a WorkspaceBuild
	// for this workspace.
	LastBuildId *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=last_build_id,json=lastBuildId,proto3" json:"last_build_id,omitempty"`
	// responses are the responses for all requests that have been executed
	// thusfar for this workspace.
	Responses *Responses `protobuf:"bytes,8,opt,name=responses,proto3" json:"responses,omitempty"`
	// cc_ids are the IDs of any change controls that were created as a result
	// of submitting this workspace.
	CcIds *fmp.RepeatedString `protobuf:"bytes,9,opt,name=cc_ids,json=ccIds,proto3" json:"cc_ids,omitempty"`
	// needs_build indicates whether a rebuild of the workspace is necessary
	// in order to submit it.
	NeedsBuild *wrapperspb.BoolValue `protobuf:"bytes,10,opt,name=needs_build,json=needsBuild,proto3" json:"needs_build,omitempty"`
	// last_rebased_at indicates when the workspace was last rebased.
	LastRebasedAt *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=last_rebased_at,json=lastRebasedAt,proto3" json:"last_rebased_at,omitempty"`
	// needs_rebase indicates whether a rebase of the workspace is necessary
	// in order to submit it.
	NeedsRebase *wrapperspb.BoolValue `protobuf:"bytes,12,opt,name=needs_rebase,json=needsRebase,proto3" json:"needs_rebase,omitempty"`
	// display_name is the user-defined name of the workspace.
	DisplayName *wrapperspb.StringValue `protobuf:"bytes,13,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// description is a brief description of the workspace.
	Description *wrapperspb.StringValue `protobuf:"bytes,14,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Workspace) Reset() {
	*x = Workspace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_workspace_v1_workspace_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Workspace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workspace) ProtoMessage() {}

func (x *Workspace) ProtoReflect() protoreflect.Message {
	mi := &file_arista_workspace_v1_workspace_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workspace.ProtoReflect.Descriptor instead.
func (*Workspace) Descriptor() ([]byte, []int) {
	return file_arista_workspace_v1_workspace_proto_rawDescGZIP(), []int{5}
}

func (x *Workspace) GetKey() *WorkspaceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Workspace) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Workspace) GetCreatedBy() *wrapperspb.StringValue {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *Workspace) GetLastModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastModifiedAt
	}
	return nil
}

func (x *Workspace) GetLastModifiedBy() *wrapperspb.StringValue {
	if x != nil {
		return x.LastModifiedBy
	}
	return nil
}

func (x *Workspace) GetState() WorkspaceState {
	if x != nil {
		return x.State
	}
	return WorkspaceState_WORKSPACE_STATE_UNSPECIFIED
}

func (x *Workspace) GetLastBuildId() *wrapperspb.StringValue {
	if x != nil {
		return x.LastBuildId
	}
	return nil
}

func (x *Workspace) GetResponses() *Responses {
	if x != nil {
		return x.Responses
	}
	return nil
}

func (x *Workspace) GetCcIds() *fmp.RepeatedString {
	if x != nil {
		return x.CcIds
	}
	return nil
}

func (x *Workspace) GetNeedsBuild() *wrapperspb.BoolValue {
	if x != nil {
		return x.NeedsBuild
	}
	return nil
}

func (x *Workspace) GetLastRebasedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastRebasedAt
	}
	return nil
}

func (x *Workspace) GetNeedsRebase() *wrapperspb.BoolValue {
	if x != nil {
		return x.NeedsRebase
	}
	return nil
}

func (x *Workspace) GetDisplayName() *wrapperspb.StringValue {
	if x != nil {
		return x.DisplayName
	}
	return nil
}

func (x *Workspace) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

// InputError holds the details for an error on a studio input field or value.
type InputError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// field_id is the ID of the input field.
	FieldId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=field_id,json=fieldId,proto3" json:"field_id,omitempty"`
	// path is the path leading up to the input field.
	Path *fmp.RepeatedString `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// members are the members of the input field (if it is a group).
	Members *fmp.RepeatedString `protobuf:"bytes,3,opt,name=members,proto3" json:"members,omitempty"`
	// message is the error message.
	Message *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *InputError) Reset() {
	*x = InputError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_workspace_v1_workspace_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputError) ProtoMessage() {}

func (x *InputError) ProtoReflect() protoreflect.Message {
	mi := &file_arista_workspace_v1_workspace_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputError.ProtoReflect.Descriptor instead.
func (*InputError) Descriptor() ([]byte, []int) {
	return file_arista_workspace_v1_workspace_proto_rawDescGZIP(), []int{6}
}

func (x *InputError) GetFieldId() *wrapperspb.StringValue {
	if x != nil {
		return x.FieldId
	}
	return nil
}

func (x *InputError) GetPath() *fmp.RepeatedString {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *InputError) GetMembers() *fmp.RepeatedString {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *InputError) GetMessage() *wrapperspb.StringValue {
	if x != nil {
		return x.Message
	}
	return nil
}

// InputErrors is a list of InputError.
type InputErrors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values is a list of InputError.
	Values []*InputError `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *InputErrors) Reset() {
	*x = InputErrors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_workspace_v1_workspace_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputErrors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputErrors) ProtoMessage() {}

func (x *InputErrors) ProtoReflect() protoreflect.Message {
	mi := &file_arista_workspace_v1_workspace_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputErrors.ProtoReflect.Descriptor instead.
func (*InputErrors) Descriptor() ([]byte, []int) {
	return file_arista_workspace_v1_workspace_proto_rawDescGZIP(), []int{7}
}

func (x *InputErrors) GetValues() []*InputError {
	if x != nil {
		return x.Values
	}
	return nil
}

// InputValidationResult holds the result of an input validation build stage.
type InputValidationResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// input_schema_errors are errors for fields in the input schema.
	InputSchemaErrors *InputErrors `protobuf:"bytes,1,opt,name=input_schema_errors,json=inputSchemaErrors,proto3" json:"input_schema_errors,omitempty"`
	// input_value_errors are errors for values assigned to fields in the input schema.
	InputValueErrors *InputErrors `protobuf:"bytes,2,opt,name=input_value_errors,json=inputValueErrors,proto3" json:"input_value_errors,omitempty"`
	// other_errors are other miscellaneous errors.
	OtherErrors *fmp.RepeatedString `protobuf:"bytes,3,opt,name=other_errors,json=otherErrors,proto3" json:"other_errors,omitempty"`
}

func (x *InputValidationResult) Reset() {
	*x = InputValidationResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_workspace_v1_workspace_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputValidationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputValidationResult) ProtoMessage() {}

func (x *InputValidationResult) ProtoReflect() protoreflect.Message {
	mi := &file_arista_workspace_v1_workspace_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputValidationResult.ProtoReflect.Descriptor instead.
func (*InputValidationResult) Descriptor() ([]byte, []int) {
	return file_arista_workspace_v1_workspace_proto_rawDescGZIP(), []int{8}
}

func (x *InputValidationResult) GetInputSchemaErrors() *InputErrors {
	if x != nil {
		return x.InputSchemaErrors
	}
	return nil
}

func (x *InputValidationResult) GetInputValueErrors() *InputErrors {
	if x != nil {
		return x.InputValueErrors
	}
	return nil
}

func (x *InputValidationResult) GetOtherErrors() *fmp.RepeatedString {
	if x != nil {
		return x.OtherErrors
	}
	return nil
}

// InputValidationResults is a collection of InputValidationResult (one per studio).
type InputValidationResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values is map from studio ID to InputValidationResult.
	Values map[string]*InputValidationResult `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *InputValidationResults) Reset() {
	*x = InputValidationResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_workspace_v1_workspace_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputValidationResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputValidationResults) ProtoMessage() {}

func (x *InputValidationResults) ProtoReflect() protoreflect.Message {
	mi := &file_arista_workspace_v1_workspace_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputValidationResults.ProtoReflect.Descriptor instead.
func (*InputValidationResults) Descriptor() ([]byte, []int) {
	return file_arista_workspace_v1_workspace_proto_rawDescGZIP(), []int{9}
}

func (x *InputValidationResults) GetValues() map[string]*InputValidationResult {
	if x != nil {
		return x.Values
	}
	return nil
}

// TemplateError holds details for an error that occured while evaluating a studio
// template against its inputs.
type TemplateError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// line_num is the number of the line on which the error occurred.
	LineNum *wrapperspb.UInt32Value `protobuf:"bytes,1,opt,name=line_num,json=lineNum,proto3" json:"line_num,omitempty"`
	// exception is the type of the exception thrown during the script execution.
	// E.g., AssertionError, etc.
	Exception *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=exception,proto3" json:"exception,omitempty"`
	// detail holds the details of the exception. E.g., a full backtrace.
	Detail *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=detail,proto3" json:"detail,omitempty"`
	// exception_msg is the message of the exception thrown during the script execution.
	ExceptionMsg *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=exception_msg,json=exceptionMsg,proto3" json:"exception_msg,omitempty"`
}

func (x *TemplateError) Reset() {
	*x = TemplateError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_workspace_v1_workspace_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplateError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateError) ProtoMessage() {}

func (x *TemplateError) ProtoReflect() protoreflect.Message {
	mi := &file_arista_workspace_v1_workspace_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateError.ProtoReflect.Descriptor instead.
func (*TemplateError) Descriptor() ([]byte, []int) {
	return file_arista_workspace_v1_workspace_proto_rawDescGZIP(), []int{10}
}

func (x *TemplateError) GetLineNum() *wrapperspb.UInt32Value {
	if x != nil {
		return x.LineNum
	}
	return nil
}

func (x *TemplateError) GetException() *wrapperspb.StringValue {
	if x != nil {
		return x.Exception
	}
	return nil
}

func (x *TemplateError) GetDetail() *wrapperspb.StringValue {
	if x != nil {
		return x.Detail
	}
	return nil
}

func (x *TemplateError) GetExceptionMsg() *wrapperspb.StringValue {
	if x != nil {
		return x.ExceptionMsg
	}
	return nil
}

// TemplateErrors is a list of TemplateError.
type TemplateErrors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values is a list of TemplateError.
	Values []*TemplateError `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *TemplateErrors) Reset() {
	*x = TemplateErrors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_workspace_v1_workspace_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplateErrors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateErrors) ProtoMessage() {}

func (x *TemplateErrors) ProtoReflect() protoreflect.Message {
	mi := &file_arista_workspace_v1_workspace_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateErrors.ProtoReflect.Descriptor instead.
func (*TemplateErrors) Descriptor() ([]byte, []int) {
	return file_arista_workspace_v1_workspace_proto_rawDescGZIP(), []int{11}
}

func (x *TemplateErrors) GetValues() []*TemplateError {
	if x != nil {
		return x.Values
	}
	return nil
}

// ConfigletBuildResult holds the result of a configlet build stage.
type ConfigletBuildResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// template_errors are errors that occured during studio template evaluation.
	TemplateErrors *TemplateErrors `protobuf:"bytes,1,opt,name=template_errors,json=templateErrors,proto3" json:"template_errors,omitempty"`
	// generated_config is the EOS CLI config that was generated from the stage.
	GeneratedConfig *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=generated_config,json=generatedConfig,proto3" json:"generated_config,omitempty"`
	// other_error is any other miscellaneous error.
	OtherError *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=other_error,json=otherError,proto3" json:"other_error,omitempty"`
	// execution_id is the unique ID for the execution of the template. This ID
	// can be used to retrieve logs generated by the template.
	ExecutionId *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=execution_id,json=executionId,proto3" json:"execution_id,omitempty"`
	// input_errors are errors in input fields that are raised by the template.
	InputErrors *InputErrors `protobuf:"bytes,5,opt,name=input_errors,json=inputErrors,proto3" json:"input_errors,omitempty"`
}

func (x *ConfigletBuildResult) Reset() {
	*x = ConfigletBuildResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_workspace_v1_workspace_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigletBuildResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigletBuildResult) ProtoMessage() {}

func (x *ConfigletBuildResult) ProtoReflect() protoreflect.Message {
	mi := &file_arista_workspace_v1_workspace_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigletBuildResult.ProtoReflect.Descriptor instead.
func (*ConfigletBuildResult) Descriptor() ([]byte, []int) {
	return file_arista_workspace_v1_workspace_proto_rawDescGZIP(), []int{12}
}

func (x *ConfigletBuildResult) GetTemplateErrors() *TemplateErrors {
	if x != nil {
		return x.TemplateErrors
	}
	return nil
}

func (x *ConfigletBuildResult) GetGeneratedConfig() *wrapperspb.StringValue {
	if x != nil {
		return x.GeneratedConfig
	}
	return nil
}

func (x *ConfigletBuildResult) GetOtherError() *wrapperspb.StringValue {
	if x != nil {
		return x.OtherError
	}
	return nil
}

func (x *ConfigletBuildResult) GetExecutionId() *wrapperspb.StringValue {
	if x != nil {
		return x.ExecutionId
	}
	return nil
}

func (x *ConfigletBuildResult) GetInputErrors() *InputErrors {
	if x != nil {
		return x.InputErrors
	}
	return nil
}

// ConfigletBuildResults is a collection of ConfigletBuildResult (one per studio).
type ConfigletBuildResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values is a map from studio ID to ConfigletBuildResult.
	Values map[string]*ConfigletBuildResult `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ConfigletBuildResults) Reset() {
	*x = ConfigletBuildResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_workspace_v1_workspace_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigletBuildResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigletBuildResults) ProtoMessage() {}

func (x *ConfigletBuildResults) ProtoReflect() protoreflect.Message {
	mi := &file_arista_workspace_v1_workspace_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigletBuildResults.ProtoReflect.Descriptor instead.
func (*ConfigletBuildResults) Descriptor() ([]byte, []int) {
	return file_arista_workspace_v1_workspace_proto_rawDescGZIP(), []int{13}
}

func (x *ConfigletBuildResults) GetValues() map[string]*ConfigletBuildResult {
	if x != nil {
		return x.Values
	}
	return nil
}

// ConfigValidationResult holds the result of a config validation stage.
type ConfigValidationResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// summary is a summary of the changes to the previous config.
	Summary *configstatus_v1.ConfigSummary `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary,omitempty"`
	// errors are any errors detected in the generated config.
	Errors *configstatus_v1.ConfigErrors `protobuf:"bytes,2,opt,name=errors,proto3" json:"errors,omitempty"`
	// warnings are any warnings about the generated config.
	Warnings *configstatus_v1.ConfigErrors `protobuf:"bytes,3,opt,name=warnings,proto3" json:"warnings,omitempty"`
	// config_sources identify the entities that generated the config.
	ConfigSources *configstatus_v1.ConfigSources `protobuf:"bytes,4,opt,name=config_sources,json=configSources,proto3" json:"config_sources,omitempty"`
}

func (x *ConfigValidationResult) Reset() {
	*x = ConfigValidationResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_workspace_v1_workspace_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigValidationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigValidationResult) ProtoMessage() {}

func (x *ConfigValidationResult) ProtoReflect() protoreflect.Message {
	mi := &file_arista_workspace_v1_workspace_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigValidationResult.ProtoReflect.Descriptor instead.
func (*ConfigValidationResult) Descriptor() ([]byte, []int) {
	return file_arista_workspace_v1_workspace_proto_rawDescGZIP(), []int{14}
}

func (x *ConfigValidationResult) GetSummary() *configstatus_v1.ConfigSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *ConfigValidationResult) GetErrors() *configstatus_v1.ConfigErrors {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *ConfigValidationResult) GetWarnings() *configstatus_v1.ConfigErrors {
	if x != nil {
		return x.Warnings
	}
	return nil
}

func (x *ConfigValidationResult) GetConfigSources() *configstatus_v1.ConfigSources {
	if x != nil {
		return x.ConfigSources
	}
	return nil
}

// ImageValidationResult holds the result of an image validation stage.
type ImageValidationResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// summary is a summary of the changes to the previous image.
	Summary *imagestatus_v1.ImageSummary `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary,omitempty"`
	// errors are any errors detected in the generated image.
	Errors *imagestatus_v1.ImageErrors `protobuf:"bytes,2,opt,name=errors,proto3" json:"errors,omitempty"`
	// warnings are any warnings about the generated image.
	Warnings *imagestatus_v1.ImageWarnings `protobuf:"bytes,3,opt,name=warnings,proto3" json:"warnings,omitempty"`
	// image_input_error indicates any errors in image inputs.
	ImageInputError *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=image_input_error,json=imageInputError,proto3" json:"image_input_error,omitempty"`
	// infos are any info messages about the generated image.
	Infos *imagestatus_v1.ImageInfos `protobuf:"bytes,5,opt,name=infos,proto3" json:"infos,omitempty"`
}

func (x *ImageValidationResult) Reset() {
	*x = ImageValidationResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_workspace_v1_workspace_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageValidationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageValidationResult) ProtoMessage() {}

func (x *ImageValidationResult) ProtoReflect() protoreflect.Message {
	mi := &file_arista_workspace_v1_workspace_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageValidationResult.ProtoReflect.Descriptor instead.
func (*ImageValidationResult) Descriptor() ([]byte, []int) {
	return file_arista_workspace_v1_workspace_proto_rawDescGZIP(), []int{15}
}

func (x *ImageValidationResult) GetSummary() *imagestatus_v1.ImageSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *ImageValidationResult) GetErrors() *imagestatus_v1.ImageErrors {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *ImageValidationResult) GetWarnings() *imagestatus_v1.ImageWarnings {
	if x != nil {
		return x.Warnings
	}
	return nil
}

func (x *ImageValidationResult) GetImageInputError() *wrapperspb.StringValue {
	if x != nil {
		return x.ImageInputError
	}
	return nil
}

func (x *ImageValidationResult) GetInfos() *imagestatus_v1.ImageInfos {
	if x != nil {
		return x.Infos
	}
	return nil
}

// ConfigSyncResult holds the result of config sync operation.
type ConfigSyncResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// summary is a summary of the changes to the running config.
	Summary *configstatus_v1.ConfigSummary `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary,omitempty"`
	// errors are any errors detected during sync.
	Errors *configstatus_v1.ConfigErrors `protobuf:"bytes,2,opt,name=errors,proto3" json:"errors,omitempty"`
	// config_sources identify the entities that generated the designed config.
	ConfigSources *configstatus_v1.ConfigSources `protobuf:"bytes,3,opt,name=config_sources,json=configSources,proto3" json:"config_sources,omitempty"`
}

func (x *ConfigSyncResult) Reset() {
	*x = ConfigSyncResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_workspace_v1_workspace_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigSyncResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigSyncResult) ProtoMessage() {}

func (x *ConfigSyncResult) ProtoReflect() protoreflect.Message {
	mi := &file_arista_workspace_v1_workspace_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigSyncResult.ProtoReflect.Descriptor instead.
func (*ConfigSyncResult) Descriptor() ([]byte, []int) {
	return file_arista_workspace_v1_workspace_proto_rawDescGZIP(), []int{16}
}

func (x *ConfigSyncResult) GetSummary() *configstatus_v1.ConfigSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *ConfigSyncResult) GetErrors() *configstatus_v1.ConfigErrors {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *ConfigSyncResult) GetConfigSources() *configstatus_v1.ConfigSources {
	if x != nil {
		return x.ConfigSources
	}
	return nil
}

// BuildStageState holds the state per build stage.
type BuildStageState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values is a map from build stage to build state.
	// The possible keys to this map are BUILD_STAGE_UNSPECIFIED,
	// BUILD_STAGE_INPUT_VALIDATION, BUILD_STAGE_CONFIGLET_BUILD,
	// BUILD_STAGE_CONFIG_VALIDATION and BUILD_STAGE_IMAGE_VALIDATION.
	Values map[string]BuildState `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=arista.workspace.v1.BuildState"`
}

func (x *BuildStageState) Reset() {
	*x = BuildStageState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_workspace_v1_workspace_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildStageState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildStageState) ProtoMessage() {}

func (x *BuildStageState) ProtoReflect() protoreflect.Message {
	mi := &file_arista_workspace_v1_workspace_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildStageState.ProtoReflect.Descriptor instead.
func (*BuildStageState) Descriptor() ([]byte, []int) {
	return file_arista_workspace_v1_workspace_proto_rawDescGZIP(), []int{17}
}

func (x *BuildStageState) GetValues() map[string]BuildState {
	if x != nil {
		return x.Values
	}
	return nil
}

// AuthzResult has the result of the authorization check for workspace changes.
type AuthzResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// has_unauthorized_tag_change is true when there is a tag assignment that results
	// in change in permissions and the subject is not authorized to do it.
	HasUnauthorizedTagChange *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=has_unauthorized_tag_change,json=hasUnauthorizedTagChange,proto3" json:"has_unauthorized_tag_change,omitempty"`
	// has_unauthorized_device_change is true when there is atleast 1 device
	// for which the subject doesn't have provision permission.
	HasUnauthorizedDeviceChange *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=has_unauthorized_device_change,json=hasUnauthorizedDeviceChange,proto3" json:"has_unauthorized_device_change,omitempty"`
	// error is an error message that is set when either of the above values
	// are true.
	Error *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *AuthzResult) Reset() {
	*x = AuthzResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_workspace_v1_workspace_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthzResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthzResult) ProtoMessage() {}

func (x *AuthzResult) ProtoReflect() protoreflect.Message {
	mi := &file_arista_workspace_v1_workspace_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthzResult.ProtoReflect.Descriptor instead.
func (*AuthzResult) Descriptor() ([]byte, []int) {
	return file_arista_workspace_v1_workspace_proto_rawDescGZIP(), []int{18}
}

func (x *AuthzResult) GetHasUnauthorizedTagChange() *wrapperspb.BoolValue {
	if x != nil {
		return x.HasUnauthorizedTagChange
	}
	return nil
}

func (x *AuthzResult) GetHasUnauthorizedDeviceChange() *wrapperspb.BoolValue {
	if x != nil {
		return x.HasUnauthorizedDeviceChange
	}
	return nil
}

func (x *AuthzResult) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

// WorkspaceBuildKey uniquely identifies a build for a workspace.
type WorkspaceBuildKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// workspace_id is the ID of the workspace.
	WorkspaceId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	// build_id is the ID of the build.
	BuildId *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
}

func (x *WorkspaceBuildKey) Reset() {
	*x = WorkspaceBuildKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_workspace_v1_workspace_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceBuildKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceBuildKey) ProtoMessage() {}

func (x *WorkspaceBuildKey) ProtoReflect() protoreflect.Message {
	mi := &file_arista_workspace_v1_workspace_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceBuildKey.ProtoReflect.Descriptor instead.
func (*WorkspaceBuildKey) Descriptor() ([]byte, []int) {
	return file_arista_workspace_v1_workspace_proto_rawDescGZIP(), []int{19}
}

func (x *WorkspaceBuildKey) GetWorkspaceId() *wrapperspb.StringValue {
	if x != nil {
		return x.WorkspaceId
	}
	return nil
}

func (x *WorkspaceBuildKey) GetBuildId() *wrapperspb.StringValue {
	if x != nil {
		return x.BuildId
	}
	return nil
}

// WorkspaceBuild holds the details for a build of a workspace.
type WorkspaceBuild struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key identifies the build.
	Key *WorkspaceBuildKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// state is the execution status of the build.
	State BuildState `protobuf:"varint,2,opt,name=state,proto3,enum=arista.workspace.v1.BuildState" json:"state,omitempty"`
	// error is an error message that is set if the build fails early before
	// the per-device build result is computed.
	Error *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	// built_by is the details of subject who built the workspace.
	BuiltBy *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=built_by,json=builtBy,proto3" json:"built_by,omitempty"`
	// authz_result has the result of authorization check.
	AuthzResult *AuthzResult `protobuf:"bytes,6,opt,name=authz_result,json=authzResult,proto3" json:"authz_result,omitempty"`
}

func (x *WorkspaceBuild) Reset() {
	*x = WorkspaceBuild{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_workspace_v1_workspace_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceBuild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceBuild) ProtoMessage() {}

func (x *WorkspaceBuild) ProtoReflect() protoreflect.Message {
	mi := &file_arista_workspace_v1_workspace_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceBuild.ProtoReflect.Descriptor instead.
func (*WorkspaceBuild) Descriptor() ([]byte, []int) {
	return file_arista_workspace_v1_workspace_proto_rawDescGZIP(), []int{20}
}

func (x *WorkspaceBuild) GetKey() *WorkspaceBuildKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *WorkspaceBuild) GetState() BuildState {
	if x != nil {
		return x.State
	}
	return BuildState_BUILD_STATE_UNSPECIFIED
}

func (x *WorkspaceBuild) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *WorkspaceBuild) GetBuiltBy() *wrapperspb.StringValue {
	if x != nil {
		return x.BuiltBy
	}
	return nil
}

func (x *WorkspaceBuild) GetAuthzResult() *AuthzResult {
	if x != nil {
		return x.AuthzResult
	}
	return nil
}

// WorkspaceBuildDetailsKey uniquely identifies a build for a particular
// device in a workspace.
type WorkspaceBuildDetailsKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// workspace_id is the ID of the workspace.
	WorkspaceId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	// build_id is the ID of the build.
	BuildId *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
	// device_id is the ID of the device.
	DeviceId *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (x *WorkspaceBuildDetailsKey) Reset() {
	*x = WorkspaceBuildDetailsKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_workspace_v1_workspace_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceBuildDetailsKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceBuildDetailsKey) ProtoMessage() {}

func (x *WorkspaceBuildDetailsKey) ProtoReflect() protoreflect.Message {
	mi := &file_arista_workspace_v1_workspace_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceBuildDetailsKey.ProtoReflect.Descriptor instead.
func (*WorkspaceBuildDetailsKey) Descriptor() ([]byte, []int) {
	return file_arista_workspace_v1_workspace_proto_rawDescGZIP(), []int{21}
}

func (x *WorkspaceBuildDetailsKey) GetWorkspaceId() *wrapperspb.StringValue {
	if x != nil {
		return x.WorkspaceId
	}
	return nil
}

func (x *WorkspaceBuildDetailsKey) GetBuildId() *wrapperspb.StringValue {
	if x != nil {
		return x.BuildId
	}
	return nil
}

func (x *WorkspaceBuildDetailsKey) GetDeviceId() *wrapperspb.StringValue {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

// WorkspaceBuildDetails holds the details for a build of a device in a workspace.
type WorkspaceBuildDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key identifies the build.
	Key *WorkspaceBuildDetailsKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// state is the execution status of the build.
	State BuildState `protobuf:"varint,2,opt,name=state,proto3,enum=arista.workspace.v1.BuildState" json:"state,omitempty"`
	// stage is the stage of the build.
	Stage BuildStage `protobuf:"varint,3,opt,name=stage,proto3,enum=arista.workspace.v1.BuildStage" json:"stage,omitempty"`
	// input_validation_results are the results of the input validation stage.
	InputValidationResults *InputValidationResults `protobuf:"bytes,4,opt,name=input_validation_results,json=inputValidationResults,proto3" json:"input_validation_results,omitempty"`
	// configlet_build_results are the results of the configlet build stage.
	ConfigletBuildResults *ConfigletBuildResults `protobuf:"bytes,5,opt,name=configlet_build_results,json=configletBuildResults,proto3" json:"configlet_build_results,omitempty"`
	// config_validation_result is the result of the config validation stage.
	ConfigValidationResult *ConfigValidationResult `protobuf:"bytes,6,opt,name=config_validation_result,json=configValidationResult,proto3" json:"config_validation_result,omitempty"`
	// image_validation_result is the result of the image validation stage.
	ImageValidationResult *ImageValidationResult `protobuf:"bytes,7,opt,name=image_validation_result,json=imageValidationResult,proto3" json:"image_validation_result,omitempty"`
	// config_validation_skip_cause is the reason, if any, that the config
	// validation stage was skipped.
	ConfigValidationSkipCause ConfigValidationSkipCause `protobuf:"varint,8,opt,name=config_validation_skip_cause,json=configValidationSkipCause,proto3,enum=arista.workspace.v1.ConfigValidationSkipCause" json:"config_validation_skip_cause,omitempty"`
	// image_validation_skip_cause is the reason, if any, that the image
	// validation stage was skipped.
	ImageValidationSkipCause ImageValidationSkipCause `protobuf:"varint,9,opt,name=image_validation_skip_cause,json=imageValidationSkipCause,proto3,enum=arista.workspace.v1.ImageValidationSkipCause" json:"image_validation_skip_cause,omitempty"`
	// build_stage_state is the state for each build stage.
	BuildStageState *BuildStageState `protobuf:"bytes,10,opt,name=build_stage_state,json=buildStageState,proto3" json:"build_stage_state,omitempty"`
	// authz_status is the status of provision permission for the device.
	AuthzStatus DeviceAuthzStatus `protobuf:"varint,11,opt,name=authz_status,json=authzStatus,proto3,enum=arista.workspace.v1.DeviceAuthzStatus" json:"authz_status,omitempty"`
	// config_sync_result is the result of the config sync.
	ConfigSyncResult *ConfigSyncResult `protobuf:"bytes,12,opt,name=config_sync_result,json=configSyncResult,proto3" json:"config_sync_result,omitempty"`
	// config_sync_skip_cause is the reason for skipping the config sync.
	ConfigSyncSkipCause ConfigSyncSkipCause `protobuf:"varint,13,opt,name=config_sync_skip_cause,json=configSyncSkipCause,proto3,enum=arista.workspace.v1.ConfigSyncSkipCause" json:"config_sync_skip_cause,omitempty"`
}

func (x *WorkspaceBuildDetails) Reset() {
	*x = WorkspaceBuildDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_workspace_v1_workspace_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceBuildDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceBuildDetails) ProtoMessage() {}

func (x *WorkspaceBuildDetails) ProtoReflect() protoreflect.Message {
	mi := &file_arista_workspace_v1_workspace_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceBuildDetails.ProtoReflect.Descriptor instead.
func (*WorkspaceBuildDetails) Descriptor() ([]byte, []int) {
	return file_arista_workspace_v1_workspace_proto_rawDescGZIP(), []int{22}
}

func (x *WorkspaceBuildDetails) GetKey() *WorkspaceBuildDetailsKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *WorkspaceBuildDetails) GetState() BuildState {
	if x != nil {
		return x.State
	}
	return BuildState_BUILD_STATE_UNSPECIFIED
}

func (x *WorkspaceBuildDetails) GetStage() BuildStage {
	if x != nil {
		return x.Stage
	}
	return BuildStage_BUILD_STAGE_UNSPECIFIED
}

func (x *WorkspaceBuildDetails) GetInputValidationResults() *InputValidationResults {
	if x != nil {
		return x.InputValidationResults
	}
	return nil
}

func (x *WorkspaceBuildDetails) GetConfigletBuildResults() *ConfigletBuildResults {
	if x != nil {
		return x.ConfigletBuildResults
	}
	return nil
}

func (x *WorkspaceBuildDetails) GetConfigValidationResult() *ConfigValidationResult {
	if x != nil {
		return x.ConfigValidationResult
	}
	return nil
}

func (x *WorkspaceBuildDetails) GetImageValidationResult() *ImageValidationResult {
	if x != nil {
		return x.ImageValidationResult
	}
	return nil
}

func (x *WorkspaceBuildDetails) GetConfigValidationSkipCause() ConfigValidationSkipCause {
	if x != nil {
		return x.ConfigValidationSkipCause
	}
	return ConfigValidationSkipCause_CONFIG_VALIDATION_SKIP_CAUSE_UNSPECIFIED
}

func (x *WorkspaceBuildDetails) GetImageValidationSkipCause() ImageValidationSkipCause {
	if x != nil {
		return x.ImageValidationSkipCause
	}
	return ImageValidationSkipCause_IMAGE_VALIDATION_SKIP_CAUSE_UNSPECIFIED
}

func (x *WorkspaceBuildDetails) GetBuildStageState() *BuildStageState {
	if x != nil {
		return x.BuildStageState
	}
	return nil
}

func (x *WorkspaceBuildDetails) GetAuthzStatus() DeviceAuthzStatus {
	if x != nil {
		return x.AuthzStatus
	}
	return DeviceAuthzStatus_DEVICE_AUTHZ_STATUS_UNSPECIFIED
}

func (x *WorkspaceBuildDetails) GetConfigSyncResult() *ConfigSyncResult {
	if x != nil {
		return x.ConfigSyncResult
	}
	return nil
}

func (x *WorkspaceBuildDetails) GetConfigSyncSkipCause() ConfigSyncSkipCause {
	if x != nil {
		return x.ConfigSyncSkipCause
	}
	return ConfigSyncSkipCause_CONFIG_SYNC_SKIP_CAUSE_UNSPECIFIED
}

// WorkspaceSyncKey uniquely identifies sync operations to be performed
// in a workspace.
type WorkspaceSyncKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// workspace_id is the ID of the workspace.
	WorkspaceId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	// sync_operation is type of sync operation to be performed on devices.
	SyncOperation SyncOperation `protobuf:"varint,2,opt,name=sync_operation,json=syncOperation,proto3,enum=arista.workspace.v1.SyncOperation" json:"sync_operation,omitempty"`
}

func (x *WorkspaceSyncKey) Reset() {
	*x = WorkspaceSyncKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_workspace_v1_workspace_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceSyncKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceSyncKey) ProtoMessage() {}

func (x *WorkspaceSyncKey) ProtoReflect() protoreflect.Message {
	mi := &file_arista_workspace_v1_workspace_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceSyncKey.ProtoReflect.Descriptor instead.
func (*WorkspaceSyncKey) Descriptor() ([]byte, []int) {
	return file_arista_workspace_v1_workspace_proto_rawDescGZIP(), []int{23}
}

func (x *WorkspaceSyncKey) GetWorkspaceId() *wrapperspb.StringValue {
	if x != nil {
		return x.WorkspaceId
	}
	return nil
}

func (x *WorkspaceSyncKey) GetSyncOperation() SyncOperation {
	if x != nil {
		return x.SyncOperation
	}
	return SyncOperation_SYNC_OPERATION_UNSPECIFIED
}

// WorkspaceSyncConfig holds the list of devices to be synced in workspace.
type WorkspaceSyncConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key uniquely identifies sync operations to be performed in workspace.
	Key *WorkspaceSyncKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// device_ids is the list of device Ids to be synced in the workspace.
	DeviceIds *fmp.RepeatedString `protobuf:"bytes,2,opt,name=device_ids,json=deviceIds,proto3" json:"device_ids,omitempty"`
}

func (x *WorkspaceSyncConfig) Reset() {
	*x = WorkspaceSyncConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_workspace_v1_workspace_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceSyncConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceSyncConfig) ProtoMessage() {}

func (x *WorkspaceSyncConfig) ProtoReflect() protoreflect.Message {
	mi := &file_arista_workspace_v1_workspace_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceSyncConfig.ProtoReflect.Descriptor instead.
func (*WorkspaceSyncConfig) Descriptor() ([]byte, []int) {
	return file_arista_workspace_v1_workspace_proto_rawDescGZIP(), []int{24}
}

func (x *WorkspaceSyncConfig) GetKey() *WorkspaceSyncKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *WorkspaceSyncConfig) GetDeviceIds() *fmp.RepeatedString {
	if x != nil {
		return x.DeviceIds
	}
	return nil
}

var File_arista_workspace_v1_workspace_proto protoreflect.FileDescriptor

var file_arista_workspace_v1_workspace_proto_rawDesc = []byte{
	0x0a, 0x23, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x14, 0x66, 0x6d, 0x70, 0x2f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x12, 0x66, 0x6d, 0x70, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x27, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4c, 0x0a, 0x0d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xb6, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0xa9, 0x01, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x42,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x1a, 0x58, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x55, 0x0a, 0x0c,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x0c,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x3a, 0x04, 0x80,
	0x8e, 0x19, 0x01, 0x22, 0xd2, 0x02, 0x0a, 0x0f, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x33, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x0c,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72, 0x77, 0x22, 0xf6, 0x06, 0x0a, 0x09, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x12, 0x44, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x46, 0x0a, 0x10, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x39, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x0d,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x06,
	0x63, 0x63, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66,
	0x6d, 0x70, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x05, 0x63, 0x63, 0x49, 0x64, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x6e, 0x65, 0x65, 0x64,
	0x73, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6e, 0x65, 0x65, 0x64, 0x73,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x42, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74,
	0x52, 0x65, 0x62, 0x61, 0x73, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x6e, 0x65, 0x65,
	0x64, 0x73, 0x5f, 0x72, 0x65, 0x62, 0x61, 0x73, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6e, 0x65, 0x65,
	0x64, 0x73, 0x52, 0x65, 0x62, 0x61, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72,
	0x6f, 0x22, 0xd5, 0x01, 0x0a, 0x0a, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x37, 0x0a, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x07, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x52, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x2d, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x46, 0x0a, 0x0b, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x37, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x22, 0xf1, 0x01, 0x0a, 0x15, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x50, 0x0a, 0x13, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x11, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x4e, 0x0a,
	0x12, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x10, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x36, 0x0a,
	0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0xd0, 0x01, 0x0a, 0x16, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x12, 0x4f, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x1a, 0x65, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfd, 0x01, 0x0a, 0x0d, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x37, 0x0a, 0x08, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6c, 0x69, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x12, 0x3a, 0x0a, 0x09, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x34, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x41, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x65,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x22, 0x4c, 0x0a, 0x0e, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xf2, 0x02, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x6c, 0x65, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x4c, 0x0a, 0x0f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x0e, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x47, 0x0a,
	0x10, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3d, 0x0a, 0x0b, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x0b,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0xcd, 0x01, 0x0a, 0x15,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6c, 0x65, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x6c, 0x65, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x64, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x6c, 0x65, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa7, 0x02, 0x0a, 0x16,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3f, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x3c, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x06, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x08, 0x77,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x4c, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0xd7, 0x02, 0x0a, 0x15, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x3d, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x3a,
	0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x77, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x48, 0x0a, 0x11,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x37, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x22,
	0xdf, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x3f, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x3c, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x12, 0x4c, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x22, 0xb7, 0x01, 0x0a, 0x0f, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a,
	0x5a, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfd, 0x01, 0x0a, 0x0b,
	0x41, 0x75, 0x74, 0x68, 0x7a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x59, 0x0a, 0x1b, 0x68,
	0x61, 0x73, 0x5f, 0x75, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f,
	0x74, 0x61, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x18, 0x68, 0x61,
	0x73, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x61, 0x67,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x5f, 0x0a, 0x1e, 0x68, 0x61, 0x73, 0x5f, 0x75, 0x6e,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x68, 0x61, 0x73, 0x55,
	0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x93, 0x01, 0x0a, 0x11,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4b, 0x65,
	0x79, 0x12, 0x3f, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x37, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x3a, 0x04, 0x80, 0x8e, 0x19,
	0x01, 0x22, 0xc1, 0x02, 0x0a, 0x0e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x37, 0x0a, 0x08, 0x62, 0x75, 0x69,
	0x6c, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x74,
	0x42, 0x79, 0x12, 0x43, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x7a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x68,
	0x7a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72, 0x6f, 0x4a,
	0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0xd5, 0x01, 0x0a, 0x18, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4b,
	0x65, 0x79, 0x12, 0x3f, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x09,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x3a, 0x04, 0x80, 0x8e, 0x19, 0x01, 0x22, 0x94, 0x09,
	0x0a, 0x15, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3f, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x35, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x65, 0x0a, 0x18, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x16, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x62, 0x0a,
	0x17, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6c, 0x65, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6c, 0x65, 0x74, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x6c, 0x65, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x65, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x62, 0x0a, 0x17, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x15, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x6f, 0x0a, 0x1c,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x70, 0x43, 0x61, 0x75,
	0x73, 0x65, 0x52, 0x19, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x70, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x6c, 0x0a,
	0x1b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x70, 0x43, 0x61, 0x75, 0x73,
	0x65, 0x52, 0x18, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x70, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x11, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x49, 0x0a,
	0x0c, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x75, 0x74, 0x68, 0x7a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x61, 0x75, 0x74,
	0x68, 0x7a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x53, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x10, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x5d, 0x0a,
	0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x73, 0x6b, 0x69,
	0x70, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x6b,
	0x69, 0x70, 0x43, 0x61, 0x75, 0x73, 0x65, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x79, 0x6e, 0x63, 0x53, 0x6b, 0x69, 0x70, 0x43, 0x61, 0x75, 0x73, 0x65, 0x3a, 0x06, 0xfa, 0x8d,
	0x19, 0x02, 0x72, 0x6f, 0x22, 0xa4, 0x01, 0x0a, 0x10, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x0c, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x0e, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x04, 0x80, 0x8e, 0x19, 0x01, 0x22, 0x8a, 0x01, 0x0a, 0x13,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x37, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x53, 0x79, 0x6e, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x0a,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x73,
	0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72, 0x77, 0x2a, 0xcc, 0x01, 0x0a, 0x0e, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x57,
	0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17,
	0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x57, 0x4f, 0x52,
	0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x55, 0x42,
	0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x57, 0x4f, 0x52, 0x4b,
	0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x42, 0x41, 0x4e,
	0x44, 0x4f, 0x4e, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x57, 0x4f, 0x52, 0x4b, 0x53,
	0x50, 0x41, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x4c,
	0x49, 0x43, 0x54, 0x53, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50,
	0x41, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x44,
	0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x05, 0x2a, 0xc2, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x42, 0x55,
	0x49, 0x4c, 0x44, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x10, 0x02, 0x12,
	0x12, 0x0a, 0x0e, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x4d, 0x49,
	0x54, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x41,
	0x42, 0x41, 0x4e, 0x44, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x05, 0x12, 0x18,
	0x0a, 0x14, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54,
	0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x42, 0x41, 0x53, 0x45, 0x10, 0x07, 0x2a, 0x68, 0x0a, 0x0e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f,
	0x0a, 0x1b, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x1b, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14,
	0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x10, 0x02, 0x2a, 0x8a, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x50, 0x4f,
	0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e,
	0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x53, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x01,
	0x12, 0x31, 0x0a, 0x2d, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x44, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x53, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x10, 0x02, 0x2a, 0xa8, 0x01, 0x0a, 0x0a, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x1b, 0x0a, 0x17, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49,
	0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14,
	0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x12,
	0x14, 0x0a, 0x10, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x50, 0x45, 0x44, 0x10, 0x05, 0x2a, 0xb1,
	0x01, 0x0a, 0x0a, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a,
	0x17, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x55,
	0x49, 0x4c, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b,
	0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x4c, 0x45, 0x54, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x10, 0x02, 0x12, 0x21, 0x0a,
	0x1d, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03,
	0x12, 0x20, 0x0a, 0x1c, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f,
	0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x04, 0x2a, 0x82, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74,
	0x68, 0x7a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5a, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a,
	0x1e, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5a, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x24, 0x0a, 0x20, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x48,
	0x5a, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x4f,
	0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x02, 0x2a, 0xc5, 0x02, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x70,
	0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x28, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x5f,
	0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x5f, 0x43, 0x41,
	0x55, 0x53, 0x45, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x30,
	0x0a, 0x2c, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x5f, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x50,
	0x52, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x31, 0x0a, 0x2d, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x5f, 0x43, 0x41, 0x55, 0x53, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x55, 0x4e, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x32, 0x0a, 0x2e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x5f, 0x43, 0x41,
	0x55, 0x53, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x53, 0x10, 0x04, 0x12, 0x36, 0x0a, 0x32, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4b, 0x49,
	0x50, 0x5f, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x44,
	0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x45, 0x44, 0x10, 0x05, 0x2a,
	0x89, 0x02, 0x0a, 0x18, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x70, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x27,
	0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x4b, 0x49, 0x50, 0x5f, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x49, 0x4d, 0x41,
	0x47, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4b,
	0x49, 0x50, 0x5f, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x01, 0x12, 0x2f, 0x0a, 0x2b, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x5f, 0x43, 0x41, 0x55,
	0x53, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x2f, 0x0a, 0x2b, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x5f, 0x43, 0x41,
	0x55, 0x53, 0x45, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x44, 0x10, 0x03, 0x12, 0x34, 0x0a, 0x30, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x5f, 0x43,
	0x41, 0x55, 0x53, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x45, 0x44,
	0x5f, 0x53, 0x4f, 0x46, 0x54, 0x57, 0x41, 0x52, 0x45, 0x10, 0x04, 0x2a, 0x98, 0x02, 0x0a, 0x13,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x6b, 0x69, 0x70, 0x43, 0x61,
	0x75, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x22, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x59,
	0x4e, 0x43, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x5f, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x5f,
	0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01,
	0x12, 0x2a, 0x0a, 0x26, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f,
	0x53, 0x4b, 0x49, 0x50, 0x5f, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x5f, 0x50,
	0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x12, 0x28, 0x0a, 0x24,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x53, 0x4b, 0x49, 0x50,
	0x5f, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49,
	0x41, 0x4e, 0x43, 0x45, 0x10, 0x03, 0x12, 0x2c, 0x0a, 0x28, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x5f, 0x43, 0x41, 0x55, 0x53, 0x45,
	0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x53, 0x10, 0x04, 0x12, 0x30, 0x0a, 0x2c, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53,
	0x59, 0x4e, 0x43, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x5f, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x45, 0x44, 0x10, 0x05, 0x2a, 0x4a, 0x0a, 0x0d, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x59, 0x4e, 0x43, 0x5f,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x59, 0x4e, 0x43, 0x5f,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x10, 0x01, 0x42, 0x4c, 0x5a, 0x4a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x6f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x3b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_arista_workspace_v1_workspace_proto_rawDescOnce sync.Once
	file_arista_workspace_v1_workspace_proto_rawDescData = file_arista_workspace_v1_workspace_proto_rawDesc
)

func file_arista_workspace_v1_workspace_proto_rawDescGZIP() []byte {
	file_arista_workspace_v1_workspace_proto_rawDescOnce.Do(func() {
		file_arista_workspace_v1_workspace_proto_rawDescData = protoimpl.X.CompressGZIP(file_arista_workspace_v1_workspace_proto_rawDescData)
	})
	return file_arista_workspace_v1_workspace_proto_rawDescData
}

var file_arista_workspace_v1_workspace_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_arista_workspace_v1_workspace_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_arista_workspace_v1_workspace_proto_goTypes = []interface{}{
	(WorkspaceState)(0),                   // 0: arista.workspace.v1.WorkspaceState
	(Request)(0),                          // 1: arista.workspace.v1.Request
	(ResponseStatus)(0),                   // 2: arista.workspace.v1.ResponseStatus
	(ResponseCode)(0),                     // 3: arista.workspace.v1.ResponseCode
	(BuildState)(0),                       // 4: arista.workspace.v1.BuildState
	(BuildStage)(0),                       // 5: arista.workspace.v1.BuildStage
	(DeviceAuthzStatus)(0),                // 6: arista.workspace.v1.DeviceAuthzStatus
	(ConfigValidationSkipCause)(0),        // 7: arista.workspace.v1.ConfigValidationSkipCause
	(ImageValidationSkipCause)(0),         // 8: arista.workspace.v1.ImageValidationSkipCause
	(ConfigSyncSkipCause)(0),              // 9: arista.workspace.v1.ConfigSyncSkipCause
	(SyncOperation)(0),                    // 10: arista.workspace.v1.SyncOperation
	(*RequestParams)(nil),                 // 11: arista.workspace.v1.RequestParams
	(*Response)(nil),                      // 12: arista.workspace.v1.Response
	(*Responses)(nil),                     // 13: arista.workspace.v1.Responses
	(*WorkspaceKey)(nil),                  // 14: arista.workspace.v1.WorkspaceKey
	(*WorkspaceConfig)(nil),               // 15: arista.workspace.v1.WorkspaceConfig
	(*Workspace)(nil),                     // 16: arista.workspace.v1.Workspace
	(*InputError)(nil),                    // 17: arista.workspace.v1.InputError
	(*InputErrors)(nil),                   // 18: arista.workspace.v1.InputErrors
	(*InputValidationResult)(nil),         // 19: arista.workspace.v1.InputValidationResult
	(*InputValidationResults)(nil),        // 20: arista.workspace.v1.InputValidationResults
	(*TemplateError)(nil),                 // 21: arista.workspace.v1.TemplateError
	(*TemplateErrors)(nil),                // 22: arista.workspace.v1.TemplateErrors
	(*ConfigletBuildResult)(nil),          // 23: arista.workspace.v1.ConfigletBuildResult
	(*ConfigletBuildResults)(nil),         // 24: arista.workspace.v1.ConfigletBuildResults
	(*ConfigValidationResult)(nil),        // 25: arista.workspace.v1.ConfigValidationResult
	(*ImageValidationResult)(nil),         // 26: arista.workspace.v1.ImageValidationResult
	(*ConfigSyncResult)(nil),              // 27: arista.workspace.v1.ConfigSyncResult
	(*BuildStageState)(nil),               // 28: arista.workspace.v1.BuildStageState
	(*AuthzResult)(nil),                   // 29: arista.workspace.v1.AuthzResult
	(*WorkspaceBuildKey)(nil),             // 30: arista.workspace.v1.WorkspaceBuildKey
	(*WorkspaceBuild)(nil),                // 31: arista.workspace.v1.WorkspaceBuild
	(*WorkspaceBuildDetailsKey)(nil),      // 32: arista.workspace.v1.WorkspaceBuildDetailsKey
	(*WorkspaceBuildDetails)(nil),         // 33: arista.workspace.v1.WorkspaceBuildDetails
	(*WorkspaceSyncKey)(nil),              // 34: arista.workspace.v1.WorkspaceSyncKey
	(*WorkspaceSyncConfig)(nil),           // 35: arista.workspace.v1.WorkspaceSyncConfig
	nil,                                   // 36: arista.workspace.v1.Responses.ValuesEntry
	nil,                                   // 37: arista.workspace.v1.InputValidationResults.ValuesEntry
	nil,                                   // 38: arista.workspace.v1.ConfigletBuildResults.ValuesEntry
	nil,                                   // 39: arista.workspace.v1.BuildStageState.ValuesEntry
	(*wrapperspb.StringValue)(nil),        // 40: google.protobuf.StringValue
	(*timestamppb.Timestamp)(nil),         // 41: google.protobuf.Timestamp
	(*fmp.RepeatedString)(nil),            // 42: fmp.RepeatedString
	(*wrapperspb.BoolValue)(nil),          // 43: google.protobuf.BoolValue
	(*wrapperspb.UInt32Value)(nil),        // 44: google.protobuf.UInt32Value
	(*configstatus_v1.ConfigSummary)(nil), // 45: arista.configstatus.v1.ConfigSummary
	(*configstatus_v1.ConfigErrors)(nil),  // 46: arista.configstatus.v1.ConfigErrors
	(*configstatus_v1.ConfigSources)(nil), // 47: arista.configstatus.v1.ConfigSources
	(*imagestatus_v1.ImageSummary)(nil),   // 48: arista.imagestatus.v1.ImageSummary
	(*imagestatus_v1.ImageErrors)(nil),    // 49: arista.imagestatus.v1.ImageErrors
	(*imagestatus_v1.ImageWarnings)(nil),  // 50: arista.imagestatus.v1.ImageWarnings
	(*imagestatus_v1.ImageInfos)(nil),     // 51: arista.imagestatus.v1.ImageInfos
}
var file_arista_workspace_v1_workspace_proto_depIdxs = []int32{
	40, // 0: arista.workspace.v1.RequestParams.request_id:type_name -> google.protobuf.StringValue
	2,  // 1: arista.workspace.v1.Response.status:type_name -> arista.workspace.v1.ResponseStatus
	40, // 2: arista.workspace.v1.Response.message:type_name -> google.protobuf.StringValue
	3,  // 3: arista.workspace.v1.Response.code:type_name -> arista.workspace.v1.ResponseCode
	36, // 4: arista.workspace.v1.Responses.values:type_name -> arista.workspace.v1.Responses.ValuesEntry
	40, // 5: arista.workspace.v1.WorkspaceKey.workspace_id:type_name -> google.protobuf.StringValue
	14, // 6: arista.workspace.v1.WorkspaceConfig.key:type_name -> arista.workspace.v1.WorkspaceKey
	40, // 7: arista.workspace.v1.WorkspaceConfig.display_name:type_name -> google.protobuf.StringValue
	40, // 8: arista.workspace.v1.WorkspaceConfig.description:type_name -> google.protobuf.StringValue
	1,  // 9: arista.workspace.v1.WorkspaceConfig.request:type_name -> arista.workspace.v1.Request
	11, // 10: arista.workspace.v1.WorkspaceConfig.request_params:type_name -> arista.workspace.v1.RequestParams
	14, // 11: arista.workspace.v1.Workspace.key:type_name -> arista.workspace.v1.WorkspaceKey
	41, // 12: arista.workspace.v1.Workspace.created_at:type_name -> google.protobuf.Timestamp
	40, // 13: arista.workspace.v1.Workspace.created_by:type_name -> google.protobuf.StringValue
	41, // 14: arista.workspace.v1.Workspace.last_modified_at:type_name -> google.protobuf.Timestamp
	40, // 15: arista.workspace.v1.Workspace.last_modified_by:type_name -> google.protobuf.StringValue
	0,  // 16: arista.workspace.v1.Workspace.state:type_name -> arista.workspace.v1.WorkspaceState
	40, // 17: arista.workspace.v1.Workspace.last_build_id:type_name -> google.protobuf.StringValue
	13, // 18: arista.workspace.v1.Workspace.responses:type_name -> arista.workspace.v1.Responses
	42, // 19: arista.workspace.v1.Workspace.cc_ids:type_name -> fmp.RepeatedString
	43, // 20: arista.workspace.v1.Workspace.needs_build:type_name -> google.protobuf.BoolValue
	41, // 21: arista.workspace.v1.Workspace.last_rebased_at:type_name -> google.protobuf.Timestamp
	43, // 22: arista.workspace.v1.Workspace.needs_rebase:type_name -> google.protobuf.BoolValue
	40, // 23: arista.workspace.v1.Workspace.display_name:type_name -> google.protobuf.StringValue
	40, // 24: arista.workspace.v1.Workspace.description:type_name -> google.protobuf.StringValue
	40, // 25: arista.workspace.v1.InputError.field_id:type_name -> google.protobuf.StringValue
	42, // 26: arista.workspace.v1.InputError.path:type_name -> fmp.RepeatedString
	42, // 27: arista.workspace.v1.InputError.members:type_name -> fmp.RepeatedString
	40, // 28: arista.workspace.v1.InputError.message:type_name -> google.protobuf.StringValue
	17, // 29: arista.workspace.v1.InputErrors.values:type_name -> arista.workspace.v1.InputError
	18, // 30: arista.workspace.v1.InputValidationResult.input_schema_errors:type_name -> arista.workspace.v1.InputErrors
	18, // 31: arista.workspace.v1.InputValidationResult.input_value_errors:type_name -> arista.workspace.v1.InputErrors
	42, // 32: arista.workspace.v1.InputValidationResult.other_errors:type_name -> fmp.RepeatedString
	37, // 33: arista.workspace.v1.InputValidationResults.values:type_name -> arista.workspace.v1.InputValidationResults.ValuesEntry
	44, // 34: arista.workspace.v1.TemplateError.line_num:type_name -> google.protobuf.UInt32Value
	40, // 35: arista.workspace.v1.TemplateError.exception:type_name -> google.protobuf.StringValue
	40, // 36: arista.workspace.v1.TemplateError.detail:type_name -> google.protobuf.StringValue
	40, // 37: arista.workspace.v1.TemplateError.exception_msg:type_name -> google.protobuf.StringValue
	21, // 38: arista.workspace.v1.TemplateErrors.values:type_name -> arista.workspace.v1.TemplateError
	22, // 39: arista.workspace.v1.ConfigletBuildResult.template_errors:type_name -> arista.workspace.v1.TemplateErrors
	40, // 40: arista.workspace.v1.ConfigletBuildResult.generated_config:type_name -> google.protobuf.StringValue
	40, // 41: arista.workspace.v1.ConfigletBuildResult.other_error:type_name -> google.protobuf.StringValue
	40, // 42: arista.workspace.v1.ConfigletBuildResult.execution_id:type_name -> google.protobuf.StringValue
	18, // 43: arista.workspace.v1.ConfigletBuildResult.input_errors:type_name -> arista.workspace.v1.InputErrors
	38, // 44: arista.workspace.v1.ConfigletBuildResults.values:type_name -> arista.workspace.v1.ConfigletBuildResults.ValuesEntry
	45, // 45: arista.workspace.v1.ConfigValidationResult.summary:type_name -> arista.configstatus.v1.ConfigSummary
	46, // 46: arista.workspace.v1.ConfigValidationResult.errors:type_name -> arista.configstatus.v1.ConfigErrors
	46, // 47: arista.workspace.v1.ConfigValidationResult.warnings:type_name -> arista.configstatus.v1.ConfigErrors
	47, // 48: arista.workspace.v1.ConfigValidationResult.config_sources:type_name -> arista.configstatus.v1.ConfigSources
	48, // 49: arista.workspace.v1.ImageValidationResult.summary:type_name -> arista.imagestatus.v1.ImageSummary
	49, // 50: arista.workspace.v1.ImageValidationResult.errors:type_name -> arista.imagestatus.v1.ImageErrors
	50, // 51: arista.workspace.v1.ImageValidationResult.warnings:type_name -> arista.imagestatus.v1.ImageWarnings
	40, // 52: arista.workspace.v1.ImageValidationResult.image_input_error:type_name -> google.protobuf.StringValue
	51, // 53: arista.workspace.v1.ImageValidationResult.infos:type_name -> arista.imagestatus.v1.ImageInfos
	45, // 54: arista.workspace.v1.ConfigSyncResult.summary:type_name -> arista.configstatus.v1.ConfigSummary
	46, // 55: arista.workspace.v1.ConfigSyncResult.errors:type_name -> arista.configstatus.v1.ConfigErrors
	47, // 56: arista.workspace.v1.ConfigSyncResult.config_sources:type_name -> arista.configstatus.v1.ConfigSources
	39, // 57: arista.workspace.v1.BuildStageState.values:type_name -> arista.workspace.v1.BuildStageState.ValuesEntry
	43, // 58: arista.workspace.v1.AuthzResult.has_unauthorized_tag_change:type_name -> google.protobuf.BoolValue
	43, // 59: arista.workspace.v1.AuthzResult.has_unauthorized_device_change:type_name -> google.protobuf.BoolValue
	40, // 60: arista.workspace.v1.AuthzResult.error:type_name -> google.protobuf.StringValue
	40, // 61: arista.workspace.v1.WorkspaceBuildKey.workspace_id:type_name -> google.protobuf.StringValue
	40, // 62: arista.workspace.v1.WorkspaceBuildKey.build_id:type_name -> google.protobuf.StringValue
	30, // 63: arista.workspace.v1.WorkspaceBuild.key:type_name -> arista.workspace.v1.WorkspaceBuildKey
	4,  // 64: arista.workspace.v1.WorkspaceBuild.state:type_name -> arista.workspace.v1.BuildState
	40, // 65: arista.workspace.v1.WorkspaceBuild.error:type_name -> google.protobuf.StringValue
	40, // 66: arista.workspace.v1.WorkspaceBuild.built_by:type_name -> google.protobuf.StringValue
	29, // 67: arista.workspace.v1.WorkspaceBuild.authz_result:type_name -> arista.workspace.v1.AuthzResult
	40, // 68: arista.workspace.v1.WorkspaceBuildDetailsKey.workspace_id:type_name -> google.protobuf.StringValue
	40, // 69: arista.workspace.v1.WorkspaceBuildDetailsKey.build_id:type_name -> google.protobuf.StringValue
	40, // 70: arista.workspace.v1.WorkspaceBuildDetailsKey.device_id:type_name -> google.protobuf.StringValue
	32, // 71: arista.workspace.v1.WorkspaceBuildDetails.key:type_name -> arista.workspace.v1.WorkspaceBuildDetailsKey
	4,  // 72: arista.workspace.v1.WorkspaceBuildDetails.state:type_name -> arista.workspace.v1.BuildState
	5,  // 73: arista.workspace.v1.WorkspaceBuildDetails.stage:type_name -> arista.workspace.v1.BuildStage
	20, // 74: arista.workspace.v1.WorkspaceBuildDetails.input_validation_results:type_name -> arista.workspace.v1.InputValidationResults
	24, // 75: arista.workspace.v1.WorkspaceBuildDetails.configlet_build_results:type_name -> arista.workspace.v1.ConfigletBuildResults
	25, // 76: arista.workspace.v1.WorkspaceBuildDetails.config_validation_result:type_name -> arista.workspace.v1.ConfigValidationResult
	26, // 77: arista.workspace.v1.WorkspaceBuildDetails.image_validation_result:type_name -> arista.workspace.v1.ImageValidationResult
	7,  // 78: arista.workspace.v1.WorkspaceBuildDetails.config_validation_skip_cause:type_name -> arista.workspace.v1.ConfigValidationSkipCause
	8,  // 79: arista.workspace.v1.WorkspaceBuildDetails.image_validation_skip_cause:type_name -> arista.workspace.v1.ImageValidationSkipCause
	28, // 80: arista.workspace.v1.WorkspaceBuildDetails.build_stage_state:type_name -> arista.workspace.v1.BuildStageState
	6,  // 81: arista.workspace.v1.WorkspaceBuildDetails.authz_status:type_name -> arista.workspace.v1.DeviceAuthzStatus
	27, // 82: arista.workspace.v1.WorkspaceBuildDetails.config_sync_result:type_name -> arista.workspace.v1.ConfigSyncResult
	9,  // 83: arista.workspace.v1.WorkspaceBuildDetails.config_sync_skip_cause:type_name -> arista.workspace.v1.ConfigSyncSkipCause
	40, // 84: arista.workspace.v1.WorkspaceSyncKey.workspace_id:type_name -> google.protobuf.StringValue
	10, // 85: arista.workspace.v1.WorkspaceSyncKey.sync_operation:type_name -> arista.workspace.v1.SyncOperation
	34, // 86: arista.workspace.v1.WorkspaceSyncConfig.key:type_name -> arista.workspace.v1.WorkspaceSyncKey
	42, // 87: arista.workspace.v1.WorkspaceSyncConfig.device_ids:type_name -> fmp.RepeatedString
	12, // 88: arista.workspace.v1.Responses.ValuesEntry.value:type_name -> arista.workspace.v1.Response
	19, // 89: arista.workspace.v1.InputValidationResults.ValuesEntry.value:type_name -> arista.workspace.v1.InputValidationResult
	23, // 90: arista.workspace.v1.ConfigletBuildResults.ValuesEntry.value:type_name -> arista.workspace.v1.ConfigletBuildResult
	4,  // 91: arista.workspace.v1.BuildStageState.ValuesEntry.value:type_name -> arista.workspace.v1.BuildState
	92, // [92:92] is the sub-list for method output_type
	92, // [92:92] is the sub-list for method input_type
	92, // [92:92] is the sub-list for extension type_name
	92, // [92:92] is the sub-list for extension extendee
	0,  // [0:92] is the sub-list for field type_name
}

func init() { file_arista_workspace_v1_workspace_proto_init() }
func file_arista_workspace_v1_workspace_proto_init() {
	if File_arista_workspace_v1_workspace_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_arista_workspace_v1_workspace_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_workspace_v1_workspace_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_workspace_v1_workspace_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Responses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_workspace_v1_workspace_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_workspace_v1_workspace_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_workspace_v1_workspace_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Workspace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_workspace_v1_workspace_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_workspace_v1_workspace_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputErrors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_workspace_v1_workspace_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputValidationResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_workspace_v1_workspace_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputValidationResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_workspace_v1_workspace_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplateError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_workspace_v1_workspace_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplateErrors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_workspace_v1_workspace_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigletBuildResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_workspace_v1_workspace_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigletBuildResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_workspace_v1_workspace_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigValidationResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_workspace_v1_workspace_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageValidationResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_workspace_v1_workspace_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigSyncResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_workspace_v1_workspace_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildStageState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_workspace_v1_workspace_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthzResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_workspace_v1_workspace_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceBuildKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_workspace_v1_workspace_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceBuild); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_workspace_v1_workspace_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceBuildDetailsKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_workspace_v1_workspace_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceBuildDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_workspace_v1_workspace_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceSyncKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_workspace_v1_workspace_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceSyncConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_arista_workspace_v1_workspace_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_arista_workspace_v1_workspace_proto_goTypes,
		DependencyIndexes: file_arista_workspace_v1_workspace_proto_depIdxs,
		EnumInfos:         file_arista_workspace_v1_workspace_proto_enumTypes,
		MessageInfos:      file_arista_workspace_v1_workspace_proto_msgTypes,
	}.Build()
	File_arista_workspace_v1_workspace_proto = out.File
	file_arista_workspace_v1_workspace_proto_rawDesc = nil
	file_arista_workspace_v1_workspace_proto_goTypes = nil
	file_arista_workspace_v1_workspace_proto_depIdxs = nil
}
