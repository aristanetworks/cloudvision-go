// Copyright (c) 2024 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

//
// Code generated by boomtown. DO NOT EDIT.
//

package workspace

import "google.golang.org/grpc"

// Client composes the service clients within the workspace package.
// This client can then be composed into a larger hierarchy for more complex clients.
//
// Because method names include the name of the Resource they operate on, the embedded
// clients are unnamed fields to reduce stutter.
//
// Included resources:
//   - Workspace
//   - WorkspaceBuild
//   - WorkspaceBuildDetails
//   - WorkspaceConfig
type Client struct {
	Workspace             WorkspaceServiceClient
	WorkspaceBuild        WorkspaceBuildServiceClient
	WorkspaceBuildDetails WorkspaceBuildDetailsServiceClient
	WorkspaceConfig       WorkspaceConfigServiceClient
}

// NewClient creates a new composed-client from the given connection.
func NewClient(conn grpc.ClientConnInterface) Client {
	return Client{
		Workspace:             NewWorkspaceServiceClient(conn),
		WorkspaceBuild:        NewWorkspaceBuildServiceClient(conn),
		WorkspaceBuildDetails: NewWorkspaceBuildDetailsServiceClient(conn),
		WorkspaceConfig:       NewWorkspaceConfigServiceClient(conn),
	}
}

// Server aggregates the various server interfaces required by gRPC.
// The included resources are:
//   - Workspace
//   - WorkspaceBuild
//   - WorkspaceBuildDetails
//   - WorkspaceConfig
type Server struct {
	Workspace             WorkspaceServiceServer
	WorkspaceBuild        WorkspaceBuildServiceServer
	WorkspaceBuildDetails WorkspaceBuildDetailsServiceServer
	WorkspaceConfig       WorkspaceConfigServiceServer
}

// Register takes the given gRPC Server and registers our services with it.
func (s Server) Register(target *grpc.Server) {
	RegisterWorkspaceServiceServer(target, s.Workspace)
	RegisterWorkspaceBuildServiceServer(target, s.WorkspaceBuild)
	RegisterWorkspaceBuildDetailsServiceServer(target, s.WorkspaceBuildDetails)
	RegisterWorkspaceConfigServiceServer(target, s.WorkspaceConfig)
}

// RegisterUnimplementeds adds unimplemented servers to the given gRPC Server
func RegisterUnimplementeds(target *grpc.Server) error {
	RegisterWorkspaceServiceServer(target,
		UnimplementedWorkspaceServiceServer{})
	RegisterWorkspaceBuildServiceServer(target,
		UnimplementedWorkspaceBuildServiceServer{})
	RegisterWorkspaceBuildDetailsServiceServer(target,
		UnimplementedWorkspaceBuildDetailsServiceServer{})
	RegisterWorkspaceConfigServiceServer(target,
		UnimplementedWorkspaceConfigServiceServer{})
	return nil
}

// HasKey returns whether the given Workspace has a key provided in the model.
func (w *Workspace) HasKey() bool {
	return w.GetKey() != nil
}

// HasKey returns whether the given WorkspaceRequest has a key provided in the request.
func (w *WorkspaceRequest) HasKey() bool {
	return w.GetKey() != nil
}

// HasKey returns whether the given WorkspaceBuild has a key provided in the model.
func (w *WorkspaceBuild) HasKey() bool {
	return w.GetKey() != nil
}

// HasKey returns whether the given WorkspaceBuildRequest has a key provided in the request.
func (w *WorkspaceBuildRequest) HasKey() bool {
	return w.GetKey() != nil
}

// HasKey returns whether the given WorkspaceBuildDetails has a key provided in the model.
func (w *WorkspaceBuildDetails) HasKey() bool {
	return w.GetKey() != nil
}

// HasKey returns whether the given WorkspaceBuildDetailsRequest has a key provided in the request.
func (w *WorkspaceBuildDetailsRequest) HasKey() bool {
	return w.GetKey() != nil
}

// HasKey returns whether the given WorkspaceConfig has a key provided in the model.
func (w *WorkspaceConfig) HasKey() bool {
	return w.GetKey() != nil
}

// HasKey returns whether the given WorkspaceConfigRequest has a key provided in the request.
func (w *WorkspaceConfigRequest) HasKey() bool {
	return w.GetKey() != nil
}

// HasKey returns whether the given WorkspaceConfigSetRequest has a key provided in the request.
func (w *WorkspaceConfigSetRequest) HasKey() bool {
	return w.GetValue().HasKey()
}

// HasKey returns whether the given WorkspaceConfigDeleteRequest has a key provided in the request.
func (w *WorkspaceConfigDeleteRequest) HasKey() bool {
	return w.GetKey() != nil
}

// PassesPartialEqFilter returns whether this BuildStage matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (b BuildStage) PassesPartialEqFilter(cmp BuildStage) bool {
	if cmp != BuildStage(0) {
		return b == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether this BuildState matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (b BuildState) PassesPartialEqFilter(cmp BuildState) bool {
	if cmp != BuildState(0) {
		return b == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether this ConfigValidationSkipCause matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (c ConfigValidationSkipCause) PassesPartialEqFilter(cmp ConfigValidationSkipCause) bool {
	if cmp != ConfigValidationSkipCause(0) {
		return c == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether this DeviceAuthzStatus matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (d DeviceAuthzStatus) PassesPartialEqFilter(cmp DeviceAuthzStatus) bool {
	if cmp != DeviceAuthzStatus(0) {
		return d == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether this ImageValidationSkipCause matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (i ImageValidationSkipCause) PassesPartialEqFilter(cmp ImageValidationSkipCause) bool {
	if cmp != ImageValidationSkipCause(0) {
		return i == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether this Request matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (r Request) PassesPartialEqFilter(cmp Request) bool {
	if cmp != Request(0) {
		return r == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether this ResponseCode matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (r ResponseCode) PassesPartialEqFilter(cmp ResponseCode) bool {
	if cmp != ResponseCode(0) {
		return r == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether this ResponseStatus matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (r ResponseStatus) PassesPartialEqFilter(cmp ResponseStatus) bool {
	if cmp != ResponseStatus(0) {
		return r == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether this WorkspaceState matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (w WorkspaceState) PassesPartialEqFilter(cmp WorkspaceState) bool {
	if cmp != WorkspaceState(0) {
		return w == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether the AuthzResult matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (a *AuthzResult) PassesPartialEqFilter(cmp *AuthzResult) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if a == nil {
		return false
	}

	if cmp.HasUnauthorizedTagChange != nil {
		if a.HasUnauthorizedTagChange == nil {
			return false
		}
		if a.HasUnauthorizedTagChange.Value != cmp.HasUnauthorizedTagChange.Value {
			return false
		}
	}

	if cmp.HasUnauthorizedDeviceChange != nil {
		if a.HasUnauthorizedDeviceChange == nil {
			return false
		}
		if a.HasUnauthorizedDeviceChange.Value != cmp.HasUnauthorizedDeviceChange.Value {
			return false
		}
	}

	if cmp.Error != nil {
		if a.Error == nil {
			return false
		}
		if a.Error.Value != cmp.Error.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the BuildStageState matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (b *BuildStageState) PassesPartialEqFilter(cmp *BuildStageState) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if b == nil {
		return false
	}
	if len(cmp.Values) > len(b.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := b.Values[k]
		if !exists || !self.PassesPartialEqFilter(filt) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the ConfigValidationResult matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (c *ConfigValidationResult) PassesPartialEqFilter(cmp *ConfigValidationResult) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if c == nil {
		return false
	}
	if !c.Summary.PassesPartialEqFilter(cmp.Summary) {
		return false
	}
	if !c.Errors.PassesPartialEqFilter(cmp.Errors) {
		return false
	}
	if !c.Warnings.PassesPartialEqFilter(cmp.Warnings) {
		return false
	}
	if !c.ConfigSources.PassesPartialEqFilter(cmp.ConfigSources) {
		return false
	}

	return true
}

// PassesPartialEqFilter returns whether the ConfigletBuildResult matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (c *ConfigletBuildResult) PassesPartialEqFilter(cmp *ConfigletBuildResult) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if c == nil {
		return false
	}
	if !c.TemplateErrors.PassesPartialEqFilter(cmp.TemplateErrors) {
		return false
	}

	if cmp.GeneratedConfig != nil {
		if c.GeneratedConfig == nil {
			return false
		}
		if c.GeneratedConfig.Value != cmp.GeneratedConfig.Value {
			return false
		}
	}

	if cmp.OtherError != nil {
		if c.OtherError == nil {
			return false
		}
		if c.OtherError.Value != cmp.OtherError.Value {
			return false
		}
	}

	if cmp.ExecutionId != nil {
		if c.ExecutionId == nil {
			return false
		}
		if c.ExecutionId.Value != cmp.ExecutionId.Value {
			return false
		}
	}
	if !c.InputErrors.PassesPartialEqFilter(cmp.InputErrors) {
		return false
	}

	return true
}

// PassesPartialEqFilter returns whether the ConfigletBuildResults matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (c *ConfigletBuildResults) PassesPartialEqFilter(cmp *ConfigletBuildResults) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if c == nil {
		return false
	}
	if len(cmp.Values) > len(c.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := c.Values[k]
		if !exists || !self.PassesPartialEqFilter(filt) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the ImageValidationResult matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (i *ImageValidationResult) PassesPartialEqFilter(cmp *ImageValidationResult) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if i == nil {
		return false
	}
	if !i.Summary.PassesPartialEqFilter(cmp.Summary) {
		return false
	}
	if !i.Errors.PassesPartialEqFilter(cmp.Errors) {
		return false
	}
	if !i.Warnings.PassesPartialEqFilter(cmp.Warnings) {
		return false
	}

	if cmp.ImageInputError != nil {
		if i.ImageInputError == nil {
			return false
		}
		if i.ImageInputError.Value != cmp.ImageInputError.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the InputError matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (i *InputError) PassesPartialEqFilter(cmp *InputError) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if i == nil {
		return false
	}

	if cmp.FieldId != nil {
		if i.FieldId == nil {
			return false
		}
		if i.FieldId.Value != cmp.FieldId.Value {
			return false
		}
	}
	if !i.Path.PassesPartialEqFilter(cmp.Path) {
		return false
	}
	if !i.Members.PassesPartialEqFilter(cmp.Members) {
		return false
	}

	if cmp.Message != nil {
		if i.Message == nil {
			return false
		}
		if i.Message.Value != cmp.Message.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the InputErrors matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (i *InputErrors) PassesPartialEqFilter(cmp *InputErrors) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if i == nil {
		return false
	}
	if len(i.Values) != len(cmp.Values) {
		return false
	}
	for i, f := range i.Values {
		if !f.PassesPartialEqFilter(cmp.Values[i]) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the InputValidationResult matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (i *InputValidationResult) PassesPartialEqFilter(cmp *InputValidationResult) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if i == nil {
		return false
	}
	if !i.InputSchemaErrors.PassesPartialEqFilter(cmp.InputSchemaErrors) {
		return false
	}
	if !i.InputValueErrors.PassesPartialEqFilter(cmp.InputValueErrors) {
		return false
	}
	if !i.OtherErrors.PassesPartialEqFilter(cmp.OtherErrors) {
		return false
	}

	return true
}

// PassesPartialEqFilter returns whether the InputValidationResults matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (i *InputValidationResults) PassesPartialEqFilter(cmp *InputValidationResults) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if i == nil {
		return false
	}
	if len(cmp.Values) > len(i.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := i.Values[k]
		if !exists || !self.PassesPartialEqFilter(filt) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the RequestParams matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (r *RequestParams) PassesPartialEqFilter(cmp *RequestParams) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if r == nil {
		return false
	}

	if cmp.RequestId != nil {
		if r.RequestId == nil {
			return false
		}
		if r.RequestId.Value != cmp.RequestId.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the Response matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (r *Response) PassesPartialEqFilter(cmp *Response) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if r == nil {
		return false
	}
	if !r.Status.PassesPartialEqFilter(cmp.Status) {
		return false
	}

	if cmp.Message != nil {
		if r.Message == nil {
			return false
		}
		if r.Message.Value != cmp.Message.Value {
			return false
		}
	}
	if !r.Code.PassesPartialEqFilter(cmp.Code) {
		return false
	}

	return true
}

// PassesPartialEqFilter returns whether the Responses matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (r *Responses) PassesPartialEqFilter(cmp *Responses) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if r == nil {
		return false
	}
	if len(cmp.Values) > len(r.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := r.Values[k]
		if !exists || !self.PassesPartialEqFilter(filt) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the TemplateError matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (t *TemplateError) PassesPartialEqFilter(cmp *TemplateError) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if t == nil {
		return false
	}

	if cmp.LineNum != nil {
		if t.LineNum == nil {
			return false
		}
		if t.LineNum.Value != cmp.LineNum.Value {
			return false
		}
	}

	if cmp.Exception != nil {
		if t.Exception == nil {
			return false
		}
		if t.Exception.Value != cmp.Exception.Value {
			return false
		}
	}

	if cmp.Detail != nil {
		if t.Detail == nil {
			return false
		}
		if t.Detail.Value != cmp.Detail.Value {
			return false
		}
	}

	if cmp.ExceptionMsg != nil {
		if t.ExceptionMsg == nil {
			return false
		}
		if t.ExceptionMsg.Value != cmp.ExceptionMsg.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the TemplateErrors matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (t *TemplateErrors) PassesPartialEqFilter(cmp *TemplateErrors) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if t == nil {
		return false
	}
	if len(t.Values) != len(cmp.Values) {
		return false
	}
	for i, f := range t.Values {
		if !f.PassesPartialEqFilter(cmp.Values[i]) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the WorkspaceBuildDetailsKey matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (w *WorkspaceBuildDetailsKey) PassesPartialEqFilter(cmp *WorkspaceBuildDetailsKey) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if w == nil {
		return false
	}

	if cmp.WorkspaceId != nil {
		if w.WorkspaceId == nil {
			return false
		}
		if w.WorkspaceId.Value != cmp.WorkspaceId.Value {
			return false
		}
	}

	if cmp.BuildId != nil {
		if w.BuildId == nil {
			return false
		}
		if w.BuildId.Value != cmp.BuildId.Value {
			return false
		}
	}

	if cmp.DeviceId != nil {
		if w.DeviceId == nil {
			return false
		}
		if w.DeviceId.Value != cmp.DeviceId.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the WorkspaceBuildKey matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (w *WorkspaceBuildKey) PassesPartialEqFilter(cmp *WorkspaceBuildKey) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if w == nil {
		return false
	}

	if cmp.WorkspaceId != nil {
		if w.WorkspaceId == nil {
			return false
		}
		if w.WorkspaceId.Value != cmp.WorkspaceId.Value {
			return false
		}
	}

	if cmp.BuildId != nil {
		if w.BuildId == nil {
			return false
		}
		if w.BuildId.Value != cmp.BuildId.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the WorkspaceKey matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (w *WorkspaceKey) PassesPartialEqFilter(cmp *WorkspaceKey) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if w == nil {
		return false
	}

	if cmp.WorkspaceId != nil {
		if w.WorkspaceId == nil {
			return false
		}
		if w.WorkspaceId.Value != cmp.WorkspaceId.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the Workspace matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (w *Workspace) PassesPartialEqFilter(cmp *Workspace) bool {
	// if the resource is nil, there is nothing to send to the client
	if w == nil {
		return false
	}

	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if !w.Key.PassesPartialEqFilter(cmp.Key) {
		return false
	}

	if cmp.CreatedAt != nil {
		if cmp.CreatedAt.Seconds != 0 {
			if w.CreatedAt.Seconds != cmp.CreatedAt.Seconds {
				return false
			}
		}
		if cmp.CreatedAt.Nanos != 0 {
			if w.CreatedAt.Nanos != cmp.CreatedAt.Nanos {
				return false
			}
		}
	}

	if cmp.CreatedBy != nil {
		if w.CreatedBy == nil {
			return false
		}
		if w.CreatedBy.Value != cmp.CreatedBy.Value {
			return false
		}
	}

	if cmp.LastModifiedAt != nil {
		if cmp.LastModifiedAt.Seconds != 0 {
			if w.LastModifiedAt.Seconds != cmp.LastModifiedAt.Seconds {
				return false
			}
		}
		if cmp.LastModifiedAt.Nanos != 0 {
			if w.LastModifiedAt.Nanos != cmp.LastModifiedAt.Nanos {
				return false
			}
		}
	}

	if cmp.LastModifiedBy != nil {
		if w.LastModifiedBy == nil {
			return false
		}
		if w.LastModifiedBy.Value != cmp.LastModifiedBy.Value {
			return false
		}
	}

	if !w.State.PassesPartialEqFilter(cmp.State) {
		return false
	}

	if cmp.LastBuildId != nil {
		if w.LastBuildId == nil {
			return false
		}
		if w.LastBuildId.Value != cmp.LastBuildId.Value {
			return false
		}
	}

	if !w.Responses.PassesPartialEqFilter(cmp.Responses) {
		return false
	}

	if !w.CcIds.PassesPartialEqFilter(cmp.CcIds) {
		return false
	}

	if cmp.NeedsBuild != nil {
		if w.NeedsBuild == nil {
			return false
		}
		if w.NeedsBuild.Value != cmp.NeedsBuild.Value {
			return false
		}
	}

	if cmp.LastRebasedAt != nil {
		if cmp.LastRebasedAt.Seconds != 0 {
			if w.LastRebasedAt.Seconds != cmp.LastRebasedAt.Seconds {
				return false
			}
		}
		if cmp.LastRebasedAt.Nanos != 0 {
			if w.LastRebasedAt.Nanos != cmp.LastRebasedAt.Nanos {
				return false
			}
		}
	}

	if cmp.NeedsRebase != nil {
		if w.NeedsRebase == nil {
			return false
		}
		if w.NeedsRebase.Value != cmp.NeedsRebase.Value {
			return false
		}
	}

	if cmp.DisplayName != nil {
		if w.DisplayName == nil {
			return false
		}
		if w.DisplayName.Value != cmp.DisplayName.Value {
			return false
		}
	}

	if cmp.Description != nil {
		if w.Description == nil {
			return false
		}
		if w.Description.Value != cmp.Description.Value {
			return false
		}
	}

	return true
}

// MatchesAnyPartialEqFilter returns whether the receiver matches any filters in the given set.
func (w *Workspace) MatchesAnyPartialEqFilter(filters []*Workspace) bool {
	if len(filters) == 0 {
		return true
	}

	for _, filt := range filters {
		if w.PassesPartialEqFilter(filt) {
			return true
		}
	}

	return false
}

// PassesPartialEqFilter returns whether the WorkspaceBuild matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (w *WorkspaceBuild) PassesPartialEqFilter(cmp *WorkspaceBuild) bool {
	// if the resource is nil, there is nothing to send to the client
	if w == nil {
		return false
	}

	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if !w.Key.PassesPartialEqFilter(cmp.Key) {
		return false
	}

	if !w.State.PassesPartialEqFilter(cmp.State) {
		return false
	}

	if cmp.Error != nil {
		if w.Error == nil {
			return false
		}
		if w.Error.Value != cmp.Error.Value {
			return false
		}
	}

	if cmp.BuiltBy != nil {
		if w.BuiltBy == nil {
			return false
		}
		if w.BuiltBy.Value != cmp.BuiltBy.Value {
			return false
		}
	}

	if !w.AuthzResult.PassesPartialEqFilter(cmp.AuthzResult) {
		return false
	}

	return true
}

// MatchesAnyPartialEqFilter returns whether the receiver matches any filters in the given set.
func (w *WorkspaceBuild) MatchesAnyPartialEqFilter(filters []*WorkspaceBuild) bool {
	if len(filters) == 0 {
		return true
	}

	for _, filt := range filters {
		if w.PassesPartialEqFilter(filt) {
			return true
		}
	}

	return false
}

// PassesPartialEqFilter returns whether the WorkspaceBuildDetails matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (w *WorkspaceBuildDetails) PassesPartialEqFilter(cmp *WorkspaceBuildDetails) bool {
	// if the resource is nil, there is nothing to send to the client
	if w == nil {
		return false
	}

	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if !w.Key.PassesPartialEqFilter(cmp.Key) {
		return false
	}

	if !w.State.PassesPartialEqFilter(cmp.State) {
		return false
	}

	if !w.Stage.PassesPartialEqFilter(cmp.Stage) {
		return false
	}

	if !w.InputValidationResults.PassesPartialEqFilter(cmp.InputValidationResults) {
		return false
	}

	if !w.ConfigletBuildResults.PassesPartialEqFilter(cmp.ConfigletBuildResults) {
		return false
	}

	if !w.ConfigValidationResult.PassesPartialEqFilter(cmp.ConfigValidationResult) {
		return false
	}

	if !w.ImageValidationResult.PassesPartialEqFilter(cmp.ImageValidationResult) {
		return false
	}

	if !w.ConfigValidationSkipCause.PassesPartialEqFilter(cmp.ConfigValidationSkipCause) {
		return false
	}

	if !w.ImageValidationSkipCause.PassesPartialEqFilter(cmp.ImageValidationSkipCause) {
		return false
	}

	if !w.BuildStageState.PassesPartialEqFilter(cmp.BuildStageState) {
		return false
	}

	if !w.AuthzStatus.PassesPartialEqFilter(cmp.AuthzStatus) {
		return false
	}

	return true
}

// MatchesAnyPartialEqFilter returns whether the receiver matches any filters in the given set.
func (w *WorkspaceBuildDetails) MatchesAnyPartialEqFilter(filters []*WorkspaceBuildDetails) bool {
	if len(filters) == 0 {
		return true
	}

	for _, filt := range filters {
		if w.PassesPartialEqFilter(filt) {
			return true
		}
	}

	return false
}

// PassesPartialEqFilter returns whether the WorkspaceConfig matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (w *WorkspaceConfig) PassesPartialEqFilter(cmp *WorkspaceConfig) bool {
	// if the resource is nil, there is nothing to send to the client
	if w == nil {
		return false
	}

	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if !w.Key.PassesPartialEqFilter(cmp.Key) {
		return false
	}

	if cmp.DisplayName != nil {
		if w.DisplayName == nil {
			return false
		}
		if w.DisplayName.Value != cmp.DisplayName.Value {
			return false
		}
	}

	if cmp.Description != nil {
		if w.Description == nil {
			return false
		}
		if w.Description.Value != cmp.Description.Value {
			return false
		}
	}

	if !w.Request.PassesPartialEqFilter(cmp.Request) {
		return false
	}

	if !w.RequestParams.PassesPartialEqFilter(cmp.RequestParams) {
		return false
	}

	return true
}

// MatchesAnyPartialEqFilter returns whether the receiver matches any filters in the given set.
func (w *WorkspaceConfig) MatchesAnyPartialEqFilter(filters []*WorkspaceConfig) bool {
	if len(filters) == 0 {
		return true
	}

	for _, filt := range filters {
		if w.PassesPartialEqFilter(filt) {
			return true
		}
	}

	return false
}
