// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package workspace

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkspaceServiceClient is the client API for WorkspaceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkspaceServiceClient interface {
	GetOne(ctx context.Context, in *WorkspaceRequest, opts ...grpc.CallOption) (*WorkspaceResponse, error)
	GetAll(ctx context.Context, in *WorkspaceStreamRequest, opts ...grpc.CallOption) (WorkspaceService_GetAllClient, error)
	Subscribe(ctx context.Context, in *WorkspaceStreamRequest, opts ...grpc.CallOption) (WorkspaceService_SubscribeClient, error)
}

type workspaceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkspaceServiceClient(cc grpc.ClientConnInterface) WorkspaceServiceClient {
	return &workspaceServiceClient{cc}
}

func (c *workspaceServiceClient) GetOne(ctx context.Context, in *WorkspaceRequest, opts ...grpc.CallOption) (*WorkspaceResponse, error) {
	out := new(WorkspaceResponse)
	err := c.cc.Invoke(ctx, "/arista.workspace.v1.WorkspaceService/GetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceServiceClient) GetAll(ctx context.Context, in *WorkspaceStreamRequest, opts ...grpc.CallOption) (WorkspaceService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &WorkspaceService_ServiceDesc.Streams[0], "/arista.workspace.v1.WorkspaceService/GetAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &workspaceServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WorkspaceService_GetAllClient interface {
	Recv() (*WorkspaceStreamResponse, error)
	grpc.ClientStream
}

type workspaceServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *workspaceServiceGetAllClient) Recv() (*WorkspaceStreamResponse, error) {
	m := new(WorkspaceStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workspaceServiceClient) Subscribe(ctx context.Context, in *WorkspaceStreamRequest, opts ...grpc.CallOption) (WorkspaceService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &WorkspaceService_ServiceDesc.Streams[1], "/arista.workspace.v1.WorkspaceService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &workspaceServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WorkspaceService_SubscribeClient interface {
	Recv() (*WorkspaceStreamResponse, error)
	grpc.ClientStream
}

type workspaceServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *workspaceServiceSubscribeClient) Recv() (*WorkspaceStreamResponse, error) {
	m := new(WorkspaceStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WorkspaceServiceServer is the server API for WorkspaceService service.
// All implementations must embed UnimplementedWorkspaceServiceServer
// for forward compatibility
type WorkspaceServiceServer interface {
	GetOne(context.Context, *WorkspaceRequest) (*WorkspaceResponse, error)
	GetAll(*WorkspaceStreamRequest, WorkspaceService_GetAllServer) error
	Subscribe(*WorkspaceStreamRequest, WorkspaceService_SubscribeServer) error
	mustEmbedUnimplementedWorkspaceServiceServer()
}

// UnimplementedWorkspaceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWorkspaceServiceServer struct {
}

func (UnimplementedWorkspaceServiceServer) GetOne(context.Context, *WorkspaceRequest) (*WorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedWorkspaceServiceServer) GetAll(*WorkspaceStreamRequest, WorkspaceService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedWorkspaceServiceServer) Subscribe(*WorkspaceStreamRequest, WorkspaceService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedWorkspaceServiceServer) mustEmbedUnimplementedWorkspaceServiceServer() {}

// UnsafeWorkspaceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkspaceServiceServer will
// result in compilation errors.
type UnsafeWorkspaceServiceServer interface {
	mustEmbedUnimplementedWorkspaceServiceServer()
}

func RegisterWorkspaceServiceServer(s grpc.ServiceRegistrar, srv WorkspaceServiceServer) {
	s.RegisterService(&WorkspaceService_ServiceDesc, srv)
}

func _WorkspaceService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arista.workspace.v1.WorkspaceService/GetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServiceServer).GetOne(ctx, req.(*WorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WorkspaceStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkspaceServiceServer).GetAll(m, &workspaceServiceGetAllServer{stream})
}

type WorkspaceService_GetAllServer interface {
	Send(*WorkspaceStreamResponse) error
	grpc.ServerStream
}

type workspaceServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *workspaceServiceGetAllServer) Send(m *WorkspaceStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _WorkspaceService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WorkspaceStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkspaceServiceServer).Subscribe(m, &workspaceServiceSubscribeServer{stream})
}

type WorkspaceService_SubscribeServer interface {
	Send(*WorkspaceStreamResponse) error
	grpc.ServerStream
}

type workspaceServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *workspaceServiceSubscribeServer) Send(m *WorkspaceStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// WorkspaceService_ServiceDesc is the grpc.ServiceDesc for WorkspaceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkspaceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.workspace.v1.WorkspaceService",
	HandlerType: (*WorkspaceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _WorkspaceService_GetOne_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAll",
			Handler:       _WorkspaceService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _WorkspaceService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/workspace.v1/services.gen.proto",
}

// WorkspaceBuildServiceClient is the client API for WorkspaceBuildService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkspaceBuildServiceClient interface {
	GetOne(ctx context.Context, in *WorkspaceBuildRequest, opts ...grpc.CallOption) (*WorkspaceBuildResponse, error)
	GetAll(ctx context.Context, in *WorkspaceBuildStreamRequest, opts ...grpc.CallOption) (WorkspaceBuildService_GetAllClient, error)
	Subscribe(ctx context.Context, in *WorkspaceBuildStreamRequest, opts ...grpc.CallOption) (WorkspaceBuildService_SubscribeClient, error)
}

type workspaceBuildServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkspaceBuildServiceClient(cc grpc.ClientConnInterface) WorkspaceBuildServiceClient {
	return &workspaceBuildServiceClient{cc}
}

func (c *workspaceBuildServiceClient) GetOne(ctx context.Context, in *WorkspaceBuildRequest, opts ...grpc.CallOption) (*WorkspaceBuildResponse, error) {
	out := new(WorkspaceBuildResponse)
	err := c.cc.Invoke(ctx, "/arista.workspace.v1.WorkspaceBuildService/GetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceBuildServiceClient) GetAll(ctx context.Context, in *WorkspaceBuildStreamRequest, opts ...grpc.CallOption) (WorkspaceBuildService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &WorkspaceBuildService_ServiceDesc.Streams[0], "/arista.workspace.v1.WorkspaceBuildService/GetAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &workspaceBuildServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WorkspaceBuildService_GetAllClient interface {
	Recv() (*WorkspaceBuildStreamResponse, error)
	grpc.ClientStream
}

type workspaceBuildServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *workspaceBuildServiceGetAllClient) Recv() (*WorkspaceBuildStreamResponse, error) {
	m := new(WorkspaceBuildStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workspaceBuildServiceClient) Subscribe(ctx context.Context, in *WorkspaceBuildStreamRequest, opts ...grpc.CallOption) (WorkspaceBuildService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &WorkspaceBuildService_ServiceDesc.Streams[1], "/arista.workspace.v1.WorkspaceBuildService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &workspaceBuildServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WorkspaceBuildService_SubscribeClient interface {
	Recv() (*WorkspaceBuildStreamResponse, error)
	grpc.ClientStream
}

type workspaceBuildServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *workspaceBuildServiceSubscribeClient) Recv() (*WorkspaceBuildStreamResponse, error) {
	m := new(WorkspaceBuildStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WorkspaceBuildServiceServer is the server API for WorkspaceBuildService service.
// All implementations must embed UnimplementedWorkspaceBuildServiceServer
// for forward compatibility
type WorkspaceBuildServiceServer interface {
	GetOne(context.Context, *WorkspaceBuildRequest) (*WorkspaceBuildResponse, error)
	GetAll(*WorkspaceBuildStreamRequest, WorkspaceBuildService_GetAllServer) error
	Subscribe(*WorkspaceBuildStreamRequest, WorkspaceBuildService_SubscribeServer) error
	mustEmbedUnimplementedWorkspaceBuildServiceServer()
}

// UnimplementedWorkspaceBuildServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWorkspaceBuildServiceServer struct {
}

func (UnimplementedWorkspaceBuildServiceServer) GetOne(context.Context, *WorkspaceBuildRequest) (*WorkspaceBuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedWorkspaceBuildServiceServer) GetAll(*WorkspaceBuildStreamRequest, WorkspaceBuildService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedWorkspaceBuildServiceServer) Subscribe(*WorkspaceBuildStreamRequest, WorkspaceBuildService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedWorkspaceBuildServiceServer) mustEmbedUnimplementedWorkspaceBuildServiceServer() {}

// UnsafeWorkspaceBuildServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkspaceBuildServiceServer will
// result in compilation errors.
type UnsafeWorkspaceBuildServiceServer interface {
	mustEmbedUnimplementedWorkspaceBuildServiceServer()
}

func RegisterWorkspaceBuildServiceServer(s grpc.ServiceRegistrar, srv WorkspaceBuildServiceServer) {
	s.RegisterService(&WorkspaceBuildService_ServiceDesc, srv)
}

func _WorkspaceBuildService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceBuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceBuildServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arista.workspace.v1.WorkspaceBuildService/GetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceBuildServiceServer).GetOne(ctx, req.(*WorkspaceBuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceBuildService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WorkspaceBuildStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkspaceBuildServiceServer).GetAll(m, &workspaceBuildServiceGetAllServer{stream})
}

type WorkspaceBuildService_GetAllServer interface {
	Send(*WorkspaceBuildStreamResponse) error
	grpc.ServerStream
}

type workspaceBuildServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *workspaceBuildServiceGetAllServer) Send(m *WorkspaceBuildStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _WorkspaceBuildService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WorkspaceBuildStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkspaceBuildServiceServer).Subscribe(m, &workspaceBuildServiceSubscribeServer{stream})
}

type WorkspaceBuildService_SubscribeServer interface {
	Send(*WorkspaceBuildStreamResponse) error
	grpc.ServerStream
}

type workspaceBuildServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *workspaceBuildServiceSubscribeServer) Send(m *WorkspaceBuildStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// WorkspaceBuildService_ServiceDesc is the grpc.ServiceDesc for WorkspaceBuildService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkspaceBuildService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.workspace.v1.WorkspaceBuildService",
	HandlerType: (*WorkspaceBuildServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _WorkspaceBuildService_GetOne_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAll",
			Handler:       _WorkspaceBuildService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _WorkspaceBuildService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/workspace.v1/services.gen.proto",
}

// WorkspaceConfigServiceClient is the client API for WorkspaceConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkspaceConfigServiceClient interface {
	GetOne(ctx context.Context, in *WorkspaceConfigRequest, opts ...grpc.CallOption) (*WorkspaceConfigResponse, error)
	GetAll(ctx context.Context, in *WorkspaceConfigStreamRequest, opts ...grpc.CallOption) (WorkspaceConfigService_GetAllClient, error)
	Subscribe(ctx context.Context, in *WorkspaceConfigStreamRequest, opts ...grpc.CallOption) (WorkspaceConfigService_SubscribeClient, error)
	Set(ctx context.Context, in *WorkspaceConfigSetRequest, opts ...grpc.CallOption) (*WorkspaceConfigSetResponse, error)
	Delete(ctx context.Context, in *WorkspaceConfigDeleteRequest, opts ...grpc.CallOption) (*WorkspaceConfigDeleteResponse, error)
}

type workspaceConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkspaceConfigServiceClient(cc grpc.ClientConnInterface) WorkspaceConfigServiceClient {
	return &workspaceConfigServiceClient{cc}
}

func (c *workspaceConfigServiceClient) GetOne(ctx context.Context, in *WorkspaceConfigRequest, opts ...grpc.CallOption) (*WorkspaceConfigResponse, error) {
	out := new(WorkspaceConfigResponse)
	err := c.cc.Invoke(ctx, "/arista.workspace.v1.WorkspaceConfigService/GetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceConfigServiceClient) GetAll(ctx context.Context, in *WorkspaceConfigStreamRequest, opts ...grpc.CallOption) (WorkspaceConfigService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &WorkspaceConfigService_ServiceDesc.Streams[0], "/arista.workspace.v1.WorkspaceConfigService/GetAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &workspaceConfigServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WorkspaceConfigService_GetAllClient interface {
	Recv() (*WorkspaceConfigStreamResponse, error)
	grpc.ClientStream
}

type workspaceConfigServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *workspaceConfigServiceGetAllClient) Recv() (*WorkspaceConfigStreamResponse, error) {
	m := new(WorkspaceConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workspaceConfigServiceClient) Subscribe(ctx context.Context, in *WorkspaceConfigStreamRequest, opts ...grpc.CallOption) (WorkspaceConfigService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &WorkspaceConfigService_ServiceDesc.Streams[1], "/arista.workspace.v1.WorkspaceConfigService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &workspaceConfigServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WorkspaceConfigService_SubscribeClient interface {
	Recv() (*WorkspaceConfigStreamResponse, error)
	grpc.ClientStream
}

type workspaceConfigServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *workspaceConfigServiceSubscribeClient) Recv() (*WorkspaceConfigStreamResponse, error) {
	m := new(WorkspaceConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workspaceConfigServiceClient) Set(ctx context.Context, in *WorkspaceConfigSetRequest, opts ...grpc.CallOption) (*WorkspaceConfigSetResponse, error) {
	out := new(WorkspaceConfigSetResponse)
	err := c.cc.Invoke(ctx, "/arista.workspace.v1.WorkspaceConfigService/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceConfigServiceClient) Delete(ctx context.Context, in *WorkspaceConfigDeleteRequest, opts ...grpc.CallOption) (*WorkspaceConfigDeleteResponse, error) {
	out := new(WorkspaceConfigDeleteResponse)
	err := c.cc.Invoke(ctx, "/arista.workspace.v1.WorkspaceConfigService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkspaceConfigServiceServer is the server API for WorkspaceConfigService service.
// All implementations must embed UnimplementedWorkspaceConfigServiceServer
// for forward compatibility
type WorkspaceConfigServiceServer interface {
	GetOne(context.Context, *WorkspaceConfigRequest) (*WorkspaceConfigResponse, error)
	GetAll(*WorkspaceConfigStreamRequest, WorkspaceConfigService_GetAllServer) error
	Subscribe(*WorkspaceConfigStreamRequest, WorkspaceConfigService_SubscribeServer) error
	Set(context.Context, *WorkspaceConfigSetRequest) (*WorkspaceConfigSetResponse, error)
	Delete(context.Context, *WorkspaceConfigDeleteRequest) (*WorkspaceConfigDeleteResponse, error)
	mustEmbedUnimplementedWorkspaceConfigServiceServer()
}

// UnimplementedWorkspaceConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWorkspaceConfigServiceServer struct {
}

func (UnimplementedWorkspaceConfigServiceServer) GetOne(context.Context, *WorkspaceConfigRequest) (*WorkspaceConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedWorkspaceConfigServiceServer) GetAll(*WorkspaceConfigStreamRequest, WorkspaceConfigService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedWorkspaceConfigServiceServer) Subscribe(*WorkspaceConfigStreamRequest, WorkspaceConfigService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedWorkspaceConfigServiceServer) Set(context.Context, *WorkspaceConfigSetRequest) (*WorkspaceConfigSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedWorkspaceConfigServiceServer) Delete(context.Context, *WorkspaceConfigDeleteRequest) (*WorkspaceConfigDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedWorkspaceConfigServiceServer) mustEmbedUnimplementedWorkspaceConfigServiceServer() {
}

// UnsafeWorkspaceConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkspaceConfigServiceServer will
// result in compilation errors.
type UnsafeWorkspaceConfigServiceServer interface {
	mustEmbedUnimplementedWorkspaceConfigServiceServer()
}

func RegisterWorkspaceConfigServiceServer(s grpc.ServiceRegistrar, srv WorkspaceConfigServiceServer) {
	s.RegisterService(&WorkspaceConfigService_ServiceDesc, srv)
}

func _WorkspaceConfigService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceConfigServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arista.workspace.v1.WorkspaceConfigService/GetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceConfigServiceServer).GetOne(ctx, req.(*WorkspaceConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceConfigService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WorkspaceConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkspaceConfigServiceServer).GetAll(m, &workspaceConfigServiceGetAllServer{stream})
}

type WorkspaceConfigService_GetAllServer interface {
	Send(*WorkspaceConfigStreamResponse) error
	grpc.ServerStream
}

type workspaceConfigServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *workspaceConfigServiceGetAllServer) Send(m *WorkspaceConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _WorkspaceConfigService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WorkspaceConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkspaceConfigServiceServer).Subscribe(m, &workspaceConfigServiceSubscribeServer{stream})
}

type WorkspaceConfigService_SubscribeServer interface {
	Send(*WorkspaceConfigStreamResponse) error
	grpc.ServerStream
}

type workspaceConfigServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *workspaceConfigServiceSubscribeServer) Send(m *WorkspaceConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _WorkspaceConfigService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceConfigSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceConfigServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arista.workspace.v1.WorkspaceConfigService/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceConfigServiceServer).Set(ctx, req.(*WorkspaceConfigSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceConfigService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceConfigDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceConfigServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arista.workspace.v1.WorkspaceConfigService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceConfigServiceServer).Delete(ctx, req.(*WorkspaceConfigDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkspaceConfigService_ServiceDesc is the grpc.ServiceDesc for WorkspaceConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkspaceConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.workspace.v1.WorkspaceConfigService",
	HandlerType: (*WorkspaceConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _WorkspaceConfigService_GetOne_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _WorkspaceConfigService_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _WorkspaceConfigService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAll",
			Handler:       _WorkspaceConfigService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _WorkspaceConfigService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/workspace.v1/services.gen.proto",
}
