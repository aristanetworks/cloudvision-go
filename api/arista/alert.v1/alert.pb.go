// Copyright (c) 2023 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.0
// 	protoc        v4.24.4
// source: arista/alert.v1/alert.proto

package alert

import (
	fmp "github.com/aristanetworks/cloudvision-go/api/fmp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ConfigErrorType describes the set of possible config error types
type ConfigErrorType int32

const (
	// CONFIG_ERROR_TYPE_UNSPECIFIED is the unspecified enum value
	ConfigErrorType_CONFIG_ERROR_TYPE_UNSPECIFIED ConfigErrorType = 0
	// CONFIG_ERROR_TYPE_INVALID_FORMAT is caused by invalid format for value (eg: url)
	ConfigErrorType_CONFIG_ERROR_TYPE_INVALID_FORMAT ConfigErrorType = 2
	// CONFIG_ERROR_TYPE_INVALID_SYNTAX is caused by invalid syntax for value (eg: regex)
	ConfigErrorType_CONFIG_ERROR_TYPE_INVALID_SYNTAX ConfigErrorType = 3
	// CONFIG_ERROR_TYPE_TEMPLATE_INVALID is caused by failure to parse a template
	ConfigErrorType_CONFIG_ERROR_TYPE_TEMPLATE_INVALID ConfigErrorType = 4
	// CONFIG_ERROR_TYPE_ILLEGAL_VALUE is caused by a value outside of its bounds
	ConfigErrorType_CONFIG_ERROR_TYPE_ILLEGAL_VALUE ConfigErrorType = 5
	// CONFIG_ERROR_TYPE_MISSING_REQUIRED is caused by a missing required attribute
	ConfigErrorType_CONFIG_ERROR_TYPE_MISSING_REQUIRED ConfigErrorType = 6
	// CONFIG_ERROR_TYPE_INVALID_TYPE is caused by the wrong type found in backing store
	ConfigErrorType_CONFIG_ERROR_TYPE_INVALID_TYPE ConfigErrorType = 7
)

// Enum value maps for ConfigErrorType.
var (
	ConfigErrorType_name = map[int32]string{
		0: "CONFIG_ERROR_TYPE_UNSPECIFIED",
		2: "CONFIG_ERROR_TYPE_INVALID_FORMAT",
		3: "CONFIG_ERROR_TYPE_INVALID_SYNTAX",
		4: "CONFIG_ERROR_TYPE_TEMPLATE_INVALID",
		5: "CONFIG_ERROR_TYPE_ILLEGAL_VALUE",
		6: "CONFIG_ERROR_TYPE_MISSING_REQUIRED",
		7: "CONFIG_ERROR_TYPE_INVALID_TYPE",
	}
	ConfigErrorType_value = map[string]int32{
		"CONFIG_ERROR_TYPE_UNSPECIFIED":      0,
		"CONFIG_ERROR_TYPE_INVALID_FORMAT":   2,
		"CONFIG_ERROR_TYPE_INVALID_SYNTAX":   3,
		"CONFIG_ERROR_TYPE_TEMPLATE_INVALID": 4,
		"CONFIG_ERROR_TYPE_ILLEGAL_VALUE":    5,
		"CONFIG_ERROR_TYPE_MISSING_REQUIRED": 6,
		"CONFIG_ERROR_TYPE_INVALID_TYPE":     7,
	}
)

func (x ConfigErrorType) Enum() *ConfigErrorType {
	p := new(ConfigErrorType)
	*p = x
	return p
}

func (x ConfigErrorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigErrorType) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_alert_v1_alert_proto_enumTypes[0].Descriptor()
}

func (ConfigErrorType) Type() protoreflect.EnumType {
	return &file_arista_alert_v1_alert_proto_enumTypes[0]
}

func (x ConfigErrorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigErrorType.Descriptor instead.
func (ConfigErrorType) EnumDescriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{0}
}

// EndpointErrorType describe the set of possible endpoint types
type EndpointErrorType int32

const (
	// ENDPOINT_ERROR_TYPE_UNSPECIFIED is the unspecified enum value
	EndpointErrorType_ENDPOINT_ERROR_TYPE_UNSPECIFIED EndpointErrorType = 0
	// ENDPOINT_ERROR_TYPE_HTTP_POST_ERROR an error in sending HTTP request or reading a HTTP
	// response
	EndpointErrorType_ENDPOINT_ERROR_TYPE_HTTP_POST_ERROR EndpointErrorType = 1
	// ENDPOINT_ERROR_TYPE_JSON_MARSHAL_ERROR is caused by errors while encoding json
	EndpointErrorType_ENDPOINT_ERROR_TYPE_JSON_MARSHAL_ERROR EndpointErrorType = 2
	// ENDPOINT_ERROR_TYPE_INVALID_CONFIG_ERROR is an error caused by invalid config (missing,
	// bad format, etc)
	EndpointErrorType_ENDPOINT_ERROR_TYPE_INVALID_CONFIG_ERROR EndpointErrorType = 3
	// ENDPOINT_ERROR_TYPE_TEMPLATE_ERROR is caused by errors while executing templates
	EndpointErrorType_ENDPOINT_ERROR_TYPE_TEMPLATE_ERROR EndpointErrorType = 4
	// ENDPOINT_ERROR_TYPE_BAD_RESPONSE_ERROR is caused by receiving a negative response from an
	// endpoint indicating that the alert was not sent
	EndpointErrorType_ENDPOINT_ERROR_TYPE_BAD_RESPONSE_ERROR EndpointErrorType = 5
	// ENDPOINT_ERROR_TYPE_SMTP_ERROR is caused by errors with SMTP
	EndpointErrorType_ENDPOINT_ERROR_TYPE_SMTP_ERROR EndpointErrorType = 6
	// ENDPOINT_ERROR_TYPE_CONNECTION_ERROR is caused by errors with a connection
	EndpointErrorType_ENDPOINT_ERROR_TYPE_CONNECTION_ERROR EndpointErrorType = 7
	// ENDPOINT_ERROR_TYPE_TIMEOUT_ERROR is caused by errors with a connection
	EndpointErrorType_ENDPOINT_ERROR_TYPE_TIMEOUT_ERROR EndpointErrorType = 8
	// ENDPOINT_ERROR_TYPE_RATE_LIMIT_ERROR is caused by an Alerter rate limit being exceeded
	EndpointErrorType_ENDPOINT_ERROR_TYPE_RATE_LIMIT_ERROR EndpointErrorType = 9
	// ENDPOINT_ERROR_TYPE_ALERT_CAP_ERROR is caused by the number of alerts sent to a sender
	// exceeding the built-in limit
	EndpointErrorType_ENDPOINT_ERROR_TYPE_ALERT_CAP_ERROR EndpointErrorType = 10
	// ENDPOINT_ERROR_TYPE_O_AUTH_ERROR is caused when we failed authenticating using the
	// OAuth apis
	EndpointErrorType_ENDPOINT_ERROR_TYPE_O_AUTH_ERROR EndpointErrorType = 11
)

// Enum value maps for EndpointErrorType.
var (
	EndpointErrorType_name = map[int32]string{
		0:  "ENDPOINT_ERROR_TYPE_UNSPECIFIED",
		1:  "ENDPOINT_ERROR_TYPE_HTTP_POST_ERROR",
		2:  "ENDPOINT_ERROR_TYPE_JSON_MARSHAL_ERROR",
		3:  "ENDPOINT_ERROR_TYPE_INVALID_CONFIG_ERROR",
		4:  "ENDPOINT_ERROR_TYPE_TEMPLATE_ERROR",
		5:  "ENDPOINT_ERROR_TYPE_BAD_RESPONSE_ERROR",
		6:  "ENDPOINT_ERROR_TYPE_SMTP_ERROR",
		7:  "ENDPOINT_ERROR_TYPE_CONNECTION_ERROR",
		8:  "ENDPOINT_ERROR_TYPE_TIMEOUT_ERROR",
		9:  "ENDPOINT_ERROR_TYPE_RATE_LIMIT_ERROR",
		10: "ENDPOINT_ERROR_TYPE_ALERT_CAP_ERROR",
		11: "ENDPOINT_ERROR_TYPE_O_AUTH_ERROR",
	}
	EndpointErrorType_value = map[string]int32{
		"ENDPOINT_ERROR_TYPE_UNSPECIFIED":          0,
		"ENDPOINT_ERROR_TYPE_HTTP_POST_ERROR":      1,
		"ENDPOINT_ERROR_TYPE_JSON_MARSHAL_ERROR":   2,
		"ENDPOINT_ERROR_TYPE_INVALID_CONFIG_ERROR": 3,
		"ENDPOINT_ERROR_TYPE_TEMPLATE_ERROR":       4,
		"ENDPOINT_ERROR_TYPE_BAD_RESPONSE_ERROR":   5,
		"ENDPOINT_ERROR_TYPE_SMTP_ERROR":           6,
		"ENDPOINT_ERROR_TYPE_CONNECTION_ERROR":     7,
		"ENDPOINT_ERROR_TYPE_TIMEOUT_ERROR":        8,
		"ENDPOINT_ERROR_TYPE_RATE_LIMIT_ERROR":     9,
		"ENDPOINT_ERROR_TYPE_ALERT_CAP_ERROR":      10,
		"ENDPOINT_ERROR_TYPE_O_AUTH_ERROR":         11,
	}
)

func (x EndpointErrorType) Enum() *EndpointErrorType {
	p := new(EndpointErrorType)
	*p = x
	return p
}

func (x EndpointErrorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EndpointErrorType) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_alert_v1_alert_proto_enumTypes[1].Descriptor()
}

func (EndpointErrorType) Type() protoreflect.EnumType {
	return &file_arista_alert_v1_alert_proto_enumTypes[1]
}

func (x EndpointErrorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EndpointErrorType.Descriptor instead.
func (EndpointErrorType) EnumDescriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{1}
}

// CueSyslogMessageFormat is the message format for cue syslog messages
type CueSyslogMessageFormat int32

const (
	// CUE_SYSLOG_MESSAGE_FORMAT_UNSPECIFIED is the unspecified enum value
	CueSyslogMessageFormat_CUE_SYSLOG_MESSAGE_FORMAT_UNSPECIFIED CueSyslogMessageFormat = 0
	// CUE_SYSLOG_MESSAGE_FORMAT_PLAIN format uses the text format for constructing the syslog message
	CueSyslogMessageFormat_CUE_SYSLOG_MESSAGE_FORMAT_PLAIN CueSyslogMessageFormat = 1
	// CUE_SYSLOG_MESSAGE_FORMAT_IDMEF uses IDMEF message format as described here:
	// https://datatracker.ietf.org/doc/html/rfc4765
	CueSyslogMessageFormat_CUE_SYSLOG_MESSAGE_FORMAT_IDMEF CueSyslogMessageFormat = 2
)

// Enum value maps for CueSyslogMessageFormat.
var (
	CueSyslogMessageFormat_name = map[int32]string{
		0: "CUE_SYSLOG_MESSAGE_FORMAT_UNSPECIFIED",
		1: "CUE_SYSLOG_MESSAGE_FORMAT_PLAIN",
		2: "CUE_SYSLOG_MESSAGE_FORMAT_IDMEF",
	}
	CueSyslogMessageFormat_value = map[string]int32{
		"CUE_SYSLOG_MESSAGE_FORMAT_UNSPECIFIED": 0,
		"CUE_SYSLOG_MESSAGE_FORMAT_PLAIN":       1,
		"CUE_SYSLOG_MESSAGE_FORMAT_IDMEF":       2,
	}
)

func (x CueSyslogMessageFormat) Enum() *CueSyslogMessageFormat {
	p := new(CueSyslogMessageFormat)
	*p = x
	return p
}

func (x CueSyslogMessageFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CueSyslogMessageFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_alert_v1_alert_proto_enumTypes[2].Descriptor()
}

func (CueSyslogMessageFormat) Type() protoreflect.EnumType {
	return &file_arista_alert_v1_alert_proto_enumTypes[2]
}

func (x CueSyslogMessageFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CueSyslogMessageFormat.Descriptor instead.
func (CueSyslogMessageFormat) EnumDescriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{2}
}

// SNMPSecurityLevel indicates what level of security should be used
type SNMPSecurityLevel int32

const (
	// SNMP_SECURITY_LEVEL_UNSPECIFIED is the unspecified enum value
	SNMPSecurityLevel_SNMP_SECURITY_LEVEL_UNSPECIFIED SNMPSecurityLevel = 0
	// SNMP_SECURITY_LEVEL_NO_AUTH_NO_PRIV use no security
	SNMPSecurityLevel_SNMP_SECURITY_LEVEL_NO_AUTH_NO_PRIV SNMPSecurityLevel = 1
	// SNMP_SECURITY_LEVEL_AUTH_NO_PRIV use authentication without privacy
	SNMPSecurityLevel_SNMP_SECURITY_LEVEL_AUTH_NO_PRIV SNMPSecurityLevel = 2
	// SNMP_SECURITY_LEVEL_AUTH_PRIV use both authentication and privacy
	SNMPSecurityLevel_SNMP_SECURITY_LEVEL_AUTH_PRIV SNMPSecurityLevel = 3
)

// Enum value maps for SNMPSecurityLevel.
var (
	SNMPSecurityLevel_name = map[int32]string{
		0: "SNMP_SECURITY_LEVEL_UNSPECIFIED",
		1: "SNMP_SECURITY_LEVEL_NO_AUTH_NO_PRIV",
		2: "SNMP_SECURITY_LEVEL_AUTH_NO_PRIV",
		3: "SNMP_SECURITY_LEVEL_AUTH_PRIV",
	}
	SNMPSecurityLevel_value = map[string]int32{
		"SNMP_SECURITY_LEVEL_UNSPECIFIED":     0,
		"SNMP_SECURITY_LEVEL_NO_AUTH_NO_PRIV": 1,
		"SNMP_SECURITY_LEVEL_AUTH_NO_PRIV":    2,
		"SNMP_SECURITY_LEVEL_AUTH_PRIV":       3,
	}
)

func (x SNMPSecurityLevel) Enum() *SNMPSecurityLevel {
	p := new(SNMPSecurityLevel)
	*p = x
	return p
}

func (x SNMPSecurityLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SNMPSecurityLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_alert_v1_alert_proto_enumTypes[3].Descriptor()
}

func (SNMPSecurityLevel) Type() protoreflect.EnumType {
	return &file_arista_alert_v1_alert_proto_enumTypes[3]
}

func (x SNMPSecurityLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SNMPSecurityLevel.Descriptor instead.
func (SNMPSecurityLevel) EnumDescriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{3}
}

// SNMPAuthProtocol represents the authentication protocol to be used
type SNMPAuthProtocol int32

const (
	// SNMP_AUTH_PROTOCOL_UNSPECIFIED is the unspecified enum value
	SNMPAuthProtocol_SNMP_AUTH_PROTOCOL_UNSPECIFIED SNMPAuthProtocol = 0
	// SNMP_AUTH_PROTOCOL_MD5 use the md5 protocol
	SNMPAuthProtocol_SNMP_AUTH_PROTOCOL_MD5 SNMPAuthProtocol = 1
	// SNMP_AUTH_PROTOCOL_SHA use the sha protocol
	SNMPAuthProtocol_SNMP_AUTH_PROTOCOL_SHA SNMPAuthProtocol = 2
	// SNMP_AUTH_PROTOCOL_SHA_224 use the sha224 protocol
	SNMPAuthProtocol_SNMP_AUTH_PROTOCOL_SHA_224 SNMPAuthProtocol = 3
	// SNMP_AUTH_PROTOCOL_SHA_256 use the sha256 protocol
	SNMPAuthProtocol_SNMP_AUTH_PROTOCOL_SHA_256 SNMPAuthProtocol = 4
	// SNMP_AUTH_PROTOCOL_SHA_384 use the sha384 protocol
	SNMPAuthProtocol_SNMP_AUTH_PROTOCOL_SHA_384 SNMPAuthProtocol = 5
	// SNMP_AUTH_PROTOCOL_SHA_512 use the sha512 protocol
	SNMPAuthProtocol_SNMP_AUTH_PROTOCOL_SHA_512 SNMPAuthProtocol = 6
)

// Enum value maps for SNMPAuthProtocol.
var (
	SNMPAuthProtocol_name = map[int32]string{
		0: "SNMP_AUTH_PROTOCOL_UNSPECIFIED",
		1: "SNMP_AUTH_PROTOCOL_MD5",
		2: "SNMP_AUTH_PROTOCOL_SHA",
		3: "SNMP_AUTH_PROTOCOL_SHA_224",
		4: "SNMP_AUTH_PROTOCOL_SHA_256",
		5: "SNMP_AUTH_PROTOCOL_SHA_384",
		6: "SNMP_AUTH_PROTOCOL_SHA_512",
	}
	SNMPAuthProtocol_value = map[string]int32{
		"SNMP_AUTH_PROTOCOL_UNSPECIFIED": 0,
		"SNMP_AUTH_PROTOCOL_MD5":         1,
		"SNMP_AUTH_PROTOCOL_SHA":         2,
		"SNMP_AUTH_PROTOCOL_SHA_224":     3,
		"SNMP_AUTH_PROTOCOL_SHA_256":     4,
		"SNMP_AUTH_PROTOCOL_SHA_384":     5,
		"SNMP_AUTH_PROTOCOL_SHA_512":     6,
	}
)

func (x SNMPAuthProtocol) Enum() *SNMPAuthProtocol {
	p := new(SNMPAuthProtocol)
	*p = x
	return p
}

func (x SNMPAuthProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SNMPAuthProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_alert_v1_alert_proto_enumTypes[4].Descriptor()
}

func (SNMPAuthProtocol) Type() protoreflect.EnumType {
	return &file_arista_alert_v1_alert_proto_enumTypes[4]
}

func (x SNMPAuthProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SNMPAuthProtocol.Descriptor instead.
func (SNMPAuthProtocol) EnumDescriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{4}
}

// SNMPPrivProtocol represents the privacy protocol to be used
type SNMPPrivProtocol int32

const (
	// SNMP_PRIV_PROTOCOL_UNSPECIFIED is the unspecified enum value
	SNMPPrivProtocol_SNMP_PRIV_PROTOCOL_UNSPECIFIED SNMPPrivProtocol = 0
	// SNMP_PRIV_PROTOCOL_DES use the des protocol
	SNMPPrivProtocol_SNMP_PRIV_PROTOCOL_DES SNMPPrivProtocol = 1
	// SNMP_PRIV_PROTOCOL_AES use the aes protocol
	SNMPPrivProtocol_SNMP_PRIV_PROTOCOL_AES SNMPPrivProtocol = 2
	// SNMP_PRIV_PROTOCOL_AES_192 use the aes192 protocol
	SNMPPrivProtocol_SNMP_PRIV_PROTOCOL_AES_192 SNMPPrivProtocol = 3
	// SNMP_PRIV_PROTOCOL_AES_256 use the aes256 protocol
	SNMPPrivProtocol_SNMP_PRIV_PROTOCOL_AES_256 SNMPPrivProtocol = 4
	// SNMP_PRIV_PROTOCOL_AES_192C use the aes192c protocol
	SNMPPrivProtocol_SNMP_PRIV_PROTOCOL_AES_192C SNMPPrivProtocol = 5
	// SNMP_PRIV_PROTOCOL_AES_256C use the aes256c protocol
	SNMPPrivProtocol_SNMP_PRIV_PROTOCOL_AES_256C SNMPPrivProtocol = 6
)

// Enum value maps for SNMPPrivProtocol.
var (
	SNMPPrivProtocol_name = map[int32]string{
		0: "SNMP_PRIV_PROTOCOL_UNSPECIFIED",
		1: "SNMP_PRIV_PROTOCOL_DES",
		2: "SNMP_PRIV_PROTOCOL_AES",
		3: "SNMP_PRIV_PROTOCOL_AES_192",
		4: "SNMP_PRIV_PROTOCOL_AES_256",
		5: "SNMP_PRIV_PROTOCOL_AES_192C",
		6: "SNMP_PRIV_PROTOCOL_AES_256C",
	}
	SNMPPrivProtocol_value = map[string]int32{
		"SNMP_PRIV_PROTOCOL_UNSPECIFIED": 0,
		"SNMP_PRIV_PROTOCOL_DES":         1,
		"SNMP_PRIV_PROTOCOL_AES":         2,
		"SNMP_PRIV_PROTOCOL_AES_192":     3,
		"SNMP_PRIV_PROTOCOL_AES_256":     4,
		"SNMP_PRIV_PROTOCOL_AES_192C":    5,
		"SNMP_PRIV_PROTOCOL_AES_256C":    6,
	}
)

func (x SNMPPrivProtocol) Enum() *SNMPPrivProtocol {
	p := new(SNMPPrivProtocol)
	*p = x
	return p
}

func (x SNMPPrivProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SNMPPrivProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_alert_v1_alert_proto_enumTypes[5].Descriptor()
}

func (SNMPPrivProtocol) Type() protoreflect.EnumType {
	return &file_arista_alert_v1_alert_proto_enumTypes[5]
}

func (x SNMPPrivProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SNMPPrivProtocol.Descriptor instead.
func (SNMPPrivProtocol) EnumDescriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{5}
}

// CueSNMPAuthProtocol represents the authentication protocol to be used
type CueSNMPAuthProtocol int32

const (
	// CUE_SNMP_AUTH_PROTOCOL_UNSPECIFIED is the unspecified enum value
	CueSNMPAuthProtocol_CUE_SNMP_AUTH_PROTOCOL_UNSPECIFIED CueSNMPAuthProtocol = 0
	// CUE_SNMP_AUTH_PROTOCOL_MD5 use the md5 protocol
	CueSNMPAuthProtocol_CUE_SNMP_AUTH_PROTOCOL_MD5 CueSNMPAuthProtocol = 1
	// CUE_SNMP_AUTH_PROTOCOL_SHA use the sha protocol
	CueSNMPAuthProtocol_CUE_SNMP_AUTH_PROTOCOL_SHA CueSNMPAuthProtocol = 2
)

// Enum value maps for CueSNMPAuthProtocol.
var (
	CueSNMPAuthProtocol_name = map[int32]string{
		0: "CUE_SNMP_AUTH_PROTOCOL_UNSPECIFIED",
		1: "CUE_SNMP_AUTH_PROTOCOL_MD5",
		2: "CUE_SNMP_AUTH_PROTOCOL_SHA",
	}
	CueSNMPAuthProtocol_value = map[string]int32{
		"CUE_SNMP_AUTH_PROTOCOL_UNSPECIFIED": 0,
		"CUE_SNMP_AUTH_PROTOCOL_MD5":         1,
		"CUE_SNMP_AUTH_PROTOCOL_SHA":         2,
	}
)

func (x CueSNMPAuthProtocol) Enum() *CueSNMPAuthProtocol {
	p := new(CueSNMPAuthProtocol)
	*p = x
	return p
}

func (x CueSNMPAuthProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CueSNMPAuthProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_alert_v1_alert_proto_enumTypes[6].Descriptor()
}

func (CueSNMPAuthProtocol) Type() protoreflect.EnumType {
	return &file_arista_alert_v1_alert_proto_enumTypes[6]
}

func (x CueSNMPAuthProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CueSNMPAuthProtocol.Descriptor instead.
func (CueSNMPAuthProtocol) EnumDescriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{6}
}

// CueSNMPPrivProtocol represents the privacy protocol to be used
type CueSNMPPrivProtocol int32

const (
	// CUE_SNMP_PRIV_PROTOCOL_UNSPECIFIED is the unspecified enum value
	CueSNMPPrivProtocol_CUE_SNMP_PRIV_PROTOCOL_UNSPECIFIED CueSNMPPrivProtocol = 0
	// CUE_SNMP_PRIV_PROTOCOL_DES use the des protocol
	CueSNMPPrivProtocol_CUE_SNMP_PRIV_PROTOCOL_DES CueSNMPPrivProtocol = 1
	// CUE_SNMP_PRIV_PROTOCOL_AES use the aes protocol
	CueSNMPPrivProtocol_CUE_SNMP_PRIV_PROTOCOL_AES CueSNMPPrivProtocol = 2
)

// Enum value maps for CueSNMPPrivProtocol.
var (
	CueSNMPPrivProtocol_name = map[int32]string{
		0: "CUE_SNMP_PRIV_PROTOCOL_UNSPECIFIED",
		1: "CUE_SNMP_PRIV_PROTOCOL_DES",
		2: "CUE_SNMP_PRIV_PROTOCOL_AES",
	}
	CueSNMPPrivProtocol_value = map[string]int32{
		"CUE_SNMP_PRIV_PROTOCOL_UNSPECIFIED": 0,
		"CUE_SNMP_PRIV_PROTOCOL_DES":         1,
		"CUE_SNMP_PRIV_PROTOCOL_AES":         2,
	}
)

func (x CueSNMPPrivProtocol) Enum() *CueSNMPPrivProtocol {
	p := new(CueSNMPPrivProtocol)
	*p = x
	return p
}

func (x CueSNMPPrivProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CueSNMPPrivProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_alert_v1_alert_proto_enumTypes[7].Descriptor()
}

func (CueSNMPPrivProtocol) Type() protoreflect.EnumType {
	return &file_arista_alert_v1_alert_proto_enumTypes[7]
}

func (x CueSNMPPrivProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CueSNMPPrivProtocol.Descriptor instead.
func (CueSNMPPrivProtocol) EnumDescriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{7}
}

// TemplateType describes the types of Templates that are usable
type TemplateType int32

const (
	// TEMPLATE_TYPE_UNSPECIFIED is the unspecified enum value
	TemplateType_TEMPLATE_TYPE_UNSPECIFIED TemplateType = 0
	// TEMPLATE_TYPE_EMAIL_HTML is the key of the html template for sent emails
	TemplateType_TEMPLATE_TYPE_EMAIL_HTML TemplateType = 1
	// TEMPLATE_TYPE_EMAIL_TEXT is the key of the text template for sent emails
	TemplateType_TEMPLATE_TYPE_EMAIL_TEXT TemplateType = 2
	// TEMPLATE_TYPE_SLACK_MESSAGE is the key of the message template for sent slack messages
	TemplateType_TEMPLATE_TYPE_SLACK_MESSAGE TemplateType = 3
	// TEMPLATE_TYPE_PUSHOVER_MESSAGE is the key of the message template for sent pushover messages
	TemplateType_TEMPLATE_TYPE_PUSHOVER_MESSAGE TemplateType = 4
	// TEMPLATE_TYPE_PAGERDUTY_SUMMARY is the key of the summary template for sent pagerduty messages
	TemplateType_TEMPLATE_TYPE_PAGERDUTY_SUMMARY TemplateType = 5
	// TEMPLATE_TYPE_VICTOROPS_DISPLAY_NAME is the key of the display name template for sent victorops
	// messages
	TemplateType_TEMPLATE_TYPE_VICTOROPS_DISPLAY_NAME TemplateType = 6
	// TEMPLATE_TYPE_VICTOROPS_STATE_MESSAGE is the key of the state message template for sent
	// victorops messages
	TemplateType_TEMPLATE_TYPE_VICTOROPS_STATE_MESSAGE TemplateType = 7
	// TEMPLATE_TYPE_GOOGLE_CHAT_MESSAGE is the key of the message template for sent Google chat
	// messages
	TemplateType_TEMPLATE_TYPE_GOOGLE_CHAT_MESSAGE TemplateType = 8
	// TEMPLATE_TYPE_MICROSOFT_TEAMS_MESSAGE is the key of the message template for sent Microsoft
	// teams messages
	TemplateType_TEMPLATE_TYPE_MICROSOFT_TEAMS_MESSAGE TemplateType = 9
	// TEMPLATE_TYPE_EMAIL_SUBJECT is the key of the subject line template of a sent email
	TemplateType_TEMPLATE_TYPE_EMAIL_SUBJECT TemplateType = 10
	// TEMPLATE_TYPE_SYSLOG_MESSAGE is the key of the message template for a syslog message part
	TemplateType_TEMPLATE_TYPE_SYSLOG_MESSAGE TemplateType = 11
	// TEMPLATE_TYPE_OPSGENIE_MESSAGE is the key of the message template for a opsgenie alert
	TemplateType_TEMPLATE_TYPE_OPSGENIE_MESSAGE TemplateType = 12
	// TEMPLATE_TYPE_ZOOM_MESSAGE is the key of the message template for sent Zoom messages
	TemplateType_TEMPLATE_TYPE_ZOOM_MESSAGE TemplateType = 13
	// TEMPLATE_TYPE_EMAIL_SINGLE_HTML is the key of the html template for sent emails when the
	// single alert per email option is selected
	TemplateType_TEMPLATE_TYPE_EMAIL_SINGLE_HTML TemplateType = 14
	// TEMPLATE_TYPE_EMAIL_SINGLE_TEXT is the key of the text template for sent emails when the
	// single alert per email option is selected
	TemplateType_TEMPLATE_TYPE_EMAIL_SINGLE_TEXT TemplateType = 15
	// TEMPLATE_TYPE_EMAIL_SINGLE_SUBJECT is the key of the subject line template of a sent email
	// when the single alert per email option is selected
	TemplateType_TEMPLATE_TYPE_EMAIL_SINGLE_SUBJECT TemplateType = 16
	// TEMPLATE_TYPE_WEBHOOK_SINGLE is the key of the template for webhook message body when the
	// single_alert option is true
	TemplateType_TEMPLATE_TYPE_WEBHOOK_SINGLE TemplateType = 17
	// TEMPLATE_TYPE_WEBHOOK_MULTIPLE is the key of the template for webhook message body when the
	// single_alert option is false
	TemplateType_TEMPLATE_TYPE_WEBHOOK_MULTIPLE TemplateType = 18
)

// Enum value maps for TemplateType.
var (
	TemplateType_name = map[int32]string{
		0:  "TEMPLATE_TYPE_UNSPECIFIED",
		1:  "TEMPLATE_TYPE_EMAIL_HTML",
		2:  "TEMPLATE_TYPE_EMAIL_TEXT",
		3:  "TEMPLATE_TYPE_SLACK_MESSAGE",
		4:  "TEMPLATE_TYPE_PUSHOVER_MESSAGE",
		5:  "TEMPLATE_TYPE_PAGERDUTY_SUMMARY",
		6:  "TEMPLATE_TYPE_VICTOROPS_DISPLAY_NAME",
		7:  "TEMPLATE_TYPE_VICTOROPS_STATE_MESSAGE",
		8:  "TEMPLATE_TYPE_GOOGLE_CHAT_MESSAGE",
		9:  "TEMPLATE_TYPE_MICROSOFT_TEAMS_MESSAGE",
		10: "TEMPLATE_TYPE_EMAIL_SUBJECT",
		11: "TEMPLATE_TYPE_SYSLOG_MESSAGE",
		12: "TEMPLATE_TYPE_OPSGENIE_MESSAGE",
		13: "TEMPLATE_TYPE_ZOOM_MESSAGE",
		14: "TEMPLATE_TYPE_EMAIL_SINGLE_HTML",
		15: "TEMPLATE_TYPE_EMAIL_SINGLE_TEXT",
		16: "TEMPLATE_TYPE_EMAIL_SINGLE_SUBJECT",
		17: "TEMPLATE_TYPE_WEBHOOK_SINGLE",
		18: "TEMPLATE_TYPE_WEBHOOK_MULTIPLE",
	}
	TemplateType_value = map[string]int32{
		"TEMPLATE_TYPE_UNSPECIFIED":             0,
		"TEMPLATE_TYPE_EMAIL_HTML":              1,
		"TEMPLATE_TYPE_EMAIL_TEXT":              2,
		"TEMPLATE_TYPE_SLACK_MESSAGE":           3,
		"TEMPLATE_TYPE_PUSHOVER_MESSAGE":        4,
		"TEMPLATE_TYPE_PAGERDUTY_SUMMARY":       5,
		"TEMPLATE_TYPE_VICTOROPS_DISPLAY_NAME":  6,
		"TEMPLATE_TYPE_VICTOROPS_STATE_MESSAGE": 7,
		"TEMPLATE_TYPE_GOOGLE_CHAT_MESSAGE":     8,
		"TEMPLATE_TYPE_MICROSOFT_TEAMS_MESSAGE": 9,
		"TEMPLATE_TYPE_EMAIL_SUBJECT":           10,
		"TEMPLATE_TYPE_SYSLOG_MESSAGE":          11,
		"TEMPLATE_TYPE_OPSGENIE_MESSAGE":        12,
		"TEMPLATE_TYPE_ZOOM_MESSAGE":            13,
		"TEMPLATE_TYPE_EMAIL_SINGLE_HTML":       14,
		"TEMPLATE_TYPE_EMAIL_SINGLE_TEXT":       15,
		"TEMPLATE_TYPE_EMAIL_SINGLE_SUBJECT":    16,
		"TEMPLATE_TYPE_WEBHOOK_SINGLE":          17,
		"TEMPLATE_TYPE_WEBHOOK_MULTIPLE":        18,
	}
)

func (x TemplateType) Enum() *TemplateType {
	p := new(TemplateType)
	*p = x
	return p
}

func (x TemplateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TemplateType) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_alert_v1_alert_proto_enumTypes[8].Descriptor()
}

func (TemplateType) Type() protoreflect.EnumType {
	return &file_arista_alert_v1_alert_proto_enumTypes[8]
}

func (x TemplateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TemplateType.Descriptor instead.
func (TemplateType) EnumDescriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{8}
}

// TemplateOutput is an enum of all of the possible output formats for templates
type TemplateOutput int32

const (
	// TEMPLATE_OUTPUT_UNSPECIFIED is the unspecfied value.
	TemplateOutput_TEMPLATE_OUTPUT_UNSPECIFIED TemplateOutput = 0
	// TEMPLATE_OUTPUT_TEXT indicates the the template outputs plain text.
	TemplateOutput_TEMPLATE_OUTPUT_TEXT TemplateOutput = 1
	// TEMPLATE_OUTPUT_JSON indicates the the template outputs JSON.
	TemplateOutput_TEMPLATE_OUTPUT_JSON TemplateOutput = 2
	// TEMPLATE_OUTPUT_HTML indicates the the template outputs HTML.
	// This also indicates that "html/templates" will be used instead of "text/templates" so that
	// html characters are automatically escaped from input.
	TemplateOutput_TEMPLATE_OUTPUT_HTML TemplateOutput = 3
)

// Enum value maps for TemplateOutput.
var (
	TemplateOutput_name = map[int32]string{
		0: "TEMPLATE_OUTPUT_UNSPECIFIED",
		1: "TEMPLATE_OUTPUT_TEXT",
		2: "TEMPLATE_OUTPUT_JSON",
		3: "TEMPLATE_OUTPUT_HTML",
	}
	TemplateOutput_value = map[string]int32{
		"TEMPLATE_OUTPUT_UNSPECIFIED": 0,
		"TEMPLATE_OUTPUT_TEXT":        1,
		"TEMPLATE_OUTPUT_JSON":        2,
		"TEMPLATE_OUTPUT_HTML":        3,
	}
)

func (x TemplateOutput) Enum() *TemplateOutput {
	p := new(TemplateOutput)
	*p = x
	return p
}

func (x TemplateOutput) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TemplateOutput) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_alert_v1_alert_proto_enumTypes[9].Descriptor()
}

func (TemplateOutput) Type() protoreflect.EnumType {
	return &file_arista_alert_v1_alert_proto_enumTypes[9]
}

func (x TemplateOutput) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TemplateOutput.Descriptor instead.
func (TemplateOutput) EnumDescriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{9}
}

// AlertConfig is the configuration for sending alerts
type AlertConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// settings is the global default settings for various endpoints used in broadcast groups.
	// Can be overwritten in individual endpoint settings
	Settings *Settings `protobuf:"bytes,1,opt,name=settings,proto3" json:"settings,omitempty"`
	// rules define how we route alerts to broadcast groups
	Rules *Rules `protobuf:"bytes,2,opt,name=rules,proto3" json:"rules,omitempty"`
	// broadcast_groups are groups of endpoints that alerts are sent to
	BroadcastGroups *BroadcastGroups `protobuf:"bytes,3,opt,name=broadcast_groups,json=broadcastGroups,proto3" json:"broadcast_groups,omitempty"`
}

func (x *AlertConfig) Reset() {
	*x = AlertConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertConfig) ProtoMessage() {}

func (x *AlertConfig) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertConfig.ProtoReflect.Descriptor instead.
func (*AlertConfig) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{0}
}

func (x *AlertConfig) GetSettings() *Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *AlertConfig) GetRules() *Rules {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *AlertConfig) GetBroadcastGroups() *BroadcastGroups {
	if x != nil {
		return x.BroadcastGroups
	}
	return nil
}

// Alert is the current status of the alert system
type Alert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// configuration_errors contain any configuration errors reported by the backend
	ConfigurationErrors *ConfigErrors `protobuf:"bytes,1,opt,name=configuration_errors,json=configurationErrors,proto3" json:"configuration_errors,omitempty"`
	// endpoint_errors contain any failed attempts to send alerts
	EndpointErrors *EndpointErrors `protobuf:"bytes,2,opt,name=endpoint_errors,json=endpointErrors,proto3" json:"endpoint_errors,omitempty"`
	// last_modified_at is the time at which the configuration was last modified
	LastModifiedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_modified_at,json=lastModifiedAt,proto3" json:"last_modified_at,omitempty"`
	// last_modified_by is the user who last modified the configuration
	LastModifiedBy *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=last_modified_by,json=lastModifiedBy,proto3" json:"last_modified_by,omitempty"`
}

func (x *Alert) Reset() {
	*x = Alert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Alert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alert) ProtoMessage() {}

func (x *Alert) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alert.ProtoReflect.Descriptor instead.
func (*Alert) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{1}
}

func (x *Alert) GetConfigurationErrors() *ConfigErrors {
	if x != nil {
		return x.ConfigurationErrors
	}
	return nil
}

func (x *Alert) GetEndpointErrors() *EndpointErrors {
	if x != nil {
		return x.EndpointErrors
	}
	return nil
}

func (x *Alert) GetLastModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastModifiedAt
	}
	return nil
}

func (x *Alert) GetLastModifiedBy() *wrapperspb.StringValue {
	if x != nil {
		return x.LastModifiedBy
	}
	return nil
}

// ConfigErrors is a list of configuration-related errors
type ConfigErrors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values is a list of errors
	Values []*ConfigError `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *ConfigErrors) Reset() {
	*x = ConfigErrors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigErrors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigErrors) ProtoMessage() {}

func (x *ConfigErrors) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigErrors.ProtoReflect.Descriptor instead.
func (*ConfigErrors) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{2}
}

func (x *ConfigErrors) GetValues() []*ConfigError {
	if x != nil {
		return x.Values
	}
	return nil
}

// ConfigError is an error caused by an invalid config being rejected by the backend
type ConfigError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// path is the 'path' to the invalid config element,
	// eg: path.userPathName.email_configs[1].to =
	// the 'to' field of the second email config of the 'userPathName' broadcast_group
	Path *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// error_type is the type of error, this allows custom handling of different error types
	ErrorType ConfigErrorType `protobuf:"varint,2,opt,name=error_type,json=errorType,proto3,enum=arista.alert.v1.ConfigErrorType" json:"error_type,omitempty"`
	// error is a user-friendly error message
	Error *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ConfigError) Reset() {
	*x = ConfigError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigError) ProtoMessage() {}

func (x *ConfigError) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigError.ProtoReflect.Descriptor instead.
func (*ConfigError) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{3}
}

func (x *ConfigError) GetPath() *wrapperspb.StringValue {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *ConfigError) GetErrorType() ConfigErrorType {
	if x != nil {
		return x.ErrorType
	}
	return ConfigErrorType_CONFIG_ERROR_TYPE_UNSPECIFIED
}

func (x *ConfigError) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

// EndpointErrors is a set of errors related to sending of alerts
type EndpointErrors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values is the list of errors
	Values []*EndpointError `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *EndpointErrors) Reset() {
	*x = EndpointErrors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndpointErrors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointErrors) ProtoMessage() {}

func (x *EndpointErrors) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointErrors.ProtoReflect.Descriptor instead.
func (*EndpointErrors) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{4}
}

func (x *EndpointErrors) GetValues() []*EndpointError {
	if x != nil {
		return x.Values
	}
	return nil
}

// EndpointError is an error caused by a failure to send alert(s) for any reason
type EndpointError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// endpoint_type indicates the type of endpoint which failed,
	// or unknown if not endpoint-specific (eg: slack, opsgenie)
	EndpointType *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=endpoint_type,json=endpointType,proto3" json:"endpoint_type,omitempty"`
	// broadcast_group_name is the name of the broadcast group which was being used,
	// empty string if not group specific
	BroadcastGroupName *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=broadcast_group_name,json=broadcastGroupName,proto3" json:"broadcast_group_name,omitempty"`
	// config_index is the index of the config on the broadcast group or -1 if not applicable
	// eg: if there are two email config in one broadcast group, then the indices for each are 0 and 1
	// note that these are done per type, so only counting email/slack/...
	ConfigIndex *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=config_index,json=configIndex,proto3" json:"config_index,omitempty"`
	// error_type is the type of error, this allows custom handling of different error types
	ErrorType EndpointErrorType `protobuf:"varint,4,opt,name=error_type,json=errorType,proto3,enum=arista.alert.v1.EndpointErrorType" json:"error_type,omitempty"`
	// error is a user-friendly error message
	Error *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *EndpointError) Reset() {
	*x = EndpointError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndpointError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointError) ProtoMessage() {}

func (x *EndpointError) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointError.ProtoReflect.Descriptor instead.
func (*EndpointError) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{5}
}

func (x *EndpointError) GetEndpointType() *wrapperspb.StringValue {
	if x != nil {
		return x.EndpointType
	}
	return nil
}

func (x *EndpointError) GetBroadcastGroupName() *wrapperspb.StringValue {
	if x != nil {
		return x.BroadcastGroupName
	}
	return nil
}

func (x *EndpointError) GetConfigIndex() *wrapperspb.Int32Value {
	if x != nil {
		return x.ConfigIndex
	}
	return nil
}

func (x *EndpointError) GetErrorType() EndpointErrorType {
	if x != nil {
		return x.ErrorType
	}
	return EndpointErrorType_ENDPOINT_ERROR_TYPE_UNSPECIFIED
}

func (x *EndpointError) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

// Settings portion of config, a list of default global settings used by broadcast groups
type Settings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// email is the global default settings for email
	Email *EmailSettings `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	// http is the global default settings for http
	Http *HttpSettings `protobuf:"bytes,2,opt,name=http,proto3" json:"http,omitempty"`
	// slack is the global default settings for slack
	Slack *SlackSettings `protobuf:"bytes,3,opt,name=slack,proto3" json:"slack,omitempty"`
	// victorops is the global default settings for victorops
	Victorops *VictoropsSettings `protobuf:"bytes,4,opt,name=victorops,proto3" json:"victorops,omitempty"`
	// pagerduty is the global default settings for pagerduty
	Pagerduty *PagerdutySettings `protobuf:"bytes,5,opt,name=pagerduty,proto3" json:"pagerduty,omitempty"`
	// opsgenie is the global default settings for opsgenie
	Opsgenie *OpsgenieSettings `protobuf:"bytes,6,opt,name=opsgenie,proto3" json:"opsgenie,omitempty"`
	// gchat is the global default settings for google chat
	Gchat *GoogleChatSettings `protobuf:"bytes,7,opt,name=gchat,proto3" json:"gchat,omitempty"`
	// msteams is the global default settings for ms teams
	Msteams *MsTeamsSettings `protobuf:"bytes,8,opt,name=msteams,proto3" json:"msteams,omitempty"`
	// inhibition defines the inhibition rules for alerts, allowing events of certain types to be
	// suppressed while another event type is active
	Inhibition *InhibitionSettings `protobuf:"bytes,9,opt,name=inhibition,proto3" json:"inhibition,omitempty"`
	// base_url is the root address of your CloudVision app. Used to generate links in notifications.
	BaseUrl *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=base_url,json=baseUrl,proto3" json:"base_url,omitempty"`
	// timezone is used for formatting event times in notifications. E.g. 'UTC', 'US/Pacific'
	Timezone *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=timezone,proto3" json:"timezone,omitempty"`
	// syslog is the global default settings for syslog
	Syslog *SyslogSettings `protobuf:"bytes,12,opt,name=syslog,proto3" json:"syslog,omitempty"`
	// snmp is the global default settings for snmp
	Snmp *SNMPSettings `protobuf:"bytes,13,opt,name=snmp,proto3" json:"snmp,omitempty"`
	// sendgrid is the global default settings for sendgrid
	Sendgrid *SendgridSettings `protobuf:"bytes,14,opt,name=sendgrid,proto3" json:"sendgrid,omitempty"`
	// cue_syslog is the global default settings for cue syslog
	CueSyslog *CueSyslogSettings `protobuf:"bytes,15,opt,name=cue_syslog,json=cueSyslog,proto3" json:"cue_syslog,omitempty"`
	// cue_snmp is the global default settings for cue snmp
	CueSnmp *CueSNMPSettings `protobuf:"bytes,16,opt,name=cue_snmp,json=cueSnmp,proto3" json:"cue_snmp,omitempty"`
	// cue_sendgrid is the global default settings for cue sendgrid
	CueSendgrid *CueSendgridSettings `protobuf:"bytes,17,opt,name=cue_sendgrid,json=cueSendgrid,proto3" json:"cue_sendgrid,omitempty"`
	// hide_tags is used to by the alerting system to omit tags and other "superfluous"
	// values from the notifications that are sent out by the system
	HideTags *wrapperspb.BoolValue `protobuf:"bytes,18,opt,name=hide_tags,json=hideTags,proto3" json:"hide_tags,omitempty"`
	// zoom is the global default settings for zoom
	Zoom *ZoomSettings `protobuf:"bytes,19,opt,name=zoom,proto3" json:"zoom,omitempty"`
}

func (x *Settings) Reset() {
	*x = Settings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Settings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings) ProtoMessage() {}

func (x *Settings) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings.ProtoReflect.Descriptor instead.
func (*Settings) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{6}
}

func (x *Settings) GetEmail() *EmailSettings {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *Settings) GetHttp() *HttpSettings {
	if x != nil {
		return x.Http
	}
	return nil
}

func (x *Settings) GetSlack() *SlackSettings {
	if x != nil {
		return x.Slack
	}
	return nil
}

func (x *Settings) GetVictorops() *VictoropsSettings {
	if x != nil {
		return x.Victorops
	}
	return nil
}

func (x *Settings) GetPagerduty() *PagerdutySettings {
	if x != nil {
		return x.Pagerduty
	}
	return nil
}

func (x *Settings) GetOpsgenie() *OpsgenieSettings {
	if x != nil {
		return x.Opsgenie
	}
	return nil
}

func (x *Settings) GetGchat() *GoogleChatSettings {
	if x != nil {
		return x.Gchat
	}
	return nil
}

func (x *Settings) GetMsteams() *MsTeamsSettings {
	if x != nil {
		return x.Msteams
	}
	return nil
}

func (x *Settings) GetInhibition() *InhibitionSettings {
	if x != nil {
		return x.Inhibition
	}
	return nil
}

func (x *Settings) GetBaseUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.BaseUrl
	}
	return nil
}

func (x *Settings) GetTimezone() *wrapperspb.StringValue {
	if x != nil {
		return x.Timezone
	}
	return nil
}

func (x *Settings) GetSyslog() *SyslogSettings {
	if x != nil {
		return x.Syslog
	}
	return nil
}

func (x *Settings) GetSnmp() *SNMPSettings {
	if x != nil {
		return x.Snmp
	}
	return nil
}

func (x *Settings) GetSendgrid() *SendgridSettings {
	if x != nil {
		return x.Sendgrid
	}
	return nil
}

func (x *Settings) GetCueSyslog() *CueSyslogSettings {
	if x != nil {
		return x.CueSyslog
	}
	return nil
}

func (x *Settings) GetCueSnmp() *CueSNMPSettings {
	if x != nil {
		return x.CueSnmp
	}
	return nil
}

func (x *Settings) GetCueSendgrid() *CueSendgridSettings {
	if x != nil {
		return x.CueSendgrid
	}
	return nil
}

func (x *Settings) GetHideTags() *wrapperspb.BoolValue {
	if x != nil {
		return x.HideTags
	}
	return nil
}

func (x *Settings) GetZoom() *ZoomSettings {
	if x != nil {
		return x.Zoom
	}
	return nil
}

// EmailSettings contain the settings for the sending of emails
type EmailSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// from is the email address to send from
	From *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// smarthost is the hostname and port of the SMTP server
	Smarthost *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=smarthost,proto3" json:"smarthost,omitempty"`
	// auth_username the username to use when sending emails
	// required for all auth methods
	AuthUsername *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=auth_username,json=authUsername,proto3" json:"auth_username,omitempty"`
	// auth_password the password to use when sending emails
	AuthPassword *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=auth_password,json=authPassword,proto3" json:"auth_password,omitempty"`
	// require_tls always use TLS connections when sending emails
	RequireTls *wrapperspb.BoolValue `protobuf:"bytes,5,opt,name=require_tls,json=requireTls,proto3" json:"require_tls,omitempty"`
	// single_alert_per_email configures the Alerter such that each alert generates a separate email
	// notification, the email will only have a single notification, the format will also be different
	SingleAlertPerEmail *wrapperspb.BoolValue `protobuf:"bytes,6,opt,name=single_alert_per_email,json=singleAlertPerEmail,proto3" json:"single_alert_per_email,omitempty"`
	// azure_o_auth used for auth when using an Azure smtp server
	// uses auth_username
	AzureOAuth *AzureOAuth `protobuf:"bytes,7,opt,name=azure_o_auth,json=azureOAuth,proto3" json:"azure_o_auth,omitempty"`
}

func (x *EmailSettings) Reset() {
	*x = EmailSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailSettings) ProtoMessage() {}

func (x *EmailSettings) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailSettings.ProtoReflect.Descriptor instead.
func (*EmailSettings) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{7}
}

func (x *EmailSettings) GetFrom() *wrapperspb.StringValue {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *EmailSettings) GetSmarthost() *wrapperspb.StringValue {
	if x != nil {
		return x.Smarthost
	}
	return nil
}

func (x *EmailSettings) GetAuthUsername() *wrapperspb.StringValue {
	if x != nil {
		return x.AuthUsername
	}
	return nil
}

func (x *EmailSettings) GetAuthPassword() *wrapperspb.StringValue {
	if x != nil {
		return x.AuthPassword
	}
	return nil
}

func (x *EmailSettings) GetRequireTls() *wrapperspb.BoolValue {
	if x != nil {
		return x.RequireTls
	}
	return nil
}

func (x *EmailSettings) GetSingleAlertPerEmail() *wrapperspb.BoolValue {
	if x != nil {
		return x.SingleAlertPerEmail
	}
	return nil
}

func (x *EmailSettings) GetAzureOAuth() *AzureOAuth {
	if x != nil {
		return x.AzureOAuth
	}
	return nil
}

// AzureOAuth contains the settings for the sending of emails on Azure smtp server
type AzureOAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// client_id of the Azure environment
	ClientId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// tenant_id of the Azure environment
	TenantId *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// client_secret is a user generated secret key used for auth
	ClientSecret *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	// auth_uri is the URI used for OAuth
	AuthUri *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=auth_uri,json=authUri,proto3" json:"auth_uri,omitempty"`
}

func (x *AzureOAuth) Reset() {
	*x = AzureOAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AzureOAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AzureOAuth) ProtoMessage() {}

func (x *AzureOAuth) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AzureOAuth.ProtoReflect.Descriptor instead.
func (*AzureOAuth) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{8}
}

func (x *AzureOAuth) GetClientId() *wrapperspb.StringValue {
	if x != nil {
		return x.ClientId
	}
	return nil
}

func (x *AzureOAuth) GetTenantId() *wrapperspb.StringValue {
	if x != nil {
		return x.TenantId
	}
	return nil
}

func (x *AzureOAuth) GetClientSecret() *wrapperspb.StringValue {
	if x != nil {
		return x.ClientSecret
	}
	return nil
}

func (x *AzureOAuth) GetAuthUri() *wrapperspb.StringValue {
	if x != nil {
		return x.AuthUri
	}
	return nil
}

// HttpSettings are the settings to be used when sending various message over a http connection
type HttpSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// username is the username to use when connecting to the http proxy
	Username *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// password is the password to use when connecting to the http proxy
	Password *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	// proxy_url is the url for the http proxy
	ProxyUrl *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=proxy_url,json=proxyUrl,proto3" json:"proxy_url,omitempty"`
	// custom_headers is custom http headers to be used along with the default headers
	CustomHeaders *HttpHeaders `protobuf:"bytes,4,opt,name=custom_headers,json=customHeaders,proto3" json:"custom_headers,omitempty"`
}

func (x *HttpSettings) Reset() {
	*x = HttpSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpSettings) ProtoMessage() {}

func (x *HttpSettings) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpSettings.ProtoReflect.Descriptor instead.
func (*HttpSettings) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{9}
}

func (x *HttpSettings) GetUsername() *wrapperspb.StringValue {
	if x != nil {
		return x.Username
	}
	return nil
}

func (x *HttpSettings) GetPassword() *wrapperspb.StringValue {
	if x != nil {
		return x.Password
	}
	return nil
}

func (x *HttpSettings) GetProxyUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.ProxyUrl
	}
	return nil
}

func (x *HttpSettings) GetCustomHeaders() *HttpHeaders {
	if x != nil {
		return x.CustomHeaders
	}
	return nil
}

// HttpHeaders is a set of http headers
type HttpHeaders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values is a map of http header names to values
	Values map[string]*HeaderValues `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *HttpHeaders) Reset() {
	*x = HttpHeaders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpHeaders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpHeaders) ProtoMessage() {}

func (x *HttpHeaders) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpHeaders.ProtoReflect.Descriptor instead.
func (*HttpHeaders) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{10}
}

func (x *HttpHeaders) GetValues() map[string]*HeaderValues {
	if x != nil {
		return x.Values
	}
	return nil
}

// HeaderValues is a set of values for this header
type HeaderValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values is the header values
	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *HeaderValues) Reset() {
	*x = HeaderValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeaderValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderValues) ProtoMessage() {}

func (x *HeaderValues) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderValues.ProtoReflect.Descriptor instead.
func (*HeaderValues) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{11}
}

func (x *HeaderValues) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

// SlackSettings contain the settings for sending alerts to slack
type SlackSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// url is the url of the slack webhook to use
	Url *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *SlackSettings) Reset() {
	*x = SlackSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlackSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlackSettings) ProtoMessage() {}

func (x *SlackSettings) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlackSettings.ProtoReflect.Descriptor instead.
func (*SlackSettings) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{12}
}

func (x *SlackSettings) GetUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.Url
	}
	return nil
}

// VictoropsSettings contain the settings for sending alerts to victorops
type VictoropsSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key is the API key to use when talking to the VictorOps API
	Key *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// url is the victorops url to use (without integration or routing key
	// default: https://alert.victorops.com/integrations/generic/20131114/alert/
	Url *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *VictoropsSettings) Reset() {
	*x = VictoropsSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VictoropsSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VictoropsSettings) ProtoMessage() {}

func (x *VictoropsSettings) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VictoropsSettings.ProtoReflect.Descriptor instead.
func (*VictoropsSettings) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{13}
}

func (x *VictoropsSettings) GetKey() *wrapperspb.StringValue {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *VictoropsSettings) GetUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.Url
	}
	return nil
}

// PagerdutySettings contain the settings for sending alerts to pagerduty
type PagerdutySettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// url is the url to use when sending alerts to pagerduty
	Url *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *PagerdutySettings) Reset() {
	*x = PagerdutySettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PagerdutySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PagerdutySettings) ProtoMessage() {}

func (x *PagerdutySettings) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PagerdutySettings.ProtoReflect.Descriptor instead.
func (*PagerdutySettings) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{14}
}

func (x *PagerdutySettings) GetUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.Url
	}
	return nil
}

// OpsgenieSettings contain the settings for sending alerts to opsgenie
type OpsgenieSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key is the API key to use when talking to the OpsGenie API
	Key *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// url is the url to use when sending alerts to opsgenie
	Url *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *OpsgenieSettings) Reset() {
	*x = OpsgenieSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpsgenieSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpsgenieSettings) ProtoMessage() {}

func (x *OpsgenieSettings) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpsgenieSettings.ProtoReflect.Descriptor instead.
func (*OpsgenieSettings) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{15}
}

func (x *OpsgenieSettings) GetKey() *wrapperspb.StringValue {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *OpsgenieSettings) GetUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.Url
	}
	return nil
}

// GoogleChatSettings contain the settings for sending alerts to google chat
type GoogleChatSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// url is the url of the webhook to send alerts to
	Url *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *GoogleChatSettings) Reset() {
	*x = GoogleChatSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleChatSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleChatSettings) ProtoMessage() {}

func (x *GoogleChatSettings) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleChatSettings.ProtoReflect.Descriptor instead.
func (*GoogleChatSettings) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{16}
}

func (x *GoogleChatSettings) GetUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.Url
	}
	return nil
}

// MsTeamsSettings contain the settings for sending alerts to MS Teams
type MsTeamsSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// url is the url of the webhook to send alerts to
	Url *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *MsTeamsSettings) Reset() {
	*x = MsTeamsSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsTeamsSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsTeamsSettings) ProtoMessage() {}

func (x *MsTeamsSettings) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsTeamsSettings.ProtoReflect.Descriptor instead.
func (*MsTeamsSettings) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{17}
}

func (x *MsTeamsSettings) GetUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.Url
	}
	return nil
}

// SyslogSettings contain the settings for sending alerts with syslog
type SyslogSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// network is the network protocol to use, default is "udp",
	// options also include: tcp,tcp4,tcp6,udp4,udp6
	Network *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	// address is the network address to send syslog messages to
	Address *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// facility is the syslog facility 0-23 inc. This is the syslog facility as defined in RFC-3164
	Facility *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=facility,proto3" json:"facility,omitempty"`
	// priorities describes how CVP severity maps to syslog priority
	// priority is a number between 0-7 inc. as defined in RFC-3164
	Priorities *Priorities `protobuf:"bytes,4,opt,name=priorities,proto3" json:"priorities,omitempty"`
	// tag is the syslog TAG as described in RFC-3164, it is the prefix to all syslog messages
	Tag *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=tag,proto3" json:"tag,omitempty"`
	// per_device allows message to optionally be sent per device,
	// if an event concerns two devices the behaviour is changed based on this option:
	//
	//	true: two messages are sent, one for each device
	//	false: a single message is sent
	PerDevice *wrapperspb.BoolValue `protobuf:"bytes,6,opt,name=per_device,json=perDevice,proto3" json:"per_device,omitempty"`
	// use_tls determines if the connection to the server should be secured with TLS
	UseTls *wrapperspb.BoolValue `protobuf:"bytes,7,opt,name=use_tls,json=useTls,proto3" json:"use_tls,omitempty"`
}

func (x *SyslogSettings) Reset() {
	*x = SyslogSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyslogSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyslogSettings) ProtoMessage() {}

func (x *SyslogSettings) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyslogSettings.ProtoReflect.Descriptor instead.
func (*SyslogSettings) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{18}
}

func (x *SyslogSettings) GetNetwork() *wrapperspb.StringValue {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *SyslogSettings) GetAddress() *wrapperspb.StringValue {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *SyslogSettings) GetFacility() *wrapperspb.Int32Value {
	if x != nil {
		return x.Facility
	}
	return nil
}

func (x *SyslogSettings) GetPriorities() *Priorities {
	if x != nil {
		return x.Priorities
	}
	return nil
}

func (x *SyslogSettings) GetTag() *wrapperspb.StringValue {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *SyslogSettings) GetPerDevice() *wrapperspb.BoolValue {
	if x != nil {
		return x.PerDevice
	}
	return nil
}

func (x *SyslogSettings) GetUseTls() *wrapperspb.BoolValue {
	if x != nil {
		return x.UseTls
	}
	return nil
}

// Priorities is a mapping of CV event severities to syslog severities
type Priorities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// critical priority, default = 2 (Critical)
	Critical *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=critical,proto3" json:"critical,omitempty"`
	// error priority, default = 3 (Error)
	Error *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// warn priority, default = 4 (Warning)
	Warn *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=warn,proto3" json:"warn,omitempty"`
	// info priority, default = 6 (Informational)
	Info *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *Priorities) Reset() {
	*x = Priorities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Priorities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Priorities) ProtoMessage() {}

func (x *Priorities) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Priorities.ProtoReflect.Descriptor instead.
func (*Priorities) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{19}
}

func (x *Priorities) GetCritical() *wrapperspb.Int32Value {
	if x != nil {
		return x.Critical
	}
	return nil
}

func (x *Priorities) GetError() *wrapperspb.Int32Value {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *Priorities) GetWarn() *wrapperspb.Int32Value {
	if x != nil {
		return x.Warn
	}
	return nil
}

func (x *Priorities) GetInfo() *wrapperspb.Int32Value {
	if x != nil {
		return x.Info
	}
	return nil
}

// CueData contains additional cue-specific data
type CueData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values can contain some additional data which is required by the cue specific provider
	Values map[string]string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CueData) Reset() {
	*x = CueData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CueData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CueData) ProtoMessage() {}

func (x *CueData) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CueData.ProtoReflect.Descriptor instead.
func (*CueData) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{20}
}

func (x *CueData) GetValues() map[string]string {
	if x != nil {
		return x.Values
	}
	return nil
}

// CueSyslogSettings contain the settings for sending alerts with syslog for cue
type CueSyslogSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// network is the network protocol to use, default is "udp",
	// options also include: tcp,tcp4,tcp6,udp4,udp6
	Network *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	// address is the ip address to send syslog messages to
	Address *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// port is server's port to connect to
	Port *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=port,proto3" json:"port,omitempty"`
	// message_format defines the message format to use
	MessageFormat CueSyslogMessageFormat `protobuf:"varint,4,opt,name=message_format,json=messageFormat,proto3,enum=arista.alert.v1.CueSyslogMessageFormat" json:"message_format,omitempty"`
	// append_bom_header if true a BOM( Byte Order Mark ) will be appended to the outgoing message
	// BOM will tell the server that is receiving the messages, that the format is UTF8.
	AppendBomHeader *wrapperspb.BoolValue `protobuf:"bytes,5,opt,name=append_bom_header,json=appendBomHeader,proto3" json:"append_bom_header,omitempty"`
	// data is additional data that maybe required for constructing the message or sending it
	Data *CueData `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CueSyslogSettings) Reset() {
	*x = CueSyslogSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CueSyslogSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CueSyslogSettings) ProtoMessage() {}

func (x *CueSyslogSettings) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CueSyslogSettings.ProtoReflect.Descriptor instead.
func (*CueSyslogSettings) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{21}
}

func (x *CueSyslogSettings) GetNetwork() *wrapperspb.StringValue {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *CueSyslogSettings) GetAddress() *wrapperspb.StringValue {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *CueSyslogSettings) GetPort() *wrapperspb.Int32Value {
	if x != nil {
		return x.Port
	}
	return nil
}

func (x *CueSyslogSettings) GetMessageFormat() CueSyslogMessageFormat {
	if x != nil {
		return x.MessageFormat
	}
	return CueSyslogMessageFormat_CUE_SYSLOG_MESSAGE_FORMAT_UNSPECIFIED
}

func (x *CueSyslogSettings) GetAppendBomHeader() *wrapperspb.BoolValue {
	if x != nil {
		return x.AppendBomHeader
	}
	return nil
}

func (x *CueSyslogSettings) GetData() *CueData {
	if x != nil {
		return x.Data
	}
	return nil
}

// SNMPSettings contain the settings for sending alerts with SNMP
type SNMPSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// target is an ipv4 address to send messages to
	Target *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	// port is the network port to target
	Port *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	// transport is the transport protocol to use ("udp" or "tcp"); if unset "udp" will be used
	Transport *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=transport,proto3" json:"transport,omitempty"`
	// version is the SNMP version, v1, v2c and v3 are supported and can be set
	// with 1, 2 and 3 respectively
	Version *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// auth is optional authentication settings
	Auth *SNMPAuth `protobuf:"bytes,5,opt,name=auth,proto3" json:"auth,omitempty"`
	// engine_id is the engine ID that will be used by the Alerter
	// This should be a hexadecimal string, colon separators between bytes will be accepted when
	// writing, but will be absent when reading
	// optional: if excluded or left blank, this will be automatically generated
	EngineId *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=engine_id,json=engineId,proto3" json:"engine_id,omitempty"`
}

func (x *SNMPSettings) Reset() {
	*x = SNMPSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SNMPSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SNMPSettings) ProtoMessage() {}

func (x *SNMPSettings) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SNMPSettings.ProtoReflect.Descriptor instead.
func (*SNMPSettings) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{22}
}

func (x *SNMPSettings) GetTarget() *wrapperspb.StringValue {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *SNMPSettings) GetPort() *wrapperspb.Int32Value {
	if x != nil {
		return x.Port
	}
	return nil
}

func (x *SNMPSettings) GetTransport() *wrapperspb.StringValue {
	if x != nil {
		return x.Transport
	}
	return nil
}

func (x *SNMPSettings) GetVersion() *wrapperspb.Int32Value {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *SNMPSettings) GetAuth() *SNMPAuth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *SNMPSettings) GetEngineId() *wrapperspb.StringValue {
	if x != nil {
		return x.EngineId
	}
	return nil
}

// SNMPAuth contain authentication information for SNMP
type SNMPAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// community is the community string used for authentication in SNMPv1 and v2c
	// required if version < 3
	Community *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=community,proto3" json:"community,omitempty"`
	// username the username for SNMPv3 auth
	Username *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	// security_level the security level for SNMPv3
	SecurityLevel SNMPSecurityLevel `protobuf:"varint,3,opt,name=security_level,json=securityLevel,proto3,enum=arista.alert.v1.SNMPSecurityLevel" json:"security_level,omitempty"`
	// authentication_protocol is the protocol to use for authentication in SNMPv3
	// required for AUTH_NO_PRIV/AUTH_PRIV security levels
	AuthenticationProtocol SNMPAuthProtocol `protobuf:"varint,4,opt,name=authentication_protocol,json=authenticationProtocol,proto3,enum=arista.alert.v1.SNMPAuthProtocol" json:"authentication_protocol,omitempty"`
	// authentication_passphrase is the passphrase to use for authentication in SNMPv3
	// required for AUTH_NO_PRIV/AUTH_PRIV security levels
	AuthenticationPassphrase *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=authentication_passphrase,json=authenticationPassphrase,proto3" json:"authentication_passphrase,omitempty"`
	// privacy_protocol is the protocol to use for privacy in SNMPv3
	// required for AUTH_PRIV security level
	PrivacyProtocol SNMPPrivProtocol `protobuf:"varint,6,opt,name=privacy_protocol,json=privacyProtocol,proto3,enum=arista.alert.v1.SNMPPrivProtocol" json:"privacy_protocol,omitempty"`
	// privacy_passphrase is the passphrase to use for privacy in SNMPv3
	// required for AUTH_PRIV security level
	PrivacyPassphrase *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=privacy_passphrase,json=privacyPassphrase,proto3" json:"privacy_passphrase,omitempty"`
}

func (x *SNMPAuth) Reset() {
	*x = SNMPAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SNMPAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SNMPAuth) ProtoMessage() {}

func (x *SNMPAuth) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SNMPAuth.ProtoReflect.Descriptor instead.
func (*SNMPAuth) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{23}
}

func (x *SNMPAuth) GetCommunity() *wrapperspb.StringValue {
	if x != nil {
		return x.Community
	}
	return nil
}

func (x *SNMPAuth) GetUsername() *wrapperspb.StringValue {
	if x != nil {
		return x.Username
	}
	return nil
}

func (x *SNMPAuth) GetSecurityLevel() SNMPSecurityLevel {
	if x != nil {
		return x.SecurityLevel
	}
	return SNMPSecurityLevel_SNMP_SECURITY_LEVEL_UNSPECIFIED
}

func (x *SNMPAuth) GetAuthenticationProtocol() SNMPAuthProtocol {
	if x != nil {
		return x.AuthenticationProtocol
	}
	return SNMPAuthProtocol_SNMP_AUTH_PROTOCOL_UNSPECIFIED
}

func (x *SNMPAuth) GetAuthenticationPassphrase() *wrapperspb.StringValue {
	if x != nil {
		return x.AuthenticationPassphrase
	}
	return nil
}

func (x *SNMPAuth) GetPrivacyProtocol() SNMPPrivProtocol {
	if x != nil {
		return x.PrivacyProtocol
	}
	return SNMPPrivProtocol_SNMP_PRIV_PROTOCOL_UNSPECIFIED
}

func (x *SNMPAuth) GetPrivacyPassphrase() *wrapperspb.StringValue {
	if x != nil {
		return x.PrivacyPassphrase
	}
	return nil
}

// CueSNMPAuth is the authentication
type CueSNMPAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// community is the community string used for authentication in SNMPv1 and v2c
	// required if version < 3
	Community *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=community,proto3" json:"community,omitempty"`
	// username the username for SNMPv3 auth
	Username *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	// security_level the security level for SNMPv3
	SecurityLevel SNMPSecurityLevel `protobuf:"varint,3,opt,name=security_level,json=securityLevel,proto3,enum=arista.alert.v1.SNMPSecurityLevel" json:"security_level,omitempty"`
	// authentication_protocol is the protocol to use for authentication in SNMPv3
	// required for AUTH_NO_PRIV/AUTH_PRIV security levels
	AuthenticationProtocol CueSNMPAuthProtocol `protobuf:"varint,4,opt,name=authentication_protocol,json=authenticationProtocol,proto3,enum=arista.alert.v1.CueSNMPAuthProtocol" json:"authentication_protocol,omitempty"`
	// authentication_passphrase is the passphrase to use for authentication in SNMPv3
	// required for AUTH_NO_PRIV/AUTH_PRIV security levels
	AuthenticationPassphrase *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=authentication_passphrase,json=authenticationPassphrase,proto3" json:"authentication_passphrase,omitempty"`
	// privacy_protocol is the protocol to use for privacy in SNMPv3
	// required for AUTH_PRIV security level
	PrivacyProtocol CueSNMPPrivProtocol `protobuf:"varint,6,opt,name=privacy_protocol,json=privacyProtocol,proto3,enum=arista.alert.v1.CueSNMPPrivProtocol" json:"privacy_protocol,omitempty"`
	// privacy_passphrase is the passphrase to use for privacy in SNMPv3
	// required for AUTH_PRIV security level
	PrivacyPassphrase *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=privacy_passphrase,json=privacyPassphrase,proto3" json:"privacy_passphrase,omitempty"`
}

func (x *CueSNMPAuth) Reset() {
	*x = CueSNMPAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CueSNMPAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CueSNMPAuth) ProtoMessage() {}

func (x *CueSNMPAuth) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CueSNMPAuth.ProtoReflect.Descriptor instead.
func (*CueSNMPAuth) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{24}
}

func (x *CueSNMPAuth) GetCommunity() *wrapperspb.StringValue {
	if x != nil {
		return x.Community
	}
	return nil
}

func (x *CueSNMPAuth) GetUsername() *wrapperspb.StringValue {
	if x != nil {
		return x.Username
	}
	return nil
}

func (x *CueSNMPAuth) GetSecurityLevel() SNMPSecurityLevel {
	if x != nil {
		return x.SecurityLevel
	}
	return SNMPSecurityLevel_SNMP_SECURITY_LEVEL_UNSPECIFIED
}

func (x *CueSNMPAuth) GetAuthenticationProtocol() CueSNMPAuthProtocol {
	if x != nil {
		return x.AuthenticationProtocol
	}
	return CueSNMPAuthProtocol_CUE_SNMP_AUTH_PROTOCOL_UNSPECIFIED
}

func (x *CueSNMPAuth) GetAuthenticationPassphrase() *wrapperspb.StringValue {
	if x != nil {
		return x.AuthenticationPassphrase
	}
	return nil
}

func (x *CueSNMPAuth) GetPrivacyProtocol() CueSNMPPrivProtocol {
	if x != nil {
		return x.PrivacyProtocol
	}
	return CueSNMPPrivProtocol_CUE_SNMP_PRIV_PROTOCOL_UNSPECIFIED
}

func (x *CueSNMPAuth) GetPrivacyPassphrase() *wrapperspb.StringValue {
	if x != nil {
		return x.PrivacyPassphrase
	}
	return nil
}

// CueSNMPSettings contain the settings for sending cue alerts with SNMP
type CueSNMPSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// target is an ipv4 address to send messages to
	Target *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	// port is the network port to target
	Port *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	// transport is the transport protocol to use ("udp" or "tcp"); if unset "udp" will be used
	Transport *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=transport,proto3" json:"transport,omitempty"`
	// version is the SNMP version, v2c and v3 are supported and can be set with 2 and 3 respectively
	Version *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// auth is the optional authentication settings
	Auth *CueSNMPAuth `protobuf:"bytes,5,opt,name=auth,proto3" json:"auth,omitempty"`
	// data is additional data that maybe required for constructing the message or sending it
	Data *CueData `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CueSNMPSettings) Reset() {
	*x = CueSNMPSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CueSNMPSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CueSNMPSettings) ProtoMessage() {}

func (x *CueSNMPSettings) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CueSNMPSettings.ProtoReflect.Descriptor instead.
func (*CueSNMPSettings) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{25}
}

func (x *CueSNMPSettings) GetTarget() *wrapperspb.StringValue {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *CueSNMPSettings) GetPort() *wrapperspb.Int32Value {
	if x != nil {
		return x.Port
	}
	return nil
}

func (x *CueSNMPSettings) GetTransport() *wrapperspb.StringValue {
	if x != nil {
		return x.Transport
	}
	return nil
}

func (x *CueSNMPSettings) GetVersion() *wrapperspb.Int32Value {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *CueSNMPSettings) GetAuth() *CueSNMPAuth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *CueSNMPSettings) GetData() *CueData {
	if x != nil {
		return x.Data
	}
	return nil
}

// SendgridSettings contain the settings for sending emails via sendgrid
type SendgridSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// api_key is the api key to use
	ApiKey *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	// from is the email address to send from
	From *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
}

func (x *SendgridSettings) Reset() {
	*x = SendgridSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendgridSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendgridSettings) ProtoMessage() {}

func (x *SendgridSettings) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendgridSettings.ProtoReflect.Descriptor instead.
func (*SendgridSettings) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{26}
}

func (x *SendgridSettings) GetApiKey() *wrapperspb.StringValue {
	if x != nil {
		return x.ApiKey
	}
	return nil
}

func (x *SendgridSettings) GetFrom() *wrapperspb.StringValue {
	if x != nil {
		return x.From
	}
	return nil
}

// CueSendgridSettings contain the settings for sending cue alerts to sendgrid
type CueSendgridSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// api_key is the key used to connect to the sendgrid APIs
	ApiKey *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	// from is the sender's address in the email sent
	From *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
}

func (x *CueSendgridSettings) Reset() {
	*x = CueSendgridSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CueSendgridSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CueSendgridSettings) ProtoMessage() {}

func (x *CueSendgridSettings) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CueSendgridSettings.ProtoReflect.Descriptor instead.
func (*CueSendgridSettings) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{27}
}

func (x *CueSendgridSettings) GetApiKey() *wrapperspb.StringValue {
	if x != nil {
		return x.ApiKey
	}
	return nil
}

func (x *CueSendgridSettings) GetFrom() *wrapperspb.StringValue {
	if x != nil {
		return x.From
	}
	return nil
}

// ZoomSettings contain the settings for sending alerts to zoom
type ZoomSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// url is the zoom incoming webhook URL to send messages to
	Url *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// verification_token is the verification token to authenticate with
	VerificationToken *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=verification_token,json=verificationToken,proto3" json:"verification_token,omitempty"`
}

func (x *ZoomSettings) Reset() {
	*x = ZoomSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZoomSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZoomSettings) ProtoMessage() {}

func (x *ZoomSettings) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZoomSettings.ProtoReflect.Descriptor instead.
func (*ZoomSettings) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{28}
}

func (x *ZoomSettings) GetUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *ZoomSettings) GetVerificationToken() *wrapperspb.StringValue {
	if x != nil {
		return x.VerificationToken
	}
	return nil
}

// InhibitionSettings allows certain event types to be suppressed while other event types are active
type InhibitionSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values is a map where the keys are event type which when active will suppress any events with
	// event types in the related EventList
	Values map[string]*EventList `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *InhibitionSettings) Reset() {
	*x = InhibitionSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InhibitionSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InhibitionSettings) ProtoMessage() {}

func (x *InhibitionSettings) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InhibitionSettings.ProtoReflect.Descriptor instead.
func (*InhibitionSettings) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{29}
}

func (x *InhibitionSettings) GetValues() map[string]*EventList {
	if x != nil {
		return x.Values
	}
	return nil
}

// EventList is a list of event types
type EventList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// event_types contain the event types
	EventTypes *fmp.RepeatedString `protobuf:"bytes,1,opt,name=event_types,json=eventTypes,proto3" json:"event_types,omitempty"`
}

func (x *EventList) Reset() {
	*x = EventList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventList) ProtoMessage() {}

func (x *EventList) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventList.ProtoReflect.Descriptor instead.
func (*EventList) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{30}
}

func (x *EventList) GetEventTypes() *fmp.RepeatedString {
	if x != nil {
		return x.EventTypes
	}
	return nil
}

// Rules is a list of rules which dictates which events generate alerts for which broadcast groups
type Rules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values contains the rules
	Values []*Rule `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *Rules) Reset() {
	*x = Rules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rules) ProtoMessage() {}

func (x *Rules) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rules.ProtoReflect.Descriptor instead.
func (*Rules) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{31}
}

func (x *Rules) GetValues() []*Rule {
	if x != nil {
		return x.Values
	}
	return nil
}

// Rule is a rule to send to a certain broadcast group
type Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sends_to is the name of the broadcast group top send matching alerts to
	SendsTo *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sends_to,json=sendsTo,proto3" json:"sends_to,omitempty"`
	// match_criteria is the criteria that an alert must match to be sent to the broadcast group
	MatchCriteria *Matches `protobuf:"bytes,2,opt,name=match_criteria,json=matchCriteria,proto3" json:"match_criteria,omitempty"`
	// continue_checks if true, causes alerts matching this rule's criteria to continue
	// checking against other rules, allowing for additional matches. If false,
	// alerts matching this rule will not proceed with checking
	ContinueChecks *wrapperspb.BoolValue `protobuf:"bytes,3,opt,name=continue_checks,json=continueChecks,proto3" json:"continue_checks,omitempty"`
	// comment is a comment to include that will be displayed in the alert
	Comment *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *Rule) Reset() {
	*x = Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule) ProtoMessage() {}

func (x *Rule) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule.ProtoReflect.Descriptor instead.
func (*Rule) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{32}
}

func (x *Rule) GetSendsTo() *wrapperspb.StringValue {
	if x != nil {
		return x.SendsTo
	}
	return nil
}

func (x *Rule) GetMatchCriteria() *Matches {
	if x != nil {
		return x.MatchCriteria
	}
	return nil
}

func (x *Rule) GetContinueChecks() *wrapperspb.BoolValue {
	if x != nil {
		return x.ContinueChecks
	}
	return nil
}

func (x *Rule) GetComment() *wrapperspb.StringValue {
	if x != nil {
		return x.Comment
	}
	return nil
}

// Matches is a set of restrictions that must be satisfied for a rule to be matched
// Empty fields are ignored for matching purposes. Condition contents are
// OR'd and then AND'd with the other criteria
type Matches struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// severities is a list of severities to filter on,
	// if an event does not have one of these severities, it will not match
	// Valid values are DEBUG, INFO, WARNING, ERROR and CRITICAL
	Severities *fmp.RepeatedString `protobuf:"bytes,1,opt,name=severities,proto3" json:"severities,omitempty"`
	// devices is a list of device IDs to filter on,
	// if an event does not belong to one of these devices, it will not match
	Devices *fmp.RepeatedString `protobuf:"bytes,2,opt,name=devices,proto3" json:"devices,omitempty"`
	// event_types is a list of event types to filter on,
	// if an event does not have one of these event types, it will not match
	EventTypes *fmp.RepeatedString `protobuf:"bytes,3,opt,name=event_types,json=eventTypes,proto3" json:"event_types,omitempty"`
	// device_tags is a string tag query that is used to match on the event's device tags
	DeviceTags *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=device_tags,json=deviceTags,proto3" json:"device_tags,omitempty"`
	// intf_tags is a string tag query that is used to match on the event's interface tags
	IntfTags *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=intf_tags,json=intfTags,proto3" json:"intf_tags,omitempty"`
	// rule_ids is a list of rule IDs to filter on,
	// if an event does not have one of these rule IDs, it will not match
	RuleIds *fmp.RepeatedString `protobuf:"bytes,6,opt,name=rule_ids,json=ruleIds,proto3" json:"rule_ids,omitempty"`
}

func (x *Matches) Reset() {
	*x = Matches{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Matches) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Matches) ProtoMessage() {}

func (x *Matches) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Matches.ProtoReflect.Descriptor instead.
func (*Matches) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{33}
}

func (x *Matches) GetSeverities() *fmp.RepeatedString {
	if x != nil {
		return x.Severities
	}
	return nil
}

func (x *Matches) GetDevices() *fmp.RepeatedString {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *Matches) GetEventTypes() *fmp.RepeatedString {
	if x != nil {
		return x.EventTypes
	}
	return nil
}

func (x *Matches) GetDeviceTags() *wrapperspb.StringValue {
	if x != nil {
		return x.DeviceTags
	}
	return nil
}

func (x *Matches) GetIntfTags() *wrapperspb.StringValue {
	if x != nil {
		return x.IntfTags
	}
	return nil
}

func (x *Matches) GetRuleIds() *fmp.RepeatedString {
	if x != nil {
		return x.RuleIds
	}
	return nil
}

// BroadcastGroups is a collection of named broadcast groups
type BroadcastGroups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values is a map of user defined ids to broadcast groups. No restrictions to naming applies
	Values map[string]*BroadcastGroup `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BroadcastGroups) Reset() {
	*x = BroadcastGroups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastGroups) ProtoMessage() {}

func (x *BroadcastGroups) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastGroups.ProtoReflect.Descriptor instead.
func (*BroadcastGroups) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{34}
}

func (x *BroadcastGroups) GetValues() map[string]*BroadcastGroup {
	if x != nil {
		return x.Values
	}
	return nil
}

// BroadcastGroup is a series of endpoints that alerts are sent to if routed there by a rule
// No restriction on the number of types of endpoints that can be defined
type BroadcastGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// email is a set of email endpoints to send alerts to as part of this group
	Email *EmailEndpoints `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	// webhook is a set of webhook endpoints to send alerts to as part of this group
	Webhook *WebhookEndpoints `protobuf:"bytes,2,opt,name=webhook,proto3" json:"webhook,omitempty"`
	// slack is a set of slack endpoints to send alerts to as part of this group
	Slack *SlackEndpoints `protobuf:"bytes,3,opt,name=slack,proto3" json:"slack,omitempty"`
	// opsgenie is a set of opsgenie endpoints to send alerts to as part of this group
	Opsgenie *OpsgenieEndpoints `protobuf:"bytes,4,opt,name=opsgenie,proto3" json:"opsgenie,omitempty"`
	// pushover is a set of pushover endpoints to send alerts to as part of this group
	Pushover *PushoverEndpoints `protobuf:"bytes,5,opt,name=pushover,proto3" json:"pushover,omitempty"`
	// pagerduty is a set of pagerduty endpoints to send alerts to as part of this group
	Pagerduty *PagerdutyEndpoints `protobuf:"bytes,6,opt,name=pagerduty,proto3" json:"pagerduty,omitempty"`
	// victorops is a set of victorops endpoints to send alerts to as part of this group
	Victorops *VictorOpsEndpoints `protobuf:"bytes,7,opt,name=victorops,proto3" json:"victorops,omitempty"`
	// gchat is a set of google chat endpoints to send alerts to as part of this group
	Gchat *GoogleChatEndpoints `protobuf:"bytes,8,opt,name=gchat,proto3" json:"gchat,omitempty"`
	// msteams is a set of MS teams endpoints to send alerts to as part of this group
	Msteams *MsTeamsEndpoints `protobuf:"bytes,9,opt,name=msteams,proto3" json:"msteams,omitempty"`
	// sendgrid is a set of sendgrid endpoints to send alerts to as part of this group
	Sendgrid *SendgridEndpoints `protobuf:"bytes,10,opt,name=sendgrid,proto3" json:"sendgrid,omitempty"`
	// syslog is a set of syslog endpoints to send alerts to as part of this group
	Syslog *SyslogEndpoints `protobuf:"bytes,11,opt,name=syslog,proto3" json:"syslog,omitempty"`
	// snmp is a set of snmp endpoints to send alerts to as part of this group
	Snmp *SNMPEndpoints `protobuf:"bytes,12,opt,name=snmp,proto3" json:"snmp,omitempty"`
	// cue_syslog is a set of cue syslog endpoints to send alerts to as part of this group
	CueSyslog *CueSyslogEndpoints `protobuf:"bytes,13,opt,name=cue_syslog,json=cueSyslog,proto3" json:"cue_syslog,omitempty"`
	// cue_snmp is a set of cue snmp endpoints to send alerts to as part of this group
	CueSnmp *CueSnmpEndpoints `protobuf:"bytes,14,opt,name=cue_snmp,json=cueSnmp,proto3" json:"cue_snmp,omitempty"`
	// cue_sendgrid is a set of cue sendgrid endpoints to send alerts to as part of this group
	CueSendgrid *CueSendgridEndpoints `protobuf:"bytes,15,opt,name=cue_sendgrid,json=cueSendgrid,proto3" json:"cue_sendgrid,omitempty"`
	// zoom is a set of zoom endpoints to send alerts to as part of this group
	Zoom *ZoomEndpoints `protobuf:"bytes,16,opt,name=zoom,proto3" json:"zoom,omitempty"`
}

func (x *BroadcastGroup) Reset() {
	*x = BroadcastGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastGroup) ProtoMessage() {}

func (x *BroadcastGroup) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastGroup.ProtoReflect.Descriptor instead.
func (*BroadcastGroup) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{35}
}

func (x *BroadcastGroup) GetEmail() *EmailEndpoints {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *BroadcastGroup) GetWebhook() *WebhookEndpoints {
	if x != nil {
		return x.Webhook
	}
	return nil
}

func (x *BroadcastGroup) GetSlack() *SlackEndpoints {
	if x != nil {
		return x.Slack
	}
	return nil
}

func (x *BroadcastGroup) GetOpsgenie() *OpsgenieEndpoints {
	if x != nil {
		return x.Opsgenie
	}
	return nil
}

func (x *BroadcastGroup) GetPushover() *PushoverEndpoints {
	if x != nil {
		return x.Pushover
	}
	return nil
}

func (x *BroadcastGroup) GetPagerduty() *PagerdutyEndpoints {
	if x != nil {
		return x.Pagerduty
	}
	return nil
}

func (x *BroadcastGroup) GetVictorops() *VictorOpsEndpoints {
	if x != nil {
		return x.Victorops
	}
	return nil
}

func (x *BroadcastGroup) GetGchat() *GoogleChatEndpoints {
	if x != nil {
		return x.Gchat
	}
	return nil
}

func (x *BroadcastGroup) GetMsteams() *MsTeamsEndpoints {
	if x != nil {
		return x.Msteams
	}
	return nil
}

func (x *BroadcastGroup) GetSendgrid() *SendgridEndpoints {
	if x != nil {
		return x.Sendgrid
	}
	return nil
}

func (x *BroadcastGroup) GetSyslog() *SyslogEndpoints {
	if x != nil {
		return x.Syslog
	}
	return nil
}

func (x *BroadcastGroup) GetSnmp() *SNMPEndpoints {
	if x != nil {
		return x.Snmp
	}
	return nil
}

func (x *BroadcastGroup) GetCueSyslog() *CueSyslogEndpoints {
	if x != nil {
		return x.CueSyslog
	}
	return nil
}

func (x *BroadcastGroup) GetCueSnmp() *CueSnmpEndpoints {
	if x != nil {
		return x.CueSnmp
	}
	return nil
}

func (x *BroadcastGroup) GetCueSendgrid() *CueSendgridEndpoints {
	if x != nil {
		return x.CueSendgrid
	}
	return nil
}

func (x *BroadcastGroup) GetZoom() *ZoomEndpoints {
	if x != nil {
		return x.Zoom
	}
	return nil
}

// EmailEndpoints is a set of email endpoints
type EmailEndpoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values are the elements of the set
	Values []*EmailEndpoint `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *EmailEndpoints) Reset() {
	*x = EmailEndpoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailEndpoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailEndpoints) ProtoMessage() {}

func (x *EmailEndpoints) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailEndpoints.ProtoReflect.Descriptor instead.
func (*EmailEndpoints) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{36}
}

func (x *EmailEndpoints) GetValues() []*EmailEndpoint {
	if x != nil {
		return x.Values
	}
	return nil
}

// WebhookEndpoints is a set of webhook endpoints
type WebhookEndpoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values are the elements of the set
	Values []*WebhookEndpoint `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *WebhookEndpoints) Reset() {
	*x = WebhookEndpoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhookEndpoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookEndpoints) ProtoMessage() {}

func (x *WebhookEndpoints) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookEndpoints.ProtoReflect.Descriptor instead.
func (*WebhookEndpoints) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{37}
}

func (x *WebhookEndpoints) GetValues() []*WebhookEndpoint {
	if x != nil {
		return x.Values
	}
	return nil
}

// SlackEndpoints is a set of slack endpoints
type SlackEndpoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values are the elements of the set
	Values []*SlackEndpoint `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *SlackEndpoints) Reset() {
	*x = SlackEndpoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlackEndpoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlackEndpoints) ProtoMessage() {}

func (x *SlackEndpoints) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlackEndpoints.ProtoReflect.Descriptor instead.
func (*SlackEndpoints) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{38}
}

func (x *SlackEndpoints) GetValues() []*SlackEndpoint {
	if x != nil {
		return x.Values
	}
	return nil
}

// OpsgenieEndpoints is a set of opsgenie endpoints
type OpsgenieEndpoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values are the elements of the set
	Values []*OpsgenieEndpoint `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *OpsgenieEndpoints) Reset() {
	*x = OpsgenieEndpoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpsgenieEndpoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpsgenieEndpoints) ProtoMessage() {}

func (x *OpsgenieEndpoints) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpsgenieEndpoints.ProtoReflect.Descriptor instead.
func (*OpsgenieEndpoints) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{39}
}

func (x *OpsgenieEndpoints) GetValues() []*OpsgenieEndpoint {
	if x != nil {
		return x.Values
	}
	return nil
}

// PushoverEndpoints is a set of pushover endpoints
type PushoverEndpoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values are the elements of the set
	Values []*PushoverEndpoint `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *PushoverEndpoints) Reset() {
	*x = PushoverEndpoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushoverEndpoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushoverEndpoints) ProtoMessage() {}

func (x *PushoverEndpoints) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushoverEndpoints.ProtoReflect.Descriptor instead.
func (*PushoverEndpoints) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{40}
}

func (x *PushoverEndpoints) GetValues() []*PushoverEndpoint {
	if x != nil {
		return x.Values
	}
	return nil
}

// PagerdutyEndpoints is a set of pagerduty endpoints
type PagerdutyEndpoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values are the elements of the set
	Values []*PagerdutyEndpoint `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *PagerdutyEndpoints) Reset() {
	*x = PagerdutyEndpoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PagerdutyEndpoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PagerdutyEndpoints) ProtoMessage() {}

func (x *PagerdutyEndpoints) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PagerdutyEndpoints.ProtoReflect.Descriptor instead.
func (*PagerdutyEndpoints) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{41}
}

func (x *PagerdutyEndpoints) GetValues() []*PagerdutyEndpoint {
	if x != nil {
		return x.Values
	}
	return nil
}

// VictorOpsEndpoints is a set of victorOps endpoints
type VictorOpsEndpoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values are the elements of the set
	Values []*VictorOpsEndpoint `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *VictorOpsEndpoints) Reset() {
	*x = VictorOpsEndpoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VictorOpsEndpoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VictorOpsEndpoints) ProtoMessage() {}

func (x *VictorOpsEndpoints) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VictorOpsEndpoints.ProtoReflect.Descriptor instead.
func (*VictorOpsEndpoints) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{42}
}

func (x *VictorOpsEndpoints) GetValues() []*VictorOpsEndpoint {
	if x != nil {
		return x.Values
	}
	return nil
}

// GoogleChatEndpoints is a set of googleChat endpoints
type GoogleChatEndpoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values are the elements of the set
	Values []*GoogleChatEndpoint `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *GoogleChatEndpoints) Reset() {
	*x = GoogleChatEndpoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleChatEndpoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleChatEndpoints) ProtoMessage() {}

func (x *GoogleChatEndpoints) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleChatEndpoints.ProtoReflect.Descriptor instead.
func (*GoogleChatEndpoints) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{43}
}

func (x *GoogleChatEndpoints) GetValues() []*GoogleChatEndpoint {
	if x != nil {
		return x.Values
	}
	return nil
}

// MsTeamsEndpoints is a set of ms teams endpoints
type MsTeamsEndpoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values are the elements of the set
	Values []*MsTeamsEndpoint `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *MsTeamsEndpoints) Reset() {
	*x = MsTeamsEndpoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsTeamsEndpoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsTeamsEndpoints) ProtoMessage() {}

func (x *MsTeamsEndpoints) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsTeamsEndpoints.ProtoReflect.Descriptor instead.
func (*MsTeamsEndpoints) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{44}
}

func (x *MsTeamsEndpoints) GetValues() []*MsTeamsEndpoint {
	if x != nil {
		return x.Values
	}
	return nil
}

// SendgridEndpoints is a set of sendgrid endpoints
type SendgridEndpoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values are the elements of the set
	Values []*SendgridEndpoint `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *SendgridEndpoints) Reset() {
	*x = SendgridEndpoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendgridEndpoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendgridEndpoints) ProtoMessage() {}

func (x *SendgridEndpoints) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendgridEndpoints.ProtoReflect.Descriptor instead.
func (*SendgridEndpoints) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{45}
}

func (x *SendgridEndpoints) GetValues() []*SendgridEndpoint {
	if x != nil {
		return x.Values
	}
	return nil
}

// CueSendgridEndpoints is a set of cue sendgrid endpoints
type CueSendgridEndpoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values are the elements of the set
	Values []*CueSendgridEndpoint `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *CueSendgridEndpoints) Reset() {
	*x = CueSendgridEndpoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CueSendgridEndpoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CueSendgridEndpoints) ProtoMessage() {}

func (x *CueSendgridEndpoints) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CueSendgridEndpoints.ProtoReflect.Descriptor instead.
func (*CueSendgridEndpoints) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{46}
}

func (x *CueSendgridEndpoints) GetValues() []*CueSendgridEndpoint {
	if x != nil {
		return x.Values
	}
	return nil
}

// SyslogEndpoints is a set of syslog endpoints
type SyslogEndpoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values are the elements of the set
	Values []*SyslogEndpoint `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *SyslogEndpoints) Reset() {
	*x = SyslogEndpoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyslogEndpoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyslogEndpoints) ProtoMessage() {}

func (x *SyslogEndpoints) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyslogEndpoints.ProtoReflect.Descriptor instead.
func (*SyslogEndpoints) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{47}
}

func (x *SyslogEndpoints) GetValues() []*SyslogEndpoint {
	if x != nil {
		return x.Values
	}
	return nil
}

// CueSyslogEndpoints is a set of cue syslog endpoints
type CueSyslogEndpoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values are the elements of the set
	Values []*CueSyslogEndpoint `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *CueSyslogEndpoints) Reset() {
	*x = CueSyslogEndpoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CueSyslogEndpoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CueSyslogEndpoints) ProtoMessage() {}

func (x *CueSyslogEndpoints) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CueSyslogEndpoints.ProtoReflect.Descriptor instead.
func (*CueSyslogEndpoints) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{48}
}

func (x *CueSyslogEndpoints) GetValues() []*CueSyslogEndpoint {
	if x != nil {
		return x.Values
	}
	return nil
}

// SNMPEndpoints is a set of SNMP endpoints
type SNMPEndpoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values are the elements of the set
	Values []*SNMPEndpoint `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *SNMPEndpoints) Reset() {
	*x = SNMPEndpoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SNMPEndpoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SNMPEndpoints) ProtoMessage() {}

func (x *SNMPEndpoints) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SNMPEndpoints.ProtoReflect.Descriptor instead.
func (*SNMPEndpoints) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{49}
}

func (x *SNMPEndpoints) GetValues() []*SNMPEndpoint {
	if x != nil {
		return x.Values
	}
	return nil
}

// CueSnmpEndpoints is a set of cue SNMP endpoints
type CueSnmpEndpoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values are the elements of the set
	Values []*CueSNMPEndpoint `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *CueSnmpEndpoints) Reset() {
	*x = CueSnmpEndpoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CueSnmpEndpoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CueSnmpEndpoints) ProtoMessage() {}

func (x *CueSnmpEndpoints) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CueSnmpEndpoints.ProtoReflect.Descriptor instead.
func (*CueSnmpEndpoints) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{50}
}

func (x *CueSnmpEndpoints) GetValues() []*CueSNMPEndpoint {
	if x != nil {
		return x.Values
	}
	return nil
}

// ZoomEndpoints is a set of zoom endpoints
type ZoomEndpoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values are the elements of the set
	Values []*ZoomEndpoint `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *ZoomEndpoints) Reset() {
	*x = ZoomEndpoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZoomEndpoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZoomEndpoints) ProtoMessage() {}

func (x *ZoomEndpoints) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZoomEndpoints.ProtoReflect.Descriptor instead.
func (*ZoomEndpoints) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{51}
}

func (x *ZoomEndpoints) GetValues() []*ZoomEndpoint {
	if x != nil {
		return x.Values
	}
	return nil
}

// EmailEndpoint contains the required information for an alert to be sent to an email endpoint
type EmailEndpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// send_resolved send alerts when events are resolved along with when they are triggered
	SendResolved *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=send_resolved,json=sendResolved,proto3" json:"send_resolved,omitempty"`
	// to address to send email to
	To *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *EmailEndpoint) Reset() {
	*x = EmailEndpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailEndpoint) ProtoMessage() {}

func (x *EmailEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailEndpoint.ProtoReflect.Descriptor instead.
func (*EmailEndpoint) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{52}
}

func (x *EmailEndpoint) GetSendResolved() *wrapperspb.BoolValue {
	if x != nil {
		return x.SendResolved
	}
	return nil
}

func (x *EmailEndpoint) GetTo() *wrapperspb.StringValue {
	if x != nil {
		return x.To
	}
	return nil
}

// WebhookEndpoint contains the required information for an alert to be sent to a webhook endpoint
type WebhookEndpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// send_resolved send alerts when events are resolved along with when they are triggered
	SendResolved *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=send_resolved,json=sendResolved,proto3" json:"send_resolved,omitempty"`
	// url is the url
	Url *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// http_override is the override of the global http settings
	HttpOverride *HttpSettings `protobuf:"bytes,3,opt,name=http_override,json=httpOverride,proto3" json:"http_override,omitempty"`
	// simple_output is a boolean flag to control the JSON structure of the webhook body.
	// When false the output mimics the old alertmanager format.
	// When true the output is a simple array of json objects which each represent an event.
	SimpleOutput *wrapperspb.BoolValue `protobuf:"bytes,4,opt,name=simple_output,json=simpleOutput,proto3" json:"simple_output,omitempty"`
	// single_alert is a boolean flag that will cause an individual webhook message to be sent per
	// alert when true.
	SingleAlert *wrapperspb.BoolValue `protobuf:"bytes,5,opt,name=single_alert,json=singleAlert,proto3" json:"single_alert,omitempty"` // Webhook does not have a settings override
}

func (x *WebhookEndpoint) Reset() {
	*x = WebhookEndpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhookEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookEndpoint) ProtoMessage() {}

func (x *WebhookEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookEndpoint.ProtoReflect.Descriptor instead.
func (*WebhookEndpoint) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{53}
}

func (x *WebhookEndpoint) GetSendResolved() *wrapperspb.BoolValue {
	if x != nil {
		return x.SendResolved
	}
	return nil
}

func (x *WebhookEndpoint) GetUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *WebhookEndpoint) GetHttpOverride() *HttpSettings {
	if x != nil {
		return x.HttpOverride
	}
	return nil
}

func (x *WebhookEndpoint) GetSimpleOutput() *wrapperspb.BoolValue {
	if x != nil {
		return x.SimpleOutput
	}
	return nil
}

func (x *WebhookEndpoint) GetSingleAlert() *wrapperspb.BoolValue {
	if x != nil {
		return x.SingleAlert
	}
	return nil
}

// SlackEndpoint contains the required information for an alert to be sent to a slack endpoint
type SlackEndpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// send_resolved send alerts when events are resolved along with when they are triggered
	SendResolved *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=send_resolved,json=sendResolved,proto3" json:"send_resolved,omitempty"`
	// http_override is the override of the global http settings
	HttpOverride *HttpSettings `protobuf:"bytes,2,opt,name=http_override,json=httpOverride,proto3" json:"http_override,omitempty"`
	// settings_override is the override for the slack global endpoint settings
	SettingsOverride *SlackSettings `protobuf:"bytes,3,opt,name=settings_override,json=settingsOverride,proto3" json:"settings_override,omitempty"`
}

func (x *SlackEndpoint) Reset() {
	*x = SlackEndpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlackEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlackEndpoint) ProtoMessage() {}

func (x *SlackEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlackEndpoint.ProtoReflect.Descriptor instead.
func (*SlackEndpoint) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{54}
}

func (x *SlackEndpoint) GetSendResolved() *wrapperspb.BoolValue {
	if x != nil {
		return x.SendResolved
	}
	return nil
}

func (x *SlackEndpoint) GetHttpOverride() *HttpSettings {
	if x != nil {
		return x.HttpOverride
	}
	return nil
}

func (x *SlackEndpoint) GetSettingsOverride() *SlackSettings {
	if x != nil {
		return x.SettingsOverride
	}
	return nil
}

// OpsgenieEndpoint contains the required information for an alert to be sent to an opsgenie endpoint
type OpsgenieEndpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// send_resolved send alerts when events are resolved along with when they are triggered
	SendResolved *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=send_resolved,json=sendResolved,proto3" json:"send_resolved,omitempty"`
	// http_override is the override of the global http settings
	HttpOverride *HttpSettings `protobuf:"bytes,2,opt,name=http_override,json=httpOverride,proto3" json:"http_override,omitempty"`
	// settings_override is the override for the opsgenie global endpoint settings
	SettingsOverride *OpsgenieSettings `protobuf:"bytes,3,opt,name=settings_override,json=settingsOverride,proto3" json:"settings_override,omitempty"`
}

func (x *OpsgenieEndpoint) Reset() {
	*x = OpsgenieEndpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpsgenieEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpsgenieEndpoint) ProtoMessage() {}

func (x *OpsgenieEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpsgenieEndpoint.ProtoReflect.Descriptor instead.
func (*OpsgenieEndpoint) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{55}
}

func (x *OpsgenieEndpoint) GetSendResolved() *wrapperspb.BoolValue {
	if x != nil {
		return x.SendResolved
	}
	return nil
}

func (x *OpsgenieEndpoint) GetHttpOverride() *HttpSettings {
	if x != nil {
		return x.HttpOverride
	}
	return nil
}

func (x *OpsgenieEndpoint) GetSettingsOverride() *OpsgenieSettings {
	if x != nil {
		return x.SettingsOverride
	}
	return nil
}

// PushoverEndpoint contains the required information for an alert to be sent to a pushover endpoint
type PushoverEndpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// send_resolved send alerts when events are resolved along with when they are triggered
	SendResolved *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=send_resolved,json=sendResolved,proto3" json:"send_resolved,omitempty"`
	// token is the user's registered application's API token, see https://pushover.net/apps
	Token *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	// user_key is the user's user key
	UserKey *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=user_key,json=userKey,proto3" json:"user_key,omitempty"`
	// http_override is the override of the global http settings
	HttpOverride *HttpSettings `protobuf:"bytes,4,opt,name=http_override,json=httpOverride,proto3" json:"http_override,omitempty"` // Pushover does not have a settings override
}

func (x *PushoverEndpoint) Reset() {
	*x = PushoverEndpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushoverEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushoverEndpoint) ProtoMessage() {}

func (x *PushoverEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushoverEndpoint.ProtoReflect.Descriptor instead.
func (*PushoverEndpoint) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{56}
}

func (x *PushoverEndpoint) GetSendResolved() *wrapperspb.BoolValue {
	if x != nil {
		return x.SendResolved
	}
	return nil
}

func (x *PushoverEndpoint) GetToken() *wrapperspb.StringValue {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *PushoverEndpoint) GetUserKey() *wrapperspb.StringValue {
	if x != nil {
		return x.UserKey
	}
	return nil
}

func (x *PushoverEndpoint) GetHttpOverride() *HttpSettings {
	if x != nil {
		return x.HttpOverride
	}
	return nil
}

// PagerdutyEndpoint contains the required information for an alert to be sent to a pagerduty endpoint
type PagerdutyEndpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// send_resolved send alerts when events are resolved along with when they are triggered
	SendResolved *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=send_resolved,json=sendResolved,proto3" json:"send_resolved,omitempty"`
	// routing_key is the routing key for sending pagerduty alerts
	RoutingKey *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=routing_key,json=routingKey,proto3" json:"routing_key,omitempty"`
	// http_override is the override of the global http settings
	HttpOverride *HttpSettings `protobuf:"bytes,3,opt,name=http_override,json=httpOverride,proto3" json:"http_override,omitempty"`
	// settings_override is the override for the pagerduty global endpoint settings
	SettingsOverride *PagerdutySettings `protobuf:"bytes,4,opt,name=settings_override,json=settingsOverride,proto3" json:"settings_override,omitempty"`
}

func (x *PagerdutyEndpoint) Reset() {
	*x = PagerdutyEndpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PagerdutyEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PagerdutyEndpoint) ProtoMessage() {}

func (x *PagerdutyEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PagerdutyEndpoint.ProtoReflect.Descriptor instead.
func (*PagerdutyEndpoint) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{57}
}

func (x *PagerdutyEndpoint) GetSendResolved() *wrapperspb.BoolValue {
	if x != nil {
		return x.SendResolved
	}
	return nil
}

func (x *PagerdutyEndpoint) GetRoutingKey() *wrapperspb.StringValue {
	if x != nil {
		return x.RoutingKey
	}
	return nil
}

func (x *PagerdutyEndpoint) GetHttpOverride() *HttpSettings {
	if x != nil {
		return x.HttpOverride
	}
	return nil
}

func (x *PagerdutyEndpoint) GetSettingsOverride() *PagerdutySettings {
	if x != nil {
		return x.SettingsOverride
	}
	return nil
}

// VictorOpsEndpoint contains the required information for an alert to be sent to a victorOps endpoint
type VictorOpsEndpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// send_resolved send alerts when events are resolved along with when they are triggered
	SendResolved *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=send_resolved,json=sendResolved,proto3" json:"send_resolved,omitempty"`
	// routing_key is the PagerDuty integration key
	RoutingKey *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=routing_key,json=routingKey,proto3" json:"routing_key,omitempty"`
	// http_override is the override of the global http settings
	HttpOverride *HttpSettings `protobuf:"bytes,3,opt,name=http_override,json=httpOverride,proto3" json:"http_override,omitempty"`
	// settings_override is the override for the victorops global endpoint settings
	SettingsOverride *VictoropsSettings `protobuf:"bytes,4,opt,name=settings_override,json=settingsOverride,proto3" json:"settings_override,omitempty"`
}

func (x *VictorOpsEndpoint) Reset() {
	*x = VictorOpsEndpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VictorOpsEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VictorOpsEndpoint) ProtoMessage() {}

func (x *VictorOpsEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VictorOpsEndpoint.ProtoReflect.Descriptor instead.
func (*VictorOpsEndpoint) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{58}
}

func (x *VictorOpsEndpoint) GetSendResolved() *wrapperspb.BoolValue {
	if x != nil {
		return x.SendResolved
	}
	return nil
}

func (x *VictorOpsEndpoint) GetRoutingKey() *wrapperspb.StringValue {
	if x != nil {
		return x.RoutingKey
	}
	return nil
}

func (x *VictorOpsEndpoint) GetHttpOverride() *HttpSettings {
	if x != nil {
		return x.HttpOverride
	}
	return nil
}

func (x *VictorOpsEndpoint) GetSettingsOverride() *VictoropsSettings {
	if x != nil {
		return x.SettingsOverride
	}
	return nil
}

// GoogleChatEndpoint contains the required information for an alert to be sent to a google chat endpoint
type GoogleChatEndpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// send_resolved send alerts when events are resolved along with when they are triggered
	SendResolved *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=send_resolved,json=sendResolved,proto3" json:"send_resolved,omitempty"`
	// http_override is the override of the global http settings
	HttpOverride *HttpSettings `protobuf:"bytes,2,opt,name=http_override,json=httpOverride,proto3" json:"http_override,omitempty"`
	// settings_override is the override for the google chat global endpoint settings
	SettingsOverride *GoogleChatSettings `protobuf:"bytes,3,opt,name=settings_override,json=settingsOverride,proto3" json:"settings_override,omitempty"`
}

func (x *GoogleChatEndpoint) Reset() {
	*x = GoogleChatEndpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleChatEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleChatEndpoint) ProtoMessage() {}

func (x *GoogleChatEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleChatEndpoint.ProtoReflect.Descriptor instead.
func (*GoogleChatEndpoint) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{59}
}

func (x *GoogleChatEndpoint) GetSendResolved() *wrapperspb.BoolValue {
	if x != nil {
		return x.SendResolved
	}
	return nil
}

func (x *GoogleChatEndpoint) GetHttpOverride() *HttpSettings {
	if x != nil {
		return x.HttpOverride
	}
	return nil
}

func (x *GoogleChatEndpoint) GetSettingsOverride() *GoogleChatSettings {
	if x != nil {
		return x.SettingsOverride
	}
	return nil
}

// MsTeamsEndpoint contains the required information for an alert to be sent to an ms teams endpoint
type MsTeamsEndpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// send_resolved send alerts when events are resolved along with when they are triggered
	SendResolved *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=send_resolved,json=sendResolved,proto3" json:"send_resolved,omitempty"`
	// http_override is the override of the global http settings
	HttpOverride *HttpSettings `protobuf:"bytes,2,opt,name=http_override,json=httpOverride,proto3" json:"http_override,omitempty"`
	// settings_override is the override for the microsoft teams global endpoint settings
	SettingsOverride *MsTeamsSettings `protobuf:"bytes,3,opt,name=settings_override,json=settingsOverride,proto3" json:"settings_override,omitempty"`
}

func (x *MsTeamsEndpoint) Reset() {
	*x = MsTeamsEndpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsTeamsEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsTeamsEndpoint) ProtoMessage() {}

func (x *MsTeamsEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsTeamsEndpoint.ProtoReflect.Descriptor instead.
func (*MsTeamsEndpoint) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{60}
}

func (x *MsTeamsEndpoint) GetSendResolved() *wrapperspb.BoolValue {
	if x != nil {
		return x.SendResolved
	}
	return nil
}

func (x *MsTeamsEndpoint) GetHttpOverride() *HttpSettings {
	if x != nil {
		return x.HttpOverride
	}
	return nil
}

func (x *MsTeamsEndpoint) GetSettingsOverride() *MsTeamsSettings {
	if x != nil {
		return x.SettingsOverride
	}
	return nil
}

// SendgridEndpoint contains the required information for an alert to be sent to a sendgrid endpoint
type SendgridEndpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// send_resolved send alerts when events are resolved along with when they are triggered
	SendResolved *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=send_resolved,json=sendResolved,proto3" json:"send_resolved,omitempty"`
	// to address to send email to
	To *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	// http_override is the override of the global http settings
	HttpOverride *HttpSettings `protobuf:"bytes,3,opt,name=http_override,json=httpOverride,proto3" json:"http_override,omitempty"`
}

func (x *SendgridEndpoint) Reset() {
	*x = SendgridEndpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendgridEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendgridEndpoint) ProtoMessage() {}

func (x *SendgridEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendgridEndpoint.ProtoReflect.Descriptor instead.
func (*SendgridEndpoint) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{61}
}

func (x *SendgridEndpoint) GetSendResolved() *wrapperspb.BoolValue {
	if x != nil {
		return x.SendResolved
	}
	return nil
}

func (x *SendgridEndpoint) GetTo() *wrapperspb.StringValue {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *SendgridEndpoint) GetHttpOverride() *HttpSettings {
	if x != nil {
		return x.HttpOverride
	}
	return nil
}

// CueSendgridEndpoint contains the required information for an alert to be sent to a cue sendgrid endpoint
type CueSendgridEndpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// send_resolved send alerts when events are resolved along with when they are triggered
	SendResolved *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=send_resolved,json=sendResolved,proto3" json:"send_resolved,omitempty"`
	// to address to send email to
	To *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	// http_override is the override of the global http settings
	// This overrides the value used in Settings message in the global alert config
	HttpOverride *HttpSettings `protobuf:"bytes,3,opt,name=http_override,json=httpOverride,proto3" json:"http_override,omitempty"`
}

func (x *CueSendgridEndpoint) Reset() {
	*x = CueSendgridEndpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CueSendgridEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CueSendgridEndpoint) ProtoMessage() {}

func (x *CueSendgridEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CueSendgridEndpoint.ProtoReflect.Descriptor instead.
func (*CueSendgridEndpoint) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{62}
}

func (x *CueSendgridEndpoint) GetSendResolved() *wrapperspb.BoolValue {
	if x != nil {
		return x.SendResolved
	}
	return nil
}

func (x *CueSendgridEndpoint) GetTo() *wrapperspb.StringValue {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *CueSendgridEndpoint) GetHttpOverride() *HttpSettings {
	if x != nil {
		return x.HttpOverride
	}
	return nil
}

// SyslogEndpoint contains the required information for an alert to be sent to a syslog endpoint
type SyslogEndpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// send_resolved send alerts when events are resolved along with when they are triggered
	SendResolved *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=send_resolved,json=sendResolved,proto3" json:"send_resolved,omitempty"`
	// settings_override is the override for the microsoft teams global endpoint settings
	SettingsOverride *SyslogSettings `protobuf:"bytes,2,opt,name=settings_override,json=settingsOverride,proto3" json:"settings_override,omitempty"`
}

func (x *SyslogEndpoint) Reset() {
	*x = SyslogEndpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyslogEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyslogEndpoint) ProtoMessage() {}

func (x *SyslogEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyslogEndpoint.ProtoReflect.Descriptor instead.
func (*SyslogEndpoint) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{63}
}

func (x *SyslogEndpoint) GetSendResolved() *wrapperspb.BoolValue {
	if x != nil {
		return x.SendResolved
	}
	return nil
}

func (x *SyslogEndpoint) GetSettingsOverride() *SyslogSettings {
	if x != nil {
		return x.SettingsOverride
	}
	return nil
}

// CueSyslogEndpoint contains the required information for an alert to be sent to a cue syslog endpoint
type CueSyslogEndpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// send_resolved send alerts when events are resolved along with when they are triggered
	SendResolved *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=send_resolved,json=sendResolved,proto3" json:"send_resolved,omitempty"`
	// settings_override is the override for the cue syslog global endpoint settings
	SettingsOverride *CueSyslogSettings `protobuf:"bytes,2,opt,name=settings_override,json=settingsOverride,proto3" json:"settings_override,omitempty"`
}

func (x *CueSyslogEndpoint) Reset() {
	*x = CueSyslogEndpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CueSyslogEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CueSyslogEndpoint) ProtoMessage() {}

func (x *CueSyslogEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CueSyslogEndpoint.ProtoReflect.Descriptor instead.
func (*CueSyslogEndpoint) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{64}
}

func (x *CueSyslogEndpoint) GetSendResolved() *wrapperspb.BoolValue {
	if x != nil {
		return x.SendResolved
	}
	return nil
}

func (x *CueSyslogEndpoint) GetSettingsOverride() *CueSyslogSettings {
	if x != nil {
		return x.SettingsOverride
	}
	return nil
}

// SNMPEndpoint contains the required information for an alert to be sent to an SNMP endpoint
type SNMPEndpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// send_resolved send alerts when events are resolved along with when they are triggered
	SendResolved *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=send_resolved,json=sendResolved,proto3" json:"send_resolved,omitempty"`
	// settings_override is the override for the microsoft teams global endpoint settings
	SettingsOverride *SNMPSettings `protobuf:"bytes,2,opt,name=settings_override,json=settingsOverride,proto3" json:"settings_override,omitempty"`
}

func (x *SNMPEndpoint) Reset() {
	*x = SNMPEndpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SNMPEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SNMPEndpoint) ProtoMessage() {}

func (x *SNMPEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SNMPEndpoint.ProtoReflect.Descriptor instead.
func (*SNMPEndpoint) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{65}
}

func (x *SNMPEndpoint) GetSendResolved() *wrapperspb.BoolValue {
	if x != nil {
		return x.SendResolved
	}
	return nil
}

func (x *SNMPEndpoint) GetSettingsOverride() *SNMPSettings {
	if x != nil {
		return x.SettingsOverride
	}
	return nil
}

// CueSNMPEndpoint contains the required information for an alert to be sent to a cue SNMP endpoint
type CueSNMPEndpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// send_resolved send alerts when events are resolved along with when they are triggered
	SendResolved *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=send_resolved,json=sendResolved,proto3" json:"send_resolved,omitempty"`
	// settings_override is the override for the cue snmp global endpoint settings
	SettingsOverride *CueSNMPSettings `protobuf:"bytes,2,opt,name=settings_override,json=settingsOverride,proto3" json:"settings_override,omitempty"`
}

func (x *CueSNMPEndpoint) Reset() {
	*x = CueSNMPEndpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CueSNMPEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CueSNMPEndpoint) ProtoMessage() {}

func (x *CueSNMPEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CueSNMPEndpoint.ProtoReflect.Descriptor instead.
func (*CueSNMPEndpoint) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{66}
}

func (x *CueSNMPEndpoint) GetSendResolved() *wrapperspb.BoolValue {
	if x != nil {
		return x.SendResolved
	}
	return nil
}

func (x *CueSNMPEndpoint) GetSettingsOverride() *CueSNMPSettings {
	if x != nil {
		return x.SettingsOverride
	}
	return nil
}

// ZoomEndpoint contains the required information for an alert to be sent to a zoom endpoint
type ZoomEndpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// send_resolved send alerts when events are resolved along with when they are triggered
	SendResolved *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=send_resolved,json=sendResolved,proto3" json:"send_resolved,omitempty"`
	// http_override is the override of the global http settings
	HttpOverride *HttpSettings `protobuf:"bytes,2,opt,name=http_override,json=httpOverride,proto3" json:"http_override,omitempty"`
	// settings_override is the override for the zoom global endpoint settings
	SettingsOverride *ZoomSettings `protobuf:"bytes,3,opt,name=settings_override,json=settingsOverride,proto3" json:"settings_override,omitempty"`
}

func (x *ZoomEndpoint) Reset() {
	*x = ZoomEndpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZoomEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZoomEndpoint) ProtoMessage() {}

func (x *ZoomEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZoomEndpoint.ProtoReflect.Descriptor instead.
func (*ZoomEndpoint) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{67}
}

func (x *ZoomEndpoint) GetSendResolved() *wrapperspb.BoolValue {
	if x != nil {
		return x.SendResolved
	}
	return nil
}

func (x *ZoomEndpoint) GetHttpOverride() *HttpSettings {
	if x != nil {
		return x.HttpOverride
	}
	return nil
}

func (x *ZoomEndpoint) GetSettingsOverride() *ZoomSettings {
	if x != nil {
		return x.SettingsOverride
	}
	return nil
}

// TemplateKey is used to identify templates for event notifications
type TemplateKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// template_type is the enum value to match with the template
	TemplateType TemplateType `protobuf:"varint,1,opt,name=template_type,json=templateType,proto3,enum=arista.alert.v1.TemplateType" json:"template_type,omitempty"`
}

func (x *TemplateKey) Reset() {
	*x = TemplateKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplateKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateKey) ProtoMessage() {}

func (x *TemplateKey) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateKey.ProtoReflect.Descriptor instead.
func (*TemplateKey) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{68}
}

func (x *TemplateKey) GetTemplateType() TemplateType {
	if x != nil {
		return x.TemplateType
	}
	return TemplateType_TEMPLATE_TYPE_UNSPECIFIED
}

// TemplateConfig represents a template configuration
type TemplateConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key identifies which template the configuration is for
	Key *TemplateKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// template is the string template value to be used
	// Templates need to be compatible with their respective parsers
	// Message templates are read and parsed by https://golang.org/pkg/text/template/
	// Html templates are read and parsed by https://golang.org/pkg/html/template/
	// Templates must output valid JSON for certain templates
	// Templates must not fail for any valid input
	Template *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=template,proto3" json:"template,omitempty"`
}

func (x *TemplateConfig) Reset() {
	*x = TemplateConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplateConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateConfig) ProtoMessage() {}

func (x *TemplateConfig) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateConfig.ProtoReflect.Descriptor instead.
func (*TemplateConfig) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{69}
}

func (x *TemplateConfig) GetKey() *TemplateKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TemplateConfig) GetTemplate() *wrapperspb.StringValue {
	if x != nil {
		return x.Template
	}
	return nil
}

// DefaultTemplate is the system default template which is used when no user template has been set
type DefaultTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key identifies which template the configuration is for
	Key *TemplateKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// template is the string template value to be used
	// Templates need to be compatible with their respective parsers
	// Message templates are read and parsed by https://golang.org/pkg/text/template/
	// Html templates are read and parsed by https://golang.org/pkg/html/template/
	// Templates must output valid JSON for certain templates
	// Templates must not fail for any valid input
	Template *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=template,proto3" json:"template,omitempty"`
	// multi_alert is true if this template uses a multiple alert context and false if a single
	// alert context is used.
	MultiAlert *wrapperspb.BoolValue `protobuf:"bytes,3,opt,name=multi_alert,json=multiAlert,proto3" json:"multi_alert,omitempty"`
	// description is a description of the template.
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// external_documentation is a url to any relevant external documentation, or "" if there is no
	// relevant documentation.
	ExternalDocumentation *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=external_documentation,json=externalDocumentation,proto3" json:"external_documentation,omitempty"`
	// output_format is the expected output format of this template
	// Any submitted template will be expected to output text with valid formatting for any input or
	// may fail validation.
	OutputFormat TemplateOutput `protobuf:"varint,6,opt,name=output_format,json=outputFormat,proto3,enum=arista.alert.v1.TemplateOutput" json:"output_format,omitempty"`
	// display_name is the name that can be displayed to the user for this particular template type
	DisplayName *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
}

func (x *DefaultTemplate) Reset() {
	*x = DefaultTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_alert_v1_alert_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultTemplate) ProtoMessage() {}

func (x *DefaultTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_arista_alert_v1_alert_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultTemplate.ProtoReflect.Descriptor instead.
func (*DefaultTemplate) Descriptor() ([]byte, []int) {
	return file_arista_alert_v1_alert_proto_rawDescGZIP(), []int{70}
}

func (x *DefaultTemplate) GetKey() *TemplateKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *DefaultTemplate) GetTemplate() *wrapperspb.StringValue {
	if x != nil {
		return x.Template
	}
	return nil
}

func (x *DefaultTemplate) GetMultiAlert() *wrapperspb.BoolValue {
	if x != nil {
		return x.MultiAlert
	}
	return nil
}

func (x *DefaultTemplate) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *DefaultTemplate) GetExternalDocumentation() *wrapperspb.StringValue {
	if x != nil {
		return x.ExternalDocumentation
	}
	return nil
}

func (x *DefaultTemplate) GetOutputFormat() TemplateOutput {
	if x != nil {
		return x.OutputFormat
	}
	return TemplateOutput_TEMPLATE_OUTPUT_UNSPECIFIED
}

func (x *DefaultTemplate) GetDisplayName() *wrapperspb.StringValue {
	if x != nil {
		return x.DisplayName
	}
	return nil
}

var File_arista_alert_v1_alert_proto protoreflect.FileDescriptor

var file_arista_alert_v1_alert_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76,
	0x31, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x14, 0x66, 0x6d, 0x70, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x66, 0x6d, 0x70, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcb, 0x01, 0x0a, 0x0b, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x35, 0x0a, 0x08, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x2c, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x4b,
	0x0a, 0x10, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x0f, 0x62, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x3a, 0x0a, 0x90, 0x8e, 0x19,
	0x01, 0xa2, 0x8e, 0x19, 0x02, 0x72, 0x77, 0x22, 0xbd, 0x02, 0x0a, 0x05, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x12, 0x50, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x13,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x12, 0x48, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x0e, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x44, 0x0a,
	0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x46, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x6c, 0x61, 0x73,
	0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x3a, 0x0a, 0x90, 0x8e, 0x19,
	0x01, 0xa2, 0x8e, 0x19, 0x02, 0x72, 0x6f, 0x22, 0x44, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xb4, 0x01,
	0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x30, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12,
	0x3f, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x48, 0x0a, 0x0e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xd9,
	0x02, 0x0a, 0x0d, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x41, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x14, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x12, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x41, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xfb, 0x08, 0x0a, 0x08, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x31, 0x0a,
	0x04, 0x68, 0x74, 0x74, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74,
	0x74, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x04, 0x68, 0x74, 0x74, 0x70,
	0x12, 0x34, 0x0a, 0x05, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x05, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x12, 0x40, 0x0a, 0x09, 0x76, 0x69, 0x63, 0x74, 0x6f, 0x72,
	0x6f, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x63, 0x74,
	0x6f, 0x72, 0x6f, 0x70, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x09, 0x76,
	0x69, 0x63, 0x74, 0x6f, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x40, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x72, 0x64, 0x75, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x72, 0x64, 0x75, 0x74, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x72, 0x64, 0x75, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x08, 0x6f, 0x70,
	0x73, 0x67, 0x65, 0x6e, 0x69, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x70, 0x73, 0x67, 0x65, 0x6e, 0x69, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x08, 0x6f, 0x70, 0x73, 0x67, 0x65, 0x6e, 0x69, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x67, 0x63, 0x68,
	0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x05, 0x67,
	0x63, 0x68, 0x61, 0x74, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x07, 0x6d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x73,
	0x12, 0x43, 0x0a, 0x0a, 0x69, 0x6e, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0a, 0x69, 0x6e, 0x68, 0x69, 0x62,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x38,
	0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x6c,
	0x6f, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x6c, 0x6f,
	0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x06, 0x73, 0x79, 0x73, 0x6c, 0x6f,
	0x67, 0x12, 0x31, 0x0a, 0x04, 0x73, 0x6e, 0x6d, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x4e, 0x4d, 0x50, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x04,
	0x73, 0x6e, 0x6d, 0x70, 0x12, 0x3d, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x67, 0x72, 0x69, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x67, 0x72, 0x69,
	0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x67,
	0x72, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0a, 0x63, 0x75, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x6c, 0x6f,
	0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x65, 0x53, 0x79, 0x73,
	0x6c, 0x6f, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x09, 0x63, 0x75, 0x65,
	0x53, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x12, 0x3b, 0x0a, 0x08, 0x63, 0x75, 0x65, 0x5f, 0x73, 0x6e,
	0x6d, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x65, 0x53, 0x4e,
	0x4d, 0x50, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x07, 0x63, 0x75, 0x65, 0x53,
	0x6e, 0x6d, 0x70, 0x12, 0x47, 0x0a, 0x0c, 0x63, 0x75, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x67,
	0x72, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x65, 0x53,
	0x65, 0x6e, 0x64, 0x67, 0x72, 0x69, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x0b, 0x63, 0x75, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x67, 0x72, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x09,
	0x68, 0x69, 0x64, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x68, 0x69, 0x64,
	0x65, 0x54, 0x61, 0x67, 0x73, 0x12, 0x31, 0x0a, 0x04, 0x7a, 0x6f, 0x6f, 0x6d, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x5a, 0x6f, 0x6f, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x04, 0x7a, 0x6f, 0x6f, 0x6d, 0x22, 0xd0, 0x03, 0x0a, 0x0d, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x3a, 0x0a, 0x09,
	0x73, 0x6d, 0x61, 0x72, 0x74, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73,
	0x6d, 0x61, 0x72, 0x74, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x61,
	0x75, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x3b,
	0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x6c, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x54, 0x6c, 0x73, 0x12, 0x4f, 0x0a, 0x16, 0x73,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x50, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x3d, 0x0a, 0x0c,
	0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x6f, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x52,
	0x0a, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x22, 0xfe, 0x01, 0x0a, 0x0a,
	0x41, 0x7a, 0x75, 0x72, 0x65, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x12, 0x39, 0x0a, 0x09, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x41, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x75, 0x72, 0x69, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x55, 0x72, 0x69, 0x22, 0x82, 0x02, 0x0a,
	0x0c, 0x48, 0x74, 0x74, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x38, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x39, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x43, 0x0a, 0x0e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x22, 0xa9, 0x01, 0x0a, 0x0b, 0x48, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x40, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x1a, 0x58, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x26, 0x0a,
	0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x3f, 0x0a, 0x0d, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2e, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x73, 0x0a, 0x11, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72,
	0x6f, 0x70, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2e, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x43, 0x0a, 0x11, 0x50,
	0x61, 0x67, 0x65, 0x72, 0x64, 0x75, 0x74, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x2e, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x22, 0x72, 0x0a, 0x10, 0x4f, 0x70, 0x73, 0x67, 0x65, 0x6e, 0x69, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x2e, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x22, 0x44, 0x0a, 0x12, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2e, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x41, 0x0a, 0x0f, 0x4d, 0x73,
	0x54, 0x65, 0x61, 0x6d, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2e, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x96, 0x03,
	0x0a, 0x0e, 0x53, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x36, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x36, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x37, 0x0a, 0x08, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x70, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x33, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x54, 0x6c, 0x73, 0x22, 0xda, 0x01, 0x0a, 0x0a, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x31,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x2f, 0x0a, 0x04, 0x77, 0x61, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x77, 0x61,
	0x72, 0x6e, 0x12, 0x2f, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x22, 0x82, 0x01, 0x0a, 0x07, 0x43, 0x75, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x3c, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x75, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x39, 0x0a,
	0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfa, 0x02, 0x0a, 0x11, 0x43, 0x75, 0x65,
	0x53, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x36,
	0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x36, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2f,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x4e, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x65, 0x53, 0x79, 0x73,
	0x6c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x52, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x46, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x6f, 0x6d, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x42, 0x6f,
	0x6d, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd2, 0x02, 0x0a, 0x0c, 0x53, 0x4e, 0x4d, 0x50, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x2f, 0x0a, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x3a, 0x0a,
	0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x35, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2d, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x4e, 0x4d, 0x50, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12,
	0x39, 0x0a, 0x09, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x22, 0x9d, 0x04, 0x0a, 0x08, 0x53,
	0x4e, 0x4d, 0x50, 0x41, 0x75, 0x74, 0x68, 0x12, 0x3a, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a,
	0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x4e, 0x4d, 0x50, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x5a, 0x0a, 0x17, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x4e, 0x4d, 0x50,
	0x41, 0x75, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x16, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x59, 0x0a, 0x19, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x18, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x12,
	0x4c, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x4e, 0x4d, 0x50,
	0x50, 0x72, 0x69, 0x76, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x0f, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x4b, 0x0a,
	0x12, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72,
	0x61, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x50, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x22, 0xa6, 0x04, 0x0a, 0x0b, 0x43,
	0x75, 0x65, 0x53, 0x4e, 0x4d, 0x50, 0x41, 0x75, 0x74, 0x68, 0x12, 0x3a, 0x0a, 0x09, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x49, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x4e, 0x4d, 0x50, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0d, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x5d, 0x0a, 0x17, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x75, 0x65, 0x53, 0x4e, 0x4d, 0x50, 0x41, 0x75, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x52, 0x16, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x59, 0x0a, 0x19, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x73,
	0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x18, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x70,
	0x68, 0x72, 0x61, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x75, 0x65, 0x53, 0x4e, 0x4d, 0x50, 0x50, 0x72, 0x69, 0x76, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x4b, 0x0a, 0x12, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x11, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x50, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72,
	0x61, 0x73, 0x65, 0x22, 0xcb, 0x02, 0x0a, 0x0f, 0x43, 0x75, 0x65, 0x53, 0x4e, 0x4d, 0x50, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x2f, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x3a,
	0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x35, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x30, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x75, 0x65, 0x53, 0x4e, 0x4d, 0x50, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61,
	0x75, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x7b, 0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x67, 0x72, 0x69, 0x64, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x22, 0x7e,
	0x0a, 0x13, 0x43, 0x75, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x67, 0x72, 0x69, 0x64, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x22, 0x8b,
	0x01, 0x0a, 0x0c, 0x5a, 0x6f, 0x6f, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x2e, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x4b, 0x0a, 0x12, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xb4, 0x01, 0x0a,
	0x12, 0x49, 0x6e, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x47, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x55, 0x0a, 0x0b,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x41, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x34, 0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x52, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x36, 0x0a, 0x05, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x2d, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xfd,
	0x01, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x73,
	0x5f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x65, 0x6e, 0x64, 0x73, 0x54, 0x6f,
	0x12, 0x3f, 0x0a, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x52, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x12, 0x43, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x5f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xcd,
	0x02, 0x0a, 0x07, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x0a, 0x73, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x2d, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x34,
	0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x61, 0x67, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x66, 0x54, 0x61, 0x67, 0x73, 0x12, 0x2e,
	0x0a, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x22, 0xb3,
	0x01, 0x0a, 0x0f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x12, 0x44, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x5a, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xe8, 0x07, 0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x3b,
	0x0a, 0x07, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x52, 0x07, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x35, 0x0a, 0x05, 0x73,
	0x6c, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6c, 0x61,
	0x63, 0x6b, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x05, 0x73, 0x6c, 0x61,
	0x63, 0x6b, 0x12, 0x3e, 0x0a, 0x08, 0x6f, 0x70, 0x73, 0x67, 0x65, 0x6e, 0x69, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x73, 0x67, 0x65, 0x6e, 0x69, 0x65, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x08, 0x6f, 0x70, 0x73, 0x67, 0x65, 0x6e,
	0x69, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x70, 0x75, 0x73, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x08, 0x70, 0x75, 0x73, 0x68, 0x6f, 0x76,
	0x65, 0x72, 0x12, 0x41, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x72, 0x64, 0x75, 0x74, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x72, 0x64, 0x75, 0x74,
	0x79, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x72, 0x64, 0x75, 0x74, 0x79, 0x12, 0x41, 0x0a, 0x09, 0x76, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x6f,
	0x70, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x63, 0x74, 0x6f,
	0x72, 0x4f, 0x70, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x09, 0x76,
	0x69, 0x63, 0x74, 0x6f, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x3a, 0x0a, 0x05, 0x67, 0x63, 0x68, 0x61,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x05, 0x67,
	0x63, 0x68, 0x61, 0x74, 0x12, 0x3b, 0x0a, 0x07, 0x6d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x07, 0x6d, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x73, 0x12, 0x3e, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x67, 0x72, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x67, 0x72, 0x69, 0x64, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x67, 0x72, 0x69,
	0x64, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x52, 0x06, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x12, 0x32, 0x0a, 0x04, 0x73,
	0x6e, 0x6d, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x4e, 0x4d, 0x50,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x04, 0x73, 0x6e, 0x6d, 0x70, 0x12,
	0x42, 0x0a, 0x0a, 0x63, 0x75, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x65, 0x53, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x09, 0x63, 0x75, 0x65, 0x53, 0x79, 0x73,
	0x6c, 0x6f, 0x67, 0x12, 0x3c, 0x0a, 0x08, 0x63, 0x75, 0x65, 0x5f, 0x73, 0x6e, 0x6d, 0x70, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x65, 0x53, 0x6e, 0x6d, 0x70, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x07, 0x63, 0x75, 0x65, 0x53, 0x6e, 0x6d,
	0x70, 0x12, 0x48, 0x0a, 0x0c, 0x63, 0x75, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x67, 0x72, 0x69,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x65, 0x53, 0x65, 0x6e,
	0x64, 0x67, 0x72, 0x69, 0x64, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x0b,
	0x63, 0x75, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x67, 0x72, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x04, 0x7a,
	0x6f, 0x6f, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x5a, 0x6f, 0x6f, 0x6d,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x04, 0x7a, 0x6f, 0x6f, 0x6d, 0x22,
	0x48, 0x0a, 0x0e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x36, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x4c, 0x0a, 0x10, 0x57, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x38, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x48, 0x0a, 0x0e, 0x53, 0x6c, 0x61, 0x63, 0x6b,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6c, 0x61, 0x63,
	0x6b, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x22, 0x4e, 0x0a, 0x11, 0x4f, 0x70, 0x73, 0x67, 0x65, 0x6e, 0x69, 0x65, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x73, 0x67, 0x65, 0x6e, 0x69,
	0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x22, 0x4e, 0x0a, 0x11, 0x50, 0x75, 0x73, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x6f, 0x76, 0x65,
	0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x22, 0x50, 0x0a, 0x12, 0x50, 0x61, 0x67, 0x65, 0x72, 0x64, 0x75, 0x74, 0x79, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x72, 0x64,
	0x75, 0x74, 0x79, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x22, 0x50, 0x0a, 0x12, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x73,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x63, 0x74,
	0x6f, 0x72, 0x4f, 0x70, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x52, 0x0a, 0x13, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x4c, 0x0a, 0x10, 0x4d, 0x73, 0x54,
	0x65, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x38, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x73, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x4e, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x67,
	0x72, 0x69, 0x64, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x6e, 0x64, 0x67, 0x72, 0x69, 0x64, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x54, 0x0a, 0x14, 0x43, 0x75, 0x65, 0x53, 0x65,
	0x6e, 0x64, 0x67, 0x72, 0x69, 0x64, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x3c, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x75, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x67, 0x72, 0x69, 0x64, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x4a, 0x0a,
	0x0f, 0x53, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x12, 0x37, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x50, 0x0a, 0x12, 0x43, 0x75, 0x65,
	0x53, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x3a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x75, 0x65, 0x53, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x46, 0x0a, 0x0d, 0x53,
	0x4e, 0x4d, 0x50, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x4e, 0x4d, 0x50, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x22, 0x4c, 0x0a, 0x10, 0x43, 0x75, 0x65, 0x53, 0x6e, 0x6d, 0x70, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x65, 0x53, 0x4e, 0x4d,
	0x50, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x22, 0x46, 0x0a, 0x0d, 0x5a, 0x6f, 0x6f, 0x6d, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x35, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x5a, 0x6f, 0x6f, 0x6d, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x7e, 0x0a, 0x0d, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x02, 0x74,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x74, 0x6f, 0x22, 0xc6, 0x02, 0x0a, 0x0f, 0x57, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3f, 0x0a,
	0x0d, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x12, 0x2e,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x42,
	0x0a, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x22, 0xe1, 0x01, 0x0a, 0x0d, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48,
	0x74, 0x74, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0c, 0x68, 0x74, 0x74,
	0x70, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x11, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x10, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22, 0xe7, 0x01, 0x0a, 0x10, 0x4f, 0x70, 0x73, 0x67, 0x65,
	0x6e, 0x69, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c,
	0x73, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x0d,
	0x68, 0x74, 0x74, 0x70, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x12, 0x4e, 0x0a, 0x11, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x6f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70,
	0x73, 0x67, 0x65, 0x6e, 0x69, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x10,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x22, 0x84, 0x02, 0x0a, 0x10, 0x50, 0x75, 0x73, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x4b, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x6f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74,
	0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22, 0xa8, 0x02, 0x0a, 0x11, 0x50, 0x61, 0x67, 0x65,
	0x72, 0x64, 0x75, 0x74, 0x79, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3f, 0x0a,
	0x0d, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x12, 0x3d,
	0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x42, 0x0a,
	0x0d, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x12, 0x4f, 0x0a, 0x11, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x72, 0x64, 0x75, 0x74, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x10, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x22, 0xa8, 0x02, 0x0a, 0x11, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x73,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x0b, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x0d, 0x68, 0x74, 0x74, 0x70,
	0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0c,
	0x68, 0x74, 0x74, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x4f, 0x0a, 0x11,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72,
	0x6f, 0x70, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x10, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22, 0xeb, 0x01,
	0x0a, 0x12, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x74, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48,
	0x74, 0x74, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0c, 0x68, 0x74, 0x74,
	0x70, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x11, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x10, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22, 0xe5, 0x01, 0x0a, 0x0f,
	0x4d, 0x73, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x3f, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64,
	0x12, 0x42, 0x0a, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x11, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x73, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x10, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x22, 0xc5, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x67, 0x72, 0x69, 0x64,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x02, 0x74, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x42, 0x0a, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x48, 0x74, 0x74, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0c, 0x68,
	0x74, 0x74, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22, 0xc8, 0x01, 0x0a, 0x13,
	0x43, 0x75, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x67, 0x72, 0x69, 0x64, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02,
	0x74, 0x6f, 0x12, 0x42, 0x0a, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74, 0x70,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x0e, 0x53, 0x79, 0x73, 0x6c, 0x6f,
	0x67, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x12, 0x4c, 0x0a, 0x11, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x10, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x11, 0x43, 0x75, 0x65,
	0x53, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3f,
	0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x12,
	0x4f, 0x0a, 0x11, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x65,
	0x53, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x10,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x22, 0x9b, 0x01, 0x0a, 0x0c, 0x53, 0x4e, 0x4d, 0x50, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x64, 0x12, 0x4a, 0x0a, 0x11, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x6f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x4e, 0x4d, 0x50, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x10, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22, 0xa1,
	0x01, 0x0a, 0x0f, 0x43, 0x75, 0x65, 0x53, 0x4e, 0x4d, 0x50, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x64, 0x12, 0x4d, 0x0a, 0x11, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x75, 0x65, 0x53, 0x4e, 0x4d, 0x50, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x10, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x22, 0xdf, 0x01, 0x0a, 0x0c, 0x5a, 0x6f, 0x6f, 0x6d, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x6f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74,
	0x74, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0c, 0x68, 0x74, 0x74, 0x70,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x4a, 0x0a, 0x11, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x5a, 0x6f, 0x6f, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x10, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x22, 0x57, 0x0a, 0x0b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x04, 0x80, 0x8e, 0x19, 0x01, 0x22, 0x86, 0x01,
	0x0a, 0x0e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x2e, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x38, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x3a, 0x0a, 0xfa, 0x8d, 0x19, 0x02,
	0x72, 0x77, 0x90, 0x8e, 0x19, 0x01, 0x22, 0xe0, 0x03, 0x0a, 0x0f, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x08, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x53, 0x0a, 0x16, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x15, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x0c,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x3f, 0x0a, 0x0c,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x0a, 0xfa,
	0x8d, 0x19, 0x02, 0x72, 0x6f, 0x90, 0x8e, 0x19, 0x01, 0x2a, 0x99, 0x02, 0x0a, 0x0f, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a,
	0x1d, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x24, 0x0a, 0x20, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x53, 0x59, 0x4e, 0x54, 0x41, 0x58, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4c, 0x4c, 0x45, 0x47, 0x41,
	0x4c, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x05, 0x12, 0x26, 0x0a, 0x22, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10,
	0x06, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x07, 0x2a, 0xfd, 0x03, 0x0a, 0x11, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x45,
	0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x27, 0x0a, 0x23, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x50, 0x4f, 0x53,
	0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x45, 0x4e, 0x44,
	0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x52, 0x53, 0x48, 0x41, 0x4c, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x2c, 0x0a, 0x28, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e,
	0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c,
	0x41, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x2a, 0x0a, 0x26, 0x45,
	0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x4e, 0x44, 0x50, 0x4f,
	0x49, 0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x4d, 0x54, 0x50, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x28, 0x0a, 0x24, 0x45,
	0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x07, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e,
	0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x4f, 0x55, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x08, 0x12, 0x28, 0x0a, 0x24,
	0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x09, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49,
	0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c,
	0x45, 0x52, 0x54, 0x5f, 0x43, 0x41, 0x50, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0a, 0x12,
	0x24, 0x0a, 0x20, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x0b, 0x2a, 0x8d, 0x01, 0x0a, 0x16, 0x43, 0x75, 0x65, 0x53, 0x79, 0x73,
	0x6c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x29, 0x0a, 0x25, 0x43, 0x55, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x43,
	0x55, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x50, 0x4c, 0x41, 0x49, 0x4e, 0x10, 0x01,
	0x12, 0x23, 0x0a, 0x1f, 0x43, 0x55, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x49, 0x44,
	0x4d, 0x45, 0x46, 0x10, 0x02, 0x2a, 0xaa, 0x01, 0x0a, 0x11, 0x53, 0x4e, 0x4d, 0x50, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x1f, 0x53,
	0x4e, 0x4d, 0x50, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x45, 0x56,
	0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x27, 0x0a, 0x23, 0x53, 0x4e, 0x4d, 0x50, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f,
	0x4e, 0x4f, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x4e, 0x4d,
	0x50, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4e, 0x4f, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x10, 0x02, 0x12,
	0x21, 0x0a, 0x1d, 0x53, 0x4e, 0x4d, 0x50, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x50, 0x52, 0x49, 0x56,
	0x10, 0x03, 0x2a, 0xee, 0x01, 0x0a, 0x10, 0x53, 0x4e, 0x4d, 0x50, 0x41, 0x75, 0x74, 0x68, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x4e, 0x4d, 0x50, 0x5f,
	0x41, 0x55, 0x54, 0x48, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x53,
	0x4e, 0x4d, 0x50, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f,
	0x4c, 0x5f, 0x4d, 0x44, 0x35, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x4e, 0x4d, 0x50, 0x5f,
	0x41, 0x55, 0x54, 0x48, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x53, 0x48,
	0x41, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x4e, 0x4d, 0x50, 0x5f, 0x41, 0x55, 0x54, 0x48,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x32, 0x32,
	0x34, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x4e, 0x4d, 0x50, 0x5f, 0x41, 0x55, 0x54, 0x48,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x32, 0x35,
	0x36, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x4e, 0x4d, 0x50, 0x5f, 0x41, 0x55, 0x54, 0x48,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x33, 0x38,
	0x34, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x4e, 0x4d, 0x50, 0x5f, 0x41, 0x55, 0x54, 0x48,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x35, 0x31,
	0x32, 0x10, 0x06, 0x2a, 0xf0, 0x01, 0x0a, 0x10, 0x53, 0x4e, 0x4d, 0x50, 0x50, 0x72, 0x69, 0x76,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x4e, 0x4d, 0x50,
	0x5f, 0x50, 0x52, 0x49, 0x56, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16,
	0x53, 0x4e, 0x4d, 0x50, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4f, 0x4c, 0x5f, 0x44, 0x45, 0x53, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x4e, 0x4d, 0x50,
	0x5f, 0x50, 0x52, 0x49, 0x56, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x41,
	0x45, 0x53, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x4e, 0x4d, 0x50, 0x5f, 0x50, 0x52, 0x49,
	0x56, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31,
	0x39, 0x32, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x4e, 0x4d, 0x50, 0x5f, 0x50, 0x52, 0x49,
	0x56, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32,
	0x35, 0x36, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x4e, 0x4d, 0x50, 0x5f, 0x50, 0x52, 0x49,
	0x56, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31,
	0x39, 0x32, 0x43, 0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x4e, 0x4d, 0x50, 0x5f, 0x50, 0x52,
	0x49, 0x56, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x41, 0x45, 0x53, 0x5f,
	0x32, 0x35, 0x36, 0x43, 0x10, 0x06, 0x2a, 0x7d, 0x0a, 0x13, 0x43, 0x75, 0x65, 0x53, 0x4e, 0x4d,
	0x50, 0x41, 0x75, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x26, 0x0a,
	0x22, 0x43, 0x55, 0x45, 0x5f, 0x53, 0x4e, 0x4d, 0x50, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x55, 0x45, 0x5f, 0x53, 0x4e, 0x4d,
	0x50, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f,
	0x4d, 0x44, 0x35, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x55, 0x45, 0x5f, 0x53, 0x4e, 0x4d,
	0x50, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f,
	0x53, 0x48, 0x41, 0x10, 0x02, 0x2a, 0x7d, 0x0a, 0x13, 0x43, 0x75, 0x65, 0x53, 0x4e, 0x4d, 0x50,
	0x50, 0x72, 0x69, 0x76, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x26, 0x0a, 0x22,
	0x43, 0x55, 0x45, 0x5f, 0x53, 0x4e, 0x4d, 0x50, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x55, 0x45, 0x5f, 0x53, 0x4e, 0x4d, 0x50,
	0x5f, 0x50, 0x52, 0x49, 0x56, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x44,
	0x45, 0x53, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x55, 0x45, 0x5f, 0x53, 0x4e, 0x4d, 0x50,
	0x5f, 0x50, 0x52, 0x49, 0x56, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x41,
	0x45, 0x53, 0x10, 0x02, 0x2a, 0xb9, 0x05, 0x0a, 0x0c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x48, 0x54, 0x4d, 0x4c,
	0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x02,
	0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10,
	0x03, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x52, 0x44, 0x55, 0x54, 0x59,
	0x5f, 0x53, 0x55, 0x4d, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x05, 0x12, 0x28, 0x0a, 0x24, 0x54, 0x45,
	0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x49, 0x43, 0x54,
	0x4f, 0x52, 0x4f, 0x50, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x10, 0x06, 0x12, 0x29, 0x0a, 0x25, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x49, 0x43, 0x54, 0x4f, 0x52, 0x4f, 0x50, 0x53, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x07, 0x12,
	0x25, 0x0a, 0x21, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x4d, 0x45, 0x53,
	0x53, 0x41, 0x47, 0x45, 0x10, 0x08, 0x12, 0x29, 0x0a, 0x25, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41,
	0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x53, 0x4f, 0x46,
	0x54, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x53, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10,
	0x09, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54,
	0x10, 0x0a, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x10, 0x0b, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x50, 0x53, 0x47, 0x45, 0x4e, 0x49, 0x45, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x0c, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x45, 0x4d, 0x50,
	0x4c, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x5a, 0x4f, 0x4f, 0x4d, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x0d, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x45, 0x4d, 0x50,
	0x4c, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f,
	0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x48, 0x54, 0x4d, 0x4c, 0x10, 0x0e, 0x12, 0x23, 0x0a,
	0x1f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45,
	0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x54, 0x45, 0x58, 0x54,
	0x10, 0x0f, 0x12, 0x26, 0x0a, 0x22, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45,
	0x5f, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x10, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x45,
	0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x42, 0x48,
	0x4f, 0x4f, 0x4b, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x11, 0x12, 0x22, 0x0a, 0x1e,
	0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45,
	0x42, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x10, 0x12,
	0x2a, 0x7f, 0x0a, 0x0e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x4f,
	0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f,
	0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x01, 0x12, 0x18, 0x0a,
	0x14, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54,
	0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x45, 0x4d, 0x50, 0x4c,
	0x41, 0x54, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x48, 0x54, 0x4d, 0x4c, 0x10,
	0x03, 0x42, 0x28, 0x5a, 0x26, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x2e, 0x76, 0x31, 0x3b, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_arista_alert_v1_alert_proto_rawDescOnce sync.Once
	file_arista_alert_v1_alert_proto_rawDescData = file_arista_alert_v1_alert_proto_rawDesc
)

func file_arista_alert_v1_alert_proto_rawDescGZIP() []byte {
	file_arista_alert_v1_alert_proto_rawDescOnce.Do(func() {
		file_arista_alert_v1_alert_proto_rawDescData = protoimpl.X.CompressGZIP(file_arista_alert_v1_alert_proto_rawDescData)
	})
	return file_arista_alert_v1_alert_proto_rawDescData
}

var file_arista_alert_v1_alert_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_arista_alert_v1_alert_proto_msgTypes = make([]protoimpl.MessageInfo, 75)
var file_arista_alert_v1_alert_proto_goTypes = []interface{}{
	(ConfigErrorType)(0),           // 0: arista.alert.v1.ConfigErrorType
	(EndpointErrorType)(0),         // 1: arista.alert.v1.EndpointErrorType
	(CueSyslogMessageFormat)(0),    // 2: arista.alert.v1.CueSyslogMessageFormat
	(SNMPSecurityLevel)(0),         // 3: arista.alert.v1.SNMPSecurityLevel
	(SNMPAuthProtocol)(0),          // 4: arista.alert.v1.SNMPAuthProtocol
	(SNMPPrivProtocol)(0),          // 5: arista.alert.v1.SNMPPrivProtocol
	(CueSNMPAuthProtocol)(0),       // 6: arista.alert.v1.CueSNMPAuthProtocol
	(CueSNMPPrivProtocol)(0),       // 7: arista.alert.v1.CueSNMPPrivProtocol
	(TemplateType)(0),              // 8: arista.alert.v1.TemplateType
	(TemplateOutput)(0),            // 9: arista.alert.v1.TemplateOutput
	(*AlertConfig)(nil),            // 10: arista.alert.v1.AlertConfig
	(*Alert)(nil),                  // 11: arista.alert.v1.Alert
	(*ConfigErrors)(nil),           // 12: arista.alert.v1.ConfigErrors
	(*ConfigError)(nil),            // 13: arista.alert.v1.ConfigError
	(*EndpointErrors)(nil),         // 14: arista.alert.v1.EndpointErrors
	(*EndpointError)(nil),          // 15: arista.alert.v1.EndpointError
	(*Settings)(nil),               // 16: arista.alert.v1.Settings
	(*EmailSettings)(nil),          // 17: arista.alert.v1.EmailSettings
	(*AzureOAuth)(nil),             // 18: arista.alert.v1.AzureOAuth
	(*HttpSettings)(nil),           // 19: arista.alert.v1.HttpSettings
	(*HttpHeaders)(nil),            // 20: arista.alert.v1.HttpHeaders
	(*HeaderValues)(nil),           // 21: arista.alert.v1.HeaderValues
	(*SlackSettings)(nil),          // 22: arista.alert.v1.SlackSettings
	(*VictoropsSettings)(nil),      // 23: arista.alert.v1.VictoropsSettings
	(*PagerdutySettings)(nil),      // 24: arista.alert.v1.PagerdutySettings
	(*OpsgenieSettings)(nil),       // 25: arista.alert.v1.OpsgenieSettings
	(*GoogleChatSettings)(nil),     // 26: arista.alert.v1.GoogleChatSettings
	(*MsTeamsSettings)(nil),        // 27: arista.alert.v1.MsTeamsSettings
	(*SyslogSettings)(nil),         // 28: arista.alert.v1.SyslogSettings
	(*Priorities)(nil),             // 29: arista.alert.v1.Priorities
	(*CueData)(nil),                // 30: arista.alert.v1.CueData
	(*CueSyslogSettings)(nil),      // 31: arista.alert.v1.CueSyslogSettings
	(*SNMPSettings)(nil),           // 32: arista.alert.v1.SNMPSettings
	(*SNMPAuth)(nil),               // 33: arista.alert.v1.SNMPAuth
	(*CueSNMPAuth)(nil),            // 34: arista.alert.v1.CueSNMPAuth
	(*CueSNMPSettings)(nil),        // 35: arista.alert.v1.CueSNMPSettings
	(*SendgridSettings)(nil),       // 36: arista.alert.v1.SendgridSettings
	(*CueSendgridSettings)(nil),    // 37: arista.alert.v1.CueSendgridSettings
	(*ZoomSettings)(nil),           // 38: arista.alert.v1.ZoomSettings
	(*InhibitionSettings)(nil),     // 39: arista.alert.v1.InhibitionSettings
	(*EventList)(nil),              // 40: arista.alert.v1.EventList
	(*Rules)(nil),                  // 41: arista.alert.v1.Rules
	(*Rule)(nil),                   // 42: arista.alert.v1.Rule
	(*Matches)(nil),                // 43: arista.alert.v1.Matches
	(*BroadcastGroups)(nil),        // 44: arista.alert.v1.BroadcastGroups
	(*BroadcastGroup)(nil),         // 45: arista.alert.v1.BroadcastGroup
	(*EmailEndpoints)(nil),         // 46: arista.alert.v1.EmailEndpoints
	(*WebhookEndpoints)(nil),       // 47: arista.alert.v1.WebhookEndpoints
	(*SlackEndpoints)(nil),         // 48: arista.alert.v1.SlackEndpoints
	(*OpsgenieEndpoints)(nil),      // 49: arista.alert.v1.OpsgenieEndpoints
	(*PushoverEndpoints)(nil),      // 50: arista.alert.v1.PushoverEndpoints
	(*PagerdutyEndpoints)(nil),     // 51: arista.alert.v1.PagerdutyEndpoints
	(*VictorOpsEndpoints)(nil),     // 52: arista.alert.v1.VictorOpsEndpoints
	(*GoogleChatEndpoints)(nil),    // 53: arista.alert.v1.GoogleChatEndpoints
	(*MsTeamsEndpoints)(nil),       // 54: arista.alert.v1.MsTeamsEndpoints
	(*SendgridEndpoints)(nil),      // 55: arista.alert.v1.SendgridEndpoints
	(*CueSendgridEndpoints)(nil),   // 56: arista.alert.v1.CueSendgridEndpoints
	(*SyslogEndpoints)(nil),        // 57: arista.alert.v1.SyslogEndpoints
	(*CueSyslogEndpoints)(nil),     // 58: arista.alert.v1.CueSyslogEndpoints
	(*SNMPEndpoints)(nil),          // 59: arista.alert.v1.SNMPEndpoints
	(*CueSnmpEndpoints)(nil),       // 60: arista.alert.v1.CueSnmpEndpoints
	(*ZoomEndpoints)(nil),          // 61: arista.alert.v1.ZoomEndpoints
	(*EmailEndpoint)(nil),          // 62: arista.alert.v1.EmailEndpoint
	(*WebhookEndpoint)(nil),        // 63: arista.alert.v1.WebhookEndpoint
	(*SlackEndpoint)(nil),          // 64: arista.alert.v1.SlackEndpoint
	(*OpsgenieEndpoint)(nil),       // 65: arista.alert.v1.OpsgenieEndpoint
	(*PushoverEndpoint)(nil),       // 66: arista.alert.v1.PushoverEndpoint
	(*PagerdutyEndpoint)(nil),      // 67: arista.alert.v1.PagerdutyEndpoint
	(*VictorOpsEndpoint)(nil),      // 68: arista.alert.v1.VictorOpsEndpoint
	(*GoogleChatEndpoint)(nil),     // 69: arista.alert.v1.GoogleChatEndpoint
	(*MsTeamsEndpoint)(nil),        // 70: arista.alert.v1.MsTeamsEndpoint
	(*SendgridEndpoint)(nil),       // 71: arista.alert.v1.SendgridEndpoint
	(*CueSendgridEndpoint)(nil),    // 72: arista.alert.v1.CueSendgridEndpoint
	(*SyslogEndpoint)(nil),         // 73: arista.alert.v1.SyslogEndpoint
	(*CueSyslogEndpoint)(nil),      // 74: arista.alert.v1.CueSyslogEndpoint
	(*SNMPEndpoint)(nil),           // 75: arista.alert.v1.SNMPEndpoint
	(*CueSNMPEndpoint)(nil),        // 76: arista.alert.v1.CueSNMPEndpoint
	(*ZoomEndpoint)(nil),           // 77: arista.alert.v1.ZoomEndpoint
	(*TemplateKey)(nil),            // 78: arista.alert.v1.TemplateKey
	(*TemplateConfig)(nil),         // 79: arista.alert.v1.TemplateConfig
	(*DefaultTemplate)(nil),        // 80: arista.alert.v1.DefaultTemplate
	nil,                            // 81: arista.alert.v1.HttpHeaders.ValuesEntry
	nil,                            // 82: arista.alert.v1.CueData.ValuesEntry
	nil,                            // 83: arista.alert.v1.InhibitionSettings.ValuesEntry
	nil,                            // 84: arista.alert.v1.BroadcastGroups.ValuesEntry
	(*timestamppb.Timestamp)(nil),  // 85: google.protobuf.Timestamp
	(*wrapperspb.StringValue)(nil), // 86: google.protobuf.StringValue
	(*wrapperspb.Int32Value)(nil),  // 87: google.protobuf.Int32Value
	(*wrapperspb.BoolValue)(nil),   // 88: google.protobuf.BoolValue
	(*fmp.RepeatedString)(nil),     // 89: fmp.RepeatedString
}
var file_arista_alert_v1_alert_proto_depIdxs = []int32{
	16,  // 0: arista.alert.v1.AlertConfig.settings:type_name -> arista.alert.v1.Settings
	41,  // 1: arista.alert.v1.AlertConfig.rules:type_name -> arista.alert.v1.Rules
	44,  // 2: arista.alert.v1.AlertConfig.broadcast_groups:type_name -> arista.alert.v1.BroadcastGroups
	12,  // 3: arista.alert.v1.Alert.configuration_errors:type_name -> arista.alert.v1.ConfigErrors
	14,  // 4: arista.alert.v1.Alert.endpoint_errors:type_name -> arista.alert.v1.EndpointErrors
	85,  // 5: arista.alert.v1.Alert.last_modified_at:type_name -> google.protobuf.Timestamp
	86,  // 6: arista.alert.v1.Alert.last_modified_by:type_name -> google.protobuf.StringValue
	13,  // 7: arista.alert.v1.ConfigErrors.values:type_name -> arista.alert.v1.ConfigError
	86,  // 8: arista.alert.v1.ConfigError.path:type_name -> google.protobuf.StringValue
	0,   // 9: arista.alert.v1.ConfigError.error_type:type_name -> arista.alert.v1.ConfigErrorType
	86,  // 10: arista.alert.v1.ConfigError.error:type_name -> google.protobuf.StringValue
	15,  // 11: arista.alert.v1.EndpointErrors.values:type_name -> arista.alert.v1.EndpointError
	86,  // 12: arista.alert.v1.EndpointError.endpoint_type:type_name -> google.protobuf.StringValue
	86,  // 13: arista.alert.v1.EndpointError.broadcast_group_name:type_name -> google.protobuf.StringValue
	87,  // 14: arista.alert.v1.EndpointError.config_index:type_name -> google.protobuf.Int32Value
	1,   // 15: arista.alert.v1.EndpointError.error_type:type_name -> arista.alert.v1.EndpointErrorType
	86,  // 16: arista.alert.v1.EndpointError.error:type_name -> google.protobuf.StringValue
	17,  // 17: arista.alert.v1.Settings.email:type_name -> arista.alert.v1.EmailSettings
	19,  // 18: arista.alert.v1.Settings.http:type_name -> arista.alert.v1.HttpSettings
	22,  // 19: arista.alert.v1.Settings.slack:type_name -> arista.alert.v1.SlackSettings
	23,  // 20: arista.alert.v1.Settings.victorops:type_name -> arista.alert.v1.VictoropsSettings
	24,  // 21: arista.alert.v1.Settings.pagerduty:type_name -> arista.alert.v1.PagerdutySettings
	25,  // 22: arista.alert.v1.Settings.opsgenie:type_name -> arista.alert.v1.OpsgenieSettings
	26,  // 23: arista.alert.v1.Settings.gchat:type_name -> arista.alert.v1.GoogleChatSettings
	27,  // 24: arista.alert.v1.Settings.msteams:type_name -> arista.alert.v1.MsTeamsSettings
	39,  // 25: arista.alert.v1.Settings.inhibition:type_name -> arista.alert.v1.InhibitionSettings
	86,  // 26: arista.alert.v1.Settings.base_url:type_name -> google.protobuf.StringValue
	86,  // 27: arista.alert.v1.Settings.timezone:type_name -> google.protobuf.StringValue
	28,  // 28: arista.alert.v1.Settings.syslog:type_name -> arista.alert.v1.SyslogSettings
	32,  // 29: arista.alert.v1.Settings.snmp:type_name -> arista.alert.v1.SNMPSettings
	36,  // 30: arista.alert.v1.Settings.sendgrid:type_name -> arista.alert.v1.SendgridSettings
	31,  // 31: arista.alert.v1.Settings.cue_syslog:type_name -> arista.alert.v1.CueSyslogSettings
	35,  // 32: arista.alert.v1.Settings.cue_snmp:type_name -> arista.alert.v1.CueSNMPSettings
	37,  // 33: arista.alert.v1.Settings.cue_sendgrid:type_name -> arista.alert.v1.CueSendgridSettings
	88,  // 34: arista.alert.v1.Settings.hide_tags:type_name -> google.protobuf.BoolValue
	38,  // 35: arista.alert.v1.Settings.zoom:type_name -> arista.alert.v1.ZoomSettings
	86,  // 36: arista.alert.v1.EmailSettings.from:type_name -> google.protobuf.StringValue
	86,  // 37: arista.alert.v1.EmailSettings.smarthost:type_name -> google.protobuf.StringValue
	86,  // 38: arista.alert.v1.EmailSettings.auth_username:type_name -> google.protobuf.StringValue
	86,  // 39: arista.alert.v1.EmailSettings.auth_password:type_name -> google.protobuf.StringValue
	88,  // 40: arista.alert.v1.EmailSettings.require_tls:type_name -> google.protobuf.BoolValue
	88,  // 41: arista.alert.v1.EmailSettings.single_alert_per_email:type_name -> google.protobuf.BoolValue
	18,  // 42: arista.alert.v1.EmailSettings.azure_o_auth:type_name -> arista.alert.v1.AzureOAuth
	86,  // 43: arista.alert.v1.AzureOAuth.client_id:type_name -> google.protobuf.StringValue
	86,  // 44: arista.alert.v1.AzureOAuth.tenant_id:type_name -> google.protobuf.StringValue
	86,  // 45: arista.alert.v1.AzureOAuth.client_secret:type_name -> google.protobuf.StringValue
	86,  // 46: arista.alert.v1.AzureOAuth.auth_uri:type_name -> google.protobuf.StringValue
	86,  // 47: arista.alert.v1.HttpSettings.username:type_name -> google.protobuf.StringValue
	86,  // 48: arista.alert.v1.HttpSettings.password:type_name -> google.protobuf.StringValue
	86,  // 49: arista.alert.v1.HttpSettings.proxy_url:type_name -> google.protobuf.StringValue
	20,  // 50: arista.alert.v1.HttpSettings.custom_headers:type_name -> arista.alert.v1.HttpHeaders
	81,  // 51: arista.alert.v1.HttpHeaders.values:type_name -> arista.alert.v1.HttpHeaders.ValuesEntry
	86,  // 52: arista.alert.v1.SlackSettings.url:type_name -> google.protobuf.StringValue
	86,  // 53: arista.alert.v1.VictoropsSettings.key:type_name -> google.protobuf.StringValue
	86,  // 54: arista.alert.v1.VictoropsSettings.url:type_name -> google.protobuf.StringValue
	86,  // 55: arista.alert.v1.PagerdutySettings.url:type_name -> google.protobuf.StringValue
	86,  // 56: arista.alert.v1.OpsgenieSettings.key:type_name -> google.protobuf.StringValue
	86,  // 57: arista.alert.v1.OpsgenieSettings.url:type_name -> google.protobuf.StringValue
	86,  // 58: arista.alert.v1.GoogleChatSettings.url:type_name -> google.protobuf.StringValue
	86,  // 59: arista.alert.v1.MsTeamsSettings.url:type_name -> google.protobuf.StringValue
	86,  // 60: arista.alert.v1.SyslogSettings.network:type_name -> google.protobuf.StringValue
	86,  // 61: arista.alert.v1.SyslogSettings.address:type_name -> google.protobuf.StringValue
	87,  // 62: arista.alert.v1.SyslogSettings.facility:type_name -> google.protobuf.Int32Value
	29,  // 63: arista.alert.v1.SyslogSettings.priorities:type_name -> arista.alert.v1.Priorities
	86,  // 64: arista.alert.v1.SyslogSettings.tag:type_name -> google.protobuf.StringValue
	88,  // 65: arista.alert.v1.SyslogSettings.per_device:type_name -> google.protobuf.BoolValue
	88,  // 66: arista.alert.v1.SyslogSettings.use_tls:type_name -> google.protobuf.BoolValue
	87,  // 67: arista.alert.v1.Priorities.critical:type_name -> google.protobuf.Int32Value
	87,  // 68: arista.alert.v1.Priorities.error:type_name -> google.protobuf.Int32Value
	87,  // 69: arista.alert.v1.Priorities.warn:type_name -> google.protobuf.Int32Value
	87,  // 70: arista.alert.v1.Priorities.info:type_name -> google.protobuf.Int32Value
	82,  // 71: arista.alert.v1.CueData.values:type_name -> arista.alert.v1.CueData.ValuesEntry
	86,  // 72: arista.alert.v1.CueSyslogSettings.network:type_name -> google.protobuf.StringValue
	86,  // 73: arista.alert.v1.CueSyslogSettings.address:type_name -> google.protobuf.StringValue
	87,  // 74: arista.alert.v1.CueSyslogSettings.port:type_name -> google.protobuf.Int32Value
	2,   // 75: arista.alert.v1.CueSyslogSettings.message_format:type_name -> arista.alert.v1.CueSyslogMessageFormat
	88,  // 76: arista.alert.v1.CueSyslogSettings.append_bom_header:type_name -> google.protobuf.BoolValue
	30,  // 77: arista.alert.v1.CueSyslogSettings.data:type_name -> arista.alert.v1.CueData
	86,  // 78: arista.alert.v1.SNMPSettings.target:type_name -> google.protobuf.StringValue
	87,  // 79: arista.alert.v1.SNMPSettings.port:type_name -> google.protobuf.Int32Value
	86,  // 80: arista.alert.v1.SNMPSettings.transport:type_name -> google.protobuf.StringValue
	87,  // 81: arista.alert.v1.SNMPSettings.version:type_name -> google.protobuf.Int32Value
	33,  // 82: arista.alert.v1.SNMPSettings.auth:type_name -> arista.alert.v1.SNMPAuth
	86,  // 83: arista.alert.v1.SNMPSettings.engine_id:type_name -> google.protobuf.StringValue
	86,  // 84: arista.alert.v1.SNMPAuth.community:type_name -> google.protobuf.StringValue
	86,  // 85: arista.alert.v1.SNMPAuth.username:type_name -> google.protobuf.StringValue
	3,   // 86: arista.alert.v1.SNMPAuth.security_level:type_name -> arista.alert.v1.SNMPSecurityLevel
	4,   // 87: arista.alert.v1.SNMPAuth.authentication_protocol:type_name -> arista.alert.v1.SNMPAuthProtocol
	86,  // 88: arista.alert.v1.SNMPAuth.authentication_passphrase:type_name -> google.protobuf.StringValue
	5,   // 89: arista.alert.v1.SNMPAuth.privacy_protocol:type_name -> arista.alert.v1.SNMPPrivProtocol
	86,  // 90: arista.alert.v1.SNMPAuth.privacy_passphrase:type_name -> google.protobuf.StringValue
	86,  // 91: arista.alert.v1.CueSNMPAuth.community:type_name -> google.protobuf.StringValue
	86,  // 92: arista.alert.v1.CueSNMPAuth.username:type_name -> google.protobuf.StringValue
	3,   // 93: arista.alert.v1.CueSNMPAuth.security_level:type_name -> arista.alert.v1.SNMPSecurityLevel
	6,   // 94: arista.alert.v1.CueSNMPAuth.authentication_protocol:type_name -> arista.alert.v1.CueSNMPAuthProtocol
	86,  // 95: arista.alert.v1.CueSNMPAuth.authentication_passphrase:type_name -> google.protobuf.StringValue
	7,   // 96: arista.alert.v1.CueSNMPAuth.privacy_protocol:type_name -> arista.alert.v1.CueSNMPPrivProtocol
	86,  // 97: arista.alert.v1.CueSNMPAuth.privacy_passphrase:type_name -> google.protobuf.StringValue
	86,  // 98: arista.alert.v1.CueSNMPSettings.target:type_name -> google.protobuf.StringValue
	87,  // 99: arista.alert.v1.CueSNMPSettings.port:type_name -> google.protobuf.Int32Value
	86,  // 100: arista.alert.v1.CueSNMPSettings.transport:type_name -> google.protobuf.StringValue
	87,  // 101: arista.alert.v1.CueSNMPSettings.version:type_name -> google.protobuf.Int32Value
	34,  // 102: arista.alert.v1.CueSNMPSettings.auth:type_name -> arista.alert.v1.CueSNMPAuth
	30,  // 103: arista.alert.v1.CueSNMPSettings.data:type_name -> arista.alert.v1.CueData
	86,  // 104: arista.alert.v1.SendgridSettings.api_key:type_name -> google.protobuf.StringValue
	86,  // 105: arista.alert.v1.SendgridSettings.from:type_name -> google.protobuf.StringValue
	86,  // 106: arista.alert.v1.CueSendgridSettings.api_key:type_name -> google.protobuf.StringValue
	86,  // 107: arista.alert.v1.CueSendgridSettings.from:type_name -> google.protobuf.StringValue
	86,  // 108: arista.alert.v1.ZoomSettings.url:type_name -> google.protobuf.StringValue
	86,  // 109: arista.alert.v1.ZoomSettings.verification_token:type_name -> google.protobuf.StringValue
	83,  // 110: arista.alert.v1.InhibitionSettings.values:type_name -> arista.alert.v1.InhibitionSettings.ValuesEntry
	89,  // 111: arista.alert.v1.EventList.event_types:type_name -> fmp.RepeatedString
	42,  // 112: arista.alert.v1.Rules.values:type_name -> arista.alert.v1.Rule
	86,  // 113: arista.alert.v1.Rule.sends_to:type_name -> google.protobuf.StringValue
	43,  // 114: arista.alert.v1.Rule.match_criteria:type_name -> arista.alert.v1.Matches
	88,  // 115: arista.alert.v1.Rule.continue_checks:type_name -> google.protobuf.BoolValue
	86,  // 116: arista.alert.v1.Rule.comment:type_name -> google.protobuf.StringValue
	89,  // 117: arista.alert.v1.Matches.severities:type_name -> fmp.RepeatedString
	89,  // 118: arista.alert.v1.Matches.devices:type_name -> fmp.RepeatedString
	89,  // 119: arista.alert.v1.Matches.event_types:type_name -> fmp.RepeatedString
	86,  // 120: arista.alert.v1.Matches.device_tags:type_name -> google.protobuf.StringValue
	86,  // 121: arista.alert.v1.Matches.intf_tags:type_name -> google.protobuf.StringValue
	89,  // 122: arista.alert.v1.Matches.rule_ids:type_name -> fmp.RepeatedString
	84,  // 123: arista.alert.v1.BroadcastGroups.values:type_name -> arista.alert.v1.BroadcastGroups.ValuesEntry
	46,  // 124: arista.alert.v1.BroadcastGroup.email:type_name -> arista.alert.v1.EmailEndpoints
	47,  // 125: arista.alert.v1.BroadcastGroup.webhook:type_name -> arista.alert.v1.WebhookEndpoints
	48,  // 126: arista.alert.v1.BroadcastGroup.slack:type_name -> arista.alert.v1.SlackEndpoints
	49,  // 127: arista.alert.v1.BroadcastGroup.opsgenie:type_name -> arista.alert.v1.OpsgenieEndpoints
	50,  // 128: arista.alert.v1.BroadcastGroup.pushover:type_name -> arista.alert.v1.PushoverEndpoints
	51,  // 129: arista.alert.v1.BroadcastGroup.pagerduty:type_name -> arista.alert.v1.PagerdutyEndpoints
	52,  // 130: arista.alert.v1.BroadcastGroup.victorops:type_name -> arista.alert.v1.VictorOpsEndpoints
	53,  // 131: arista.alert.v1.BroadcastGroup.gchat:type_name -> arista.alert.v1.GoogleChatEndpoints
	54,  // 132: arista.alert.v1.BroadcastGroup.msteams:type_name -> arista.alert.v1.MsTeamsEndpoints
	55,  // 133: arista.alert.v1.BroadcastGroup.sendgrid:type_name -> arista.alert.v1.SendgridEndpoints
	57,  // 134: arista.alert.v1.BroadcastGroup.syslog:type_name -> arista.alert.v1.SyslogEndpoints
	59,  // 135: arista.alert.v1.BroadcastGroup.snmp:type_name -> arista.alert.v1.SNMPEndpoints
	58,  // 136: arista.alert.v1.BroadcastGroup.cue_syslog:type_name -> arista.alert.v1.CueSyslogEndpoints
	60,  // 137: arista.alert.v1.BroadcastGroup.cue_snmp:type_name -> arista.alert.v1.CueSnmpEndpoints
	56,  // 138: arista.alert.v1.BroadcastGroup.cue_sendgrid:type_name -> arista.alert.v1.CueSendgridEndpoints
	61,  // 139: arista.alert.v1.BroadcastGroup.zoom:type_name -> arista.alert.v1.ZoomEndpoints
	62,  // 140: arista.alert.v1.EmailEndpoints.values:type_name -> arista.alert.v1.EmailEndpoint
	63,  // 141: arista.alert.v1.WebhookEndpoints.values:type_name -> arista.alert.v1.WebhookEndpoint
	64,  // 142: arista.alert.v1.SlackEndpoints.values:type_name -> arista.alert.v1.SlackEndpoint
	65,  // 143: arista.alert.v1.OpsgenieEndpoints.values:type_name -> arista.alert.v1.OpsgenieEndpoint
	66,  // 144: arista.alert.v1.PushoverEndpoints.values:type_name -> arista.alert.v1.PushoverEndpoint
	67,  // 145: arista.alert.v1.PagerdutyEndpoints.values:type_name -> arista.alert.v1.PagerdutyEndpoint
	68,  // 146: arista.alert.v1.VictorOpsEndpoints.values:type_name -> arista.alert.v1.VictorOpsEndpoint
	69,  // 147: arista.alert.v1.GoogleChatEndpoints.values:type_name -> arista.alert.v1.GoogleChatEndpoint
	70,  // 148: arista.alert.v1.MsTeamsEndpoints.values:type_name -> arista.alert.v1.MsTeamsEndpoint
	71,  // 149: arista.alert.v1.SendgridEndpoints.values:type_name -> arista.alert.v1.SendgridEndpoint
	72,  // 150: arista.alert.v1.CueSendgridEndpoints.values:type_name -> arista.alert.v1.CueSendgridEndpoint
	73,  // 151: arista.alert.v1.SyslogEndpoints.values:type_name -> arista.alert.v1.SyslogEndpoint
	74,  // 152: arista.alert.v1.CueSyslogEndpoints.values:type_name -> arista.alert.v1.CueSyslogEndpoint
	75,  // 153: arista.alert.v1.SNMPEndpoints.values:type_name -> arista.alert.v1.SNMPEndpoint
	76,  // 154: arista.alert.v1.CueSnmpEndpoints.values:type_name -> arista.alert.v1.CueSNMPEndpoint
	77,  // 155: arista.alert.v1.ZoomEndpoints.values:type_name -> arista.alert.v1.ZoomEndpoint
	88,  // 156: arista.alert.v1.EmailEndpoint.send_resolved:type_name -> google.protobuf.BoolValue
	86,  // 157: arista.alert.v1.EmailEndpoint.to:type_name -> google.protobuf.StringValue
	88,  // 158: arista.alert.v1.WebhookEndpoint.send_resolved:type_name -> google.protobuf.BoolValue
	86,  // 159: arista.alert.v1.WebhookEndpoint.url:type_name -> google.protobuf.StringValue
	19,  // 160: arista.alert.v1.WebhookEndpoint.http_override:type_name -> arista.alert.v1.HttpSettings
	88,  // 161: arista.alert.v1.WebhookEndpoint.simple_output:type_name -> google.protobuf.BoolValue
	88,  // 162: arista.alert.v1.WebhookEndpoint.single_alert:type_name -> google.protobuf.BoolValue
	88,  // 163: arista.alert.v1.SlackEndpoint.send_resolved:type_name -> google.protobuf.BoolValue
	19,  // 164: arista.alert.v1.SlackEndpoint.http_override:type_name -> arista.alert.v1.HttpSettings
	22,  // 165: arista.alert.v1.SlackEndpoint.settings_override:type_name -> arista.alert.v1.SlackSettings
	88,  // 166: arista.alert.v1.OpsgenieEndpoint.send_resolved:type_name -> google.protobuf.BoolValue
	19,  // 167: arista.alert.v1.OpsgenieEndpoint.http_override:type_name -> arista.alert.v1.HttpSettings
	25,  // 168: arista.alert.v1.OpsgenieEndpoint.settings_override:type_name -> arista.alert.v1.OpsgenieSettings
	88,  // 169: arista.alert.v1.PushoverEndpoint.send_resolved:type_name -> google.protobuf.BoolValue
	86,  // 170: arista.alert.v1.PushoverEndpoint.token:type_name -> google.protobuf.StringValue
	86,  // 171: arista.alert.v1.PushoverEndpoint.user_key:type_name -> google.protobuf.StringValue
	19,  // 172: arista.alert.v1.PushoverEndpoint.http_override:type_name -> arista.alert.v1.HttpSettings
	88,  // 173: arista.alert.v1.PagerdutyEndpoint.send_resolved:type_name -> google.protobuf.BoolValue
	86,  // 174: arista.alert.v1.PagerdutyEndpoint.routing_key:type_name -> google.protobuf.StringValue
	19,  // 175: arista.alert.v1.PagerdutyEndpoint.http_override:type_name -> arista.alert.v1.HttpSettings
	24,  // 176: arista.alert.v1.PagerdutyEndpoint.settings_override:type_name -> arista.alert.v1.PagerdutySettings
	88,  // 177: arista.alert.v1.VictorOpsEndpoint.send_resolved:type_name -> google.protobuf.BoolValue
	86,  // 178: arista.alert.v1.VictorOpsEndpoint.routing_key:type_name -> google.protobuf.StringValue
	19,  // 179: arista.alert.v1.VictorOpsEndpoint.http_override:type_name -> arista.alert.v1.HttpSettings
	23,  // 180: arista.alert.v1.VictorOpsEndpoint.settings_override:type_name -> arista.alert.v1.VictoropsSettings
	88,  // 181: arista.alert.v1.GoogleChatEndpoint.send_resolved:type_name -> google.protobuf.BoolValue
	19,  // 182: arista.alert.v1.GoogleChatEndpoint.http_override:type_name -> arista.alert.v1.HttpSettings
	26,  // 183: arista.alert.v1.GoogleChatEndpoint.settings_override:type_name -> arista.alert.v1.GoogleChatSettings
	88,  // 184: arista.alert.v1.MsTeamsEndpoint.send_resolved:type_name -> google.protobuf.BoolValue
	19,  // 185: arista.alert.v1.MsTeamsEndpoint.http_override:type_name -> arista.alert.v1.HttpSettings
	27,  // 186: arista.alert.v1.MsTeamsEndpoint.settings_override:type_name -> arista.alert.v1.MsTeamsSettings
	88,  // 187: arista.alert.v1.SendgridEndpoint.send_resolved:type_name -> google.protobuf.BoolValue
	86,  // 188: arista.alert.v1.SendgridEndpoint.to:type_name -> google.protobuf.StringValue
	19,  // 189: arista.alert.v1.SendgridEndpoint.http_override:type_name -> arista.alert.v1.HttpSettings
	88,  // 190: arista.alert.v1.CueSendgridEndpoint.send_resolved:type_name -> google.protobuf.BoolValue
	86,  // 191: arista.alert.v1.CueSendgridEndpoint.to:type_name -> google.protobuf.StringValue
	19,  // 192: arista.alert.v1.CueSendgridEndpoint.http_override:type_name -> arista.alert.v1.HttpSettings
	88,  // 193: arista.alert.v1.SyslogEndpoint.send_resolved:type_name -> google.protobuf.BoolValue
	28,  // 194: arista.alert.v1.SyslogEndpoint.settings_override:type_name -> arista.alert.v1.SyslogSettings
	88,  // 195: arista.alert.v1.CueSyslogEndpoint.send_resolved:type_name -> google.protobuf.BoolValue
	31,  // 196: arista.alert.v1.CueSyslogEndpoint.settings_override:type_name -> arista.alert.v1.CueSyslogSettings
	88,  // 197: arista.alert.v1.SNMPEndpoint.send_resolved:type_name -> google.protobuf.BoolValue
	32,  // 198: arista.alert.v1.SNMPEndpoint.settings_override:type_name -> arista.alert.v1.SNMPSettings
	88,  // 199: arista.alert.v1.CueSNMPEndpoint.send_resolved:type_name -> google.protobuf.BoolValue
	35,  // 200: arista.alert.v1.CueSNMPEndpoint.settings_override:type_name -> arista.alert.v1.CueSNMPSettings
	88,  // 201: arista.alert.v1.ZoomEndpoint.send_resolved:type_name -> google.protobuf.BoolValue
	19,  // 202: arista.alert.v1.ZoomEndpoint.http_override:type_name -> arista.alert.v1.HttpSettings
	38,  // 203: arista.alert.v1.ZoomEndpoint.settings_override:type_name -> arista.alert.v1.ZoomSettings
	8,   // 204: arista.alert.v1.TemplateKey.template_type:type_name -> arista.alert.v1.TemplateType
	78,  // 205: arista.alert.v1.TemplateConfig.key:type_name -> arista.alert.v1.TemplateKey
	86,  // 206: arista.alert.v1.TemplateConfig.template:type_name -> google.protobuf.StringValue
	78,  // 207: arista.alert.v1.DefaultTemplate.key:type_name -> arista.alert.v1.TemplateKey
	86,  // 208: arista.alert.v1.DefaultTemplate.template:type_name -> google.protobuf.StringValue
	88,  // 209: arista.alert.v1.DefaultTemplate.multi_alert:type_name -> google.protobuf.BoolValue
	86,  // 210: arista.alert.v1.DefaultTemplate.description:type_name -> google.protobuf.StringValue
	86,  // 211: arista.alert.v1.DefaultTemplate.external_documentation:type_name -> google.protobuf.StringValue
	9,   // 212: arista.alert.v1.DefaultTemplate.output_format:type_name -> arista.alert.v1.TemplateOutput
	86,  // 213: arista.alert.v1.DefaultTemplate.display_name:type_name -> google.protobuf.StringValue
	21,  // 214: arista.alert.v1.HttpHeaders.ValuesEntry.value:type_name -> arista.alert.v1.HeaderValues
	40,  // 215: arista.alert.v1.InhibitionSettings.ValuesEntry.value:type_name -> arista.alert.v1.EventList
	45,  // 216: arista.alert.v1.BroadcastGroups.ValuesEntry.value:type_name -> arista.alert.v1.BroadcastGroup
	217, // [217:217] is the sub-list for method output_type
	217, // [217:217] is the sub-list for method input_type
	217, // [217:217] is the sub-list for extension type_name
	217, // [217:217] is the sub-list for extension extendee
	0,   // [0:217] is the sub-list for field type_name
}

func init() { file_arista_alert_v1_alert_proto_init() }
func file_arista_alert_v1_alert_proto_init() {
	if File_arista_alert_v1_alert_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_arista_alert_v1_alert_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigErrors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndpointErrors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndpointError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Settings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AzureOAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpHeaders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeaderValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlackSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VictoropsSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PagerdutySettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpsgenieSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleChatSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsTeamsSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyslogSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Priorities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CueData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CueSyslogSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SNMPSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SNMPAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CueSNMPAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CueSNMPSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendgridSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CueSendgridSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZoomSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InhibitionSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Matches); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastGroups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailEndpoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhookEndpoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlackEndpoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpsgenieEndpoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushoverEndpoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PagerdutyEndpoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VictorOpsEndpoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleChatEndpoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsTeamsEndpoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendgridEndpoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CueSendgridEndpoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyslogEndpoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CueSyslogEndpoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SNMPEndpoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CueSnmpEndpoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZoomEndpoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailEndpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhookEndpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlackEndpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpsgenieEndpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushoverEndpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PagerdutyEndpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VictorOpsEndpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleChatEndpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsTeamsEndpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendgridEndpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CueSendgridEndpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyslogEndpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CueSyslogEndpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SNMPEndpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CueSNMPEndpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZoomEndpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplateKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplateConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_alert_v1_alert_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_arista_alert_v1_alert_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   75,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_arista_alert_v1_alert_proto_goTypes,
		DependencyIndexes: file_arista_alert_v1_alert_proto_depIdxs,
		EnumInfos:         file_arista_alert_v1_alert_proto_enumTypes,
		MessageInfos:      file_arista_alert_v1_alert_proto_msgTypes,
	}.Build()
	File_arista_alert_v1_alert_proto = out.File
	file_arista_alert_v1_alert_proto_rawDesc = nil
	file_arista_alert_v1_alert_proto_goTypes = nil
	file_arista_alert_v1_alert_proto_depIdxs = nil
}
