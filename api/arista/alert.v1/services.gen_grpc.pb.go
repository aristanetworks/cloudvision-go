// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package alert

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AlertServiceClient is the client API for AlertService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlertServiceClient interface {
	GetOne(ctx context.Context, in *AlertRequest, opts ...grpc.CallOption) (*AlertResponse, error)
	Subscribe(ctx context.Context, in *AlertStreamRequest, opts ...grpc.CallOption) (AlertService_SubscribeClient, error)
}

type alertServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAlertServiceClient(cc grpc.ClientConnInterface) AlertServiceClient {
	return &alertServiceClient{cc}
}

func (c *alertServiceClient) GetOne(ctx context.Context, in *AlertRequest, opts ...grpc.CallOption) (*AlertResponse, error) {
	out := new(AlertResponse)
	err := c.cc.Invoke(ctx, "/arista.alert.v1.AlertService/GetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) Subscribe(ctx context.Context, in *AlertStreamRequest, opts ...grpc.CallOption) (AlertService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &AlertService_ServiceDesc.Streams[0], "/arista.alert.v1.AlertService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &alertServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AlertService_SubscribeClient interface {
	Recv() (*AlertStreamResponse, error)
	grpc.ClientStream
}

type alertServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *alertServiceSubscribeClient) Recv() (*AlertStreamResponse, error) {
	m := new(AlertStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AlertServiceServer is the server API for AlertService service.
// All implementations must embed UnimplementedAlertServiceServer
// for forward compatibility
type AlertServiceServer interface {
	GetOne(context.Context, *AlertRequest) (*AlertResponse, error)
	Subscribe(*AlertStreamRequest, AlertService_SubscribeServer) error
	mustEmbedUnimplementedAlertServiceServer()
}

// UnimplementedAlertServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAlertServiceServer struct {
}

func (UnimplementedAlertServiceServer) GetOne(context.Context, *AlertRequest) (*AlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedAlertServiceServer) Subscribe(*AlertStreamRequest, AlertService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedAlertServiceServer) mustEmbedUnimplementedAlertServiceServer() {}

// UnsafeAlertServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlertServiceServer will
// result in compilation errors.
type UnsafeAlertServiceServer interface {
	mustEmbedUnimplementedAlertServiceServer()
}

func RegisterAlertServiceServer(s grpc.ServiceRegistrar, srv AlertServiceServer) {
	s.RegisterService(&AlertService_ServiceDesc, srv)
}

func _AlertService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arista.alert.v1.AlertService/GetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServiceServer).GetOne(ctx, req.(*AlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AlertStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AlertServiceServer).Subscribe(m, &alertServiceSubscribeServer{stream})
}

type AlertService_SubscribeServer interface {
	Send(*AlertStreamResponse) error
	grpc.ServerStream
}

type alertServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *alertServiceSubscribeServer) Send(m *AlertStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// AlertService_ServiceDesc is the grpc.ServiceDesc for AlertService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlertService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.alert.v1.AlertService",
	HandlerType: (*AlertServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _AlertService_GetOne_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _AlertService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/alert.v1/services.gen.proto",
}

// AlertConfigServiceClient is the client API for AlertConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlertConfigServiceClient interface {
	GetOne(ctx context.Context, in *AlertConfigRequest, opts ...grpc.CallOption) (*AlertConfigResponse, error)
	Subscribe(ctx context.Context, in *AlertConfigStreamRequest, opts ...grpc.CallOption) (AlertConfigService_SubscribeClient, error)
	Set(ctx context.Context, in *AlertConfigSetRequest, opts ...grpc.CallOption) (*AlertConfigSetResponse, error)
}

type alertConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAlertConfigServiceClient(cc grpc.ClientConnInterface) AlertConfigServiceClient {
	return &alertConfigServiceClient{cc}
}

func (c *alertConfigServiceClient) GetOne(ctx context.Context, in *AlertConfigRequest, opts ...grpc.CallOption) (*AlertConfigResponse, error) {
	out := new(AlertConfigResponse)
	err := c.cc.Invoke(ctx, "/arista.alert.v1.AlertConfigService/GetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertConfigServiceClient) Subscribe(ctx context.Context, in *AlertConfigStreamRequest, opts ...grpc.CallOption) (AlertConfigService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &AlertConfigService_ServiceDesc.Streams[0], "/arista.alert.v1.AlertConfigService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &alertConfigServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AlertConfigService_SubscribeClient interface {
	Recv() (*AlertConfigStreamResponse, error)
	grpc.ClientStream
}

type alertConfigServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *alertConfigServiceSubscribeClient) Recv() (*AlertConfigStreamResponse, error) {
	m := new(AlertConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *alertConfigServiceClient) Set(ctx context.Context, in *AlertConfigSetRequest, opts ...grpc.CallOption) (*AlertConfigSetResponse, error) {
	out := new(AlertConfigSetResponse)
	err := c.cc.Invoke(ctx, "/arista.alert.v1.AlertConfigService/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlertConfigServiceServer is the server API for AlertConfigService service.
// All implementations must embed UnimplementedAlertConfigServiceServer
// for forward compatibility
type AlertConfigServiceServer interface {
	GetOne(context.Context, *AlertConfigRequest) (*AlertConfigResponse, error)
	Subscribe(*AlertConfigStreamRequest, AlertConfigService_SubscribeServer) error
	Set(context.Context, *AlertConfigSetRequest) (*AlertConfigSetResponse, error)
	mustEmbedUnimplementedAlertConfigServiceServer()
}

// UnimplementedAlertConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAlertConfigServiceServer struct {
}

func (UnimplementedAlertConfigServiceServer) GetOne(context.Context, *AlertConfigRequest) (*AlertConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedAlertConfigServiceServer) Subscribe(*AlertConfigStreamRequest, AlertConfigService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedAlertConfigServiceServer) Set(context.Context, *AlertConfigSetRequest) (*AlertConfigSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedAlertConfigServiceServer) mustEmbedUnimplementedAlertConfigServiceServer() {}

// UnsafeAlertConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlertConfigServiceServer will
// result in compilation errors.
type UnsafeAlertConfigServiceServer interface {
	mustEmbedUnimplementedAlertConfigServiceServer()
}

func RegisterAlertConfigServiceServer(s grpc.ServiceRegistrar, srv AlertConfigServiceServer) {
	s.RegisterService(&AlertConfigService_ServiceDesc, srv)
}

func _AlertConfigService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertConfigServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arista.alert.v1.AlertConfigService/GetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertConfigServiceServer).GetOne(ctx, req.(*AlertConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertConfigService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AlertConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AlertConfigServiceServer).Subscribe(m, &alertConfigServiceSubscribeServer{stream})
}

type AlertConfigService_SubscribeServer interface {
	Send(*AlertConfigStreamResponse) error
	grpc.ServerStream
}

type alertConfigServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *alertConfigServiceSubscribeServer) Send(m *AlertConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AlertConfigService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertConfigSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertConfigServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arista.alert.v1.AlertConfigService/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertConfigServiceServer).Set(ctx, req.(*AlertConfigSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AlertConfigService_ServiceDesc is the grpc.ServiceDesc for AlertConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlertConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.alert.v1.AlertConfigService",
	HandlerType: (*AlertConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _AlertConfigService_GetOne_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _AlertConfigService_Set_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _AlertConfigService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/alert.v1/services.gen.proto",
}

// TemplateConfigServiceClient is the client API for TemplateConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TemplateConfigServiceClient interface {
	GetOne(ctx context.Context, in *TemplateConfigRequest, opts ...grpc.CallOption) (*TemplateConfigResponse, error)
	GetAll(ctx context.Context, in *TemplateConfigStreamRequest, opts ...grpc.CallOption) (TemplateConfigService_GetAllClient, error)
	Subscribe(ctx context.Context, in *TemplateConfigStreamRequest, opts ...grpc.CallOption) (TemplateConfigService_SubscribeClient, error)
	Set(ctx context.Context, in *TemplateConfigSetRequest, opts ...grpc.CallOption) (*TemplateConfigSetResponse, error)
	SetSome(ctx context.Context, in *TemplateConfigSetSomeRequest, opts ...grpc.CallOption) (TemplateConfigService_SetSomeClient, error)
	Delete(ctx context.Context, in *TemplateConfigDeleteRequest, opts ...grpc.CallOption) (*TemplateConfigDeleteResponse, error)
	DeleteAll(ctx context.Context, in *TemplateConfigDeleteAllRequest, opts ...grpc.CallOption) (TemplateConfigService_DeleteAllClient, error)
}

type templateConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTemplateConfigServiceClient(cc grpc.ClientConnInterface) TemplateConfigServiceClient {
	return &templateConfigServiceClient{cc}
}

func (c *templateConfigServiceClient) GetOne(ctx context.Context, in *TemplateConfigRequest, opts ...grpc.CallOption) (*TemplateConfigResponse, error) {
	out := new(TemplateConfigResponse)
	err := c.cc.Invoke(ctx, "/arista.alert.v1.TemplateConfigService/GetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateConfigServiceClient) GetAll(ctx context.Context, in *TemplateConfigStreamRequest, opts ...grpc.CallOption) (TemplateConfigService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &TemplateConfigService_ServiceDesc.Streams[0], "/arista.alert.v1.TemplateConfigService/GetAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &templateConfigServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TemplateConfigService_GetAllClient interface {
	Recv() (*TemplateConfigStreamResponse, error)
	grpc.ClientStream
}

type templateConfigServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *templateConfigServiceGetAllClient) Recv() (*TemplateConfigStreamResponse, error) {
	m := new(TemplateConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *templateConfigServiceClient) Subscribe(ctx context.Context, in *TemplateConfigStreamRequest, opts ...grpc.CallOption) (TemplateConfigService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &TemplateConfigService_ServiceDesc.Streams[1], "/arista.alert.v1.TemplateConfigService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &templateConfigServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TemplateConfigService_SubscribeClient interface {
	Recv() (*TemplateConfigStreamResponse, error)
	grpc.ClientStream
}

type templateConfigServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *templateConfigServiceSubscribeClient) Recv() (*TemplateConfigStreamResponse, error) {
	m := new(TemplateConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *templateConfigServiceClient) Set(ctx context.Context, in *TemplateConfigSetRequest, opts ...grpc.CallOption) (*TemplateConfigSetResponse, error) {
	out := new(TemplateConfigSetResponse)
	err := c.cc.Invoke(ctx, "/arista.alert.v1.TemplateConfigService/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateConfigServiceClient) SetSome(ctx context.Context, in *TemplateConfigSetSomeRequest, opts ...grpc.CallOption) (TemplateConfigService_SetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &TemplateConfigService_ServiceDesc.Streams[2], "/arista.alert.v1.TemplateConfigService/SetSome", opts...)
	if err != nil {
		return nil, err
	}
	x := &templateConfigServiceSetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TemplateConfigService_SetSomeClient interface {
	Recv() (*TemplateConfigSetSomeResponse, error)
	grpc.ClientStream
}

type templateConfigServiceSetSomeClient struct {
	grpc.ClientStream
}

func (x *templateConfigServiceSetSomeClient) Recv() (*TemplateConfigSetSomeResponse, error) {
	m := new(TemplateConfigSetSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *templateConfigServiceClient) Delete(ctx context.Context, in *TemplateConfigDeleteRequest, opts ...grpc.CallOption) (*TemplateConfigDeleteResponse, error) {
	out := new(TemplateConfigDeleteResponse)
	err := c.cc.Invoke(ctx, "/arista.alert.v1.TemplateConfigService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateConfigServiceClient) DeleteAll(ctx context.Context, in *TemplateConfigDeleteAllRequest, opts ...grpc.CallOption) (TemplateConfigService_DeleteAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &TemplateConfigService_ServiceDesc.Streams[3], "/arista.alert.v1.TemplateConfigService/DeleteAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &templateConfigServiceDeleteAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TemplateConfigService_DeleteAllClient interface {
	Recv() (*TemplateConfigDeleteAllResponse, error)
	grpc.ClientStream
}

type templateConfigServiceDeleteAllClient struct {
	grpc.ClientStream
}

func (x *templateConfigServiceDeleteAllClient) Recv() (*TemplateConfigDeleteAllResponse, error) {
	m := new(TemplateConfigDeleteAllResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TemplateConfigServiceServer is the server API for TemplateConfigService service.
// All implementations must embed UnimplementedTemplateConfigServiceServer
// for forward compatibility
type TemplateConfigServiceServer interface {
	GetOne(context.Context, *TemplateConfigRequest) (*TemplateConfigResponse, error)
	GetAll(*TemplateConfigStreamRequest, TemplateConfigService_GetAllServer) error
	Subscribe(*TemplateConfigStreamRequest, TemplateConfigService_SubscribeServer) error
	Set(context.Context, *TemplateConfigSetRequest) (*TemplateConfigSetResponse, error)
	SetSome(*TemplateConfigSetSomeRequest, TemplateConfigService_SetSomeServer) error
	Delete(context.Context, *TemplateConfigDeleteRequest) (*TemplateConfigDeleteResponse, error)
	DeleteAll(*TemplateConfigDeleteAllRequest, TemplateConfigService_DeleteAllServer) error
	mustEmbedUnimplementedTemplateConfigServiceServer()
}

// UnimplementedTemplateConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTemplateConfigServiceServer struct {
}

func (UnimplementedTemplateConfigServiceServer) GetOne(context.Context, *TemplateConfigRequest) (*TemplateConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedTemplateConfigServiceServer) GetAll(*TemplateConfigStreamRequest, TemplateConfigService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedTemplateConfigServiceServer) Subscribe(*TemplateConfigStreamRequest, TemplateConfigService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedTemplateConfigServiceServer) Set(context.Context, *TemplateConfigSetRequest) (*TemplateConfigSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedTemplateConfigServiceServer) SetSome(*TemplateConfigSetSomeRequest, TemplateConfigService_SetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method SetSome not implemented")
}
func (UnimplementedTemplateConfigServiceServer) Delete(context.Context, *TemplateConfigDeleteRequest) (*TemplateConfigDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTemplateConfigServiceServer) DeleteAll(*TemplateConfigDeleteAllRequest, TemplateConfigService_DeleteAllServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteAll not implemented")
}
func (UnimplementedTemplateConfigServiceServer) mustEmbedUnimplementedTemplateConfigServiceServer() {}

// UnsafeTemplateConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TemplateConfigServiceServer will
// result in compilation errors.
type UnsafeTemplateConfigServiceServer interface {
	mustEmbedUnimplementedTemplateConfigServiceServer()
}

func RegisterTemplateConfigServiceServer(s grpc.ServiceRegistrar, srv TemplateConfigServiceServer) {
	s.RegisterService(&TemplateConfigService_ServiceDesc, srv)
}

func _TemplateConfigService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemplateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateConfigServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arista.alert.v1.TemplateConfigService/GetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateConfigServiceServer).GetOne(ctx, req.(*TemplateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateConfigService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TemplateConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TemplateConfigServiceServer).GetAll(m, &templateConfigServiceGetAllServer{stream})
}

type TemplateConfigService_GetAllServer interface {
	Send(*TemplateConfigStreamResponse) error
	grpc.ServerStream
}

type templateConfigServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *templateConfigServiceGetAllServer) Send(m *TemplateConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TemplateConfigService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TemplateConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TemplateConfigServiceServer).Subscribe(m, &templateConfigServiceSubscribeServer{stream})
}

type TemplateConfigService_SubscribeServer interface {
	Send(*TemplateConfigStreamResponse) error
	grpc.ServerStream
}

type templateConfigServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *templateConfigServiceSubscribeServer) Send(m *TemplateConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TemplateConfigService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemplateConfigSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateConfigServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arista.alert.v1.TemplateConfigService/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateConfigServiceServer).Set(ctx, req.(*TemplateConfigSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateConfigService_SetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TemplateConfigSetSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TemplateConfigServiceServer).SetSome(m, &templateConfigServiceSetSomeServer{stream})
}

type TemplateConfigService_SetSomeServer interface {
	Send(*TemplateConfigSetSomeResponse) error
	grpc.ServerStream
}

type templateConfigServiceSetSomeServer struct {
	grpc.ServerStream
}

func (x *templateConfigServiceSetSomeServer) Send(m *TemplateConfigSetSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TemplateConfigService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemplateConfigDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateConfigServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arista.alert.v1.TemplateConfigService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateConfigServiceServer).Delete(ctx, req.(*TemplateConfigDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateConfigService_DeleteAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TemplateConfigDeleteAllRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TemplateConfigServiceServer).DeleteAll(m, &templateConfigServiceDeleteAllServer{stream})
}

type TemplateConfigService_DeleteAllServer interface {
	Send(*TemplateConfigDeleteAllResponse) error
	grpc.ServerStream
}

type templateConfigServiceDeleteAllServer struct {
	grpc.ServerStream
}

func (x *templateConfigServiceDeleteAllServer) Send(m *TemplateConfigDeleteAllResponse) error {
	return x.ServerStream.SendMsg(m)
}

// TemplateConfigService_ServiceDesc is the grpc.ServiceDesc for TemplateConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TemplateConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.alert.v1.TemplateConfigService",
	HandlerType: (*TemplateConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _TemplateConfigService_GetOne_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _TemplateConfigService_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TemplateConfigService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAll",
			Handler:       _TemplateConfigService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _TemplateConfigService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SetSome",
			Handler:       _TemplateConfigService_SetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteAll",
			Handler:       _TemplateConfigService_DeleteAll_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/alert.v1/services.gen.proto",
}
