// Copyright (c) 2024 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

//
// Code generated by boomtown. DO NOT EDIT.
//

package alert

import "google.golang.org/grpc"

// Client composes the service clients within the alert package.
// This client can then be composed into a larger hierarchy for more complex clients.
//
// Because method names include the name of the Resource they operate on, the embedded
// clients are unnamed fields to reduce stutter.
//
// Included resources:
//   - Alert
//   - AlertConfig
//   - DefaultTemplate
//   - TemplateConfig
type Client struct {
	Alert           AlertServiceClient
	AlertConfig     AlertConfigServiceClient
	DefaultTemplate DefaultTemplateServiceClient
	TemplateConfig  TemplateConfigServiceClient
}

// NewClient creates a new composed-client from the given connection.
func NewClient(conn grpc.ClientConnInterface) Client {
	return Client{
		Alert:           NewAlertServiceClient(conn),
		AlertConfig:     NewAlertConfigServiceClient(conn),
		DefaultTemplate: NewDefaultTemplateServiceClient(conn),
		TemplateConfig:  NewTemplateConfigServiceClient(conn),
	}
}

// Server aggregates the various server interfaces required by gRPC.
// The included resources are:
//   - Alert
//   - AlertConfig
//   - DefaultTemplate
//   - TemplateConfig
type Server struct {
	Alert           AlertServiceServer
	AlertConfig     AlertConfigServiceServer
	DefaultTemplate DefaultTemplateServiceServer
	TemplateConfig  TemplateConfigServiceServer
}

// Register takes the given gRPC Server and registers our services with it.
func (s Server) Register(target *grpc.Server) {
	RegisterAlertServiceServer(target, s.Alert)
	RegisterAlertConfigServiceServer(target, s.AlertConfig)
	RegisterDefaultTemplateServiceServer(target, s.DefaultTemplate)
	RegisterTemplateConfigServiceServer(target, s.TemplateConfig)
}

// RegisterUnimplementeds adds unimplemented servers to the given gRPC Server
func RegisterUnimplementeds(target *grpc.Server) error {
	RegisterAlertServiceServer(target,
		UnimplementedAlertServiceServer{})
	RegisterAlertConfigServiceServer(target,
		UnimplementedAlertConfigServiceServer{})
	RegisterDefaultTemplateServiceServer(target,
		UnimplementedDefaultTemplateServiceServer{})
	RegisterTemplateConfigServiceServer(target,
		UnimplementedTemplateConfigServiceServer{})
	return nil
}

// HasKey returns whether the given DefaultTemplate has a key provided in the model.
func (d *DefaultTemplate) HasKey() bool {
	return d.GetKey() != nil
}

// HasKey returns whether the given DefaultTemplateRequest has a key provided in the request.
func (d *DefaultTemplateRequest) HasKey() bool {
	return d.GetKey() != nil
}

// HasKey returns whether the given TemplateConfig has a key provided in the model.
func (t *TemplateConfig) HasKey() bool {
	return t.GetKey() != nil
}

// HasKey returns whether the given TemplateConfigRequest has a key provided in the request.
func (t *TemplateConfigRequest) HasKey() bool {
	return t.GetKey() != nil
}

// HasKey returns whether the given TemplateConfigSetRequest has a key provided in the request.
func (t *TemplateConfigSetRequest) HasKey() bool {
	return t.GetValue().HasKey()
}

// HasKey returns whether the given TemplateConfigDeleteRequest has a key provided in the request.
func (t *TemplateConfigDeleteRequest) HasKey() bool {
	return t.GetKey() != nil
}

// PassesPartialEqFilter returns whether this ConfigErrorType matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (c ConfigErrorType) PassesPartialEqFilter(cmp ConfigErrorType) bool {
	if cmp != ConfigErrorType(0) {
		return c == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether this CueSNMPAuthProtocol matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (c CueSNMPAuthProtocol) PassesPartialEqFilter(cmp CueSNMPAuthProtocol) bool {
	if cmp != CueSNMPAuthProtocol(0) {
		return c == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether this CueSNMPPrivProtocol matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (c CueSNMPPrivProtocol) PassesPartialEqFilter(cmp CueSNMPPrivProtocol) bool {
	if cmp != CueSNMPPrivProtocol(0) {
		return c == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether this CueSyslogMessageFormat matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (c CueSyslogMessageFormat) PassesPartialEqFilter(cmp CueSyslogMessageFormat) bool {
	if cmp != CueSyslogMessageFormat(0) {
		return c == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether this EndpointErrorType matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (e EndpointErrorType) PassesPartialEqFilter(cmp EndpointErrorType) bool {
	if cmp != EndpointErrorType(0) {
		return e == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether this SNMPAuthProtocol matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (s SNMPAuthProtocol) PassesPartialEqFilter(cmp SNMPAuthProtocol) bool {
	if cmp != SNMPAuthProtocol(0) {
		return s == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether this SNMPPrivProtocol matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (s SNMPPrivProtocol) PassesPartialEqFilter(cmp SNMPPrivProtocol) bool {
	if cmp != SNMPPrivProtocol(0) {
		return s == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether this SNMPSecurityLevel matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (s SNMPSecurityLevel) PassesPartialEqFilter(cmp SNMPSecurityLevel) bool {
	if cmp != SNMPSecurityLevel(0) {
		return s == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether this TemplateOutput matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (t TemplateOutput) PassesPartialEqFilter(cmp TemplateOutput) bool {
	if cmp != TemplateOutput(0) {
		return t == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether this TemplateType matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (t TemplateType) PassesPartialEqFilter(cmp TemplateType) bool {
	if cmp != TemplateType(0) {
		return t == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether the AzureOAuth matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (a *AzureOAuth) PassesPartialEqFilter(cmp *AzureOAuth) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if a == nil {
		return false
	}

	if cmp.ClientId != nil {
		if a.ClientId == nil {
			return false
		}
		if a.ClientId.Value != cmp.ClientId.Value {
			return false
		}
	}

	if cmp.TenantId != nil {
		if a.TenantId == nil {
			return false
		}
		if a.TenantId.Value != cmp.TenantId.Value {
			return false
		}
	}

	if cmp.ClientSecret != nil {
		if a.ClientSecret == nil {
			return false
		}
		if a.ClientSecret.Value != cmp.ClientSecret.Value {
			return false
		}
	}

	if cmp.AuthUri != nil {
		if a.AuthUri == nil {
			return false
		}
		if a.AuthUri.Value != cmp.AuthUri.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the BroadcastGroup matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (b *BroadcastGroup) PassesPartialEqFilter(cmp *BroadcastGroup) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if b == nil {
		return false
	}
	if !b.Email.PassesPartialEqFilter(cmp.Email) {
		return false
	}
	if !b.Webhook.PassesPartialEqFilter(cmp.Webhook) {
		return false
	}
	if !b.Slack.PassesPartialEqFilter(cmp.Slack) {
		return false
	}
	if !b.Opsgenie.PassesPartialEqFilter(cmp.Opsgenie) {
		return false
	}
	if !b.Pushover.PassesPartialEqFilter(cmp.Pushover) {
		return false
	}
	if !b.Pagerduty.PassesPartialEqFilter(cmp.Pagerduty) {
		return false
	}
	if !b.Victorops.PassesPartialEqFilter(cmp.Victorops) {
		return false
	}
	if !b.Gchat.PassesPartialEqFilter(cmp.Gchat) {
		return false
	}
	if !b.Msteams.PassesPartialEqFilter(cmp.Msteams) {
		return false
	}
	if !b.Sendgrid.PassesPartialEqFilter(cmp.Sendgrid) {
		return false
	}
	if !b.Syslog.PassesPartialEqFilter(cmp.Syslog) {
		return false
	}
	if !b.Snmp.PassesPartialEqFilter(cmp.Snmp) {
		return false
	}
	if !b.CueSyslog.PassesPartialEqFilter(cmp.CueSyslog) {
		return false
	}
	if !b.CueSnmp.PassesPartialEqFilter(cmp.CueSnmp) {
		return false
	}
	if !b.CueSendgrid.PassesPartialEqFilter(cmp.CueSendgrid) {
		return false
	}
	if !b.Zoom.PassesPartialEqFilter(cmp.Zoom) {
		return false
	}

	return true
}

// PassesPartialEqFilter returns whether the BroadcastGroups matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (b *BroadcastGroups) PassesPartialEqFilter(cmp *BroadcastGroups) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if b == nil {
		return false
	}
	if len(cmp.Values) > len(b.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := b.Values[k]
		if !exists || !self.PassesPartialEqFilter(filt) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the ConfigError matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (c *ConfigError) PassesPartialEqFilter(cmp *ConfigError) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if c == nil {
		return false
	}

	if cmp.Path != nil {
		if c.Path == nil {
			return false
		}
		if c.Path.Value != cmp.Path.Value {
			return false
		}
	}
	if !c.ErrorType.PassesPartialEqFilter(cmp.ErrorType) {
		return false
	}

	if cmp.Error != nil {
		if c.Error == nil {
			return false
		}
		if c.Error.Value != cmp.Error.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the ConfigErrors matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (c *ConfigErrors) PassesPartialEqFilter(cmp *ConfigErrors) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if c == nil {
		return false
	}
	if len(c.Values) != len(cmp.Values) {
		return false
	}
	for i, f := range c.Values {
		if !f.PassesPartialEqFilter(cmp.Values[i]) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the CueData matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (c *CueData) PassesPartialEqFilter(cmp *CueData) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if c == nil {
		return false
	}
	if len(cmp.Values) > len(c.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := c.Values[k]
		if !exists || filt != self {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the CueSNMPAuth matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (c *CueSNMPAuth) PassesPartialEqFilter(cmp *CueSNMPAuth) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if c == nil {
		return false
	}

	if cmp.Community != nil {
		if c.Community == nil {
			return false
		}
		if c.Community.Value != cmp.Community.Value {
			return false
		}
	}

	if cmp.Username != nil {
		if c.Username == nil {
			return false
		}
		if c.Username.Value != cmp.Username.Value {
			return false
		}
	}
	if !c.SecurityLevel.PassesPartialEqFilter(cmp.SecurityLevel) {
		return false
	}
	if !c.AuthenticationProtocol.PassesPartialEqFilter(cmp.AuthenticationProtocol) {
		return false
	}

	if cmp.AuthenticationPassphrase != nil {
		if c.AuthenticationPassphrase == nil {
			return false
		}
		if c.AuthenticationPassphrase.Value != cmp.AuthenticationPassphrase.Value {
			return false
		}
	}
	if !c.PrivacyProtocol.PassesPartialEqFilter(cmp.PrivacyProtocol) {
		return false
	}

	if cmp.PrivacyPassphrase != nil {
		if c.PrivacyPassphrase == nil {
			return false
		}
		if c.PrivacyPassphrase.Value != cmp.PrivacyPassphrase.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the CueSNMPEndpoint matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (c *CueSNMPEndpoint) PassesPartialEqFilter(cmp *CueSNMPEndpoint) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if c == nil {
		return false
	}

	if cmp.SendResolved != nil {
		if c.SendResolved == nil {
			return false
		}
		if c.SendResolved.Value != cmp.SendResolved.Value {
			return false
		}
	}
	if !c.SettingsOverride.PassesPartialEqFilter(cmp.SettingsOverride) {
		return false
	}

	return true
}

// PassesPartialEqFilter returns whether the CueSNMPSettings matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (c *CueSNMPSettings) PassesPartialEqFilter(cmp *CueSNMPSettings) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if c == nil {
		return false
	}

	if cmp.Target != nil {
		if c.Target == nil {
			return false
		}
		if c.Target.Value != cmp.Target.Value {
			return false
		}
	}

	if cmp.Port != nil {
		if c.Port == nil {
			return false
		}
		if c.Port.Value != cmp.Port.Value {
			return false
		}
	}

	if cmp.Transport != nil {
		if c.Transport == nil {
			return false
		}
		if c.Transport.Value != cmp.Transport.Value {
			return false
		}
	}

	if cmp.Version != nil {
		if c.Version == nil {
			return false
		}
		if c.Version.Value != cmp.Version.Value {
			return false
		}
	}
	if !c.Auth.PassesPartialEqFilter(cmp.Auth) {
		return false
	}
	if !c.Data.PassesPartialEqFilter(cmp.Data) {
		return false
	}

	return true
}

// PassesPartialEqFilter returns whether the CueSendgridEndpoint matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (c *CueSendgridEndpoint) PassesPartialEqFilter(cmp *CueSendgridEndpoint) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if c == nil {
		return false
	}

	if cmp.SendResolved != nil {
		if c.SendResolved == nil {
			return false
		}
		if c.SendResolved.Value != cmp.SendResolved.Value {
			return false
		}
	}

	if cmp.To != nil {
		if c.To == nil {
			return false
		}
		if c.To.Value != cmp.To.Value {
			return false
		}
	}
	if !c.HttpOverride.PassesPartialEqFilter(cmp.HttpOverride) {
		return false
	}

	return true
}

// PassesPartialEqFilter returns whether the CueSendgridEndpoints matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (c *CueSendgridEndpoints) PassesPartialEqFilter(cmp *CueSendgridEndpoints) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if c == nil {
		return false
	}
	if len(c.Values) != len(cmp.Values) {
		return false
	}
	for i, f := range c.Values {
		if !f.PassesPartialEqFilter(cmp.Values[i]) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the CueSendgridSettings matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (c *CueSendgridSettings) PassesPartialEqFilter(cmp *CueSendgridSettings) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if c == nil {
		return false
	}

	if cmp.ApiKey != nil {
		if c.ApiKey == nil {
			return false
		}
		if c.ApiKey.Value != cmp.ApiKey.Value {
			return false
		}
	}

	if cmp.From != nil {
		if c.From == nil {
			return false
		}
		if c.From.Value != cmp.From.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the CueSnmpEndpoints matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (c *CueSnmpEndpoints) PassesPartialEqFilter(cmp *CueSnmpEndpoints) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if c == nil {
		return false
	}
	if len(c.Values) != len(cmp.Values) {
		return false
	}
	for i, f := range c.Values {
		if !f.PassesPartialEqFilter(cmp.Values[i]) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the CueSyslogEndpoint matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (c *CueSyslogEndpoint) PassesPartialEqFilter(cmp *CueSyslogEndpoint) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if c == nil {
		return false
	}

	if cmp.SendResolved != nil {
		if c.SendResolved == nil {
			return false
		}
		if c.SendResolved.Value != cmp.SendResolved.Value {
			return false
		}
	}
	if !c.SettingsOverride.PassesPartialEqFilter(cmp.SettingsOverride) {
		return false
	}

	return true
}

// PassesPartialEqFilter returns whether the CueSyslogEndpoints matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (c *CueSyslogEndpoints) PassesPartialEqFilter(cmp *CueSyslogEndpoints) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if c == nil {
		return false
	}
	if len(c.Values) != len(cmp.Values) {
		return false
	}
	for i, f := range c.Values {
		if !f.PassesPartialEqFilter(cmp.Values[i]) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the CueSyslogSettings matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (c *CueSyslogSettings) PassesPartialEqFilter(cmp *CueSyslogSettings) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if c == nil {
		return false
	}

	if cmp.Network != nil {
		if c.Network == nil {
			return false
		}
		if c.Network.Value != cmp.Network.Value {
			return false
		}
	}

	if cmp.Address != nil {
		if c.Address == nil {
			return false
		}
		if c.Address.Value != cmp.Address.Value {
			return false
		}
	}

	if cmp.Port != nil {
		if c.Port == nil {
			return false
		}
		if c.Port.Value != cmp.Port.Value {
			return false
		}
	}
	if !c.MessageFormat.PassesPartialEqFilter(cmp.MessageFormat) {
		return false
	}

	if cmp.AppendBomHeader != nil {
		if c.AppendBomHeader == nil {
			return false
		}
		if c.AppendBomHeader.Value != cmp.AppendBomHeader.Value {
			return false
		}
	}
	if !c.Data.PassesPartialEqFilter(cmp.Data) {
		return false
	}

	return true
}

// PassesPartialEqFilter returns whether the EmailEndpoint matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (e *EmailEndpoint) PassesPartialEqFilter(cmp *EmailEndpoint) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if e == nil {
		return false
	}

	if cmp.SendResolved != nil {
		if e.SendResolved == nil {
			return false
		}
		if e.SendResolved.Value != cmp.SendResolved.Value {
			return false
		}
	}

	if cmp.To != nil {
		if e.To == nil {
			return false
		}
		if e.To.Value != cmp.To.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the EmailEndpoints matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (e *EmailEndpoints) PassesPartialEqFilter(cmp *EmailEndpoints) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if e == nil {
		return false
	}
	if len(e.Values) != len(cmp.Values) {
		return false
	}
	for i, f := range e.Values {
		if !f.PassesPartialEqFilter(cmp.Values[i]) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the EmailSettings matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (e *EmailSettings) PassesPartialEqFilter(cmp *EmailSettings) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if e == nil {
		return false
	}

	if cmp.From != nil {
		if e.From == nil {
			return false
		}
		if e.From.Value != cmp.From.Value {
			return false
		}
	}

	if cmp.Smarthost != nil {
		if e.Smarthost == nil {
			return false
		}
		if e.Smarthost.Value != cmp.Smarthost.Value {
			return false
		}
	}

	if cmp.AuthUsername != nil {
		if e.AuthUsername == nil {
			return false
		}
		if e.AuthUsername.Value != cmp.AuthUsername.Value {
			return false
		}
	}

	if cmp.AuthPassword != nil {
		if e.AuthPassword == nil {
			return false
		}
		if e.AuthPassword.Value != cmp.AuthPassword.Value {
			return false
		}
	}

	if cmp.RequireTls != nil {
		if e.RequireTls == nil {
			return false
		}
		if e.RequireTls.Value != cmp.RequireTls.Value {
			return false
		}
	}

	if cmp.SingleAlertPerEmail != nil {
		if e.SingleAlertPerEmail == nil {
			return false
		}
		if e.SingleAlertPerEmail.Value != cmp.SingleAlertPerEmail.Value {
			return false
		}
	}
	if !e.AzureOAuth.PassesPartialEqFilter(cmp.AzureOAuth) {
		return false
	}

	return true
}

// PassesPartialEqFilter returns whether the EndpointError matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (e *EndpointError) PassesPartialEqFilter(cmp *EndpointError) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if e == nil {
		return false
	}

	if cmp.EndpointType != nil {
		if e.EndpointType == nil {
			return false
		}
		if e.EndpointType.Value != cmp.EndpointType.Value {
			return false
		}
	}

	if cmp.BroadcastGroupName != nil {
		if e.BroadcastGroupName == nil {
			return false
		}
		if e.BroadcastGroupName.Value != cmp.BroadcastGroupName.Value {
			return false
		}
	}

	if cmp.ConfigIndex != nil {
		if e.ConfigIndex == nil {
			return false
		}
		if e.ConfigIndex.Value != cmp.ConfigIndex.Value {
			return false
		}
	}
	if !e.ErrorType.PassesPartialEqFilter(cmp.ErrorType) {
		return false
	}

	if cmp.Error != nil {
		if e.Error == nil {
			return false
		}
		if e.Error.Value != cmp.Error.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the EndpointErrors matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (e *EndpointErrors) PassesPartialEqFilter(cmp *EndpointErrors) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if e == nil {
		return false
	}
	if len(e.Values) != len(cmp.Values) {
		return false
	}
	for i, f := range e.Values {
		if !f.PassesPartialEqFilter(cmp.Values[i]) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the EventList matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (e *EventList) PassesPartialEqFilter(cmp *EventList) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if e == nil {
		return false
	}
	if !e.EventTypes.PassesPartialEqFilter(cmp.EventTypes) {
		return false
	}

	return true
}

// PassesPartialEqFilter returns whether the GoogleChatEndpoint matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (g *GoogleChatEndpoint) PassesPartialEqFilter(cmp *GoogleChatEndpoint) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if g == nil {
		return false
	}

	if cmp.SendResolved != nil {
		if g.SendResolved == nil {
			return false
		}
		if g.SendResolved.Value != cmp.SendResolved.Value {
			return false
		}
	}
	if !g.HttpOverride.PassesPartialEqFilter(cmp.HttpOverride) {
		return false
	}
	if !g.SettingsOverride.PassesPartialEqFilter(cmp.SettingsOverride) {
		return false
	}

	return true
}

// PassesPartialEqFilter returns whether the GoogleChatEndpoints matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (g *GoogleChatEndpoints) PassesPartialEqFilter(cmp *GoogleChatEndpoints) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if g == nil {
		return false
	}
	if len(g.Values) != len(cmp.Values) {
		return false
	}
	for i, f := range g.Values {
		if !f.PassesPartialEqFilter(cmp.Values[i]) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the GoogleChatSettings matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (g *GoogleChatSettings) PassesPartialEqFilter(cmp *GoogleChatSettings) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if g == nil {
		return false
	}

	if cmp.Url != nil {
		if g.Url == nil {
			return false
		}
		if g.Url.Value != cmp.Url.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the HeaderValues matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (h *HeaderValues) PassesPartialEqFilter(cmp *HeaderValues) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if h == nil {
		return false
	}
	if len(h.Values) != len(cmp.Values) {
		return false
	}
	for i, f := range h.Values {
		if cmp.Values[i] != f {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the HttpHeaders matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (h *HttpHeaders) PassesPartialEqFilter(cmp *HttpHeaders) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if h == nil {
		return false
	}
	if len(cmp.Values) > len(h.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := h.Values[k]
		if !exists || !self.PassesPartialEqFilter(filt) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the HttpSettings matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (h *HttpSettings) PassesPartialEqFilter(cmp *HttpSettings) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if h == nil {
		return false
	}

	if cmp.Username != nil {
		if h.Username == nil {
			return false
		}
		if h.Username.Value != cmp.Username.Value {
			return false
		}
	}

	if cmp.Password != nil {
		if h.Password == nil {
			return false
		}
		if h.Password.Value != cmp.Password.Value {
			return false
		}
	}

	if cmp.ProxyUrl != nil {
		if h.ProxyUrl == nil {
			return false
		}
		if h.ProxyUrl.Value != cmp.ProxyUrl.Value {
			return false
		}
	}
	if !h.CustomHeaders.PassesPartialEqFilter(cmp.CustomHeaders) {
		return false
	}

	return true
}

// PassesPartialEqFilter returns whether the InhibitionSettings matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (i *InhibitionSettings) PassesPartialEqFilter(cmp *InhibitionSettings) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if i == nil {
		return false
	}
	if len(cmp.Values) > len(i.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := i.Values[k]
		if !exists || !self.PassesPartialEqFilter(filt) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the Matches matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *Matches) PassesPartialEqFilter(cmp *Matches) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if m == nil {
		return false
	}
	if !m.Severities.PassesPartialEqFilter(cmp.Severities) {
		return false
	}
	if !m.Devices.PassesPartialEqFilter(cmp.Devices) {
		return false
	}
	if !m.EventTypes.PassesPartialEqFilter(cmp.EventTypes) {
		return false
	}

	if cmp.DeviceTags != nil {
		if m.DeviceTags == nil {
			return false
		}
		if m.DeviceTags.Value != cmp.DeviceTags.Value {
			return false
		}
	}

	if cmp.IntfTags != nil {
		if m.IntfTags == nil {
			return false
		}
		if m.IntfTags.Value != cmp.IntfTags.Value {
			return false
		}
	}
	if !m.RuleIds.PassesPartialEqFilter(cmp.RuleIds) {
		return false
	}

	return true
}

// PassesPartialEqFilter returns whether the MsTeamsEndpoint matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MsTeamsEndpoint) PassesPartialEqFilter(cmp *MsTeamsEndpoint) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if m == nil {
		return false
	}

	if cmp.SendResolved != nil {
		if m.SendResolved == nil {
			return false
		}
		if m.SendResolved.Value != cmp.SendResolved.Value {
			return false
		}
	}
	if !m.HttpOverride.PassesPartialEqFilter(cmp.HttpOverride) {
		return false
	}
	if !m.SettingsOverride.PassesPartialEqFilter(cmp.SettingsOverride) {
		return false
	}

	return true
}

// PassesPartialEqFilter returns whether the MsTeamsEndpoints matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MsTeamsEndpoints) PassesPartialEqFilter(cmp *MsTeamsEndpoints) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if m == nil {
		return false
	}
	if len(m.Values) != len(cmp.Values) {
		return false
	}
	for i, f := range m.Values {
		if !f.PassesPartialEqFilter(cmp.Values[i]) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the MsTeamsSettings matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (m *MsTeamsSettings) PassesPartialEqFilter(cmp *MsTeamsSettings) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if m == nil {
		return false
	}

	if cmp.Url != nil {
		if m.Url == nil {
			return false
		}
		if m.Url.Value != cmp.Url.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the OpsgenieEndpoint matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (o *OpsgenieEndpoint) PassesPartialEqFilter(cmp *OpsgenieEndpoint) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if o == nil {
		return false
	}

	if cmp.SendResolved != nil {
		if o.SendResolved == nil {
			return false
		}
		if o.SendResolved.Value != cmp.SendResolved.Value {
			return false
		}
	}
	if !o.HttpOverride.PassesPartialEqFilter(cmp.HttpOverride) {
		return false
	}
	if !o.SettingsOverride.PassesPartialEqFilter(cmp.SettingsOverride) {
		return false
	}

	return true
}

// PassesPartialEqFilter returns whether the OpsgenieEndpoints matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (o *OpsgenieEndpoints) PassesPartialEqFilter(cmp *OpsgenieEndpoints) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if o == nil {
		return false
	}
	if len(o.Values) != len(cmp.Values) {
		return false
	}
	for i, f := range o.Values {
		if !f.PassesPartialEqFilter(cmp.Values[i]) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the OpsgenieSettings matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (o *OpsgenieSettings) PassesPartialEqFilter(cmp *OpsgenieSettings) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if o == nil {
		return false
	}

	if cmp.Key != nil {
		if o.Key == nil {
			return false
		}
		if o.Key.Value != cmp.Key.Value {
			return false
		}
	}

	if cmp.Url != nil {
		if o.Url == nil {
			return false
		}
		if o.Url.Value != cmp.Url.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the PagerdutyEndpoint matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (p *PagerdutyEndpoint) PassesPartialEqFilter(cmp *PagerdutyEndpoint) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if p == nil {
		return false
	}

	if cmp.SendResolved != nil {
		if p.SendResolved == nil {
			return false
		}
		if p.SendResolved.Value != cmp.SendResolved.Value {
			return false
		}
	}

	if cmp.RoutingKey != nil {
		if p.RoutingKey == nil {
			return false
		}
		if p.RoutingKey.Value != cmp.RoutingKey.Value {
			return false
		}
	}
	if !p.HttpOverride.PassesPartialEqFilter(cmp.HttpOverride) {
		return false
	}
	if !p.SettingsOverride.PassesPartialEqFilter(cmp.SettingsOverride) {
		return false
	}

	return true
}

// PassesPartialEqFilter returns whether the PagerdutyEndpoints matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (p *PagerdutyEndpoints) PassesPartialEqFilter(cmp *PagerdutyEndpoints) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if p == nil {
		return false
	}
	if len(p.Values) != len(cmp.Values) {
		return false
	}
	for i, f := range p.Values {
		if !f.PassesPartialEqFilter(cmp.Values[i]) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the PagerdutySettings matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (p *PagerdutySettings) PassesPartialEqFilter(cmp *PagerdutySettings) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if p == nil {
		return false
	}

	if cmp.Url != nil {
		if p.Url == nil {
			return false
		}
		if p.Url.Value != cmp.Url.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the Priorities matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (p *Priorities) PassesPartialEqFilter(cmp *Priorities) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if p == nil {
		return false
	}

	if cmp.Critical != nil {
		if p.Critical == nil {
			return false
		}
		if p.Critical.Value != cmp.Critical.Value {
			return false
		}
	}

	if cmp.Error != nil {
		if p.Error == nil {
			return false
		}
		if p.Error.Value != cmp.Error.Value {
			return false
		}
	}

	if cmp.Warn != nil {
		if p.Warn == nil {
			return false
		}
		if p.Warn.Value != cmp.Warn.Value {
			return false
		}
	}

	if cmp.Info != nil {
		if p.Info == nil {
			return false
		}
		if p.Info.Value != cmp.Info.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the PushoverEndpoint matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (p *PushoverEndpoint) PassesPartialEqFilter(cmp *PushoverEndpoint) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if p == nil {
		return false
	}

	if cmp.SendResolved != nil {
		if p.SendResolved == nil {
			return false
		}
		if p.SendResolved.Value != cmp.SendResolved.Value {
			return false
		}
	}

	if cmp.Token != nil {
		if p.Token == nil {
			return false
		}
		if p.Token.Value != cmp.Token.Value {
			return false
		}
	}

	if cmp.UserKey != nil {
		if p.UserKey == nil {
			return false
		}
		if p.UserKey.Value != cmp.UserKey.Value {
			return false
		}
	}
	if !p.HttpOverride.PassesPartialEqFilter(cmp.HttpOverride) {
		return false
	}

	return true
}

// PassesPartialEqFilter returns whether the PushoverEndpoints matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (p *PushoverEndpoints) PassesPartialEqFilter(cmp *PushoverEndpoints) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if p == nil {
		return false
	}
	if len(p.Values) != len(cmp.Values) {
		return false
	}
	for i, f := range p.Values {
		if !f.PassesPartialEqFilter(cmp.Values[i]) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the Rule matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (r *Rule) PassesPartialEqFilter(cmp *Rule) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if r == nil {
		return false
	}

	if cmp.SendsTo != nil {
		if r.SendsTo == nil {
			return false
		}
		if r.SendsTo.Value != cmp.SendsTo.Value {
			return false
		}
	}
	if !r.MatchCriteria.PassesPartialEqFilter(cmp.MatchCriteria) {
		return false
	}

	if cmp.ContinueChecks != nil {
		if r.ContinueChecks == nil {
			return false
		}
		if r.ContinueChecks.Value != cmp.ContinueChecks.Value {
			return false
		}
	}

	if cmp.Comment != nil {
		if r.Comment == nil {
			return false
		}
		if r.Comment.Value != cmp.Comment.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the Rules matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (r *Rules) PassesPartialEqFilter(cmp *Rules) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if r == nil {
		return false
	}
	if len(r.Values) != len(cmp.Values) {
		return false
	}
	for i, f := range r.Values {
		if !f.PassesPartialEqFilter(cmp.Values[i]) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the SNMPAuth matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (s *SNMPAuth) PassesPartialEqFilter(cmp *SNMPAuth) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if s == nil {
		return false
	}

	if cmp.Community != nil {
		if s.Community == nil {
			return false
		}
		if s.Community.Value != cmp.Community.Value {
			return false
		}
	}

	if cmp.Username != nil {
		if s.Username == nil {
			return false
		}
		if s.Username.Value != cmp.Username.Value {
			return false
		}
	}
	if !s.SecurityLevel.PassesPartialEqFilter(cmp.SecurityLevel) {
		return false
	}
	if !s.AuthenticationProtocol.PassesPartialEqFilter(cmp.AuthenticationProtocol) {
		return false
	}

	if cmp.AuthenticationPassphrase != nil {
		if s.AuthenticationPassphrase == nil {
			return false
		}
		if s.AuthenticationPassphrase.Value != cmp.AuthenticationPassphrase.Value {
			return false
		}
	}
	if !s.PrivacyProtocol.PassesPartialEqFilter(cmp.PrivacyProtocol) {
		return false
	}

	if cmp.PrivacyPassphrase != nil {
		if s.PrivacyPassphrase == nil {
			return false
		}
		if s.PrivacyPassphrase.Value != cmp.PrivacyPassphrase.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the SNMPEndpoint matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (s *SNMPEndpoint) PassesPartialEqFilter(cmp *SNMPEndpoint) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if s == nil {
		return false
	}

	if cmp.SendResolved != nil {
		if s.SendResolved == nil {
			return false
		}
		if s.SendResolved.Value != cmp.SendResolved.Value {
			return false
		}
	}
	if !s.SettingsOverride.PassesPartialEqFilter(cmp.SettingsOverride) {
		return false
	}

	return true
}

// PassesPartialEqFilter returns whether the SNMPEndpoints matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (s *SNMPEndpoints) PassesPartialEqFilter(cmp *SNMPEndpoints) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if s == nil {
		return false
	}
	if len(s.Values) != len(cmp.Values) {
		return false
	}
	for i, f := range s.Values {
		if !f.PassesPartialEqFilter(cmp.Values[i]) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the SNMPSettings matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (s *SNMPSettings) PassesPartialEqFilter(cmp *SNMPSettings) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if s == nil {
		return false
	}

	if cmp.Target != nil {
		if s.Target == nil {
			return false
		}
		if s.Target.Value != cmp.Target.Value {
			return false
		}
	}

	if cmp.Port != nil {
		if s.Port == nil {
			return false
		}
		if s.Port.Value != cmp.Port.Value {
			return false
		}
	}

	if cmp.Transport != nil {
		if s.Transport == nil {
			return false
		}
		if s.Transport.Value != cmp.Transport.Value {
			return false
		}
	}

	if cmp.Version != nil {
		if s.Version == nil {
			return false
		}
		if s.Version.Value != cmp.Version.Value {
			return false
		}
	}
	if !s.Auth.PassesPartialEqFilter(cmp.Auth) {
		return false
	}

	if cmp.EngineId != nil {
		if s.EngineId == nil {
			return false
		}
		if s.EngineId.Value != cmp.EngineId.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the SendgridEndpoint matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (s *SendgridEndpoint) PassesPartialEqFilter(cmp *SendgridEndpoint) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if s == nil {
		return false
	}

	if cmp.SendResolved != nil {
		if s.SendResolved == nil {
			return false
		}
		if s.SendResolved.Value != cmp.SendResolved.Value {
			return false
		}
	}

	if cmp.To != nil {
		if s.To == nil {
			return false
		}
		if s.To.Value != cmp.To.Value {
			return false
		}
	}
	if !s.HttpOverride.PassesPartialEqFilter(cmp.HttpOverride) {
		return false
	}

	return true
}

// PassesPartialEqFilter returns whether the SendgridEndpoints matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (s *SendgridEndpoints) PassesPartialEqFilter(cmp *SendgridEndpoints) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if s == nil {
		return false
	}
	if len(s.Values) != len(cmp.Values) {
		return false
	}
	for i, f := range s.Values {
		if !f.PassesPartialEqFilter(cmp.Values[i]) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the SendgridSettings matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (s *SendgridSettings) PassesPartialEqFilter(cmp *SendgridSettings) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if s == nil {
		return false
	}

	if cmp.ApiKey != nil {
		if s.ApiKey == nil {
			return false
		}
		if s.ApiKey.Value != cmp.ApiKey.Value {
			return false
		}
	}

	if cmp.From != nil {
		if s.From == nil {
			return false
		}
		if s.From.Value != cmp.From.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the Settings matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (s *Settings) PassesPartialEqFilter(cmp *Settings) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if s == nil {
		return false
	}
	if !s.Email.PassesPartialEqFilter(cmp.Email) {
		return false
	}
	if !s.Http.PassesPartialEqFilter(cmp.Http) {
		return false
	}
	if !s.Slack.PassesPartialEqFilter(cmp.Slack) {
		return false
	}
	if !s.Victorops.PassesPartialEqFilter(cmp.Victorops) {
		return false
	}
	if !s.Pagerduty.PassesPartialEqFilter(cmp.Pagerduty) {
		return false
	}
	if !s.Opsgenie.PassesPartialEqFilter(cmp.Opsgenie) {
		return false
	}
	if !s.Gchat.PassesPartialEqFilter(cmp.Gchat) {
		return false
	}
	if !s.Msteams.PassesPartialEqFilter(cmp.Msteams) {
		return false
	}
	if !s.Inhibition.PassesPartialEqFilter(cmp.Inhibition) {
		return false
	}

	if cmp.BaseUrl != nil {
		if s.BaseUrl == nil {
			return false
		}
		if s.BaseUrl.Value != cmp.BaseUrl.Value {
			return false
		}
	}

	if cmp.Timezone != nil {
		if s.Timezone == nil {
			return false
		}
		if s.Timezone.Value != cmp.Timezone.Value {
			return false
		}
	}
	if !s.Syslog.PassesPartialEqFilter(cmp.Syslog) {
		return false
	}
	if !s.Snmp.PassesPartialEqFilter(cmp.Snmp) {
		return false
	}
	if !s.Sendgrid.PassesPartialEqFilter(cmp.Sendgrid) {
		return false
	}
	if !s.CueSyslog.PassesPartialEqFilter(cmp.CueSyslog) {
		return false
	}
	if !s.CueSnmp.PassesPartialEqFilter(cmp.CueSnmp) {
		return false
	}
	if !s.CueSendgrid.PassesPartialEqFilter(cmp.CueSendgrid) {
		return false
	}

	if cmp.HideTags != nil {
		if s.HideTags == nil {
			return false
		}
		if s.HideTags.Value != cmp.HideTags.Value {
			return false
		}
	}
	if !s.Zoom.PassesPartialEqFilter(cmp.Zoom) {
		return false
	}

	return true
}

// PassesPartialEqFilter returns whether the SlackEndpoint matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (s *SlackEndpoint) PassesPartialEqFilter(cmp *SlackEndpoint) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if s == nil {
		return false
	}

	if cmp.SendResolved != nil {
		if s.SendResolved == nil {
			return false
		}
		if s.SendResolved.Value != cmp.SendResolved.Value {
			return false
		}
	}
	if !s.HttpOverride.PassesPartialEqFilter(cmp.HttpOverride) {
		return false
	}
	if !s.SettingsOverride.PassesPartialEqFilter(cmp.SettingsOverride) {
		return false
	}

	return true
}

// PassesPartialEqFilter returns whether the SlackEndpoints matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (s *SlackEndpoints) PassesPartialEqFilter(cmp *SlackEndpoints) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if s == nil {
		return false
	}
	if len(s.Values) != len(cmp.Values) {
		return false
	}
	for i, f := range s.Values {
		if !f.PassesPartialEqFilter(cmp.Values[i]) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the SlackSettings matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (s *SlackSettings) PassesPartialEqFilter(cmp *SlackSettings) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if s == nil {
		return false
	}

	if cmp.Url != nil {
		if s.Url == nil {
			return false
		}
		if s.Url.Value != cmp.Url.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the SyslogEndpoint matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (s *SyslogEndpoint) PassesPartialEqFilter(cmp *SyslogEndpoint) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if s == nil {
		return false
	}

	if cmp.SendResolved != nil {
		if s.SendResolved == nil {
			return false
		}
		if s.SendResolved.Value != cmp.SendResolved.Value {
			return false
		}
	}
	if !s.SettingsOverride.PassesPartialEqFilter(cmp.SettingsOverride) {
		return false
	}

	return true
}

// PassesPartialEqFilter returns whether the SyslogEndpoints matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (s *SyslogEndpoints) PassesPartialEqFilter(cmp *SyslogEndpoints) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if s == nil {
		return false
	}
	if len(s.Values) != len(cmp.Values) {
		return false
	}
	for i, f := range s.Values {
		if !f.PassesPartialEqFilter(cmp.Values[i]) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the SyslogSettings matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (s *SyslogSettings) PassesPartialEqFilter(cmp *SyslogSettings) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if s == nil {
		return false
	}

	if cmp.Network != nil {
		if s.Network == nil {
			return false
		}
		if s.Network.Value != cmp.Network.Value {
			return false
		}
	}

	if cmp.Address != nil {
		if s.Address == nil {
			return false
		}
		if s.Address.Value != cmp.Address.Value {
			return false
		}
	}

	if cmp.Facility != nil {
		if s.Facility == nil {
			return false
		}
		if s.Facility.Value != cmp.Facility.Value {
			return false
		}
	}
	if !s.Priorities.PassesPartialEqFilter(cmp.Priorities) {
		return false
	}

	if cmp.Tag != nil {
		if s.Tag == nil {
			return false
		}
		if s.Tag.Value != cmp.Tag.Value {
			return false
		}
	}

	if cmp.PerDevice != nil {
		if s.PerDevice == nil {
			return false
		}
		if s.PerDevice.Value != cmp.PerDevice.Value {
			return false
		}
	}

	if cmp.UseTls != nil {
		if s.UseTls == nil {
			return false
		}
		if s.UseTls.Value != cmp.UseTls.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the VictorOpsEndpoint matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (v *VictorOpsEndpoint) PassesPartialEqFilter(cmp *VictorOpsEndpoint) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if v == nil {
		return false
	}

	if cmp.SendResolved != nil {
		if v.SendResolved == nil {
			return false
		}
		if v.SendResolved.Value != cmp.SendResolved.Value {
			return false
		}
	}

	if cmp.RoutingKey != nil {
		if v.RoutingKey == nil {
			return false
		}
		if v.RoutingKey.Value != cmp.RoutingKey.Value {
			return false
		}
	}
	if !v.HttpOverride.PassesPartialEqFilter(cmp.HttpOverride) {
		return false
	}
	if !v.SettingsOverride.PassesPartialEqFilter(cmp.SettingsOverride) {
		return false
	}

	return true
}

// PassesPartialEqFilter returns whether the VictorOpsEndpoints matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (v *VictorOpsEndpoints) PassesPartialEqFilter(cmp *VictorOpsEndpoints) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if v == nil {
		return false
	}
	if len(v.Values) != len(cmp.Values) {
		return false
	}
	for i, f := range v.Values {
		if !f.PassesPartialEqFilter(cmp.Values[i]) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the VictoropsSettings matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (v *VictoropsSettings) PassesPartialEqFilter(cmp *VictoropsSettings) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if v == nil {
		return false
	}

	if cmp.Key != nil {
		if v.Key == nil {
			return false
		}
		if v.Key.Value != cmp.Key.Value {
			return false
		}
	}

	if cmp.Url != nil {
		if v.Url == nil {
			return false
		}
		if v.Url.Value != cmp.Url.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the WebhookEndpoint matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (w *WebhookEndpoint) PassesPartialEqFilter(cmp *WebhookEndpoint) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if w == nil {
		return false
	}

	if cmp.SendResolved != nil {
		if w.SendResolved == nil {
			return false
		}
		if w.SendResolved.Value != cmp.SendResolved.Value {
			return false
		}
	}

	if cmp.Url != nil {
		if w.Url == nil {
			return false
		}
		if w.Url.Value != cmp.Url.Value {
			return false
		}
	}
	if !w.HttpOverride.PassesPartialEqFilter(cmp.HttpOverride) {
		return false
	}

	if cmp.SimpleOutput != nil {
		if w.SimpleOutput == nil {
			return false
		}
		if w.SimpleOutput.Value != cmp.SimpleOutput.Value {
			return false
		}
	}

	if cmp.SingleAlert != nil {
		if w.SingleAlert == nil {
			return false
		}
		if w.SingleAlert.Value != cmp.SingleAlert.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the WebhookEndpoints matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (w *WebhookEndpoints) PassesPartialEqFilter(cmp *WebhookEndpoints) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if w == nil {
		return false
	}
	if len(w.Values) != len(cmp.Values) {
		return false
	}
	for i, f := range w.Values {
		if !f.PassesPartialEqFilter(cmp.Values[i]) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the ZoomEndpoint matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (z *ZoomEndpoint) PassesPartialEqFilter(cmp *ZoomEndpoint) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if z == nil {
		return false
	}

	if cmp.SendResolved != nil {
		if z.SendResolved == nil {
			return false
		}
		if z.SendResolved.Value != cmp.SendResolved.Value {
			return false
		}
	}
	if !z.HttpOverride.PassesPartialEqFilter(cmp.HttpOverride) {
		return false
	}
	if !z.SettingsOverride.PassesPartialEqFilter(cmp.SettingsOverride) {
		return false
	}

	return true
}

// PassesPartialEqFilter returns whether the ZoomEndpoints matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (z *ZoomEndpoints) PassesPartialEqFilter(cmp *ZoomEndpoints) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if z == nil {
		return false
	}
	if len(z.Values) != len(cmp.Values) {
		return false
	}
	for i, f := range z.Values {
		if !f.PassesPartialEqFilter(cmp.Values[i]) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the ZoomSettings matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (z *ZoomSettings) PassesPartialEqFilter(cmp *ZoomSettings) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if z == nil {
		return false
	}

	if cmp.Url != nil {
		if z.Url == nil {
			return false
		}
		if z.Url.Value != cmp.Url.Value {
			return false
		}
	}

	if cmp.VerificationToken != nil {
		if z.VerificationToken == nil {
			return false
		}
		if z.VerificationToken.Value != cmp.VerificationToken.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the TemplateKey matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (t *TemplateKey) PassesPartialEqFilter(cmp *TemplateKey) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if t == nil {
		return false
	}
	if !t.TemplateType.PassesPartialEqFilter(cmp.TemplateType) {
		return false
	}

	return true
}
