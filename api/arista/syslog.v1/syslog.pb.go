// Copyright (c) 2021 Arista Networks, Inc.  All rights reserved.
// Arista Networks, Inc. Confidential and Proprietary.
// Subject to Arista Networks, Inc.'s EULA.
// FOR INTERNAL USE ONLY. NOT FOR DISTRIBUTION.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.7
// source: arista/syslog.v1/syslog.proto

package syslog

import (
	fmp "github.com/aristanetworks/cloudvision-go/api/fmp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TransportProtocol defines the set of transport protocols to be used for export.
type TransportProtocol int32

const (
	TransportProtocol_TRANSPORT_PROTOCOL_UNSPECIFIED TransportProtocol = 0
	// TRANSPORT_PROTOCOL_UDP indicates the User Datagram Protocol (UDP).
	TransportProtocol_TRANSPORT_PROTOCOL_UDP TransportProtocol = 1
)

// Enum value maps for TransportProtocol.
var (
	TransportProtocol_name = map[int32]string{
		0: "TRANSPORT_PROTOCOL_UNSPECIFIED",
		1: "TRANSPORT_PROTOCOL_UDP",
	}
	TransportProtocol_value = map[string]int32{
		"TRANSPORT_PROTOCOL_UNSPECIFIED": 0,
		"TRANSPORT_PROTOCOL_UDP":         1,
	}
)

func (x TransportProtocol) Enum() *TransportProtocol {
	p := new(TransportProtocol)
	*p = x
	return p
}

func (x TransportProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransportProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_syslog_v1_syslog_proto_enumTypes[0].Descriptor()
}

func (TransportProtocol) Type() protoreflect.EnumType {
	return &file_arista_syslog_v1_syslog_proto_enumTypes[0]
}

func (x TransportProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransportProtocol.Descriptor instead.
func (TransportProtocol) EnumDescriptor() ([]byte, []int) {
	return file_arista_syslog_v1_syslog_proto_rawDescGZIP(), []int{0}
}

// Format defines the set of formats to be used for export to syslog servers.
type Format int32

const (
	Format_FORMAT_UNSPECIFIED Format = 0
	// FORMAT_RFC3164 indicates the BSD syslog protocol as defined by RFC 3164.
	Format_FORMAT_RFC3164 Format = 1
	// FORMAT_RFC5424 indicates the IETF syslog protocol as defined by RFC 5424.
	Format_FORMAT_RFC5424 Format = 2
	// FORMAT_CUSTOM indicates a native custom format with a UTC timestamp.
	Format_FORMAT_CUSTOM Format = 3
)

// Enum value maps for Format.
var (
	Format_name = map[int32]string{
		0: "FORMAT_UNSPECIFIED",
		1: "FORMAT_RFC3164",
		2: "FORMAT_RFC5424",
		3: "FORMAT_CUSTOM",
	}
	Format_value = map[string]int32{
		"FORMAT_UNSPECIFIED": 0,
		"FORMAT_RFC3164":     1,
		"FORMAT_RFC5424":     2,
		"FORMAT_CUSTOM":      3,
	}
)

func (x Format) Enum() *Format {
	p := new(Format)
	*p = x
	return p
}

func (x Format) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Format) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_syslog_v1_syslog_proto_enumTypes[1].Descriptor()
}

func (Format) Type() protoreflect.EnumType {
	return &file_arista_syslog_v1_syslog_proto_enumTypes[1]
}

func (x Format) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Format.Descriptor instead.
func (Format) EnumDescriptor() ([]byte, []int) {
	return file_arista_syslog_v1_syslog_proto_rawDescGZIP(), []int{1}
}

// ExportResult defines the set of possible results of an export operation.
type ExportResult int32

const (
	ExportResult_EXPORT_RESULT_UNSPECIFIED ExportResult = 0
	// EXPORT_RESULT_SUCCESS indicates a successful export operation.
	ExportResult_EXPORT_RESULT_SUCCESS ExportResult = 1
	// EXPORT_RESULT_FAILURE indicates an unsuccessful export operation.
	ExportResult_EXPORT_RESULT_FAILURE ExportResult = 2
)

// Enum value maps for ExportResult.
var (
	ExportResult_name = map[int32]string{
		0: "EXPORT_RESULT_UNSPECIFIED",
		1: "EXPORT_RESULT_SUCCESS",
		2: "EXPORT_RESULT_FAILURE",
	}
	ExportResult_value = map[string]int32{
		"EXPORT_RESULT_UNSPECIFIED": 0,
		"EXPORT_RESULT_SUCCESS":     1,
		"EXPORT_RESULT_FAILURE":     2,
	}
)

func (x ExportResult) Enum() *ExportResult {
	p := new(ExportResult)
	*p = x
	return p
}

func (x ExportResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExportResult) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_syslog_v1_syslog_proto_enumTypes[2].Descriptor()
}

func (ExportResult) Type() protoreflect.EnumType {
	return &file_arista_syslog_v1_syslog_proto_enumTypes[2]
}

func (x ExportResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExportResult.Descriptor instead.
func (ExportResult) EnumDescriptor() ([]byte, []int) {
	return file_arista_syslog_v1_syslog_proto_rawDescGZIP(), []int{2}
}

// ExportKey uniquely identifies a syslog server to which to export logs.
type ExportKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// hostname_or_ip is the IP address or hostname of the syslog server.
	HostnameOrIp *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=hostname_or_ip,json=hostnameOrIp,proto3" json:"hostname_or_ip,omitempty"`
	// port_num is the destination port number of the syslog server.
	PortNum *fmp.Port `protobuf:"bytes,2,opt,name=port_num,json=portNum,proto3" json:"port_num,omitempty"`
	// protocol defines the transport protocol for the syslog export.
	Protocol TransportProtocol `protobuf:"varint,3,opt,name=protocol,proto3,enum=arista.syslog.v1.TransportProtocol" json:"protocol,omitempty"`
}

func (x *ExportKey) Reset() {
	*x = ExportKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_syslog_v1_syslog_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportKey) ProtoMessage() {}

func (x *ExportKey) ProtoReflect() protoreflect.Message {
	mi := &file_arista_syslog_v1_syslog_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportKey.ProtoReflect.Descriptor instead.
func (*ExportKey) Descriptor() ([]byte, []int) {
	return file_arista_syslog_v1_syslog_proto_rawDescGZIP(), []int{0}
}

func (x *ExportKey) GetHostnameOrIp() *wrapperspb.StringValue {
	if x != nil {
		return x.HostnameOrIp
	}
	return nil
}

func (x *ExportKey) GetPortNum() *fmp.Port {
	if x != nil {
		return x.PortNum
	}
	return nil
}

func (x *ExportKey) GetProtocol() TransportProtocol {
	if x != nil {
		return x.Protocol
	}
	return TransportProtocol_TRANSPORT_PROTOCOL_UNSPECIFIED
}

// ExportSuccess provides the details of the last successful export operation.
type ExportSuccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// timestamp provides the timestamp of last successful export opeartion.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// log_timestamp provides the timestamp of the last successful audit log.
	LogTimestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=log_timestamp,json=logTimestamp,proto3" json:"log_timestamp,omitempty"`
}

func (x *ExportSuccess) Reset() {
	*x = ExportSuccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_syslog_v1_syslog_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportSuccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportSuccess) ProtoMessage() {}

func (x *ExportSuccess) ProtoReflect() protoreflect.Message {
	mi := &file_arista_syslog_v1_syslog_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportSuccess.ProtoReflect.Descriptor instead.
func (*ExportSuccess) Descriptor() ([]byte, []int) {
	return file_arista_syslog_v1_syslog_proto_rawDescGZIP(), []int{1}
}

func (x *ExportSuccess) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ExportSuccess) GetLogTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.LogTimestamp
	}
	return nil
}

// ExportError provides the details of the most recent export error.
type ExportError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// timestamp provides the timestamp of the export error.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// error indicates the export error.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// detail indicates the audit log that was not exported.
	Detail *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=detail,proto3" json:"detail,omitempty"`
	// log_timestamp provides the timestamp of the last audit log
	// that was not exported due to error.
	LogTimestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=log_timestamp,json=logTimestamp,proto3" json:"log_timestamp,omitempty"`
}

func (x *ExportError) Reset() {
	*x = ExportError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_syslog_v1_syslog_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportError) ProtoMessage() {}

func (x *ExportError) ProtoReflect() protoreflect.Message {
	mi := &file_arista_syslog_v1_syslog_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportError.ProtoReflect.Descriptor instead.
func (*ExportError) Descriptor() ([]byte, []int) {
	return file_arista_syslog_v1_syslog_proto_rawDescGZIP(), []int{2}
}

func (x *ExportError) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ExportError) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ExportError) GetDetail() *wrapperspb.StringValue {
	if x != nil {
		return x.Detail
	}
	return nil
}

func (x *ExportError) GetLogTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.LogTimestamp
	}
	return nil
}

// ExportStats provide statistics of export operations to a syslog sever.
type ExportStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// num_success indicates the count of successful exports.
	NumSuccess *wrapperspb.UInt64Value `protobuf:"bytes,1,opt,name=num_success,json=numSuccess,proto3" json:"num_success,omitempty"`
	// num_errors indicates the count of export errors.
	NumErrors *wrapperspb.UInt64Value `protobuf:"bytes,2,opt,name=num_errors,json=numErrors,proto3" json:"num_errors,omitempty"`
	// last_result provides the status of the last export operation.
	LastResult ExportResult `protobuf:"varint,3,opt,name=last_result,json=lastResult,proto3,enum=arista.syslog.v1.ExportResult" json:"last_result,omitempty"`
}

func (x *ExportStats) Reset() {
	*x = ExportStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_syslog_v1_syslog_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportStats) ProtoMessage() {}

func (x *ExportStats) ProtoReflect() protoreflect.Message {
	mi := &file_arista_syslog_v1_syslog_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportStats.ProtoReflect.Descriptor instead.
func (*ExportStats) Descriptor() ([]byte, []int) {
	return file_arista_syslog_v1_syslog_proto_rawDescGZIP(), []int{3}
}

func (x *ExportStats) GetNumSuccess() *wrapperspb.UInt64Value {
	if x != nil {
		return x.NumSuccess
	}
	return nil
}

func (x *ExportStats) GetNumErrors() *wrapperspb.UInt64Value {
	if x != nil {
		return x.NumErrors
	}
	return nil
}

func (x *ExportStats) GetLastResult() ExportResult {
	if x != nil {
		return x.LastResult
	}
	return ExportResult_EXPORT_RESULT_UNSPECIFIED
}

// ExportConfig is used to configure a syslog server.
type ExportConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key uniquely identifies a syslog server.
	Key *ExportKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *ExportConfig) Reset() {
	*x = ExportConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_syslog_v1_syslog_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportConfig) ProtoMessage() {}

func (x *ExportConfig) ProtoReflect() protoreflect.Message {
	mi := &file_arista_syslog_v1_syslog_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportConfig.ProtoReflect.Descriptor instead.
func (*ExportConfig) Descriptor() ([]byte, []int) {
	return file_arista_syslog_v1_syslog_proto_rawDescGZIP(), []int{4}
}

func (x *ExportConfig) GetKey() *ExportKey {
	if x != nil {
		return x.Key
	}
	return nil
}

// ExportFormatConfig is used to confgure a global format for
// exporting logs to all the configured syslog servers.
type ExportFormatConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// format defines the syslog format to be used for export.
	Format Format `protobuf:"varint,1,opt,name=format,proto3,enum=arista.syslog.v1.Format" json:"format,omitempty"`
}

func (x *ExportFormatConfig) Reset() {
	*x = ExportFormatConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_syslog_v1_syslog_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportFormatConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportFormatConfig) ProtoMessage() {}

func (x *ExportFormatConfig) ProtoReflect() protoreflect.Message {
	mi := &file_arista_syslog_v1_syslog_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportFormatConfig.ProtoReflect.Descriptor instead.
func (*ExportFormatConfig) Descriptor() ([]byte, []int) {
	return file_arista_syslog_v1_syslog_proto_rawDescGZIP(), []int{5}
}

func (x *ExportFormatConfig) GetFormat() Format {
	if x != nil {
		return x.Format
	}
	return Format_FORMAT_UNSPECIFIED
}

// Export provides the export status for a syslog server.
type Export struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key uniquely identifies a syslog server
	Key *ExportKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// stats contains the statistics for all export operations.
	Stats *ExportStats `protobuf:"bytes,2,opt,name=stats,proto3" json:"stats,omitempty"`
	// last_error provides the details of the last export error.
	LastError *ExportError `protobuf:"bytes,3,opt,name=last_error,json=lastError,proto3" json:"last_error,omitempty"`
	// last_success provides details of last successful export.
	LastSuccess *ExportSuccess `protobuf:"bytes,4,opt,name=last_success,json=lastSuccess,proto3" json:"last_success,omitempty"`
}

func (x *Export) Reset() {
	*x = Export{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_syslog_v1_syslog_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Export) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Export) ProtoMessage() {}

func (x *Export) ProtoReflect() protoreflect.Message {
	mi := &file_arista_syslog_v1_syslog_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Export.ProtoReflect.Descriptor instead.
func (*Export) Descriptor() ([]byte, []int) {
	return file_arista_syslog_v1_syslog_proto_rawDescGZIP(), []int{6}
}

func (x *Export) GetKey() *ExportKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Export) GetStats() *ExportStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *Export) GetLastError() *ExportError {
	if x != nil {
		return x.LastError
	}
	return nil
}

func (x *Export) GetLastSuccess() *ExportSuccess {
	if x != nil {
		return x.LastSuccess
	}
	return nil
}

var File_arista_syslog_v1_syslog_proto protoreflect.FileDescriptor

var file_arista_syslog_v1_syslog_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x2f, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x10, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x14, 0x66, 0x6d, 0x70, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x66, 0x6d, 0x70, 0x2f, 0x69, 0x6e,
	0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbc, 0x01, 0x0a, 0x09, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x0e, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x6f, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x4f, 0x72, 0x49, 0x70, 0x12, 0x24, 0x0a, 0x08, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x66,
	0x6d, 0x70, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d,
	0x12, 0x3f, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x3a, 0x04, 0x80, 0x8e, 0x19, 0x01, 0x22, 0x8a, 0x01, 0x0a, 0x0d, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x3f, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x22, 0xf2, 0x01, 0x0a, 0x0b, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x32,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x34, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x3f, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6c, 0x6f, 0x67,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xca, 0x01, 0x0a, 0x0b, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x6e, 0x75, 0x6d,
	0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6e, 0x75,
	0x6d, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x3f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x45, 0x0a, 0x0c, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72, 0x77, 0x22, 0x4e, 0x0a,
	0x12, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x30, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3a, 0x06, 0xa2, 0x8e, 0x19, 0x02, 0x72, 0x77, 0x22, 0xf6, 0x01,
	0x0a, 0x06, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4b,
	0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x0a,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x09, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x42, 0x0a, 0x0c, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x3a, 0x06,
	0xfa, 0x8d, 0x19, 0x02, 0x72, 0x6f, 0x2a, 0x53, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x22, 0x0a, 0x1e, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f,
	0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x1a, 0x0a, 0x16, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x55, 0x44, 0x50, 0x10, 0x01, 0x2a, 0x5b, 0x0a, 0x06, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x52, 0x46, 0x43, 0x33, 0x31, 0x36, 0x34, 0x10,
	0x01, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x52, 0x46, 0x43, 0x35,
	0x34, 0x32, 0x34, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f,
	0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x03, 0x2a, 0x63, 0x0a, 0x0c, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x58, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x58, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x53,
	0x55, 0x4c, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x42, 0x2a, 0x5a,
	0x28, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2f, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x3b, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_arista_syslog_v1_syslog_proto_rawDescOnce sync.Once
	file_arista_syslog_v1_syslog_proto_rawDescData = file_arista_syslog_v1_syslog_proto_rawDesc
)

func file_arista_syslog_v1_syslog_proto_rawDescGZIP() []byte {
	file_arista_syslog_v1_syslog_proto_rawDescOnce.Do(func() {
		file_arista_syslog_v1_syslog_proto_rawDescData = protoimpl.X.CompressGZIP(file_arista_syslog_v1_syslog_proto_rawDescData)
	})
	return file_arista_syslog_v1_syslog_proto_rawDescData
}

var file_arista_syslog_v1_syslog_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_arista_syslog_v1_syslog_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_arista_syslog_v1_syslog_proto_goTypes = []interface{}{
	(TransportProtocol)(0),         // 0: arista.syslog.v1.TransportProtocol
	(Format)(0),                    // 1: arista.syslog.v1.Format
	(ExportResult)(0),              // 2: arista.syslog.v1.ExportResult
	(*ExportKey)(nil),              // 3: arista.syslog.v1.ExportKey
	(*ExportSuccess)(nil),          // 4: arista.syslog.v1.ExportSuccess
	(*ExportError)(nil),            // 5: arista.syslog.v1.ExportError
	(*ExportStats)(nil),            // 6: arista.syslog.v1.ExportStats
	(*ExportConfig)(nil),           // 7: arista.syslog.v1.ExportConfig
	(*ExportFormatConfig)(nil),     // 8: arista.syslog.v1.ExportFormatConfig
	(*Export)(nil),                 // 9: arista.syslog.v1.Export
	(*wrapperspb.StringValue)(nil), // 10: google.protobuf.StringValue
	(*fmp.Port)(nil),               // 11: fmp.Port
	(*timestamppb.Timestamp)(nil),  // 12: google.protobuf.Timestamp
	(*wrapperspb.UInt64Value)(nil), // 13: google.protobuf.UInt64Value
}
var file_arista_syslog_v1_syslog_proto_depIdxs = []int32{
	10, // 0: arista.syslog.v1.ExportKey.hostname_or_ip:type_name -> google.protobuf.StringValue
	11, // 1: arista.syslog.v1.ExportKey.port_num:type_name -> fmp.Port
	0,  // 2: arista.syslog.v1.ExportKey.protocol:type_name -> arista.syslog.v1.TransportProtocol
	12, // 3: arista.syslog.v1.ExportSuccess.timestamp:type_name -> google.protobuf.Timestamp
	12, // 4: arista.syslog.v1.ExportSuccess.log_timestamp:type_name -> google.protobuf.Timestamp
	12, // 5: arista.syslog.v1.ExportError.timestamp:type_name -> google.protobuf.Timestamp
	10, // 6: arista.syslog.v1.ExportError.error:type_name -> google.protobuf.StringValue
	10, // 7: arista.syslog.v1.ExportError.detail:type_name -> google.protobuf.StringValue
	12, // 8: arista.syslog.v1.ExportError.log_timestamp:type_name -> google.protobuf.Timestamp
	13, // 9: arista.syslog.v1.ExportStats.num_success:type_name -> google.protobuf.UInt64Value
	13, // 10: arista.syslog.v1.ExportStats.num_errors:type_name -> google.protobuf.UInt64Value
	2,  // 11: arista.syslog.v1.ExportStats.last_result:type_name -> arista.syslog.v1.ExportResult
	3,  // 12: arista.syslog.v1.ExportConfig.key:type_name -> arista.syslog.v1.ExportKey
	1,  // 13: arista.syslog.v1.ExportFormatConfig.format:type_name -> arista.syslog.v1.Format
	3,  // 14: arista.syslog.v1.Export.key:type_name -> arista.syslog.v1.ExportKey
	6,  // 15: arista.syslog.v1.Export.stats:type_name -> arista.syslog.v1.ExportStats
	5,  // 16: arista.syslog.v1.Export.last_error:type_name -> arista.syslog.v1.ExportError
	4,  // 17: arista.syslog.v1.Export.last_success:type_name -> arista.syslog.v1.ExportSuccess
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_arista_syslog_v1_syslog_proto_init() }
func file_arista_syslog_v1_syslog_proto_init() {
	if File_arista_syslog_v1_syslog_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_arista_syslog_v1_syslog_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_syslog_v1_syslog_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportSuccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_syslog_v1_syslog_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_syslog_v1_syslog_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_syslog_v1_syslog_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_syslog_v1_syslog_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportFormatConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_syslog_v1_syslog_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Export); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_arista_syslog_v1_syslog_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_arista_syslog_v1_syslog_proto_goTypes,
		DependencyIndexes: file_arista_syslog_v1_syslog_proto_depIdxs,
		EnumInfos:         file_arista_syslog_v1_syslog_proto_enumTypes,
		MessageInfos:      file_arista_syslog_v1_syslog_proto_msgTypes,
	}.Build()
	File_arista_syslog_v1_syslog_proto = out.File
	file_arista_syslog_v1_syslog_proto_rawDesc = nil
	file_arista_syslog_v1_syslog_proto_goTypes = nil
	file_arista_syslog_v1_syslog_proto_depIdxs = nil
}
