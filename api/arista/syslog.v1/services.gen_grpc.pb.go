// Copyright (c) 2021 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

//
// Code generated by boomtown. DO NOT EDIT.
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: arista/syslog.v1/services.gen.proto

package syslog

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ExportService_GetOne_FullMethodName        = "/arista.syslog.v1.ExportService/GetOne"
	ExportService_GetSome_FullMethodName       = "/arista.syslog.v1.ExportService/GetSome"
	ExportService_GetAll_FullMethodName        = "/arista.syslog.v1.ExportService/GetAll"
	ExportService_Subscribe_FullMethodName     = "/arista.syslog.v1.ExportService/Subscribe"
	ExportService_GetMeta_FullMethodName       = "/arista.syslog.v1.ExportService/GetMeta"
	ExportService_SubscribeMeta_FullMethodName = "/arista.syslog.v1.ExportService/SubscribeMeta"
)

// ExportServiceClient is the client API for ExportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExportServiceClient interface {
	GetOne(ctx context.Context, in *ExportRequest, opts ...grpc.CallOption) (*ExportResponse, error)
	GetSome(ctx context.Context, in *ExportSomeRequest, opts ...grpc.CallOption) (ExportService_GetSomeClient, error)
	GetAll(ctx context.Context, in *ExportStreamRequest, opts ...grpc.CallOption) (ExportService_GetAllClient, error)
	Subscribe(ctx context.Context, in *ExportStreamRequest, opts ...grpc.CallOption) (ExportService_SubscribeClient, error)
	GetMeta(ctx context.Context, in *ExportStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error)
	SubscribeMeta(ctx context.Context, in *ExportStreamRequest, opts ...grpc.CallOption) (ExportService_SubscribeMetaClient, error)
}

type exportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExportServiceClient(cc grpc.ClientConnInterface) ExportServiceClient {
	return &exportServiceClient{cc}
}

func (c *exportServiceClient) GetOne(ctx context.Context, in *ExportRequest, opts ...grpc.CallOption) (*ExportResponse, error) {
	out := new(ExportResponse)
	err := c.cc.Invoke(ctx, ExportService_GetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exportServiceClient) GetSome(ctx context.Context, in *ExportSomeRequest, opts ...grpc.CallOption) (ExportService_GetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExportService_ServiceDesc.Streams[0], ExportService_GetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &exportServiceGetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExportService_GetSomeClient interface {
	Recv() (*ExportSomeResponse, error)
	grpc.ClientStream
}

type exportServiceGetSomeClient struct {
	grpc.ClientStream
}

func (x *exportServiceGetSomeClient) Recv() (*ExportSomeResponse, error) {
	m := new(ExportSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exportServiceClient) GetAll(ctx context.Context, in *ExportStreamRequest, opts ...grpc.CallOption) (ExportService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExportService_ServiceDesc.Streams[1], ExportService_GetAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &exportServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExportService_GetAllClient interface {
	Recv() (*ExportStreamResponse, error)
	grpc.ClientStream
}

type exportServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *exportServiceGetAllClient) Recv() (*ExportStreamResponse, error) {
	m := new(ExportStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exportServiceClient) Subscribe(ctx context.Context, in *ExportStreamRequest, opts ...grpc.CallOption) (ExportService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExportService_ServiceDesc.Streams[2], ExportService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &exportServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExportService_SubscribeClient interface {
	Recv() (*ExportStreamResponse, error)
	grpc.ClientStream
}

type exportServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *exportServiceSubscribeClient) Recv() (*ExportStreamResponse, error) {
	m := new(ExportStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exportServiceClient) GetMeta(ctx context.Context, in *ExportStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error) {
	out := new(MetaResponse)
	err := c.cc.Invoke(ctx, ExportService_GetMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exportServiceClient) SubscribeMeta(ctx context.Context, in *ExportStreamRequest, opts ...grpc.CallOption) (ExportService_SubscribeMetaClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExportService_ServiceDesc.Streams[3], ExportService_SubscribeMeta_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &exportServiceSubscribeMetaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExportService_SubscribeMetaClient interface {
	Recv() (*MetaResponse, error)
	grpc.ClientStream
}

type exportServiceSubscribeMetaClient struct {
	grpc.ClientStream
}

func (x *exportServiceSubscribeMetaClient) Recv() (*MetaResponse, error) {
	m := new(MetaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExportServiceServer is the server API for ExportService service.
// All implementations must embed UnimplementedExportServiceServer
// for forward compatibility
type ExportServiceServer interface {
	GetOne(context.Context, *ExportRequest) (*ExportResponse, error)
	GetSome(*ExportSomeRequest, ExportService_GetSomeServer) error
	GetAll(*ExportStreamRequest, ExportService_GetAllServer) error
	Subscribe(*ExportStreamRequest, ExportService_SubscribeServer) error
	GetMeta(context.Context, *ExportStreamRequest) (*MetaResponse, error)
	SubscribeMeta(*ExportStreamRequest, ExportService_SubscribeMetaServer) error
	mustEmbedUnimplementedExportServiceServer()
}

// UnimplementedExportServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExportServiceServer struct {
}

func (UnimplementedExportServiceServer) GetOne(context.Context, *ExportRequest) (*ExportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedExportServiceServer) GetSome(*ExportSomeRequest, ExportService_GetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSome not implemented")
}
func (UnimplementedExportServiceServer) GetAll(*ExportStreamRequest, ExportService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedExportServiceServer) Subscribe(*ExportStreamRequest, ExportService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedExportServiceServer) GetMeta(context.Context, *ExportStreamRequest) (*MetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeta not implemented")
}
func (UnimplementedExportServiceServer) SubscribeMeta(*ExportStreamRequest, ExportService_SubscribeMetaServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMeta not implemented")
}
func (UnimplementedExportServiceServer) mustEmbedUnimplementedExportServiceServer() {}

// UnsafeExportServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExportServiceServer will
// result in compilation errors.
type UnsafeExportServiceServer interface {
	mustEmbedUnimplementedExportServiceServer()
}

func RegisterExportServiceServer(s grpc.ServiceRegistrar, srv ExportServiceServer) {
	s.RegisterService(&ExportService_ServiceDesc, srv)
}

func _ExportService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExportServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExportService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExportServiceServer).GetOne(ctx, req.(*ExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExportService_GetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExportSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExportServiceServer).GetSome(m, &exportServiceGetSomeServer{stream})
}

type ExportService_GetSomeServer interface {
	Send(*ExportSomeResponse) error
	grpc.ServerStream
}

type exportServiceGetSomeServer struct {
	grpc.ServerStream
}

func (x *exportServiceGetSomeServer) Send(m *ExportSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ExportService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExportStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExportServiceServer).GetAll(m, &exportServiceGetAllServer{stream})
}

type ExportService_GetAllServer interface {
	Send(*ExportStreamResponse) error
	grpc.ServerStream
}

type exportServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *exportServiceGetAllServer) Send(m *ExportStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ExportService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExportStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExportServiceServer).Subscribe(m, &exportServiceSubscribeServer{stream})
}

type ExportService_SubscribeServer interface {
	Send(*ExportStreamResponse) error
	grpc.ServerStream
}

type exportServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *exportServiceSubscribeServer) Send(m *ExportStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ExportService_GetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExportServiceServer).GetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExportService_GetMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExportServiceServer).GetMeta(ctx, req.(*ExportStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExportService_SubscribeMeta_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExportStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExportServiceServer).SubscribeMeta(m, &exportServiceSubscribeMetaServer{stream})
}

type ExportService_SubscribeMetaServer interface {
	Send(*MetaResponse) error
	grpc.ServerStream
}

type exportServiceSubscribeMetaServer struct {
	grpc.ServerStream
}

func (x *exportServiceSubscribeMetaServer) Send(m *MetaResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ExportService_ServiceDesc is the grpc.ServiceDesc for ExportService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExportService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.syslog.v1.ExportService",
	HandlerType: (*ExportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _ExportService_GetOne_Handler,
		},
		{
			MethodName: "GetMeta",
			Handler:    _ExportService_GetMeta_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSome",
			Handler:       _ExportService_GetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAll",
			Handler:       _ExportService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _ExportService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeMeta",
			Handler:       _ExportService_SubscribeMeta_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/syslog.v1/services.gen.proto",
}

const (
	ExportConfigService_GetOne_FullMethodName        = "/arista.syslog.v1.ExportConfigService/GetOne"
	ExportConfigService_GetSome_FullMethodName       = "/arista.syslog.v1.ExportConfigService/GetSome"
	ExportConfigService_GetAll_FullMethodName        = "/arista.syslog.v1.ExportConfigService/GetAll"
	ExportConfigService_Subscribe_FullMethodName     = "/arista.syslog.v1.ExportConfigService/Subscribe"
	ExportConfigService_GetMeta_FullMethodName       = "/arista.syslog.v1.ExportConfigService/GetMeta"
	ExportConfigService_SubscribeMeta_FullMethodName = "/arista.syslog.v1.ExportConfigService/SubscribeMeta"
	ExportConfigService_Set_FullMethodName           = "/arista.syslog.v1.ExportConfigService/Set"
	ExportConfigService_SetSome_FullMethodName       = "/arista.syslog.v1.ExportConfigService/SetSome"
	ExportConfigService_Delete_FullMethodName        = "/arista.syslog.v1.ExportConfigService/Delete"
	ExportConfigService_DeleteSome_FullMethodName    = "/arista.syslog.v1.ExportConfigService/DeleteSome"
	ExportConfigService_DeleteAll_FullMethodName     = "/arista.syslog.v1.ExportConfigService/DeleteAll"
)

// ExportConfigServiceClient is the client API for ExportConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExportConfigServiceClient interface {
	GetOne(ctx context.Context, in *ExportConfigRequest, opts ...grpc.CallOption) (*ExportConfigResponse, error)
	GetSome(ctx context.Context, in *ExportConfigSomeRequest, opts ...grpc.CallOption) (ExportConfigService_GetSomeClient, error)
	GetAll(ctx context.Context, in *ExportConfigStreamRequest, opts ...grpc.CallOption) (ExportConfigService_GetAllClient, error)
	Subscribe(ctx context.Context, in *ExportConfigStreamRequest, opts ...grpc.CallOption) (ExportConfigService_SubscribeClient, error)
	GetMeta(ctx context.Context, in *ExportConfigStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error)
	SubscribeMeta(ctx context.Context, in *ExportConfigStreamRequest, opts ...grpc.CallOption) (ExportConfigService_SubscribeMetaClient, error)
	Set(ctx context.Context, in *ExportConfigSetRequest, opts ...grpc.CallOption) (*ExportConfigSetResponse, error)
	SetSome(ctx context.Context, in *ExportConfigSetSomeRequest, opts ...grpc.CallOption) (ExportConfigService_SetSomeClient, error)
	Delete(ctx context.Context, in *ExportConfigDeleteRequest, opts ...grpc.CallOption) (*ExportConfigDeleteResponse, error)
	DeleteSome(ctx context.Context, in *ExportConfigDeleteSomeRequest, opts ...grpc.CallOption) (ExportConfigService_DeleteSomeClient, error)
	DeleteAll(ctx context.Context, in *ExportConfigDeleteAllRequest, opts ...grpc.CallOption) (ExportConfigService_DeleteAllClient, error)
}

type exportConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExportConfigServiceClient(cc grpc.ClientConnInterface) ExportConfigServiceClient {
	return &exportConfigServiceClient{cc}
}

func (c *exportConfigServiceClient) GetOne(ctx context.Context, in *ExportConfigRequest, opts ...grpc.CallOption) (*ExportConfigResponse, error) {
	out := new(ExportConfigResponse)
	err := c.cc.Invoke(ctx, ExportConfigService_GetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exportConfigServiceClient) GetSome(ctx context.Context, in *ExportConfigSomeRequest, opts ...grpc.CallOption) (ExportConfigService_GetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExportConfigService_ServiceDesc.Streams[0], ExportConfigService_GetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &exportConfigServiceGetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExportConfigService_GetSomeClient interface {
	Recv() (*ExportConfigSomeResponse, error)
	grpc.ClientStream
}

type exportConfigServiceGetSomeClient struct {
	grpc.ClientStream
}

func (x *exportConfigServiceGetSomeClient) Recv() (*ExportConfigSomeResponse, error) {
	m := new(ExportConfigSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exportConfigServiceClient) GetAll(ctx context.Context, in *ExportConfigStreamRequest, opts ...grpc.CallOption) (ExportConfigService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExportConfigService_ServiceDesc.Streams[1], ExportConfigService_GetAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &exportConfigServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExportConfigService_GetAllClient interface {
	Recv() (*ExportConfigStreamResponse, error)
	grpc.ClientStream
}

type exportConfigServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *exportConfigServiceGetAllClient) Recv() (*ExportConfigStreamResponse, error) {
	m := new(ExportConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exportConfigServiceClient) Subscribe(ctx context.Context, in *ExportConfigStreamRequest, opts ...grpc.CallOption) (ExportConfigService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExportConfigService_ServiceDesc.Streams[2], ExportConfigService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &exportConfigServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExportConfigService_SubscribeClient interface {
	Recv() (*ExportConfigStreamResponse, error)
	grpc.ClientStream
}

type exportConfigServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *exportConfigServiceSubscribeClient) Recv() (*ExportConfigStreamResponse, error) {
	m := new(ExportConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exportConfigServiceClient) GetMeta(ctx context.Context, in *ExportConfigStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error) {
	out := new(MetaResponse)
	err := c.cc.Invoke(ctx, ExportConfigService_GetMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exportConfigServiceClient) SubscribeMeta(ctx context.Context, in *ExportConfigStreamRequest, opts ...grpc.CallOption) (ExportConfigService_SubscribeMetaClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExportConfigService_ServiceDesc.Streams[3], ExportConfigService_SubscribeMeta_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &exportConfigServiceSubscribeMetaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExportConfigService_SubscribeMetaClient interface {
	Recv() (*MetaResponse, error)
	grpc.ClientStream
}

type exportConfigServiceSubscribeMetaClient struct {
	grpc.ClientStream
}

func (x *exportConfigServiceSubscribeMetaClient) Recv() (*MetaResponse, error) {
	m := new(MetaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exportConfigServiceClient) Set(ctx context.Context, in *ExportConfigSetRequest, opts ...grpc.CallOption) (*ExportConfigSetResponse, error) {
	out := new(ExportConfigSetResponse)
	err := c.cc.Invoke(ctx, ExportConfigService_Set_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exportConfigServiceClient) SetSome(ctx context.Context, in *ExportConfigSetSomeRequest, opts ...grpc.CallOption) (ExportConfigService_SetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExportConfigService_ServiceDesc.Streams[4], ExportConfigService_SetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &exportConfigServiceSetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExportConfigService_SetSomeClient interface {
	Recv() (*ExportConfigSetSomeResponse, error)
	grpc.ClientStream
}

type exportConfigServiceSetSomeClient struct {
	grpc.ClientStream
}

func (x *exportConfigServiceSetSomeClient) Recv() (*ExportConfigSetSomeResponse, error) {
	m := new(ExportConfigSetSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exportConfigServiceClient) Delete(ctx context.Context, in *ExportConfigDeleteRequest, opts ...grpc.CallOption) (*ExportConfigDeleteResponse, error) {
	out := new(ExportConfigDeleteResponse)
	err := c.cc.Invoke(ctx, ExportConfigService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exportConfigServiceClient) DeleteSome(ctx context.Context, in *ExportConfigDeleteSomeRequest, opts ...grpc.CallOption) (ExportConfigService_DeleteSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExportConfigService_ServiceDesc.Streams[5], ExportConfigService_DeleteSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &exportConfigServiceDeleteSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExportConfigService_DeleteSomeClient interface {
	Recv() (*ExportConfigDeleteSomeResponse, error)
	grpc.ClientStream
}

type exportConfigServiceDeleteSomeClient struct {
	grpc.ClientStream
}

func (x *exportConfigServiceDeleteSomeClient) Recv() (*ExportConfigDeleteSomeResponse, error) {
	m := new(ExportConfigDeleteSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exportConfigServiceClient) DeleteAll(ctx context.Context, in *ExportConfigDeleteAllRequest, opts ...grpc.CallOption) (ExportConfigService_DeleteAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExportConfigService_ServiceDesc.Streams[6], ExportConfigService_DeleteAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &exportConfigServiceDeleteAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExportConfigService_DeleteAllClient interface {
	Recv() (*ExportConfigDeleteAllResponse, error)
	grpc.ClientStream
}

type exportConfigServiceDeleteAllClient struct {
	grpc.ClientStream
}

func (x *exportConfigServiceDeleteAllClient) Recv() (*ExportConfigDeleteAllResponse, error) {
	m := new(ExportConfigDeleteAllResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExportConfigServiceServer is the server API for ExportConfigService service.
// All implementations must embed UnimplementedExportConfigServiceServer
// for forward compatibility
type ExportConfigServiceServer interface {
	GetOne(context.Context, *ExportConfigRequest) (*ExportConfigResponse, error)
	GetSome(*ExportConfigSomeRequest, ExportConfigService_GetSomeServer) error
	GetAll(*ExportConfigStreamRequest, ExportConfigService_GetAllServer) error
	Subscribe(*ExportConfigStreamRequest, ExportConfigService_SubscribeServer) error
	GetMeta(context.Context, *ExportConfigStreamRequest) (*MetaResponse, error)
	SubscribeMeta(*ExportConfigStreamRequest, ExportConfigService_SubscribeMetaServer) error
	Set(context.Context, *ExportConfigSetRequest) (*ExportConfigSetResponse, error)
	SetSome(*ExportConfigSetSomeRequest, ExportConfigService_SetSomeServer) error
	Delete(context.Context, *ExportConfigDeleteRequest) (*ExportConfigDeleteResponse, error)
	DeleteSome(*ExportConfigDeleteSomeRequest, ExportConfigService_DeleteSomeServer) error
	DeleteAll(*ExportConfigDeleteAllRequest, ExportConfigService_DeleteAllServer) error
	mustEmbedUnimplementedExportConfigServiceServer()
}

// UnimplementedExportConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExportConfigServiceServer struct {
}

func (UnimplementedExportConfigServiceServer) GetOne(context.Context, *ExportConfigRequest) (*ExportConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedExportConfigServiceServer) GetSome(*ExportConfigSomeRequest, ExportConfigService_GetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSome not implemented")
}
func (UnimplementedExportConfigServiceServer) GetAll(*ExportConfigStreamRequest, ExportConfigService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedExportConfigServiceServer) Subscribe(*ExportConfigStreamRequest, ExportConfigService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedExportConfigServiceServer) GetMeta(context.Context, *ExportConfigStreamRequest) (*MetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeta not implemented")
}
func (UnimplementedExportConfigServiceServer) SubscribeMeta(*ExportConfigStreamRequest, ExportConfigService_SubscribeMetaServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMeta not implemented")
}
func (UnimplementedExportConfigServiceServer) Set(context.Context, *ExportConfigSetRequest) (*ExportConfigSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedExportConfigServiceServer) SetSome(*ExportConfigSetSomeRequest, ExportConfigService_SetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method SetSome not implemented")
}
func (UnimplementedExportConfigServiceServer) Delete(context.Context, *ExportConfigDeleteRequest) (*ExportConfigDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedExportConfigServiceServer) DeleteSome(*ExportConfigDeleteSomeRequest, ExportConfigService_DeleteSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteSome not implemented")
}
func (UnimplementedExportConfigServiceServer) DeleteAll(*ExportConfigDeleteAllRequest, ExportConfigService_DeleteAllServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteAll not implemented")
}
func (UnimplementedExportConfigServiceServer) mustEmbedUnimplementedExportConfigServiceServer() {}

// UnsafeExportConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExportConfigServiceServer will
// result in compilation errors.
type UnsafeExportConfigServiceServer interface {
	mustEmbedUnimplementedExportConfigServiceServer()
}

func RegisterExportConfigServiceServer(s grpc.ServiceRegistrar, srv ExportConfigServiceServer) {
	s.RegisterService(&ExportConfigService_ServiceDesc, srv)
}

func _ExportConfigService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExportConfigServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExportConfigService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExportConfigServiceServer).GetOne(ctx, req.(*ExportConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExportConfigService_GetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExportConfigSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExportConfigServiceServer).GetSome(m, &exportConfigServiceGetSomeServer{stream})
}

type ExportConfigService_GetSomeServer interface {
	Send(*ExportConfigSomeResponse) error
	grpc.ServerStream
}

type exportConfigServiceGetSomeServer struct {
	grpc.ServerStream
}

func (x *exportConfigServiceGetSomeServer) Send(m *ExportConfigSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ExportConfigService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExportConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExportConfigServiceServer).GetAll(m, &exportConfigServiceGetAllServer{stream})
}

type ExportConfigService_GetAllServer interface {
	Send(*ExportConfigStreamResponse) error
	grpc.ServerStream
}

type exportConfigServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *exportConfigServiceGetAllServer) Send(m *ExportConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ExportConfigService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExportConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExportConfigServiceServer).Subscribe(m, &exportConfigServiceSubscribeServer{stream})
}

type ExportConfigService_SubscribeServer interface {
	Send(*ExportConfigStreamResponse) error
	grpc.ServerStream
}

type exportConfigServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *exportConfigServiceSubscribeServer) Send(m *ExportConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ExportConfigService_GetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportConfigStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExportConfigServiceServer).GetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExportConfigService_GetMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExportConfigServiceServer).GetMeta(ctx, req.(*ExportConfigStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExportConfigService_SubscribeMeta_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExportConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExportConfigServiceServer).SubscribeMeta(m, &exportConfigServiceSubscribeMetaServer{stream})
}

type ExportConfigService_SubscribeMetaServer interface {
	Send(*MetaResponse) error
	grpc.ServerStream
}

type exportConfigServiceSubscribeMetaServer struct {
	grpc.ServerStream
}

func (x *exportConfigServiceSubscribeMetaServer) Send(m *MetaResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ExportConfigService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportConfigSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExportConfigServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExportConfigService_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExportConfigServiceServer).Set(ctx, req.(*ExportConfigSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExportConfigService_SetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExportConfigSetSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExportConfigServiceServer).SetSome(m, &exportConfigServiceSetSomeServer{stream})
}

type ExportConfigService_SetSomeServer interface {
	Send(*ExportConfigSetSomeResponse) error
	grpc.ServerStream
}

type exportConfigServiceSetSomeServer struct {
	grpc.ServerStream
}

func (x *exportConfigServiceSetSomeServer) Send(m *ExportConfigSetSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ExportConfigService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportConfigDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExportConfigServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExportConfigService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExportConfigServiceServer).Delete(ctx, req.(*ExportConfigDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExportConfigService_DeleteSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExportConfigDeleteSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExportConfigServiceServer).DeleteSome(m, &exportConfigServiceDeleteSomeServer{stream})
}

type ExportConfigService_DeleteSomeServer interface {
	Send(*ExportConfigDeleteSomeResponse) error
	grpc.ServerStream
}

type exportConfigServiceDeleteSomeServer struct {
	grpc.ServerStream
}

func (x *exportConfigServiceDeleteSomeServer) Send(m *ExportConfigDeleteSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ExportConfigService_DeleteAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExportConfigDeleteAllRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExportConfigServiceServer).DeleteAll(m, &exportConfigServiceDeleteAllServer{stream})
}

type ExportConfigService_DeleteAllServer interface {
	Send(*ExportConfigDeleteAllResponse) error
	grpc.ServerStream
}

type exportConfigServiceDeleteAllServer struct {
	grpc.ServerStream
}

func (x *exportConfigServiceDeleteAllServer) Send(m *ExportConfigDeleteAllResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ExportConfigService_ServiceDesc is the grpc.ServiceDesc for ExportConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExportConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.syslog.v1.ExportConfigService",
	HandlerType: (*ExportConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _ExportConfigService_GetOne_Handler,
		},
		{
			MethodName: "GetMeta",
			Handler:    _ExportConfigService_GetMeta_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _ExportConfigService_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ExportConfigService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSome",
			Handler:       _ExportConfigService_GetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAll",
			Handler:       _ExportConfigService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _ExportConfigService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeMeta",
			Handler:       _ExportConfigService_SubscribeMeta_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SetSome",
			Handler:       _ExportConfigService_SetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteSome",
			Handler:       _ExportConfigService_DeleteSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteAll",
			Handler:       _ExportConfigService_DeleteAll_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/syslog.v1/services.gen.proto",
}

const (
	ExportFormatConfigService_GetOne_FullMethodName        = "/arista.syslog.v1.ExportFormatConfigService/GetOne"
	ExportFormatConfigService_GetAll_FullMethodName        = "/arista.syslog.v1.ExportFormatConfigService/GetAll"
	ExportFormatConfigService_Subscribe_FullMethodName     = "/arista.syslog.v1.ExportFormatConfigService/Subscribe"
	ExportFormatConfigService_SubscribeMeta_FullMethodName = "/arista.syslog.v1.ExportFormatConfigService/SubscribeMeta"
	ExportFormatConfigService_Set_FullMethodName           = "/arista.syslog.v1.ExportFormatConfigService/Set"
)

// ExportFormatConfigServiceClient is the client API for ExportFormatConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExportFormatConfigServiceClient interface {
	GetOne(ctx context.Context, in *ExportFormatConfigRequest, opts ...grpc.CallOption) (*ExportFormatConfigResponse, error)
	GetAll(ctx context.Context, in *ExportFormatConfigStreamRequest, opts ...grpc.CallOption) (ExportFormatConfigService_GetAllClient, error)
	Subscribe(ctx context.Context, in *ExportFormatConfigStreamRequest, opts ...grpc.CallOption) (ExportFormatConfigService_SubscribeClient, error)
	SubscribeMeta(ctx context.Context, in *ExportFormatConfigStreamRequest, opts ...grpc.CallOption) (ExportFormatConfigService_SubscribeMetaClient, error)
	Set(ctx context.Context, in *ExportFormatConfigSetRequest, opts ...grpc.CallOption) (*ExportFormatConfigSetResponse, error)
}

type exportFormatConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExportFormatConfigServiceClient(cc grpc.ClientConnInterface) ExportFormatConfigServiceClient {
	return &exportFormatConfigServiceClient{cc}
}

func (c *exportFormatConfigServiceClient) GetOne(ctx context.Context, in *ExportFormatConfigRequest, opts ...grpc.CallOption) (*ExportFormatConfigResponse, error) {
	out := new(ExportFormatConfigResponse)
	err := c.cc.Invoke(ctx, ExportFormatConfigService_GetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exportFormatConfigServiceClient) GetAll(ctx context.Context, in *ExportFormatConfigStreamRequest, opts ...grpc.CallOption) (ExportFormatConfigService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExportFormatConfigService_ServiceDesc.Streams[0], ExportFormatConfigService_GetAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &exportFormatConfigServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExportFormatConfigService_GetAllClient interface {
	Recv() (*ExportFormatConfigStreamResponse, error)
	grpc.ClientStream
}

type exportFormatConfigServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *exportFormatConfigServiceGetAllClient) Recv() (*ExportFormatConfigStreamResponse, error) {
	m := new(ExportFormatConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exportFormatConfigServiceClient) Subscribe(ctx context.Context, in *ExportFormatConfigStreamRequest, opts ...grpc.CallOption) (ExportFormatConfigService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExportFormatConfigService_ServiceDesc.Streams[1], ExportFormatConfigService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &exportFormatConfigServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExportFormatConfigService_SubscribeClient interface {
	Recv() (*ExportFormatConfigStreamResponse, error)
	grpc.ClientStream
}

type exportFormatConfigServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *exportFormatConfigServiceSubscribeClient) Recv() (*ExportFormatConfigStreamResponse, error) {
	m := new(ExportFormatConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exportFormatConfigServiceClient) SubscribeMeta(ctx context.Context, in *ExportFormatConfigStreamRequest, opts ...grpc.CallOption) (ExportFormatConfigService_SubscribeMetaClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExportFormatConfigService_ServiceDesc.Streams[2], ExportFormatConfigService_SubscribeMeta_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &exportFormatConfigServiceSubscribeMetaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExportFormatConfigService_SubscribeMetaClient interface {
	Recv() (*MetaResponse, error)
	grpc.ClientStream
}

type exportFormatConfigServiceSubscribeMetaClient struct {
	grpc.ClientStream
}

func (x *exportFormatConfigServiceSubscribeMetaClient) Recv() (*MetaResponse, error) {
	m := new(MetaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exportFormatConfigServiceClient) Set(ctx context.Context, in *ExportFormatConfigSetRequest, opts ...grpc.CallOption) (*ExportFormatConfigSetResponse, error) {
	out := new(ExportFormatConfigSetResponse)
	err := c.cc.Invoke(ctx, ExportFormatConfigService_Set_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExportFormatConfigServiceServer is the server API for ExportFormatConfigService service.
// All implementations must embed UnimplementedExportFormatConfigServiceServer
// for forward compatibility
type ExportFormatConfigServiceServer interface {
	GetOne(context.Context, *ExportFormatConfigRequest) (*ExportFormatConfigResponse, error)
	GetAll(*ExportFormatConfigStreamRequest, ExportFormatConfigService_GetAllServer) error
	Subscribe(*ExportFormatConfigStreamRequest, ExportFormatConfigService_SubscribeServer) error
	SubscribeMeta(*ExportFormatConfigStreamRequest, ExportFormatConfigService_SubscribeMetaServer) error
	Set(context.Context, *ExportFormatConfigSetRequest) (*ExportFormatConfigSetResponse, error)
	mustEmbedUnimplementedExportFormatConfigServiceServer()
}

// UnimplementedExportFormatConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExportFormatConfigServiceServer struct {
}

func (UnimplementedExportFormatConfigServiceServer) GetOne(context.Context, *ExportFormatConfigRequest) (*ExportFormatConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedExportFormatConfigServiceServer) GetAll(*ExportFormatConfigStreamRequest, ExportFormatConfigService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedExportFormatConfigServiceServer) Subscribe(*ExportFormatConfigStreamRequest, ExportFormatConfigService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedExportFormatConfigServiceServer) SubscribeMeta(*ExportFormatConfigStreamRequest, ExportFormatConfigService_SubscribeMetaServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMeta not implemented")
}
func (UnimplementedExportFormatConfigServiceServer) Set(context.Context, *ExportFormatConfigSetRequest) (*ExportFormatConfigSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedExportFormatConfigServiceServer) mustEmbedUnimplementedExportFormatConfigServiceServer() {
}

// UnsafeExportFormatConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExportFormatConfigServiceServer will
// result in compilation errors.
type UnsafeExportFormatConfigServiceServer interface {
	mustEmbedUnimplementedExportFormatConfigServiceServer()
}

func RegisterExportFormatConfigServiceServer(s grpc.ServiceRegistrar, srv ExportFormatConfigServiceServer) {
	s.RegisterService(&ExportFormatConfigService_ServiceDesc, srv)
}

func _ExportFormatConfigService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportFormatConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExportFormatConfigServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExportFormatConfigService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExportFormatConfigServiceServer).GetOne(ctx, req.(*ExportFormatConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExportFormatConfigService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExportFormatConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExportFormatConfigServiceServer).GetAll(m, &exportFormatConfigServiceGetAllServer{stream})
}

type ExportFormatConfigService_GetAllServer interface {
	Send(*ExportFormatConfigStreamResponse) error
	grpc.ServerStream
}

type exportFormatConfigServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *exportFormatConfigServiceGetAllServer) Send(m *ExportFormatConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ExportFormatConfigService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExportFormatConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExportFormatConfigServiceServer).Subscribe(m, &exportFormatConfigServiceSubscribeServer{stream})
}

type ExportFormatConfigService_SubscribeServer interface {
	Send(*ExportFormatConfigStreamResponse) error
	grpc.ServerStream
}

type exportFormatConfigServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *exportFormatConfigServiceSubscribeServer) Send(m *ExportFormatConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ExportFormatConfigService_SubscribeMeta_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExportFormatConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExportFormatConfigServiceServer).SubscribeMeta(m, &exportFormatConfigServiceSubscribeMetaServer{stream})
}

type ExportFormatConfigService_SubscribeMetaServer interface {
	Send(*MetaResponse) error
	grpc.ServerStream
}

type exportFormatConfigServiceSubscribeMetaServer struct {
	grpc.ServerStream
}

func (x *exportFormatConfigServiceSubscribeMetaServer) Send(m *MetaResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ExportFormatConfigService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportFormatConfigSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExportFormatConfigServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExportFormatConfigService_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExportFormatConfigServiceServer).Set(ctx, req.(*ExportFormatConfigSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExportFormatConfigService_ServiceDesc is the grpc.ServiceDesc for ExportFormatConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExportFormatConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.syslog.v1.ExportFormatConfigService",
	HandlerType: (*ExportFormatConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _ExportFormatConfigService_GetOne_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _ExportFormatConfigService_Set_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAll",
			Handler:       _ExportFormatConfigService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _ExportFormatConfigService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeMeta",
			Handler:       _ExportFormatConfigService_SubscribeMeta_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/syslog.v1/services.gen.proto",
}
