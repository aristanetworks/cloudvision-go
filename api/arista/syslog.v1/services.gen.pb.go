// Copyright (c) 2021 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

//
// Code generated by boomtown. DO NOT EDIT.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v4.24.4
// source: arista/syslog.v1/services.gen.proto

package syslog

import (
	subscriptions "github.com/aristanetworks/cloudvision-go/api/arista/subscriptions"
	time "github.com/aristanetworks/cloudvision-go/api/arista/time"
	fmp "github.com/aristanetworks/cloudvision-go/api/fmp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MetaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time holds the timestamp of the last item included in the metadata calculation.
	Time *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,2,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
	// Count is the number of items present under the conditions of the request.
	Count *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *MetaResponse) Reset() {
	*x = MetaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaResponse) ProtoMessage() {}

func (x *MetaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaResponse.ProtoReflect.Descriptor instead.
func (*MetaResponse) Descriptor() ([]byte, []int) {
	return file_arista_syslog_v1_services_gen_proto_rawDescGZIP(), []int{0}
}

func (x *MetaResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *MetaResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation(0)
}

func (x *MetaResponse) GetCount() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Count
	}
	return nil
}

type ExportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a Export instance to retrieve.
	// This value must be populated.
	Key *ExportKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *ExportRequest) Reset() {
	*x = ExportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportRequest) ProtoMessage() {}

func (x *ExportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportRequest.ProtoReflect.Descriptor instead.
func (*ExportRequest) Descriptor() ([]byte, []int) {
	return file_arista_syslog_v1_services_gen_proto_rawDescGZIP(), []int{1}
}

func (x *ExportRequest) GetKey() *ExportKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ExportRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type ExportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *Export `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// Export instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *ExportResponse) Reset() {
	*x = ExportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportResponse) ProtoMessage() {}

func (x *ExportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportResponse.ProtoReflect.Descriptor instead.
func (*ExportResponse) Descriptor() ([]byte, []int) {
	return file_arista_syslog_v1_services_gen_proto_rawDescGZIP(), []int{2}
}

func (x *ExportResponse) GetValue() *Export {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ExportResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type ExportSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*ExportKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *ExportSomeRequest) Reset() {
	*x = ExportSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportSomeRequest) ProtoMessage() {}

func (x *ExportSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportSomeRequest.ProtoReflect.Descriptor instead.
func (*ExportSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_syslog_v1_services_gen_proto_rawDescGZIP(), []int{3}
}

func (x *ExportSomeRequest) GetKeys() []*ExportKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *ExportSomeRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type ExportSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *Export `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// Export instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *ExportSomeResponse) Reset() {
	*x = ExportSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportSomeResponse) ProtoMessage() {}

func (x *ExportSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportSomeResponse.ProtoReflect.Descriptor instead.
func (*ExportSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_syslog_v1_services_gen_proto_rawDescGZIP(), []int{4}
}

func (x *ExportSomeResponse) GetValue() *Export {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ExportSomeResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ExportSomeResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type ExportStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*Export `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each Export at end.
	//   - Each Export response is fully-specified (all fields set).
	//   - start: Returns the state of each Export at start, followed by updates until now.
	//   - Each Export response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each Export at start, followed by updates
	//     until end.
	//   - Each Export response at start is fully-specified, but updates until end may
	//     be partial.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *ExportStreamRequest) Reset() {
	*x = ExportStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportStreamRequest) ProtoMessage() {}

func (x *ExportStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportStreamRequest.ProtoReflect.Descriptor instead.
func (*ExportStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_syslog_v1_services_gen_proto_rawDescGZIP(), []int{5}
}

func (x *ExportStreamRequest) GetPartialEqFilter() []*Export {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *ExportStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type ExportStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *Export `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this Export's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the Export value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *ExportStreamResponse) Reset() {
	*x = ExportStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportStreamResponse) ProtoMessage() {}

func (x *ExportStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportStreamResponse.ProtoReflect.Descriptor instead.
func (*ExportStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_syslog_v1_services_gen_proto_rawDescGZIP(), []int{6}
}

func (x *ExportStreamResponse) GetValue() *Export {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ExportStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *ExportStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation(0)
}

type ExportConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a ExportConfig instance to retrieve.
	// This value must be populated.
	Key *ExportKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *ExportConfigRequest) Reset() {
	*x = ExportConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportConfigRequest) ProtoMessage() {}

func (x *ExportConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportConfigRequest.ProtoReflect.Descriptor instead.
func (*ExportConfigRequest) Descriptor() ([]byte, []int) {
	return file_arista_syslog_v1_services_gen_proto_rawDescGZIP(), []int{7}
}

func (x *ExportConfigRequest) GetKey() *ExportKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ExportConfigRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type ExportConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *ExportConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// ExportConfig instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *ExportConfigResponse) Reset() {
	*x = ExportConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportConfigResponse) ProtoMessage() {}

func (x *ExportConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportConfigResponse.ProtoReflect.Descriptor instead.
func (*ExportConfigResponse) Descriptor() ([]byte, []int) {
	return file_arista_syslog_v1_services_gen_proto_rawDescGZIP(), []int{8}
}

func (x *ExportConfigResponse) GetValue() *ExportConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ExportConfigResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type ExportConfigSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*ExportKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *ExportConfigSomeRequest) Reset() {
	*x = ExportConfigSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportConfigSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportConfigSomeRequest) ProtoMessage() {}

func (x *ExportConfigSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportConfigSomeRequest.ProtoReflect.Descriptor instead.
func (*ExportConfigSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_syslog_v1_services_gen_proto_rawDescGZIP(), []int{9}
}

func (x *ExportConfigSomeRequest) GetKeys() []*ExportKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *ExportConfigSomeRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type ExportConfigSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *ExportConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// ExportConfig instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *ExportConfigSomeResponse) Reset() {
	*x = ExportConfigSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportConfigSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportConfigSomeResponse) ProtoMessage() {}

func (x *ExportConfigSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportConfigSomeResponse.ProtoReflect.Descriptor instead.
func (*ExportConfigSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_syslog_v1_services_gen_proto_rawDescGZIP(), []int{10}
}

func (x *ExportConfigSomeResponse) GetValue() *ExportConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ExportConfigSomeResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ExportConfigSomeResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type ExportConfigStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*ExportConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each ExportConfig at end.
	//   - Each ExportConfig response is fully-specified (all fields set).
	//   - start: Returns the state of each ExportConfig at start, followed by updates until now.
	//   - Each ExportConfig response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each ExportConfig at start, followed by updates
	//     until end.
	//   - Each ExportConfig response at start is fully-specified, but updates until end may
	//     be partial.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *ExportConfigStreamRequest) Reset() {
	*x = ExportConfigStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportConfigStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportConfigStreamRequest) ProtoMessage() {}

func (x *ExportConfigStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportConfigStreamRequest.ProtoReflect.Descriptor instead.
func (*ExportConfigStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_syslog_v1_services_gen_proto_rawDescGZIP(), []int{11}
}

func (x *ExportConfigStreamRequest) GetPartialEqFilter() []*ExportConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *ExportConfigStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type ExportConfigStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *ExportConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this ExportConfig's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the ExportConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *ExportConfigStreamResponse) Reset() {
	*x = ExportConfigStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportConfigStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportConfigStreamResponse) ProtoMessage() {}

func (x *ExportConfigStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportConfigStreamResponse.ProtoReflect.Descriptor instead.
func (*ExportConfigStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_syslog_v1_services_gen_proto_rawDescGZIP(), []int{12}
}

func (x *ExportConfigStreamResponse) GetValue() *ExportConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ExportConfigStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *ExportConfigStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation(0)
}

type ExportConfigSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ExportConfig carries the value to set into the datastore.
	// See the documentation on the ExportConfig struct for which fields are required.
	Value *ExportConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ExportConfigSetRequest) Reset() {
	*x = ExportConfigSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportConfigSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportConfigSetRequest) ProtoMessage() {}

func (x *ExportConfigSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportConfigSetRequest.ProtoReflect.Descriptor instead.
func (*ExportConfigSetRequest) Descriptor() ([]byte, []int) {
	return file_arista_syslog_v1_services_gen_proto_rawDescGZIP(), []int{13}
}

func (x *ExportConfigSetRequest) GetValue() *ExportConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

type ExportConfigSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value carries all the values given in the ExportConfigSetRequest as well
	// as any server-generated values.
	Value *ExportConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//   - it is after the time the request was received
	//   - a time-ranged query with StartTime==CreatedAt will include this instance.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *ExportConfigSetResponse) Reset() {
	*x = ExportConfigSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportConfigSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportConfigSetResponse) ProtoMessage() {}

func (x *ExportConfigSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportConfigSetResponse.ProtoReflect.Descriptor instead.
func (*ExportConfigSetResponse) Descriptor() ([]byte, []int) {
	return file_arista_syslog_v1_services_gen_proto_rawDescGZIP(), []int{14}
}

func (x *ExportConfigSetResponse) GetValue() *ExportConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ExportConfigSetResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type ExportConfigSetSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value contains a list of ExportConfig values to write.
	// It is possible to provide more values than can fit within either:
	//   - the maxiumum send size of the client
	//   - the maximum receive size of the server
	//
	// If this error occurs you must reduce the number of values sent.
	// See gRPC "maximum message size" documentation for more information.
	Values []*ExportConfig `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *ExportConfigSetSomeRequest) Reset() {
	*x = ExportConfigSetSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportConfigSetSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportConfigSetSomeRequest) ProtoMessage() {}

func (x *ExportConfigSetSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportConfigSetSomeRequest.ProtoReflect.Descriptor instead.
func (*ExportConfigSetSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_syslog_v1_services_gen_proto_rawDescGZIP(), []int{15}
}

func (x *ExportConfigSetSomeRequest) GetValues() []*ExportConfig {
	if x != nil {
		return x.Values
	}
	return nil
}

type ExportConfigSetSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *ExportKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Error string     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ExportConfigSetSomeResponse) Reset() {
	*x = ExportConfigSetSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportConfigSetSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportConfigSetSomeResponse) ProtoMessage() {}

func (x *ExportConfigSetSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportConfigSetSomeResponse.ProtoReflect.Descriptor instead.
func (*ExportConfigSetSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_syslog_v1_services_gen_proto_rawDescGZIP(), []int{16}
}

func (x *ExportConfigSetSomeResponse) GetKey() *ExportKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ExportConfigSetSomeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type ExportConfigDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key indicates which ExportConfig instance to remove.
	// This field must always be set.
	Key *ExportKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *ExportConfigDeleteRequest) Reset() {
	*x = ExportConfigDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportConfigDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportConfigDeleteRequest) ProtoMessage() {}

func (x *ExportConfigDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportConfigDeleteRequest.ProtoReflect.Descriptor instead.
func (*ExportConfigDeleteRequest) Descriptor() ([]byte, []int) {
	return file_arista_syslog_v1_services_gen_proto_rawDescGZIP(), []int{17}
}

func (x *ExportConfigDeleteRequest) GetKey() *ExportKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type ExportConfigDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key echoes back the key of the deleted ExportConfig instance.
	Key *ExportKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//   - it is after the time the request was received
	//   - a time-ranged query with StartTime==DeletedAt will not include this instance.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *ExportConfigDeleteResponse) Reset() {
	*x = ExportConfigDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportConfigDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportConfigDeleteResponse) ProtoMessage() {}

func (x *ExportConfigDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportConfigDeleteResponse.ProtoReflect.Descriptor instead.
func (*ExportConfigDeleteResponse) Descriptor() ([]byte, []int) {
	return file_arista_syslog_v1_services_gen_proto_rawDescGZIP(), []int{18}
}

func (x *ExportConfigDeleteResponse) GetKey() *ExportKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ExportConfigDeleteResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type ExportConfigDeleteSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key contains a list of ExportConfig keys to delete
	Keys []*ExportKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *ExportConfigDeleteSomeRequest) Reset() {
	*x = ExportConfigDeleteSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportConfigDeleteSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportConfigDeleteSomeRequest) ProtoMessage() {}

func (x *ExportConfigDeleteSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportConfigDeleteSomeRequest.ProtoReflect.Descriptor instead.
func (*ExportConfigDeleteSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_syslog_v1_services_gen_proto_rawDescGZIP(), []int{19}
}

func (x *ExportConfigDeleteSomeRequest) GetKeys() []*ExportKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

// ExportConfigDeleteSomeResponse is only sent when there is an error.
type ExportConfigDeleteSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *ExportKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Error string     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ExportConfigDeleteSomeResponse) Reset() {
	*x = ExportConfigDeleteSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportConfigDeleteSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportConfigDeleteSomeResponse) ProtoMessage() {}

func (x *ExportConfigDeleteSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportConfigDeleteSomeResponse.ProtoReflect.Descriptor instead.
func (*ExportConfigDeleteSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_syslog_v1_services_gen_proto_rawDescGZIP(), []int{20}
}

func (x *ExportConfigDeleteSomeResponse) GetKey() *ExportKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ExportConfigDeleteSomeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type ExportConfigDeleteAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a DeleteAll.
	// This requires all provided fields to be equal to the response.
	// A filtered DeleteAll will use GetAll with filter to find things to delete.
	PartialEqFilter []*ExportConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
}

func (x *ExportConfigDeleteAllRequest) Reset() {
	*x = ExportConfigDeleteAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportConfigDeleteAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportConfigDeleteAllRequest) ProtoMessage() {}

func (x *ExportConfigDeleteAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportConfigDeleteAllRequest.ProtoReflect.Descriptor instead.
func (*ExportConfigDeleteAllRequest) Descriptor() ([]byte, []int) {
	return file_arista_syslog_v1_services_gen_proto_rawDescGZIP(), []int{21}
}

func (x *ExportConfigDeleteAllRequest) GetPartialEqFilter() []*ExportConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

type ExportConfigDeleteAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This describes the class of delete error.
	// A DeleteAllResponse is only sent when there is an error.
	Type fmp.DeleteError `protobuf:"varint,1,opt,name=type,proto3,enum=fmp.DeleteError" json:"type,omitempty"`
	// This indicates the error message from the delete failure.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// This is the key of the ExportConfig instance that failed to be deleted.
	Key *ExportKey `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp when the key was being deleted.
	Time *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *ExportConfigDeleteAllResponse) Reset() {
	*x = ExportConfigDeleteAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportConfigDeleteAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportConfigDeleteAllResponse) ProtoMessage() {}

func (x *ExportConfigDeleteAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportConfigDeleteAllResponse.ProtoReflect.Descriptor instead.
func (*ExportConfigDeleteAllResponse) Descriptor() ([]byte, []int) {
	return file_arista_syslog_v1_services_gen_proto_rawDescGZIP(), []int{22}
}

func (x *ExportConfigDeleteAllResponse) GetType() fmp.DeleteError {
	if x != nil {
		return x.Type
	}
	return fmp.DeleteError(0)
}

func (x *ExportConfigDeleteAllResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ExportConfigDeleteAllResponse) GetKey() *ExportKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ExportConfigDeleteAllResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type ExportFormatConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *ExportFormatConfigRequest) Reset() {
	*x = ExportFormatConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportFormatConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportFormatConfigRequest) ProtoMessage() {}

func (x *ExportFormatConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportFormatConfigRequest.ProtoReflect.Descriptor instead.
func (*ExportFormatConfigRequest) Descriptor() ([]byte, []int) {
	return file_arista_syslog_v1_services_gen_proto_rawDescGZIP(), []int{23}
}

func (x *ExportFormatConfigRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type ExportFormatConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *ExportFormatConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// ExportFormatConfig instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *ExportFormatConfigResponse) Reset() {
	*x = ExportFormatConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportFormatConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportFormatConfigResponse) ProtoMessage() {}

func (x *ExportFormatConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportFormatConfigResponse.ProtoReflect.Descriptor instead.
func (*ExportFormatConfigResponse) Descriptor() ([]byte, []int) {
	return file_arista_syslog_v1_services_gen_proto_rawDescGZIP(), []int{24}
}

func (x *ExportFormatConfigResponse) GetValue() *ExportFormatConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ExportFormatConfigResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type ExportFormatConfigStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*ExportFormatConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each ExportFormatConfig at end.
	//   - Each ExportFormatConfig response is fully-specified (all fields set).
	//   - start: Returns the state of each ExportFormatConfig at start, followed by updates until now.
	//   - Each ExportFormatConfig response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each ExportFormatConfig at start, followed by updates
	//     until end.
	//   - Each ExportFormatConfig response at start is fully-specified, but updates until end may
	//     be partial.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *ExportFormatConfigStreamRequest) Reset() {
	*x = ExportFormatConfigStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportFormatConfigStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportFormatConfigStreamRequest) ProtoMessage() {}

func (x *ExportFormatConfigStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportFormatConfigStreamRequest.ProtoReflect.Descriptor instead.
func (*ExportFormatConfigStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_syslog_v1_services_gen_proto_rawDescGZIP(), []int{25}
}

func (x *ExportFormatConfigStreamRequest) GetPartialEqFilter() []*ExportFormatConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *ExportFormatConfigStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type ExportFormatConfigStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *ExportFormatConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this ExportFormatConfig's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the ExportFormatConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *ExportFormatConfigStreamResponse) Reset() {
	*x = ExportFormatConfigStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportFormatConfigStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportFormatConfigStreamResponse) ProtoMessage() {}

func (x *ExportFormatConfigStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportFormatConfigStreamResponse.ProtoReflect.Descriptor instead.
func (*ExportFormatConfigStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_syslog_v1_services_gen_proto_rawDescGZIP(), []int{26}
}

func (x *ExportFormatConfigStreamResponse) GetValue() *ExportFormatConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ExportFormatConfigStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *ExportFormatConfigStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation(0)
}

type ExportFormatConfigSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ExportFormatConfig carries the value to set into the datastore.
	// See the documentation on the ExportFormatConfig struct for which fields are required.
	Value *ExportFormatConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ExportFormatConfigSetRequest) Reset() {
	*x = ExportFormatConfigSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportFormatConfigSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportFormatConfigSetRequest) ProtoMessage() {}

func (x *ExportFormatConfigSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportFormatConfigSetRequest.ProtoReflect.Descriptor instead.
func (*ExportFormatConfigSetRequest) Descriptor() ([]byte, []int) {
	return file_arista_syslog_v1_services_gen_proto_rawDescGZIP(), []int{27}
}

func (x *ExportFormatConfigSetRequest) GetValue() *ExportFormatConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

type ExportFormatConfigSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value carries all the values given in the ExportFormatConfigSetRequest as well
	// as any server-generated values.
	Value *ExportFormatConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//   - it is after the time the request was received
	//   - a time-ranged query with StartTime==CreatedAt will include this instance.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *ExportFormatConfigSetResponse) Reset() {
	*x = ExportFormatConfigSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportFormatConfigSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportFormatConfigSetResponse) ProtoMessage() {}

func (x *ExportFormatConfigSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_syslog_v1_services_gen_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportFormatConfigSetResponse.ProtoReflect.Descriptor instead.
func (*ExportFormatConfigSetResponse) Descriptor() ([]byte, []int) {
	return file_arista_syslog_v1_services_gen_proto_rawDescGZIP(), []int{28}
}

func (x *ExportFormatConfigSetResponse) GetValue() *ExportFormatConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ExportFormatConfigSetResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

var File_arista_syslog_v1_services_gen_proto protoreflect.FileDescriptor

var file_arista_syslog_v1_services_gen_proto_rawDesc = []byte{
	0x0a, 0x23, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x67, 0x65, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79,
	0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x1d, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f,
	0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x66, 0x6d, 0x70, 0x2f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa7, 0x01, 0x0a,
	0x0c, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6e, 0x0a, 0x0d, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79,
	0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65,
	0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x70, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x74, 0x0a, 0x11, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a,
	0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x2e,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xa8,
	0x01, 0x0a, 0x12, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79,
	0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x13, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x44, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45,
	0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x14, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x74, 0x0a, 0x13, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x7c, 0x0a, 0x14, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x7a, 0x0a, 0x17, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2f, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65,
	0x79, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x18, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x19, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x22, 0xb7, 0x01, 0x0a, 0x1a, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x4e, 0x0a, 0x16, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x7f, 0x0a, 0x17, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79,
	0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x54, 0x0a, 0x1a, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x22, 0x62, 0x0a, 0x1b, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x4a, 0x0a, 0x19, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x22, 0x7b, 0x0a, 0x1a, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x50,
	0x0a, 0x1d, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2f, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73,
	0x22, 0x65, 0x0a, 0x1e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x6a, 0x0a, 0x1c, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x22, 0xd8, 0x01, 0x0a, 0x1d, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x4b,
	0x0a, 0x19, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x1a,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x1f, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x11, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xc3, 0x01, 0x0a, 0x20, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x5a, 0x0a, 0x1c, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x1d,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x32, 0x99, 0x04, 0x0a, 0x0d, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x06, 0x47,
	0x65, 0x74, 0x4f, 0x6e, 0x65, 0x12, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x53,
	0x6f, 0x6d, 0x65, 0x12, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x6f, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01,
	0x12, 0x59, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x25, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x5c, 0x0a, 0x09, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x25, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x50, 0x0a, 0x07, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x12, 0x25, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79,
	0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0d, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x25, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0xe9, 0x08, 0x0a, 0x13, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x57, 0x0a,
	0x06, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x12, 0x25, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6d,
	0x65, 0x12, 0x29, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x65, 0x0a, 0x06, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x12, 0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79,
	0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30,
	0x01, 0x12, 0x68, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x2b,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x56, 0x0a, 0x07, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x12, 0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79,
	0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x30, 0x01, 0x12, 0x5a, 0x0a, 0x03, 0x53, 0x65, 0x74, 0x12, 0x28, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79,
	0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x68, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x2c, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x63, 0x0a, 0x06, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71,
	0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x2f, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30,
	0x01, 0x12, 0x6e, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x2e,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30,
	0x01, 0x32, 0xb7, 0x04, 0x0a, 0x19, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x63, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x12, 0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x31,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x32, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x74, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x12, 0x31, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79,
	0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x64, 0x0a,
	0x0d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x31,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x30, 0x01, 0x12, 0x66, 0x0a, 0x03, 0x53, 0x65, 0x74, 0x12, 0x2e, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x46, 0x5a, 0x44, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2f, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x3b, 0x73, 0x79, 0x73,
	0x6c, 0x6f, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_arista_syslog_v1_services_gen_proto_rawDescOnce sync.Once
	file_arista_syslog_v1_services_gen_proto_rawDescData = file_arista_syslog_v1_services_gen_proto_rawDesc
)

func file_arista_syslog_v1_services_gen_proto_rawDescGZIP() []byte {
	file_arista_syslog_v1_services_gen_proto_rawDescOnce.Do(func() {
		file_arista_syslog_v1_services_gen_proto_rawDescData = protoimpl.X.CompressGZIP(file_arista_syslog_v1_services_gen_proto_rawDescData)
	})
	return file_arista_syslog_v1_services_gen_proto_rawDescData
}

var file_arista_syslog_v1_services_gen_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_arista_syslog_v1_services_gen_proto_goTypes = []interface{}{
	(*MetaResponse)(nil),                     // 0: arista.syslog.v1.MetaResponse
	(*ExportRequest)(nil),                    // 1: arista.syslog.v1.ExportRequest
	(*ExportResponse)(nil),                   // 2: arista.syslog.v1.ExportResponse
	(*ExportSomeRequest)(nil),                // 3: arista.syslog.v1.ExportSomeRequest
	(*ExportSomeResponse)(nil),               // 4: arista.syslog.v1.ExportSomeResponse
	(*ExportStreamRequest)(nil),              // 5: arista.syslog.v1.ExportStreamRequest
	(*ExportStreamResponse)(nil),             // 6: arista.syslog.v1.ExportStreamResponse
	(*ExportConfigRequest)(nil),              // 7: arista.syslog.v1.ExportConfigRequest
	(*ExportConfigResponse)(nil),             // 8: arista.syslog.v1.ExportConfigResponse
	(*ExportConfigSomeRequest)(nil),          // 9: arista.syslog.v1.ExportConfigSomeRequest
	(*ExportConfigSomeResponse)(nil),         // 10: arista.syslog.v1.ExportConfigSomeResponse
	(*ExportConfigStreamRequest)(nil),        // 11: arista.syslog.v1.ExportConfigStreamRequest
	(*ExportConfigStreamResponse)(nil),       // 12: arista.syslog.v1.ExportConfigStreamResponse
	(*ExportConfigSetRequest)(nil),           // 13: arista.syslog.v1.ExportConfigSetRequest
	(*ExportConfigSetResponse)(nil),          // 14: arista.syslog.v1.ExportConfigSetResponse
	(*ExportConfigSetSomeRequest)(nil),       // 15: arista.syslog.v1.ExportConfigSetSomeRequest
	(*ExportConfigSetSomeResponse)(nil),      // 16: arista.syslog.v1.ExportConfigSetSomeResponse
	(*ExportConfigDeleteRequest)(nil),        // 17: arista.syslog.v1.ExportConfigDeleteRequest
	(*ExportConfigDeleteResponse)(nil),       // 18: arista.syslog.v1.ExportConfigDeleteResponse
	(*ExportConfigDeleteSomeRequest)(nil),    // 19: arista.syslog.v1.ExportConfigDeleteSomeRequest
	(*ExportConfigDeleteSomeResponse)(nil),   // 20: arista.syslog.v1.ExportConfigDeleteSomeResponse
	(*ExportConfigDeleteAllRequest)(nil),     // 21: arista.syslog.v1.ExportConfigDeleteAllRequest
	(*ExportConfigDeleteAllResponse)(nil),    // 22: arista.syslog.v1.ExportConfigDeleteAllResponse
	(*ExportFormatConfigRequest)(nil),        // 23: arista.syslog.v1.ExportFormatConfigRequest
	(*ExportFormatConfigResponse)(nil),       // 24: arista.syslog.v1.ExportFormatConfigResponse
	(*ExportFormatConfigStreamRequest)(nil),  // 25: arista.syslog.v1.ExportFormatConfigStreamRequest
	(*ExportFormatConfigStreamResponse)(nil), // 26: arista.syslog.v1.ExportFormatConfigStreamResponse
	(*ExportFormatConfigSetRequest)(nil),     // 27: arista.syslog.v1.ExportFormatConfigSetRequest
	(*ExportFormatConfigSetResponse)(nil),    // 28: arista.syslog.v1.ExportFormatConfigSetResponse
	(*timestamppb.Timestamp)(nil),            // 29: google.protobuf.Timestamp
	(subscriptions.Operation)(0),             // 30: arista.subscriptions.Operation
	(*wrapperspb.UInt32Value)(nil),           // 31: google.protobuf.UInt32Value
	(*ExportKey)(nil),                        // 32: arista.syslog.v1.ExportKey
	(*Export)(nil),                           // 33: arista.syslog.v1.Export
	(*wrapperspb.StringValue)(nil),           // 34: google.protobuf.StringValue
	(*time.TimeBounds)(nil),                  // 35: arista.time.TimeBounds
	(*ExportConfig)(nil),                     // 36: arista.syslog.v1.ExportConfig
	(fmp.DeleteError)(0),                     // 37: fmp.DeleteError
	(*ExportFormatConfig)(nil),               // 38: arista.syslog.v1.ExportFormatConfig
}
var file_arista_syslog_v1_services_gen_proto_depIdxs = []int32{
	29, // 0: arista.syslog.v1.MetaResponse.time:type_name -> google.protobuf.Timestamp
	30, // 1: arista.syslog.v1.MetaResponse.type:type_name -> arista.subscriptions.Operation
	31, // 2: arista.syslog.v1.MetaResponse.count:type_name -> google.protobuf.UInt32Value
	32, // 3: arista.syslog.v1.ExportRequest.key:type_name -> arista.syslog.v1.ExportKey
	29, // 4: arista.syslog.v1.ExportRequest.time:type_name -> google.protobuf.Timestamp
	33, // 5: arista.syslog.v1.ExportResponse.value:type_name -> arista.syslog.v1.Export
	29, // 6: arista.syslog.v1.ExportResponse.time:type_name -> google.protobuf.Timestamp
	32, // 7: arista.syslog.v1.ExportSomeRequest.keys:type_name -> arista.syslog.v1.ExportKey
	29, // 8: arista.syslog.v1.ExportSomeRequest.time:type_name -> google.protobuf.Timestamp
	33, // 9: arista.syslog.v1.ExportSomeResponse.value:type_name -> arista.syslog.v1.Export
	34, // 10: arista.syslog.v1.ExportSomeResponse.error:type_name -> google.protobuf.StringValue
	29, // 11: arista.syslog.v1.ExportSomeResponse.time:type_name -> google.protobuf.Timestamp
	33, // 12: arista.syslog.v1.ExportStreamRequest.partial_eq_filter:type_name -> arista.syslog.v1.Export
	35, // 13: arista.syslog.v1.ExportStreamRequest.time:type_name -> arista.time.TimeBounds
	33, // 14: arista.syslog.v1.ExportStreamResponse.value:type_name -> arista.syslog.v1.Export
	29, // 15: arista.syslog.v1.ExportStreamResponse.time:type_name -> google.protobuf.Timestamp
	30, // 16: arista.syslog.v1.ExportStreamResponse.type:type_name -> arista.subscriptions.Operation
	32, // 17: arista.syslog.v1.ExportConfigRequest.key:type_name -> arista.syslog.v1.ExportKey
	29, // 18: arista.syslog.v1.ExportConfigRequest.time:type_name -> google.protobuf.Timestamp
	36, // 19: arista.syslog.v1.ExportConfigResponse.value:type_name -> arista.syslog.v1.ExportConfig
	29, // 20: arista.syslog.v1.ExportConfigResponse.time:type_name -> google.protobuf.Timestamp
	32, // 21: arista.syslog.v1.ExportConfigSomeRequest.keys:type_name -> arista.syslog.v1.ExportKey
	29, // 22: arista.syslog.v1.ExportConfigSomeRequest.time:type_name -> google.protobuf.Timestamp
	36, // 23: arista.syslog.v1.ExportConfigSomeResponse.value:type_name -> arista.syslog.v1.ExportConfig
	34, // 24: arista.syslog.v1.ExportConfigSomeResponse.error:type_name -> google.protobuf.StringValue
	29, // 25: arista.syslog.v1.ExportConfigSomeResponse.time:type_name -> google.protobuf.Timestamp
	36, // 26: arista.syslog.v1.ExportConfigStreamRequest.partial_eq_filter:type_name -> arista.syslog.v1.ExportConfig
	35, // 27: arista.syslog.v1.ExportConfigStreamRequest.time:type_name -> arista.time.TimeBounds
	36, // 28: arista.syslog.v1.ExportConfigStreamResponse.value:type_name -> arista.syslog.v1.ExportConfig
	29, // 29: arista.syslog.v1.ExportConfigStreamResponse.time:type_name -> google.protobuf.Timestamp
	30, // 30: arista.syslog.v1.ExportConfigStreamResponse.type:type_name -> arista.subscriptions.Operation
	36, // 31: arista.syslog.v1.ExportConfigSetRequest.value:type_name -> arista.syslog.v1.ExportConfig
	36, // 32: arista.syslog.v1.ExportConfigSetResponse.value:type_name -> arista.syslog.v1.ExportConfig
	29, // 33: arista.syslog.v1.ExportConfigSetResponse.time:type_name -> google.protobuf.Timestamp
	36, // 34: arista.syslog.v1.ExportConfigSetSomeRequest.values:type_name -> arista.syslog.v1.ExportConfig
	32, // 35: arista.syslog.v1.ExportConfigSetSomeResponse.key:type_name -> arista.syslog.v1.ExportKey
	32, // 36: arista.syslog.v1.ExportConfigDeleteRequest.key:type_name -> arista.syslog.v1.ExportKey
	32, // 37: arista.syslog.v1.ExportConfigDeleteResponse.key:type_name -> arista.syslog.v1.ExportKey
	29, // 38: arista.syslog.v1.ExportConfigDeleteResponse.time:type_name -> google.protobuf.Timestamp
	32, // 39: arista.syslog.v1.ExportConfigDeleteSomeRequest.keys:type_name -> arista.syslog.v1.ExportKey
	32, // 40: arista.syslog.v1.ExportConfigDeleteSomeResponse.key:type_name -> arista.syslog.v1.ExportKey
	36, // 41: arista.syslog.v1.ExportConfigDeleteAllRequest.partial_eq_filter:type_name -> arista.syslog.v1.ExportConfig
	37, // 42: arista.syslog.v1.ExportConfigDeleteAllResponse.type:type_name -> fmp.DeleteError
	34, // 43: arista.syslog.v1.ExportConfigDeleteAllResponse.error:type_name -> google.protobuf.StringValue
	32, // 44: arista.syslog.v1.ExportConfigDeleteAllResponse.key:type_name -> arista.syslog.v1.ExportKey
	29, // 45: arista.syslog.v1.ExportConfigDeleteAllResponse.time:type_name -> google.protobuf.Timestamp
	29, // 46: arista.syslog.v1.ExportFormatConfigRequest.time:type_name -> google.protobuf.Timestamp
	38, // 47: arista.syslog.v1.ExportFormatConfigResponse.value:type_name -> arista.syslog.v1.ExportFormatConfig
	29, // 48: arista.syslog.v1.ExportFormatConfigResponse.time:type_name -> google.protobuf.Timestamp
	38, // 49: arista.syslog.v1.ExportFormatConfigStreamRequest.partial_eq_filter:type_name -> arista.syslog.v1.ExportFormatConfig
	35, // 50: arista.syslog.v1.ExportFormatConfigStreamRequest.time:type_name -> arista.time.TimeBounds
	38, // 51: arista.syslog.v1.ExportFormatConfigStreamResponse.value:type_name -> arista.syslog.v1.ExportFormatConfig
	29, // 52: arista.syslog.v1.ExportFormatConfigStreamResponse.time:type_name -> google.protobuf.Timestamp
	30, // 53: arista.syslog.v1.ExportFormatConfigStreamResponse.type:type_name -> arista.subscriptions.Operation
	38, // 54: arista.syslog.v1.ExportFormatConfigSetRequest.value:type_name -> arista.syslog.v1.ExportFormatConfig
	38, // 55: arista.syslog.v1.ExportFormatConfigSetResponse.value:type_name -> arista.syslog.v1.ExportFormatConfig
	29, // 56: arista.syslog.v1.ExportFormatConfigSetResponse.time:type_name -> google.protobuf.Timestamp
	1,  // 57: arista.syslog.v1.ExportService.GetOne:input_type -> arista.syslog.v1.ExportRequest
	3,  // 58: arista.syslog.v1.ExportService.GetSome:input_type -> arista.syslog.v1.ExportSomeRequest
	5,  // 59: arista.syslog.v1.ExportService.GetAll:input_type -> arista.syslog.v1.ExportStreamRequest
	5,  // 60: arista.syslog.v1.ExportService.Subscribe:input_type -> arista.syslog.v1.ExportStreamRequest
	5,  // 61: arista.syslog.v1.ExportService.GetMeta:input_type -> arista.syslog.v1.ExportStreamRequest
	5,  // 62: arista.syslog.v1.ExportService.SubscribeMeta:input_type -> arista.syslog.v1.ExportStreamRequest
	7,  // 63: arista.syslog.v1.ExportConfigService.GetOne:input_type -> arista.syslog.v1.ExportConfigRequest
	9,  // 64: arista.syslog.v1.ExportConfigService.GetSome:input_type -> arista.syslog.v1.ExportConfigSomeRequest
	11, // 65: arista.syslog.v1.ExportConfigService.GetAll:input_type -> arista.syslog.v1.ExportConfigStreamRequest
	11, // 66: arista.syslog.v1.ExportConfigService.Subscribe:input_type -> arista.syslog.v1.ExportConfigStreamRequest
	11, // 67: arista.syslog.v1.ExportConfigService.GetMeta:input_type -> arista.syslog.v1.ExportConfigStreamRequest
	11, // 68: arista.syslog.v1.ExportConfigService.SubscribeMeta:input_type -> arista.syslog.v1.ExportConfigStreamRequest
	13, // 69: arista.syslog.v1.ExportConfigService.Set:input_type -> arista.syslog.v1.ExportConfigSetRequest
	15, // 70: arista.syslog.v1.ExportConfigService.SetSome:input_type -> arista.syslog.v1.ExportConfigSetSomeRequest
	17, // 71: arista.syslog.v1.ExportConfigService.Delete:input_type -> arista.syslog.v1.ExportConfigDeleteRequest
	19, // 72: arista.syslog.v1.ExportConfigService.DeleteSome:input_type -> arista.syslog.v1.ExportConfigDeleteSomeRequest
	21, // 73: arista.syslog.v1.ExportConfigService.DeleteAll:input_type -> arista.syslog.v1.ExportConfigDeleteAllRequest
	23, // 74: arista.syslog.v1.ExportFormatConfigService.GetOne:input_type -> arista.syslog.v1.ExportFormatConfigRequest
	25, // 75: arista.syslog.v1.ExportFormatConfigService.GetAll:input_type -> arista.syslog.v1.ExportFormatConfigStreamRequest
	25, // 76: arista.syslog.v1.ExportFormatConfigService.Subscribe:input_type -> arista.syslog.v1.ExportFormatConfigStreamRequest
	25, // 77: arista.syslog.v1.ExportFormatConfigService.SubscribeMeta:input_type -> arista.syslog.v1.ExportFormatConfigStreamRequest
	27, // 78: arista.syslog.v1.ExportFormatConfigService.Set:input_type -> arista.syslog.v1.ExportFormatConfigSetRequest
	2,  // 79: arista.syslog.v1.ExportService.GetOne:output_type -> arista.syslog.v1.ExportResponse
	4,  // 80: arista.syslog.v1.ExportService.GetSome:output_type -> arista.syslog.v1.ExportSomeResponse
	6,  // 81: arista.syslog.v1.ExportService.GetAll:output_type -> arista.syslog.v1.ExportStreamResponse
	6,  // 82: arista.syslog.v1.ExportService.Subscribe:output_type -> arista.syslog.v1.ExportStreamResponse
	0,  // 83: arista.syslog.v1.ExportService.GetMeta:output_type -> arista.syslog.v1.MetaResponse
	0,  // 84: arista.syslog.v1.ExportService.SubscribeMeta:output_type -> arista.syslog.v1.MetaResponse
	8,  // 85: arista.syslog.v1.ExportConfigService.GetOne:output_type -> arista.syslog.v1.ExportConfigResponse
	10, // 86: arista.syslog.v1.ExportConfigService.GetSome:output_type -> arista.syslog.v1.ExportConfigSomeResponse
	12, // 87: arista.syslog.v1.ExportConfigService.GetAll:output_type -> arista.syslog.v1.ExportConfigStreamResponse
	12, // 88: arista.syslog.v1.ExportConfigService.Subscribe:output_type -> arista.syslog.v1.ExportConfigStreamResponse
	0,  // 89: arista.syslog.v1.ExportConfigService.GetMeta:output_type -> arista.syslog.v1.MetaResponse
	0,  // 90: arista.syslog.v1.ExportConfigService.SubscribeMeta:output_type -> arista.syslog.v1.MetaResponse
	14, // 91: arista.syslog.v1.ExportConfigService.Set:output_type -> arista.syslog.v1.ExportConfigSetResponse
	16, // 92: arista.syslog.v1.ExportConfigService.SetSome:output_type -> arista.syslog.v1.ExportConfigSetSomeResponse
	18, // 93: arista.syslog.v1.ExportConfigService.Delete:output_type -> arista.syslog.v1.ExportConfigDeleteResponse
	20, // 94: arista.syslog.v1.ExportConfigService.DeleteSome:output_type -> arista.syslog.v1.ExportConfigDeleteSomeResponse
	22, // 95: arista.syslog.v1.ExportConfigService.DeleteAll:output_type -> arista.syslog.v1.ExportConfigDeleteAllResponse
	24, // 96: arista.syslog.v1.ExportFormatConfigService.GetOne:output_type -> arista.syslog.v1.ExportFormatConfigResponse
	26, // 97: arista.syslog.v1.ExportFormatConfigService.GetAll:output_type -> arista.syslog.v1.ExportFormatConfigStreamResponse
	26, // 98: arista.syslog.v1.ExportFormatConfigService.Subscribe:output_type -> arista.syslog.v1.ExportFormatConfigStreamResponse
	0,  // 99: arista.syslog.v1.ExportFormatConfigService.SubscribeMeta:output_type -> arista.syslog.v1.MetaResponse
	28, // 100: arista.syslog.v1.ExportFormatConfigService.Set:output_type -> arista.syslog.v1.ExportFormatConfigSetResponse
	79, // [79:101] is the sub-list for method output_type
	57, // [57:79] is the sub-list for method input_type
	57, // [57:57] is the sub-list for extension type_name
	57, // [57:57] is the sub-list for extension extendee
	0,  // [0:57] is the sub-list for field type_name
}

func init() { file_arista_syslog_v1_services_gen_proto_init() }
func file_arista_syslog_v1_services_gen_proto_init() {
	if File_arista_syslog_v1_services_gen_proto != nil {
		return
	}
	file_arista_syslog_v1_syslog_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_arista_syslog_v1_services_gen_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_syslog_v1_services_gen_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_syslog_v1_services_gen_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_syslog_v1_services_gen_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_syslog_v1_services_gen_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_syslog_v1_services_gen_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_syslog_v1_services_gen_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_syslog_v1_services_gen_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_syslog_v1_services_gen_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_syslog_v1_services_gen_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportConfigSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_syslog_v1_services_gen_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportConfigSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_syslog_v1_services_gen_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportConfigStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_syslog_v1_services_gen_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportConfigStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_syslog_v1_services_gen_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportConfigSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_syslog_v1_services_gen_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportConfigSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_syslog_v1_services_gen_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportConfigSetSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_syslog_v1_services_gen_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportConfigSetSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_syslog_v1_services_gen_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportConfigDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_syslog_v1_services_gen_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportConfigDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_syslog_v1_services_gen_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportConfigDeleteSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_syslog_v1_services_gen_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportConfigDeleteSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_syslog_v1_services_gen_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportConfigDeleteAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_syslog_v1_services_gen_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportConfigDeleteAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_syslog_v1_services_gen_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportFormatConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_syslog_v1_services_gen_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportFormatConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_syslog_v1_services_gen_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportFormatConfigStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_syslog_v1_services_gen_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportFormatConfigStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_syslog_v1_services_gen_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportFormatConfigSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_syslog_v1_services_gen_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportFormatConfigSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_arista_syslog_v1_services_gen_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_arista_syslog_v1_services_gen_proto_goTypes,
		DependencyIndexes: file_arista_syslog_v1_services_gen_proto_depIdxs,
		MessageInfos:      file_arista_syslog_v1_services_gen_proto_msgTypes,
	}.Build()
	File_arista_syslog_v1_services_gen_proto = out.File
	file_arista_syslog_v1_services_gen_proto_rawDesc = nil
	file_arista_syslog_v1_services_gen_proto_goTypes = nil
	file_arista_syslog_v1_services_gen_proto_depIdxs = nil
}
