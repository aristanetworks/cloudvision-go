// Copyright (c) 2025 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

// NOTE: This is a workspace-aware Resource API.
// Please see workspace.v1 for more information.

//
// Code generated by boomtown. DO NOT EDIT.
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: arista/studio_topology.v1/services.gen.proto

package studio_topology

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DecommissionService_GetOne_FullMethodName           = "/arista.studio_topology.v1.DecommissionService/GetOne"
	DecommissionService_GetSome_FullMethodName          = "/arista.studio_topology.v1.DecommissionService/GetSome"
	DecommissionService_GetAll_FullMethodName           = "/arista.studio_topology.v1.DecommissionService/GetAll"
	DecommissionService_Subscribe_FullMethodName        = "/arista.studio_topology.v1.DecommissionService/Subscribe"
	DecommissionService_GetMeta_FullMethodName          = "/arista.studio_topology.v1.DecommissionService/GetMeta"
	DecommissionService_SubscribeMeta_FullMethodName    = "/arista.studio_topology.v1.DecommissionService/SubscribeMeta"
	DecommissionService_GetAllBatched_FullMethodName    = "/arista.studio_topology.v1.DecommissionService/GetAllBatched"
	DecommissionService_SubscribeBatched_FullMethodName = "/arista.studio_topology.v1.DecommissionService/SubscribeBatched"
)

// DecommissionServiceClient is the client API for DecommissionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DecommissionServiceClient interface {
	GetOne(ctx context.Context, in *DecommissionRequest, opts ...grpc.CallOption) (*DecommissionResponse, error)
	GetSome(ctx context.Context, in *DecommissionSomeRequest, opts ...grpc.CallOption) (DecommissionService_GetSomeClient, error)
	GetAll(ctx context.Context, in *DecommissionStreamRequest, opts ...grpc.CallOption) (DecommissionService_GetAllClient, error)
	Subscribe(ctx context.Context, in *DecommissionStreamRequest, opts ...grpc.CallOption) (DecommissionService_SubscribeClient, error)
	GetMeta(ctx context.Context, in *DecommissionStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error)
	SubscribeMeta(ctx context.Context, in *DecommissionStreamRequest, opts ...grpc.CallOption) (DecommissionService_SubscribeMetaClient, error)
	GetAllBatched(ctx context.Context, in *DecommissionBatchedStreamRequest, opts ...grpc.CallOption) (DecommissionService_GetAllBatchedClient, error)
	SubscribeBatched(ctx context.Context, in *DecommissionBatchedStreamRequest, opts ...grpc.CallOption) (DecommissionService_SubscribeBatchedClient, error)
}

type decommissionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDecommissionServiceClient(cc grpc.ClientConnInterface) DecommissionServiceClient {
	return &decommissionServiceClient{cc}
}

func (c *decommissionServiceClient) GetOne(ctx context.Context, in *DecommissionRequest, opts ...grpc.CallOption) (*DecommissionResponse, error) {
	out := new(DecommissionResponse)
	err := c.cc.Invoke(ctx, DecommissionService_GetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *decommissionServiceClient) GetSome(ctx context.Context, in *DecommissionSomeRequest, opts ...grpc.CallOption) (DecommissionService_GetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &DecommissionService_ServiceDesc.Streams[0], DecommissionService_GetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &decommissionServiceGetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DecommissionService_GetSomeClient interface {
	Recv() (*DecommissionSomeResponse, error)
	grpc.ClientStream
}

type decommissionServiceGetSomeClient struct {
	grpc.ClientStream
}

func (x *decommissionServiceGetSomeClient) Recv() (*DecommissionSomeResponse, error) {
	m := new(DecommissionSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *decommissionServiceClient) GetAll(ctx context.Context, in *DecommissionStreamRequest, opts ...grpc.CallOption) (DecommissionService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &DecommissionService_ServiceDesc.Streams[1], DecommissionService_GetAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &decommissionServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DecommissionService_GetAllClient interface {
	Recv() (*DecommissionStreamResponse, error)
	grpc.ClientStream
}

type decommissionServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *decommissionServiceGetAllClient) Recv() (*DecommissionStreamResponse, error) {
	m := new(DecommissionStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *decommissionServiceClient) Subscribe(ctx context.Context, in *DecommissionStreamRequest, opts ...grpc.CallOption) (DecommissionService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &DecommissionService_ServiceDesc.Streams[2], DecommissionService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &decommissionServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DecommissionService_SubscribeClient interface {
	Recv() (*DecommissionStreamResponse, error)
	grpc.ClientStream
}

type decommissionServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *decommissionServiceSubscribeClient) Recv() (*DecommissionStreamResponse, error) {
	m := new(DecommissionStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *decommissionServiceClient) GetMeta(ctx context.Context, in *DecommissionStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error) {
	out := new(MetaResponse)
	err := c.cc.Invoke(ctx, DecommissionService_GetMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *decommissionServiceClient) SubscribeMeta(ctx context.Context, in *DecommissionStreamRequest, opts ...grpc.CallOption) (DecommissionService_SubscribeMetaClient, error) {
	stream, err := c.cc.NewStream(ctx, &DecommissionService_ServiceDesc.Streams[3], DecommissionService_SubscribeMeta_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &decommissionServiceSubscribeMetaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DecommissionService_SubscribeMetaClient interface {
	Recv() (*MetaResponse, error)
	grpc.ClientStream
}

type decommissionServiceSubscribeMetaClient struct {
	grpc.ClientStream
}

func (x *decommissionServiceSubscribeMetaClient) Recv() (*MetaResponse, error) {
	m := new(MetaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *decommissionServiceClient) GetAllBatched(ctx context.Context, in *DecommissionBatchedStreamRequest, opts ...grpc.CallOption) (DecommissionService_GetAllBatchedClient, error) {
	stream, err := c.cc.NewStream(ctx, &DecommissionService_ServiceDesc.Streams[4], DecommissionService_GetAllBatched_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &decommissionServiceGetAllBatchedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DecommissionService_GetAllBatchedClient interface {
	Recv() (*DecommissionBatchedStreamResponse, error)
	grpc.ClientStream
}

type decommissionServiceGetAllBatchedClient struct {
	grpc.ClientStream
}

func (x *decommissionServiceGetAllBatchedClient) Recv() (*DecommissionBatchedStreamResponse, error) {
	m := new(DecommissionBatchedStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *decommissionServiceClient) SubscribeBatched(ctx context.Context, in *DecommissionBatchedStreamRequest, opts ...grpc.CallOption) (DecommissionService_SubscribeBatchedClient, error) {
	stream, err := c.cc.NewStream(ctx, &DecommissionService_ServiceDesc.Streams[5], DecommissionService_SubscribeBatched_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &decommissionServiceSubscribeBatchedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DecommissionService_SubscribeBatchedClient interface {
	Recv() (*DecommissionBatchedStreamResponse, error)
	grpc.ClientStream
}

type decommissionServiceSubscribeBatchedClient struct {
	grpc.ClientStream
}

func (x *decommissionServiceSubscribeBatchedClient) Recv() (*DecommissionBatchedStreamResponse, error) {
	m := new(DecommissionBatchedStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DecommissionServiceServer is the server API for DecommissionService service.
// All implementations must embed UnimplementedDecommissionServiceServer
// for forward compatibility
type DecommissionServiceServer interface {
	GetOne(context.Context, *DecommissionRequest) (*DecommissionResponse, error)
	GetSome(*DecommissionSomeRequest, DecommissionService_GetSomeServer) error
	GetAll(*DecommissionStreamRequest, DecommissionService_GetAllServer) error
	Subscribe(*DecommissionStreamRequest, DecommissionService_SubscribeServer) error
	GetMeta(context.Context, *DecommissionStreamRequest) (*MetaResponse, error)
	SubscribeMeta(*DecommissionStreamRequest, DecommissionService_SubscribeMetaServer) error
	GetAllBatched(*DecommissionBatchedStreamRequest, DecommissionService_GetAllBatchedServer) error
	SubscribeBatched(*DecommissionBatchedStreamRequest, DecommissionService_SubscribeBatchedServer) error
	mustEmbedUnimplementedDecommissionServiceServer()
}

// UnimplementedDecommissionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDecommissionServiceServer struct {
}

func (UnimplementedDecommissionServiceServer) GetOne(context.Context, *DecommissionRequest) (*DecommissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedDecommissionServiceServer) GetSome(*DecommissionSomeRequest, DecommissionService_GetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSome not implemented")
}
func (UnimplementedDecommissionServiceServer) GetAll(*DecommissionStreamRequest, DecommissionService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedDecommissionServiceServer) Subscribe(*DecommissionStreamRequest, DecommissionService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedDecommissionServiceServer) GetMeta(context.Context, *DecommissionStreamRequest) (*MetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeta not implemented")
}
func (UnimplementedDecommissionServiceServer) SubscribeMeta(*DecommissionStreamRequest, DecommissionService_SubscribeMetaServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMeta not implemented")
}
func (UnimplementedDecommissionServiceServer) GetAllBatched(*DecommissionBatchedStreamRequest, DecommissionService_GetAllBatchedServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllBatched not implemented")
}
func (UnimplementedDecommissionServiceServer) SubscribeBatched(*DecommissionBatchedStreamRequest, DecommissionService_SubscribeBatchedServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeBatched not implemented")
}
func (UnimplementedDecommissionServiceServer) mustEmbedUnimplementedDecommissionServiceServer() {}

// UnsafeDecommissionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DecommissionServiceServer will
// result in compilation errors.
type UnsafeDecommissionServiceServer interface {
	mustEmbedUnimplementedDecommissionServiceServer()
}

func RegisterDecommissionServiceServer(s grpc.ServiceRegistrar, srv DecommissionServiceServer) {
	s.RegisterService(&DecommissionService_ServiceDesc, srv)
}

func _DecommissionService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecommissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DecommissionServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DecommissionService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DecommissionServiceServer).GetOne(ctx, req.(*DecommissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DecommissionService_GetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DecommissionSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DecommissionServiceServer).GetSome(m, &decommissionServiceGetSomeServer{stream})
}

type DecommissionService_GetSomeServer interface {
	Send(*DecommissionSomeResponse) error
	grpc.ServerStream
}

type decommissionServiceGetSomeServer struct {
	grpc.ServerStream
}

func (x *decommissionServiceGetSomeServer) Send(m *DecommissionSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DecommissionService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DecommissionStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DecommissionServiceServer).GetAll(m, &decommissionServiceGetAllServer{stream})
}

type DecommissionService_GetAllServer interface {
	Send(*DecommissionStreamResponse) error
	grpc.ServerStream
}

type decommissionServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *decommissionServiceGetAllServer) Send(m *DecommissionStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DecommissionService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DecommissionStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DecommissionServiceServer).Subscribe(m, &decommissionServiceSubscribeServer{stream})
}

type DecommissionService_SubscribeServer interface {
	Send(*DecommissionStreamResponse) error
	grpc.ServerStream
}

type decommissionServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *decommissionServiceSubscribeServer) Send(m *DecommissionStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DecommissionService_GetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecommissionStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DecommissionServiceServer).GetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DecommissionService_GetMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DecommissionServiceServer).GetMeta(ctx, req.(*DecommissionStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DecommissionService_SubscribeMeta_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DecommissionStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DecommissionServiceServer).SubscribeMeta(m, &decommissionServiceSubscribeMetaServer{stream})
}

type DecommissionService_SubscribeMetaServer interface {
	Send(*MetaResponse) error
	grpc.ServerStream
}

type decommissionServiceSubscribeMetaServer struct {
	grpc.ServerStream
}

func (x *decommissionServiceSubscribeMetaServer) Send(m *MetaResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DecommissionService_GetAllBatched_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DecommissionBatchedStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DecommissionServiceServer).GetAllBatched(m, &decommissionServiceGetAllBatchedServer{stream})
}

type DecommissionService_GetAllBatchedServer interface {
	Send(*DecommissionBatchedStreamResponse) error
	grpc.ServerStream
}

type decommissionServiceGetAllBatchedServer struct {
	grpc.ServerStream
}

func (x *decommissionServiceGetAllBatchedServer) Send(m *DecommissionBatchedStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DecommissionService_SubscribeBatched_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DecommissionBatchedStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DecommissionServiceServer).SubscribeBatched(m, &decommissionServiceSubscribeBatchedServer{stream})
}

type DecommissionService_SubscribeBatchedServer interface {
	Send(*DecommissionBatchedStreamResponse) error
	grpc.ServerStream
}

type decommissionServiceSubscribeBatchedServer struct {
	grpc.ServerStream
}

func (x *decommissionServiceSubscribeBatchedServer) Send(m *DecommissionBatchedStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// DecommissionService_ServiceDesc is the grpc.ServiceDesc for DecommissionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DecommissionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.studio_topology.v1.DecommissionService",
	HandlerType: (*DecommissionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _DecommissionService_GetOne_Handler,
		},
		{
			MethodName: "GetMeta",
			Handler:    _DecommissionService_GetMeta_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSome",
			Handler:       _DecommissionService_GetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAll",
			Handler:       _DecommissionService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _DecommissionService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeMeta",
			Handler:       _DecommissionService_SubscribeMeta_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllBatched",
			Handler:       _DecommissionService_GetAllBatched_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeBatched",
			Handler:       _DecommissionService_SubscribeBatched_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/studio_topology.v1/services.gen.proto",
}

const (
	DecommissionConfigService_GetOne_FullMethodName           = "/arista.studio_topology.v1.DecommissionConfigService/GetOne"
	DecommissionConfigService_GetSome_FullMethodName          = "/arista.studio_topology.v1.DecommissionConfigService/GetSome"
	DecommissionConfigService_GetAll_FullMethodName           = "/arista.studio_topology.v1.DecommissionConfigService/GetAll"
	DecommissionConfigService_Subscribe_FullMethodName        = "/arista.studio_topology.v1.DecommissionConfigService/Subscribe"
	DecommissionConfigService_GetMeta_FullMethodName          = "/arista.studio_topology.v1.DecommissionConfigService/GetMeta"
	DecommissionConfigService_SubscribeMeta_FullMethodName    = "/arista.studio_topology.v1.DecommissionConfigService/SubscribeMeta"
	DecommissionConfigService_Set_FullMethodName              = "/arista.studio_topology.v1.DecommissionConfigService/Set"
	DecommissionConfigService_SetSome_FullMethodName          = "/arista.studio_topology.v1.DecommissionConfigService/SetSome"
	DecommissionConfigService_Delete_FullMethodName           = "/arista.studio_topology.v1.DecommissionConfigService/Delete"
	DecommissionConfigService_DeleteSome_FullMethodName       = "/arista.studio_topology.v1.DecommissionConfigService/DeleteSome"
	DecommissionConfigService_DeleteAll_FullMethodName        = "/arista.studio_topology.v1.DecommissionConfigService/DeleteAll"
	DecommissionConfigService_GetAllBatched_FullMethodName    = "/arista.studio_topology.v1.DecommissionConfigService/GetAllBatched"
	DecommissionConfigService_SubscribeBatched_FullMethodName = "/arista.studio_topology.v1.DecommissionConfigService/SubscribeBatched"
)

// DecommissionConfigServiceClient is the client API for DecommissionConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DecommissionConfigServiceClient interface {
	GetOne(ctx context.Context, in *DecommissionConfigRequest, opts ...grpc.CallOption) (*DecommissionConfigResponse, error)
	GetSome(ctx context.Context, in *DecommissionConfigSomeRequest, opts ...grpc.CallOption) (DecommissionConfigService_GetSomeClient, error)
	GetAll(ctx context.Context, in *DecommissionConfigStreamRequest, opts ...grpc.CallOption) (DecommissionConfigService_GetAllClient, error)
	Subscribe(ctx context.Context, in *DecommissionConfigStreamRequest, opts ...grpc.CallOption) (DecommissionConfigService_SubscribeClient, error)
	GetMeta(ctx context.Context, in *DecommissionConfigStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error)
	SubscribeMeta(ctx context.Context, in *DecommissionConfigStreamRequest, opts ...grpc.CallOption) (DecommissionConfigService_SubscribeMetaClient, error)
	Set(ctx context.Context, in *DecommissionConfigSetRequest, opts ...grpc.CallOption) (*DecommissionConfigSetResponse, error)
	SetSome(ctx context.Context, in *DecommissionConfigSetSomeRequest, opts ...grpc.CallOption) (DecommissionConfigService_SetSomeClient, error)
	Delete(ctx context.Context, in *DecommissionConfigDeleteRequest, opts ...grpc.CallOption) (*DecommissionConfigDeleteResponse, error)
	DeleteSome(ctx context.Context, in *DecommissionConfigDeleteSomeRequest, opts ...grpc.CallOption) (DecommissionConfigService_DeleteSomeClient, error)
	DeleteAll(ctx context.Context, in *DecommissionConfigDeleteAllRequest, opts ...grpc.CallOption) (DecommissionConfigService_DeleteAllClient, error)
	GetAllBatched(ctx context.Context, in *DecommissionConfigBatchedStreamRequest, opts ...grpc.CallOption) (DecommissionConfigService_GetAllBatchedClient, error)
	SubscribeBatched(ctx context.Context, in *DecommissionConfigBatchedStreamRequest, opts ...grpc.CallOption) (DecommissionConfigService_SubscribeBatchedClient, error)
}

type decommissionConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDecommissionConfigServiceClient(cc grpc.ClientConnInterface) DecommissionConfigServiceClient {
	return &decommissionConfigServiceClient{cc}
}

func (c *decommissionConfigServiceClient) GetOne(ctx context.Context, in *DecommissionConfigRequest, opts ...grpc.CallOption) (*DecommissionConfigResponse, error) {
	out := new(DecommissionConfigResponse)
	err := c.cc.Invoke(ctx, DecommissionConfigService_GetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *decommissionConfigServiceClient) GetSome(ctx context.Context, in *DecommissionConfigSomeRequest, opts ...grpc.CallOption) (DecommissionConfigService_GetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &DecommissionConfigService_ServiceDesc.Streams[0], DecommissionConfigService_GetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &decommissionConfigServiceGetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DecommissionConfigService_GetSomeClient interface {
	Recv() (*DecommissionConfigSomeResponse, error)
	grpc.ClientStream
}

type decommissionConfigServiceGetSomeClient struct {
	grpc.ClientStream
}

func (x *decommissionConfigServiceGetSomeClient) Recv() (*DecommissionConfigSomeResponse, error) {
	m := new(DecommissionConfigSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *decommissionConfigServiceClient) GetAll(ctx context.Context, in *DecommissionConfigStreamRequest, opts ...grpc.CallOption) (DecommissionConfigService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &DecommissionConfigService_ServiceDesc.Streams[1], DecommissionConfigService_GetAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &decommissionConfigServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DecommissionConfigService_GetAllClient interface {
	Recv() (*DecommissionConfigStreamResponse, error)
	grpc.ClientStream
}

type decommissionConfigServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *decommissionConfigServiceGetAllClient) Recv() (*DecommissionConfigStreamResponse, error) {
	m := new(DecommissionConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *decommissionConfigServiceClient) Subscribe(ctx context.Context, in *DecommissionConfigStreamRequest, opts ...grpc.CallOption) (DecommissionConfigService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &DecommissionConfigService_ServiceDesc.Streams[2], DecommissionConfigService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &decommissionConfigServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DecommissionConfigService_SubscribeClient interface {
	Recv() (*DecommissionConfigStreamResponse, error)
	grpc.ClientStream
}

type decommissionConfigServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *decommissionConfigServiceSubscribeClient) Recv() (*DecommissionConfigStreamResponse, error) {
	m := new(DecommissionConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *decommissionConfigServiceClient) GetMeta(ctx context.Context, in *DecommissionConfigStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error) {
	out := new(MetaResponse)
	err := c.cc.Invoke(ctx, DecommissionConfigService_GetMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *decommissionConfigServiceClient) SubscribeMeta(ctx context.Context, in *DecommissionConfigStreamRequest, opts ...grpc.CallOption) (DecommissionConfigService_SubscribeMetaClient, error) {
	stream, err := c.cc.NewStream(ctx, &DecommissionConfigService_ServiceDesc.Streams[3], DecommissionConfigService_SubscribeMeta_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &decommissionConfigServiceSubscribeMetaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DecommissionConfigService_SubscribeMetaClient interface {
	Recv() (*MetaResponse, error)
	grpc.ClientStream
}

type decommissionConfigServiceSubscribeMetaClient struct {
	grpc.ClientStream
}

func (x *decommissionConfigServiceSubscribeMetaClient) Recv() (*MetaResponse, error) {
	m := new(MetaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *decommissionConfigServiceClient) Set(ctx context.Context, in *DecommissionConfigSetRequest, opts ...grpc.CallOption) (*DecommissionConfigSetResponse, error) {
	out := new(DecommissionConfigSetResponse)
	err := c.cc.Invoke(ctx, DecommissionConfigService_Set_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *decommissionConfigServiceClient) SetSome(ctx context.Context, in *DecommissionConfigSetSomeRequest, opts ...grpc.CallOption) (DecommissionConfigService_SetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &DecommissionConfigService_ServiceDesc.Streams[4], DecommissionConfigService_SetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &decommissionConfigServiceSetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DecommissionConfigService_SetSomeClient interface {
	Recv() (*DecommissionConfigSetSomeResponse, error)
	grpc.ClientStream
}

type decommissionConfigServiceSetSomeClient struct {
	grpc.ClientStream
}

func (x *decommissionConfigServiceSetSomeClient) Recv() (*DecommissionConfigSetSomeResponse, error) {
	m := new(DecommissionConfigSetSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *decommissionConfigServiceClient) Delete(ctx context.Context, in *DecommissionConfigDeleteRequest, opts ...grpc.CallOption) (*DecommissionConfigDeleteResponse, error) {
	out := new(DecommissionConfigDeleteResponse)
	err := c.cc.Invoke(ctx, DecommissionConfigService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *decommissionConfigServiceClient) DeleteSome(ctx context.Context, in *DecommissionConfigDeleteSomeRequest, opts ...grpc.CallOption) (DecommissionConfigService_DeleteSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &DecommissionConfigService_ServiceDesc.Streams[5], DecommissionConfigService_DeleteSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &decommissionConfigServiceDeleteSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DecommissionConfigService_DeleteSomeClient interface {
	Recv() (*DecommissionConfigDeleteSomeResponse, error)
	grpc.ClientStream
}

type decommissionConfigServiceDeleteSomeClient struct {
	grpc.ClientStream
}

func (x *decommissionConfigServiceDeleteSomeClient) Recv() (*DecommissionConfigDeleteSomeResponse, error) {
	m := new(DecommissionConfigDeleteSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *decommissionConfigServiceClient) DeleteAll(ctx context.Context, in *DecommissionConfigDeleteAllRequest, opts ...grpc.CallOption) (DecommissionConfigService_DeleteAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &DecommissionConfigService_ServiceDesc.Streams[6], DecommissionConfigService_DeleteAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &decommissionConfigServiceDeleteAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DecommissionConfigService_DeleteAllClient interface {
	Recv() (*DecommissionConfigDeleteAllResponse, error)
	grpc.ClientStream
}

type decommissionConfigServiceDeleteAllClient struct {
	grpc.ClientStream
}

func (x *decommissionConfigServiceDeleteAllClient) Recv() (*DecommissionConfigDeleteAllResponse, error) {
	m := new(DecommissionConfigDeleteAllResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *decommissionConfigServiceClient) GetAllBatched(ctx context.Context, in *DecommissionConfigBatchedStreamRequest, opts ...grpc.CallOption) (DecommissionConfigService_GetAllBatchedClient, error) {
	stream, err := c.cc.NewStream(ctx, &DecommissionConfigService_ServiceDesc.Streams[7], DecommissionConfigService_GetAllBatched_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &decommissionConfigServiceGetAllBatchedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DecommissionConfigService_GetAllBatchedClient interface {
	Recv() (*DecommissionConfigBatchedStreamResponse, error)
	grpc.ClientStream
}

type decommissionConfigServiceGetAllBatchedClient struct {
	grpc.ClientStream
}

func (x *decommissionConfigServiceGetAllBatchedClient) Recv() (*DecommissionConfigBatchedStreamResponse, error) {
	m := new(DecommissionConfigBatchedStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *decommissionConfigServiceClient) SubscribeBatched(ctx context.Context, in *DecommissionConfigBatchedStreamRequest, opts ...grpc.CallOption) (DecommissionConfigService_SubscribeBatchedClient, error) {
	stream, err := c.cc.NewStream(ctx, &DecommissionConfigService_ServiceDesc.Streams[8], DecommissionConfigService_SubscribeBatched_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &decommissionConfigServiceSubscribeBatchedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DecommissionConfigService_SubscribeBatchedClient interface {
	Recv() (*DecommissionConfigBatchedStreamResponse, error)
	grpc.ClientStream
}

type decommissionConfigServiceSubscribeBatchedClient struct {
	grpc.ClientStream
}

func (x *decommissionConfigServiceSubscribeBatchedClient) Recv() (*DecommissionConfigBatchedStreamResponse, error) {
	m := new(DecommissionConfigBatchedStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DecommissionConfigServiceServer is the server API for DecommissionConfigService service.
// All implementations must embed UnimplementedDecommissionConfigServiceServer
// for forward compatibility
type DecommissionConfigServiceServer interface {
	GetOne(context.Context, *DecommissionConfigRequest) (*DecommissionConfigResponse, error)
	GetSome(*DecommissionConfigSomeRequest, DecommissionConfigService_GetSomeServer) error
	GetAll(*DecommissionConfigStreamRequest, DecommissionConfigService_GetAllServer) error
	Subscribe(*DecommissionConfigStreamRequest, DecommissionConfigService_SubscribeServer) error
	GetMeta(context.Context, *DecommissionConfigStreamRequest) (*MetaResponse, error)
	SubscribeMeta(*DecommissionConfigStreamRequest, DecommissionConfigService_SubscribeMetaServer) error
	Set(context.Context, *DecommissionConfigSetRequest) (*DecommissionConfigSetResponse, error)
	SetSome(*DecommissionConfigSetSomeRequest, DecommissionConfigService_SetSomeServer) error
	Delete(context.Context, *DecommissionConfigDeleteRequest) (*DecommissionConfigDeleteResponse, error)
	DeleteSome(*DecommissionConfigDeleteSomeRequest, DecommissionConfigService_DeleteSomeServer) error
	DeleteAll(*DecommissionConfigDeleteAllRequest, DecommissionConfigService_DeleteAllServer) error
	GetAllBatched(*DecommissionConfigBatchedStreamRequest, DecommissionConfigService_GetAllBatchedServer) error
	SubscribeBatched(*DecommissionConfigBatchedStreamRequest, DecommissionConfigService_SubscribeBatchedServer) error
	mustEmbedUnimplementedDecommissionConfigServiceServer()
}

// UnimplementedDecommissionConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDecommissionConfigServiceServer struct {
}

func (UnimplementedDecommissionConfigServiceServer) GetOne(context.Context, *DecommissionConfigRequest) (*DecommissionConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedDecommissionConfigServiceServer) GetSome(*DecommissionConfigSomeRequest, DecommissionConfigService_GetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSome not implemented")
}
func (UnimplementedDecommissionConfigServiceServer) GetAll(*DecommissionConfigStreamRequest, DecommissionConfigService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedDecommissionConfigServiceServer) Subscribe(*DecommissionConfigStreamRequest, DecommissionConfigService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedDecommissionConfigServiceServer) GetMeta(context.Context, *DecommissionConfigStreamRequest) (*MetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeta not implemented")
}
func (UnimplementedDecommissionConfigServiceServer) SubscribeMeta(*DecommissionConfigStreamRequest, DecommissionConfigService_SubscribeMetaServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMeta not implemented")
}
func (UnimplementedDecommissionConfigServiceServer) Set(context.Context, *DecommissionConfigSetRequest) (*DecommissionConfigSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedDecommissionConfigServiceServer) SetSome(*DecommissionConfigSetSomeRequest, DecommissionConfigService_SetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method SetSome not implemented")
}
func (UnimplementedDecommissionConfigServiceServer) Delete(context.Context, *DecommissionConfigDeleteRequest) (*DecommissionConfigDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDecommissionConfigServiceServer) DeleteSome(*DecommissionConfigDeleteSomeRequest, DecommissionConfigService_DeleteSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteSome not implemented")
}
func (UnimplementedDecommissionConfigServiceServer) DeleteAll(*DecommissionConfigDeleteAllRequest, DecommissionConfigService_DeleteAllServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteAll not implemented")
}
func (UnimplementedDecommissionConfigServiceServer) GetAllBatched(*DecommissionConfigBatchedStreamRequest, DecommissionConfigService_GetAllBatchedServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllBatched not implemented")
}
func (UnimplementedDecommissionConfigServiceServer) SubscribeBatched(*DecommissionConfigBatchedStreamRequest, DecommissionConfigService_SubscribeBatchedServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeBatched not implemented")
}
func (UnimplementedDecommissionConfigServiceServer) mustEmbedUnimplementedDecommissionConfigServiceServer() {
}

// UnsafeDecommissionConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DecommissionConfigServiceServer will
// result in compilation errors.
type UnsafeDecommissionConfigServiceServer interface {
	mustEmbedUnimplementedDecommissionConfigServiceServer()
}

func RegisterDecommissionConfigServiceServer(s grpc.ServiceRegistrar, srv DecommissionConfigServiceServer) {
	s.RegisterService(&DecommissionConfigService_ServiceDesc, srv)
}

func _DecommissionConfigService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecommissionConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DecommissionConfigServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DecommissionConfigService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DecommissionConfigServiceServer).GetOne(ctx, req.(*DecommissionConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DecommissionConfigService_GetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DecommissionConfigSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DecommissionConfigServiceServer).GetSome(m, &decommissionConfigServiceGetSomeServer{stream})
}

type DecommissionConfigService_GetSomeServer interface {
	Send(*DecommissionConfigSomeResponse) error
	grpc.ServerStream
}

type decommissionConfigServiceGetSomeServer struct {
	grpc.ServerStream
}

func (x *decommissionConfigServiceGetSomeServer) Send(m *DecommissionConfigSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DecommissionConfigService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DecommissionConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DecommissionConfigServiceServer).GetAll(m, &decommissionConfigServiceGetAllServer{stream})
}

type DecommissionConfigService_GetAllServer interface {
	Send(*DecommissionConfigStreamResponse) error
	grpc.ServerStream
}

type decommissionConfigServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *decommissionConfigServiceGetAllServer) Send(m *DecommissionConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DecommissionConfigService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DecommissionConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DecommissionConfigServiceServer).Subscribe(m, &decommissionConfigServiceSubscribeServer{stream})
}

type DecommissionConfigService_SubscribeServer interface {
	Send(*DecommissionConfigStreamResponse) error
	grpc.ServerStream
}

type decommissionConfigServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *decommissionConfigServiceSubscribeServer) Send(m *DecommissionConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DecommissionConfigService_GetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecommissionConfigStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DecommissionConfigServiceServer).GetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DecommissionConfigService_GetMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DecommissionConfigServiceServer).GetMeta(ctx, req.(*DecommissionConfigStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DecommissionConfigService_SubscribeMeta_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DecommissionConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DecommissionConfigServiceServer).SubscribeMeta(m, &decommissionConfigServiceSubscribeMetaServer{stream})
}

type DecommissionConfigService_SubscribeMetaServer interface {
	Send(*MetaResponse) error
	grpc.ServerStream
}

type decommissionConfigServiceSubscribeMetaServer struct {
	grpc.ServerStream
}

func (x *decommissionConfigServiceSubscribeMetaServer) Send(m *MetaResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DecommissionConfigService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecommissionConfigSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DecommissionConfigServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DecommissionConfigService_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DecommissionConfigServiceServer).Set(ctx, req.(*DecommissionConfigSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DecommissionConfigService_SetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DecommissionConfigSetSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DecommissionConfigServiceServer).SetSome(m, &decommissionConfigServiceSetSomeServer{stream})
}

type DecommissionConfigService_SetSomeServer interface {
	Send(*DecommissionConfigSetSomeResponse) error
	grpc.ServerStream
}

type decommissionConfigServiceSetSomeServer struct {
	grpc.ServerStream
}

func (x *decommissionConfigServiceSetSomeServer) Send(m *DecommissionConfigSetSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DecommissionConfigService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecommissionConfigDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DecommissionConfigServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DecommissionConfigService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DecommissionConfigServiceServer).Delete(ctx, req.(*DecommissionConfigDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DecommissionConfigService_DeleteSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DecommissionConfigDeleteSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DecommissionConfigServiceServer).DeleteSome(m, &decommissionConfigServiceDeleteSomeServer{stream})
}

type DecommissionConfigService_DeleteSomeServer interface {
	Send(*DecommissionConfigDeleteSomeResponse) error
	grpc.ServerStream
}

type decommissionConfigServiceDeleteSomeServer struct {
	grpc.ServerStream
}

func (x *decommissionConfigServiceDeleteSomeServer) Send(m *DecommissionConfigDeleteSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DecommissionConfigService_DeleteAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DecommissionConfigDeleteAllRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DecommissionConfigServiceServer).DeleteAll(m, &decommissionConfigServiceDeleteAllServer{stream})
}

type DecommissionConfigService_DeleteAllServer interface {
	Send(*DecommissionConfigDeleteAllResponse) error
	grpc.ServerStream
}

type decommissionConfigServiceDeleteAllServer struct {
	grpc.ServerStream
}

func (x *decommissionConfigServiceDeleteAllServer) Send(m *DecommissionConfigDeleteAllResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DecommissionConfigService_GetAllBatched_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DecommissionConfigBatchedStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DecommissionConfigServiceServer).GetAllBatched(m, &decommissionConfigServiceGetAllBatchedServer{stream})
}

type DecommissionConfigService_GetAllBatchedServer interface {
	Send(*DecommissionConfigBatchedStreamResponse) error
	grpc.ServerStream
}

type decommissionConfigServiceGetAllBatchedServer struct {
	grpc.ServerStream
}

func (x *decommissionConfigServiceGetAllBatchedServer) Send(m *DecommissionConfigBatchedStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DecommissionConfigService_SubscribeBatched_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DecommissionConfigBatchedStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DecommissionConfigServiceServer).SubscribeBatched(m, &decommissionConfigServiceSubscribeBatchedServer{stream})
}

type DecommissionConfigService_SubscribeBatchedServer interface {
	Send(*DecommissionConfigBatchedStreamResponse) error
	grpc.ServerStream
}

type decommissionConfigServiceSubscribeBatchedServer struct {
	grpc.ServerStream
}

func (x *decommissionConfigServiceSubscribeBatchedServer) Send(m *DecommissionConfigBatchedStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// DecommissionConfigService_ServiceDesc is the grpc.ServiceDesc for DecommissionConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DecommissionConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.studio_topology.v1.DecommissionConfigService",
	HandlerType: (*DecommissionConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _DecommissionConfigService_GetOne_Handler,
		},
		{
			MethodName: "GetMeta",
			Handler:    _DecommissionConfigService_GetMeta_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _DecommissionConfigService_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DecommissionConfigService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSome",
			Handler:       _DecommissionConfigService_GetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAll",
			Handler:       _DecommissionConfigService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _DecommissionConfigService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeMeta",
			Handler:       _DecommissionConfigService_SubscribeMeta_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SetSome",
			Handler:       _DecommissionConfigService_SetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteSome",
			Handler:       _DecommissionConfigService_DeleteSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteAll",
			Handler:       _DecommissionConfigService_DeleteAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllBatched",
			Handler:       _DecommissionConfigService_GetAllBatched_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeBatched",
			Handler:       _DecommissionConfigService_SubscribeBatched_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/studio_topology.v1/services.gen.proto",
}

const (
	DeviceInputConfigService_GetOne_FullMethodName           = "/arista.studio_topology.v1.DeviceInputConfigService/GetOne"
	DeviceInputConfigService_GetSome_FullMethodName          = "/arista.studio_topology.v1.DeviceInputConfigService/GetSome"
	DeviceInputConfigService_GetAll_FullMethodName           = "/arista.studio_topology.v1.DeviceInputConfigService/GetAll"
	DeviceInputConfigService_Subscribe_FullMethodName        = "/arista.studio_topology.v1.DeviceInputConfigService/Subscribe"
	DeviceInputConfigService_GetMeta_FullMethodName          = "/arista.studio_topology.v1.DeviceInputConfigService/GetMeta"
	DeviceInputConfigService_SubscribeMeta_FullMethodName    = "/arista.studio_topology.v1.DeviceInputConfigService/SubscribeMeta"
	DeviceInputConfigService_Set_FullMethodName              = "/arista.studio_topology.v1.DeviceInputConfigService/Set"
	DeviceInputConfigService_SetSome_FullMethodName          = "/arista.studio_topology.v1.DeviceInputConfigService/SetSome"
	DeviceInputConfigService_Delete_FullMethodName           = "/arista.studio_topology.v1.DeviceInputConfigService/Delete"
	DeviceInputConfigService_DeleteSome_FullMethodName       = "/arista.studio_topology.v1.DeviceInputConfigService/DeleteSome"
	DeviceInputConfigService_DeleteAll_FullMethodName        = "/arista.studio_topology.v1.DeviceInputConfigService/DeleteAll"
	DeviceInputConfigService_GetAllBatched_FullMethodName    = "/arista.studio_topology.v1.DeviceInputConfigService/GetAllBatched"
	DeviceInputConfigService_SubscribeBatched_FullMethodName = "/arista.studio_topology.v1.DeviceInputConfigService/SubscribeBatched"
)

// DeviceInputConfigServiceClient is the client API for DeviceInputConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceInputConfigServiceClient interface {
	GetOne(ctx context.Context, in *DeviceInputConfigRequest, opts ...grpc.CallOption) (*DeviceInputConfigResponse, error)
	GetSome(ctx context.Context, in *DeviceInputConfigSomeRequest, opts ...grpc.CallOption) (DeviceInputConfigService_GetSomeClient, error)
	GetAll(ctx context.Context, in *DeviceInputConfigStreamRequest, opts ...grpc.CallOption) (DeviceInputConfigService_GetAllClient, error)
	Subscribe(ctx context.Context, in *DeviceInputConfigStreamRequest, opts ...grpc.CallOption) (DeviceInputConfigService_SubscribeClient, error)
	GetMeta(ctx context.Context, in *DeviceInputConfigStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error)
	SubscribeMeta(ctx context.Context, in *DeviceInputConfigStreamRequest, opts ...grpc.CallOption) (DeviceInputConfigService_SubscribeMetaClient, error)
	Set(ctx context.Context, in *DeviceInputConfigSetRequest, opts ...grpc.CallOption) (*DeviceInputConfigSetResponse, error)
	SetSome(ctx context.Context, in *DeviceInputConfigSetSomeRequest, opts ...grpc.CallOption) (DeviceInputConfigService_SetSomeClient, error)
	Delete(ctx context.Context, in *DeviceInputConfigDeleteRequest, opts ...grpc.CallOption) (*DeviceInputConfigDeleteResponse, error)
	DeleteSome(ctx context.Context, in *DeviceInputConfigDeleteSomeRequest, opts ...grpc.CallOption) (DeviceInputConfigService_DeleteSomeClient, error)
	DeleteAll(ctx context.Context, in *DeviceInputConfigDeleteAllRequest, opts ...grpc.CallOption) (DeviceInputConfigService_DeleteAllClient, error)
	GetAllBatched(ctx context.Context, in *DeviceInputConfigBatchedStreamRequest, opts ...grpc.CallOption) (DeviceInputConfigService_GetAllBatchedClient, error)
	SubscribeBatched(ctx context.Context, in *DeviceInputConfigBatchedStreamRequest, opts ...grpc.CallOption) (DeviceInputConfigService_SubscribeBatchedClient, error)
}

type deviceInputConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceInputConfigServiceClient(cc grpc.ClientConnInterface) DeviceInputConfigServiceClient {
	return &deviceInputConfigServiceClient{cc}
}

func (c *deviceInputConfigServiceClient) GetOne(ctx context.Context, in *DeviceInputConfigRequest, opts ...grpc.CallOption) (*DeviceInputConfigResponse, error) {
	out := new(DeviceInputConfigResponse)
	err := c.cc.Invoke(ctx, DeviceInputConfigService_GetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceInputConfigServiceClient) GetSome(ctx context.Context, in *DeviceInputConfigSomeRequest, opts ...grpc.CallOption) (DeviceInputConfigService_GetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeviceInputConfigService_ServiceDesc.Streams[0], DeviceInputConfigService_GetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceInputConfigServiceGetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceInputConfigService_GetSomeClient interface {
	Recv() (*DeviceInputConfigSomeResponse, error)
	grpc.ClientStream
}

type deviceInputConfigServiceGetSomeClient struct {
	grpc.ClientStream
}

func (x *deviceInputConfigServiceGetSomeClient) Recv() (*DeviceInputConfigSomeResponse, error) {
	m := new(DeviceInputConfigSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceInputConfigServiceClient) GetAll(ctx context.Context, in *DeviceInputConfigStreamRequest, opts ...grpc.CallOption) (DeviceInputConfigService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeviceInputConfigService_ServiceDesc.Streams[1], DeviceInputConfigService_GetAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceInputConfigServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceInputConfigService_GetAllClient interface {
	Recv() (*DeviceInputConfigStreamResponse, error)
	grpc.ClientStream
}

type deviceInputConfigServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *deviceInputConfigServiceGetAllClient) Recv() (*DeviceInputConfigStreamResponse, error) {
	m := new(DeviceInputConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceInputConfigServiceClient) Subscribe(ctx context.Context, in *DeviceInputConfigStreamRequest, opts ...grpc.CallOption) (DeviceInputConfigService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeviceInputConfigService_ServiceDesc.Streams[2], DeviceInputConfigService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceInputConfigServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceInputConfigService_SubscribeClient interface {
	Recv() (*DeviceInputConfigStreamResponse, error)
	grpc.ClientStream
}

type deviceInputConfigServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *deviceInputConfigServiceSubscribeClient) Recv() (*DeviceInputConfigStreamResponse, error) {
	m := new(DeviceInputConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceInputConfigServiceClient) GetMeta(ctx context.Context, in *DeviceInputConfigStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error) {
	out := new(MetaResponse)
	err := c.cc.Invoke(ctx, DeviceInputConfigService_GetMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceInputConfigServiceClient) SubscribeMeta(ctx context.Context, in *DeviceInputConfigStreamRequest, opts ...grpc.CallOption) (DeviceInputConfigService_SubscribeMetaClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeviceInputConfigService_ServiceDesc.Streams[3], DeviceInputConfigService_SubscribeMeta_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceInputConfigServiceSubscribeMetaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceInputConfigService_SubscribeMetaClient interface {
	Recv() (*MetaResponse, error)
	grpc.ClientStream
}

type deviceInputConfigServiceSubscribeMetaClient struct {
	grpc.ClientStream
}

func (x *deviceInputConfigServiceSubscribeMetaClient) Recv() (*MetaResponse, error) {
	m := new(MetaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceInputConfigServiceClient) Set(ctx context.Context, in *DeviceInputConfigSetRequest, opts ...grpc.CallOption) (*DeviceInputConfigSetResponse, error) {
	out := new(DeviceInputConfigSetResponse)
	err := c.cc.Invoke(ctx, DeviceInputConfigService_Set_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceInputConfigServiceClient) SetSome(ctx context.Context, in *DeviceInputConfigSetSomeRequest, opts ...grpc.CallOption) (DeviceInputConfigService_SetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeviceInputConfigService_ServiceDesc.Streams[4], DeviceInputConfigService_SetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceInputConfigServiceSetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceInputConfigService_SetSomeClient interface {
	Recv() (*DeviceInputConfigSetSomeResponse, error)
	grpc.ClientStream
}

type deviceInputConfigServiceSetSomeClient struct {
	grpc.ClientStream
}

func (x *deviceInputConfigServiceSetSomeClient) Recv() (*DeviceInputConfigSetSomeResponse, error) {
	m := new(DeviceInputConfigSetSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceInputConfigServiceClient) Delete(ctx context.Context, in *DeviceInputConfigDeleteRequest, opts ...grpc.CallOption) (*DeviceInputConfigDeleteResponse, error) {
	out := new(DeviceInputConfigDeleteResponse)
	err := c.cc.Invoke(ctx, DeviceInputConfigService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceInputConfigServiceClient) DeleteSome(ctx context.Context, in *DeviceInputConfigDeleteSomeRequest, opts ...grpc.CallOption) (DeviceInputConfigService_DeleteSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeviceInputConfigService_ServiceDesc.Streams[5], DeviceInputConfigService_DeleteSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceInputConfigServiceDeleteSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceInputConfigService_DeleteSomeClient interface {
	Recv() (*DeviceInputConfigDeleteSomeResponse, error)
	grpc.ClientStream
}

type deviceInputConfigServiceDeleteSomeClient struct {
	grpc.ClientStream
}

func (x *deviceInputConfigServiceDeleteSomeClient) Recv() (*DeviceInputConfigDeleteSomeResponse, error) {
	m := new(DeviceInputConfigDeleteSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceInputConfigServiceClient) DeleteAll(ctx context.Context, in *DeviceInputConfigDeleteAllRequest, opts ...grpc.CallOption) (DeviceInputConfigService_DeleteAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeviceInputConfigService_ServiceDesc.Streams[6], DeviceInputConfigService_DeleteAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceInputConfigServiceDeleteAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceInputConfigService_DeleteAllClient interface {
	Recv() (*DeviceInputConfigDeleteAllResponse, error)
	grpc.ClientStream
}

type deviceInputConfigServiceDeleteAllClient struct {
	grpc.ClientStream
}

func (x *deviceInputConfigServiceDeleteAllClient) Recv() (*DeviceInputConfigDeleteAllResponse, error) {
	m := new(DeviceInputConfigDeleteAllResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceInputConfigServiceClient) GetAllBatched(ctx context.Context, in *DeviceInputConfigBatchedStreamRequest, opts ...grpc.CallOption) (DeviceInputConfigService_GetAllBatchedClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeviceInputConfigService_ServiceDesc.Streams[7], DeviceInputConfigService_GetAllBatched_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceInputConfigServiceGetAllBatchedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceInputConfigService_GetAllBatchedClient interface {
	Recv() (*DeviceInputConfigBatchedStreamResponse, error)
	grpc.ClientStream
}

type deviceInputConfigServiceGetAllBatchedClient struct {
	grpc.ClientStream
}

func (x *deviceInputConfigServiceGetAllBatchedClient) Recv() (*DeviceInputConfigBatchedStreamResponse, error) {
	m := new(DeviceInputConfigBatchedStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceInputConfigServiceClient) SubscribeBatched(ctx context.Context, in *DeviceInputConfigBatchedStreamRequest, opts ...grpc.CallOption) (DeviceInputConfigService_SubscribeBatchedClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeviceInputConfigService_ServiceDesc.Streams[8], DeviceInputConfigService_SubscribeBatched_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceInputConfigServiceSubscribeBatchedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceInputConfigService_SubscribeBatchedClient interface {
	Recv() (*DeviceInputConfigBatchedStreamResponse, error)
	grpc.ClientStream
}

type deviceInputConfigServiceSubscribeBatchedClient struct {
	grpc.ClientStream
}

func (x *deviceInputConfigServiceSubscribeBatchedClient) Recv() (*DeviceInputConfigBatchedStreamResponse, error) {
	m := new(DeviceInputConfigBatchedStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DeviceInputConfigServiceServer is the server API for DeviceInputConfigService service.
// All implementations must embed UnimplementedDeviceInputConfigServiceServer
// for forward compatibility
type DeviceInputConfigServiceServer interface {
	GetOne(context.Context, *DeviceInputConfigRequest) (*DeviceInputConfigResponse, error)
	GetSome(*DeviceInputConfigSomeRequest, DeviceInputConfigService_GetSomeServer) error
	GetAll(*DeviceInputConfigStreamRequest, DeviceInputConfigService_GetAllServer) error
	Subscribe(*DeviceInputConfigStreamRequest, DeviceInputConfigService_SubscribeServer) error
	GetMeta(context.Context, *DeviceInputConfigStreamRequest) (*MetaResponse, error)
	SubscribeMeta(*DeviceInputConfigStreamRequest, DeviceInputConfigService_SubscribeMetaServer) error
	Set(context.Context, *DeviceInputConfigSetRequest) (*DeviceInputConfigSetResponse, error)
	SetSome(*DeviceInputConfigSetSomeRequest, DeviceInputConfigService_SetSomeServer) error
	Delete(context.Context, *DeviceInputConfigDeleteRequest) (*DeviceInputConfigDeleteResponse, error)
	DeleteSome(*DeviceInputConfigDeleteSomeRequest, DeviceInputConfigService_DeleteSomeServer) error
	DeleteAll(*DeviceInputConfigDeleteAllRequest, DeviceInputConfigService_DeleteAllServer) error
	GetAllBatched(*DeviceInputConfigBatchedStreamRequest, DeviceInputConfigService_GetAllBatchedServer) error
	SubscribeBatched(*DeviceInputConfigBatchedStreamRequest, DeviceInputConfigService_SubscribeBatchedServer) error
	mustEmbedUnimplementedDeviceInputConfigServiceServer()
}

// UnimplementedDeviceInputConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceInputConfigServiceServer struct {
}

func (UnimplementedDeviceInputConfigServiceServer) GetOne(context.Context, *DeviceInputConfigRequest) (*DeviceInputConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedDeviceInputConfigServiceServer) GetSome(*DeviceInputConfigSomeRequest, DeviceInputConfigService_GetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSome not implemented")
}
func (UnimplementedDeviceInputConfigServiceServer) GetAll(*DeviceInputConfigStreamRequest, DeviceInputConfigService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedDeviceInputConfigServiceServer) Subscribe(*DeviceInputConfigStreamRequest, DeviceInputConfigService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedDeviceInputConfigServiceServer) GetMeta(context.Context, *DeviceInputConfigStreamRequest) (*MetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeta not implemented")
}
func (UnimplementedDeviceInputConfigServiceServer) SubscribeMeta(*DeviceInputConfigStreamRequest, DeviceInputConfigService_SubscribeMetaServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMeta not implemented")
}
func (UnimplementedDeviceInputConfigServiceServer) Set(context.Context, *DeviceInputConfigSetRequest) (*DeviceInputConfigSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedDeviceInputConfigServiceServer) SetSome(*DeviceInputConfigSetSomeRequest, DeviceInputConfigService_SetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method SetSome not implemented")
}
func (UnimplementedDeviceInputConfigServiceServer) Delete(context.Context, *DeviceInputConfigDeleteRequest) (*DeviceInputConfigDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDeviceInputConfigServiceServer) DeleteSome(*DeviceInputConfigDeleteSomeRequest, DeviceInputConfigService_DeleteSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteSome not implemented")
}
func (UnimplementedDeviceInputConfigServiceServer) DeleteAll(*DeviceInputConfigDeleteAllRequest, DeviceInputConfigService_DeleteAllServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteAll not implemented")
}
func (UnimplementedDeviceInputConfigServiceServer) GetAllBatched(*DeviceInputConfigBatchedStreamRequest, DeviceInputConfigService_GetAllBatchedServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllBatched not implemented")
}
func (UnimplementedDeviceInputConfigServiceServer) SubscribeBatched(*DeviceInputConfigBatchedStreamRequest, DeviceInputConfigService_SubscribeBatchedServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeBatched not implemented")
}
func (UnimplementedDeviceInputConfigServiceServer) mustEmbedUnimplementedDeviceInputConfigServiceServer() {
}

// UnsafeDeviceInputConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceInputConfigServiceServer will
// result in compilation errors.
type UnsafeDeviceInputConfigServiceServer interface {
	mustEmbedUnimplementedDeviceInputConfigServiceServer()
}

func RegisterDeviceInputConfigServiceServer(s grpc.ServiceRegistrar, srv DeviceInputConfigServiceServer) {
	s.RegisterService(&DeviceInputConfigService_ServiceDesc, srv)
}

func _DeviceInputConfigService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceInputConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceInputConfigServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceInputConfigService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceInputConfigServiceServer).GetOne(ctx, req.(*DeviceInputConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceInputConfigService_GetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceInputConfigSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceInputConfigServiceServer).GetSome(m, &deviceInputConfigServiceGetSomeServer{stream})
}

type DeviceInputConfigService_GetSomeServer interface {
	Send(*DeviceInputConfigSomeResponse) error
	grpc.ServerStream
}

type deviceInputConfigServiceGetSomeServer struct {
	grpc.ServerStream
}

func (x *deviceInputConfigServiceGetSomeServer) Send(m *DeviceInputConfigSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DeviceInputConfigService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceInputConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceInputConfigServiceServer).GetAll(m, &deviceInputConfigServiceGetAllServer{stream})
}

type DeviceInputConfigService_GetAllServer interface {
	Send(*DeviceInputConfigStreamResponse) error
	grpc.ServerStream
}

type deviceInputConfigServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *deviceInputConfigServiceGetAllServer) Send(m *DeviceInputConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DeviceInputConfigService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceInputConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceInputConfigServiceServer).Subscribe(m, &deviceInputConfigServiceSubscribeServer{stream})
}

type DeviceInputConfigService_SubscribeServer interface {
	Send(*DeviceInputConfigStreamResponse) error
	grpc.ServerStream
}

type deviceInputConfigServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *deviceInputConfigServiceSubscribeServer) Send(m *DeviceInputConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DeviceInputConfigService_GetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceInputConfigStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceInputConfigServiceServer).GetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceInputConfigService_GetMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceInputConfigServiceServer).GetMeta(ctx, req.(*DeviceInputConfigStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceInputConfigService_SubscribeMeta_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceInputConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceInputConfigServiceServer).SubscribeMeta(m, &deviceInputConfigServiceSubscribeMetaServer{stream})
}

type DeviceInputConfigService_SubscribeMetaServer interface {
	Send(*MetaResponse) error
	grpc.ServerStream
}

type deviceInputConfigServiceSubscribeMetaServer struct {
	grpc.ServerStream
}

func (x *deviceInputConfigServiceSubscribeMetaServer) Send(m *MetaResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DeviceInputConfigService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceInputConfigSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceInputConfigServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceInputConfigService_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceInputConfigServiceServer).Set(ctx, req.(*DeviceInputConfigSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceInputConfigService_SetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceInputConfigSetSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceInputConfigServiceServer).SetSome(m, &deviceInputConfigServiceSetSomeServer{stream})
}

type DeviceInputConfigService_SetSomeServer interface {
	Send(*DeviceInputConfigSetSomeResponse) error
	grpc.ServerStream
}

type deviceInputConfigServiceSetSomeServer struct {
	grpc.ServerStream
}

func (x *deviceInputConfigServiceSetSomeServer) Send(m *DeviceInputConfigSetSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DeviceInputConfigService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceInputConfigDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceInputConfigServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceInputConfigService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceInputConfigServiceServer).Delete(ctx, req.(*DeviceInputConfigDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceInputConfigService_DeleteSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceInputConfigDeleteSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceInputConfigServiceServer).DeleteSome(m, &deviceInputConfigServiceDeleteSomeServer{stream})
}

type DeviceInputConfigService_DeleteSomeServer interface {
	Send(*DeviceInputConfigDeleteSomeResponse) error
	grpc.ServerStream
}

type deviceInputConfigServiceDeleteSomeServer struct {
	grpc.ServerStream
}

func (x *deviceInputConfigServiceDeleteSomeServer) Send(m *DeviceInputConfigDeleteSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DeviceInputConfigService_DeleteAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceInputConfigDeleteAllRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceInputConfigServiceServer).DeleteAll(m, &deviceInputConfigServiceDeleteAllServer{stream})
}

type DeviceInputConfigService_DeleteAllServer interface {
	Send(*DeviceInputConfigDeleteAllResponse) error
	grpc.ServerStream
}

type deviceInputConfigServiceDeleteAllServer struct {
	grpc.ServerStream
}

func (x *deviceInputConfigServiceDeleteAllServer) Send(m *DeviceInputConfigDeleteAllResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DeviceInputConfigService_GetAllBatched_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceInputConfigBatchedStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceInputConfigServiceServer).GetAllBatched(m, &deviceInputConfigServiceGetAllBatchedServer{stream})
}

type DeviceInputConfigService_GetAllBatchedServer interface {
	Send(*DeviceInputConfigBatchedStreamResponse) error
	grpc.ServerStream
}

type deviceInputConfigServiceGetAllBatchedServer struct {
	grpc.ServerStream
}

func (x *deviceInputConfigServiceGetAllBatchedServer) Send(m *DeviceInputConfigBatchedStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DeviceInputConfigService_SubscribeBatched_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceInputConfigBatchedStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceInputConfigServiceServer).SubscribeBatched(m, &deviceInputConfigServiceSubscribeBatchedServer{stream})
}

type DeviceInputConfigService_SubscribeBatchedServer interface {
	Send(*DeviceInputConfigBatchedStreamResponse) error
	grpc.ServerStream
}

type deviceInputConfigServiceSubscribeBatchedServer struct {
	grpc.ServerStream
}

func (x *deviceInputConfigServiceSubscribeBatchedServer) Send(m *DeviceInputConfigBatchedStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// DeviceInputConfigService_ServiceDesc is the grpc.ServiceDesc for DeviceInputConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceInputConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.studio_topology.v1.DeviceInputConfigService",
	HandlerType: (*DeviceInputConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _DeviceInputConfigService_GetOne_Handler,
		},
		{
			MethodName: "GetMeta",
			Handler:    _DeviceInputConfigService_GetMeta_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _DeviceInputConfigService_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DeviceInputConfigService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSome",
			Handler:       _DeviceInputConfigService_GetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAll",
			Handler:       _DeviceInputConfigService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _DeviceInputConfigService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeMeta",
			Handler:       _DeviceInputConfigService_SubscribeMeta_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SetSome",
			Handler:       _DeviceInputConfigService_SetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteSome",
			Handler:       _DeviceInputConfigService_DeleteSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteAll",
			Handler:       _DeviceInputConfigService_DeleteAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllBatched",
			Handler:       _DeviceInputConfigService_GetAllBatched_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeBatched",
			Handler:       _DeviceInputConfigService_SubscribeBatched_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/studio_topology.v1/services.gen.proto",
}

const (
	DeviceStateService_GetOne_FullMethodName           = "/arista.studio_topology.v1.DeviceStateService/GetOne"
	DeviceStateService_GetSome_FullMethodName          = "/arista.studio_topology.v1.DeviceStateService/GetSome"
	DeviceStateService_GetAll_FullMethodName           = "/arista.studio_topology.v1.DeviceStateService/GetAll"
	DeviceStateService_Subscribe_FullMethodName        = "/arista.studio_topology.v1.DeviceStateService/Subscribe"
	DeviceStateService_GetMeta_FullMethodName          = "/arista.studio_topology.v1.DeviceStateService/GetMeta"
	DeviceStateService_SubscribeMeta_FullMethodName    = "/arista.studio_topology.v1.DeviceStateService/SubscribeMeta"
	DeviceStateService_GetAllBatched_FullMethodName    = "/arista.studio_topology.v1.DeviceStateService/GetAllBatched"
	DeviceStateService_SubscribeBatched_FullMethodName = "/arista.studio_topology.v1.DeviceStateService/SubscribeBatched"
)

// DeviceStateServiceClient is the client API for DeviceStateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceStateServiceClient interface {
	GetOne(ctx context.Context, in *DeviceStateRequest, opts ...grpc.CallOption) (*DeviceStateResponse, error)
	GetSome(ctx context.Context, in *DeviceStateSomeRequest, opts ...grpc.CallOption) (DeviceStateService_GetSomeClient, error)
	GetAll(ctx context.Context, in *DeviceStateStreamRequest, opts ...grpc.CallOption) (DeviceStateService_GetAllClient, error)
	Subscribe(ctx context.Context, in *DeviceStateStreamRequest, opts ...grpc.CallOption) (DeviceStateService_SubscribeClient, error)
	GetMeta(ctx context.Context, in *DeviceStateStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error)
	SubscribeMeta(ctx context.Context, in *DeviceStateStreamRequest, opts ...grpc.CallOption) (DeviceStateService_SubscribeMetaClient, error)
	GetAllBatched(ctx context.Context, in *DeviceStateBatchedStreamRequest, opts ...grpc.CallOption) (DeviceStateService_GetAllBatchedClient, error)
	SubscribeBatched(ctx context.Context, in *DeviceStateBatchedStreamRequest, opts ...grpc.CallOption) (DeviceStateService_SubscribeBatchedClient, error)
}

type deviceStateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceStateServiceClient(cc grpc.ClientConnInterface) DeviceStateServiceClient {
	return &deviceStateServiceClient{cc}
}

func (c *deviceStateServiceClient) GetOne(ctx context.Context, in *DeviceStateRequest, opts ...grpc.CallOption) (*DeviceStateResponse, error) {
	out := new(DeviceStateResponse)
	err := c.cc.Invoke(ctx, DeviceStateService_GetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceStateServiceClient) GetSome(ctx context.Context, in *DeviceStateSomeRequest, opts ...grpc.CallOption) (DeviceStateService_GetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeviceStateService_ServiceDesc.Streams[0], DeviceStateService_GetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceStateServiceGetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceStateService_GetSomeClient interface {
	Recv() (*DeviceStateSomeResponse, error)
	grpc.ClientStream
}

type deviceStateServiceGetSomeClient struct {
	grpc.ClientStream
}

func (x *deviceStateServiceGetSomeClient) Recv() (*DeviceStateSomeResponse, error) {
	m := new(DeviceStateSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceStateServiceClient) GetAll(ctx context.Context, in *DeviceStateStreamRequest, opts ...grpc.CallOption) (DeviceStateService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeviceStateService_ServiceDesc.Streams[1], DeviceStateService_GetAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceStateServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceStateService_GetAllClient interface {
	Recv() (*DeviceStateStreamResponse, error)
	grpc.ClientStream
}

type deviceStateServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *deviceStateServiceGetAllClient) Recv() (*DeviceStateStreamResponse, error) {
	m := new(DeviceStateStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceStateServiceClient) Subscribe(ctx context.Context, in *DeviceStateStreamRequest, opts ...grpc.CallOption) (DeviceStateService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeviceStateService_ServiceDesc.Streams[2], DeviceStateService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceStateServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceStateService_SubscribeClient interface {
	Recv() (*DeviceStateStreamResponse, error)
	grpc.ClientStream
}

type deviceStateServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *deviceStateServiceSubscribeClient) Recv() (*DeviceStateStreamResponse, error) {
	m := new(DeviceStateStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceStateServiceClient) GetMeta(ctx context.Context, in *DeviceStateStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error) {
	out := new(MetaResponse)
	err := c.cc.Invoke(ctx, DeviceStateService_GetMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceStateServiceClient) SubscribeMeta(ctx context.Context, in *DeviceStateStreamRequest, opts ...grpc.CallOption) (DeviceStateService_SubscribeMetaClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeviceStateService_ServiceDesc.Streams[3], DeviceStateService_SubscribeMeta_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceStateServiceSubscribeMetaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceStateService_SubscribeMetaClient interface {
	Recv() (*MetaResponse, error)
	grpc.ClientStream
}

type deviceStateServiceSubscribeMetaClient struct {
	grpc.ClientStream
}

func (x *deviceStateServiceSubscribeMetaClient) Recv() (*MetaResponse, error) {
	m := new(MetaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceStateServiceClient) GetAllBatched(ctx context.Context, in *DeviceStateBatchedStreamRequest, opts ...grpc.CallOption) (DeviceStateService_GetAllBatchedClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeviceStateService_ServiceDesc.Streams[4], DeviceStateService_GetAllBatched_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceStateServiceGetAllBatchedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceStateService_GetAllBatchedClient interface {
	Recv() (*DeviceStateBatchedStreamResponse, error)
	grpc.ClientStream
}

type deviceStateServiceGetAllBatchedClient struct {
	grpc.ClientStream
}

func (x *deviceStateServiceGetAllBatchedClient) Recv() (*DeviceStateBatchedStreamResponse, error) {
	m := new(DeviceStateBatchedStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceStateServiceClient) SubscribeBatched(ctx context.Context, in *DeviceStateBatchedStreamRequest, opts ...grpc.CallOption) (DeviceStateService_SubscribeBatchedClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeviceStateService_ServiceDesc.Streams[5], DeviceStateService_SubscribeBatched_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceStateServiceSubscribeBatchedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceStateService_SubscribeBatchedClient interface {
	Recv() (*DeviceStateBatchedStreamResponse, error)
	grpc.ClientStream
}

type deviceStateServiceSubscribeBatchedClient struct {
	grpc.ClientStream
}

func (x *deviceStateServiceSubscribeBatchedClient) Recv() (*DeviceStateBatchedStreamResponse, error) {
	m := new(DeviceStateBatchedStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DeviceStateServiceServer is the server API for DeviceStateService service.
// All implementations must embed UnimplementedDeviceStateServiceServer
// for forward compatibility
type DeviceStateServiceServer interface {
	GetOne(context.Context, *DeviceStateRequest) (*DeviceStateResponse, error)
	GetSome(*DeviceStateSomeRequest, DeviceStateService_GetSomeServer) error
	GetAll(*DeviceStateStreamRequest, DeviceStateService_GetAllServer) error
	Subscribe(*DeviceStateStreamRequest, DeviceStateService_SubscribeServer) error
	GetMeta(context.Context, *DeviceStateStreamRequest) (*MetaResponse, error)
	SubscribeMeta(*DeviceStateStreamRequest, DeviceStateService_SubscribeMetaServer) error
	GetAllBatched(*DeviceStateBatchedStreamRequest, DeviceStateService_GetAllBatchedServer) error
	SubscribeBatched(*DeviceStateBatchedStreamRequest, DeviceStateService_SubscribeBatchedServer) error
	mustEmbedUnimplementedDeviceStateServiceServer()
}

// UnimplementedDeviceStateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceStateServiceServer struct {
}

func (UnimplementedDeviceStateServiceServer) GetOne(context.Context, *DeviceStateRequest) (*DeviceStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedDeviceStateServiceServer) GetSome(*DeviceStateSomeRequest, DeviceStateService_GetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSome not implemented")
}
func (UnimplementedDeviceStateServiceServer) GetAll(*DeviceStateStreamRequest, DeviceStateService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedDeviceStateServiceServer) Subscribe(*DeviceStateStreamRequest, DeviceStateService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedDeviceStateServiceServer) GetMeta(context.Context, *DeviceStateStreamRequest) (*MetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeta not implemented")
}
func (UnimplementedDeviceStateServiceServer) SubscribeMeta(*DeviceStateStreamRequest, DeviceStateService_SubscribeMetaServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMeta not implemented")
}
func (UnimplementedDeviceStateServiceServer) GetAllBatched(*DeviceStateBatchedStreamRequest, DeviceStateService_GetAllBatchedServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllBatched not implemented")
}
func (UnimplementedDeviceStateServiceServer) SubscribeBatched(*DeviceStateBatchedStreamRequest, DeviceStateService_SubscribeBatchedServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeBatched not implemented")
}
func (UnimplementedDeviceStateServiceServer) mustEmbedUnimplementedDeviceStateServiceServer() {}

// UnsafeDeviceStateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceStateServiceServer will
// result in compilation errors.
type UnsafeDeviceStateServiceServer interface {
	mustEmbedUnimplementedDeviceStateServiceServer()
}

func RegisterDeviceStateServiceServer(s grpc.ServiceRegistrar, srv DeviceStateServiceServer) {
	s.RegisterService(&DeviceStateService_ServiceDesc, srv)
}

func _DeviceStateService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceStateServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceStateService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceStateServiceServer).GetOne(ctx, req.(*DeviceStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceStateService_GetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceStateSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceStateServiceServer).GetSome(m, &deviceStateServiceGetSomeServer{stream})
}

type DeviceStateService_GetSomeServer interface {
	Send(*DeviceStateSomeResponse) error
	grpc.ServerStream
}

type deviceStateServiceGetSomeServer struct {
	grpc.ServerStream
}

func (x *deviceStateServiceGetSomeServer) Send(m *DeviceStateSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DeviceStateService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceStateStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceStateServiceServer).GetAll(m, &deviceStateServiceGetAllServer{stream})
}

type DeviceStateService_GetAllServer interface {
	Send(*DeviceStateStreamResponse) error
	grpc.ServerStream
}

type deviceStateServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *deviceStateServiceGetAllServer) Send(m *DeviceStateStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DeviceStateService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceStateStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceStateServiceServer).Subscribe(m, &deviceStateServiceSubscribeServer{stream})
}

type DeviceStateService_SubscribeServer interface {
	Send(*DeviceStateStreamResponse) error
	grpc.ServerStream
}

type deviceStateServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *deviceStateServiceSubscribeServer) Send(m *DeviceStateStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DeviceStateService_GetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceStateStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceStateServiceServer).GetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceStateService_GetMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceStateServiceServer).GetMeta(ctx, req.(*DeviceStateStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceStateService_SubscribeMeta_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceStateStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceStateServiceServer).SubscribeMeta(m, &deviceStateServiceSubscribeMetaServer{stream})
}

type DeviceStateService_SubscribeMetaServer interface {
	Send(*MetaResponse) error
	grpc.ServerStream
}

type deviceStateServiceSubscribeMetaServer struct {
	grpc.ServerStream
}

func (x *deviceStateServiceSubscribeMetaServer) Send(m *MetaResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DeviceStateService_GetAllBatched_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceStateBatchedStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceStateServiceServer).GetAllBatched(m, &deviceStateServiceGetAllBatchedServer{stream})
}

type DeviceStateService_GetAllBatchedServer interface {
	Send(*DeviceStateBatchedStreamResponse) error
	grpc.ServerStream
}

type deviceStateServiceGetAllBatchedServer struct {
	grpc.ServerStream
}

func (x *deviceStateServiceGetAllBatchedServer) Send(m *DeviceStateBatchedStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DeviceStateService_SubscribeBatched_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceStateBatchedStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceStateServiceServer).SubscribeBatched(m, &deviceStateServiceSubscribeBatchedServer{stream})
}

type DeviceStateService_SubscribeBatchedServer interface {
	Send(*DeviceStateBatchedStreamResponse) error
	grpc.ServerStream
}

type deviceStateServiceSubscribeBatchedServer struct {
	grpc.ServerStream
}

func (x *deviceStateServiceSubscribeBatchedServer) Send(m *DeviceStateBatchedStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// DeviceStateService_ServiceDesc is the grpc.ServiceDesc for DeviceStateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceStateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.studio_topology.v1.DeviceStateService",
	HandlerType: (*DeviceStateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _DeviceStateService_GetOne_Handler,
		},
		{
			MethodName: "GetMeta",
			Handler:    _DeviceStateService_GetMeta_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSome",
			Handler:       _DeviceStateService_GetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAll",
			Handler:       _DeviceStateService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _DeviceStateService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeMeta",
			Handler:       _DeviceStateService_SubscribeMeta_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllBatched",
			Handler:       _DeviceStateService_GetAllBatched_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeBatched",
			Handler:       _DeviceStateService_SubscribeBatched_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/studio_topology.v1/services.gen.proto",
}

const (
	InterfaceInputConfigService_GetOne_FullMethodName           = "/arista.studio_topology.v1.InterfaceInputConfigService/GetOne"
	InterfaceInputConfigService_GetSome_FullMethodName          = "/arista.studio_topology.v1.InterfaceInputConfigService/GetSome"
	InterfaceInputConfigService_GetAll_FullMethodName           = "/arista.studio_topology.v1.InterfaceInputConfigService/GetAll"
	InterfaceInputConfigService_Subscribe_FullMethodName        = "/arista.studio_topology.v1.InterfaceInputConfigService/Subscribe"
	InterfaceInputConfigService_GetMeta_FullMethodName          = "/arista.studio_topology.v1.InterfaceInputConfigService/GetMeta"
	InterfaceInputConfigService_SubscribeMeta_FullMethodName    = "/arista.studio_topology.v1.InterfaceInputConfigService/SubscribeMeta"
	InterfaceInputConfigService_Set_FullMethodName              = "/arista.studio_topology.v1.InterfaceInputConfigService/Set"
	InterfaceInputConfigService_SetSome_FullMethodName          = "/arista.studio_topology.v1.InterfaceInputConfigService/SetSome"
	InterfaceInputConfigService_Delete_FullMethodName           = "/arista.studio_topology.v1.InterfaceInputConfigService/Delete"
	InterfaceInputConfigService_DeleteSome_FullMethodName       = "/arista.studio_topology.v1.InterfaceInputConfigService/DeleteSome"
	InterfaceInputConfigService_DeleteAll_FullMethodName        = "/arista.studio_topology.v1.InterfaceInputConfigService/DeleteAll"
	InterfaceInputConfigService_GetAllBatched_FullMethodName    = "/arista.studio_topology.v1.InterfaceInputConfigService/GetAllBatched"
	InterfaceInputConfigService_SubscribeBatched_FullMethodName = "/arista.studio_topology.v1.InterfaceInputConfigService/SubscribeBatched"
)

// InterfaceInputConfigServiceClient is the client API for InterfaceInputConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InterfaceInputConfigServiceClient interface {
	GetOne(ctx context.Context, in *InterfaceInputConfigRequest, opts ...grpc.CallOption) (*InterfaceInputConfigResponse, error)
	GetSome(ctx context.Context, in *InterfaceInputConfigSomeRequest, opts ...grpc.CallOption) (InterfaceInputConfigService_GetSomeClient, error)
	GetAll(ctx context.Context, in *InterfaceInputConfigStreamRequest, opts ...grpc.CallOption) (InterfaceInputConfigService_GetAllClient, error)
	Subscribe(ctx context.Context, in *InterfaceInputConfigStreamRequest, opts ...grpc.CallOption) (InterfaceInputConfigService_SubscribeClient, error)
	GetMeta(ctx context.Context, in *InterfaceInputConfigStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error)
	SubscribeMeta(ctx context.Context, in *InterfaceInputConfigStreamRequest, opts ...grpc.CallOption) (InterfaceInputConfigService_SubscribeMetaClient, error)
	Set(ctx context.Context, in *InterfaceInputConfigSetRequest, opts ...grpc.CallOption) (*InterfaceInputConfigSetResponse, error)
	SetSome(ctx context.Context, in *InterfaceInputConfigSetSomeRequest, opts ...grpc.CallOption) (InterfaceInputConfigService_SetSomeClient, error)
	Delete(ctx context.Context, in *InterfaceInputConfigDeleteRequest, opts ...grpc.CallOption) (*InterfaceInputConfigDeleteResponse, error)
	DeleteSome(ctx context.Context, in *InterfaceInputConfigDeleteSomeRequest, opts ...grpc.CallOption) (InterfaceInputConfigService_DeleteSomeClient, error)
	DeleteAll(ctx context.Context, in *InterfaceInputConfigDeleteAllRequest, opts ...grpc.CallOption) (InterfaceInputConfigService_DeleteAllClient, error)
	GetAllBatched(ctx context.Context, in *InterfaceInputConfigBatchedStreamRequest, opts ...grpc.CallOption) (InterfaceInputConfigService_GetAllBatchedClient, error)
	SubscribeBatched(ctx context.Context, in *InterfaceInputConfigBatchedStreamRequest, opts ...grpc.CallOption) (InterfaceInputConfigService_SubscribeBatchedClient, error)
}

type interfaceInputConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInterfaceInputConfigServiceClient(cc grpc.ClientConnInterface) InterfaceInputConfigServiceClient {
	return &interfaceInputConfigServiceClient{cc}
}

func (c *interfaceInputConfigServiceClient) GetOne(ctx context.Context, in *InterfaceInputConfigRequest, opts ...grpc.CallOption) (*InterfaceInputConfigResponse, error) {
	out := new(InterfaceInputConfigResponse)
	err := c.cc.Invoke(ctx, InterfaceInputConfigService_GetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceInputConfigServiceClient) GetSome(ctx context.Context, in *InterfaceInputConfigSomeRequest, opts ...grpc.CallOption) (InterfaceInputConfigService_GetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &InterfaceInputConfigService_ServiceDesc.Streams[0], InterfaceInputConfigService_GetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &interfaceInputConfigServiceGetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InterfaceInputConfigService_GetSomeClient interface {
	Recv() (*InterfaceInputConfigSomeResponse, error)
	grpc.ClientStream
}

type interfaceInputConfigServiceGetSomeClient struct {
	grpc.ClientStream
}

func (x *interfaceInputConfigServiceGetSomeClient) Recv() (*InterfaceInputConfigSomeResponse, error) {
	m := new(InterfaceInputConfigSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *interfaceInputConfigServiceClient) GetAll(ctx context.Context, in *InterfaceInputConfigStreamRequest, opts ...grpc.CallOption) (InterfaceInputConfigService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &InterfaceInputConfigService_ServiceDesc.Streams[1], InterfaceInputConfigService_GetAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &interfaceInputConfigServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InterfaceInputConfigService_GetAllClient interface {
	Recv() (*InterfaceInputConfigStreamResponse, error)
	grpc.ClientStream
}

type interfaceInputConfigServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *interfaceInputConfigServiceGetAllClient) Recv() (*InterfaceInputConfigStreamResponse, error) {
	m := new(InterfaceInputConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *interfaceInputConfigServiceClient) Subscribe(ctx context.Context, in *InterfaceInputConfigStreamRequest, opts ...grpc.CallOption) (InterfaceInputConfigService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &InterfaceInputConfigService_ServiceDesc.Streams[2], InterfaceInputConfigService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &interfaceInputConfigServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InterfaceInputConfigService_SubscribeClient interface {
	Recv() (*InterfaceInputConfigStreamResponse, error)
	grpc.ClientStream
}

type interfaceInputConfigServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *interfaceInputConfigServiceSubscribeClient) Recv() (*InterfaceInputConfigStreamResponse, error) {
	m := new(InterfaceInputConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *interfaceInputConfigServiceClient) GetMeta(ctx context.Context, in *InterfaceInputConfigStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error) {
	out := new(MetaResponse)
	err := c.cc.Invoke(ctx, InterfaceInputConfigService_GetMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceInputConfigServiceClient) SubscribeMeta(ctx context.Context, in *InterfaceInputConfigStreamRequest, opts ...grpc.CallOption) (InterfaceInputConfigService_SubscribeMetaClient, error) {
	stream, err := c.cc.NewStream(ctx, &InterfaceInputConfigService_ServiceDesc.Streams[3], InterfaceInputConfigService_SubscribeMeta_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &interfaceInputConfigServiceSubscribeMetaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InterfaceInputConfigService_SubscribeMetaClient interface {
	Recv() (*MetaResponse, error)
	grpc.ClientStream
}

type interfaceInputConfigServiceSubscribeMetaClient struct {
	grpc.ClientStream
}

func (x *interfaceInputConfigServiceSubscribeMetaClient) Recv() (*MetaResponse, error) {
	m := new(MetaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *interfaceInputConfigServiceClient) Set(ctx context.Context, in *InterfaceInputConfigSetRequest, opts ...grpc.CallOption) (*InterfaceInputConfigSetResponse, error) {
	out := new(InterfaceInputConfigSetResponse)
	err := c.cc.Invoke(ctx, InterfaceInputConfigService_Set_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceInputConfigServiceClient) SetSome(ctx context.Context, in *InterfaceInputConfigSetSomeRequest, opts ...grpc.CallOption) (InterfaceInputConfigService_SetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &InterfaceInputConfigService_ServiceDesc.Streams[4], InterfaceInputConfigService_SetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &interfaceInputConfigServiceSetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InterfaceInputConfigService_SetSomeClient interface {
	Recv() (*InterfaceInputConfigSetSomeResponse, error)
	grpc.ClientStream
}

type interfaceInputConfigServiceSetSomeClient struct {
	grpc.ClientStream
}

func (x *interfaceInputConfigServiceSetSomeClient) Recv() (*InterfaceInputConfigSetSomeResponse, error) {
	m := new(InterfaceInputConfigSetSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *interfaceInputConfigServiceClient) Delete(ctx context.Context, in *InterfaceInputConfigDeleteRequest, opts ...grpc.CallOption) (*InterfaceInputConfigDeleteResponse, error) {
	out := new(InterfaceInputConfigDeleteResponse)
	err := c.cc.Invoke(ctx, InterfaceInputConfigService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceInputConfigServiceClient) DeleteSome(ctx context.Context, in *InterfaceInputConfigDeleteSomeRequest, opts ...grpc.CallOption) (InterfaceInputConfigService_DeleteSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &InterfaceInputConfigService_ServiceDesc.Streams[5], InterfaceInputConfigService_DeleteSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &interfaceInputConfigServiceDeleteSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InterfaceInputConfigService_DeleteSomeClient interface {
	Recv() (*InterfaceInputConfigDeleteSomeResponse, error)
	grpc.ClientStream
}

type interfaceInputConfigServiceDeleteSomeClient struct {
	grpc.ClientStream
}

func (x *interfaceInputConfigServiceDeleteSomeClient) Recv() (*InterfaceInputConfigDeleteSomeResponse, error) {
	m := new(InterfaceInputConfigDeleteSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *interfaceInputConfigServiceClient) DeleteAll(ctx context.Context, in *InterfaceInputConfigDeleteAllRequest, opts ...grpc.CallOption) (InterfaceInputConfigService_DeleteAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &InterfaceInputConfigService_ServiceDesc.Streams[6], InterfaceInputConfigService_DeleteAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &interfaceInputConfigServiceDeleteAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InterfaceInputConfigService_DeleteAllClient interface {
	Recv() (*InterfaceInputConfigDeleteAllResponse, error)
	grpc.ClientStream
}

type interfaceInputConfigServiceDeleteAllClient struct {
	grpc.ClientStream
}

func (x *interfaceInputConfigServiceDeleteAllClient) Recv() (*InterfaceInputConfigDeleteAllResponse, error) {
	m := new(InterfaceInputConfigDeleteAllResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *interfaceInputConfigServiceClient) GetAllBatched(ctx context.Context, in *InterfaceInputConfigBatchedStreamRequest, opts ...grpc.CallOption) (InterfaceInputConfigService_GetAllBatchedClient, error) {
	stream, err := c.cc.NewStream(ctx, &InterfaceInputConfigService_ServiceDesc.Streams[7], InterfaceInputConfigService_GetAllBatched_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &interfaceInputConfigServiceGetAllBatchedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InterfaceInputConfigService_GetAllBatchedClient interface {
	Recv() (*InterfaceInputConfigBatchedStreamResponse, error)
	grpc.ClientStream
}

type interfaceInputConfigServiceGetAllBatchedClient struct {
	grpc.ClientStream
}

func (x *interfaceInputConfigServiceGetAllBatchedClient) Recv() (*InterfaceInputConfigBatchedStreamResponse, error) {
	m := new(InterfaceInputConfigBatchedStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *interfaceInputConfigServiceClient) SubscribeBatched(ctx context.Context, in *InterfaceInputConfigBatchedStreamRequest, opts ...grpc.CallOption) (InterfaceInputConfigService_SubscribeBatchedClient, error) {
	stream, err := c.cc.NewStream(ctx, &InterfaceInputConfigService_ServiceDesc.Streams[8], InterfaceInputConfigService_SubscribeBatched_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &interfaceInputConfigServiceSubscribeBatchedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InterfaceInputConfigService_SubscribeBatchedClient interface {
	Recv() (*InterfaceInputConfigBatchedStreamResponse, error)
	grpc.ClientStream
}

type interfaceInputConfigServiceSubscribeBatchedClient struct {
	grpc.ClientStream
}

func (x *interfaceInputConfigServiceSubscribeBatchedClient) Recv() (*InterfaceInputConfigBatchedStreamResponse, error) {
	m := new(InterfaceInputConfigBatchedStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// InterfaceInputConfigServiceServer is the server API for InterfaceInputConfigService service.
// All implementations must embed UnimplementedInterfaceInputConfigServiceServer
// for forward compatibility
type InterfaceInputConfigServiceServer interface {
	GetOne(context.Context, *InterfaceInputConfigRequest) (*InterfaceInputConfigResponse, error)
	GetSome(*InterfaceInputConfigSomeRequest, InterfaceInputConfigService_GetSomeServer) error
	GetAll(*InterfaceInputConfigStreamRequest, InterfaceInputConfigService_GetAllServer) error
	Subscribe(*InterfaceInputConfigStreamRequest, InterfaceInputConfigService_SubscribeServer) error
	GetMeta(context.Context, *InterfaceInputConfigStreamRequest) (*MetaResponse, error)
	SubscribeMeta(*InterfaceInputConfigStreamRequest, InterfaceInputConfigService_SubscribeMetaServer) error
	Set(context.Context, *InterfaceInputConfigSetRequest) (*InterfaceInputConfigSetResponse, error)
	SetSome(*InterfaceInputConfigSetSomeRequest, InterfaceInputConfigService_SetSomeServer) error
	Delete(context.Context, *InterfaceInputConfigDeleteRequest) (*InterfaceInputConfigDeleteResponse, error)
	DeleteSome(*InterfaceInputConfigDeleteSomeRequest, InterfaceInputConfigService_DeleteSomeServer) error
	DeleteAll(*InterfaceInputConfigDeleteAllRequest, InterfaceInputConfigService_DeleteAllServer) error
	GetAllBatched(*InterfaceInputConfigBatchedStreamRequest, InterfaceInputConfigService_GetAllBatchedServer) error
	SubscribeBatched(*InterfaceInputConfigBatchedStreamRequest, InterfaceInputConfigService_SubscribeBatchedServer) error
	mustEmbedUnimplementedInterfaceInputConfigServiceServer()
}

// UnimplementedInterfaceInputConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInterfaceInputConfigServiceServer struct {
}

func (UnimplementedInterfaceInputConfigServiceServer) GetOne(context.Context, *InterfaceInputConfigRequest) (*InterfaceInputConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedInterfaceInputConfigServiceServer) GetSome(*InterfaceInputConfigSomeRequest, InterfaceInputConfigService_GetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSome not implemented")
}
func (UnimplementedInterfaceInputConfigServiceServer) GetAll(*InterfaceInputConfigStreamRequest, InterfaceInputConfigService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedInterfaceInputConfigServiceServer) Subscribe(*InterfaceInputConfigStreamRequest, InterfaceInputConfigService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedInterfaceInputConfigServiceServer) GetMeta(context.Context, *InterfaceInputConfigStreamRequest) (*MetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeta not implemented")
}
func (UnimplementedInterfaceInputConfigServiceServer) SubscribeMeta(*InterfaceInputConfigStreamRequest, InterfaceInputConfigService_SubscribeMetaServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMeta not implemented")
}
func (UnimplementedInterfaceInputConfigServiceServer) Set(context.Context, *InterfaceInputConfigSetRequest) (*InterfaceInputConfigSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedInterfaceInputConfigServiceServer) SetSome(*InterfaceInputConfigSetSomeRequest, InterfaceInputConfigService_SetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method SetSome not implemented")
}
func (UnimplementedInterfaceInputConfigServiceServer) Delete(context.Context, *InterfaceInputConfigDeleteRequest) (*InterfaceInputConfigDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedInterfaceInputConfigServiceServer) DeleteSome(*InterfaceInputConfigDeleteSomeRequest, InterfaceInputConfigService_DeleteSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteSome not implemented")
}
func (UnimplementedInterfaceInputConfigServiceServer) DeleteAll(*InterfaceInputConfigDeleteAllRequest, InterfaceInputConfigService_DeleteAllServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteAll not implemented")
}
func (UnimplementedInterfaceInputConfigServiceServer) GetAllBatched(*InterfaceInputConfigBatchedStreamRequest, InterfaceInputConfigService_GetAllBatchedServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllBatched not implemented")
}
func (UnimplementedInterfaceInputConfigServiceServer) SubscribeBatched(*InterfaceInputConfigBatchedStreamRequest, InterfaceInputConfigService_SubscribeBatchedServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeBatched not implemented")
}
func (UnimplementedInterfaceInputConfigServiceServer) mustEmbedUnimplementedInterfaceInputConfigServiceServer() {
}

// UnsafeInterfaceInputConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InterfaceInputConfigServiceServer will
// result in compilation errors.
type UnsafeInterfaceInputConfigServiceServer interface {
	mustEmbedUnimplementedInterfaceInputConfigServiceServer()
}

func RegisterInterfaceInputConfigServiceServer(s grpc.ServiceRegistrar, srv InterfaceInputConfigServiceServer) {
	s.RegisterService(&InterfaceInputConfigService_ServiceDesc, srv)
}

func _InterfaceInputConfigService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceInputConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceInputConfigServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterfaceInputConfigService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceInputConfigServiceServer).GetOne(ctx, req.(*InterfaceInputConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterfaceInputConfigService_GetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InterfaceInputConfigSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InterfaceInputConfigServiceServer).GetSome(m, &interfaceInputConfigServiceGetSomeServer{stream})
}

type InterfaceInputConfigService_GetSomeServer interface {
	Send(*InterfaceInputConfigSomeResponse) error
	grpc.ServerStream
}

type interfaceInputConfigServiceGetSomeServer struct {
	grpc.ServerStream
}

func (x *interfaceInputConfigServiceGetSomeServer) Send(m *InterfaceInputConfigSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _InterfaceInputConfigService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InterfaceInputConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InterfaceInputConfigServiceServer).GetAll(m, &interfaceInputConfigServiceGetAllServer{stream})
}

type InterfaceInputConfigService_GetAllServer interface {
	Send(*InterfaceInputConfigStreamResponse) error
	grpc.ServerStream
}

type interfaceInputConfigServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *interfaceInputConfigServiceGetAllServer) Send(m *InterfaceInputConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _InterfaceInputConfigService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InterfaceInputConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InterfaceInputConfigServiceServer).Subscribe(m, &interfaceInputConfigServiceSubscribeServer{stream})
}

type InterfaceInputConfigService_SubscribeServer interface {
	Send(*InterfaceInputConfigStreamResponse) error
	grpc.ServerStream
}

type interfaceInputConfigServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *interfaceInputConfigServiceSubscribeServer) Send(m *InterfaceInputConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _InterfaceInputConfigService_GetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceInputConfigStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceInputConfigServiceServer).GetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterfaceInputConfigService_GetMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceInputConfigServiceServer).GetMeta(ctx, req.(*InterfaceInputConfigStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterfaceInputConfigService_SubscribeMeta_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InterfaceInputConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InterfaceInputConfigServiceServer).SubscribeMeta(m, &interfaceInputConfigServiceSubscribeMetaServer{stream})
}

type InterfaceInputConfigService_SubscribeMetaServer interface {
	Send(*MetaResponse) error
	grpc.ServerStream
}

type interfaceInputConfigServiceSubscribeMetaServer struct {
	grpc.ServerStream
}

func (x *interfaceInputConfigServiceSubscribeMetaServer) Send(m *MetaResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _InterfaceInputConfigService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceInputConfigSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceInputConfigServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterfaceInputConfigService_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceInputConfigServiceServer).Set(ctx, req.(*InterfaceInputConfigSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterfaceInputConfigService_SetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InterfaceInputConfigSetSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InterfaceInputConfigServiceServer).SetSome(m, &interfaceInputConfigServiceSetSomeServer{stream})
}

type InterfaceInputConfigService_SetSomeServer interface {
	Send(*InterfaceInputConfigSetSomeResponse) error
	grpc.ServerStream
}

type interfaceInputConfigServiceSetSomeServer struct {
	grpc.ServerStream
}

func (x *interfaceInputConfigServiceSetSomeServer) Send(m *InterfaceInputConfigSetSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _InterfaceInputConfigService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceInputConfigDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceInputConfigServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterfaceInputConfigService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceInputConfigServiceServer).Delete(ctx, req.(*InterfaceInputConfigDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterfaceInputConfigService_DeleteSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InterfaceInputConfigDeleteSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InterfaceInputConfigServiceServer).DeleteSome(m, &interfaceInputConfigServiceDeleteSomeServer{stream})
}

type InterfaceInputConfigService_DeleteSomeServer interface {
	Send(*InterfaceInputConfigDeleteSomeResponse) error
	grpc.ServerStream
}

type interfaceInputConfigServiceDeleteSomeServer struct {
	grpc.ServerStream
}

func (x *interfaceInputConfigServiceDeleteSomeServer) Send(m *InterfaceInputConfigDeleteSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _InterfaceInputConfigService_DeleteAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InterfaceInputConfigDeleteAllRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InterfaceInputConfigServiceServer).DeleteAll(m, &interfaceInputConfigServiceDeleteAllServer{stream})
}

type InterfaceInputConfigService_DeleteAllServer interface {
	Send(*InterfaceInputConfigDeleteAllResponse) error
	grpc.ServerStream
}

type interfaceInputConfigServiceDeleteAllServer struct {
	grpc.ServerStream
}

func (x *interfaceInputConfigServiceDeleteAllServer) Send(m *InterfaceInputConfigDeleteAllResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _InterfaceInputConfigService_GetAllBatched_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InterfaceInputConfigBatchedStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InterfaceInputConfigServiceServer).GetAllBatched(m, &interfaceInputConfigServiceGetAllBatchedServer{stream})
}

type InterfaceInputConfigService_GetAllBatchedServer interface {
	Send(*InterfaceInputConfigBatchedStreamResponse) error
	grpc.ServerStream
}

type interfaceInputConfigServiceGetAllBatchedServer struct {
	grpc.ServerStream
}

func (x *interfaceInputConfigServiceGetAllBatchedServer) Send(m *InterfaceInputConfigBatchedStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _InterfaceInputConfigService_SubscribeBatched_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InterfaceInputConfigBatchedStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InterfaceInputConfigServiceServer).SubscribeBatched(m, &interfaceInputConfigServiceSubscribeBatchedServer{stream})
}

type InterfaceInputConfigService_SubscribeBatchedServer interface {
	Send(*InterfaceInputConfigBatchedStreamResponse) error
	grpc.ServerStream
}

type interfaceInputConfigServiceSubscribeBatchedServer struct {
	grpc.ServerStream
}

func (x *interfaceInputConfigServiceSubscribeBatchedServer) Send(m *InterfaceInputConfigBatchedStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// InterfaceInputConfigService_ServiceDesc is the grpc.ServiceDesc for InterfaceInputConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InterfaceInputConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.studio_topology.v1.InterfaceInputConfigService",
	HandlerType: (*InterfaceInputConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _InterfaceInputConfigService_GetOne_Handler,
		},
		{
			MethodName: "GetMeta",
			Handler:    _InterfaceInputConfigService_GetMeta_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _InterfaceInputConfigService_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _InterfaceInputConfigService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSome",
			Handler:       _InterfaceInputConfigService_GetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAll",
			Handler:       _InterfaceInputConfigService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _InterfaceInputConfigService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeMeta",
			Handler:       _InterfaceInputConfigService_SubscribeMeta_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SetSome",
			Handler:       _InterfaceInputConfigService_SetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteSome",
			Handler:       _InterfaceInputConfigService_DeleteSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteAll",
			Handler:       _InterfaceInputConfigService_DeleteAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllBatched",
			Handler:       _InterfaceInputConfigService_GetAllBatched_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeBatched",
			Handler:       _InterfaceInputConfigService_SubscribeBatched_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/studio_topology.v1/services.gen.proto",
}

const (
	ReplaceService_GetOne_FullMethodName           = "/arista.studio_topology.v1.ReplaceService/GetOne"
	ReplaceService_GetSome_FullMethodName          = "/arista.studio_topology.v1.ReplaceService/GetSome"
	ReplaceService_GetAll_FullMethodName           = "/arista.studio_topology.v1.ReplaceService/GetAll"
	ReplaceService_Subscribe_FullMethodName        = "/arista.studio_topology.v1.ReplaceService/Subscribe"
	ReplaceService_GetMeta_FullMethodName          = "/arista.studio_topology.v1.ReplaceService/GetMeta"
	ReplaceService_SubscribeMeta_FullMethodName    = "/arista.studio_topology.v1.ReplaceService/SubscribeMeta"
	ReplaceService_GetAllBatched_FullMethodName    = "/arista.studio_topology.v1.ReplaceService/GetAllBatched"
	ReplaceService_SubscribeBatched_FullMethodName = "/arista.studio_topology.v1.ReplaceService/SubscribeBatched"
)

// ReplaceServiceClient is the client API for ReplaceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReplaceServiceClient interface {
	GetOne(ctx context.Context, in *ReplaceRequest, opts ...grpc.CallOption) (*ReplaceResponse, error)
	GetSome(ctx context.Context, in *ReplaceSomeRequest, opts ...grpc.CallOption) (ReplaceService_GetSomeClient, error)
	GetAll(ctx context.Context, in *ReplaceStreamRequest, opts ...grpc.CallOption) (ReplaceService_GetAllClient, error)
	Subscribe(ctx context.Context, in *ReplaceStreamRequest, opts ...grpc.CallOption) (ReplaceService_SubscribeClient, error)
	GetMeta(ctx context.Context, in *ReplaceStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error)
	SubscribeMeta(ctx context.Context, in *ReplaceStreamRequest, opts ...grpc.CallOption) (ReplaceService_SubscribeMetaClient, error)
	GetAllBatched(ctx context.Context, in *ReplaceBatchedStreamRequest, opts ...grpc.CallOption) (ReplaceService_GetAllBatchedClient, error)
	SubscribeBatched(ctx context.Context, in *ReplaceBatchedStreamRequest, opts ...grpc.CallOption) (ReplaceService_SubscribeBatchedClient, error)
}

type replaceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReplaceServiceClient(cc grpc.ClientConnInterface) ReplaceServiceClient {
	return &replaceServiceClient{cc}
}

func (c *replaceServiceClient) GetOne(ctx context.Context, in *ReplaceRequest, opts ...grpc.CallOption) (*ReplaceResponse, error) {
	out := new(ReplaceResponse)
	err := c.cc.Invoke(ctx, ReplaceService_GetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceServiceClient) GetSome(ctx context.Context, in *ReplaceSomeRequest, opts ...grpc.CallOption) (ReplaceService_GetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ReplaceService_ServiceDesc.Streams[0], ReplaceService_GetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &replaceServiceGetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ReplaceService_GetSomeClient interface {
	Recv() (*ReplaceSomeResponse, error)
	grpc.ClientStream
}

type replaceServiceGetSomeClient struct {
	grpc.ClientStream
}

func (x *replaceServiceGetSomeClient) Recv() (*ReplaceSomeResponse, error) {
	m := new(ReplaceSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *replaceServiceClient) GetAll(ctx context.Context, in *ReplaceStreamRequest, opts ...grpc.CallOption) (ReplaceService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &ReplaceService_ServiceDesc.Streams[1], ReplaceService_GetAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &replaceServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ReplaceService_GetAllClient interface {
	Recv() (*ReplaceStreamResponse, error)
	grpc.ClientStream
}

type replaceServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *replaceServiceGetAllClient) Recv() (*ReplaceStreamResponse, error) {
	m := new(ReplaceStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *replaceServiceClient) Subscribe(ctx context.Context, in *ReplaceStreamRequest, opts ...grpc.CallOption) (ReplaceService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ReplaceService_ServiceDesc.Streams[2], ReplaceService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &replaceServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ReplaceService_SubscribeClient interface {
	Recv() (*ReplaceStreamResponse, error)
	grpc.ClientStream
}

type replaceServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *replaceServiceSubscribeClient) Recv() (*ReplaceStreamResponse, error) {
	m := new(ReplaceStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *replaceServiceClient) GetMeta(ctx context.Context, in *ReplaceStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error) {
	out := new(MetaResponse)
	err := c.cc.Invoke(ctx, ReplaceService_GetMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceServiceClient) SubscribeMeta(ctx context.Context, in *ReplaceStreamRequest, opts ...grpc.CallOption) (ReplaceService_SubscribeMetaClient, error) {
	stream, err := c.cc.NewStream(ctx, &ReplaceService_ServiceDesc.Streams[3], ReplaceService_SubscribeMeta_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &replaceServiceSubscribeMetaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ReplaceService_SubscribeMetaClient interface {
	Recv() (*MetaResponse, error)
	grpc.ClientStream
}

type replaceServiceSubscribeMetaClient struct {
	grpc.ClientStream
}

func (x *replaceServiceSubscribeMetaClient) Recv() (*MetaResponse, error) {
	m := new(MetaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *replaceServiceClient) GetAllBatched(ctx context.Context, in *ReplaceBatchedStreamRequest, opts ...grpc.CallOption) (ReplaceService_GetAllBatchedClient, error) {
	stream, err := c.cc.NewStream(ctx, &ReplaceService_ServiceDesc.Streams[4], ReplaceService_GetAllBatched_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &replaceServiceGetAllBatchedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ReplaceService_GetAllBatchedClient interface {
	Recv() (*ReplaceBatchedStreamResponse, error)
	grpc.ClientStream
}

type replaceServiceGetAllBatchedClient struct {
	grpc.ClientStream
}

func (x *replaceServiceGetAllBatchedClient) Recv() (*ReplaceBatchedStreamResponse, error) {
	m := new(ReplaceBatchedStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *replaceServiceClient) SubscribeBatched(ctx context.Context, in *ReplaceBatchedStreamRequest, opts ...grpc.CallOption) (ReplaceService_SubscribeBatchedClient, error) {
	stream, err := c.cc.NewStream(ctx, &ReplaceService_ServiceDesc.Streams[5], ReplaceService_SubscribeBatched_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &replaceServiceSubscribeBatchedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ReplaceService_SubscribeBatchedClient interface {
	Recv() (*ReplaceBatchedStreamResponse, error)
	grpc.ClientStream
}

type replaceServiceSubscribeBatchedClient struct {
	grpc.ClientStream
}

func (x *replaceServiceSubscribeBatchedClient) Recv() (*ReplaceBatchedStreamResponse, error) {
	m := new(ReplaceBatchedStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ReplaceServiceServer is the server API for ReplaceService service.
// All implementations must embed UnimplementedReplaceServiceServer
// for forward compatibility
type ReplaceServiceServer interface {
	GetOne(context.Context, *ReplaceRequest) (*ReplaceResponse, error)
	GetSome(*ReplaceSomeRequest, ReplaceService_GetSomeServer) error
	GetAll(*ReplaceStreamRequest, ReplaceService_GetAllServer) error
	Subscribe(*ReplaceStreamRequest, ReplaceService_SubscribeServer) error
	GetMeta(context.Context, *ReplaceStreamRequest) (*MetaResponse, error)
	SubscribeMeta(*ReplaceStreamRequest, ReplaceService_SubscribeMetaServer) error
	GetAllBatched(*ReplaceBatchedStreamRequest, ReplaceService_GetAllBatchedServer) error
	SubscribeBatched(*ReplaceBatchedStreamRequest, ReplaceService_SubscribeBatchedServer) error
	mustEmbedUnimplementedReplaceServiceServer()
}

// UnimplementedReplaceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReplaceServiceServer struct {
}

func (UnimplementedReplaceServiceServer) GetOne(context.Context, *ReplaceRequest) (*ReplaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedReplaceServiceServer) GetSome(*ReplaceSomeRequest, ReplaceService_GetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSome not implemented")
}
func (UnimplementedReplaceServiceServer) GetAll(*ReplaceStreamRequest, ReplaceService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedReplaceServiceServer) Subscribe(*ReplaceStreamRequest, ReplaceService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedReplaceServiceServer) GetMeta(context.Context, *ReplaceStreamRequest) (*MetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeta not implemented")
}
func (UnimplementedReplaceServiceServer) SubscribeMeta(*ReplaceStreamRequest, ReplaceService_SubscribeMetaServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMeta not implemented")
}
func (UnimplementedReplaceServiceServer) GetAllBatched(*ReplaceBatchedStreamRequest, ReplaceService_GetAllBatchedServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllBatched not implemented")
}
func (UnimplementedReplaceServiceServer) SubscribeBatched(*ReplaceBatchedStreamRequest, ReplaceService_SubscribeBatchedServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeBatched not implemented")
}
func (UnimplementedReplaceServiceServer) mustEmbedUnimplementedReplaceServiceServer() {}

// UnsafeReplaceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReplaceServiceServer will
// result in compilation errors.
type UnsafeReplaceServiceServer interface {
	mustEmbedUnimplementedReplaceServiceServer()
}

func RegisterReplaceServiceServer(s grpc.ServiceRegistrar, srv ReplaceServiceServer) {
	s.RegisterService(&ReplaceService_ServiceDesc, srv)
}

func _ReplaceService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplaceServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReplaceService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplaceServiceServer).GetOne(ctx, req.(*ReplaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplaceService_GetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReplaceSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReplaceServiceServer).GetSome(m, &replaceServiceGetSomeServer{stream})
}

type ReplaceService_GetSomeServer interface {
	Send(*ReplaceSomeResponse) error
	grpc.ServerStream
}

type replaceServiceGetSomeServer struct {
	grpc.ServerStream
}

func (x *replaceServiceGetSomeServer) Send(m *ReplaceSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ReplaceService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReplaceStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReplaceServiceServer).GetAll(m, &replaceServiceGetAllServer{stream})
}

type ReplaceService_GetAllServer interface {
	Send(*ReplaceStreamResponse) error
	grpc.ServerStream
}

type replaceServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *replaceServiceGetAllServer) Send(m *ReplaceStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ReplaceService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReplaceStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReplaceServiceServer).Subscribe(m, &replaceServiceSubscribeServer{stream})
}

type ReplaceService_SubscribeServer interface {
	Send(*ReplaceStreamResponse) error
	grpc.ServerStream
}

type replaceServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *replaceServiceSubscribeServer) Send(m *ReplaceStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ReplaceService_GetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplaceServiceServer).GetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReplaceService_GetMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplaceServiceServer).GetMeta(ctx, req.(*ReplaceStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplaceService_SubscribeMeta_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReplaceStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReplaceServiceServer).SubscribeMeta(m, &replaceServiceSubscribeMetaServer{stream})
}

type ReplaceService_SubscribeMetaServer interface {
	Send(*MetaResponse) error
	grpc.ServerStream
}

type replaceServiceSubscribeMetaServer struct {
	grpc.ServerStream
}

func (x *replaceServiceSubscribeMetaServer) Send(m *MetaResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ReplaceService_GetAllBatched_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReplaceBatchedStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReplaceServiceServer).GetAllBatched(m, &replaceServiceGetAllBatchedServer{stream})
}

type ReplaceService_GetAllBatchedServer interface {
	Send(*ReplaceBatchedStreamResponse) error
	grpc.ServerStream
}

type replaceServiceGetAllBatchedServer struct {
	grpc.ServerStream
}

func (x *replaceServiceGetAllBatchedServer) Send(m *ReplaceBatchedStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ReplaceService_SubscribeBatched_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReplaceBatchedStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReplaceServiceServer).SubscribeBatched(m, &replaceServiceSubscribeBatchedServer{stream})
}

type ReplaceService_SubscribeBatchedServer interface {
	Send(*ReplaceBatchedStreamResponse) error
	grpc.ServerStream
}

type replaceServiceSubscribeBatchedServer struct {
	grpc.ServerStream
}

func (x *replaceServiceSubscribeBatchedServer) Send(m *ReplaceBatchedStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ReplaceService_ServiceDesc is the grpc.ServiceDesc for ReplaceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReplaceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.studio_topology.v1.ReplaceService",
	HandlerType: (*ReplaceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _ReplaceService_GetOne_Handler,
		},
		{
			MethodName: "GetMeta",
			Handler:    _ReplaceService_GetMeta_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSome",
			Handler:       _ReplaceService_GetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAll",
			Handler:       _ReplaceService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _ReplaceService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeMeta",
			Handler:       _ReplaceService_SubscribeMeta_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllBatched",
			Handler:       _ReplaceService_GetAllBatched_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeBatched",
			Handler:       _ReplaceService_SubscribeBatched_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/studio_topology.v1/services.gen.proto",
}

const (
	ReplaceConfigService_GetOne_FullMethodName           = "/arista.studio_topology.v1.ReplaceConfigService/GetOne"
	ReplaceConfigService_GetSome_FullMethodName          = "/arista.studio_topology.v1.ReplaceConfigService/GetSome"
	ReplaceConfigService_GetAll_FullMethodName           = "/arista.studio_topology.v1.ReplaceConfigService/GetAll"
	ReplaceConfigService_Subscribe_FullMethodName        = "/arista.studio_topology.v1.ReplaceConfigService/Subscribe"
	ReplaceConfigService_GetMeta_FullMethodName          = "/arista.studio_topology.v1.ReplaceConfigService/GetMeta"
	ReplaceConfigService_SubscribeMeta_FullMethodName    = "/arista.studio_topology.v1.ReplaceConfigService/SubscribeMeta"
	ReplaceConfigService_Set_FullMethodName              = "/arista.studio_topology.v1.ReplaceConfigService/Set"
	ReplaceConfigService_SetSome_FullMethodName          = "/arista.studio_topology.v1.ReplaceConfigService/SetSome"
	ReplaceConfigService_Delete_FullMethodName           = "/arista.studio_topology.v1.ReplaceConfigService/Delete"
	ReplaceConfigService_DeleteSome_FullMethodName       = "/arista.studio_topology.v1.ReplaceConfigService/DeleteSome"
	ReplaceConfigService_DeleteAll_FullMethodName        = "/arista.studio_topology.v1.ReplaceConfigService/DeleteAll"
	ReplaceConfigService_GetAllBatched_FullMethodName    = "/arista.studio_topology.v1.ReplaceConfigService/GetAllBatched"
	ReplaceConfigService_SubscribeBatched_FullMethodName = "/arista.studio_topology.v1.ReplaceConfigService/SubscribeBatched"
)

// ReplaceConfigServiceClient is the client API for ReplaceConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReplaceConfigServiceClient interface {
	GetOne(ctx context.Context, in *ReplaceConfigRequest, opts ...grpc.CallOption) (*ReplaceConfigResponse, error)
	GetSome(ctx context.Context, in *ReplaceConfigSomeRequest, opts ...grpc.CallOption) (ReplaceConfigService_GetSomeClient, error)
	GetAll(ctx context.Context, in *ReplaceConfigStreamRequest, opts ...grpc.CallOption) (ReplaceConfigService_GetAllClient, error)
	Subscribe(ctx context.Context, in *ReplaceConfigStreamRequest, opts ...grpc.CallOption) (ReplaceConfigService_SubscribeClient, error)
	GetMeta(ctx context.Context, in *ReplaceConfigStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error)
	SubscribeMeta(ctx context.Context, in *ReplaceConfigStreamRequest, opts ...grpc.CallOption) (ReplaceConfigService_SubscribeMetaClient, error)
	Set(ctx context.Context, in *ReplaceConfigSetRequest, opts ...grpc.CallOption) (*ReplaceConfigSetResponse, error)
	SetSome(ctx context.Context, in *ReplaceConfigSetSomeRequest, opts ...grpc.CallOption) (ReplaceConfigService_SetSomeClient, error)
	Delete(ctx context.Context, in *ReplaceConfigDeleteRequest, opts ...grpc.CallOption) (*ReplaceConfigDeleteResponse, error)
	DeleteSome(ctx context.Context, in *ReplaceConfigDeleteSomeRequest, opts ...grpc.CallOption) (ReplaceConfigService_DeleteSomeClient, error)
	DeleteAll(ctx context.Context, in *ReplaceConfigDeleteAllRequest, opts ...grpc.CallOption) (ReplaceConfigService_DeleteAllClient, error)
	GetAllBatched(ctx context.Context, in *ReplaceConfigBatchedStreamRequest, opts ...grpc.CallOption) (ReplaceConfigService_GetAllBatchedClient, error)
	SubscribeBatched(ctx context.Context, in *ReplaceConfigBatchedStreamRequest, opts ...grpc.CallOption) (ReplaceConfigService_SubscribeBatchedClient, error)
}

type replaceConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReplaceConfigServiceClient(cc grpc.ClientConnInterface) ReplaceConfigServiceClient {
	return &replaceConfigServiceClient{cc}
}

func (c *replaceConfigServiceClient) GetOne(ctx context.Context, in *ReplaceConfigRequest, opts ...grpc.CallOption) (*ReplaceConfigResponse, error) {
	out := new(ReplaceConfigResponse)
	err := c.cc.Invoke(ctx, ReplaceConfigService_GetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceConfigServiceClient) GetSome(ctx context.Context, in *ReplaceConfigSomeRequest, opts ...grpc.CallOption) (ReplaceConfigService_GetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ReplaceConfigService_ServiceDesc.Streams[0], ReplaceConfigService_GetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &replaceConfigServiceGetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ReplaceConfigService_GetSomeClient interface {
	Recv() (*ReplaceConfigSomeResponse, error)
	grpc.ClientStream
}

type replaceConfigServiceGetSomeClient struct {
	grpc.ClientStream
}

func (x *replaceConfigServiceGetSomeClient) Recv() (*ReplaceConfigSomeResponse, error) {
	m := new(ReplaceConfigSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *replaceConfigServiceClient) GetAll(ctx context.Context, in *ReplaceConfigStreamRequest, opts ...grpc.CallOption) (ReplaceConfigService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &ReplaceConfigService_ServiceDesc.Streams[1], ReplaceConfigService_GetAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &replaceConfigServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ReplaceConfigService_GetAllClient interface {
	Recv() (*ReplaceConfigStreamResponse, error)
	grpc.ClientStream
}

type replaceConfigServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *replaceConfigServiceGetAllClient) Recv() (*ReplaceConfigStreamResponse, error) {
	m := new(ReplaceConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *replaceConfigServiceClient) Subscribe(ctx context.Context, in *ReplaceConfigStreamRequest, opts ...grpc.CallOption) (ReplaceConfigService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ReplaceConfigService_ServiceDesc.Streams[2], ReplaceConfigService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &replaceConfigServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ReplaceConfigService_SubscribeClient interface {
	Recv() (*ReplaceConfigStreamResponse, error)
	grpc.ClientStream
}

type replaceConfigServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *replaceConfigServiceSubscribeClient) Recv() (*ReplaceConfigStreamResponse, error) {
	m := new(ReplaceConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *replaceConfigServiceClient) GetMeta(ctx context.Context, in *ReplaceConfigStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error) {
	out := new(MetaResponse)
	err := c.cc.Invoke(ctx, ReplaceConfigService_GetMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceConfigServiceClient) SubscribeMeta(ctx context.Context, in *ReplaceConfigStreamRequest, opts ...grpc.CallOption) (ReplaceConfigService_SubscribeMetaClient, error) {
	stream, err := c.cc.NewStream(ctx, &ReplaceConfigService_ServiceDesc.Streams[3], ReplaceConfigService_SubscribeMeta_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &replaceConfigServiceSubscribeMetaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ReplaceConfigService_SubscribeMetaClient interface {
	Recv() (*MetaResponse, error)
	grpc.ClientStream
}

type replaceConfigServiceSubscribeMetaClient struct {
	grpc.ClientStream
}

func (x *replaceConfigServiceSubscribeMetaClient) Recv() (*MetaResponse, error) {
	m := new(MetaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *replaceConfigServiceClient) Set(ctx context.Context, in *ReplaceConfigSetRequest, opts ...grpc.CallOption) (*ReplaceConfigSetResponse, error) {
	out := new(ReplaceConfigSetResponse)
	err := c.cc.Invoke(ctx, ReplaceConfigService_Set_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceConfigServiceClient) SetSome(ctx context.Context, in *ReplaceConfigSetSomeRequest, opts ...grpc.CallOption) (ReplaceConfigService_SetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ReplaceConfigService_ServiceDesc.Streams[4], ReplaceConfigService_SetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &replaceConfigServiceSetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ReplaceConfigService_SetSomeClient interface {
	Recv() (*ReplaceConfigSetSomeResponse, error)
	grpc.ClientStream
}

type replaceConfigServiceSetSomeClient struct {
	grpc.ClientStream
}

func (x *replaceConfigServiceSetSomeClient) Recv() (*ReplaceConfigSetSomeResponse, error) {
	m := new(ReplaceConfigSetSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *replaceConfigServiceClient) Delete(ctx context.Context, in *ReplaceConfigDeleteRequest, opts ...grpc.CallOption) (*ReplaceConfigDeleteResponse, error) {
	out := new(ReplaceConfigDeleteResponse)
	err := c.cc.Invoke(ctx, ReplaceConfigService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceConfigServiceClient) DeleteSome(ctx context.Context, in *ReplaceConfigDeleteSomeRequest, opts ...grpc.CallOption) (ReplaceConfigService_DeleteSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ReplaceConfigService_ServiceDesc.Streams[5], ReplaceConfigService_DeleteSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &replaceConfigServiceDeleteSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ReplaceConfigService_DeleteSomeClient interface {
	Recv() (*ReplaceConfigDeleteSomeResponse, error)
	grpc.ClientStream
}

type replaceConfigServiceDeleteSomeClient struct {
	grpc.ClientStream
}

func (x *replaceConfigServiceDeleteSomeClient) Recv() (*ReplaceConfigDeleteSomeResponse, error) {
	m := new(ReplaceConfigDeleteSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *replaceConfigServiceClient) DeleteAll(ctx context.Context, in *ReplaceConfigDeleteAllRequest, opts ...grpc.CallOption) (ReplaceConfigService_DeleteAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &ReplaceConfigService_ServiceDesc.Streams[6], ReplaceConfigService_DeleteAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &replaceConfigServiceDeleteAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ReplaceConfigService_DeleteAllClient interface {
	Recv() (*ReplaceConfigDeleteAllResponse, error)
	grpc.ClientStream
}

type replaceConfigServiceDeleteAllClient struct {
	grpc.ClientStream
}

func (x *replaceConfigServiceDeleteAllClient) Recv() (*ReplaceConfigDeleteAllResponse, error) {
	m := new(ReplaceConfigDeleteAllResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *replaceConfigServiceClient) GetAllBatched(ctx context.Context, in *ReplaceConfigBatchedStreamRequest, opts ...grpc.CallOption) (ReplaceConfigService_GetAllBatchedClient, error) {
	stream, err := c.cc.NewStream(ctx, &ReplaceConfigService_ServiceDesc.Streams[7], ReplaceConfigService_GetAllBatched_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &replaceConfigServiceGetAllBatchedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ReplaceConfigService_GetAllBatchedClient interface {
	Recv() (*ReplaceConfigBatchedStreamResponse, error)
	grpc.ClientStream
}

type replaceConfigServiceGetAllBatchedClient struct {
	grpc.ClientStream
}

func (x *replaceConfigServiceGetAllBatchedClient) Recv() (*ReplaceConfigBatchedStreamResponse, error) {
	m := new(ReplaceConfigBatchedStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *replaceConfigServiceClient) SubscribeBatched(ctx context.Context, in *ReplaceConfigBatchedStreamRequest, opts ...grpc.CallOption) (ReplaceConfigService_SubscribeBatchedClient, error) {
	stream, err := c.cc.NewStream(ctx, &ReplaceConfigService_ServiceDesc.Streams[8], ReplaceConfigService_SubscribeBatched_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &replaceConfigServiceSubscribeBatchedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ReplaceConfigService_SubscribeBatchedClient interface {
	Recv() (*ReplaceConfigBatchedStreamResponse, error)
	grpc.ClientStream
}

type replaceConfigServiceSubscribeBatchedClient struct {
	grpc.ClientStream
}

func (x *replaceConfigServiceSubscribeBatchedClient) Recv() (*ReplaceConfigBatchedStreamResponse, error) {
	m := new(ReplaceConfigBatchedStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ReplaceConfigServiceServer is the server API for ReplaceConfigService service.
// All implementations must embed UnimplementedReplaceConfigServiceServer
// for forward compatibility
type ReplaceConfigServiceServer interface {
	GetOne(context.Context, *ReplaceConfigRequest) (*ReplaceConfigResponse, error)
	GetSome(*ReplaceConfigSomeRequest, ReplaceConfigService_GetSomeServer) error
	GetAll(*ReplaceConfigStreamRequest, ReplaceConfigService_GetAllServer) error
	Subscribe(*ReplaceConfigStreamRequest, ReplaceConfigService_SubscribeServer) error
	GetMeta(context.Context, *ReplaceConfigStreamRequest) (*MetaResponse, error)
	SubscribeMeta(*ReplaceConfigStreamRequest, ReplaceConfigService_SubscribeMetaServer) error
	Set(context.Context, *ReplaceConfigSetRequest) (*ReplaceConfigSetResponse, error)
	SetSome(*ReplaceConfigSetSomeRequest, ReplaceConfigService_SetSomeServer) error
	Delete(context.Context, *ReplaceConfigDeleteRequest) (*ReplaceConfigDeleteResponse, error)
	DeleteSome(*ReplaceConfigDeleteSomeRequest, ReplaceConfigService_DeleteSomeServer) error
	DeleteAll(*ReplaceConfigDeleteAllRequest, ReplaceConfigService_DeleteAllServer) error
	GetAllBatched(*ReplaceConfigBatchedStreamRequest, ReplaceConfigService_GetAllBatchedServer) error
	SubscribeBatched(*ReplaceConfigBatchedStreamRequest, ReplaceConfigService_SubscribeBatchedServer) error
	mustEmbedUnimplementedReplaceConfigServiceServer()
}

// UnimplementedReplaceConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReplaceConfigServiceServer struct {
}

func (UnimplementedReplaceConfigServiceServer) GetOne(context.Context, *ReplaceConfigRequest) (*ReplaceConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedReplaceConfigServiceServer) GetSome(*ReplaceConfigSomeRequest, ReplaceConfigService_GetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSome not implemented")
}
func (UnimplementedReplaceConfigServiceServer) GetAll(*ReplaceConfigStreamRequest, ReplaceConfigService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedReplaceConfigServiceServer) Subscribe(*ReplaceConfigStreamRequest, ReplaceConfigService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedReplaceConfigServiceServer) GetMeta(context.Context, *ReplaceConfigStreamRequest) (*MetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeta not implemented")
}
func (UnimplementedReplaceConfigServiceServer) SubscribeMeta(*ReplaceConfigStreamRequest, ReplaceConfigService_SubscribeMetaServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMeta not implemented")
}
func (UnimplementedReplaceConfigServiceServer) Set(context.Context, *ReplaceConfigSetRequest) (*ReplaceConfigSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedReplaceConfigServiceServer) SetSome(*ReplaceConfigSetSomeRequest, ReplaceConfigService_SetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method SetSome not implemented")
}
func (UnimplementedReplaceConfigServiceServer) Delete(context.Context, *ReplaceConfigDeleteRequest) (*ReplaceConfigDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedReplaceConfigServiceServer) DeleteSome(*ReplaceConfigDeleteSomeRequest, ReplaceConfigService_DeleteSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteSome not implemented")
}
func (UnimplementedReplaceConfigServiceServer) DeleteAll(*ReplaceConfigDeleteAllRequest, ReplaceConfigService_DeleteAllServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteAll not implemented")
}
func (UnimplementedReplaceConfigServiceServer) GetAllBatched(*ReplaceConfigBatchedStreamRequest, ReplaceConfigService_GetAllBatchedServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllBatched not implemented")
}
func (UnimplementedReplaceConfigServiceServer) SubscribeBatched(*ReplaceConfigBatchedStreamRequest, ReplaceConfigService_SubscribeBatchedServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeBatched not implemented")
}
func (UnimplementedReplaceConfigServiceServer) mustEmbedUnimplementedReplaceConfigServiceServer() {}

// UnsafeReplaceConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReplaceConfigServiceServer will
// result in compilation errors.
type UnsafeReplaceConfigServiceServer interface {
	mustEmbedUnimplementedReplaceConfigServiceServer()
}

func RegisterReplaceConfigServiceServer(s grpc.ServiceRegistrar, srv ReplaceConfigServiceServer) {
	s.RegisterService(&ReplaceConfigService_ServiceDesc, srv)
}

func _ReplaceConfigService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplaceConfigServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReplaceConfigService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplaceConfigServiceServer).GetOne(ctx, req.(*ReplaceConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplaceConfigService_GetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReplaceConfigSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReplaceConfigServiceServer).GetSome(m, &replaceConfigServiceGetSomeServer{stream})
}

type ReplaceConfigService_GetSomeServer interface {
	Send(*ReplaceConfigSomeResponse) error
	grpc.ServerStream
}

type replaceConfigServiceGetSomeServer struct {
	grpc.ServerStream
}

func (x *replaceConfigServiceGetSomeServer) Send(m *ReplaceConfigSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ReplaceConfigService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReplaceConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReplaceConfigServiceServer).GetAll(m, &replaceConfigServiceGetAllServer{stream})
}

type ReplaceConfigService_GetAllServer interface {
	Send(*ReplaceConfigStreamResponse) error
	grpc.ServerStream
}

type replaceConfigServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *replaceConfigServiceGetAllServer) Send(m *ReplaceConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ReplaceConfigService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReplaceConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReplaceConfigServiceServer).Subscribe(m, &replaceConfigServiceSubscribeServer{stream})
}

type ReplaceConfigService_SubscribeServer interface {
	Send(*ReplaceConfigStreamResponse) error
	grpc.ServerStream
}

type replaceConfigServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *replaceConfigServiceSubscribeServer) Send(m *ReplaceConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ReplaceConfigService_GetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceConfigStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplaceConfigServiceServer).GetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReplaceConfigService_GetMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplaceConfigServiceServer).GetMeta(ctx, req.(*ReplaceConfigStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplaceConfigService_SubscribeMeta_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReplaceConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReplaceConfigServiceServer).SubscribeMeta(m, &replaceConfigServiceSubscribeMetaServer{stream})
}

type ReplaceConfigService_SubscribeMetaServer interface {
	Send(*MetaResponse) error
	grpc.ServerStream
}

type replaceConfigServiceSubscribeMetaServer struct {
	grpc.ServerStream
}

func (x *replaceConfigServiceSubscribeMetaServer) Send(m *MetaResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ReplaceConfigService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceConfigSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplaceConfigServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReplaceConfigService_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplaceConfigServiceServer).Set(ctx, req.(*ReplaceConfigSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplaceConfigService_SetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReplaceConfigSetSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReplaceConfigServiceServer).SetSome(m, &replaceConfigServiceSetSomeServer{stream})
}

type ReplaceConfigService_SetSomeServer interface {
	Send(*ReplaceConfigSetSomeResponse) error
	grpc.ServerStream
}

type replaceConfigServiceSetSomeServer struct {
	grpc.ServerStream
}

func (x *replaceConfigServiceSetSomeServer) Send(m *ReplaceConfigSetSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ReplaceConfigService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceConfigDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplaceConfigServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReplaceConfigService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplaceConfigServiceServer).Delete(ctx, req.(*ReplaceConfigDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplaceConfigService_DeleteSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReplaceConfigDeleteSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReplaceConfigServiceServer).DeleteSome(m, &replaceConfigServiceDeleteSomeServer{stream})
}

type ReplaceConfigService_DeleteSomeServer interface {
	Send(*ReplaceConfigDeleteSomeResponse) error
	grpc.ServerStream
}

type replaceConfigServiceDeleteSomeServer struct {
	grpc.ServerStream
}

func (x *replaceConfigServiceDeleteSomeServer) Send(m *ReplaceConfigDeleteSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ReplaceConfigService_DeleteAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReplaceConfigDeleteAllRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReplaceConfigServiceServer).DeleteAll(m, &replaceConfigServiceDeleteAllServer{stream})
}

type ReplaceConfigService_DeleteAllServer interface {
	Send(*ReplaceConfigDeleteAllResponse) error
	grpc.ServerStream
}

type replaceConfigServiceDeleteAllServer struct {
	grpc.ServerStream
}

func (x *replaceConfigServiceDeleteAllServer) Send(m *ReplaceConfigDeleteAllResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ReplaceConfigService_GetAllBatched_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReplaceConfigBatchedStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReplaceConfigServiceServer).GetAllBatched(m, &replaceConfigServiceGetAllBatchedServer{stream})
}

type ReplaceConfigService_GetAllBatchedServer interface {
	Send(*ReplaceConfigBatchedStreamResponse) error
	grpc.ServerStream
}

type replaceConfigServiceGetAllBatchedServer struct {
	grpc.ServerStream
}

func (x *replaceConfigServiceGetAllBatchedServer) Send(m *ReplaceConfigBatchedStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ReplaceConfigService_SubscribeBatched_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReplaceConfigBatchedStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReplaceConfigServiceServer).SubscribeBatched(m, &replaceConfigServiceSubscribeBatchedServer{stream})
}

type ReplaceConfigService_SubscribeBatchedServer interface {
	Send(*ReplaceConfigBatchedStreamResponse) error
	grpc.ServerStream
}

type replaceConfigServiceSubscribeBatchedServer struct {
	grpc.ServerStream
}

func (x *replaceConfigServiceSubscribeBatchedServer) Send(m *ReplaceConfigBatchedStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ReplaceConfigService_ServiceDesc is the grpc.ServiceDesc for ReplaceConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReplaceConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.studio_topology.v1.ReplaceConfigService",
	HandlerType: (*ReplaceConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _ReplaceConfigService_GetOne_Handler,
		},
		{
			MethodName: "GetMeta",
			Handler:    _ReplaceConfigService_GetMeta_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _ReplaceConfigService_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ReplaceConfigService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSome",
			Handler:       _ReplaceConfigService_GetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAll",
			Handler:       _ReplaceConfigService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _ReplaceConfigService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeMeta",
			Handler:       _ReplaceConfigService_SubscribeMeta_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SetSome",
			Handler:       _ReplaceConfigService_SetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteSome",
			Handler:       _ReplaceConfigService_DeleteSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteAll",
			Handler:       _ReplaceConfigService_DeleteAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllBatched",
			Handler:       _ReplaceConfigService_GetAllBatched_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeBatched",
			Handler:       _ReplaceConfigService_SubscribeBatched_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/studio_topology.v1/services.gen.proto",
}

const (
	RevertConfigService_GetOne_FullMethodName           = "/arista.studio_topology.v1.RevertConfigService/GetOne"
	RevertConfigService_GetSome_FullMethodName          = "/arista.studio_topology.v1.RevertConfigService/GetSome"
	RevertConfigService_GetAll_FullMethodName           = "/arista.studio_topology.v1.RevertConfigService/GetAll"
	RevertConfigService_Subscribe_FullMethodName        = "/arista.studio_topology.v1.RevertConfigService/Subscribe"
	RevertConfigService_GetMeta_FullMethodName          = "/arista.studio_topology.v1.RevertConfigService/GetMeta"
	RevertConfigService_SubscribeMeta_FullMethodName    = "/arista.studio_topology.v1.RevertConfigService/SubscribeMeta"
	RevertConfigService_Set_FullMethodName              = "/arista.studio_topology.v1.RevertConfigService/Set"
	RevertConfigService_SetSome_FullMethodName          = "/arista.studio_topology.v1.RevertConfigService/SetSome"
	RevertConfigService_Delete_FullMethodName           = "/arista.studio_topology.v1.RevertConfigService/Delete"
	RevertConfigService_DeleteSome_FullMethodName       = "/arista.studio_topology.v1.RevertConfigService/DeleteSome"
	RevertConfigService_DeleteAll_FullMethodName        = "/arista.studio_topology.v1.RevertConfigService/DeleteAll"
	RevertConfigService_GetAllBatched_FullMethodName    = "/arista.studio_topology.v1.RevertConfigService/GetAllBatched"
	RevertConfigService_SubscribeBatched_FullMethodName = "/arista.studio_topology.v1.RevertConfigService/SubscribeBatched"
)

// RevertConfigServiceClient is the client API for RevertConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RevertConfigServiceClient interface {
	GetOne(ctx context.Context, in *RevertConfigRequest, opts ...grpc.CallOption) (*RevertConfigResponse, error)
	GetSome(ctx context.Context, in *RevertConfigSomeRequest, opts ...grpc.CallOption) (RevertConfigService_GetSomeClient, error)
	GetAll(ctx context.Context, in *RevertConfigStreamRequest, opts ...grpc.CallOption) (RevertConfigService_GetAllClient, error)
	Subscribe(ctx context.Context, in *RevertConfigStreamRequest, opts ...grpc.CallOption) (RevertConfigService_SubscribeClient, error)
	GetMeta(ctx context.Context, in *RevertConfigStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error)
	SubscribeMeta(ctx context.Context, in *RevertConfigStreamRequest, opts ...grpc.CallOption) (RevertConfigService_SubscribeMetaClient, error)
	Set(ctx context.Context, in *RevertConfigSetRequest, opts ...grpc.CallOption) (*RevertConfigSetResponse, error)
	SetSome(ctx context.Context, in *RevertConfigSetSomeRequest, opts ...grpc.CallOption) (RevertConfigService_SetSomeClient, error)
	Delete(ctx context.Context, in *RevertConfigDeleteRequest, opts ...grpc.CallOption) (*RevertConfigDeleteResponse, error)
	DeleteSome(ctx context.Context, in *RevertConfigDeleteSomeRequest, opts ...grpc.CallOption) (RevertConfigService_DeleteSomeClient, error)
	DeleteAll(ctx context.Context, in *RevertConfigDeleteAllRequest, opts ...grpc.CallOption) (RevertConfigService_DeleteAllClient, error)
	GetAllBatched(ctx context.Context, in *RevertConfigBatchedStreamRequest, opts ...grpc.CallOption) (RevertConfigService_GetAllBatchedClient, error)
	SubscribeBatched(ctx context.Context, in *RevertConfigBatchedStreamRequest, opts ...grpc.CallOption) (RevertConfigService_SubscribeBatchedClient, error)
}

type revertConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRevertConfigServiceClient(cc grpc.ClientConnInterface) RevertConfigServiceClient {
	return &revertConfigServiceClient{cc}
}

func (c *revertConfigServiceClient) GetOne(ctx context.Context, in *RevertConfigRequest, opts ...grpc.CallOption) (*RevertConfigResponse, error) {
	out := new(RevertConfigResponse)
	err := c.cc.Invoke(ctx, RevertConfigService_GetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revertConfigServiceClient) GetSome(ctx context.Context, in *RevertConfigSomeRequest, opts ...grpc.CallOption) (RevertConfigService_GetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &RevertConfigService_ServiceDesc.Streams[0], RevertConfigService_GetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &revertConfigServiceGetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RevertConfigService_GetSomeClient interface {
	Recv() (*RevertConfigSomeResponse, error)
	grpc.ClientStream
}

type revertConfigServiceGetSomeClient struct {
	grpc.ClientStream
}

func (x *revertConfigServiceGetSomeClient) Recv() (*RevertConfigSomeResponse, error) {
	m := new(RevertConfigSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *revertConfigServiceClient) GetAll(ctx context.Context, in *RevertConfigStreamRequest, opts ...grpc.CallOption) (RevertConfigService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &RevertConfigService_ServiceDesc.Streams[1], RevertConfigService_GetAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &revertConfigServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RevertConfigService_GetAllClient interface {
	Recv() (*RevertConfigStreamResponse, error)
	grpc.ClientStream
}

type revertConfigServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *revertConfigServiceGetAllClient) Recv() (*RevertConfigStreamResponse, error) {
	m := new(RevertConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *revertConfigServiceClient) Subscribe(ctx context.Context, in *RevertConfigStreamRequest, opts ...grpc.CallOption) (RevertConfigService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &RevertConfigService_ServiceDesc.Streams[2], RevertConfigService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &revertConfigServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RevertConfigService_SubscribeClient interface {
	Recv() (*RevertConfigStreamResponse, error)
	grpc.ClientStream
}

type revertConfigServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *revertConfigServiceSubscribeClient) Recv() (*RevertConfigStreamResponse, error) {
	m := new(RevertConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *revertConfigServiceClient) GetMeta(ctx context.Context, in *RevertConfigStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error) {
	out := new(MetaResponse)
	err := c.cc.Invoke(ctx, RevertConfigService_GetMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revertConfigServiceClient) SubscribeMeta(ctx context.Context, in *RevertConfigStreamRequest, opts ...grpc.CallOption) (RevertConfigService_SubscribeMetaClient, error) {
	stream, err := c.cc.NewStream(ctx, &RevertConfigService_ServiceDesc.Streams[3], RevertConfigService_SubscribeMeta_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &revertConfigServiceSubscribeMetaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RevertConfigService_SubscribeMetaClient interface {
	Recv() (*MetaResponse, error)
	grpc.ClientStream
}

type revertConfigServiceSubscribeMetaClient struct {
	grpc.ClientStream
}

func (x *revertConfigServiceSubscribeMetaClient) Recv() (*MetaResponse, error) {
	m := new(MetaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *revertConfigServiceClient) Set(ctx context.Context, in *RevertConfigSetRequest, opts ...grpc.CallOption) (*RevertConfigSetResponse, error) {
	out := new(RevertConfigSetResponse)
	err := c.cc.Invoke(ctx, RevertConfigService_Set_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revertConfigServiceClient) SetSome(ctx context.Context, in *RevertConfigSetSomeRequest, opts ...grpc.CallOption) (RevertConfigService_SetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &RevertConfigService_ServiceDesc.Streams[4], RevertConfigService_SetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &revertConfigServiceSetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RevertConfigService_SetSomeClient interface {
	Recv() (*RevertConfigSetSomeResponse, error)
	grpc.ClientStream
}

type revertConfigServiceSetSomeClient struct {
	grpc.ClientStream
}

func (x *revertConfigServiceSetSomeClient) Recv() (*RevertConfigSetSomeResponse, error) {
	m := new(RevertConfigSetSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *revertConfigServiceClient) Delete(ctx context.Context, in *RevertConfigDeleteRequest, opts ...grpc.CallOption) (*RevertConfigDeleteResponse, error) {
	out := new(RevertConfigDeleteResponse)
	err := c.cc.Invoke(ctx, RevertConfigService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revertConfigServiceClient) DeleteSome(ctx context.Context, in *RevertConfigDeleteSomeRequest, opts ...grpc.CallOption) (RevertConfigService_DeleteSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &RevertConfigService_ServiceDesc.Streams[5], RevertConfigService_DeleteSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &revertConfigServiceDeleteSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RevertConfigService_DeleteSomeClient interface {
	Recv() (*RevertConfigDeleteSomeResponse, error)
	grpc.ClientStream
}

type revertConfigServiceDeleteSomeClient struct {
	grpc.ClientStream
}

func (x *revertConfigServiceDeleteSomeClient) Recv() (*RevertConfigDeleteSomeResponse, error) {
	m := new(RevertConfigDeleteSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *revertConfigServiceClient) DeleteAll(ctx context.Context, in *RevertConfigDeleteAllRequest, opts ...grpc.CallOption) (RevertConfigService_DeleteAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &RevertConfigService_ServiceDesc.Streams[6], RevertConfigService_DeleteAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &revertConfigServiceDeleteAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RevertConfigService_DeleteAllClient interface {
	Recv() (*RevertConfigDeleteAllResponse, error)
	grpc.ClientStream
}

type revertConfigServiceDeleteAllClient struct {
	grpc.ClientStream
}

func (x *revertConfigServiceDeleteAllClient) Recv() (*RevertConfigDeleteAllResponse, error) {
	m := new(RevertConfigDeleteAllResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *revertConfigServiceClient) GetAllBatched(ctx context.Context, in *RevertConfigBatchedStreamRequest, opts ...grpc.CallOption) (RevertConfigService_GetAllBatchedClient, error) {
	stream, err := c.cc.NewStream(ctx, &RevertConfigService_ServiceDesc.Streams[7], RevertConfigService_GetAllBatched_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &revertConfigServiceGetAllBatchedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RevertConfigService_GetAllBatchedClient interface {
	Recv() (*RevertConfigBatchedStreamResponse, error)
	grpc.ClientStream
}

type revertConfigServiceGetAllBatchedClient struct {
	grpc.ClientStream
}

func (x *revertConfigServiceGetAllBatchedClient) Recv() (*RevertConfigBatchedStreamResponse, error) {
	m := new(RevertConfigBatchedStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *revertConfigServiceClient) SubscribeBatched(ctx context.Context, in *RevertConfigBatchedStreamRequest, opts ...grpc.CallOption) (RevertConfigService_SubscribeBatchedClient, error) {
	stream, err := c.cc.NewStream(ctx, &RevertConfigService_ServiceDesc.Streams[8], RevertConfigService_SubscribeBatched_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &revertConfigServiceSubscribeBatchedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RevertConfigService_SubscribeBatchedClient interface {
	Recv() (*RevertConfigBatchedStreamResponse, error)
	grpc.ClientStream
}

type revertConfigServiceSubscribeBatchedClient struct {
	grpc.ClientStream
}

func (x *revertConfigServiceSubscribeBatchedClient) Recv() (*RevertConfigBatchedStreamResponse, error) {
	m := new(RevertConfigBatchedStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RevertConfigServiceServer is the server API for RevertConfigService service.
// All implementations must embed UnimplementedRevertConfigServiceServer
// for forward compatibility
type RevertConfigServiceServer interface {
	GetOne(context.Context, *RevertConfigRequest) (*RevertConfigResponse, error)
	GetSome(*RevertConfigSomeRequest, RevertConfigService_GetSomeServer) error
	GetAll(*RevertConfigStreamRequest, RevertConfigService_GetAllServer) error
	Subscribe(*RevertConfigStreamRequest, RevertConfigService_SubscribeServer) error
	GetMeta(context.Context, *RevertConfigStreamRequest) (*MetaResponse, error)
	SubscribeMeta(*RevertConfigStreamRequest, RevertConfigService_SubscribeMetaServer) error
	Set(context.Context, *RevertConfigSetRequest) (*RevertConfigSetResponse, error)
	SetSome(*RevertConfigSetSomeRequest, RevertConfigService_SetSomeServer) error
	Delete(context.Context, *RevertConfigDeleteRequest) (*RevertConfigDeleteResponse, error)
	DeleteSome(*RevertConfigDeleteSomeRequest, RevertConfigService_DeleteSomeServer) error
	DeleteAll(*RevertConfigDeleteAllRequest, RevertConfigService_DeleteAllServer) error
	GetAllBatched(*RevertConfigBatchedStreamRequest, RevertConfigService_GetAllBatchedServer) error
	SubscribeBatched(*RevertConfigBatchedStreamRequest, RevertConfigService_SubscribeBatchedServer) error
	mustEmbedUnimplementedRevertConfigServiceServer()
}

// UnimplementedRevertConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRevertConfigServiceServer struct {
}

func (UnimplementedRevertConfigServiceServer) GetOne(context.Context, *RevertConfigRequest) (*RevertConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedRevertConfigServiceServer) GetSome(*RevertConfigSomeRequest, RevertConfigService_GetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSome not implemented")
}
func (UnimplementedRevertConfigServiceServer) GetAll(*RevertConfigStreamRequest, RevertConfigService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedRevertConfigServiceServer) Subscribe(*RevertConfigStreamRequest, RevertConfigService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedRevertConfigServiceServer) GetMeta(context.Context, *RevertConfigStreamRequest) (*MetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeta not implemented")
}
func (UnimplementedRevertConfigServiceServer) SubscribeMeta(*RevertConfigStreamRequest, RevertConfigService_SubscribeMetaServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMeta not implemented")
}
func (UnimplementedRevertConfigServiceServer) Set(context.Context, *RevertConfigSetRequest) (*RevertConfigSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedRevertConfigServiceServer) SetSome(*RevertConfigSetSomeRequest, RevertConfigService_SetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method SetSome not implemented")
}
func (UnimplementedRevertConfigServiceServer) Delete(context.Context, *RevertConfigDeleteRequest) (*RevertConfigDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRevertConfigServiceServer) DeleteSome(*RevertConfigDeleteSomeRequest, RevertConfigService_DeleteSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteSome not implemented")
}
func (UnimplementedRevertConfigServiceServer) DeleteAll(*RevertConfigDeleteAllRequest, RevertConfigService_DeleteAllServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteAll not implemented")
}
func (UnimplementedRevertConfigServiceServer) GetAllBatched(*RevertConfigBatchedStreamRequest, RevertConfigService_GetAllBatchedServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllBatched not implemented")
}
func (UnimplementedRevertConfigServiceServer) SubscribeBatched(*RevertConfigBatchedStreamRequest, RevertConfigService_SubscribeBatchedServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeBatched not implemented")
}
func (UnimplementedRevertConfigServiceServer) mustEmbedUnimplementedRevertConfigServiceServer() {}

// UnsafeRevertConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RevertConfigServiceServer will
// result in compilation errors.
type UnsafeRevertConfigServiceServer interface {
	mustEmbedUnimplementedRevertConfigServiceServer()
}

func RegisterRevertConfigServiceServer(s grpc.ServiceRegistrar, srv RevertConfigServiceServer) {
	s.RegisterService(&RevertConfigService_ServiceDesc, srv)
}

func _RevertConfigService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevertConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevertConfigServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RevertConfigService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevertConfigServiceServer).GetOne(ctx, req.(*RevertConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevertConfigService_GetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RevertConfigSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RevertConfigServiceServer).GetSome(m, &revertConfigServiceGetSomeServer{stream})
}

type RevertConfigService_GetSomeServer interface {
	Send(*RevertConfigSomeResponse) error
	grpc.ServerStream
}

type revertConfigServiceGetSomeServer struct {
	grpc.ServerStream
}

func (x *revertConfigServiceGetSomeServer) Send(m *RevertConfigSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RevertConfigService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RevertConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RevertConfigServiceServer).GetAll(m, &revertConfigServiceGetAllServer{stream})
}

type RevertConfigService_GetAllServer interface {
	Send(*RevertConfigStreamResponse) error
	grpc.ServerStream
}

type revertConfigServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *revertConfigServiceGetAllServer) Send(m *RevertConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RevertConfigService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RevertConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RevertConfigServiceServer).Subscribe(m, &revertConfigServiceSubscribeServer{stream})
}

type RevertConfigService_SubscribeServer interface {
	Send(*RevertConfigStreamResponse) error
	grpc.ServerStream
}

type revertConfigServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *revertConfigServiceSubscribeServer) Send(m *RevertConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RevertConfigService_GetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevertConfigStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevertConfigServiceServer).GetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RevertConfigService_GetMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevertConfigServiceServer).GetMeta(ctx, req.(*RevertConfigStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevertConfigService_SubscribeMeta_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RevertConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RevertConfigServiceServer).SubscribeMeta(m, &revertConfigServiceSubscribeMetaServer{stream})
}

type RevertConfigService_SubscribeMetaServer interface {
	Send(*MetaResponse) error
	grpc.ServerStream
}

type revertConfigServiceSubscribeMetaServer struct {
	grpc.ServerStream
}

func (x *revertConfigServiceSubscribeMetaServer) Send(m *MetaResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RevertConfigService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevertConfigSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevertConfigServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RevertConfigService_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevertConfigServiceServer).Set(ctx, req.(*RevertConfigSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevertConfigService_SetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RevertConfigSetSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RevertConfigServiceServer).SetSome(m, &revertConfigServiceSetSomeServer{stream})
}

type RevertConfigService_SetSomeServer interface {
	Send(*RevertConfigSetSomeResponse) error
	grpc.ServerStream
}

type revertConfigServiceSetSomeServer struct {
	grpc.ServerStream
}

func (x *revertConfigServiceSetSomeServer) Send(m *RevertConfigSetSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RevertConfigService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevertConfigDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevertConfigServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RevertConfigService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevertConfigServiceServer).Delete(ctx, req.(*RevertConfigDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevertConfigService_DeleteSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RevertConfigDeleteSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RevertConfigServiceServer).DeleteSome(m, &revertConfigServiceDeleteSomeServer{stream})
}

type RevertConfigService_DeleteSomeServer interface {
	Send(*RevertConfigDeleteSomeResponse) error
	grpc.ServerStream
}

type revertConfigServiceDeleteSomeServer struct {
	grpc.ServerStream
}

func (x *revertConfigServiceDeleteSomeServer) Send(m *RevertConfigDeleteSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RevertConfigService_DeleteAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RevertConfigDeleteAllRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RevertConfigServiceServer).DeleteAll(m, &revertConfigServiceDeleteAllServer{stream})
}

type RevertConfigService_DeleteAllServer interface {
	Send(*RevertConfigDeleteAllResponse) error
	grpc.ServerStream
}

type revertConfigServiceDeleteAllServer struct {
	grpc.ServerStream
}

func (x *revertConfigServiceDeleteAllServer) Send(m *RevertConfigDeleteAllResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RevertConfigService_GetAllBatched_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RevertConfigBatchedStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RevertConfigServiceServer).GetAllBatched(m, &revertConfigServiceGetAllBatchedServer{stream})
}

type RevertConfigService_GetAllBatchedServer interface {
	Send(*RevertConfigBatchedStreamResponse) error
	grpc.ServerStream
}

type revertConfigServiceGetAllBatchedServer struct {
	grpc.ServerStream
}

func (x *revertConfigServiceGetAllBatchedServer) Send(m *RevertConfigBatchedStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RevertConfigService_SubscribeBatched_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RevertConfigBatchedStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RevertConfigServiceServer).SubscribeBatched(m, &revertConfigServiceSubscribeBatchedServer{stream})
}

type RevertConfigService_SubscribeBatchedServer interface {
	Send(*RevertConfigBatchedStreamResponse) error
	grpc.ServerStream
}

type revertConfigServiceSubscribeBatchedServer struct {
	grpc.ServerStream
}

func (x *revertConfigServiceSubscribeBatchedServer) Send(m *RevertConfigBatchedStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// RevertConfigService_ServiceDesc is the grpc.ServiceDesc for RevertConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RevertConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.studio_topology.v1.RevertConfigService",
	HandlerType: (*RevertConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _RevertConfigService_GetOne_Handler,
		},
		{
			MethodName: "GetMeta",
			Handler:    _RevertConfigService_GetMeta_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _RevertConfigService_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RevertConfigService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSome",
			Handler:       _RevertConfigService_GetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAll",
			Handler:       _RevertConfigService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _RevertConfigService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeMeta",
			Handler:       _RevertConfigService_SubscribeMeta_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SetSome",
			Handler:       _RevertConfigService_SetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteSome",
			Handler:       _RevertConfigService_DeleteSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteAll",
			Handler:       _RevertConfigService_DeleteAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllBatched",
			Handler:       _RevertConfigService_GetAllBatched_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeBatched",
			Handler:       _RevertConfigService_SubscribeBatched_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/studio_topology.v1/services.gen.proto",
}

const (
	UpdateService_GetOne_FullMethodName           = "/arista.studio_topology.v1.UpdateService/GetOne"
	UpdateService_GetSome_FullMethodName          = "/arista.studio_topology.v1.UpdateService/GetSome"
	UpdateService_GetAll_FullMethodName           = "/arista.studio_topology.v1.UpdateService/GetAll"
	UpdateService_Subscribe_FullMethodName        = "/arista.studio_topology.v1.UpdateService/Subscribe"
	UpdateService_GetMeta_FullMethodName          = "/arista.studio_topology.v1.UpdateService/GetMeta"
	UpdateService_SubscribeMeta_FullMethodName    = "/arista.studio_topology.v1.UpdateService/SubscribeMeta"
	UpdateService_GetAllBatched_FullMethodName    = "/arista.studio_topology.v1.UpdateService/GetAllBatched"
	UpdateService_SubscribeBatched_FullMethodName = "/arista.studio_topology.v1.UpdateService/SubscribeBatched"
)

// UpdateServiceClient is the client API for UpdateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UpdateServiceClient interface {
	GetOne(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	GetSome(ctx context.Context, in *UpdateSomeRequest, opts ...grpc.CallOption) (UpdateService_GetSomeClient, error)
	GetAll(ctx context.Context, in *UpdateStreamRequest, opts ...grpc.CallOption) (UpdateService_GetAllClient, error)
	Subscribe(ctx context.Context, in *UpdateStreamRequest, opts ...grpc.CallOption) (UpdateService_SubscribeClient, error)
	GetMeta(ctx context.Context, in *UpdateStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error)
	SubscribeMeta(ctx context.Context, in *UpdateStreamRequest, opts ...grpc.CallOption) (UpdateService_SubscribeMetaClient, error)
	GetAllBatched(ctx context.Context, in *UpdateBatchedStreamRequest, opts ...grpc.CallOption) (UpdateService_GetAllBatchedClient, error)
	SubscribeBatched(ctx context.Context, in *UpdateBatchedStreamRequest, opts ...grpc.CallOption) (UpdateService_SubscribeBatchedClient, error)
}

type updateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUpdateServiceClient(cc grpc.ClientConnInterface) UpdateServiceClient {
	return &updateServiceClient{cc}
}

func (c *updateServiceClient) GetOne(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, UpdateService_GetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateServiceClient) GetSome(ctx context.Context, in *UpdateSomeRequest, opts ...grpc.CallOption) (UpdateService_GetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &UpdateService_ServiceDesc.Streams[0], UpdateService_GetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &updateServiceGetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UpdateService_GetSomeClient interface {
	Recv() (*UpdateSomeResponse, error)
	grpc.ClientStream
}

type updateServiceGetSomeClient struct {
	grpc.ClientStream
}

func (x *updateServiceGetSomeClient) Recv() (*UpdateSomeResponse, error) {
	m := new(UpdateSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *updateServiceClient) GetAll(ctx context.Context, in *UpdateStreamRequest, opts ...grpc.CallOption) (UpdateService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &UpdateService_ServiceDesc.Streams[1], UpdateService_GetAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &updateServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UpdateService_GetAllClient interface {
	Recv() (*UpdateStreamResponse, error)
	grpc.ClientStream
}

type updateServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *updateServiceGetAllClient) Recv() (*UpdateStreamResponse, error) {
	m := new(UpdateStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *updateServiceClient) Subscribe(ctx context.Context, in *UpdateStreamRequest, opts ...grpc.CallOption) (UpdateService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &UpdateService_ServiceDesc.Streams[2], UpdateService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &updateServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UpdateService_SubscribeClient interface {
	Recv() (*UpdateStreamResponse, error)
	grpc.ClientStream
}

type updateServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *updateServiceSubscribeClient) Recv() (*UpdateStreamResponse, error) {
	m := new(UpdateStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *updateServiceClient) GetMeta(ctx context.Context, in *UpdateStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error) {
	out := new(MetaResponse)
	err := c.cc.Invoke(ctx, UpdateService_GetMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateServiceClient) SubscribeMeta(ctx context.Context, in *UpdateStreamRequest, opts ...grpc.CallOption) (UpdateService_SubscribeMetaClient, error) {
	stream, err := c.cc.NewStream(ctx, &UpdateService_ServiceDesc.Streams[3], UpdateService_SubscribeMeta_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &updateServiceSubscribeMetaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UpdateService_SubscribeMetaClient interface {
	Recv() (*MetaResponse, error)
	grpc.ClientStream
}

type updateServiceSubscribeMetaClient struct {
	grpc.ClientStream
}

func (x *updateServiceSubscribeMetaClient) Recv() (*MetaResponse, error) {
	m := new(MetaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *updateServiceClient) GetAllBatched(ctx context.Context, in *UpdateBatchedStreamRequest, opts ...grpc.CallOption) (UpdateService_GetAllBatchedClient, error) {
	stream, err := c.cc.NewStream(ctx, &UpdateService_ServiceDesc.Streams[4], UpdateService_GetAllBatched_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &updateServiceGetAllBatchedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UpdateService_GetAllBatchedClient interface {
	Recv() (*UpdateBatchedStreamResponse, error)
	grpc.ClientStream
}

type updateServiceGetAllBatchedClient struct {
	grpc.ClientStream
}

func (x *updateServiceGetAllBatchedClient) Recv() (*UpdateBatchedStreamResponse, error) {
	m := new(UpdateBatchedStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *updateServiceClient) SubscribeBatched(ctx context.Context, in *UpdateBatchedStreamRequest, opts ...grpc.CallOption) (UpdateService_SubscribeBatchedClient, error) {
	stream, err := c.cc.NewStream(ctx, &UpdateService_ServiceDesc.Streams[5], UpdateService_SubscribeBatched_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &updateServiceSubscribeBatchedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UpdateService_SubscribeBatchedClient interface {
	Recv() (*UpdateBatchedStreamResponse, error)
	grpc.ClientStream
}

type updateServiceSubscribeBatchedClient struct {
	grpc.ClientStream
}

func (x *updateServiceSubscribeBatchedClient) Recv() (*UpdateBatchedStreamResponse, error) {
	m := new(UpdateBatchedStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UpdateServiceServer is the server API for UpdateService service.
// All implementations must embed UnimplementedUpdateServiceServer
// for forward compatibility
type UpdateServiceServer interface {
	GetOne(context.Context, *UpdateRequest) (*UpdateResponse, error)
	GetSome(*UpdateSomeRequest, UpdateService_GetSomeServer) error
	GetAll(*UpdateStreamRequest, UpdateService_GetAllServer) error
	Subscribe(*UpdateStreamRequest, UpdateService_SubscribeServer) error
	GetMeta(context.Context, *UpdateStreamRequest) (*MetaResponse, error)
	SubscribeMeta(*UpdateStreamRequest, UpdateService_SubscribeMetaServer) error
	GetAllBatched(*UpdateBatchedStreamRequest, UpdateService_GetAllBatchedServer) error
	SubscribeBatched(*UpdateBatchedStreamRequest, UpdateService_SubscribeBatchedServer) error
	mustEmbedUnimplementedUpdateServiceServer()
}

// UnimplementedUpdateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUpdateServiceServer struct {
}

func (UnimplementedUpdateServiceServer) GetOne(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedUpdateServiceServer) GetSome(*UpdateSomeRequest, UpdateService_GetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSome not implemented")
}
func (UnimplementedUpdateServiceServer) GetAll(*UpdateStreamRequest, UpdateService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedUpdateServiceServer) Subscribe(*UpdateStreamRequest, UpdateService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedUpdateServiceServer) GetMeta(context.Context, *UpdateStreamRequest) (*MetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeta not implemented")
}
func (UnimplementedUpdateServiceServer) SubscribeMeta(*UpdateStreamRequest, UpdateService_SubscribeMetaServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMeta not implemented")
}
func (UnimplementedUpdateServiceServer) GetAllBatched(*UpdateBatchedStreamRequest, UpdateService_GetAllBatchedServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllBatched not implemented")
}
func (UnimplementedUpdateServiceServer) SubscribeBatched(*UpdateBatchedStreamRequest, UpdateService_SubscribeBatchedServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeBatched not implemented")
}
func (UnimplementedUpdateServiceServer) mustEmbedUnimplementedUpdateServiceServer() {}

// UnsafeUpdateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UpdateServiceServer will
// result in compilation errors.
type UnsafeUpdateServiceServer interface {
	mustEmbedUnimplementedUpdateServiceServer()
}

func RegisterUpdateServiceServer(s grpc.ServiceRegistrar, srv UpdateServiceServer) {
	s.RegisterService(&UpdateService_ServiceDesc, srv)
}

func _UpdateService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UpdateService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServiceServer).GetOne(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateService_GetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UpdateSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UpdateServiceServer).GetSome(m, &updateServiceGetSomeServer{stream})
}

type UpdateService_GetSomeServer interface {
	Send(*UpdateSomeResponse) error
	grpc.ServerStream
}

type updateServiceGetSomeServer struct {
	grpc.ServerStream
}

func (x *updateServiceGetSomeServer) Send(m *UpdateSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UpdateService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UpdateStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UpdateServiceServer).GetAll(m, &updateServiceGetAllServer{stream})
}

type UpdateService_GetAllServer interface {
	Send(*UpdateStreamResponse) error
	grpc.ServerStream
}

type updateServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *updateServiceGetAllServer) Send(m *UpdateStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UpdateService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UpdateStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UpdateServiceServer).Subscribe(m, &updateServiceSubscribeServer{stream})
}

type UpdateService_SubscribeServer interface {
	Send(*UpdateStreamResponse) error
	grpc.ServerStream
}

type updateServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *updateServiceSubscribeServer) Send(m *UpdateStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UpdateService_GetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServiceServer).GetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UpdateService_GetMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServiceServer).GetMeta(ctx, req.(*UpdateStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateService_SubscribeMeta_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UpdateStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UpdateServiceServer).SubscribeMeta(m, &updateServiceSubscribeMetaServer{stream})
}

type UpdateService_SubscribeMetaServer interface {
	Send(*MetaResponse) error
	grpc.ServerStream
}

type updateServiceSubscribeMetaServer struct {
	grpc.ServerStream
}

func (x *updateServiceSubscribeMetaServer) Send(m *MetaResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UpdateService_GetAllBatched_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UpdateBatchedStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UpdateServiceServer).GetAllBatched(m, &updateServiceGetAllBatchedServer{stream})
}

type UpdateService_GetAllBatchedServer interface {
	Send(*UpdateBatchedStreamResponse) error
	grpc.ServerStream
}

type updateServiceGetAllBatchedServer struct {
	grpc.ServerStream
}

func (x *updateServiceGetAllBatchedServer) Send(m *UpdateBatchedStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UpdateService_SubscribeBatched_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UpdateBatchedStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UpdateServiceServer).SubscribeBatched(m, &updateServiceSubscribeBatchedServer{stream})
}

type UpdateService_SubscribeBatchedServer interface {
	Send(*UpdateBatchedStreamResponse) error
	grpc.ServerStream
}

type updateServiceSubscribeBatchedServer struct {
	grpc.ServerStream
}

func (x *updateServiceSubscribeBatchedServer) Send(m *UpdateBatchedStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// UpdateService_ServiceDesc is the grpc.ServiceDesc for UpdateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UpdateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.studio_topology.v1.UpdateService",
	HandlerType: (*UpdateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _UpdateService_GetOne_Handler,
		},
		{
			MethodName: "GetMeta",
			Handler:    _UpdateService_GetMeta_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSome",
			Handler:       _UpdateService_GetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAll",
			Handler:       _UpdateService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _UpdateService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeMeta",
			Handler:       _UpdateService_SubscribeMeta_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllBatched",
			Handler:       _UpdateService_GetAllBatched_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeBatched",
			Handler:       _UpdateService_SubscribeBatched_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/studio_topology.v1/services.gen.proto",
}

const (
	UpdateConfigService_GetOne_FullMethodName           = "/arista.studio_topology.v1.UpdateConfigService/GetOne"
	UpdateConfigService_GetSome_FullMethodName          = "/arista.studio_topology.v1.UpdateConfigService/GetSome"
	UpdateConfigService_GetAll_FullMethodName           = "/arista.studio_topology.v1.UpdateConfigService/GetAll"
	UpdateConfigService_Subscribe_FullMethodName        = "/arista.studio_topology.v1.UpdateConfigService/Subscribe"
	UpdateConfigService_GetMeta_FullMethodName          = "/arista.studio_topology.v1.UpdateConfigService/GetMeta"
	UpdateConfigService_SubscribeMeta_FullMethodName    = "/arista.studio_topology.v1.UpdateConfigService/SubscribeMeta"
	UpdateConfigService_Set_FullMethodName              = "/arista.studio_topology.v1.UpdateConfigService/Set"
	UpdateConfigService_SetSome_FullMethodName          = "/arista.studio_topology.v1.UpdateConfigService/SetSome"
	UpdateConfigService_Delete_FullMethodName           = "/arista.studio_topology.v1.UpdateConfigService/Delete"
	UpdateConfigService_DeleteSome_FullMethodName       = "/arista.studio_topology.v1.UpdateConfigService/DeleteSome"
	UpdateConfigService_DeleteAll_FullMethodName        = "/arista.studio_topology.v1.UpdateConfigService/DeleteAll"
	UpdateConfigService_GetAllBatched_FullMethodName    = "/arista.studio_topology.v1.UpdateConfigService/GetAllBatched"
	UpdateConfigService_SubscribeBatched_FullMethodName = "/arista.studio_topology.v1.UpdateConfigService/SubscribeBatched"
)

// UpdateConfigServiceClient is the client API for UpdateConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UpdateConfigServiceClient interface {
	GetOne(ctx context.Context, in *UpdateConfigRequest, opts ...grpc.CallOption) (*UpdateConfigResponse, error)
	GetSome(ctx context.Context, in *UpdateConfigSomeRequest, opts ...grpc.CallOption) (UpdateConfigService_GetSomeClient, error)
	GetAll(ctx context.Context, in *UpdateConfigStreamRequest, opts ...grpc.CallOption) (UpdateConfigService_GetAllClient, error)
	Subscribe(ctx context.Context, in *UpdateConfigStreamRequest, opts ...grpc.CallOption) (UpdateConfigService_SubscribeClient, error)
	GetMeta(ctx context.Context, in *UpdateConfigStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error)
	SubscribeMeta(ctx context.Context, in *UpdateConfigStreamRequest, opts ...grpc.CallOption) (UpdateConfigService_SubscribeMetaClient, error)
	Set(ctx context.Context, in *UpdateConfigSetRequest, opts ...grpc.CallOption) (*UpdateConfigSetResponse, error)
	SetSome(ctx context.Context, in *UpdateConfigSetSomeRequest, opts ...grpc.CallOption) (UpdateConfigService_SetSomeClient, error)
	Delete(ctx context.Context, in *UpdateConfigDeleteRequest, opts ...grpc.CallOption) (*UpdateConfigDeleteResponse, error)
	DeleteSome(ctx context.Context, in *UpdateConfigDeleteSomeRequest, opts ...grpc.CallOption) (UpdateConfigService_DeleteSomeClient, error)
	DeleteAll(ctx context.Context, in *UpdateConfigDeleteAllRequest, opts ...grpc.CallOption) (UpdateConfigService_DeleteAllClient, error)
	GetAllBatched(ctx context.Context, in *UpdateConfigBatchedStreamRequest, opts ...grpc.CallOption) (UpdateConfigService_GetAllBatchedClient, error)
	SubscribeBatched(ctx context.Context, in *UpdateConfigBatchedStreamRequest, opts ...grpc.CallOption) (UpdateConfigService_SubscribeBatchedClient, error)
}

type updateConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUpdateConfigServiceClient(cc grpc.ClientConnInterface) UpdateConfigServiceClient {
	return &updateConfigServiceClient{cc}
}

func (c *updateConfigServiceClient) GetOne(ctx context.Context, in *UpdateConfigRequest, opts ...grpc.CallOption) (*UpdateConfigResponse, error) {
	out := new(UpdateConfigResponse)
	err := c.cc.Invoke(ctx, UpdateConfigService_GetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateConfigServiceClient) GetSome(ctx context.Context, in *UpdateConfigSomeRequest, opts ...grpc.CallOption) (UpdateConfigService_GetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &UpdateConfigService_ServiceDesc.Streams[0], UpdateConfigService_GetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &updateConfigServiceGetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UpdateConfigService_GetSomeClient interface {
	Recv() (*UpdateConfigSomeResponse, error)
	grpc.ClientStream
}

type updateConfigServiceGetSomeClient struct {
	grpc.ClientStream
}

func (x *updateConfigServiceGetSomeClient) Recv() (*UpdateConfigSomeResponse, error) {
	m := new(UpdateConfigSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *updateConfigServiceClient) GetAll(ctx context.Context, in *UpdateConfigStreamRequest, opts ...grpc.CallOption) (UpdateConfigService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &UpdateConfigService_ServiceDesc.Streams[1], UpdateConfigService_GetAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &updateConfigServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UpdateConfigService_GetAllClient interface {
	Recv() (*UpdateConfigStreamResponse, error)
	grpc.ClientStream
}

type updateConfigServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *updateConfigServiceGetAllClient) Recv() (*UpdateConfigStreamResponse, error) {
	m := new(UpdateConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *updateConfigServiceClient) Subscribe(ctx context.Context, in *UpdateConfigStreamRequest, opts ...grpc.CallOption) (UpdateConfigService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &UpdateConfigService_ServiceDesc.Streams[2], UpdateConfigService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &updateConfigServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UpdateConfigService_SubscribeClient interface {
	Recv() (*UpdateConfigStreamResponse, error)
	grpc.ClientStream
}

type updateConfigServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *updateConfigServiceSubscribeClient) Recv() (*UpdateConfigStreamResponse, error) {
	m := new(UpdateConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *updateConfigServiceClient) GetMeta(ctx context.Context, in *UpdateConfigStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error) {
	out := new(MetaResponse)
	err := c.cc.Invoke(ctx, UpdateConfigService_GetMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateConfigServiceClient) SubscribeMeta(ctx context.Context, in *UpdateConfigStreamRequest, opts ...grpc.CallOption) (UpdateConfigService_SubscribeMetaClient, error) {
	stream, err := c.cc.NewStream(ctx, &UpdateConfigService_ServiceDesc.Streams[3], UpdateConfigService_SubscribeMeta_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &updateConfigServiceSubscribeMetaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UpdateConfigService_SubscribeMetaClient interface {
	Recv() (*MetaResponse, error)
	grpc.ClientStream
}

type updateConfigServiceSubscribeMetaClient struct {
	grpc.ClientStream
}

func (x *updateConfigServiceSubscribeMetaClient) Recv() (*MetaResponse, error) {
	m := new(MetaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *updateConfigServiceClient) Set(ctx context.Context, in *UpdateConfigSetRequest, opts ...grpc.CallOption) (*UpdateConfigSetResponse, error) {
	out := new(UpdateConfigSetResponse)
	err := c.cc.Invoke(ctx, UpdateConfigService_Set_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateConfigServiceClient) SetSome(ctx context.Context, in *UpdateConfigSetSomeRequest, opts ...grpc.CallOption) (UpdateConfigService_SetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &UpdateConfigService_ServiceDesc.Streams[4], UpdateConfigService_SetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &updateConfigServiceSetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UpdateConfigService_SetSomeClient interface {
	Recv() (*UpdateConfigSetSomeResponse, error)
	grpc.ClientStream
}

type updateConfigServiceSetSomeClient struct {
	grpc.ClientStream
}

func (x *updateConfigServiceSetSomeClient) Recv() (*UpdateConfigSetSomeResponse, error) {
	m := new(UpdateConfigSetSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *updateConfigServiceClient) Delete(ctx context.Context, in *UpdateConfigDeleteRequest, opts ...grpc.CallOption) (*UpdateConfigDeleteResponse, error) {
	out := new(UpdateConfigDeleteResponse)
	err := c.cc.Invoke(ctx, UpdateConfigService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateConfigServiceClient) DeleteSome(ctx context.Context, in *UpdateConfigDeleteSomeRequest, opts ...grpc.CallOption) (UpdateConfigService_DeleteSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &UpdateConfigService_ServiceDesc.Streams[5], UpdateConfigService_DeleteSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &updateConfigServiceDeleteSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UpdateConfigService_DeleteSomeClient interface {
	Recv() (*UpdateConfigDeleteSomeResponse, error)
	grpc.ClientStream
}

type updateConfigServiceDeleteSomeClient struct {
	grpc.ClientStream
}

func (x *updateConfigServiceDeleteSomeClient) Recv() (*UpdateConfigDeleteSomeResponse, error) {
	m := new(UpdateConfigDeleteSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *updateConfigServiceClient) DeleteAll(ctx context.Context, in *UpdateConfigDeleteAllRequest, opts ...grpc.CallOption) (UpdateConfigService_DeleteAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &UpdateConfigService_ServiceDesc.Streams[6], UpdateConfigService_DeleteAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &updateConfigServiceDeleteAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UpdateConfigService_DeleteAllClient interface {
	Recv() (*UpdateConfigDeleteAllResponse, error)
	grpc.ClientStream
}

type updateConfigServiceDeleteAllClient struct {
	grpc.ClientStream
}

func (x *updateConfigServiceDeleteAllClient) Recv() (*UpdateConfigDeleteAllResponse, error) {
	m := new(UpdateConfigDeleteAllResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *updateConfigServiceClient) GetAllBatched(ctx context.Context, in *UpdateConfigBatchedStreamRequest, opts ...grpc.CallOption) (UpdateConfigService_GetAllBatchedClient, error) {
	stream, err := c.cc.NewStream(ctx, &UpdateConfigService_ServiceDesc.Streams[7], UpdateConfigService_GetAllBatched_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &updateConfigServiceGetAllBatchedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UpdateConfigService_GetAllBatchedClient interface {
	Recv() (*UpdateConfigBatchedStreamResponse, error)
	grpc.ClientStream
}

type updateConfigServiceGetAllBatchedClient struct {
	grpc.ClientStream
}

func (x *updateConfigServiceGetAllBatchedClient) Recv() (*UpdateConfigBatchedStreamResponse, error) {
	m := new(UpdateConfigBatchedStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *updateConfigServiceClient) SubscribeBatched(ctx context.Context, in *UpdateConfigBatchedStreamRequest, opts ...grpc.CallOption) (UpdateConfigService_SubscribeBatchedClient, error) {
	stream, err := c.cc.NewStream(ctx, &UpdateConfigService_ServiceDesc.Streams[8], UpdateConfigService_SubscribeBatched_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &updateConfigServiceSubscribeBatchedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UpdateConfigService_SubscribeBatchedClient interface {
	Recv() (*UpdateConfigBatchedStreamResponse, error)
	grpc.ClientStream
}

type updateConfigServiceSubscribeBatchedClient struct {
	grpc.ClientStream
}

func (x *updateConfigServiceSubscribeBatchedClient) Recv() (*UpdateConfigBatchedStreamResponse, error) {
	m := new(UpdateConfigBatchedStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UpdateConfigServiceServer is the server API for UpdateConfigService service.
// All implementations must embed UnimplementedUpdateConfigServiceServer
// for forward compatibility
type UpdateConfigServiceServer interface {
	GetOne(context.Context, *UpdateConfigRequest) (*UpdateConfigResponse, error)
	GetSome(*UpdateConfigSomeRequest, UpdateConfigService_GetSomeServer) error
	GetAll(*UpdateConfigStreamRequest, UpdateConfigService_GetAllServer) error
	Subscribe(*UpdateConfigStreamRequest, UpdateConfigService_SubscribeServer) error
	GetMeta(context.Context, *UpdateConfigStreamRequest) (*MetaResponse, error)
	SubscribeMeta(*UpdateConfigStreamRequest, UpdateConfigService_SubscribeMetaServer) error
	Set(context.Context, *UpdateConfigSetRequest) (*UpdateConfigSetResponse, error)
	SetSome(*UpdateConfigSetSomeRequest, UpdateConfigService_SetSomeServer) error
	Delete(context.Context, *UpdateConfigDeleteRequest) (*UpdateConfigDeleteResponse, error)
	DeleteSome(*UpdateConfigDeleteSomeRequest, UpdateConfigService_DeleteSomeServer) error
	DeleteAll(*UpdateConfigDeleteAllRequest, UpdateConfigService_DeleteAllServer) error
	GetAllBatched(*UpdateConfigBatchedStreamRequest, UpdateConfigService_GetAllBatchedServer) error
	SubscribeBatched(*UpdateConfigBatchedStreamRequest, UpdateConfigService_SubscribeBatchedServer) error
	mustEmbedUnimplementedUpdateConfigServiceServer()
}

// UnimplementedUpdateConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUpdateConfigServiceServer struct {
}

func (UnimplementedUpdateConfigServiceServer) GetOne(context.Context, *UpdateConfigRequest) (*UpdateConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedUpdateConfigServiceServer) GetSome(*UpdateConfigSomeRequest, UpdateConfigService_GetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSome not implemented")
}
func (UnimplementedUpdateConfigServiceServer) GetAll(*UpdateConfigStreamRequest, UpdateConfigService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedUpdateConfigServiceServer) Subscribe(*UpdateConfigStreamRequest, UpdateConfigService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedUpdateConfigServiceServer) GetMeta(context.Context, *UpdateConfigStreamRequest) (*MetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeta not implemented")
}
func (UnimplementedUpdateConfigServiceServer) SubscribeMeta(*UpdateConfigStreamRequest, UpdateConfigService_SubscribeMetaServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMeta not implemented")
}
func (UnimplementedUpdateConfigServiceServer) Set(context.Context, *UpdateConfigSetRequest) (*UpdateConfigSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedUpdateConfigServiceServer) SetSome(*UpdateConfigSetSomeRequest, UpdateConfigService_SetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method SetSome not implemented")
}
func (UnimplementedUpdateConfigServiceServer) Delete(context.Context, *UpdateConfigDeleteRequest) (*UpdateConfigDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedUpdateConfigServiceServer) DeleteSome(*UpdateConfigDeleteSomeRequest, UpdateConfigService_DeleteSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteSome not implemented")
}
func (UnimplementedUpdateConfigServiceServer) DeleteAll(*UpdateConfigDeleteAllRequest, UpdateConfigService_DeleteAllServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteAll not implemented")
}
func (UnimplementedUpdateConfigServiceServer) GetAllBatched(*UpdateConfigBatchedStreamRequest, UpdateConfigService_GetAllBatchedServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllBatched not implemented")
}
func (UnimplementedUpdateConfigServiceServer) SubscribeBatched(*UpdateConfigBatchedStreamRequest, UpdateConfigService_SubscribeBatchedServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeBatched not implemented")
}
func (UnimplementedUpdateConfigServiceServer) mustEmbedUnimplementedUpdateConfigServiceServer() {}

// UnsafeUpdateConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UpdateConfigServiceServer will
// result in compilation errors.
type UnsafeUpdateConfigServiceServer interface {
	mustEmbedUnimplementedUpdateConfigServiceServer()
}

func RegisterUpdateConfigServiceServer(s grpc.ServiceRegistrar, srv UpdateConfigServiceServer) {
	s.RegisterService(&UpdateConfigService_ServiceDesc, srv)
}

func _UpdateConfigService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateConfigServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UpdateConfigService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateConfigServiceServer).GetOne(ctx, req.(*UpdateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateConfigService_GetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UpdateConfigSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UpdateConfigServiceServer).GetSome(m, &updateConfigServiceGetSomeServer{stream})
}

type UpdateConfigService_GetSomeServer interface {
	Send(*UpdateConfigSomeResponse) error
	grpc.ServerStream
}

type updateConfigServiceGetSomeServer struct {
	grpc.ServerStream
}

func (x *updateConfigServiceGetSomeServer) Send(m *UpdateConfigSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UpdateConfigService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UpdateConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UpdateConfigServiceServer).GetAll(m, &updateConfigServiceGetAllServer{stream})
}

type UpdateConfigService_GetAllServer interface {
	Send(*UpdateConfigStreamResponse) error
	grpc.ServerStream
}

type updateConfigServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *updateConfigServiceGetAllServer) Send(m *UpdateConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UpdateConfigService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UpdateConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UpdateConfigServiceServer).Subscribe(m, &updateConfigServiceSubscribeServer{stream})
}

type UpdateConfigService_SubscribeServer interface {
	Send(*UpdateConfigStreamResponse) error
	grpc.ServerStream
}

type updateConfigServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *updateConfigServiceSubscribeServer) Send(m *UpdateConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UpdateConfigService_GetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateConfigServiceServer).GetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UpdateConfigService_GetMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateConfigServiceServer).GetMeta(ctx, req.(*UpdateConfigStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateConfigService_SubscribeMeta_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UpdateConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UpdateConfigServiceServer).SubscribeMeta(m, &updateConfigServiceSubscribeMetaServer{stream})
}

type UpdateConfigService_SubscribeMetaServer interface {
	Send(*MetaResponse) error
	grpc.ServerStream
}

type updateConfigServiceSubscribeMetaServer struct {
	grpc.ServerStream
}

func (x *updateConfigServiceSubscribeMetaServer) Send(m *MetaResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UpdateConfigService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateConfigServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UpdateConfigService_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateConfigServiceServer).Set(ctx, req.(*UpdateConfigSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateConfigService_SetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UpdateConfigSetSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UpdateConfigServiceServer).SetSome(m, &updateConfigServiceSetSomeServer{stream})
}

type UpdateConfigService_SetSomeServer interface {
	Send(*UpdateConfigSetSomeResponse) error
	grpc.ServerStream
}

type updateConfigServiceSetSomeServer struct {
	grpc.ServerStream
}

func (x *updateConfigServiceSetSomeServer) Send(m *UpdateConfigSetSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UpdateConfigService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateConfigServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UpdateConfigService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateConfigServiceServer).Delete(ctx, req.(*UpdateConfigDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateConfigService_DeleteSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UpdateConfigDeleteSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UpdateConfigServiceServer).DeleteSome(m, &updateConfigServiceDeleteSomeServer{stream})
}

type UpdateConfigService_DeleteSomeServer interface {
	Send(*UpdateConfigDeleteSomeResponse) error
	grpc.ServerStream
}

type updateConfigServiceDeleteSomeServer struct {
	grpc.ServerStream
}

func (x *updateConfigServiceDeleteSomeServer) Send(m *UpdateConfigDeleteSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UpdateConfigService_DeleteAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UpdateConfigDeleteAllRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UpdateConfigServiceServer).DeleteAll(m, &updateConfigServiceDeleteAllServer{stream})
}

type UpdateConfigService_DeleteAllServer interface {
	Send(*UpdateConfigDeleteAllResponse) error
	grpc.ServerStream
}

type updateConfigServiceDeleteAllServer struct {
	grpc.ServerStream
}

func (x *updateConfigServiceDeleteAllServer) Send(m *UpdateConfigDeleteAllResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UpdateConfigService_GetAllBatched_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UpdateConfigBatchedStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UpdateConfigServiceServer).GetAllBatched(m, &updateConfigServiceGetAllBatchedServer{stream})
}

type UpdateConfigService_GetAllBatchedServer interface {
	Send(*UpdateConfigBatchedStreamResponse) error
	grpc.ServerStream
}

type updateConfigServiceGetAllBatchedServer struct {
	grpc.ServerStream
}

func (x *updateConfigServiceGetAllBatchedServer) Send(m *UpdateConfigBatchedStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UpdateConfigService_SubscribeBatched_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UpdateConfigBatchedStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UpdateConfigServiceServer).SubscribeBatched(m, &updateConfigServiceSubscribeBatchedServer{stream})
}

type UpdateConfigService_SubscribeBatchedServer interface {
	Send(*UpdateConfigBatchedStreamResponse) error
	grpc.ServerStream
}

type updateConfigServiceSubscribeBatchedServer struct {
	grpc.ServerStream
}

func (x *updateConfigServiceSubscribeBatchedServer) Send(m *UpdateConfigBatchedStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// UpdateConfigService_ServiceDesc is the grpc.ServiceDesc for UpdateConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UpdateConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.studio_topology.v1.UpdateConfigService",
	HandlerType: (*UpdateConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _UpdateConfigService_GetOne_Handler,
		},
		{
			MethodName: "GetMeta",
			Handler:    _UpdateConfigService_GetMeta_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _UpdateConfigService_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UpdateConfigService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSome",
			Handler:       _UpdateConfigService_GetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAll",
			Handler:       _UpdateConfigService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _UpdateConfigService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeMeta",
			Handler:       _UpdateConfigService_SubscribeMeta_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SetSome",
			Handler:       _UpdateConfigService_SetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteSome",
			Handler:       _UpdateConfigService_DeleteSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteAll",
			Handler:       _UpdateConfigService_DeleteAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllBatched",
			Handler:       _UpdateConfigService_GetAllBatched_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeBatched",
			Handler:       _UpdateConfigService_SubscribeBatched_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/studio_topology.v1/services.gen.proto",
}

const (
	UpdateSyncConfigService_GetOne_FullMethodName           = "/arista.studio_topology.v1.UpdateSyncConfigService/GetOne"
	UpdateSyncConfigService_GetSome_FullMethodName          = "/arista.studio_topology.v1.UpdateSyncConfigService/GetSome"
	UpdateSyncConfigService_GetAll_FullMethodName           = "/arista.studio_topology.v1.UpdateSyncConfigService/GetAll"
	UpdateSyncConfigService_Subscribe_FullMethodName        = "/arista.studio_topology.v1.UpdateSyncConfigService/Subscribe"
	UpdateSyncConfigService_GetMeta_FullMethodName          = "/arista.studio_topology.v1.UpdateSyncConfigService/GetMeta"
	UpdateSyncConfigService_SubscribeMeta_FullMethodName    = "/arista.studio_topology.v1.UpdateSyncConfigService/SubscribeMeta"
	UpdateSyncConfigService_Set_FullMethodName              = "/arista.studio_topology.v1.UpdateSyncConfigService/Set"
	UpdateSyncConfigService_SetSome_FullMethodName          = "/arista.studio_topology.v1.UpdateSyncConfigService/SetSome"
	UpdateSyncConfigService_Delete_FullMethodName           = "/arista.studio_topology.v1.UpdateSyncConfigService/Delete"
	UpdateSyncConfigService_DeleteSome_FullMethodName       = "/arista.studio_topology.v1.UpdateSyncConfigService/DeleteSome"
	UpdateSyncConfigService_DeleteAll_FullMethodName        = "/arista.studio_topology.v1.UpdateSyncConfigService/DeleteAll"
	UpdateSyncConfigService_GetAllBatched_FullMethodName    = "/arista.studio_topology.v1.UpdateSyncConfigService/GetAllBatched"
	UpdateSyncConfigService_SubscribeBatched_FullMethodName = "/arista.studio_topology.v1.UpdateSyncConfigService/SubscribeBatched"
)

// UpdateSyncConfigServiceClient is the client API for UpdateSyncConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UpdateSyncConfigServiceClient interface {
	GetOne(ctx context.Context, in *UpdateSyncConfigRequest, opts ...grpc.CallOption) (*UpdateSyncConfigResponse, error)
	GetSome(ctx context.Context, in *UpdateSyncConfigSomeRequest, opts ...grpc.CallOption) (UpdateSyncConfigService_GetSomeClient, error)
	GetAll(ctx context.Context, in *UpdateSyncConfigStreamRequest, opts ...grpc.CallOption) (UpdateSyncConfigService_GetAllClient, error)
	Subscribe(ctx context.Context, in *UpdateSyncConfigStreamRequest, opts ...grpc.CallOption) (UpdateSyncConfigService_SubscribeClient, error)
	GetMeta(ctx context.Context, in *UpdateSyncConfigStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error)
	SubscribeMeta(ctx context.Context, in *UpdateSyncConfigStreamRequest, opts ...grpc.CallOption) (UpdateSyncConfigService_SubscribeMetaClient, error)
	Set(ctx context.Context, in *UpdateSyncConfigSetRequest, opts ...grpc.CallOption) (*UpdateSyncConfigSetResponse, error)
	SetSome(ctx context.Context, in *UpdateSyncConfigSetSomeRequest, opts ...grpc.CallOption) (UpdateSyncConfigService_SetSomeClient, error)
	Delete(ctx context.Context, in *UpdateSyncConfigDeleteRequest, opts ...grpc.CallOption) (*UpdateSyncConfigDeleteResponse, error)
	DeleteSome(ctx context.Context, in *UpdateSyncConfigDeleteSomeRequest, opts ...grpc.CallOption) (UpdateSyncConfigService_DeleteSomeClient, error)
	DeleteAll(ctx context.Context, in *UpdateSyncConfigDeleteAllRequest, opts ...grpc.CallOption) (UpdateSyncConfigService_DeleteAllClient, error)
	GetAllBatched(ctx context.Context, in *UpdateSyncConfigBatchedStreamRequest, opts ...grpc.CallOption) (UpdateSyncConfigService_GetAllBatchedClient, error)
	SubscribeBatched(ctx context.Context, in *UpdateSyncConfigBatchedStreamRequest, opts ...grpc.CallOption) (UpdateSyncConfigService_SubscribeBatchedClient, error)
}

type updateSyncConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUpdateSyncConfigServiceClient(cc grpc.ClientConnInterface) UpdateSyncConfigServiceClient {
	return &updateSyncConfigServiceClient{cc}
}

func (c *updateSyncConfigServiceClient) GetOne(ctx context.Context, in *UpdateSyncConfigRequest, opts ...grpc.CallOption) (*UpdateSyncConfigResponse, error) {
	out := new(UpdateSyncConfigResponse)
	err := c.cc.Invoke(ctx, UpdateSyncConfigService_GetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateSyncConfigServiceClient) GetSome(ctx context.Context, in *UpdateSyncConfigSomeRequest, opts ...grpc.CallOption) (UpdateSyncConfigService_GetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &UpdateSyncConfigService_ServiceDesc.Streams[0], UpdateSyncConfigService_GetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &updateSyncConfigServiceGetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UpdateSyncConfigService_GetSomeClient interface {
	Recv() (*UpdateSyncConfigSomeResponse, error)
	grpc.ClientStream
}

type updateSyncConfigServiceGetSomeClient struct {
	grpc.ClientStream
}

func (x *updateSyncConfigServiceGetSomeClient) Recv() (*UpdateSyncConfigSomeResponse, error) {
	m := new(UpdateSyncConfigSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *updateSyncConfigServiceClient) GetAll(ctx context.Context, in *UpdateSyncConfigStreamRequest, opts ...grpc.CallOption) (UpdateSyncConfigService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &UpdateSyncConfigService_ServiceDesc.Streams[1], UpdateSyncConfigService_GetAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &updateSyncConfigServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UpdateSyncConfigService_GetAllClient interface {
	Recv() (*UpdateSyncConfigStreamResponse, error)
	grpc.ClientStream
}

type updateSyncConfigServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *updateSyncConfigServiceGetAllClient) Recv() (*UpdateSyncConfigStreamResponse, error) {
	m := new(UpdateSyncConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *updateSyncConfigServiceClient) Subscribe(ctx context.Context, in *UpdateSyncConfigStreamRequest, opts ...grpc.CallOption) (UpdateSyncConfigService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &UpdateSyncConfigService_ServiceDesc.Streams[2], UpdateSyncConfigService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &updateSyncConfigServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UpdateSyncConfigService_SubscribeClient interface {
	Recv() (*UpdateSyncConfigStreamResponse, error)
	grpc.ClientStream
}

type updateSyncConfigServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *updateSyncConfigServiceSubscribeClient) Recv() (*UpdateSyncConfigStreamResponse, error) {
	m := new(UpdateSyncConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *updateSyncConfigServiceClient) GetMeta(ctx context.Context, in *UpdateSyncConfigStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error) {
	out := new(MetaResponse)
	err := c.cc.Invoke(ctx, UpdateSyncConfigService_GetMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateSyncConfigServiceClient) SubscribeMeta(ctx context.Context, in *UpdateSyncConfigStreamRequest, opts ...grpc.CallOption) (UpdateSyncConfigService_SubscribeMetaClient, error) {
	stream, err := c.cc.NewStream(ctx, &UpdateSyncConfigService_ServiceDesc.Streams[3], UpdateSyncConfigService_SubscribeMeta_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &updateSyncConfigServiceSubscribeMetaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UpdateSyncConfigService_SubscribeMetaClient interface {
	Recv() (*MetaResponse, error)
	grpc.ClientStream
}

type updateSyncConfigServiceSubscribeMetaClient struct {
	grpc.ClientStream
}

func (x *updateSyncConfigServiceSubscribeMetaClient) Recv() (*MetaResponse, error) {
	m := new(MetaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *updateSyncConfigServiceClient) Set(ctx context.Context, in *UpdateSyncConfigSetRequest, opts ...grpc.CallOption) (*UpdateSyncConfigSetResponse, error) {
	out := new(UpdateSyncConfigSetResponse)
	err := c.cc.Invoke(ctx, UpdateSyncConfigService_Set_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateSyncConfigServiceClient) SetSome(ctx context.Context, in *UpdateSyncConfigSetSomeRequest, opts ...grpc.CallOption) (UpdateSyncConfigService_SetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &UpdateSyncConfigService_ServiceDesc.Streams[4], UpdateSyncConfigService_SetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &updateSyncConfigServiceSetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UpdateSyncConfigService_SetSomeClient interface {
	Recv() (*UpdateSyncConfigSetSomeResponse, error)
	grpc.ClientStream
}

type updateSyncConfigServiceSetSomeClient struct {
	grpc.ClientStream
}

func (x *updateSyncConfigServiceSetSomeClient) Recv() (*UpdateSyncConfigSetSomeResponse, error) {
	m := new(UpdateSyncConfigSetSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *updateSyncConfigServiceClient) Delete(ctx context.Context, in *UpdateSyncConfigDeleteRequest, opts ...grpc.CallOption) (*UpdateSyncConfigDeleteResponse, error) {
	out := new(UpdateSyncConfigDeleteResponse)
	err := c.cc.Invoke(ctx, UpdateSyncConfigService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateSyncConfigServiceClient) DeleteSome(ctx context.Context, in *UpdateSyncConfigDeleteSomeRequest, opts ...grpc.CallOption) (UpdateSyncConfigService_DeleteSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &UpdateSyncConfigService_ServiceDesc.Streams[5], UpdateSyncConfigService_DeleteSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &updateSyncConfigServiceDeleteSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UpdateSyncConfigService_DeleteSomeClient interface {
	Recv() (*UpdateSyncConfigDeleteSomeResponse, error)
	grpc.ClientStream
}

type updateSyncConfigServiceDeleteSomeClient struct {
	grpc.ClientStream
}

func (x *updateSyncConfigServiceDeleteSomeClient) Recv() (*UpdateSyncConfigDeleteSomeResponse, error) {
	m := new(UpdateSyncConfigDeleteSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *updateSyncConfigServiceClient) DeleteAll(ctx context.Context, in *UpdateSyncConfigDeleteAllRequest, opts ...grpc.CallOption) (UpdateSyncConfigService_DeleteAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &UpdateSyncConfigService_ServiceDesc.Streams[6], UpdateSyncConfigService_DeleteAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &updateSyncConfigServiceDeleteAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UpdateSyncConfigService_DeleteAllClient interface {
	Recv() (*UpdateSyncConfigDeleteAllResponse, error)
	grpc.ClientStream
}

type updateSyncConfigServiceDeleteAllClient struct {
	grpc.ClientStream
}

func (x *updateSyncConfigServiceDeleteAllClient) Recv() (*UpdateSyncConfigDeleteAllResponse, error) {
	m := new(UpdateSyncConfigDeleteAllResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *updateSyncConfigServiceClient) GetAllBatched(ctx context.Context, in *UpdateSyncConfigBatchedStreamRequest, opts ...grpc.CallOption) (UpdateSyncConfigService_GetAllBatchedClient, error) {
	stream, err := c.cc.NewStream(ctx, &UpdateSyncConfigService_ServiceDesc.Streams[7], UpdateSyncConfigService_GetAllBatched_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &updateSyncConfigServiceGetAllBatchedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UpdateSyncConfigService_GetAllBatchedClient interface {
	Recv() (*UpdateSyncConfigBatchedStreamResponse, error)
	grpc.ClientStream
}

type updateSyncConfigServiceGetAllBatchedClient struct {
	grpc.ClientStream
}

func (x *updateSyncConfigServiceGetAllBatchedClient) Recv() (*UpdateSyncConfigBatchedStreamResponse, error) {
	m := new(UpdateSyncConfigBatchedStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *updateSyncConfigServiceClient) SubscribeBatched(ctx context.Context, in *UpdateSyncConfigBatchedStreamRequest, opts ...grpc.CallOption) (UpdateSyncConfigService_SubscribeBatchedClient, error) {
	stream, err := c.cc.NewStream(ctx, &UpdateSyncConfigService_ServiceDesc.Streams[8], UpdateSyncConfigService_SubscribeBatched_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &updateSyncConfigServiceSubscribeBatchedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UpdateSyncConfigService_SubscribeBatchedClient interface {
	Recv() (*UpdateSyncConfigBatchedStreamResponse, error)
	grpc.ClientStream
}

type updateSyncConfigServiceSubscribeBatchedClient struct {
	grpc.ClientStream
}

func (x *updateSyncConfigServiceSubscribeBatchedClient) Recv() (*UpdateSyncConfigBatchedStreamResponse, error) {
	m := new(UpdateSyncConfigBatchedStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UpdateSyncConfigServiceServer is the server API for UpdateSyncConfigService service.
// All implementations must embed UnimplementedUpdateSyncConfigServiceServer
// for forward compatibility
type UpdateSyncConfigServiceServer interface {
	GetOne(context.Context, *UpdateSyncConfigRequest) (*UpdateSyncConfigResponse, error)
	GetSome(*UpdateSyncConfigSomeRequest, UpdateSyncConfigService_GetSomeServer) error
	GetAll(*UpdateSyncConfigStreamRequest, UpdateSyncConfigService_GetAllServer) error
	Subscribe(*UpdateSyncConfigStreamRequest, UpdateSyncConfigService_SubscribeServer) error
	GetMeta(context.Context, *UpdateSyncConfigStreamRequest) (*MetaResponse, error)
	SubscribeMeta(*UpdateSyncConfigStreamRequest, UpdateSyncConfigService_SubscribeMetaServer) error
	Set(context.Context, *UpdateSyncConfigSetRequest) (*UpdateSyncConfigSetResponse, error)
	SetSome(*UpdateSyncConfigSetSomeRequest, UpdateSyncConfigService_SetSomeServer) error
	Delete(context.Context, *UpdateSyncConfigDeleteRequest) (*UpdateSyncConfigDeleteResponse, error)
	DeleteSome(*UpdateSyncConfigDeleteSomeRequest, UpdateSyncConfigService_DeleteSomeServer) error
	DeleteAll(*UpdateSyncConfigDeleteAllRequest, UpdateSyncConfigService_DeleteAllServer) error
	GetAllBatched(*UpdateSyncConfigBatchedStreamRequest, UpdateSyncConfigService_GetAllBatchedServer) error
	SubscribeBatched(*UpdateSyncConfigBatchedStreamRequest, UpdateSyncConfigService_SubscribeBatchedServer) error
	mustEmbedUnimplementedUpdateSyncConfigServiceServer()
}

// UnimplementedUpdateSyncConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUpdateSyncConfigServiceServer struct {
}

func (UnimplementedUpdateSyncConfigServiceServer) GetOne(context.Context, *UpdateSyncConfigRequest) (*UpdateSyncConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedUpdateSyncConfigServiceServer) GetSome(*UpdateSyncConfigSomeRequest, UpdateSyncConfigService_GetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSome not implemented")
}
func (UnimplementedUpdateSyncConfigServiceServer) GetAll(*UpdateSyncConfigStreamRequest, UpdateSyncConfigService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedUpdateSyncConfigServiceServer) Subscribe(*UpdateSyncConfigStreamRequest, UpdateSyncConfigService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedUpdateSyncConfigServiceServer) GetMeta(context.Context, *UpdateSyncConfigStreamRequest) (*MetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeta not implemented")
}
func (UnimplementedUpdateSyncConfigServiceServer) SubscribeMeta(*UpdateSyncConfigStreamRequest, UpdateSyncConfigService_SubscribeMetaServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMeta not implemented")
}
func (UnimplementedUpdateSyncConfigServiceServer) Set(context.Context, *UpdateSyncConfigSetRequest) (*UpdateSyncConfigSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedUpdateSyncConfigServiceServer) SetSome(*UpdateSyncConfigSetSomeRequest, UpdateSyncConfigService_SetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method SetSome not implemented")
}
func (UnimplementedUpdateSyncConfigServiceServer) Delete(context.Context, *UpdateSyncConfigDeleteRequest) (*UpdateSyncConfigDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedUpdateSyncConfigServiceServer) DeleteSome(*UpdateSyncConfigDeleteSomeRequest, UpdateSyncConfigService_DeleteSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteSome not implemented")
}
func (UnimplementedUpdateSyncConfigServiceServer) DeleteAll(*UpdateSyncConfigDeleteAllRequest, UpdateSyncConfigService_DeleteAllServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteAll not implemented")
}
func (UnimplementedUpdateSyncConfigServiceServer) GetAllBatched(*UpdateSyncConfigBatchedStreamRequest, UpdateSyncConfigService_GetAllBatchedServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllBatched not implemented")
}
func (UnimplementedUpdateSyncConfigServiceServer) SubscribeBatched(*UpdateSyncConfigBatchedStreamRequest, UpdateSyncConfigService_SubscribeBatchedServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeBatched not implemented")
}
func (UnimplementedUpdateSyncConfigServiceServer) mustEmbedUnimplementedUpdateSyncConfigServiceServer() {
}

// UnsafeUpdateSyncConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UpdateSyncConfigServiceServer will
// result in compilation errors.
type UnsafeUpdateSyncConfigServiceServer interface {
	mustEmbedUnimplementedUpdateSyncConfigServiceServer()
}

func RegisterUpdateSyncConfigServiceServer(s grpc.ServiceRegistrar, srv UpdateSyncConfigServiceServer) {
	s.RegisterService(&UpdateSyncConfigService_ServiceDesc, srv)
}

func _UpdateSyncConfigService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSyncConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateSyncConfigServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UpdateSyncConfigService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateSyncConfigServiceServer).GetOne(ctx, req.(*UpdateSyncConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateSyncConfigService_GetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UpdateSyncConfigSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UpdateSyncConfigServiceServer).GetSome(m, &updateSyncConfigServiceGetSomeServer{stream})
}

type UpdateSyncConfigService_GetSomeServer interface {
	Send(*UpdateSyncConfigSomeResponse) error
	grpc.ServerStream
}

type updateSyncConfigServiceGetSomeServer struct {
	grpc.ServerStream
}

func (x *updateSyncConfigServiceGetSomeServer) Send(m *UpdateSyncConfigSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UpdateSyncConfigService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UpdateSyncConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UpdateSyncConfigServiceServer).GetAll(m, &updateSyncConfigServiceGetAllServer{stream})
}

type UpdateSyncConfigService_GetAllServer interface {
	Send(*UpdateSyncConfigStreamResponse) error
	grpc.ServerStream
}

type updateSyncConfigServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *updateSyncConfigServiceGetAllServer) Send(m *UpdateSyncConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UpdateSyncConfigService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UpdateSyncConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UpdateSyncConfigServiceServer).Subscribe(m, &updateSyncConfigServiceSubscribeServer{stream})
}

type UpdateSyncConfigService_SubscribeServer interface {
	Send(*UpdateSyncConfigStreamResponse) error
	grpc.ServerStream
}

type updateSyncConfigServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *updateSyncConfigServiceSubscribeServer) Send(m *UpdateSyncConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UpdateSyncConfigService_GetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSyncConfigStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateSyncConfigServiceServer).GetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UpdateSyncConfigService_GetMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateSyncConfigServiceServer).GetMeta(ctx, req.(*UpdateSyncConfigStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateSyncConfigService_SubscribeMeta_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UpdateSyncConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UpdateSyncConfigServiceServer).SubscribeMeta(m, &updateSyncConfigServiceSubscribeMetaServer{stream})
}

type UpdateSyncConfigService_SubscribeMetaServer interface {
	Send(*MetaResponse) error
	grpc.ServerStream
}

type updateSyncConfigServiceSubscribeMetaServer struct {
	grpc.ServerStream
}

func (x *updateSyncConfigServiceSubscribeMetaServer) Send(m *MetaResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UpdateSyncConfigService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSyncConfigSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateSyncConfigServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UpdateSyncConfigService_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateSyncConfigServiceServer).Set(ctx, req.(*UpdateSyncConfigSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateSyncConfigService_SetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UpdateSyncConfigSetSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UpdateSyncConfigServiceServer).SetSome(m, &updateSyncConfigServiceSetSomeServer{stream})
}

type UpdateSyncConfigService_SetSomeServer interface {
	Send(*UpdateSyncConfigSetSomeResponse) error
	grpc.ServerStream
}

type updateSyncConfigServiceSetSomeServer struct {
	grpc.ServerStream
}

func (x *updateSyncConfigServiceSetSomeServer) Send(m *UpdateSyncConfigSetSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UpdateSyncConfigService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSyncConfigDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateSyncConfigServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UpdateSyncConfigService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateSyncConfigServiceServer).Delete(ctx, req.(*UpdateSyncConfigDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateSyncConfigService_DeleteSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UpdateSyncConfigDeleteSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UpdateSyncConfigServiceServer).DeleteSome(m, &updateSyncConfigServiceDeleteSomeServer{stream})
}

type UpdateSyncConfigService_DeleteSomeServer interface {
	Send(*UpdateSyncConfigDeleteSomeResponse) error
	grpc.ServerStream
}

type updateSyncConfigServiceDeleteSomeServer struct {
	grpc.ServerStream
}

func (x *updateSyncConfigServiceDeleteSomeServer) Send(m *UpdateSyncConfigDeleteSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UpdateSyncConfigService_DeleteAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UpdateSyncConfigDeleteAllRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UpdateSyncConfigServiceServer).DeleteAll(m, &updateSyncConfigServiceDeleteAllServer{stream})
}

type UpdateSyncConfigService_DeleteAllServer interface {
	Send(*UpdateSyncConfigDeleteAllResponse) error
	grpc.ServerStream
}

type updateSyncConfigServiceDeleteAllServer struct {
	grpc.ServerStream
}

func (x *updateSyncConfigServiceDeleteAllServer) Send(m *UpdateSyncConfigDeleteAllResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UpdateSyncConfigService_GetAllBatched_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UpdateSyncConfigBatchedStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UpdateSyncConfigServiceServer).GetAllBatched(m, &updateSyncConfigServiceGetAllBatchedServer{stream})
}

type UpdateSyncConfigService_GetAllBatchedServer interface {
	Send(*UpdateSyncConfigBatchedStreamResponse) error
	grpc.ServerStream
}

type updateSyncConfigServiceGetAllBatchedServer struct {
	grpc.ServerStream
}

func (x *updateSyncConfigServiceGetAllBatchedServer) Send(m *UpdateSyncConfigBatchedStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UpdateSyncConfigService_SubscribeBatched_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UpdateSyncConfigBatchedStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UpdateSyncConfigServiceServer).SubscribeBatched(m, &updateSyncConfigServiceSubscribeBatchedServer{stream})
}

type UpdateSyncConfigService_SubscribeBatchedServer interface {
	Send(*UpdateSyncConfigBatchedStreamResponse) error
	grpc.ServerStream
}

type updateSyncConfigServiceSubscribeBatchedServer struct {
	grpc.ServerStream
}

func (x *updateSyncConfigServiceSubscribeBatchedServer) Send(m *UpdateSyncConfigBatchedStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// UpdateSyncConfigService_ServiceDesc is the grpc.ServiceDesc for UpdateSyncConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UpdateSyncConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.studio_topology.v1.UpdateSyncConfigService",
	HandlerType: (*UpdateSyncConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _UpdateSyncConfigService_GetOne_Handler,
		},
		{
			MethodName: "GetMeta",
			Handler:    _UpdateSyncConfigService_GetMeta_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _UpdateSyncConfigService_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UpdateSyncConfigService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSome",
			Handler:       _UpdateSyncConfigService_GetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAll",
			Handler:       _UpdateSyncConfigService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _UpdateSyncConfigService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeMeta",
			Handler:       _UpdateSyncConfigService_SubscribeMeta_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SetSome",
			Handler:       _UpdateSyncConfigService_SetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteSome",
			Handler:       _UpdateSyncConfigService_DeleteSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteAll",
			Handler:       _UpdateSyncConfigService_DeleteAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllBatched",
			Handler:       _UpdateSyncConfigService_GetAllBatched_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeBatched",
			Handler:       _UpdateSyncConfigService_SubscribeBatched_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/studio_topology.v1/services.gen.proto",
}
