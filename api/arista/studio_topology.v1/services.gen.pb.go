// Copyright (c) 2025 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

// NOTE: This is a workspace-aware Resource API.
// Please see workspace.v1 for more information.

//
// Code generated by boomtown. DO NOT EDIT.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v4.24.4
// source: arista/studio_topology.v1/services.gen.proto

package studio_topology

import (
	subscriptions "github.com/aristanetworks/cloudvision-go/api/arista/subscriptions"
	time "github.com/aristanetworks/cloudvision-go/api/arista/time"
	workspace_v1 "github.com/aristanetworks/cloudvision-go/api/arista/workspace.v1"
	fmp "github.com/aristanetworks/cloudvision-go/api/fmp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MetaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time holds the timestamp of the last item included in the metadata calculation.
	Time *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,2,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
	// Count is the number of items present under the conditions of the request.
	Count *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *MetaResponse) Reset() {
	*x = MetaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaResponse) ProtoMessage() {}

func (x *MetaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaResponse.ProtoReflect.Descriptor instead.
func (*MetaResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{0}
}

func (x *MetaResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *MetaResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation(0)
}

func (x *MetaResponse) GetCount() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Count
	}
	return nil
}

type DecommissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a Decommission instance to retrieve.
	// This value must be populated.
	Key *DeviceKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *DecommissionRequest) Reset() {
	*x = DecommissionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecommissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecommissionRequest) ProtoMessage() {}

func (x *DecommissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecommissionRequest.ProtoReflect.Descriptor instead.
func (*DecommissionRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{1}
}

func (x *DecommissionRequest) GetKey() *DeviceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *DecommissionRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type DecommissionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *Decommission `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// Decommission instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *DecommissionResponse) Reset() {
	*x = DecommissionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecommissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecommissionResponse) ProtoMessage() {}

func (x *DecommissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecommissionResponse.ProtoReflect.Descriptor instead.
func (*DecommissionResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{2}
}

func (x *DecommissionResponse) GetValue() *Decommission {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *DecommissionResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type DecommissionSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*DeviceKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *DecommissionSomeRequest) Reset() {
	*x = DecommissionSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecommissionSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecommissionSomeRequest) ProtoMessage() {}

func (x *DecommissionSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecommissionSomeRequest.ProtoReflect.Descriptor instead.
func (*DecommissionSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{3}
}

func (x *DecommissionSomeRequest) GetKeys() []*DeviceKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *DecommissionSomeRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type DecommissionSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *Decommission `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Time  *timestamppb.Timestamp  `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *DecommissionSomeResponse) Reset() {
	*x = DecommissionSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecommissionSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecommissionSomeResponse) ProtoMessage() {}

func (x *DecommissionSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecommissionSomeResponse.ProtoReflect.Descriptor instead.
func (*DecommissionSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{4}
}

func (x *DecommissionSomeResponse) GetValue() *Decommission {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *DecommissionSomeResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *DecommissionSomeResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type DecommissionStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*Decommission `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each Decommission at end.
	//   - Each Decommission response is fully-specified (all fields set).
	//   - start: Returns the state of each Decommission at start, followed by updates until now.
	//   - Each Decommission response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each Decommission at start, followed by updates
	//     until end.
	//   - Each Decommission response at start is fully-specified, but updates until end may
	//     be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *DecommissionStreamRequest) Reset() {
	*x = DecommissionStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecommissionStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecommissionStreamRequest) ProtoMessage() {}

func (x *DecommissionStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecommissionStreamRequest.ProtoReflect.Descriptor instead.
func (*DecommissionStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{5}
}

func (x *DecommissionStreamRequest) GetPartialEqFilter() []*Decommission {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *DecommissionStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type DecommissionStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *Decommission `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this Decommission's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the Decommission value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *DecommissionStreamResponse) Reset() {
	*x = DecommissionStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecommissionStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecommissionStreamResponse) ProtoMessage() {}

func (x *DecommissionStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecommissionStreamResponse.ProtoReflect.Descriptor instead.
func (*DecommissionStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{6}
}

func (x *DecommissionStreamResponse) GetValue() *Decommission {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *DecommissionStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *DecommissionStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation(0)
}

type DecommissionBatchedStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*Decommission `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each Decommission at end.
	//   - Each Decommission response is fully-specified (all fields set).
	//   - start: Returns the state of each Decommission at start, followed by updates until now.
	//   - Each Decommission response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each Decommission at start, followed by updates
	//     until end.
	//   - Each Decommission response at start is fully-specified, but updates until end may
	//     be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	// MaxMessages limits the maximum number of messages that can be contained in one batch.
	// MaxMessages is required to be at least 1.
	// The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
	// INTERNAL_BATCH_LIMIT is set based on the maximum message size.
	MaxMessages *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=max_messages,json=maxMessages,proto3" json:"max_messages,omitempty"`
}

func (x *DecommissionBatchedStreamRequest) Reset() {
	*x = DecommissionBatchedStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecommissionBatchedStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecommissionBatchedStreamRequest) ProtoMessage() {}

func (x *DecommissionBatchedStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecommissionBatchedStreamRequest.ProtoReflect.Descriptor instead.
func (*DecommissionBatchedStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{7}
}

func (x *DecommissionBatchedStreamRequest) GetPartialEqFilter() []*Decommission {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *DecommissionBatchedStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *DecommissionBatchedStreamRequest) GetMaxMessages() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxMessages
	}
	return nil
}

type DecommissionBatchedStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Values are the values deemed relevant to the initiating request.
	// The length of this structure is guaranteed to be between (inclusive) 1 and
	// min(req.max_messages, INTERNAL_BATCH_LIMIT).
	Responses []*DecommissionStreamResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *DecommissionBatchedStreamResponse) Reset() {
	*x = DecommissionBatchedStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecommissionBatchedStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecommissionBatchedStreamResponse) ProtoMessage() {}

func (x *DecommissionBatchedStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecommissionBatchedStreamResponse.ProtoReflect.Descriptor instead.
func (*DecommissionBatchedStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{8}
}

func (x *DecommissionBatchedStreamResponse) GetResponses() []*DecommissionStreamResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type DecommissionConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a DecommissionConfig instance to retrieve.
	// This value must be populated.
	Key *DeviceKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *DecommissionConfigRequest) Reset() {
	*x = DecommissionConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecommissionConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecommissionConfigRequest) ProtoMessage() {}

func (x *DecommissionConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecommissionConfigRequest.ProtoReflect.Descriptor instead.
func (*DecommissionConfigRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{9}
}

func (x *DecommissionConfigRequest) GetKey() *DeviceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *DecommissionConfigRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type DecommissionConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *DecommissionConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// DecommissionConfig instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *DecommissionConfigResponse) Reset() {
	*x = DecommissionConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecommissionConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecommissionConfigResponse) ProtoMessage() {}

func (x *DecommissionConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecommissionConfigResponse.ProtoReflect.Descriptor instead.
func (*DecommissionConfigResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{10}
}

func (x *DecommissionConfigResponse) GetValue() *DecommissionConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *DecommissionConfigResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type DecommissionConfigSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*DeviceKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *DecommissionConfigSomeRequest) Reset() {
	*x = DecommissionConfigSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecommissionConfigSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecommissionConfigSomeRequest) ProtoMessage() {}

func (x *DecommissionConfigSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecommissionConfigSomeRequest.ProtoReflect.Descriptor instead.
func (*DecommissionConfigSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{11}
}

func (x *DecommissionConfigSomeRequest) GetKeys() []*DeviceKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *DecommissionConfigSomeRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type DecommissionConfigSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *DecommissionConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Time  *timestamppb.Timestamp  `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *DecommissionConfigSomeResponse) Reset() {
	*x = DecommissionConfigSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecommissionConfigSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecommissionConfigSomeResponse) ProtoMessage() {}

func (x *DecommissionConfigSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecommissionConfigSomeResponse.ProtoReflect.Descriptor instead.
func (*DecommissionConfigSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{12}
}

func (x *DecommissionConfigSomeResponse) GetValue() *DecommissionConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *DecommissionConfigSomeResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *DecommissionConfigSomeResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type DecommissionConfigStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*DecommissionConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each DecommissionConfig at end.
	//   - Each DecommissionConfig response is fully-specified (all fields set).
	//   - start: Returns the state of each DecommissionConfig at start, followed by updates until now.
	//   - Each DecommissionConfig response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each DecommissionConfig at start, followed by updates
	//     until end.
	//   - Each DecommissionConfig response at start is fully-specified, but updates until end may
	//     be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *DecommissionConfigStreamRequest) Reset() {
	*x = DecommissionConfigStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecommissionConfigStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecommissionConfigStreamRequest) ProtoMessage() {}

func (x *DecommissionConfigStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecommissionConfigStreamRequest.ProtoReflect.Descriptor instead.
func (*DecommissionConfigStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{13}
}

func (x *DecommissionConfigStreamRequest) GetPartialEqFilter() []*DecommissionConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *DecommissionConfigStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type DecommissionConfigStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *DecommissionConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this DecommissionConfig's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the DecommissionConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *DecommissionConfigStreamResponse) Reset() {
	*x = DecommissionConfigStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecommissionConfigStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecommissionConfigStreamResponse) ProtoMessage() {}

func (x *DecommissionConfigStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecommissionConfigStreamResponse.ProtoReflect.Descriptor instead.
func (*DecommissionConfigStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{14}
}

func (x *DecommissionConfigStreamResponse) GetValue() *DecommissionConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *DecommissionConfigStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *DecommissionConfigStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation(0)
}

type DecommissionConfigBatchedStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*DecommissionConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each DecommissionConfig at end.
	//   - Each DecommissionConfig response is fully-specified (all fields set).
	//   - start: Returns the state of each DecommissionConfig at start, followed by updates until now.
	//   - Each DecommissionConfig response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each DecommissionConfig at start, followed by updates
	//     until end.
	//   - Each DecommissionConfig response at start is fully-specified, but updates until end may
	//     be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	// MaxMessages limits the maximum number of messages that can be contained in one batch.
	// MaxMessages is required to be at least 1.
	// The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
	// INTERNAL_BATCH_LIMIT is set based on the maximum message size.
	MaxMessages *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=max_messages,json=maxMessages,proto3" json:"max_messages,omitempty"`
}

func (x *DecommissionConfigBatchedStreamRequest) Reset() {
	*x = DecommissionConfigBatchedStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecommissionConfigBatchedStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecommissionConfigBatchedStreamRequest) ProtoMessage() {}

func (x *DecommissionConfigBatchedStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecommissionConfigBatchedStreamRequest.ProtoReflect.Descriptor instead.
func (*DecommissionConfigBatchedStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{15}
}

func (x *DecommissionConfigBatchedStreamRequest) GetPartialEqFilter() []*DecommissionConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *DecommissionConfigBatchedStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *DecommissionConfigBatchedStreamRequest) GetMaxMessages() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxMessages
	}
	return nil
}

type DecommissionConfigBatchedStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Values are the values deemed relevant to the initiating request.
	// The length of this structure is guaranteed to be between (inclusive) 1 and
	// min(req.max_messages, INTERNAL_BATCH_LIMIT).
	Responses []*DecommissionConfigStreamResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *DecommissionConfigBatchedStreamResponse) Reset() {
	*x = DecommissionConfigBatchedStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecommissionConfigBatchedStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecommissionConfigBatchedStreamResponse) ProtoMessage() {}

func (x *DecommissionConfigBatchedStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecommissionConfigBatchedStreamResponse.ProtoReflect.Descriptor instead.
func (*DecommissionConfigBatchedStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{16}
}

func (x *DecommissionConfigBatchedStreamResponse) GetResponses() []*DecommissionConfigStreamResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type DecommissionConfigSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DecommissionConfig carries the value to set into the datastore.
	// See the documentation on the DecommissionConfig struct for which fields are required.
	Value *DecommissionConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DecommissionConfigSetRequest) Reset() {
	*x = DecommissionConfigSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecommissionConfigSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecommissionConfigSetRequest) ProtoMessage() {}

func (x *DecommissionConfigSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecommissionConfigSetRequest.ProtoReflect.Descriptor instead.
func (*DecommissionConfigSetRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{17}
}

func (x *DecommissionConfigSetRequest) GetValue() *DecommissionConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

type DecommissionConfigSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value carries all the values given in the DecommissionConfigSetRequest as well
	// as any server-generated values.
	Value *DecommissionConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//   - it is after the time the request was received
	//   - a time-ranged query with StartTime==CreatedAt will include this instance.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *DecommissionConfigSetResponse) Reset() {
	*x = DecommissionConfigSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecommissionConfigSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecommissionConfigSetResponse) ProtoMessage() {}

func (x *DecommissionConfigSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecommissionConfigSetResponse.ProtoReflect.Descriptor instead.
func (*DecommissionConfigSetResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{18}
}

func (x *DecommissionConfigSetResponse) GetValue() *DecommissionConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *DecommissionConfigSetResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type DecommissionConfigSetSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value contains a list of DecommissionConfig values to write.
	// It is possible to provide more values than can fit within either:
	//   - the maxiumum send size of the client
	//   - the maximum receive size of the server
	//
	// If this error occurs you must reduce the number of values sent.
	// See gRPC "maximum message size" documentation for more information.
	Values []*DecommissionConfig `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *DecommissionConfigSetSomeRequest) Reset() {
	*x = DecommissionConfigSetSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecommissionConfigSetSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecommissionConfigSetSomeRequest) ProtoMessage() {}

func (x *DecommissionConfigSetSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecommissionConfigSetSomeRequest.ProtoReflect.Descriptor instead.
func (*DecommissionConfigSetSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{19}
}

func (x *DecommissionConfigSetSomeRequest) GetValues() []*DecommissionConfig {
	if x != nil {
		return x.Values
	}
	return nil
}

type DecommissionConfigSetSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *DeviceKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Error string     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *DecommissionConfigSetSomeResponse) Reset() {
	*x = DecommissionConfigSetSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecommissionConfigSetSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecommissionConfigSetSomeResponse) ProtoMessage() {}

func (x *DecommissionConfigSetSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecommissionConfigSetSomeResponse.ProtoReflect.Descriptor instead.
func (*DecommissionConfigSetSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{20}
}

func (x *DecommissionConfigSetSomeResponse) GetKey() *DeviceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *DecommissionConfigSetSomeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type DecommissionConfigDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key indicates which DecommissionConfig instance to remove.
	// This field must always be set.
	Key *DeviceKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *DecommissionConfigDeleteRequest) Reset() {
	*x = DecommissionConfigDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecommissionConfigDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecommissionConfigDeleteRequest) ProtoMessage() {}

func (x *DecommissionConfigDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecommissionConfigDeleteRequest.ProtoReflect.Descriptor instead.
func (*DecommissionConfigDeleteRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{21}
}

func (x *DecommissionConfigDeleteRequest) GetKey() *DeviceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type DecommissionConfigDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key echoes back the key of the deleted DecommissionConfig instance.
	Key *DeviceKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//   - it is after the time the request was received
	//   - a time-ranged query with StartTime==DeletedAt will not include this instance.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *DecommissionConfigDeleteResponse) Reset() {
	*x = DecommissionConfigDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecommissionConfigDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecommissionConfigDeleteResponse) ProtoMessage() {}

func (x *DecommissionConfigDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecommissionConfigDeleteResponse.ProtoReflect.Descriptor instead.
func (*DecommissionConfigDeleteResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{22}
}

func (x *DecommissionConfigDeleteResponse) GetKey() *DeviceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *DecommissionConfigDeleteResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type DecommissionConfigDeleteSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key contains a list of DecommissionConfig keys to delete
	Keys []*DeviceKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *DecommissionConfigDeleteSomeRequest) Reset() {
	*x = DecommissionConfigDeleteSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecommissionConfigDeleteSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecommissionConfigDeleteSomeRequest) ProtoMessage() {}

func (x *DecommissionConfigDeleteSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecommissionConfigDeleteSomeRequest.ProtoReflect.Descriptor instead.
func (*DecommissionConfigDeleteSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{23}
}

func (x *DecommissionConfigDeleteSomeRequest) GetKeys() []*DeviceKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

// DecommissionConfigDeleteSomeResponse is only sent when there is an error.
type DecommissionConfigDeleteSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *DeviceKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Error string     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *DecommissionConfigDeleteSomeResponse) Reset() {
	*x = DecommissionConfigDeleteSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecommissionConfigDeleteSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecommissionConfigDeleteSomeResponse) ProtoMessage() {}

func (x *DecommissionConfigDeleteSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecommissionConfigDeleteSomeResponse.ProtoReflect.Descriptor instead.
func (*DecommissionConfigDeleteSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{24}
}

func (x *DecommissionConfigDeleteSomeResponse) GetKey() *DeviceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *DecommissionConfigDeleteSomeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type DecommissionConfigDeleteAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a DeleteAll.
	// This requires all provided fields to be equal to the response.
	// A filtered DeleteAll will use GetAll with filter to find things to delete.
	PartialEqFilter []*DecommissionConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
}

func (x *DecommissionConfigDeleteAllRequest) Reset() {
	*x = DecommissionConfigDeleteAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecommissionConfigDeleteAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecommissionConfigDeleteAllRequest) ProtoMessage() {}

func (x *DecommissionConfigDeleteAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecommissionConfigDeleteAllRequest.ProtoReflect.Descriptor instead.
func (*DecommissionConfigDeleteAllRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{25}
}

func (x *DecommissionConfigDeleteAllRequest) GetPartialEqFilter() []*DecommissionConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

type DecommissionConfigDeleteAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This describes the class of delete error.
	// A DeleteAllResponse is only sent when there is an error.
	Type fmp.DeleteError `protobuf:"varint,1,opt,name=type,proto3,enum=fmp.DeleteError" json:"type,omitempty"`
	// This indicates the error message from the delete failure.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// This is the key of the DecommissionConfig instance that failed to be deleted.
	Key *DeviceKey `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp when the key was being deleted.
	Time *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *DecommissionConfigDeleteAllResponse) Reset() {
	*x = DecommissionConfigDeleteAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecommissionConfigDeleteAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecommissionConfigDeleteAllResponse) ProtoMessage() {}

func (x *DecommissionConfigDeleteAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecommissionConfigDeleteAllResponse.ProtoReflect.Descriptor instead.
func (*DecommissionConfigDeleteAllResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{26}
}

func (x *DecommissionConfigDeleteAllResponse) GetType() fmp.DeleteError {
	if x != nil {
		return x.Type
	}
	return fmp.DeleteError(0)
}

func (x *DecommissionConfigDeleteAllResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *DecommissionConfigDeleteAllResponse) GetKey() *DeviceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *DecommissionConfigDeleteAllResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type DeviceInputConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a DeviceInputConfig instance to retrieve.
	// This value must be populated.
	Key *DeviceKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *DeviceInputConfigRequest) Reset() {
	*x = DeviceInputConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInputConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInputConfigRequest) ProtoMessage() {}

func (x *DeviceInputConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInputConfigRequest.ProtoReflect.Descriptor instead.
func (*DeviceInputConfigRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{27}
}

func (x *DeviceInputConfigRequest) GetKey() *DeviceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *DeviceInputConfigRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type DeviceInputConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *DeviceInputConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// DeviceInputConfig instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *DeviceInputConfigResponse) Reset() {
	*x = DeviceInputConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInputConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInputConfigResponse) ProtoMessage() {}

func (x *DeviceInputConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInputConfigResponse.ProtoReflect.Descriptor instead.
func (*DeviceInputConfigResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{28}
}

func (x *DeviceInputConfigResponse) GetValue() *DeviceInputConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *DeviceInputConfigResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type DeviceInputConfigSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*DeviceKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *DeviceInputConfigSomeRequest) Reset() {
	*x = DeviceInputConfigSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInputConfigSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInputConfigSomeRequest) ProtoMessage() {}

func (x *DeviceInputConfigSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInputConfigSomeRequest.ProtoReflect.Descriptor instead.
func (*DeviceInputConfigSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{29}
}

func (x *DeviceInputConfigSomeRequest) GetKeys() []*DeviceKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *DeviceInputConfigSomeRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type DeviceInputConfigSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *DeviceInputConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Time  *timestamppb.Timestamp  `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *DeviceInputConfigSomeResponse) Reset() {
	*x = DeviceInputConfigSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInputConfigSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInputConfigSomeResponse) ProtoMessage() {}

func (x *DeviceInputConfigSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInputConfigSomeResponse.ProtoReflect.Descriptor instead.
func (*DeviceInputConfigSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{30}
}

func (x *DeviceInputConfigSomeResponse) GetValue() *DeviceInputConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *DeviceInputConfigSomeResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *DeviceInputConfigSomeResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type DeviceInputConfigStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*DeviceInputConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each DeviceInputConfig at end.
	//   - Each DeviceInputConfig response is fully-specified (all fields set).
	//   - start: Returns the state of each DeviceInputConfig at start, followed by updates until now.
	//   - Each DeviceInputConfig response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each DeviceInputConfig at start, followed by updates
	//     until end.
	//   - Each DeviceInputConfig response at start is fully-specified, but updates until end may
	//     be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *DeviceInputConfigStreamRequest) Reset() {
	*x = DeviceInputConfigStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInputConfigStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInputConfigStreamRequest) ProtoMessage() {}

func (x *DeviceInputConfigStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInputConfigStreamRequest.ProtoReflect.Descriptor instead.
func (*DeviceInputConfigStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{31}
}

func (x *DeviceInputConfigStreamRequest) GetPartialEqFilter() []*DeviceInputConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *DeviceInputConfigStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type DeviceInputConfigStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *DeviceInputConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this DeviceInputConfig's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the DeviceInputConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *DeviceInputConfigStreamResponse) Reset() {
	*x = DeviceInputConfigStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInputConfigStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInputConfigStreamResponse) ProtoMessage() {}

func (x *DeviceInputConfigStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInputConfigStreamResponse.ProtoReflect.Descriptor instead.
func (*DeviceInputConfigStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{32}
}

func (x *DeviceInputConfigStreamResponse) GetValue() *DeviceInputConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *DeviceInputConfigStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *DeviceInputConfigStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation(0)
}

type DeviceInputConfigBatchedStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*DeviceInputConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each DeviceInputConfig at end.
	//   - Each DeviceInputConfig response is fully-specified (all fields set).
	//   - start: Returns the state of each DeviceInputConfig at start, followed by updates until now.
	//   - Each DeviceInputConfig response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each DeviceInputConfig at start, followed by updates
	//     until end.
	//   - Each DeviceInputConfig response at start is fully-specified, but updates until end may
	//     be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	// MaxMessages limits the maximum number of messages that can be contained in one batch.
	// MaxMessages is required to be at least 1.
	// The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
	// INTERNAL_BATCH_LIMIT is set based on the maximum message size.
	MaxMessages *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=max_messages,json=maxMessages,proto3" json:"max_messages,omitempty"`
}

func (x *DeviceInputConfigBatchedStreamRequest) Reset() {
	*x = DeviceInputConfigBatchedStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInputConfigBatchedStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInputConfigBatchedStreamRequest) ProtoMessage() {}

func (x *DeviceInputConfigBatchedStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInputConfigBatchedStreamRequest.ProtoReflect.Descriptor instead.
func (*DeviceInputConfigBatchedStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{33}
}

func (x *DeviceInputConfigBatchedStreamRequest) GetPartialEqFilter() []*DeviceInputConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *DeviceInputConfigBatchedStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *DeviceInputConfigBatchedStreamRequest) GetMaxMessages() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxMessages
	}
	return nil
}

type DeviceInputConfigBatchedStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Values are the values deemed relevant to the initiating request.
	// The length of this structure is guaranteed to be between (inclusive) 1 and
	// min(req.max_messages, INTERNAL_BATCH_LIMIT).
	Responses []*DeviceInputConfigStreamResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *DeviceInputConfigBatchedStreamResponse) Reset() {
	*x = DeviceInputConfigBatchedStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInputConfigBatchedStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInputConfigBatchedStreamResponse) ProtoMessage() {}

func (x *DeviceInputConfigBatchedStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInputConfigBatchedStreamResponse.ProtoReflect.Descriptor instead.
func (*DeviceInputConfigBatchedStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{34}
}

func (x *DeviceInputConfigBatchedStreamResponse) GetResponses() []*DeviceInputConfigStreamResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type DeviceInputConfigSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DeviceInputConfig carries the value to set into the datastore.
	// See the documentation on the DeviceInputConfig struct for which fields are required.
	Value *DeviceInputConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DeviceInputConfigSetRequest) Reset() {
	*x = DeviceInputConfigSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInputConfigSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInputConfigSetRequest) ProtoMessage() {}

func (x *DeviceInputConfigSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInputConfigSetRequest.ProtoReflect.Descriptor instead.
func (*DeviceInputConfigSetRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{35}
}

func (x *DeviceInputConfigSetRequest) GetValue() *DeviceInputConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

type DeviceInputConfigSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value carries all the values given in the DeviceInputConfigSetRequest as well
	// as any server-generated values.
	Value *DeviceInputConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//   - it is after the time the request was received
	//   - a time-ranged query with StartTime==CreatedAt will include this instance.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *DeviceInputConfigSetResponse) Reset() {
	*x = DeviceInputConfigSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInputConfigSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInputConfigSetResponse) ProtoMessage() {}

func (x *DeviceInputConfigSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInputConfigSetResponse.ProtoReflect.Descriptor instead.
func (*DeviceInputConfigSetResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{36}
}

func (x *DeviceInputConfigSetResponse) GetValue() *DeviceInputConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *DeviceInputConfigSetResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type DeviceInputConfigSetSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value contains a list of DeviceInputConfig values to write.
	// It is possible to provide more values than can fit within either:
	//   - the maxiumum send size of the client
	//   - the maximum receive size of the server
	//
	// If this error occurs you must reduce the number of values sent.
	// See gRPC "maximum message size" documentation for more information.
	Values []*DeviceInputConfig `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *DeviceInputConfigSetSomeRequest) Reset() {
	*x = DeviceInputConfigSetSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInputConfigSetSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInputConfigSetSomeRequest) ProtoMessage() {}

func (x *DeviceInputConfigSetSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInputConfigSetSomeRequest.ProtoReflect.Descriptor instead.
func (*DeviceInputConfigSetSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{37}
}

func (x *DeviceInputConfigSetSomeRequest) GetValues() []*DeviceInputConfig {
	if x != nil {
		return x.Values
	}
	return nil
}

type DeviceInputConfigSetSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *DeviceKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Error string     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *DeviceInputConfigSetSomeResponse) Reset() {
	*x = DeviceInputConfigSetSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInputConfigSetSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInputConfigSetSomeResponse) ProtoMessage() {}

func (x *DeviceInputConfigSetSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInputConfigSetSomeResponse.ProtoReflect.Descriptor instead.
func (*DeviceInputConfigSetSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{38}
}

func (x *DeviceInputConfigSetSomeResponse) GetKey() *DeviceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *DeviceInputConfigSetSomeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type DeviceInputConfigDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key indicates which DeviceInputConfig instance to remove.
	// This field must always be set.
	Key *DeviceKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *DeviceInputConfigDeleteRequest) Reset() {
	*x = DeviceInputConfigDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInputConfigDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInputConfigDeleteRequest) ProtoMessage() {}

func (x *DeviceInputConfigDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInputConfigDeleteRequest.ProtoReflect.Descriptor instead.
func (*DeviceInputConfigDeleteRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{39}
}

func (x *DeviceInputConfigDeleteRequest) GetKey() *DeviceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type DeviceInputConfigDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key echoes back the key of the deleted DeviceInputConfig instance.
	Key *DeviceKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//   - it is after the time the request was received
	//   - a time-ranged query with StartTime==DeletedAt will not include this instance.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *DeviceInputConfigDeleteResponse) Reset() {
	*x = DeviceInputConfigDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInputConfigDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInputConfigDeleteResponse) ProtoMessage() {}

func (x *DeviceInputConfigDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInputConfigDeleteResponse.ProtoReflect.Descriptor instead.
func (*DeviceInputConfigDeleteResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{40}
}

func (x *DeviceInputConfigDeleteResponse) GetKey() *DeviceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *DeviceInputConfigDeleteResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type DeviceInputConfigDeleteSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key contains a list of DeviceInputConfig keys to delete
	Keys []*DeviceKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *DeviceInputConfigDeleteSomeRequest) Reset() {
	*x = DeviceInputConfigDeleteSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInputConfigDeleteSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInputConfigDeleteSomeRequest) ProtoMessage() {}

func (x *DeviceInputConfigDeleteSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInputConfigDeleteSomeRequest.ProtoReflect.Descriptor instead.
func (*DeviceInputConfigDeleteSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{41}
}

func (x *DeviceInputConfigDeleteSomeRequest) GetKeys() []*DeviceKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

// DeviceInputConfigDeleteSomeResponse is only sent when there is an error.
type DeviceInputConfigDeleteSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *DeviceKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Error string     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *DeviceInputConfigDeleteSomeResponse) Reset() {
	*x = DeviceInputConfigDeleteSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInputConfigDeleteSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInputConfigDeleteSomeResponse) ProtoMessage() {}

func (x *DeviceInputConfigDeleteSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInputConfigDeleteSomeResponse.ProtoReflect.Descriptor instead.
func (*DeviceInputConfigDeleteSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{42}
}

func (x *DeviceInputConfigDeleteSomeResponse) GetKey() *DeviceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *DeviceInputConfigDeleteSomeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type DeviceInputConfigDeleteAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a DeleteAll.
	// This requires all provided fields to be equal to the response.
	// A filtered DeleteAll will use GetAll with filter to find things to delete.
	PartialEqFilter []*DeviceInputConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
}

func (x *DeviceInputConfigDeleteAllRequest) Reset() {
	*x = DeviceInputConfigDeleteAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInputConfigDeleteAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInputConfigDeleteAllRequest) ProtoMessage() {}

func (x *DeviceInputConfigDeleteAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInputConfigDeleteAllRequest.ProtoReflect.Descriptor instead.
func (*DeviceInputConfigDeleteAllRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{43}
}

func (x *DeviceInputConfigDeleteAllRequest) GetPartialEqFilter() []*DeviceInputConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

type DeviceInputConfigDeleteAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This describes the class of delete error.
	// A DeleteAllResponse is only sent when there is an error.
	Type fmp.DeleteError `protobuf:"varint,1,opt,name=type,proto3,enum=fmp.DeleteError" json:"type,omitempty"`
	// This indicates the error message from the delete failure.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// This is the key of the DeviceInputConfig instance that failed to be deleted.
	Key *DeviceKey `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp when the key was being deleted.
	Time *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *DeviceInputConfigDeleteAllResponse) Reset() {
	*x = DeviceInputConfigDeleteAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInputConfigDeleteAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInputConfigDeleteAllResponse) ProtoMessage() {}

func (x *DeviceInputConfigDeleteAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInputConfigDeleteAllResponse.ProtoReflect.Descriptor instead.
func (*DeviceInputConfigDeleteAllResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{44}
}

func (x *DeviceInputConfigDeleteAllResponse) GetType() fmp.DeleteError {
	if x != nil {
		return x.Type
	}
	return fmp.DeleteError(0)
}

func (x *DeviceInputConfigDeleteAllResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *DeviceInputConfigDeleteAllResponse) GetKey() *DeviceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *DeviceInputConfigDeleteAllResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type DeviceStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a DeviceState instance to retrieve.
	// This value must be populated.
	Key *DeviceKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *DeviceStateRequest) Reset() {
	*x = DeviceStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceStateRequest) ProtoMessage() {}

func (x *DeviceStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceStateRequest.ProtoReflect.Descriptor instead.
func (*DeviceStateRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{45}
}

func (x *DeviceStateRequest) GetKey() *DeviceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *DeviceStateRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type DeviceStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *DeviceState `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// DeviceState instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *DeviceStateResponse) Reset() {
	*x = DeviceStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceStateResponse) ProtoMessage() {}

func (x *DeviceStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceStateResponse.ProtoReflect.Descriptor instead.
func (*DeviceStateResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{46}
}

func (x *DeviceStateResponse) GetValue() *DeviceState {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *DeviceStateResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type DeviceStateSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*DeviceKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *DeviceStateSomeRequest) Reset() {
	*x = DeviceStateSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceStateSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceStateSomeRequest) ProtoMessage() {}

func (x *DeviceStateSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceStateSomeRequest.ProtoReflect.Descriptor instead.
func (*DeviceStateSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{47}
}

func (x *DeviceStateSomeRequest) GetKeys() []*DeviceKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *DeviceStateSomeRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type DeviceStateSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *DeviceState `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Time  *timestamppb.Timestamp  `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *DeviceStateSomeResponse) Reset() {
	*x = DeviceStateSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceStateSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceStateSomeResponse) ProtoMessage() {}

func (x *DeviceStateSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceStateSomeResponse.ProtoReflect.Descriptor instead.
func (*DeviceStateSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{48}
}

func (x *DeviceStateSomeResponse) GetValue() *DeviceState {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *DeviceStateSomeResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *DeviceStateSomeResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type DeviceStateStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*DeviceState `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each DeviceState at end.
	//   - Each DeviceState response is fully-specified (all fields set).
	//   - start: Returns the state of each DeviceState at start, followed by updates until now.
	//   - Each DeviceState response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each DeviceState at start, followed by updates
	//     until end.
	//   - Each DeviceState response at start is fully-specified, but updates until end may
	//     be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *DeviceStateStreamRequest) Reset() {
	*x = DeviceStateStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceStateStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceStateStreamRequest) ProtoMessage() {}

func (x *DeviceStateStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceStateStreamRequest.ProtoReflect.Descriptor instead.
func (*DeviceStateStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{49}
}

func (x *DeviceStateStreamRequest) GetPartialEqFilter() []*DeviceState {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *DeviceStateStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type DeviceStateStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *DeviceState `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this DeviceState's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the DeviceState value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *DeviceStateStreamResponse) Reset() {
	*x = DeviceStateStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceStateStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceStateStreamResponse) ProtoMessage() {}

func (x *DeviceStateStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceStateStreamResponse.ProtoReflect.Descriptor instead.
func (*DeviceStateStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{50}
}

func (x *DeviceStateStreamResponse) GetValue() *DeviceState {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *DeviceStateStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *DeviceStateStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation(0)
}

type DeviceStateBatchedStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*DeviceState `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each DeviceState at end.
	//   - Each DeviceState response is fully-specified (all fields set).
	//   - start: Returns the state of each DeviceState at start, followed by updates until now.
	//   - Each DeviceState response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each DeviceState at start, followed by updates
	//     until end.
	//   - Each DeviceState response at start is fully-specified, but updates until end may
	//     be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	// MaxMessages limits the maximum number of messages that can be contained in one batch.
	// MaxMessages is required to be at least 1.
	// The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
	// INTERNAL_BATCH_LIMIT is set based on the maximum message size.
	MaxMessages *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=max_messages,json=maxMessages,proto3" json:"max_messages,omitempty"`
}

func (x *DeviceStateBatchedStreamRequest) Reset() {
	*x = DeviceStateBatchedStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceStateBatchedStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceStateBatchedStreamRequest) ProtoMessage() {}

func (x *DeviceStateBatchedStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceStateBatchedStreamRequest.ProtoReflect.Descriptor instead.
func (*DeviceStateBatchedStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{51}
}

func (x *DeviceStateBatchedStreamRequest) GetPartialEqFilter() []*DeviceState {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *DeviceStateBatchedStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *DeviceStateBatchedStreamRequest) GetMaxMessages() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxMessages
	}
	return nil
}

type DeviceStateBatchedStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Values are the values deemed relevant to the initiating request.
	// The length of this structure is guaranteed to be between (inclusive) 1 and
	// min(req.max_messages, INTERNAL_BATCH_LIMIT).
	Responses []*DeviceStateStreamResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *DeviceStateBatchedStreamResponse) Reset() {
	*x = DeviceStateBatchedStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceStateBatchedStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceStateBatchedStreamResponse) ProtoMessage() {}

func (x *DeviceStateBatchedStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceStateBatchedStreamResponse.ProtoReflect.Descriptor instead.
func (*DeviceStateBatchedStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{52}
}

func (x *DeviceStateBatchedStreamResponse) GetResponses() []*DeviceStateStreamResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type InterfaceInputConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a InterfaceInputConfig instance to retrieve.
	// This value must be populated.
	Key *InterfaceInputKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *InterfaceInputConfigRequest) Reset() {
	*x = InterfaceInputConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceInputConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceInputConfigRequest) ProtoMessage() {}

func (x *InterfaceInputConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceInputConfigRequest.ProtoReflect.Descriptor instead.
func (*InterfaceInputConfigRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{53}
}

func (x *InterfaceInputConfigRequest) GetKey() *InterfaceInputKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *InterfaceInputConfigRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type InterfaceInputConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *InterfaceInputConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// InterfaceInputConfig instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *InterfaceInputConfigResponse) Reset() {
	*x = InterfaceInputConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceInputConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceInputConfigResponse) ProtoMessage() {}

func (x *InterfaceInputConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceInputConfigResponse.ProtoReflect.Descriptor instead.
func (*InterfaceInputConfigResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{54}
}

func (x *InterfaceInputConfigResponse) GetValue() *InterfaceInputConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *InterfaceInputConfigResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type InterfaceInputConfigSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*InterfaceInputKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *InterfaceInputConfigSomeRequest) Reset() {
	*x = InterfaceInputConfigSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceInputConfigSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceInputConfigSomeRequest) ProtoMessage() {}

func (x *InterfaceInputConfigSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceInputConfigSomeRequest.ProtoReflect.Descriptor instead.
func (*InterfaceInputConfigSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{55}
}

func (x *InterfaceInputConfigSomeRequest) GetKeys() []*InterfaceInputKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *InterfaceInputConfigSomeRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type InterfaceInputConfigSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *InterfaceInputConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Time  *timestamppb.Timestamp  `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *InterfaceInputConfigSomeResponse) Reset() {
	*x = InterfaceInputConfigSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceInputConfigSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceInputConfigSomeResponse) ProtoMessage() {}

func (x *InterfaceInputConfigSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceInputConfigSomeResponse.ProtoReflect.Descriptor instead.
func (*InterfaceInputConfigSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{56}
}

func (x *InterfaceInputConfigSomeResponse) GetValue() *InterfaceInputConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *InterfaceInputConfigSomeResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *InterfaceInputConfigSomeResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type InterfaceInputConfigStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*InterfaceInputConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each InterfaceInputConfig at end.
	//   - Each InterfaceInputConfig response is fully-specified (all fields set).
	//   - start: Returns the state of each InterfaceInputConfig at start, followed by updates until now.
	//   - Each InterfaceInputConfig response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each InterfaceInputConfig at start, followed by updates
	//     until end.
	//   - Each InterfaceInputConfig response at start is fully-specified, but updates until end may
	//     be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *InterfaceInputConfigStreamRequest) Reset() {
	*x = InterfaceInputConfigStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceInputConfigStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceInputConfigStreamRequest) ProtoMessage() {}

func (x *InterfaceInputConfigStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceInputConfigStreamRequest.ProtoReflect.Descriptor instead.
func (*InterfaceInputConfigStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{57}
}

func (x *InterfaceInputConfigStreamRequest) GetPartialEqFilter() []*InterfaceInputConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *InterfaceInputConfigStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type InterfaceInputConfigStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *InterfaceInputConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this InterfaceInputConfig's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the InterfaceInputConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *InterfaceInputConfigStreamResponse) Reset() {
	*x = InterfaceInputConfigStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceInputConfigStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceInputConfigStreamResponse) ProtoMessage() {}

func (x *InterfaceInputConfigStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceInputConfigStreamResponse.ProtoReflect.Descriptor instead.
func (*InterfaceInputConfigStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{58}
}

func (x *InterfaceInputConfigStreamResponse) GetValue() *InterfaceInputConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *InterfaceInputConfigStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *InterfaceInputConfigStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation(0)
}

type InterfaceInputConfigBatchedStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*InterfaceInputConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each InterfaceInputConfig at end.
	//   - Each InterfaceInputConfig response is fully-specified (all fields set).
	//   - start: Returns the state of each InterfaceInputConfig at start, followed by updates until now.
	//   - Each InterfaceInputConfig response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each InterfaceInputConfig at start, followed by updates
	//     until end.
	//   - Each InterfaceInputConfig response at start is fully-specified, but updates until end may
	//     be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	// MaxMessages limits the maximum number of messages that can be contained in one batch.
	// MaxMessages is required to be at least 1.
	// The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
	// INTERNAL_BATCH_LIMIT is set based on the maximum message size.
	MaxMessages *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=max_messages,json=maxMessages,proto3" json:"max_messages,omitempty"`
}

func (x *InterfaceInputConfigBatchedStreamRequest) Reset() {
	*x = InterfaceInputConfigBatchedStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceInputConfigBatchedStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceInputConfigBatchedStreamRequest) ProtoMessage() {}

func (x *InterfaceInputConfigBatchedStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceInputConfigBatchedStreamRequest.ProtoReflect.Descriptor instead.
func (*InterfaceInputConfigBatchedStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{59}
}

func (x *InterfaceInputConfigBatchedStreamRequest) GetPartialEqFilter() []*InterfaceInputConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *InterfaceInputConfigBatchedStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *InterfaceInputConfigBatchedStreamRequest) GetMaxMessages() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxMessages
	}
	return nil
}

type InterfaceInputConfigBatchedStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Values are the values deemed relevant to the initiating request.
	// The length of this structure is guaranteed to be between (inclusive) 1 and
	// min(req.max_messages, INTERNAL_BATCH_LIMIT).
	Responses []*InterfaceInputConfigStreamResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *InterfaceInputConfigBatchedStreamResponse) Reset() {
	*x = InterfaceInputConfigBatchedStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceInputConfigBatchedStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceInputConfigBatchedStreamResponse) ProtoMessage() {}

func (x *InterfaceInputConfigBatchedStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceInputConfigBatchedStreamResponse.ProtoReflect.Descriptor instead.
func (*InterfaceInputConfigBatchedStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{60}
}

func (x *InterfaceInputConfigBatchedStreamResponse) GetResponses() []*InterfaceInputConfigStreamResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type InterfaceInputConfigSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// InterfaceInputConfig carries the value to set into the datastore.
	// See the documentation on the InterfaceInputConfig struct for which fields are required.
	Value *InterfaceInputConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *InterfaceInputConfigSetRequest) Reset() {
	*x = InterfaceInputConfigSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceInputConfigSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceInputConfigSetRequest) ProtoMessage() {}

func (x *InterfaceInputConfigSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceInputConfigSetRequest.ProtoReflect.Descriptor instead.
func (*InterfaceInputConfigSetRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{61}
}

func (x *InterfaceInputConfigSetRequest) GetValue() *InterfaceInputConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

type InterfaceInputConfigSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value carries all the values given in the InterfaceInputConfigSetRequest as well
	// as any server-generated values.
	Value *InterfaceInputConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//   - it is after the time the request was received
	//   - a time-ranged query with StartTime==CreatedAt will include this instance.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *InterfaceInputConfigSetResponse) Reset() {
	*x = InterfaceInputConfigSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceInputConfigSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceInputConfigSetResponse) ProtoMessage() {}

func (x *InterfaceInputConfigSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceInputConfigSetResponse.ProtoReflect.Descriptor instead.
func (*InterfaceInputConfigSetResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{62}
}

func (x *InterfaceInputConfigSetResponse) GetValue() *InterfaceInputConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *InterfaceInputConfigSetResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type InterfaceInputConfigSetSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value contains a list of InterfaceInputConfig values to write.
	// It is possible to provide more values than can fit within either:
	//   - the maxiumum send size of the client
	//   - the maximum receive size of the server
	//
	// If this error occurs you must reduce the number of values sent.
	// See gRPC "maximum message size" documentation for more information.
	Values []*InterfaceInputConfig `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *InterfaceInputConfigSetSomeRequest) Reset() {
	*x = InterfaceInputConfigSetSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceInputConfigSetSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceInputConfigSetSomeRequest) ProtoMessage() {}

func (x *InterfaceInputConfigSetSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceInputConfigSetSomeRequest.ProtoReflect.Descriptor instead.
func (*InterfaceInputConfigSetSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{63}
}

func (x *InterfaceInputConfigSetSomeRequest) GetValues() []*InterfaceInputConfig {
	if x != nil {
		return x.Values
	}
	return nil
}

type InterfaceInputConfigSetSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *InterfaceInputKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Error string             `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *InterfaceInputConfigSetSomeResponse) Reset() {
	*x = InterfaceInputConfigSetSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceInputConfigSetSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceInputConfigSetSomeResponse) ProtoMessage() {}

func (x *InterfaceInputConfigSetSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceInputConfigSetSomeResponse.ProtoReflect.Descriptor instead.
func (*InterfaceInputConfigSetSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{64}
}

func (x *InterfaceInputConfigSetSomeResponse) GetKey() *InterfaceInputKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *InterfaceInputConfigSetSomeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type InterfaceInputConfigDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key indicates which InterfaceInputConfig instance to remove.
	// This field must always be set.
	Key *InterfaceInputKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *InterfaceInputConfigDeleteRequest) Reset() {
	*x = InterfaceInputConfigDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceInputConfigDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceInputConfigDeleteRequest) ProtoMessage() {}

func (x *InterfaceInputConfigDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceInputConfigDeleteRequest.ProtoReflect.Descriptor instead.
func (*InterfaceInputConfigDeleteRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{65}
}

func (x *InterfaceInputConfigDeleteRequest) GetKey() *InterfaceInputKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type InterfaceInputConfigDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key echoes back the key of the deleted InterfaceInputConfig instance.
	Key *InterfaceInputKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//   - it is after the time the request was received
	//   - a time-ranged query with StartTime==DeletedAt will not include this instance.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *InterfaceInputConfigDeleteResponse) Reset() {
	*x = InterfaceInputConfigDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceInputConfigDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceInputConfigDeleteResponse) ProtoMessage() {}

func (x *InterfaceInputConfigDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceInputConfigDeleteResponse.ProtoReflect.Descriptor instead.
func (*InterfaceInputConfigDeleteResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{66}
}

func (x *InterfaceInputConfigDeleteResponse) GetKey() *InterfaceInputKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *InterfaceInputConfigDeleteResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type InterfaceInputConfigDeleteSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key contains a list of InterfaceInputConfig keys to delete
	Keys []*InterfaceInputKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *InterfaceInputConfigDeleteSomeRequest) Reset() {
	*x = InterfaceInputConfigDeleteSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceInputConfigDeleteSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceInputConfigDeleteSomeRequest) ProtoMessage() {}

func (x *InterfaceInputConfigDeleteSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceInputConfigDeleteSomeRequest.ProtoReflect.Descriptor instead.
func (*InterfaceInputConfigDeleteSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{67}
}

func (x *InterfaceInputConfigDeleteSomeRequest) GetKeys() []*InterfaceInputKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

// InterfaceInputConfigDeleteSomeResponse is only sent when there is an error.
type InterfaceInputConfigDeleteSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *InterfaceInputKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Error string             `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *InterfaceInputConfigDeleteSomeResponse) Reset() {
	*x = InterfaceInputConfigDeleteSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceInputConfigDeleteSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceInputConfigDeleteSomeResponse) ProtoMessage() {}

func (x *InterfaceInputConfigDeleteSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceInputConfigDeleteSomeResponse.ProtoReflect.Descriptor instead.
func (*InterfaceInputConfigDeleteSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{68}
}

func (x *InterfaceInputConfigDeleteSomeResponse) GetKey() *InterfaceInputKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *InterfaceInputConfigDeleteSomeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type InterfaceInputConfigDeleteAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a DeleteAll.
	// This requires all provided fields to be equal to the response.
	// A filtered DeleteAll will use GetAll with filter to find things to delete.
	PartialEqFilter []*InterfaceInputConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
}

func (x *InterfaceInputConfigDeleteAllRequest) Reset() {
	*x = InterfaceInputConfigDeleteAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceInputConfigDeleteAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceInputConfigDeleteAllRequest) ProtoMessage() {}

func (x *InterfaceInputConfigDeleteAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceInputConfigDeleteAllRequest.ProtoReflect.Descriptor instead.
func (*InterfaceInputConfigDeleteAllRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{69}
}

func (x *InterfaceInputConfigDeleteAllRequest) GetPartialEqFilter() []*InterfaceInputConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

type InterfaceInputConfigDeleteAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This describes the class of delete error.
	// A DeleteAllResponse is only sent when there is an error.
	Type fmp.DeleteError `protobuf:"varint,1,opt,name=type,proto3,enum=fmp.DeleteError" json:"type,omitempty"`
	// This indicates the error message from the delete failure.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// This is the key of the InterfaceInputConfig instance that failed to be deleted.
	Key *InterfaceInputKey `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp when the key was being deleted.
	Time *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *InterfaceInputConfigDeleteAllResponse) Reset() {
	*x = InterfaceInputConfigDeleteAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceInputConfigDeleteAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceInputConfigDeleteAllResponse) ProtoMessage() {}

func (x *InterfaceInputConfigDeleteAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceInputConfigDeleteAllResponse.ProtoReflect.Descriptor instead.
func (*InterfaceInputConfigDeleteAllResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{70}
}

func (x *InterfaceInputConfigDeleteAllResponse) GetType() fmp.DeleteError {
	if x != nil {
		return x.Type
	}
	return fmp.DeleteError(0)
}

func (x *InterfaceInputConfigDeleteAllResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *InterfaceInputConfigDeleteAllResponse) GetKey() *InterfaceInputKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *InterfaceInputConfigDeleteAllResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type ReplaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a Replace instance to retrieve.
	// This value must be populated.
	Key *DeviceKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *ReplaceRequest) Reset() {
	*x = ReplaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceRequest) ProtoMessage() {}

func (x *ReplaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceRequest.ProtoReflect.Descriptor instead.
func (*ReplaceRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{71}
}

func (x *ReplaceRequest) GetKey() *DeviceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ReplaceRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type ReplaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *Replace `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// Replace instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *ReplaceResponse) Reset() {
	*x = ReplaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceResponse) ProtoMessage() {}

func (x *ReplaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceResponse.ProtoReflect.Descriptor instead.
func (*ReplaceResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{72}
}

func (x *ReplaceResponse) GetValue() *Replace {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ReplaceResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type ReplaceSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*DeviceKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *ReplaceSomeRequest) Reset() {
	*x = ReplaceSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceSomeRequest) ProtoMessage() {}

func (x *ReplaceSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceSomeRequest.ProtoReflect.Descriptor instead.
func (*ReplaceSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{73}
}

func (x *ReplaceSomeRequest) GetKeys() []*DeviceKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *ReplaceSomeRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type ReplaceSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *Replace `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Time  *timestamppb.Timestamp  `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *ReplaceSomeResponse) Reset() {
	*x = ReplaceSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceSomeResponse) ProtoMessage() {}

func (x *ReplaceSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceSomeResponse.ProtoReflect.Descriptor instead.
func (*ReplaceSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{74}
}

func (x *ReplaceSomeResponse) GetValue() *Replace {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ReplaceSomeResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ReplaceSomeResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type ReplaceStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*Replace `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each Replace at end.
	//   - Each Replace response is fully-specified (all fields set).
	//   - start: Returns the state of each Replace at start, followed by updates until now.
	//   - Each Replace response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each Replace at start, followed by updates
	//     until end.
	//   - Each Replace response at start is fully-specified, but updates until end may
	//     be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *ReplaceStreamRequest) Reset() {
	*x = ReplaceStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceStreamRequest) ProtoMessage() {}

func (x *ReplaceStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceStreamRequest.ProtoReflect.Descriptor instead.
func (*ReplaceStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{75}
}

func (x *ReplaceStreamRequest) GetPartialEqFilter() []*Replace {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *ReplaceStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type ReplaceStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *Replace `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this Replace's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the Replace value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *ReplaceStreamResponse) Reset() {
	*x = ReplaceStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceStreamResponse) ProtoMessage() {}

func (x *ReplaceStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceStreamResponse.ProtoReflect.Descriptor instead.
func (*ReplaceStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{76}
}

func (x *ReplaceStreamResponse) GetValue() *Replace {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ReplaceStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *ReplaceStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation(0)
}

type ReplaceBatchedStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*Replace `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each Replace at end.
	//   - Each Replace response is fully-specified (all fields set).
	//   - start: Returns the state of each Replace at start, followed by updates until now.
	//   - Each Replace response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each Replace at start, followed by updates
	//     until end.
	//   - Each Replace response at start is fully-specified, but updates until end may
	//     be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	// MaxMessages limits the maximum number of messages that can be contained in one batch.
	// MaxMessages is required to be at least 1.
	// The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
	// INTERNAL_BATCH_LIMIT is set based on the maximum message size.
	MaxMessages *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=max_messages,json=maxMessages,proto3" json:"max_messages,omitempty"`
}

func (x *ReplaceBatchedStreamRequest) Reset() {
	*x = ReplaceBatchedStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceBatchedStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceBatchedStreamRequest) ProtoMessage() {}

func (x *ReplaceBatchedStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceBatchedStreamRequest.ProtoReflect.Descriptor instead.
func (*ReplaceBatchedStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{77}
}

func (x *ReplaceBatchedStreamRequest) GetPartialEqFilter() []*Replace {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *ReplaceBatchedStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *ReplaceBatchedStreamRequest) GetMaxMessages() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxMessages
	}
	return nil
}

type ReplaceBatchedStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Values are the values deemed relevant to the initiating request.
	// The length of this structure is guaranteed to be between (inclusive) 1 and
	// min(req.max_messages, INTERNAL_BATCH_LIMIT).
	Responses []*ReplaceStreamResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *ReplaceBatchedStreamResponse) Reset() {
	*x = ReplaceBatchedStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceBatchedStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceBatchedStreamResponse) ProtoMessage() {}

func (x *ReplaceBatchedStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceBatchedStreamResponse.ProtoReflect.Descriptor instead.
func (*ReplaceBatchedStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{78}
}

func (x *ReplaceBatchedStreamResponse) GetResponses() []*ReplaceStreamResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type ReplaceConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a ReplaceConfig instance to retrieve.
	// This value must be populated.
	Key *DeviceKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *ReplaceConfigRequest) Reset() {
	*x = ReplaceConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceConfigRequest) ProtoMessage() {}

func (x *ReplaceConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceConfigRequest.ProtoReflect.Descriptor instead.
func (*ReplaceConfigRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{79}
}

func (x *ReplaceConfigRequest) GetKey() *DeviceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ReplaceConfigRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type ReplaceConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *ReplaceConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// ReplaceConfig instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *ReplaceConfigResponse) Reset() {
	*x = ReplaceConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceConfigResponse) ProtoMessage() {}

func (x *ReplaceConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceConfigResponse.ProtoReflect.Descriptor instead.
func (*ReplaceConfigResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{80}
}

func (x *ReplaceConfigResponse) GetValue() *ReplaceConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ReplaceConfigResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type ReplaceConfigSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*DeviceKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *ReplaceConfigSomeRequest) Reset() {
	*x = ReplaceConfigSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceConfigSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceConfigSomeRequest) ProtoMessage() {}

func (x *ReplaceConfigSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceConfigSomeRequest.ProtoReflect.Descriptor instead.
func (*ReplaceConfigSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{81}
}

func (x *ReplaceConfigSomeRequest) GetKeys() []*DeviceKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *ReplaceConfigSomeRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type ReplaceConfigSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *ReplaceConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Time  *timestamppb.Timestamp  `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *ReplaceConfigSomeResponse) Reset() {
	*x = ReplaceConfigSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceConfigSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceConfigSomeResponse) ProtoMessage() {}

func (x *ReplaceConfigSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceConfigSomeResponse.ProtoReflect.Descriptor instead.
func (*ReplaceConfigSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{82}
}

func (x *ReplaceConfigSomeResponse) GetValue() *ReplaceConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ReplaceConfigSomeResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ReplaceConfigSomeResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type ReplaceConfigStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*ReplaceConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each ReplaceConfig at end.
	//   - Each ReplaceConfig response is fully-specified (all fields set).
	//   - start: Returns the state of each ReplaceConfig at start, followed by updates until now.
	//   - Each ReplaceConfig response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each ReplaceConfig at start, followed by updates
	//     until end.
	//   - Each ReplaceConfig response at start is fully-specified, but updates until end may
	//     be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *ReplaceConfigStreamRequest) Reset() {
	*x = ReplaceConfigStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceConfigStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceConfigStreamRequest) ProtoMessage() {}

func (x *ReplaceConfigStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceConfigStreamRequest.ProtoReflect.Descriptor instead.
func (*ReplaceConfigStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{83}
}

func (x *ReplaceConfigStreamRequest) GetPartialEqFilter() []*ReplaceConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *ReplaceConfigStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type ReplaceConfigStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *ReplaceConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this ReplaceConfig's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the ReplaceConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *ReplaceConfigStreamResponse) Reset() {
	*x = ReplaceConfigStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceConfigStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceConfigStreamResponse) ProtoMessage() {}

func (x *ReplaceConfigStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceConfigStreamResponse.ProtoReflect.Descriptor instead.
func (*ReplaceConfigStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{84}
}

func (x *ReplaceConfigStreamResponse) GetValue() *ReplaceConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ReplaceConfigStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *ReplaceConfigStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation(0)
}

type ReplaceConfigBatchedStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*ReplaceConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each ReplaceConfig at end.
	//   - Each ReplaceConfig response is fully-specified (all fields set).
	//   - start: Returns the state of each ReplaceConfig at start, followed by updates until now.
	//   - Each ReplaceConfig response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each ReplaceConfig at start, followed by updates
	//     until end.
	//   - Each ReplaceConfig response at start is fully-specified, but updates until end may
	//     be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	// MaxMessages limits the maximum number of messages that can be contained in one batch.
	// MaxMessages is required to be at least 1.
	// The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
	// INTERNAL_BATCH_LIMIT is set based on the maximum message size.
	MaxMessages *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=max_messages,json=maxMessages,proto3" json:"max_messages,omitempty"`
}

func (x *ReplaceConfigBatchedStreamRequest) Reset() {
	*x = ReplaceConfigBatchedStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceConfigBatchedStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceConfigBatchedStreamRequest) ProtoMessage() {}

func (x *ReplaceConfigBatchedStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceConfigBatchedStreamRequest.ProtoReflect.Descriptor instead.
func (*ReplaceConfigBatchedStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{85}
}

func (x *ReplaceConfigBatchedStreamRequest) GetPartialEqFilter() []*ReplaceConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *ReplaceConfigBatchedStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *ReplaceConfigBatchedStreamRequest) GetMaxMessages() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxMessages
	}
	return nil
}

type ReplaceConfigBatchedStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Values are the values deemed relevant to the initiating request.
	// The length of this structure is guaranteed to be between (inclusive) 1 and
	// min(req.max_messages, INTERNAL_BATCH_LIMIT).
	Responses []*ReplaceConfigStreamResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *ReplaceConfigBatchedStreamResponse) Reset() {
	*x = ReplaceConfigBatchedStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceConfigBatchedStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceConfigBatchedStreamResponse) ProtoMessage() {}

func (x *ReplaceConfigBatchedStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceConfigBatchedStreamResponse.ProtoReflect.Descriptor instead.
func (*ReplaceConfigBatchedStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{86}
}

func (x *ReplaceConfigBatchedStreamResponse) GetResponses() []*ReplaceConfigStreamResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type ReplaceConfigSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ReplaceConfig carries the value to set into the datastore.
	// See the documentation on the ReplaceConfig struct for which fields are required.
	Value *ReplaceConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ReplaceConfigSetRequest) Reset() {
	*x = ReplaceConfigSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceConfigSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceConfigSetRequest) ProtoMessage() {}

func (x *ReplaceConfigSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceConfigSetRequest.ProtoReflect.Descriptor instead.
func (*ReplaceConfigSetRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{87}
}

func (x *ReplaceConfigSetRequest) GetValue() *ReplaceConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

type ReplaceConfigSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value carries all the values given in the ReplaceConfigSetRequest as well
	// as any server-generated values.
	Value *ReplaceConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//   - it is after the time the request was received
	//   - a time-ranged query with StartTime==CreatedAt will include this instance.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *ReplaceConfigSetResponse) Reset() {
	*x = ReplaceConfigSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceConfigSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceConfigSetResponse) ProtoMessage() {}

func (x *ReplaceConfigSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceConfigSetResponse.ProtoReflect.Descriptor instead.
func (*ReplaceConfigSetResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{88}
}

func (x *ReplaceConfigSetResponse) GetValue() *ReplaceConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ReplaceConfigSetResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type ReplaceConfigSetSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value contains a list of ReplaceConfig values to write.
	// It is possible to provide more values than can fit within either:
	//   - the maxiumum send size of the client
	//   - the maximum receive size of the server
	//
	// If this error occurs you must reduce the number of values sent.
	// See gRPC "maximum message size" documentation for more information.
	Values []*ReplaceConfig `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *ReplaceConfigSetSomeRequest) Reset() {
	*x = ReplaceConfigSetSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceConfigSetSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceConfigSetSomeRequest) ProtoMessage() {}

func (x *ReplaceConfigSetSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceConfigSetSomeRequest.ProtoReflect.Descriptor instead.
func (*ReplaceConfigSetSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{89}
}

func (x *ReplaceConfigSetSomeRequest) GetValues() []*ReplaceConfig {
	if x != nil {
		return x.Values
	}
	return nil
}

type ReplaceConfigSetSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *DeviceKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Error string     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ReplaceConfigSetSomeResponse) Reset() {
	*x = ReplaceConfigSetSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceConfigSetSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceConfigSetSomeResponse) ProtoMessage() {}

func (x *ReplaceConfigSetSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceConfigSetSomeResponse.ProtoReflect.Descriptor instead.
func (*ReplaceConfigSetSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{90}
}

func (x *ReplaceConfigSetSomeResponse) GetKey() *DeviceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ReplaceConfigSetSomeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type ReplaceConfigDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key indicates which ReplaceConfig instance to remove.
	// This field must always be set.
	Key *DeviceKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *ReplaceConfigDeleteRequest) Reset() {
	*x = ReplaceConfigDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceConfigDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceConfigDeleteRequest) ProtoMessage() {}

func (x *ReplaceConfigDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceConfigDeleteRequest.ProtoReflect.Descriptor instead.
func (*ReplaceConfigDeleteRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{91}
}

func (x *ReplaceConfigDeleteRequest) GetKey() *DeviceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type ReplaceConfigDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key echoes back the key of the deleted ReplaceConfig instance.
	Key *DeviceKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//   - it is after the time the request was received
	//   - a time-ranged query with StartTime==DeletedAt will not include this instance.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *ReplaceConfigDeleteResponse) Reset() {
	*x = ReplaceConfigDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceConfigDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceConfigDeleteResponse) ProtoMessage() {}

func (x *ReplaceConfigDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceConfigDeleteResponse.ProtoReflect.Descriptor instead.
func (*ReplaceConfigDeleteResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{92}
}

func (x *ReplaceConfigDeleteResponse) GetKey() *DeviceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ReplaceConfigDeleteResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type ReplaceConfigDeleteSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key contains a list of ReplaceConfig keys to delete
	Keys []*DeviceKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *ReplaceConfigDeleteSomeRequest) Reset() {
	*x = ReplaceConfigDeleteSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceConfigDeleteSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceConfigDeleteSomeRequest) ProtoMessage() {}

func (x *ReplaceConfigDeleteSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceConfigDeleteSomeRequest.ProtoReflect.Descriptor instead.
func (*ReplaceConfigDeleteSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{93}
}

func (x *ReplaceConfigDeleteSomeRequest) GetKeys() []*DeviceKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

// ReplaceConfigDeleteSomeResponse is only sent when there is an error.
type ReplaceConfigDeleteSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *DeviceKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Error string     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ReplaceConfigDeleteSomeResponse) Reset() {
	*x = ReplaceConfigDeleteSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceConfigDeleteSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceConfigDeleteSomeResponse) ProtoMessage() {}

func (x *ReplaceConfigDeleteSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceConfigDeleteSomeResponse.ProtoReflect.Descriptor instead.
func (*ReplaceConfigDeleteSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{94}
}

func (x *ReplaceConfigDeleteSomeResponse) GetKey() *DeviceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ReplaceConfigDeleteSomeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type ReplaceConfigDeleteAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a DeleteAll.
	// This requires all provided fields to be equal to the response.
	// A filtered DeleteAll will use GetAll with filter to find things to delete.
	PartialEqFilter []*ReplaceConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
}

func (x *ReplaceConfigDeleteAllRequest) Reset() {
	*x = ReplaceConfigDeleteAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceConfigDeleteAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceConfigDeleteAllRequest) ProtoMessage() {}

func (x *ReplaceConfigDeleteAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceConfigDeleteAllRequest.ProtoReflect.Descriptor instead.
func (*ReplaceConfigDeleteAllRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{95}
}

func (x *ReplaceConfigDeleteAllRequest) GetPartialEqFilter() []*ReplaceConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

type ReplaceConfigDeleteAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This describes the class of delete error.
	// A DeleteAllResponse is only sent when there is an error.
	Type fmp.DeleteError `protobuf:"varint,1,opt,name=type,proto3,enum=fmp.DeleteError" json:"type,omitempty"`
	// This indicates the error message from the delete failure.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// This is the key of the ReplaceConfig instance that failed to be deleted.
	Key *DeviceKey `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp when the key was being deleted.
	Time *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *ReplaceConfigDeleteAllResponse) Reset() {
	*x = ReplaceConfigDeleteAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceConfigDeleteAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceConfigDeleteAllResponse) ProtoMessage() {}

func (x *ReplaceConfigDeleteAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceConfigDeleteAllResponse.ProtoReflect.Descriptor instead.
func (*ReplaceConfigDeleteAllResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{96}
}

func (x *ReplaceConfigDeleteAllResponse) GetType() fmp.DeleteError {
	if x != nil {
		return x.Type
	}
	return fmp.DeleteError(0)
}

func (x *ReplaceConfigDeleteAllResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ReplaceConfigDeleteAllResponse) GetKey() *DeviceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ReplaceConfigDeleteAllResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type RevertConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a RevertConfig instance to retrieve.
	// This value must be populated.
	Key *workspace_v1.WorkspaceKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *RevertConfigRequest) Reset() {
	*x = RevertConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevertConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevertConfigRequest) ProtoMessage() {}

func (x *RevertConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevertConfigRequest.ProtoReflect.Descriptor instead.
func (*RevertConfigRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{97}
}

func (x *RevertConfigRequest) GetKey() *workspace_v1.WorkspaceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *RevertConfigRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type RevertConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *RevertConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// RevertConfig instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *RevertConfigResponse) Reset() {
	*x = RevertConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevertConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevertConfigResponse) ProtoMessage() {}

func (x *RevertConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevertConfigResponse.ProtoReflect.Descriptor instead.
func (*RevertConfigResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{98}
}

func (x *RevertConfigResponse) GetValue() *RevertConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *RevertConfigResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type RevertConfigSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*workspace_v1.WorkspaceKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *RevertConfigSomeRequest) Reset() {
	*x = RevertConfigSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevertConfigSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevertConfigSomeRequest) ProtoMessage() {}

func (x *RevertConfigSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevertConfigSomeRequest.ProtoReflect.Descriptor instead.
func (*RevertConfigSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{99}
}

func (x *RevertConfigSomeRequest) GetKeys() []*workspace_v1.WorkspaceKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *RevertConfigSomeRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type RevertConfigSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *RevertConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Time  *timestamppb.Timestamp  `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *RevertConfigSomeResponse) Reset() {
	*x = RevertConfigSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevertConfigSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevertConfigSomeResponse) ProtoMessage() {}

func (x *RevertConfigSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevertConfigSomeResponse.ProtoReflect.Descriptor instead.
func (*RevertConfigSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{100}
}

func (x *RevertConfigSomeResponse) GetValue() *RevertConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *RevertConfigSomeResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *RevertConfigSomeResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type RevertConfigStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*RevertConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each RevertConfig at end.
	//   - Each RevertConfig response is fully-specified (all fields set).
	//   - start: Returns the state of each RevertConfig at start, followed by updates until now.
	//   - Each RevertConfig response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each RevertConfig at start, followed by updates
	//     until end.
	//   - Each RevertConfig response at start is fully-specified, but updates until end may
	//     be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *RevertConfigStreamRequest) Reset() {
	*x = RevertConfigStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevertConfigStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevertConfigStreamRequest) ProtoMessage() {}

func (x *RevertConfigStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevertConfigStreamRequest.ProtoReflect.Descriptor instead.
func (*RevertConfigStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{101}
}

func (x *RevertConfigStreamRequest) GetPartialEqFilter() []*RevertConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *RevertConfigStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type RevertConfigStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *RevertConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this RevertConfig's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the RevertConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *RevertConfigStreamResponse) Reset() {
	*x = RevertConfigStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevertConfigStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevertConfigStreamResponse) ProtoMessage() {}

func (x *RevertConfigStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevertConfigStreamResponse.ProtoReflect.Descriptor instead.
func (*RevertConfigStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{102}
}

func (x *RevertConfigStreamResponse) GetValue() *RevertConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *RevertConfigStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *RevertConfigStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation(0)
}

type RevertConfigBatchedStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*RevertConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each RevertConfig at end.
	//   - Each RevertConfig response is fully-specified (all fields set).
	//   - start: Returns the state of each RevertConfig at start, followed by updates until now.
	//   - Each RevertConfig response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each RevertConfig at start, followed by updates
	//     until end.
	//   - Each RevertConfig response at start is fully-specified, but updates until end may
	//     be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	// MaxMessages limits the maximum number of messages that can be contained in one batch.
	// MaxMessages is required to be at least 1.
	// The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
	// INTERNAL_BATCH_LIMIT is set based on the maximum message size.
	MaxMessages *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=max_messages,json=maxMessages,proto3" json:"max_messages,omitempty"`
}

func (x *RevertConfigBatchedStreamRequest) Reset() {
	*x = RevertConfigBatchedStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevertConfigBatchedStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevertConfigBatchedStreamRequest) ProtoMessage() {}

func (x *RevertConfigBatchedStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevertConfigBatchedStreamRequest.ProtoReflect.Descriptor instead.
func (*RevertConfigBatchedStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{103}
}

func (x *RevertConfigBatchedStreamRequest) GetPartialEqFilter() []*RevertConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *RevertConfigBatchedStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *RevertConfigBatchedStreamRequest) GetMaxMessages() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxMessages
	}
	return nil
}

type RevertConfigBatchedStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Values are the values deemed relevant to the initiating request.
	// The length of this structure is guaranteed to be between (inclusive) 1 and
	// min(req.max_messages, INTERNAL_BATCH_LIMIT).
	Responses []*RevertConfigStreamResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *RevertConfigBatchedStreamResponse) Reset() {
	*x = RevertConfigBatchedStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevertConfigBatchedStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevertConfigBatchedStreamResponse) ProtoMessage() {}

func (x *RevertConfigBatchedStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevertConfigBatchedStreamResponse.ProtoReflect.Descriptor instead.
func (*RevertConfigBatchedStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{104}
}

func (x *RevertConfigBatchedStreamResponse) GetResponses() []*RevertConfigStreamResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type RevertConfigSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RevertConfig carries the value to set into the datastore.
	// See the documentation on the RevertConfig struct for which fields are required.
	Value *RevertConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *RevertConfigSetRequest) Reset() {
	*x = RevertConfigSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevertConfigSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevertConfigSetRequest) ProtoMessage() {}

func (x *RevertConfigSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevertConfigSetRequest.ProtoReflect.Descriptor instead.
func (*RevertConfigSetRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{105}
}

func (x *RevertConfigSetRequest) GetValue() *RevertConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

type RevertConfigSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value carries all the values given in the RevertConfigSetRequest as well
	// as any server-generated values.
	Value *RevertConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//   - it is after the time the request was received
	//   - a time-ranged query with StartTime==CreatedAt will include this instance.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *RevertConfigSetResponse) Reset() {
	*x = RevertConfigSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevertConfigSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevertConfigSetResponse) ProtoMessage() {}

func (x *RevertConfigSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevertConfigSetResponse.ProtoReflect.Descriptor instead.
func (*RevertConfigSetResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{106}
}

func (x *RevertConfigSetResponse) GetValue() *RevertConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *RevertConfigSetResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type RevertConfigSetSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value contains a list of RevertConfig values to write.
	// It is possible to provide more values than can fit within either:
	//   - the maxiumum send size of the client
	//   - the maximum receive size of the server
	//
	// If this error occurs you must reduce the number of values sent.
	// See gRPC "maximum message size" documentation for more information.
	Values []*RevertConfig `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *RevertConfigSetSomeRequest) Reset() {
	*x = RevertConfigSetSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevertConfigSetSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevertConfigSetSomeRequest) ProtoMessage() {}

func (x *RevertConfigSetSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevertConfigSetSomeRequest.ProtoReflect.Descriptor instead.
func (*RevertConfigSetSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{107}
}

func (x *RevertConfigSetSomeRequest) GetValues() []*RevertConfig {
	if x != nil {
		return x.Values
	}
	return nil
}

type RevertConfigSetSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *workspace_v1.WorkspaceKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Error string                     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *RevertConfigSetSomeResponse) Reset() {
	*x = RevertConfigSetSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevertConfigSetSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevertConfigSetSomeResponse) ProtoMessage() {}

func (x *RevertConfigSetSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevertConfigSetSomeResponse.ProtoReflect.Descriptor instead.
func (*RevertConfigSetSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{108}
}

func (x *RevertConfigSetSomeResponse) GetKey() *workspace_v1.WorkspaceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *RevertConfigSetSomeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type RevertConfigDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key indicates which RevertConfig instance to remove.
	// This field must always be set.
	Key *workspace_v1.WorkspaceKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *RevertConfigDeleteRequest) Reset() {
	*x = RevertConfigDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevertConfigDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevertConfigDeleteRequest) ProtoMessage() {}

func (x *RevertConfigDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevertConfigDeleteRequest.ProtoReflect.Descriptor instead.
func (*RevertConfigDeleteRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{109}
}

func (x *RevertConfigDeleteRequest) GetKey() *workspace_v1.WorkspaceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type RevertConfigDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key echoes back the key of the deleted RevertConfig instance.
	Key *workspace_v1.WorkspaceKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//   - it is after the time the request was received
	//   - a time-ranged query with StartTime==DeletedAt will not include this instance.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *RevertConfigDeleteResponse) Reset() {
	*x = RevertConfigDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevertConfigDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevertConfigDeleteResponse) ProtoMessage() {}

func (x *RevertConfigDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevertConfigDeleteResponse.ProtoReflect.Descriptor instead.
func (*RevertConfigDeleteResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{110}
}

func (x *RevertConfigDeleteResponse) GetKey() *workspace_v1.WorkspaceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *RevertConfigDeleteResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type RevertConfigDeleteSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key contains a list of RevertConfig keys to delete
	Keys []*workspace_v1.WorkspaceKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *RevertConfigDeleteSomeRequest) Reset() {
	*x = RevertConfigDeleteSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevertConfigDeleteSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevertConfigDeleteSomeRequest) ProtoMessage() {}

func (x *RevertConfigDeleteSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevertConfigDeleteSomeRequest.ProtoReflect.Descriptor instead.
func (*RevertConfigDeleteSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{111}
}

func (x *RevertConfigDeleteSomeRequest) GetKeys() []*workspace_v1.WorkspaceKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

// RevertConfigDeleteSomeResponse is only sent when there is an error.
type RevertConfigDeleteSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *workspace_v1.WorkspaceKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Error string                     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *RevertConfigDeleteSomeResponse) Reset() {
	*x = RevertConfigDeleteSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevertConfigDeleteSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevertConfigDeleteSomeResponse) ProtoMessage() {}

func (x *RevertConfigDeleteSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevertConfigDeleteSomeResponse.ProtoReflect.Descriptor instead.
func (*RevertConfigDeleteSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{112}
}

func (x *RevertConfigDeleteSomeResponse) GetKey() *workspace_v1.WorkspaceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *RevertConfigDeleteSomeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type RevertConfigDeleteAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a DeleteAll.
	// This requires all provided fields to be equal to the response.
	// A filtered DeleteAll will use GetAll with filter to find things to delete.
	PartialEqFilter []*RevertConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
}

func (x *RevertConfigDeleteAllRequest) Reset() {
	*x = RevertConfigDeleteAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevertConfigDeleteAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevertConfigDeleteAllRequest) ProtoMessage() {}

func (x *RevertConfigDeleteAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevertConfigDeleteAllRequest.ProtoReflect.Descriptor instead.
func (*RevertConfigDeleteAllRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{113}
}

func (x *RevertConfigDeleteAllRequest) GetPartialEqFilter() []*RevertConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

type RevertConfigDeleteAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This describes the class of delete error.
	// A DeleteAllResponse is only sent when there is an error.
	Type fmp.DeleteError `protobuf:"varint,1,opt,name=type,proto3,enum=fmp.DeleteError" json:"type,omitempty"`
	// This indicates the error message from the delete failure.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// This is the key of the RevertConfig instance that failed to be deleted.
	Key *workspace_v1.WorkspaceKey `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp when the key was being deleted.
	Time *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *RevertConfigDeleteAllResponse) Reset() {
	*x = RevertConfigDeleteAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevertConfigDeleteAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevertConfigDeleteAllResponse) ProtoMessage() {}

func (x *RevertConfigDeleteAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevertConfigDeleteAllResponse.ProtoReflect.Descriptor instead.
func (*RevertConfigDeleteAllResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{114}
}

func (x *RevertConfigDeleteAllResponse) GetType() fmp.DeleteError {
	if x != nil {
		return x.Type
	}
	return fmp.DeleteError(0)
}

func (x *RevertConfigDeleteAllResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *RevertConfigDeleteAllResponse) GetKey() *workspace_v1.WorkspaceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *RevertConfigDeleteAllResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type UpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a Update instance to retrieve.
	// This value must be populated.
	Key *UpdateKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *UpdateRequest) Reset() {
	*x = UpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRequest) ProtoMessage() {}

func (x *UpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRequest.ProtoReflect.Descriptor instead.
func (*UpdateRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{115}
}

func (x *UpdateRequest) GetKey() *UpdateKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *UpdateRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type UpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *Update `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// Update instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *UpdateResponse) Reset() {
	*x = UpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResponse) ProtoMessage() {}

func (x *UpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResponse.ProtoReflect.Descriptor instead.
func (*UpdateResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{116}
}

func (x *UpdateResponse) GetValue() *Update {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *UpdateResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type UpdateSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*UpdateKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *UpdateSomeRequest) Reset() {
	*x = UpdateSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSomeRequest) ProtoMessage() {}

func (x *UpdateSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSomeRequest.ProtoReflect.Descriptor instead.
func (*UpdateSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{117}
}

func (x *UpdateSomeRequest) GetKeys() []*UpdateKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *UpdateSomeRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type UpdateSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *Update `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Time  *timestamppb.Timestamp  `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *UpdateSomeResponse) Reset() {
	*x = UpdateSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSomeResponse) ProtoMessage() {}

func (x *UpdateSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSomeResponse.ProtoReflect.Descriptor instead.
func (*UpdateSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{118}
}

func (x *UpdateSomeResponse) GetValue() *Update {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *UpdateSomeResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *UpdateSomeResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type UpdateStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*Update `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each Update at end.
	//   - Each Update response is fully-specified (all fields set).
	//   - start: Returns the state of each Update at start, followed by updates until now.
	//   - Each Update response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each Update at start, followed by updates
	//     until end.
	//   - Each Update response at start is fully-specified, but updates until end may
	//     be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *UpdateStreamRequest) Reset() {
	*x = UpdateStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStreamRequest) ProtoMessage() {}

func (x *UpdateStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStreamRequest.ProtoReflect.Descriptor instead.
func (*UpdateStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{119}
}

func (x *UpdateStreamRequest) GetPartialEqFilter() []*Update {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *UpdateStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type UpdateStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *Update `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this Update's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the Update value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *UpdateStreamResponse) Reset() {
	*x = UpdateStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStreamResponse) ProtoMessage() {}

func (x *UpdateStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStreamResponse.ProtoReflect.Descriptor instead.
func (*UpdateStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{120}
}

func (x *UpdateStreamResponse) GetValue() *Update {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *UpdateStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *UpdateStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation(0)
}

type UpdateBatchedStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*Update `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each Update at end.
	//   - Each Update response is fully-specified (all fields set).
	//   - start: Returns the state of each Update at start, followed by updates until now.
	//   - Each Update response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each Update at start, followed by updates
	//     until end.
	//   - Each Update response at start is fully-specified, but updates until end may
	//     be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	// MaxMessages limits the maximum number of messages that can be contained in one batch.
	// MaxMessages is required to be at least 1.
	// The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
	// INTERNAL_BATCH_LIMIT is set based on the maximum message size.
	MaxMessages *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=max_messages,json=maxMessages,proto3" json:"max_messages,omitempty"`
}

func (x *UpdateBatchedStreamRequest) Reset() {
	*x = UpdateBatchedStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBatchedStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBatchedStreamRequest) ProtoMessage() {}

func (x *UpdateBatchedStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBatchedStreamRequest.ProtoReflect.Descriptor instead.
func (*UpdateBatchedStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{121}
}

func (x *UpdateBatchedStreamRequest) GetPartialEqFilter() []*Update {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *UpdateBatchedStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *UpdateBatchedStreamRequest) GetMaxMessages() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxMessages
	}
	return nil
}

type UpdateBatchedStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Values are the values deemed relevant to the initiating request.
	// The length of this structure is guaranteed to be between (inclusive) 1 and
	// min(req.max_messages, INTERNAL_BATCH_LIMIT).
	Responses []*UpdateStreamResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *UpdateBatchedStreamResponse) Reset() {
	*x = UpdateBatchedStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBatchedStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBatchedStreamResponse) ProtoMessage() {}

func (x *UpdateBatchedStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBatchedStreamResponse.ProtoReflect.Descriptor instead.
func (*UpdateBatchedStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{122}
}

func (x *UpdateBatchedStreamResponse) GetResponses() []*UpdateStreamResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type UpdateConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a UpdateConfig instance to retrieve.
	// This value must be populated.
	Key *UpdateKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *UpdateConfigRequest) Reset() {
	*x = UpdateConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConfigRequest) ProtoMessage() {}

func (x *UpdateConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateConfigRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{123}
}

func (x *UpdateConfigRequest) GetKey() *UpdateKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *UpdateConfigRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type UpdateConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *UpdateConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// UpdateConfig instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *UpdateConfigResponse) Reset() {
	*x = UpdateConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConfigResponse) ProtoMessage() {}

func (x *UpdateConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConfigResponse.ProtoReflect.Descriptor instead.
func (*UpdateConfigResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{124}
}

func (x *UpdateConfigResponse) GetValue() *UpdateConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *UpdateConfigResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type UpdateConfigSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*UpdateKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *UpdateConfigSomeRequest) Reset() {
	*x = UpdateConfigSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConfigSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConfigSomeRequest) ProtoMessage() {}

func (x *UpdateConfigSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConfigSomeRequest.ProtoReflect.Descriptor instead.
func (*UpdateConfigSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{125}
}

func (x *UpdateConfigSomeRequest) GetKeys() []*UpdateKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *UpdateConfigSomeRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type UpdateConfigSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *UpdateConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Time  *timestamppb.Timestamp  `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *UpdateConfigSomeResponse) Reset() {
	*x = UpdateConfigSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConfigSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConfigSomeResponse) ProtoMessage() {}

func (x *UpdateConfigSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConfigSomeResponse.ProtoReflect.Descriptor instead.
func (*UpdateConfigSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{126}
}

func (x *UpdateConfigSomeResponse) GetValue() *UpdateConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *UpdateConfigSomeResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *UpdateConfigSomeResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type UpdateConfigStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*UpdateConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each UpdateConfig at end.
	//   - Each UpdateConfig response is fully-specified (all fields set).
	//   - start: Returns the state of each UpdateConfig at start, followed by updates until now.
	//   - Each UpdateConfig response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each UpdateConfig at start, followed by updates
	//     until end.
	//   - Each UpdateConfig response at start is fully-specified, but updates until end may
	//     be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *UpdateConfigStreamRequest) Reset() {
	*x = UpdateConfigStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConfigStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConfigStreamRequest) ProtoMessage() {}

func (x *UpdateConfigStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConfigStreamRequest.ProtoReflect.Descriptor instead.
func (*UpdateConfigStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{127}
}

func (x *UpdateConfigStreamRequest) GetPartialEqFilter() []*UpdateConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *UpdateConfigStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type UpdateConfigStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *UpdateConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this UpdateConfig's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the UpdateConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *UpdateConfigStreamResponse) Reset() {
	*x = UpdateConfigStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConfigStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConfigStreamResponse) ProtoMessage() {}

func (x *UpdateConfigStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConfigStreamResponse.ProtoReflect.Descriptor instead.
func (*UpdateConfigStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{128}
}

func (x *UpdateConfigStreamResponse) GetValue() *UpdateConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *UpdateConfigStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *UpdateConfigStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation(0)
}

type UpdateConfigBatchedStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*UpdateConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each UpdateConfig at end.
	//   - Each UpdateConfig response is fully-specified (all fields set).
	//   - start: Returns the state of each UpdateConfig at start, followed by updates until now.
	//   - Each UpdateConfig response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each UpdateConfig at start, followed by updates
	//     until end.
	//   - Each UpdateConfig response at start is fully-specified, but updates until end may
	//     be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	// MaxMessages limits the maximum number of messages that can be contained in one batch.
	// MaxMessages is required to be at least 1.
	// The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
	// INTERNAL_BATCH_LIMIT is set based on the maximum message size.
	MaxMessages *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=max_messages,json=maxMessages,proto3" json:"max_messages,omitempty"`
}

func (x *UpdateConfigBatchedStreamRequest) Reset() {
	*x = UpdateConfigBatchedStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConfigBatchedStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConfigBatchedStreamRequest) ProtoMessage() {}

func (x *UpdateConfigBatchedStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConfigBatchedStreamRequest.ProtoReflect.Descriptor instead.
func (*UpdateConfigBatchedStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{129}
}

func (x *UpdateConfigBatchedStreamRequest) GetPartialEqFilter() []*UpdateConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *UpdateConfigBatchedStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *UpdateConfigBatchedStreamRequest) GetMaxMessages() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxMessages
	}
	return nil
}

type UpdateConfigBatchedStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Values are the values deemed relevant to the initiating request.
	// The length of this structure is guaranteed to be between (inclusive) 1 and
	// min(req.max_messages, INTERNAL_BATCH_LIMIT).
	Responses []*UpdateConfigStreamResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *UpdateConfigBatchedStreamResponse) Reset() {
	*x = UpdateConfigBatchedStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConfigBatchedStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConfigBatchedStreamResponse) ProtoMessage() {}

func (x *UpdateConfigBatchedStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConfigBatchedStreamResponse.ProtoReflect.Descriptor instead.
func (*UpdateConfigBatchedStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{130}
}

func (x *UpdateConfigBatchedStreamResponse) GetResponses() []*UpdateConfigStreamResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type UpdateConfigSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UpdateConfig carries the value to set into the datastore.
	// See the documentation on the UpdateConfig struct for which fields are required.
	Value *UpdateConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UpdateConfigSetRequest) Reset() {
	*x = UpdateConfigSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConfigSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConfigSetRequest) ProtoMessage() {}

func (x *UpdateConfigSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConfigSetRequest.ProtoReflect.Descriptor instead.
func (*UpdateConfigSetRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{131}
}

func (x *UpdateConfigSetRequest) GetValue() *UpdateConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

type UpdateConfigSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value carries all the values given in the UpdateConfigSetRequest as well
	// as any server-generated values.
	Value *UpdateConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//   - it is after the time the request was received
	//   - a time-ranged query with StartTime==CreatedAt will include this instance.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *UpdateConfigSetResponse) Reset() {
	*x = UpdateConfigSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConfigSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConfigSetResponse) ProtoMessage() {}

func (x *UpdateConfigSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConfigSetResponse.ProtoReflect.Descriptor instead.
func (*UpdateConfigSetResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{132}
}

func (x *UpdateConfigSetResponse) GetValue() *UpdateConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *UpdateConfigSetResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type UpdateConfigSetSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value contains a list of UpdateConfig values to write.
	// It is possible to provide more values than can fit within either:
	//   - the maxiumum send size of the client
	//   - the maximum receive size of the server
	//
	// If this error occurs you must reduce the number of values sent.
	// See gRPC "maximum message size" documentation for more information.
	Values []*UpdateConfig `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *UpdateConfigSetSomeRequest) Reset() {
	*x = UpdateConfigSetSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConfigSetSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConfigSetSomeRequest) ProtoMessage() {}

func (x *UpdateConfigSetSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConfigSetSomeRequest.ProtoReflect.Descriptor instead.
func (*UpdateConfigSetSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{133}
}

func (x *UpdateConfigSetSomeRequest) GetValues() []*UpdateConfig {
	if x != nil {
		return x.Values
	}
	return nil
}

type UpdateConfigSetSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *UpdateKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Error string     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *UpdateConfigSetSomeResponse) Reset() {
	*x = UpdateConfigSetSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConfigSetSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConfigSetSomeResponse) ProtoMessage() {}

func (x *UpdateConfigSetSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConfigSetSomeResponse.ProtoReflect.Descriptor instead.
func (*UpdateConfigSetSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{134}
}

func (x *UpdateConfigSetSomeResponse) GetKey() *UpdateKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *UpdateConfigSetSomeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type UpdateConfigDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key indicates which UpdateConfig instance to remove.
	// This field must always be set.
	Key *UpdateKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *UpdateConfigDeleteRequest) Reset() {
	*x = UpdateConfigDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConfigDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConfigDeleteRequest) ProtoMessage() {}

func (x *UpdateConfigDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConfigDeleteRequest.ProtoReflect.Descriptor instead.
func (*UpdateConfigDeleteRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{135}
}

func (x *UpdateConfigDeleteRequest) GetKey() *UpdateKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type UpdateConfigDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key echoes back the key of the deleted UpdateConfig instance.
	Key *UpdateKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//   - it is after the time the request was received
	//   - a time-ranged query with StartTime==DeletedAt will not include this instance.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *UpdateConfigDeleteResponse) Reset() {
	*x = UpdateConfigDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConfigDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConfigDeleteResponse) ProtoMessage() {}

func (x *UpdateConfigDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConfigDeleteResponse.ProtoReflect.Descriptor instead.
func (*UpdateConfigDeleteResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{136}
}

func (x *UpdateConfigDeleteResponse) GetKey() *UpdateKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *UpdateConfigDeleteResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type UpdateConfigDeleteSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key contains a list of UpdateConfig keys to delete
	Keys []*UpdateKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *UpdateConfigDeleteSomeRequest) Reset() {
	*x = UpdateConfigDeleteSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConfigDeleteSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConfigDeleteSomeRequest) ProtoMessage() {}

func (x *UpdateConfigDeleteSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConfigDeleteSomeRequest.ProtoReflect.Descriptor instead.
func (*UpdateConfigDeleteSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{137}
}

func (x *UpdateConfigDeleteSomeRequest) GetKeys() []*UpdateKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

// UpdateConfigDeleteSomeResponse is only sent when there is an error.
type UpdateConfigDeleteSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *UpdateKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Error string     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *UpdateConfigDeleteSomeResponse) Reset() {
	*x = UpdateConfigDeleteSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConfigDeleteSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConfigDeleteSomeResponse) ProtoMessage() {}

func (x *UpdateConfigDeleteSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConfigDeleteSomeResponse.ProtoReflect.Descriptor instead.
func (*UpdateConfigDeleteSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{138}
}

func (x *UpdateConfigDeleteSomeResponse) GetKey() *UpdateKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *UpdateConfigDeleteSomeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type UpdateConfigDeleteAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a DeleteAll.
	// This requires all provided fields to be equal to the response.
	// A filtered DeleteAll will use GetAll with filter to find things to delete.
	PartialEqFilter []*UpdateConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
}

func (x *UpdateConfigDeleteAllRequest) Reset() {
	*x = UpdateConfigDeleteAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConfigDeleteAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConfigDeleteAllRequest) ProtoMessage() {}

func (x *UpdateConfigDeleteAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConfigDeleteAllRequest.ProtoReflect.Descriptor instead.
func (*UpdateConfigDeleteAllRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{139}
}

func (x *UpdateConfigDeleteAllRequest) GetPartialEqFilter() []*UpdateConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

type UpdateConfigDeleteAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This describes the class of delete error.
	// A DeleteAllResponse is only sent when there is an error.
	Type fmp.DeleteError `protobuf:"varint,1,opt,name=type,proto3,enum=fmp.DeleteError" json:"type,omitempty"`
	// This indicates the error message from the delete failure.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// This is the key of the UpdateConfig instance that failed to be deleted.
	Key *UpdateKey `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp when the key was being deleted.
	Time *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *UpdateConfigDeleteAllResponse) Reset() {
	*x = UpdateConfigDeleteAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConfigDeleteAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConfigDeleteAllResponse) ProtoMessage() {}

func (x *UpdateConfigDeleteAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConfigDeleteAllResponse.ProtoReflect.Descriptor instead.
func (*UpdateConfigDeleteAllResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{140}
}

func (x *UpdateConfigDeleteAllResponse) GetType() fmp.DeleteError {
	if x != nil {
		return x.Type
	}
	return fmp.DeleteError(0)
}

func (x *UpdateConfigDeleteAllResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *UpdateConfigDeleteAllResponse) GetKey() *UpdateKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *UpdateConfigDeleteAllResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type UpdateSyncConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a UpdateSyncConfig instance to retrieve.
	// This value must be populated.
	Key *workspace_v1.WorkspaceKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *UpdateSyncConfigRequest) Reset() {
	*x = UpdateSyncConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSyncConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSyncConfigRequest) ProtoMessage() {}

func (x *UpdateSyncConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSyncConfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateSyncConfigRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{141}
}

func (x *UpdateSyncConfigRequest) GetKey() *workspace_v1.WorkspaceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *UpdateSyncConfigRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type UpdateSyncConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *UpdateSyncConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// UpdateSyncConfig instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *UpdateSyncConfigResponse) Reset() {
	*x = UpdateSyncConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSyncConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSyncConfigResponse) ProtoMessage() {}

func (x *UpdateSyncConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSyncConfigResponse.ProtoReflect.Descriptor instead.
func (*UpdateSyncConfigResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{142}
}

func (x *UpdateSyncConfigResponse) GetValue() *UpdateSyncConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *UpdateSyncConfigResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type UpdateSyncConfigSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*workspace_v1.WorkspaceKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *UpdateSyncConfigSomeRequest) Reset() {
	*x = UpdateSyncConfigSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSyncConfigSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSyncConfigSomeRequest) ProtoMessage() {}

func (x *UpdateSyncConfigSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSyncConfigSomeRequest.ProtoReflect.Descriptor instead.
func (*UpdateSyncConfigSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{143}
}

func (x *UpdateSyncConfigSomeRequest) GetKeys() []*workspace_v1.WorkspaceKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *UpdateSyncConfigSomeRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type UpdateSyncConfigSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *UpdateSyncConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Time  *timestamppb.Timestamp  `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *UpdateSyncConfigSomeResponse) Reset() {
	*x = UpdateSyncConfigSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSyncConfigSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSyncConfigSomeResponse) ProtoMessage() {}

func (x *UpdateSyncConfigSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSyncConfigSomeResponse.ProtoReflect.Descriptor instead.
func (*UpdateSyncConfigSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{144}
}

func (x *UpdateSyncConfigSomeResponse) GetValue() *UpdateSyncConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *UpdateSyncConfigSomeResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *UpdateSyncConfigSomeResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type UpdateSyncConfigStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*UpdateSyncConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each UpdateSyncConfig at end.
	//   - Each UpdateSyncConfig response is fully-specified (all fields set).
	//   - start: Returns the state of each UpdateSyncConfig at start, followed by updates until now.
	//   - Each UpdateSyncConfig response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each UpdateSyncConfig at start, followed by updates
	//     until end.
	//   - Each UpdateSyncConfig response at start is fully-specified, but updates until end may
	//     be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *UpdateSyncConfigStreamRequest) Reset() {
	*x = UpdateSyncConfigStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSyncConfigStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSyncConfigStreamRequest) ProtoMessage() {}

func (x *UpdateSyncConfigStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSyncConfigStreamRequest.ProtoReflect.Descriptor instead.
func (*UpdateSyncConfigStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{145}
}

func (x *UpdateSyncConfigStreamRequest) GetPartialEqFilter() []*UpdateSyncConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *UpdateSyncConfigStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type UpdateSyncConfigStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *UpdateSyncConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this UpdateSyncConfig's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the UpdateSyncConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *UpdateSyncConfigStreamResponse) Reset() {
	*x = UpdateSyncConfigStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSyncConfigStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSyncConfigStreamResponse) ProtoMessage() {}

func (x *UpdateSyncConfigStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSyncConfigStreamResponse.ProtoReflect.Descriptor instead.
func (*UpdateSyncConfigStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{146}
}

func (x *UpdateSyncConfigStreamResponse) GetValue() *UpdateSyncConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *UpdateSyncConfigStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *UpdateSyncConfigStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation(0)
}

type UpdateSyncConfigBatchedStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*UpdateSyncConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each UpdateSyncConfig at end.
	//   - Each UpdateSyncConfig response is fully-specified (all fields set).
	//   - start: Returns the state of each UpdateSyncConfig at start, followed by updates until now.
	//   - Each UpdateSyncConfig response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each UpdateSyncConfig at start, followed by updates
	//     until end.
	//   - Each UpdateSyncConfig response at start is fully-specified, but updates until end may
	//     be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	// MaxMessages limits the maximum number of messages that can be contained in one batch.
	// MaxMessages is required to be at least 1.
	// The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
	// INTERNAL_BATCH_LIMIT is set based on the maximum message size.
	MaxMessages *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=max_messages,json=maxMessages,proto3" json:"max_messages,omitempty"`
}

func (x *UpdateSyncConfigBatchedStreamRequest) Reset() {
	*x = UpdateSyncConfigBatchedStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSyncConfigBatchedStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSyncConfigBatchedStreamRequest) ProtoMessage() {}

func (x *UpdateSyncConfigBatchedStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSyncConfigBatchedStreamRequest.ProtoReflect.Descriptor instead.
func (*UpdateSyncConfigBatchedStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{147}
}

func (x *UpdateSyncConfigBatchedStreamRequest) GetPartialEqFilter() []*UpdateSyncConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *UpdateSyncConfigBatchedStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *UpdateSyncConfigBatchedStreamRequest) GetMaxMessages() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxMessages
	}
	return nil
}

type UpdateSyncConfigBatchedStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Values are the values deemed relevant to the initiating request.
	// The length of this structure is guaranteed to be between (inclusive) 1 and
	// min(req.max_messages, INTERNAL_BATCH_LIMIT).
	Responses []*UpdateSyncConfigStreamResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *UpdateSyncConfigBatchedStreamResponse) Reset() {
	*x = UpdateSyncConfigBatchedStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSyncConfigBatchedStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSyncConfigBatchedStreamResponse) ProtoMessage() {}

func (x *UpdateSyncConfigBatchedStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSyncConfigBatchedStreamResponse.ProtoReflect.Descriptor instead.
func (*UpdateSyncConfigBatchedStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{148}
}

func (x *UpdateSyncConfigBatchedStreamResponse) GetResponses() []*UpdateSyncConfigStreamResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type UpdateSyncConfigSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UpdateSyncConfig carries the value to set into the datastore.
	// See the documentation on the UpdateSyncConfig struct for which fields are required.
	Value *UpdateSyncConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UpdateSyncConfigSetRequest) Reset() {
	*x = UpdateSyncConfigSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSyncConfigSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSyncConfigSetRequest) ProtoMessage() {}

func (x *UpdateSyncConfigSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSyncConfigSetRequest.ProtoReflect.Descriptor instead.
func (*UpdateSyncConfigSetRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{149}
}

func (x *UpdateSyncConfigSetRequest) GetValue() *UpdateSyncConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

type UpdateSyncConfigSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value carries all the values given in the UpdateSyncConfigSetRequest as well
	// as any server-generated values.
	Value *UpdateSyncConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//   - it is after the time the request was received
	//   - a time-ranged query with StartTime==CreatedAt will include this instance.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *UpdateSyncConfigSetResponse) Reset() {
	*x = UpdateSyncConfigSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSyncConfigSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSyncConfigSetResponse) ProtoMessage() {}

func (x *UpdateSyncConfigSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSyncConfigSetResponse.ProtoReflect.Descriptor instead.
func (*UpdateSyncConfigSetResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{150}
}

func (x *UpdateSyncConfigSetResponse) GetValue() *UpdateSyncConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *UpdateSyncConfigSetResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type UpdateSyncConfigSetSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value contains a list of UpdateSyncConfig values to write.
	// It is possible to provide more values than can fit within either:
	//   - the maxiumum send size of the client
	//   - the maximum receive size of the server
	//
	// If this error occurs you must reduce the number of values sent.
	// See gRPC "maximum message size" documentation for more information.
	Values []*UpdateSyncConfig `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *UpdateSyncConfigSetSomeRequest) Reset() {
	*x = UpdateSyncConfigSetSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSyncConfigSetSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSyncConfigSetSomeRequest) ProtoMessage() {}

func (x *UpdateSyncConfigSetSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSyncConfigSetSomeRequest.ProtoReflect.Descriptor instead.
func (*UpdateSyncConfigSetSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{151}
}

func (x *UpdateSyncConfigSetSomeRequest) GetValues() []*UpdateSyncConfig {
	if x != nil {
		return x.Values
	}
	return nil
}

type UpdateSyncConfigSetSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *workspace_v1.WorkspaceKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Error string                     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *UpdateSyncConfigSetSomeResponse) Reset() {
	*x = UpdateSyncConfigSetSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSyncConfigSetSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSyncConfigSetSomeResponse) ProtoMessage() {}

func (x *UpdateSyncConfigSetSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSyncConfigSetSomeResponse.ProtoReflect.Descriptor instead.
func (*UpdateSyncConfigSetSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{152}
}

func (x *UpdateSyncConfigSetSomeResponse) GetKey() *workspace_v1.WorkspaceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *UpdateSyncConfigSetSomeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type UpdateSyncConfigDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key indicates which UpdateSyncConfig instance to remove.
	// This field must always be set.
	Key *workspace_v1.WorkspaceKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *UpdateSyncConfigDeleteRequest) Reset() {
	*x = UpdateSyncConfigDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSyncConfigDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSyncConfigDeleteRequest) ProtoMessage() {}

func (x *UpdateSyncConfigDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSyncConfigDeleteRequest.ProtoReflect.Descriptor instead.
func (*UpdateSyncConfigDeleteRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{153}
}

func (x *UpdateSyncConfigDeleteRequest) GetKey() *workspace_v1.WorkspaceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type UpdateSyncConfigDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key echoes back the key of the deleted UpdateSyncConfig instance.
	Key *workspace_v1.WorkspaceKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//   - it is after the time the request was received
	//   - a time-ranged query with StartTime==DeletedAt will not include this instance.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *UpdateSyncConfigDeleteResponse) Reset() {
	*x = UpdateSyncConfigDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSyncConfigDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSyncConfigDeleteResponse) ProtoMessage() {}

func (x *UpdateSyncConfigDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSyncConfigDeleteResponse.ProtoReflect.Descriptor instead.
func (*UpdateSyncConfigDeleteResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{154}
}

func (x *UpdateSyncConfigDeleteResponse) GetKey() *workspace_v1.WorkspaceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *UpdateSyncConfigDeleteResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type UpdateSyncConfigDeleteSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key contains a list of UpdateSyncConfig keys to delete
	Keys []*workspace_v1.WorkspaceKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *UpdateSyncConfigDeleteSomeRequest) Reset() {
	*x = UpdateSyncConfigDeleteSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSyncConfigDeleteSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSyncConfigDeleteSomeRequest) ProtoMessage() {}

func (x *UpdateSyncConfigDeleteSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSyncConfigDeleteSomeRequest.ProtoReflect.Descriptor instead.
func (*UpdateSyncConfigDeleteSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{155}
}

func (x *UpdateSyncConfigDeleteSomeRequest) GetKeys() []*workspace_v1.WorkspaceKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

// UpdateSyncConfigDeleteSomeResponse is only sent when there is an error.
type UpdateSyncConfigDeleteSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *workspace_v1.WorkspaceKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Error string                     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *UpdateSyncConfigDeleteSomeResponse) Reset() {
	*x = UpdateSyncConfigDeleteSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSyncConfigDeleteSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSyncConfigDeleteSomeResponse) ProtoMessage() {}

func (x *UpdateSyncConfigDeleteSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSyncConfigDeleteSomeResponse.ProtoReflect.Descriptor instead.
func (*UpdateSyncConfigDeleteSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{156}
}

func (x *UpdateSyncConfigDeleteSomeResponse) GetKey() *workspace_v1.WorkspaceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *UpdateSyncConfigDeleteSomeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type UpdateSyncConfigDeleteAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a DeleteAll.
	// This requires all provided fields to be equal to the response.
	// A filtered DeleteAll will use GetAll with filter to find things to delete.
	PartialEqFilter []*UpdateSyncConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
}

func (x *UpdateSyncConfigDeleteAllRequest) Reset() {
	*x = UpdateSyncConfigDeleteAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSyncConfigDeleteAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSyncConfigDeleteAllRequest) ProtoMessage() {}

func (x *UpdateSyncConfigDeleteAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSyncConfigDeleteAllRequest.ProtoReflect.Descriptor instead.
func (*UpdateSyncConfigDeleteAllRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{157}
}

func (x *UpdateSyncConfigDeleteAllRequest) GetPartialEqFilter() []*UpdateSyncConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

type UpdateSyncConfigDeleteAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This describes the class of delete error.
	// A DeleteAllResponse is only sent when there is an error.
	Type fmp.DeleteError `protobuf:"varint,1,opt,name=type,proto3,enum=fmp.DeleteError" json:"type,omitempty"`
	// This indicates the error message from the delete failure.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// This is the key of the UpdateSyncConfig instance that failed to be deleted.
	Key *workspace_v1.WorkspaceKey `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp when the key was being deleted.
	Time *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *UpdateSyncConfigDeleteAllResponse) Reset() {
	*x = UpdateSyncConfigDeleteAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSyncConfigDeleteAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSyncConfigDeleteAllResponse) ProtoMessage() {}

func (x *UpdateSyncConfigDeleteAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_services_gen_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSyncConfigDeleteAllResponse.ProtoReflect.Descriptor instead.
func (*UpdateSyncConfigDeleteAllResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP(), []int{158}
}

func (x *UpdateSyncConfigDeleteAllResponse) GetType() fmp.DeleteError {
	if x != nil {
		return x.Type
	}
	return fmp.DeleteError(0)
}

func (x *UpdateSyncConfigDeleteAllResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *UpdateSyncConfigDeleteAllResponse) GetKey() *workspace_v1.WorkspaceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *UpdateSyncConfigDeleteAllResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

var File_arista_studio_topology_v1_services_gen_proto protoreflect.FileDescriptor

var file_arista_studio_topology_v1_services_gen_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x67, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x2f, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x28, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x66, 0x6d,
	0x70, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x23, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa7, 0x01, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x7d, 0x0a, 0x13, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x85,
	0x01, 0x0a, 0x14, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x2e, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xbd, 0x01, 0x0a,
	0x18, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x9d, 0x01, 0x0a,
	0x19, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x11, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xc0, 0x01, 0x0a,
	0x1a, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0xe5, 0x01, 0x0a, 0x20, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x78, 0x0a, 0x21, 0x44, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x09,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x22, 0x83, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x36, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b,
	0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x1d,
	0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a,
	0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65,
	0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xc9, 0x01, 0x0a, 0x1e, 0x44, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0xa9, 0x01, 0x0a, 0x1f, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x59, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0xcc, 0x01, 0x0a, 0x20, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xf1,
	0x01, 0x0a, 0x26, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x59, 0x0a, 0x11, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x27, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59,
	0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x63, 0x0a, 0x1c, 0x44, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x94,
	0x01, 0x0a, 0x1d, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x69, 0x0a, 0x20, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x22, 0x71, 0x0a, 0x21, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x59, 0x0a, 0x1f, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x8a,
	0x01, 0x0a, 0x20, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x5f, 0x0a, 0x23, 0x44,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x74, 0x0a, 0x24,
	0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x7f, 0x0a, 0x22, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x59, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x22, 0xe7, 0x01, 0x0a, 0x23, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x66, 0x6d, 0x70, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x82, 0x01,
	0x0a, 0x18, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x1c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12,
	0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0xc7, 0x01, 0x0a, 0x1d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x1e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x11,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0xca, 0x01, 0x0a, 0x1f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0xef, 0x01, 0x0a, 0x25, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x11, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x26, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a,
	0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x61, 0x0a, 0x1b, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x1c, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0x67, 0x0a, 0x1f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x44, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x70, 0x0a, 0x20, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74,
	0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x58, 0x0a, 0x1e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x22, 0x89, 0x01, 0x0a, 0x1f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x22, 0x5e, 0x0a, 0x22, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73,
	0x22, 0x73, 0x0a, 0x23, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x7d, 0x0a, 0x21, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x11, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x22, 0xe6, 0x01, 0x0a, 0x22, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x66, 0x6d, 0x70, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x7c, 0x0a,
	0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x13,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0x82, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79,
	0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xbb, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x52, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0xbe, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0xe3, 0x01, 0x0a, 0x1f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6d, 0x61,
	0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x76, 0x0a, 0x20, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a,
	0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x22, 0x8d, 0x01, 0x0a, 0x1b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3e, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0x95, 0x01, 0x0a, 0x1c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x45, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x1f, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a,
	0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12,
	0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0xcd, 0x01, 0x0a, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0xad, 0x01, 0x0a, 0x21, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0xd0, 0x01, 0x0a, 0x22, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0xf5, 0x01, 0x0a, 0x28, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x5b, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x6d, 0x61, 0x78,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6d,
	0x61, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x29, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x67, 0x0a, 0x1e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x98,
	0x01, 0x0a, 0x1f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x45, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x6d, 0x0a, 0x22, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x47, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x7b, 0x0a, 0x23, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3e, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x63, 0x0a, 0x21, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x94, 0x01, 0x0a, 0x22, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3e, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0x69, 0x0a, 0x25, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x04, 0x6b, 0x65,
	0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x7e, 0x0a, 0x26,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4b, 0x65,
	0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x83, 0x01, 0x0a,
	0x24, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x22, 0xf1, 0x01, 0x0a, 0x25, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x66, 0x6d, 0x70,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4b, 0x65,
	0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x78, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x22, 0x7b, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x7e, 0x0a,
	0x12, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x2e, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xb3, 0x01,
	0x0a, 0x13, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x11,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x0f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xb6, 0x01, 0x0a, 0x15, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0xdb, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x4e, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x3f, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x22, 0x6e, 0x0a, 0x1c, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4e, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73,
	0x22, 0x7e, 0x0a, 0x14, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x22, 0x87, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x18, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79,
	0x73, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0xbf, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x54, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xe7, 0x01, 0x0a, 0x21, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x54, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x22, 0x7a, 0x0a, 0x22, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x09, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73,
	0x22, 0x59, 0x0a, 0x17, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x18,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x5f, 0x0a, 0x1b, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x6c, 0x0a, 0x1c, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x54, 0x0a, 0x1a, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x85, 0x01,
	0x0a, 0x1b, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x5a, 0x0a, 0x1e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79,
	0x73, 0x22, 0x6f, 0x0a, 0x1f, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x75, 0x0a, 0x1d, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65,
	0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xe2, 0x01, 0x0a, 0x1e, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x66, 0x6d, 0x70,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x7a,
	0x0a, 0x13, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x14, 0x52,
	0x65, 0x76, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x76, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35,
	0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52,
	0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xbd, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x76, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65,
	0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xe5, 0x01, 0x0a, 0x20, 0x52, 0x65, 0x76,
	0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a,
	0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x3f, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x22, 0x78, 0x0a, 0x21, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x57, 0x0a, 0x16, 0x52, 0x65,
	0x76, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x5d,
	0x0a, 0x1a, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65,
	0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x68, 0x0a,
	0x1b, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74,
	0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x50, 0x0a, 0x19, 0x52, 0x65, 0x76, 0x65, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x81, 0x01, 0x0a, 0x1a, 0x52, 0x65,
	0x76, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x56, 0x0a,
	0x1d, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35,
	0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52,
	0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x6b, 0x0a, 0x1e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x73, 0x0a, 0x1c, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x53, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45,
	0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xde, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x76, 0x65,
	0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x77, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0x79, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x7d, 0x0a, 0x11,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x38, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x12,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0x91, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xd9, 0x01, 0x0a, 0x1a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x11, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x6c, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x22, 0x7d, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x17,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79,
	0x73, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0xbd, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0x9d, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x53, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0xc0, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xe5, 0x01, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x11, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x6d,
	0x61, 0x78, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x78, 0x0a, 0x21,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x53, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x57, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x88, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x5d, 0x0a, 0x1a, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x6b, 0x0a, 0x1b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x53, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x84, 0x01, 0x0a, 0x1a,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0x59, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x6e, 0x0a,
	0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x36, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x73, 0x0a,
	0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a,
	0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x22, 0xe1, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x36,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x7e, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x33, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4b, 0x65,
	0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x2e, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xc5, 0x01,
	0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xc8, 0x01,
	0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xed, 0x01, 0x0a, 0x24, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x57, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x78,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x25, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x57, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x5f, 0x0a, 0x1a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x90, 0x01, 0x0a,
	0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79,
	0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0x65, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x43, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x6c, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x54, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79,
	0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x85, 0x01, 0x0a, 0x1e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0x5a, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x6f,
	0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x7b, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65,
	0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xe2, 0x01, 0x0a,
	0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x32, 0xe8, 0x07, 0x0a, 0x13, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x69, 0x0a, 0x06, 0x47, 0x65, 0x74,
	0x4f, 0x6e, 0x65, 0x12, 0x2e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x12,
	0x32, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x77, 0x0a, 0x06, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x12, 0x34, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x30, 0x01, 0x12, 0x7a, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x12, 0x34, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12,
	0x68, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x34, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x0d, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x34, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x8c, 0x01, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x3b, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x8f, 0x01, 0x0a, 0x10, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12,
	0x3b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0xed, 0x0d, 0x0a,
	0x19, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x75, 0x0a, 0x06, 0x47, 0x65,
	0x74, 0x4f, 0x6e, 0x65, 0x12, 0x34, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x80, 0x01, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x38, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x30, 0x01, 0x12, 0x83, 0x01, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12,
	0x3a, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x86, 0x01, 0x0a, 0x09, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x3a, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x30, 0x01, 0x12, 0x6e, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x3a,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x12, 0x3a, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x78, 0x0a, 0x03, 0x53,
	0x65, 0x74, 0x12, 0x37, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d,
	0x65, 0x12, 0x3b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74,
	0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x81,
	0x01, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x3a, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d,
	0x65, 0x12, 0x3e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x30, 0x01, 0x12, 0x8c, 0x01, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x6c, 0x6c, 0x12, 0x3d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x30, 0x01, 0x12, 0x98, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x41, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x9b,
	0x01, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x12, 0x41, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0xd2, 0x0d, 0x0a,
	0x18, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x73, 0x0a, 0x06, 0x47, 0x65, 0x74,
	0x4f, 0x6e, 0x65, 0x12, 0x33, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7e,
	0x0a, 0x07, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x37, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x38, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x81,
	0x01, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x39, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x30, 0x01, 0x12, 0x84, 0x01, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x12, 0x39, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x6d, 0x0a, 0x07, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x12, 0x39, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x39, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12,
	0x76, 0x0a, 0x03, 0x53, 0x65, 0x74, 0x12, 0x36, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x53,
	0x6f, 0x6d, 0x65, 0x12, 0x3a, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74,
	0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x7f,
	0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x39, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x8d, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x3d,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12,
	0x8a, 0x01, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x3c, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x96, 0x01, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x40,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x41, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x99, 0x01, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x40, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30,
	0x01, 0x32, 0xd9, 0x07, 0x0a, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x67, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4f,
	0x6e, 0x65, 0x12, 0x2d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x72, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x31, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x32, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x75, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12,
	0x33, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x78, 0x0a, 0x09,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x33, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x67, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x12, 0x33, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x6f, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x12, 0x33, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01,
	0x12, 0x8a, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x12, 0x3a, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x8d, 0x01,
	0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x12, 0x3a, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0x9f, 0x0e,
	0x0a, 0x1b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x79, 0x0a,
	0x06, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x12, 0x36, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x37, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x07, 0x47, 0x65, 0x74,
	0x53, 0x6f, 0x6d, 0x65, 0x12, 0x3a, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12,
	0x87, 0x01, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x3c, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x8a, 0x01, 0x0a, 0x09, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x3c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x70, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x12, 0x3c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x3c, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x30, 0x01, 0x12, 0x7c, 0x0a, 0x03, 0x53, 0x65, 0x74, 0x12, 0x39, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x8a, 0x01, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x3d, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74,
	0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53,
	0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x85, 0x01,
	0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x3c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x6f, 0x6d, 0x65, 0x12, 0x40, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x90, 0x01, 0x0a, 0x09,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x3f, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x9c,
	0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x12, 0x43, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x9f, 0x01,
	0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x12, 0x43, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x32,
	0x9d, 0x07, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x5f, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x12, 0x29, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x2d,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12,
	0x6d, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x2f, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x70,
	0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x2f, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01,
	0x12, 0x63, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x2f, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x2f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x30, 0x01, 0x12, 0x82, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x12, 0x36, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x85, 0x01, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x36, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x32,
	0xeb, 0x0c, 0x0a, 0x14, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6b, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4f,
	0x6e, 0x65, 0x12, 0x2f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65,
	0x12, 0x33, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x79, 0x0a,
	0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x35, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x7c, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x35, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x69, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x12, 0x35, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x71, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x12, 0x35, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x30, 0x01, 0x12, 0x6e, 0x0a, 0x03, 0x53, 0x65, 0x74, 0x12, 0x32, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x33, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x12,
	0x36, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x30, 0x01, 0x12, 0x77, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x35, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x0a,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x39, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x30, 0x01, 0x12, 0x82, 0x01, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c,
	0x6c, 0x12, 0x38, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x8e, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x3c, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x91, 0x01, 0x0a, 0x10, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x3c,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0xd2, 0x0c,
	0x0a, 0x13, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x69, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x12,
	0x2e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x65,
	0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x65,
	0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x74, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x32, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x33, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x65,
	0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x77, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x12, 0x34, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76,
	0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12,
	0x7a, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x34, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x35, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x76, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x68, 0x0a, 0x07, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x34, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x34, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x6c, 0x0a, 0x03, 0x53, 0x65, 0x74, 0x12, 0x31,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x32, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x76, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65,
	0x12, 0x35, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76,
	0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30,
	0x01, 0x12, 0x75, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x34, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x35, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x76, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x38, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x39, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x76, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x80,
	0x01, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x37, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30,
	0x01, 0x12, 0x8c, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x12, 0x3b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76,
	0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01,
	0x12, 0x8f, 0x01, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x3b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x76, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x30, 0x01, 0x32, 0x8e, 0x07, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x12, 0x28,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x2c,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x6b, 0x0a,
	0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x2e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x6e, 0x0a, 0x09, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x2e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x62, 0x0a, 0x07, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x2e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a,
	0x0a, 0x0d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12,
	0x2e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x80, 0x01, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x35, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x83, 0x01,
	0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x12, 0x35, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x30, 0x01, 0x32, 0xd2, 0x0c, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x69, 0x0a, 0x06, 0x47,
	0x65, 0x74, 0x4f, 0x6e, 0x65, 0x12, 0x2e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6d,
	0x65, 0x12, 0x32, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x77, 0x0a, 0x06,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x34, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x7a, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x12, 0x34, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30,
	0x01, 0x12, 0x68, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x34, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x0d, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x34, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x6c, 0x0a,
	0x03, 0x53, 0x65, 0x74, 0x12, 0x31, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x07, 0x53,
	0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x35, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x75, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x34, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x83,
	0x01, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x38, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x30, 0x01, 0x12, 0x80, 0x01, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x6c, 0x6c, 0x12, 0x37, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x8c, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x3b, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x8f, 0x01, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x3b, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0xb8, 0x0d, 0x0a, 0x17, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x71, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x12, 0x32,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x53, 0x6f,
	0x6d, 0x65, 0x12, 0x36, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e,
	0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x7f, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12,
	0x38, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x82, 0x01, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x12, 0x38, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x6c, 0x0a, 0x07, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x38, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x0d, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x38, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e,
	0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12,
	0x74, 0x0a, 0x03, 0x53, 0x65, 0x74, 0x12, 0x35, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d,
	0x65, 0x12, 0x39, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65,
	0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x7d, 0x0a, 0x06, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x38, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x0a, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x3c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x88, 0x01, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x3b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x30, 0x01, 0x12, 0x94, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x12, 0x3f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x97, 0x01, 0x0a, 0x10, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x3f,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x40, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x30, 0x01, 0x42, 0x58, 0x5a, 0x56, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x6f, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x3b, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_arista_studio_topology_v1_services_gen_proto_rawDescOnce sync.Once
	file_arista_studio_topology_v1_services_gen_proto_rawDescData = file_arista_studio_topology_v1_services_gen_proto_rawDesc
)

func file_arista_studio_topology_v1_services_gen_proto_rawDescGZIP() []byte {
	file_arista_studio_topology_v1_services_gen_proto_rawDescOnce.Do(func() {
		file_arista_studio_topology_v1_services_gen_proto_rawDescData = protoimpl.X.CompressGZIP(file_arista_studio_topology_v1_services_gen_proto_rawDescData)
	})
	return file_arista_studio_topology_v1_services_gen_proto_rawDescData
}

var file_arista_studio_topology_v1_services_gen_proto_msgTypes = make([]protoimpl.MessageInfo, 159)
var file_arista_studio_topology_v1_services_gen_proto_goTypes = []interface{}{
	(*MetaResponse)(nil),                              // 0: arista.studio_topology.v1.MetaResponse
	(*DecommissionRequest)(nil),                       // 1: arista.studio_topology.v1.DecommissionRequest
	(*DecommissionResponse)(nil),                      // 2: arista.studio_topology.v1.DecommissionResponse
	(*DecommissionSomeRequest)(nil),                   // 3: arista.studio_topology.v1.DecommissionSomeRequest
	(*DecommissionSomeResponse)(nil),                  // 4: arista.studio_topology.v1.DecommissionSomeResponse
	(*DecommissionStreamRequest)(nil),                 // 5: arista.studio_topology.v1.DecommissionStreamRequest
	(*DecommissionStreamResponse)(nil),                // 6: arista.studio_topology.v1.DecommissionStreamResponse
	(*DecommissionBatchedStreamRequest)(nil),          // 7: arista.studio_topology.v1.DecommissionBatchedStreamRequest
	(*DecommissionBatchedStreamResponse)(nil),         // 8: arista.studio_topology.v1.DecommissionBatchedStreamResponse
	(*DecommissionConfigRequest)(nil),                 // 9: arista.studio_topology.v1.DecommissionConfigRequest
	(*DecommissionConfigResponse)(nil),                // 10: arista.studio_topology.v1.DecommissionConfigResponse
	(*DecommissionConfigSomeRequest)(nil),             // 11: arista.studio_topology.v1.DecommissionConfigSomeRequest
	(*DecommissionConfigSomeResponse)(nil),            // 12: arista.studio_topology.v1.DecommissionConfigSomeResponse
	(*DecommissionConfigStreamRequest)(nil),           // 13: arista.studio_topology.v1.DecommissionConfigStreamRequest
	(*DecommissionConfigStreamResponse)(nil),          // 14: arista.studio_topology.v1.DecommissionConfigStreamResponse
	(*DecommissionConfigBatchedStreamRequest)(nil),    // 15: arista.studio_topology.v1.DecommissionConfigBatchedStreamRequest
	(*DecommissionConfigBatchedStreamResponse)(nil),   // 16: arista.studio_topology.v1.DecommissionConfigBatchedStreamResponse
	(*DecommissionConfigSetRequest)(nil),              // 17: arista.studio_topology.v1.DecommissionConfigSetRequest
	(*DecommissionConfigSetResponse)(nil),             // 18: arista.studio_topology.v1.DecommissionConfigSetResponse
	(*DecommissionConfigSetSomeRequest)(nil),          // 19: arista.studio_topology.v1.DecommissionConfigSetSomeRequest
	(*DecommissionConfigSetSomeResponse)(nil),         // 20: arista.studio_topology.v1.DecommissionConfigSetSomeResponse
	(*DecommissionConfigDeleteRequest)(nil),           // 21: arista.studio_topology.v1.DecommissionConfigDeleteRequest
	(*DecommissionConfigDeleteResponse)(nil),          // 22: arista.studio_topology.v1.DecommissionConfigDeleteResponse
	(*DecommissionConfigDeleteSomeRequest)(nil),       // 23: arista.studio_topology.v1.DecommissionConfigDeleteSomeRequest
	(*DecommissionConfigDeleteSomeResponse)(nil),      // 24: arista.studio_topology.v1.DecommissionConfigDeleteSomeResponse
	(*DecommissionConfigDeleteAllRequest)(nil),        // 25: arista.studio_topology.v1.DecommissionConfigDeleteAllRequest
	(*DecommissionConfigDeleteAllResponse)(nil),       // 26: arista.studio_topology.v1.DecommissionConfigDeleteAllResponse
	(*DeviceInputConfigRequest)(nil),                  // 27: arista.studio_topology.v1.DeviceInputConfigRequest
	(*DeviceInputConfigResponse)(nil),                 // 28: arista.studio_topology.v1.DeviceInputConfigResponse
	(*DeviceInputConfigSomeRequest)(nil),              // 29: arista.studio_topology.v1.DeviceInputConfigSomeRequest
	(*DeviceInputConfigSomeResponse)(nil),             // 30: arista.studio_topology.v1.DeviceInputConfigSomeResponse
	(*DeviceInputConfigStreamRequest)(nil),            // 31: arista.studio_topology.v1.DeviceInputConfigStreamRequest
	(*DeviceInputConfigStreamResponse)(nil),           // 32: arista.studio_topology.v1.DeviceInputConfigStreamResponse
	(*DeviceInputConfigBatchedStreamRequest)(nil),     // 33: arista.studio_topology.v1.DeviceInputConfigBatchedStreamRequest
	(*DeviceInputConfigBatchedStreamResponse)(nil),    // 34: arista.studio_topology.v1.DeviceInputConfigBatchedStreamResponse
	(*DeviceInputConfigSetRequest)(nil),               // 35: arista.studio_topology.v1.DeviceInputConfigSetRequest
	(*DeviceInputConfigSetResponse)(nil),              // 36: arista.studio_topology.v1.DeviceInputConfigSetResponse
	(*DeviceInputConfigSetSomeRequest)(nil),           // 37: arista.studio_topology.v1.DeviceInputConfigSetSomeRequest
	(*DeviceInputConfigSetSomeResponse)(nil),          // 38: arista.studio_topology.v1.DeviceInputConfigSetSomeResponse
	(*DeviceInputConfigDeleteRequest)(nil),            // 39: arista.studio_topology.v1.DeviceInputConfigDeleteRequest
	(*DeviceInputConfigDeleteResponse)(nil),           // 40: arista.studio_topology.v1.DeviceInputConfigDeleteResponse
	(*DeviceInputConfigDeleteSomeRequest)(nil),        // 41: arista.studio_topology.v1.DeviceInputConfigDeleteSomeRequest
	(*DeviceInputConfigDeleteSomeResponse)(nil),       // 42: arista.studio_topology.v1.DeviceInputConfigDeleteSomeResponse
	(*DeviceInputConfigDeleteAllRequest)(nil),         // 43: arista.studio_topology.v1.DeviceInputConfigDeleteAllRequest
	(*DeviceInputConfigDeleteAllResponse)(nil),        // 44: arista.studio_topology.v1.DeviceInputConfigDeleteAllResponse
	(*DeviceStateRequest)(nil),                        // 45: arista.studio_topology.v1.DeviceStateRequest
	(*DeviceStateResponse)(nil),                       // 46: arista.studio_topology.v1.DeviceStateResponse
	(*DeviceStateSomeRequest)(nil),                    // 47: arista.studio_topology.v1.DeviceStateSomeRequest
	(*DeviceStateSomeResponse)(nil),                   // 48: arista.studio_topology.v1.DeviceStateSomeResponse
	(*DeviceStateStreamRequest)(nil),                  // 49: arista.studio_topology.v1.DeviceStateStreamRequest
	(*DeviceStateStreamResponse)(nil),                 // 50: arista.studio_topology.v1.DeviceStateStreamResponse
	(*DeviceStateBatchedStreamRequest)(nil),           // 51: arista.studio_topology.v1.DeviceStateBatchedStreamRequest
	(*DeviceStateBatchedStreamResponse)(nil),          // 52: arista.studio_topology.v1.DeviceStateBatchedStreamResponse
	(*InterfaceInputConfigRequest)(nil),               // 53: arista.studio_topology.v1.InterfaceInputConfigRequest
	(*InterfaceInputConfigResponse)(nil),              // 54: arista.studio_topology.v1.InterfaceInputConfigResponse
	(*InterfaceInputConfigSomeRequest)(nil),           // 55: arista.studio_topology.v1.InterfaceInputConfigSomeRequest
	(*InterfaceInputConfigSomeResponse)(nil),          // 56: arista.studio_topology.v1.InterfaceInputConfigSomeResponse
	(*InterfaceInputConfigStreamRequest)(nil),         // 57: arista.studio_topology.v1.InterfaceInputConfigStreamRequest
	(*InterfaceInputConfigStreamResponse)(nil),        // 58: arista.studio_topology.v1.InterfaceInputConfigStreamResponse
	(*InterfaceInputConfigBatchedStreamRequest)(nil),  // 59: arista.studio_topology.v1.InterfaceInputConfigBatchedStreamRequest
	(*InterfaceInputConfigBatchedStreamResponse)(nil), // 60: arista.studio_topology.v1.InterfaceInputConfigBatchedStreamResponse
	(*InterfaceInputConfigSetRequest)(nil),            // 61: arista.studio_topology.v1.InterfaceInputConfigSetRequest
	(*InterfaceInputConfigSetResponse)(nil),           // 62: arista.studio_topology.v1.InterfaceInputConfigSetResponse
	(*InterfaceInputConfigSetSomeRequest)(nil),        // 63: arista.studio_topology.v1.InterfaceInputConfigSetSomeRequest
	(*InterfaceInputConfigSetSomeResponse)(nil),       // 64: arista.studio_topology.v1.InterfaceInputConfigSetSomeResponse
	(*InterfaceInputConfigDeleteRequest)(nil),         // 65: arista.studio_topology.v1.InterfaceInputConfigDeleteRequest
	(*InterfaceInputConfigDeleteResponse)(nil),        // 66: arista.studio_topology.v1.InterfaceInputConfigDeleteResponse
	(*InterfaceInputConfigDeleteSomeRequest)(nil),     // 67: arista.studio_topology.v1.InterfaceInputConfigDeleteSomeRequest
	(*InterfaceInputConfigDeleteSomeResponse)(nil),    // 68: arista.studio_topology.v1.InterfaceInputConfigDeleteSomeResponse
	(*InterfaceInputConfigDeleteAllRequest)(nil),      // 69: arista.studio_topology.v1.InterfaceInputConfigDeleteAllRequest
	(*InterfaceInputConfigDeleteAllResponse)(nil),     // 70: arista.studio_topology.v1.InterfaceInputConfigDeleteAllResponse
	(*ReplaceRequest)(nil),                            // 71: arista.studio_topology.v1.ReplaceRequest
	(*ReplaceResponse)(nil),                           // 72: arista.studio_topology.v1.ReplaceResponse
	(*ReplaceSomeRequest)(nil),                        // 73: arista.studio_topology.v1.ReplaceSomeRequest
	(*ReplaceSomeResponse)(nil),                       // 74: arista.studio_topology.v1.ReplaceSomeResponse
	(*ReplaceStreamRequest)(nil),                      // 75: arista.studio_topology.v1.ReplaceStreamRequest
	(*ReplaceStreamResponse)(nil),                     // 76: arista.studio_topology.v1.ReplaceStreamResponse
	(*ReplaceBatchedStreamRequest)(nil),               // 77: arista.studio_topology.v1.ReplaceBatchedStreamRequest
	(*ReplaceBatchedStreamResponse)(nil),              // 78: arista.studio_topology.v1.ReplaceBatchedStreamResponse
	(*ReplaceConfigRequest)(nil),                      // 79: arista.studio_topology.v1.ReplaceConfigRequest
	(*ReplaceConfigResponse)(nil),                     // 80: arista.studio_topology.v1.ReplaceConfigResponse
	(*ReplaceConfigSomeRequest)(nil),                  // 81: arista.studio_topology.v1.ReplaceConfigSomeRequest
	(*ReplaceConfigSomeResponse)(nil),                 // 82: arista.studio_topology.v1.ReplaceConfigSomeResponse
	(*ReplaceConfigStreamRequest)(nil),                // 83: arista.studio_topology.v1.ReplaceConfigStreamRequest
	(*ReplaceConfigStreamResponse)(nil),               // 84: arista.studio_topology.v1.ReplaceConfigStreamResponse
	(*ReplaceConfigBatchedStreamRequest)(nil),         // 85: arista.studio_topology.v1.ReplaceConfigBatchedStreamRequest
	(*ReplaceConfigBatchedStreamResponse)(nil),        // 86: arista.studio_topology.v1.ReplaceConfigBatchedStreamResponse
	(*ReplaceConfigSetRequest)(nil),                   // 87: arista.studio_topology.v1.ReplaceConfigSetRequest
	(*ReplaceConfigSetResponse)(nil),                  // 88: arista.studio_topology.v1.ReplaceConfigSetResponse
	(*ReplaceConfigSetSomeRequest)(nil),               // 89: arista.studio_topology.v1.ReplaceConfigSetSomeRequest
	(*ReplaceConfigSetSomeResponse)(nil),              // 90: arista.studio_topology.v1.ReplaceConfigSetSomeResponse
	(*ReplaceConfigDeleteRequest)(nil),                // 91: arista.studio_topology.v1.ReplaceConfigDeleteRequest
	(*ReplaceConfigDeleteResponse)(nil),               // 92: arista.studio_topology.v1.ReplaceConfigDeleteResponse
	(*ReplaceConfigDeleteSomeRequest)(nil),            // 93: arista.studio_topology.v1.ReplaceConfigDeleteSomeRequest
	(*ReplaceConfigDeleteSomeResponse)(nil),           // 94: arista.studio_topology.v1.ReplaceConfigDeleteSomeResponse
	(*ReplaceConfigDeleteAllRequest)(nil),             // 95: arista.studio_topology.v1.ReplaceConfigDeleteAllRequest
	(*ReplaceConfigDeleteAllResponse)(nil),            // 96: arista.studio_topology.v1.ReplaceConfigDeleteAllResponse
	(*RevertConfigRequest)(nil),                       // 97: arista.studio_topology.v1.RevertConfigRequest
	(*RevertConfigResponse)(nil),                      // 98: arista.studio_topology.v1.RevertConfigResponse
	(*RevertConfigSomeRequest)(nil),                   // 99: arista.studio_topology.v1.RevertConfigSomeRequest
	(*RevertConfigSomeResponse)(nil),                  // 100: arista.studio_topology.v1.RevertConfigSomeResponse
	(*RevertConfigStreamRequest)(nil),                 // 101: arista.studio_topology.v1.RevertConfigStreamRequest
	(*RevertConfigStreamResponse)(nil),                // 102: arista.studio_topology.v1.RevertConfigStreamResponse
	(*RevertConfigBatchedStreamRequest)(nil),          // 103: arista.studio_topology.v1.RevertConfigBatchedStreamRequest
	(*RevertConfigBatchedStreamResponse)(nil),         // 104: arista.studio_topology.v1.RevertConfigBatchedStreamResponse
	(*RevertConfigSetRequest)(nil),                    // 105: arista.studio_topology.v1.RevertConfigSetRequest
	(*RevertConfigSetResponse)(nil),                   // 106: arista.studio_topology.v1.RevertConfigSetResponse
	(*RevertConfigSetSomeRequest)(nil),                // 107: arista.studio_topology.v1.RevertConfigSetSomeRequest
	(*RevertConfigSetSomeResponse)(nil),               // 108: arista.studio_topology.v1.RevertConfigSetSomeResponse
	(*RevertConfigDeleteRequest)(nil),                 // 109: arista.studio_topology.v1.RevertConfigDeleteRequest
	(*RevertConfigDeleteResponse)(nil),                // 110: arista.studio_topology.v1.RevertConfigDeleteResponse
	(*RevertConfigDeleteSomeRequest)(nil),             // 111: arista.studio_topology.v1.RevertConfigDeleteSomeRequest
	(*RevertConfigDeleteSomeResponse)(nil),            // 112: arista.studio_topology.v1.RevertConfigDeleteSomeResponse
	(*RevertConfigDeleteAllRequest)(nil),              // 113: arista.studio_topology.v1.RevertConfigDeleteAllRequest
	(*RevertConfigDeleteAllResponse)(nil),             // 114: arista.studio_topology.v1.RevertConfigDeleteAllResponse
	(*UpdateRequest)(nil),                             // 115: arista.studio_topology.v1.UpdateRequest
	(*UpdateResponse)(nil),                            // 116: arista.studio_topology.v1.UpdateResponse
	(*UpdateSomeRequest)(nil),                         // 117: arista.studio_topology.v1.UpdateSomeRequest
	(*UpdateSomeResponse)(nil),                        // 118: arista.studio_topology.v1.UpdateSomeResponse
	(*UpdateStreamRequest)(nil),                       // 119: arista.studio_topology.v1.UpdateStreamRequest
	(*UpdateStreamResponse)(nil),                      // 120: arista.studio_topology.v1.UpdateStreamResponse
	(*UpdateBatchedStreamRequest)(nil),                // 121: arista.studio_topology.v1.UpdateBatchedStreamRequest
	(*UpdateBatchedStreamResponse)(nil),               // 122: arista.studio_topology.v1.UpdateBatchedStreamResponse
	(*UpdateConfigRequest)(nil),                       // 123: arista.studio_topology.v1.UpdateConfigRequest
	(*UpdateConfigResponse)(nil),                      // 124: arista.studio_topology.v1.UpdateConfigResponse
	(*UpdateConfigSomeRequest)(nil),                   // 125: arista.studio_topology.v1.UpdateConfigSomeRequest
	(*UpdateConfigSomeResponse)(nil),                  // 126: arista.studio_topology.v1.UpdateConfigSomeResponse
	(*UpdateConfigStreamRequest)(nil),                 // 127: arista.studio_topology.v1.UpdateConfigStreamRequest
	(*UpdateConfigStreamResponse)(nil),                // 128: arista.studio_topology.v1.UpdateConfigStreamResponse
	(*UpdateConfigBatchedStreamRequest)(nil),          // 129: arista.studio_topology.v1.UpdateConfigBatchedStreamRequest
	(*UpdateConfigBatchedStreamResponse)(nil),         // 130: arista.studio_topology.v1.UpdateConfigBatchedStreamResponse
	(*UpdateConfigSetRequest)(nil),                    // 131: arista.studio_topology.v1.UpdateConfigSetRequest
	(*UpdateConfigSetResponse)(nil),                   // 132: arista.studio_topology.v1.UpdateConfigSetResponse
	(*UpdateConfigSetSomeRequest)(nil),                // 133: arista.studio_topology.v1.UpdateConfigSetSomeRequest
	(*UpdateConfigSetSomeResponse)(nil),               // 134: arista.studio_topology.v1.UpdateConfigSetSomeResponse
	(*UpdateConfigDeleteRequest)(nil),                 // 135: arista.studio_topology.v1.UpdateConfigDeleteRequest
	(*UpdateConfigDeleteResponse)(nil),                // 136: arista.studio_topology.v1.UpdateConfigDeleteResponse
	(*UpdateConfigDeleteSomeRequest)(nil),             // 137: arista.studio_topology.v1.UpdateConfigDeleteSomeRequest
	(*UpdateConfigDeleteSomeResponse)(nil),            // 138: arista.studio_topology.v1.UpdateConfigDeleteSomeResponse
	(*UpdateConfigDeleteAllRequest)(nil),              // 139: arista.studio_topology.v1.UpdateConfigDeleteAllRequest
	(*UpdateConfigDeleteAllResponse)(nil),             // 140: arista.studio_topology.v1.UpdateConfigDeleteAllResponse
	(*UpdateSyncConfigRequest)(nil),                   // 141: arista.studio_topology.v1.UpdateSyncConfigRequest
	(*UpdateSyncConfigResponse)(nil),                  // 142: arista.studio_topology.v1.UpdateSyncConfigResponse
	(*UpdateSyncConfigSomeRequest)(nil),               // 143: arista.studio_topology.v1.UpdateSyncConfigSomeRequest
	(*UpdateSyncConfigSomeResponse)(nil),              // 144: arista.studio_topology.v1.UpdateSyncConfigSomeResponse
	(*UpdateSyncConfigStreamRequest)(nil),             // 145: arista.studio_topology.v1.UpdateSyncConfigStreamRequest
	(*UpdateSyncConfigStreamResponse)(nil),            // 146: arista.studio_topology.v1.UpdateSyncConfigStreamResponse
	(*UpdateSyncConfigBatchedStreamRequest)(nil),      // 147: arista.studio_topology.v1.UpdateSyncConfigBatchedStreamRequest
	(*UpdateSyncConfigBatchedStreamResponse)(nil),     // 148: arista.studio_topology.v1.UpdateSyncConfigBatchedStreamResponse
	(*UpdateSyncConfigSetRequest)(nil),                // 149: arista.studio_topology.v1.UpdateSyncConfigSetRequest
	(*UpdateSyncConfigSetResponse)(nil),               // 150: arista.studio_topology.v1.UpdateSyncConfigSetResponse
	(*UpdateSyncConfigSetSomeRequest)(nil),            // 151: arista.studio_topology.v1.UpdateSyncConfigSetSomeRequest
	(*UpdateSyncConfigSetSomeResponse)(nil),           // 152: arista.studio_topology.v1.UpdateSyncConfigSetSomeResponse
	(*UpdateSyncConfigDeleteRequest)(nil),             // 153: arista.studio_topology.v1.UpdateSyncConfigDeleteRequest
	(*UpdateSyncConfigDeleteResponse)(nil),            // 154: arista.studio_topology.v1.UpdateSyncConfigDeleteResponse
	(*UpdateSyncConfigDeleteSomeRequest)(nil),         // 155: arista.studio_topology.v1.UpdateSyncConfigDeleteSomeRequest
	(*UpdateSyncConfigDeleteSomeResponse)(nil),        // 156: arista.studio_topology.v1.UpdateSyncConfigDeleteSomeResponse
	(*UpdateSyncConfigDeleteAllRequest)(nil),          // 157: arista.studio_topology.v1.UpdateSyncConfigDeleteAllRequest
	(*UpdateSyncConfigDeleteAllResponse)(nil),         // 158: arista.studio_topology.v1.UpdateSyncConfigDeleteAllResponse
	(*timestamppb.Timestamp)(nil),                     // 159: google.protobuf.Timestamp
	(subscriptions.Operation)(0),                      // 160: arista.subscriptions.Operation
	(*wrapperspb.UInt32Value)(nil),                    // 161: google.protobuf.UInt32Value
	(*DeviceKey)(nil),                                 // 162: arista.studio_topology.v1.DeviceKey
	(*Decommission)(nil),                              // 163: arista.studio_topology.v1.Decommission
	(*wrapperspb.StringValue)(nil),                    // 164: google.protobuf.StringValue
	(*time.TimeBounds)(nil),                           // 165: arista.time.TimeBounds
	(*DecommissionConfig)(nil),                        // 166: arista.studio_topology.v1.DecommissionConfig
	(fmp.DeleteError)(0),                              // 167: fmp.DeleteError
	(*DeviceInputConfig)(nil),                         // 168: arista.studio_topology.v1.DeviceInputConfig
	(*DeviceState)(nil),                               // 169: arista.studio_topology.v1.DeviceState
	(*InterfaceInputKey)(nil),                         // 170: arista.studio_topology.v1.InterfaceInputKey
	(*InterfaceInputConfig)(nil),                      // 171: arista.studio_topology.v1.InterfaceInputConfig
	(*Replace)(nil),                                   // 172: arista.studio_topology.v1.Replace
	(*ReplaceConfig)(nil),                             // 173: arista.studio_topology.v1.ReplaceConfig
	(*workspace_v1.WorkspaceKey)(nil),                 // 174: arista.workspace.v1.WorkspaceKey
	(*RevertConfig)(nil),                              // 175: arista.studio_topology.v1.RevertConfig
	(*UpdateKey)(nil),                                 // 176: arista.studio_topology.v1.UpdateKey
	(*Update)(nil),                                    // 177: arista.studio_topology.v1.Update
	(*UpdateConfig)(nil),                              // 178: arista.studio_topology.v1.UpdateConfig
	(*UpdateSyncConfig)(nil),                          // 179: arista.studio_topology.v1.UpdateSyncConfig
}
var file_arista_studio_topology_v1_services_gen_proto_depIdxs = []int32{
	159, // 0: arista.studio_topology.v1.MetaResponse.time:type_name -> google.protobuf.Timestamp
	160, // 1: arista.studio_topology.v1.MetaResponse.type:type_name -> arista.subscriptions.Operation
	161, // 2: arista.studio_topology.v1.MetaResponse.count:type_name -> google.protobuf.UInt32Value
	162, // 3: arista.studio_topology.v1.DecommissionRequest.key:type_name -> arista.studio_topology.v1.DeviceKey
	159, // 4: arista.studio_topology.v1.DecommissionRequest.time:type_name -> google.protobuf.Timestamp
	163, // 5: arista.studio_topology.v1.DecommissionResponse.value:type_name -> arista.studio_topology.v1.Decommission
	159, // 6: arista.studio_topology.v1.DecommissionResponse.time:type_name -> google.protobuf.Timestamp
	162, // 7: arista.studio_topology.v1.DecommissionSomeRequest.keys:type_name -> arista.studio_topology.v1.DeviceKey
	159, // 8: arista.studio_topology.v1.DecommissionSomeRequest.time:type_name -> google.protobuf.Timestamp
	163, // 9: arista.studio_topology.v1.DecommissionSomeResponse.value:type_name -> arista.studio_topology.v1.Decommission
	164, // 10: arista.studio_topology.v1.DecommissionSomeResponse.error:type_name -> google.protobuf.StringValue
	159, // 11: arista.studio_topology.v1.DecommissionSomeResponse.time:type_name -> google.protobuf.Timestamp
	163, // 12: arista.studio_topology.v1.DecommissionStreamRequest.partial_eq_filter:type_name -> arista.studio_topology.v1.Decommission
	165, // 13: arista.studio_topology.v1.DecommissionStreamRequest.time:type_name -> arista.time.TimeBounds
	163, // 14: arista.studio_topology.v1.DecommissionStreamResponse.value:type_name -> arista.studio_topology.v1.Decommission
	159, // 15: arista.studio_topology.v1.DecommissionStreamResponse.time:type_name -> google.protobuf.Timestamp
	160, // 16: arista.studio_topology.v1.DecommissionStreamResponse.type:type_name -> arista.subscriptions.Operation
	163, // 17: arista.studio_topology.v1.DecommissionBatchedStreamRequest.partial_eq_filter:type_name -> arista.studio_topology.v1.Decommission
	165, // 18: arista.studio_topology.v1.DecommissionBatchedStreamRequest.time:type_name -> arista.time.TimeBounds
	161, // 19: arista.studio_topology.v1.DecommissionBatchedStreamRequest.max_messages:type_name -> google.protobuf.UInt32Value
	6,   // 20: arista.studio_topology.v1.DecommissionBatchedStreamResponse.responses:type_name -> arista.studio_topology.v1.DecommissionStreamResponse
	162, // 21: arista.studio_topology.v1.DecommissionConfigRequest.key:type_name -> arista.studio_topology.v1.DeviceKey
	159, // 22: arista.studio_topology.v1.DecommissionConfigRequest.time:type_name -> google.protobuf.Timestamp
	166, // 23: arista.studio_topology.v1.DecommissionConfigResponse.value:type_name -> arista.studio_topology.v1.DecommissionConfig
	159, // 24: arista.studio_topology.v1.DecommissionConfigResponse.time:type_name -> google.protobuf.Timestamp
	162, // 25: arista.studio_topology.v1.DecommissionConfigSomeRequest.keys:type_name -> arista.studio_topology.v1.DeviceKey
	159, // 26: arista.studio_topology.v1.DecommissionConfigSomeRequest.time:type_name -> google.protobuf.Timestamp
	166, // 27: arista.studio_topology.v1.DecommissionConfigSomeResponse.value:type_name -> arista.studio_topology.v1.DecommissionConfig
	164, // 28: arista.studio_topology.v1.DecommissionConfigSomeResponse.error:type_name -> google.protobuf.StringValue
	159, // 29: arista.studio_topology.v1.DecommissionConfigSomeResponse.time:type_name -> google.protobuf.Timestamp
	166, // 30: arista.studio_topology.v1.DecommissionConfigStreamRequest.partial_eq_filter:type_name -> arista.studio_topology.v1.DecommissionConfig
	165, // 31: arista.studio_topology.v1.DecommissionConfigStreamRequest.time:type_name -> arista.time.TimeBounds
	166, // 32: arista.studio_topology.v1.DecommissionConfigStreamResponse.value:type_name -> arista.studio_topology.v1.DecommissionConfig
	159, // 33: arista.studio_topology.v1.DecommissionConfigStreamResponse.time:type_name -> google.protobuf.Timestamp
	160, // 34: arista.studio_topology.v1.DecommissionConfigStreamResponse.type:type_name -> arista.subscriptions.Operation
	166, // 35: arista.studio_topology.v1.DecommissionConfigBatchedStreamRequest.partial_eq_filter:type_name -> arista.studio_topology.v1.DecommissionConfig
	165, // 36: arista.studio_topology.v1.DecommissionConfigBatchedStreamRequest.time:type_name -> arista.time.TimeBounds
	161, // 37: arista.studio_topology.v1.DecommissionConfigBatchedStreamRequest.max_messages:type_name -> google.protobuf.UInt32Value
	14,  // 38: arista.studio_topology.v1.DecommissionConfigBatchedStreamResponse.responses:type_name -> arista.studio_topology.v1.DecommissionConfigStreamResponse
	166, // 39: arista.studio_topology.v1.DecommissionConfigSetRequest.value:type_name -> arista.studio_topology.v1.DecommissionConfig
	166, // 40: arista.studio_topology.v1.DecommissionConfigSetResponse.value:type_name -> arista.studio_topology.v1.DecommissionConfig
	159, // 41: arista.studio_topology.v1.DecommissionConfigSetResponse.time:type_name -> google.protobuf.Timestamp
	166, // 42: arista.studio_topology.v1.DecommissionConfigSetSomeRequest.values:type_name -> arista.studio_topology.v1.DecommissionConfig
	162, // 43: arista.studio_topology.v1.DecommissionConfigSetSomeResponse.key:type_name -> arista.studio_topology.v1.DeviceKey
	162, // 44: arista.studio_topology.v1.DecommissionConfigDeleteRequest.key:type_name -> arista.studio_topology.v1.DeviceKey
	162, // 45: arista.studio_topology.v1.DecommissionConfigDeleteResponse.key:type_name -> arista.studio_topology.v1.DeviceKey
	159, // 46: arista.studio_topology.v1.DecommissionConfigDeleteResponse.time:type_name -> google.protobuf.Timestamp
	162, // 47: arista.studio_topology.v1.DecommissionConfigDeleteSomeRequest.keys:type_name -> arista.studio_topology.v1.DeviceKey
	162, // 48: arista.studio_topology.v1.DecommissionConfigDeleteSomeResponse.key:type_name -> arista.studio_topology.v1.DeviceKey
	166, // 49: arista.studio_topology.v1.DecommissionConfigDeleteAllRequest.partial_eq_filter:type_name -> arista.studio_topology.v1.DecommissionConfig
	167, // 50: arista.studio_topology.v1.DecommissionConfigDeleteAllResponse.type:type_name -> fmp.DeleteError
	164, // 51: arista.studio_topology.v1.DecommissionConfigDeleteAllResponse.error:type_name -> google.protobuf.StringValue
	162, // 52: arista.studio_topology.v1.DecommissionConfigDeleteAllResponse.key:type_name -> arista.studio_topology.v1.DeviceKey
	159, // 53: arista.studio_topology.v1.DecommissionConfigDeleteAllResponse.time:type_name -> google.protobuf.Timestamp
	162, // 54: arista.studio_topology.v1.DeviceInputConfigRequest.key:type_name -> arista.studio_topology.v1.DeviceKey
	159, // 55: arista.studio_topology.v1.DeviceInputConfigRequest.time:type_name -> google.protobuf.Timestamp
	168, // 56: arista.studio_topology.v1.DeviceInputConfigResponse.value:type_name -> arista.studio_topology.v1.DeviceInputConfig
	159, // 57: arista.studio_topology.v1.DeviceInputConfigResponse.time:type_name -> google.protobuf.Timestamp
	162, // 58: arista.studio_topology.v1.DeviceInputConfigSomeRequest.keys:type_name -> arista.studio_topology.v1.DeviceKey
	159, // 59: arista.studio_topology.v1.DeviceInputConfigSomeRequest.time:type_name -> google.protobuf.Timestamp
	168, // 60: arista.studio_topology.v1.DeviceInputConfigSomeResponse.value:type_name -> arista.studio_topology.v1.DeviceInputConfig
	164, // 61: arista.studio_topology.v1.DeviceInputConfigSomeResponse.error:type_name -> google.protobuf.StringValue
	159, // 62: arista.studio_topology.v1.DeviceInputConfigSomeResponse.time:type_name -> google.protobuf.Timestamp
	168, // 63: arista.studio_topology.v1.DeviceInputConfigStreamRequest.partial_eq_filter:type_name -> arista.studio_topology.v1.DeviceInputConfig
	165, // 64: arista.studio_topology.v1.DeviceInputConfigStreamRequest.time:type_name -> arista.time.TimeBounds
	168, // 65: arista.studio_topology.v1.DeviceInputConfigStreamResponse.value:type_name -> arista.studio_topology.v1.DeviceInputConfig
	159, // 66: arista.studio_topology.v1.DeviceInputConfigStreamResponse.time:type_name -> google.protobuf.Timestamp
	160, // 67: arista.studio_topology.v1.DeviceInputConfigStreamResponse.type:type_name -> arista.subscriptions.Operation
	168, // 68: arista.studio_topology.v1.DeviceInputConfigBatchedStreamRequest.partial_eq_filter:type_name -> arista.studio_topology.v1.DeviceInputConfig
	165, // 69: arista.studio_topology.v1.DeviceInputConfigBatchedStreamRequest.time:type_name -> arista.time.TimeBounds
	161, // 70: arista.studio_topology.v1.DeviceInputConfigBatchedStreamRequest.max_messages:type_name -> google.protobuf.UInt32Value
	32,  // 71: arista.studio_topology.v1.DeviceInputConfigBatchedStreamResponse.responses:type_name -> arista.studio_topology.v1.DeviceInputConfigStreamResponse
	168, // 72: arista.studio_topology.v1.DeviceInputConfigSetRequest.value:type_name -> arista.studio_topology.v1.DeviceInputConfig
	168, // 73: arista.studio_topology.v1.DeviceInputConfigSetResponse.value:type_name -> arista.studio_topology.v1.DeviceInputConfig
	159, // 74: arista.studio_topology.v1.DeviceInputConfigSetResponse.time:type_name -> google.protobuf.Timestamp
	168, // 75: arista.studio_topology.v1.DeviceInputConfigSetSomeRequest.values:type_name -> arista.studio_topology.v1.DeviceInputConfig
	162, // 76: arista.studio_topology.v1.DeviceInputConfigSetSomeResponse.key:type_name -> arista.studio_topology.v1.DeviceKey
	162, // 77: arista.studio_topology.v1.DeviceInputConfigDeleteRequest.key:type_name -> arista.studio_topology.v1.DeviceKey
	162, // 78: arista.studio_topology.v1.DeviceInputConfigDeleteResponse.key:type_name -> arista.studio_topology.v1.DeviceKey
	159, // 79: arista.studio_topology.v1.DeviceInputConfigDeleteResponse.time:type_name -> google.protobuf.Timestamp
	162, // 80: arista.studio_topology.v1.DeviceInputConfigDeleteSomeRequest.keys:type_name -> arista.studio_topology.v1.DeviceKey
	162, // 81: arista.studio_topology.v1.DeviceInputConfigDeleteSomeResponse.key:type_name -> arista.studio_topology.v1.DeviceKey
	168, // 82: arista.studio_topology.v1.DeviceInputConfigDeleteAllRequest.partial_eq_filter:type_name -> arista.studio_topology.v1.DeviceInputConfig
	167, // 83: arista.studio_topology.v1.DeviceInputConfigDeleteAllResponse.type:type_name -> fmp.DeleteError
	164, // 84: arista.studio_topology.v1.DeviceInputConfigDeleteAllResponse.error:type_name -> google.protobuf.StringValue
	162, // 85: arista.studio_topology.v1.DeviceInputConfigDeleteAllResponse.key:type_name -> arista.studio_topology.v1.DeviceKey
	159, // 86: arista.studio_topology.v1.DeviceInputConfigDeleteAllResponse.time:type_name -> google.protobuf.Timestamp
	162, // 87: arista.studio_topology.v1.DeviceStateRequest.key:type_name -> arista.studio_topology.v1.DeviceKey
	159, // 88: arista.studio_topology.v1.DeviceStateRequest.time:type_name -> google.protobuf.Timestamp
	169, // 89: arista.studio_topology.v1.DeviceStateResponse.value:type_name -> arista.studio_topology.v1.DeviceState
	159, // 90: arista.studio_topology.v1.DeviceStateResponse.time:type_name -> google.protobuf.Timestamp
	162, // 91: arista.studio_topology.v1.DeviceStateSomeRequest.keys:type_name -> arista.studio_topology.v1.DeviceKey
	159, // 92: arista.studio_topology.v1.DeviceStateSomeRequest.time:type_name -> google.protobuf.Timestamp
	169, // 93: arista.studio_topology.v1.DeviceStateSomeResponse.value:type_name -> arista.studio_topology.v1.DeviceState
	164, // 94: arista.studio_topology.v1.DeviceStateSomeResponse.error:type_name -> google.protobuf.StringValue
	159, // 95: arista.studio_topology.v1.DeviceStateSomeResponse.time:type_name -> google.protobuf.Timestamp
	169, // 96: arista.studio_topology.v1.DeviceStateStreamRequest.partial_eq_filter:type_name -> arista.studio_topology.v1.DeviceState
	165, // 97: arista.studio_topology.v1.DeviceStateStreamRequest.time:type_name -> arista.time.TimeBounds
	169, // 98: arista.studio_topology.v1.DeviceStateStreamResponse.value:type_name -> arista.studio_topology.v1.DeviceState
	159, // 99: arista.studio_topology.v1.DeviceStateStreamResponse.time:type_name -> google.protobuf.Timestamp
	160, // 100: arista.studio_topology.v1.DeviceStateStreamResponse.type:type_name -> arista.subscriptions.Operation
	169, // 101: arista.studio_topology.v1.DeviceStateBatchedStreamRequest.partial_eq_filter:type_name -> arista.studio_topology.v1.DeviceState
	165, // 102: arista.studio_topology.v1.DeviceStateBatchedStreamRequest.time:type_name -> arista.time.TimeBounds
	161, // 103: arista.studio_topology.v1.DeviceStateBatchedStreamRequest.max_messages:type_name -> google.protobuf.UInt32Value
	50,  // 104: arista.studio_topology.v1.DeviceStateBatchedStreamResponse.responses:type_name -> arista.studio_topology.v1.DeviceStateStreamResponse
	170, // 105: arista.studio_topology.v1.InterfaceInputConfigRequest.key:type_name -> arista.studio_topology.v1.InterfaceInputKey
	159, // 106: arista.studio_topology.v1.InterfaceInputConfigRequest.time:type_name -> google.protobuf.Timestamp
	171, // 107: arista.studio_topology.v1.InterfaceInputConfigResponse.value:type_name -> arista.studio_topology.v1.InterfaceInputConfig
	159, // 108: arista.studio_topology.v1.InterfaceInputConfigResponse.time:type_name -> google.protobuf.Timestamp
	170, // 109: arista.studio_topology.v1.InterfaceInputConfigSomeRequest.keys:type_name -> arista.studio_topology.v1.InterfaceInputKey
	159, // 110: arista.studio_topology.v1.InterfaceInputConfigSomeRequest.time:type_name -> google.protobuf.Timestamp
	171, // 111: arista.studio_topology.v1.InterfaceInputConfigSomeResponse.value:type_name -> arista.studio_topology.v1.InterfaceInputConfig
	164, // 112: arista.studio_topology.v1.InterfaceInputConfigSomeResponse.error:type_name -> google.protobuf.StringValue
	159, // 113: arista.studio_topology.v1.InterfaceInputConfigSomeResponse.time:type_name -> google.protobuf.Timestamp
	171, // 114: arista.studio_topology.v1.InterfaceInputConfigStreamRequest.partial_eq_filter:type_name -> arista.studio_topology.v1.InterfaceInputConfig
	165, // 115: arista.studio_topology.v1.InterfaceInputConfigStreamRequest.time:type_name -> arista.time.TimeBounds
	171, // 116: arista.studio_topology.v1.InterfaceInputConfigStreamResponse.value:type_name -> arista.studio_topology.v1.InterfaceInputConfig
	159, // 117: arista.studio_topology.v1.InterfaceInputConfigStreamResponse.time:type_name -> google.protobuf.Timestamp
	160, // 118: arista.studio_topology.v1.InterfaceInputConfigStreamResponse.type:type_name -> arista.subscriptions.Operation
	171, // 119: arista.studio_topology.v1.InterfaceInputConfigBatchedStreamRequest.partial_eq_filter:type_name -> arista.studio_topology.v1.InterfaceInputConfig
	165, // 120: arista.studio_topology.v1.InterfaceInputConfigBatchedStreamRequest.time:type_name -> arista.time.TimeBounds
	161, // 121: arista.studio_topology.v1.InterfaceInputConfigBatchedStreamRequest.max_messages:type_name -> google.protobuf.UInt32Value
	58,  // 122: arista.studio_topology.v1.InterfaceInputConfigBatchedStreamResponse.responses:type_name -> arista.studio_topology.v1.InterfaceInputConfigStreamResponse
	171, // 123: arista.studio_topology.v1.InterfaceInputConfigSetRequest.value:type_name -> arista.studio_topology.v1.InterfaceInputConfig
	171, // 124: arista.studio_topology.v1.InterfaceInputConfigSetResponse.value:type_name -> arista.studio_topology.v1.InterfaceInputConfig
	159, // 125: arista.studio_topology.v1.InterfaceInputConfigSetResponse.time:type_name -> google.protobuf.Timestamp
	171, // 126: arista.studio_topology.v1.InterfaceInputConfigSetSomeRequest.values:type_name -> arista.studio_topology.v1.InterfaceInputConfig
	170, // 127: arista.studio_topology.v1.InterfaceInputConfigSetSomeResponse.key:type_name -> arista.studio_topology.v1.InterfaceInputKey
	170, // 128: arista.studio_topology.v1.InterfaceInputConfigDeleteRequest.key:type_name -> arista.studio_topology.v1.InterfaceInputKey
	170, // 129: arista.studio_topology.v1.InterfaceInputConfigDeleteResponse.key:type_name -> arista.studio_topology.v1.InterfaceInputKey
	159, // 130: arista.studio_topology.v1.InterfaceInputConfigDeleteResponse.time:type_name -> google.protobuf.Timestamp
	170, // 131: arista.studio_topology.v1.InterfaceInputConfigDeleteSomeRequest.keys:type_name -> arista.studio_topology.v1.InterfaceInputKey
	170, // 132: arista.studio_topology.v1.InterfaceInputConfigDeleteSomeResponse.key:type_name -> arista.studio_topology.v1.InterfaceInputKey
	171, // 133: arista.studio_topology.v1.InterfaceInputConfigDeleteAllRequest.partial_eq_filter:type_name -> arista.studio_topology.v1.InterfaceInputConfig
	167, // 134: arista.studio_topology.v1.InterfaceInputConfigDeleteAllResponse.type:type_name -> fmp.DeleteError
	164, // 135: arista.studio_topology.v1.InterfaceInputConfigDeleteAllResponse.error:type_name -> google.protobuf.StringValue
	170, // 136: arista.studio_topology.v1.InterfaceInputConfigDeleteAllResponse.key:type_name -> arista.studio_topology.v1.InterfaceInputKey
	159, // 137: arista.studio_topology.v1.InterfaceInputConfigDeleteAllResponse.time:type_name -> google.protobuf.Timestamp
	162, // 138: arista.studio_topology.v1.ReplaceRequest.key:type_name -> arista.studio_topology.v1.DeviceKey
	159, // 139: arista.studio_topology.v1.ReplaceRequest.time:type_name -> google.protobuf.Timestamp
	172, // 140: arista.studio_topology.v1.ReplaceResponse.value:type_name -> arista.studio_topology.v1.Replace
	159, // 141: arista.studio_topology.v1.ReplaceResponse.time:type_name -> google.protobuf.Timestamp
	162, // 142: arista.studio_topology.v1.ReplaceSomeRequest.keys:type_name -> arista.studio_topology.v1.DeviceKey
	159, // 143: arista.studio_topology.v1.ReplaceSomeRequest.time:type_name -> google.protobuf.Timestamp
	172, // 144: arista.studio_topology.v1.ReplaceSomeResponse.value:type_name -> arista.studio_topology.v1.Replace
	164, // 145: arista.studio_topology.v1.ReplaceSomeResponse.error:type_name -> google.protobuf.StringValue
	159, // 146: arista.studio_topology.v1.ReplaceSomeResponse.time:type_name -> google.protobuf.Timestamp
	172, // 147: arista.studio_topology.v1.ReplaceStreamRequest.partial_eq_filter:type_name -> arista.studio_topology.v1.Replace
	165, // 148: arista.studio_topology.v1.ReplaceStreamRequest.time:type_name -> arista.time.TimeBounds
	172, // 149: arista.studio_topology.v1.ReplaceStreamResponse.value:type_name -> arista.studio_topology.v1.Replace
	159, // 150: arista.studio_topology.v1.ReplaceStreamResponse.time:type_name -> google.protobuf.Timestamp
	160, // 151: arista.studio_topology.v1.ReplaceStreamResponse.type:type_name -> arista.subscriptions.Operation
	172, // 152: arista.studio_topology.v1.ReplaceBatchedStreamRequest.partial_eq_filter:type_name -> arista.studio_topology.v1.Replace
	165, // 153: arista.studio_topology.v1.ReplaceBatchedStreamRequest.time:type_name -> arista.time.TimeBounds
	161, // 154: arista.studio_topology.v1.ReplaceBatchedStreamRequest.max_messages:type_name -> google.protobuf.UInt32Value
	76,  // 155: arista.studio_topology.v1.ReplaceBatchedStreamResponse.responses:type_name -> arista.studio_topology.v1.ReplaceStreamResponse
	162, // 156: arista.studio_topology.v1.ReplaceConfigRequest.key:type_name -> arista.studio_topology.v1.DeviceKey
	159, // 157: arista.studio_topology.v1.ReplaceConfigRequest.time:type_name -> google.protobuf.Timestamp
	173, // 158: arista.studio_topology.v1.ReplaceConfigResponse.value:type_name -> arista.studio_topology.v1.ReplaceConfig
	159, // 159: arista.studio_topology.v1.ReplaceConfigResponse.time:type_name -> google.protobuf.Timestamp
	162, // 160: arista.studio_topology.v1.ReplaceConfigSomeRequest.keys:type_name -> arista.studio_topology.v1.DeviceKey
	159, // 161: arista.studio_topology.v1.ReplaceConfigSomeRequest.time:type_name -> google.protobuf.Timestamp
	173, // 162: arista.studio_topology.v1.ReplaceConfigSomeResponse.value:type_name -> arista.studio_topology.v1.ReplaceConfig
	164, // 163: arista.studio_topology.v1.ReplaceConfigSomeResponse.error:type_name -> google.protobuf.StringValue
	159, // 164: arista.studio_topology.v1.ReplaceConfigSomeResponse.time:type_name -> google.protobuf.Timestamp
	173, // 165: arista.studio_topology.v1.ReplaceConfigStreamRequest.partial_eq_filter:type_name -> arista.studio_topology.v1.ReplaceConfig
	165, // 166: arista.studio_topology.v1.ReplaceConfigStreamRequest.time:type_name -> arista.time.TimeBounds
	173, // 167: arista.studio_topology.v1.ReplaceConfigStreamResponse.value:type_name -> arista.studio_topology.v1.ReplaceConfig
	159, // 168: arista.studio_topology.v1.ReplaceConfigStreamResponse.time:type_name -> google.protobuf.Timestamp
	160, // 169: arista.studio_topology.v1.ReplaceConfigStreamResponse.type:type_name -> arista.subscriptions.Operation
	173, // 170: arista.studio_topology.v1.ReplaceConfigBatchedStreamRequest.partial_eq_filter:type_name -> arista.studio_topology.v1.ReplaceConfig
	165, // 171: arista.studio_topology.v1.ReplaceConfigBatchedStreamRequest.time:type_name -> arista.time.TimeBounds
	161, // 172: arista.studio_topology.v1.ReplaceConfigBatchedStreamRequest.max_messages:type_name -> google.protobuf.UInt32Value
	84,  // 173: arista.studio_topology.v1.ReplaceConfigBatchedStreamResponse.responses:type_name -> arista.studio_topology.v1.ReplaceConfigStreamResponse
	173, // 174: arista.studio_topology.v1.ReplaceConfigSetRequest.value:type_name -> arista.studio_topology.v1.ReplaceConfig
	173, // 175: arista.studio_topology.v1.ReplaceConfigSetResponse.value:type_name -> arista.studio_topology.v1.ReplaceConfig
	159, // 176: arista.studio_topology.v1.ReplaceConfigSetResponse.time:type_name -> google.protobuf.Timestamp
	173, // 177: arista.studio_topology.v1.ReplaceConfigSetSomeRequest.values:type_name -> arista.studio_topology.v1.ReplaceConfig
	162, // 178: arista.studio_topology.v1.ReplaceConfigSetSomeResponse.key:type_name -> arista.studio_topology.v1.DeviceKey
	162, // 179: arista.studio_topology.v1.ReplaceConfigDeleteRequest.key:type_name -> arista.studio_topology.v1.DeviceKey
	162, // 180: arista.studio_topology.v1.ReplaceConfigDeleteResponse.key:type_name -> arista.studio_topology.v1.DeviceKey
	159, // 181: arista.studio_topology.v1.ReplaceConfigDeleteResponse.time:type_name -> google.protobuf.Timestamp
	162, // 182: arista.studio_topology.v1.ReplaceConfigDeleteSomeRequest.keys:type_name -> arista.studio_topology.v1.DeviceKey
	162, // 183: arista.studio_topology.v1.ReplaceConfigDeleteSomeResponse.key:type_name -> arista.studio_topology.v1.DeviceKey
	173, // 184: arista.studio_topology.v1.ReplaceConfigDeleteAllRequest.partial_eq_filter:type_name -> arista.studio_topology.v1.ReplaceConfig
	167, // 185: arista.studio_topology.v1.ReplaceConfigDeleteAllResponse.type:type_name -> fmp.DeleteError
	164, // 186: arista.studio_topology.v1.ReplaceConfigDeleteAllResponse.error:type_name -> google.protobuf.StringValue
	162, // 187: arista.studio_topology.v1.ReplaceConfigDeleteAllResponse.key:type_name -> arista.studio_topology.v1.DeviceKey
	159, // 188: arista.studio_topology.v1.ReplaceConfigDeleteAllResponse.time:type_name -> google.protobuf.Timestamp
	174, // 189: arista.studio_topology.v1.RevertConfigRequest.key:type_name -> arista.workspace.v1.WorkspaceKey
	159, // 190: arista.studio_topology.v1.RevertConfigRequest.time:type_name -> google.protobuf.Timestamp
	175, // 191: arista.studio_topology.v1.RevertConfigResponse.value:type_name -> arista.studio_topology.v1.RevertConfig
	159, // 192: arista.studio_topology.v1.RevertConfigResponse.time:type_name -> google.protobuf.Timestamp
	174, // 193: arista.studio_topology.v1.RevertConfigSomeRequest.keys:type_name -> arista.workspace.v1.WorkspaceKey
	159, // 194: arista.studio_topology.v1.RevertConfigSomeRequest.time:type_name -> google.protobuf.Timestamp
	175, // 195: arista.studio_topology.v1.RevertConfigSomeResponse.value:type_name -> arista.studio_topology.v1.RevertConfig
	164, // 196: arista.studio_topology.v1.RevertConfigSomeResponse.error:type_name -> google.protobuf.StringValue
	159, // 197: arista.studio_topology.v1.RevertConfigSomeResponse.time:type_name -> google.protobuf.Timestamp
	175, // 198: arista.studio_topology.v1.RevertConfigStreamRequest.partial_eq_filter:type_name -> arista.studio_topology.v1.RevertConfig
	165, // 199: arista.studio_topology.v1.RevertConfigStreamRequest.time:type_name -> arista.time.TimeBounds
	175, // 200: arista.studio_topology.v1.RevertConfigStreamResponse.value:type_name -> arista.studio_topology.v1.RevertConfig
	159, // 201: arista.studio_topology.v1.RevertConfigStreamResponse.time:type_name -> google.protobuf.Timestamp
	160, // 202: arista.studio_topology.v1.RevertConfigStreamResponse.type:type_name -> arista.subscriptions.Operation
	175, // 203: arista.studio_topology.v1.RevertConfigBatchedStreamRequest.partial_eq_filter:type_name -> arista.studio_topology.v1.RevertConfig
	165, // 204: arista.studio_topology.v1.RevertConfigBatchedStreamRequest.time:type_name -> arista.time.TimeBounds
	161, // 205: arista.studio_topology.v1.RevertConfigBatchedStreamRequest.max_messages:type_name -> google.protobuf.UInt32Value
	102, // 206: arista.studio_topology.v1.RevertConfigBatchedStreamResponse.responses:type_name -> arista.studio_topology.v1.RevertConfigStreamResponse
	175, // 207: arista.studio_topology.v1.RevertConfigSetRequest.value:type_name -> arista.studio_topology.v1.RevertConfig
	175, // 208: arista.studio_topology.v1.RevertConfigSetResponse.value:type_name -> arista.studio_topology.v1.RevertConfig
	159, // 209: arista.studio_topology.v1.RevertConfigSetResponse.time:type_name -> google.protobuf.Timestamp
	175, // 210: arista.studio_topology.v1.RevertConfigSetSomeRequest.values:type_name -> arista.studio_topology.v1.RevertConfig
	174, // 211: arista.studio_topology.v1.RevertConfigSetSomeResponse.key:type_name -> arista.workspace.v1.WorkspaceKey
	174, // 212: arista.studio_topology.v1.RevertConfigDeleteRequest.key:type_name -> arista.workspace.v1.WorkspaceKey
	174, // 213: arista.studio_topology.v1.RevertConfigDeleteResponse.key:type_name -> arista.workspace.v1.WorkspaceKey
	159, // 214: arista.studio_topology.v1.RevertConfigDeleteResponse.time:type_name -> google.protobuf.Timestamp
	174, // 215: arista.studio_topology.v1.RevertConfigDeleteSomeRequest.keys:type_name -> arista.workspace.v1.WorkspaceKey
	174, // 216: arista.studio_topology.v1.RevertConfigDeleteSomeResponse.key:type_name -> arista.workspace.v1.WorkspaceKey
	175, // 217: arista.studio_topology.v1.RevertConfigDeleteAllRequest.partial_eq_filter:type_name -> arista.studio_topology.v1.RevertConfig
	167, // 218: arista.studio_topology.v1.RevertConfigDeleteAllResponse.type:type_name -> fmp.DeleteError
	164, // 219: arista.studio_topology.v1.RevertConfigDeleteAllResponse.error:type_name -> google.protobuf.StringValue
	174, // 220: arista.studio_topology.v1.RevertConfigDeleteAllResponse.key:type_name -> arista.workspace.v1.WorkspaceKey
	159, // 221: arista.studio_topology.v1.RevertConfigDeleteAllResponse.time:type_name -> google.protobuf.Timestamp
	176, // 222: arista.studio_topology.v1.UpdateRequest.key:type_name -> arista.studio_topology.v1.UpdateKey
	159, // 223: arista.studio_topology.v1.UpdateRequest.time:type_name -> google.protobuf.Timestamp
	177, // 224: arista.studio_topology.v1.UpdateResponse.value:type_name -> arista.studio_topology.v1.Update
	159, // 225: arista.studio_topology.v1.UpdateResponse.time:type_name -> google.protobuf.Timestamp
	176, // 226: arista.studio_topology.v1.UpdateSomeRequest.keys:type_name -> arista.studio_topology.v1.UpdateKey
	159, // 227: arista.studio_topology.v1.UpdateSomeRequest.time:type_name -> google.protobuf.Timestamp
	177, // 228: arista.studio_topology.v1.UpdateSomeResponse.value:type_name -> arista.studio_topology.v1.Update
	164, // 229: arista.studio_topology.v1.UpdateSomeResponse.error:type_name -> google.protobuf.StringValue
	159, // 230: arista.studio_topology.v1.UpdateSomeResponse.time:type_name -> google.protobuf.Timestamp
	177, // 231: arista.studio_topology.v1.UpdateStreamRequest.partial_eq_filter:type_name -> arista.studio_topology.v1.Update
	165, // 232: arista.studio_topology.v1.UpdateStreamRequest.time:type_name -> arista.time.TimeBounds
	177, // 233: arista.studio_topology.v1.UpdateStreamResponse.value:type_name -> arista.studio_topology.v1.Update
	159, // 234: arista.studio_topology.v1.UpdateStreamResponse.time:type_name -> google.protobuf.Timestamp
	160, // 235: arista.studio_topology.v1.UpdateStreamResponse.type:type_name -> arista.subscriptions.Operation
	177, // 236: arista.studio_topology.v1.UpdateBatchedStreamRequest.partial_eq_filter:type_name -> arista.studio_topology.v1.Update
	165, // 237: arista.studio_topology.v1.UpdateBatchedStreamRequest.time:type_name -> arista.time.TimeBounds
	161, // 238: arista.studio_topology.v1.UpdateBatchedStreamRequest.max_messages:type_name -> google.protobuf.UInt32Value
	120, // 239: arista.studio_topology.v1.UpdateBatchedStreamResponse.responses:type_name -> arista.studio_topology.v1.UpdateStreamResponse
	176, // 240: arista.studio_topology.v1.UpdateConfigRequest.key:type_name -> arista.studio_topology.v1.UpdateKey
	159, // 241: arista.studio_topology.v1.UpdateConfigRequest.time:type_name -> google.protobuf.Timestamp
	178, // 242: arista.studio_topology.v1.UpdateConfigResponse.value:type_name -> arista.studio_topology.v1.UpdateConfig
	159, // 243: arista.studio_topology.v1.UpdateConfigResponse.time:type_name -> google.protobuf.Timestamp
	176, // 244: arista.studio_topology.v1.UpdateConfigSomeRequest.keys:type_name -> arista.studio_topology.v1.UpdateKey
	159, // 245: arista.studio_topology.v1.UpdateConfigSomeRequest.time:type_name -> google.protobuf.Timestamp
	178, // 246: arista.studio_topology.v1.UpdateConfigSomeResponse.value:type_name -> arista.studio_topology.v1.UpdateConfig
	164, // 247: arista.studio_topology.v1.UpdateConfigSomeResponse.error:type_name -> google.protobuf.StringValue
	159, // 248: arista.studio_topology.v1.UpdateConfigSomeResponse.time:type_name -> google.protobuf.Timestamp
	178, // 249: arista.studio_topology.v1.UpdateConfigStreamRequest.partial_eq_filter:type_name -> arista.studio_topology.v1.UpdateConfig
	165, // 250: arista.studio_topology.v1.UpdateConfigStreamRequest.time:type_name -> arista.time.TimeBounds
	178, // 251: arista.studio_topology.v1.UpdateConfigStreamResponse.value:type_name -> arista.studio_topology.v1.UpdateConfig
	159, // 252: arista.studio_topology.v1.UpdateConfigStreamResponse.time:type_name -> google.protobuf.Timestamp
	160, // 253: arista.studio_topology.v1.UpdateConfigStreamResponse.type:type_name -> arista.subscriptions.Operation
	178, // 254: arista.studio_topology.v1.UpdateConfigBatchedStreamRequest.partial_eq_filter:type_name -> arista.studio_topology.v1.UpdateConfig
	165, // 255: arista.studio_topology.v1.UpdateConfigBatchedStreamRequest.time:type_name -> arista.time.TimeBounds
	161, // 256: arista.studio_topology.v1.UpdateConfigBatchedStreamRequest.max_messages:type_name -> google.protobuf.UInt32Value
	128, // 257: arista.studio_topology.v1.UpdateConfigBatchedStreamResponse.responses:type_name -> arista.studio_topology.v1.UpdateConfigStreamResponse
	178, // 258: arista.studio_topology.v1.UpdateConfigSetRequest.value:type_name -> arista.studio_topology.v1.UpdateConfig
	178, // 259: arista.studio_topology.v1.UpdateConfigSetResponse.value:type_name -> arista.studio_topology.v1.UpdateConfig
	159, // 260: arista.studio_topology.v1.UpdateConfigSetResponse.time:type_name -> google.protobuf.Timestamp
	178, // 261: arista.studio_topology.v1.UpdateConfigSetSomeRequest.values:type_name -> arista.studio_topology.v1.UpdateConfig
	176, // 262: arista.studio_topology.v1.UpdateConfigSetSomeResponse.key:type_name -> arista.studio_topology.v1.UpdateKey
	176, // 263: arista.studio_topology.v1.UpdateConfigDeleteRequest.key:type_name -> arista.studio_topology.v1.UpdateKey
	176, // 264: arista.studio_topology.v1.UpdateConfigDeleteResponse.key:type_name -> arista.studio_topology.v1.UpdateKey
	159, // 265: arista.studio_topology.v1.UpdateConfigDeleteResponse.time:type_name -> google.protobuf.Timestamp
	176, // 266: arista.studio_topology.v1.UpdateConfigDeleteSomeRequest.keys:type_name -> arista.studio_topology.v1.UpdateKey
	176, // 267: arista.studio_topology.v1.UpdateConfigDeleteSomeResponse.key:type_name -> arista.studio_topology.v1.UpdateKey
	178, // 268: arista.studio_topology.v1.UpdateConfigDeleteAllRequest.partial_eq_filter:type_name -> arista.studio_topology.v1.UpdateConfig
	167, // 269: arista.studio_topology.v1.UpdateConfigDeleteAllResponse.type:type_name -> fmp.DeleteError
	164, // 270: arista.studio_topology.v1.UpdateConfigDeleteAllResponse.error:type_name -> google.protobuf.StringValue
	176, // 271: arista.studio_topology.v1.UpdateConfigDeleteAllResponse.key:type_name -> arista.studio_topology.v1.UpdateKey
	159, // 272: arista.studio_topology.v1.UpdateConfigDeleteAllResponse.time:type_name -> google.protobuf.Timestamp
	174, // 273: arista.studio_topology.v1.UpdateSyncConfigRequest.key:type_name -> arista.workspace.v1.WorkspaceKey
	159, // 274: arista.studio_topology.v1.UpdateSyncConfigRequest.time:type_name -> google.protobuf.Timestamp
	179, // 275: arista.studio_topology.v1.UpdateSyncConfigResponse.value:type_name -> arista.studio_topology.v1.UpdateSyncConfig
	159, // 276: arista.studio_topology.v1.UpdateSyncConfigResponse.time:type_name -> google.protobuf.Timestamp
	174, // 277: arista.studio_topology.v1.UpdateSyncConfigSomeRequest.keys:type_name -> arista.workspace.v1.WorkspaceKey
	159, // 278: arista.studio_topology.v1.UpdateSyncConfigSomeRequest.time:type_name -> google.protobuf.Timestamp
	179, // 279: arista.studio_topology.v1.UpdateSyncConfigSomeResponse.value:type_name -> arista.studio_topology.v1.UpdateSyncConfig
	164, // 280: arista.studio_topology.v1.UpdateSyncConfigSomeResponse.error:type_name -> google.protobuf.StringValue
	159, // 281: arista.studio_topology.v1.UpdateSyncConfigSomeResponse.time:type_name -> google.protobuf.Timestamp
	179, // 282: arista.studio_topology.v1.UpdateSyncConfigStreamRequest.partial_eq_filter:type_name -> arista.studio_topology.v1.UpdateSyncConfig
	165, // 283: arista.studio_topology.v1.UpdateSyncConfigStreamRequest.time:type_name -> arista.time.TimeBounds
	179, // 284: arista.studio_topology.v1.UpdateSyncConfigStreamResponse.value:type_name -> arista.studio_topology.v1.UpdateSyncConfig
	159, // 285: arista.studio_topology.v1.UpdateSyncConfigStreamResponse.time:type_name -> google.protobuf.Timestamp
	160, // 286: arista.studio_topology.v1.UpdateSyncConfigStreamResponse.type:type_name -> arista.subscriptions.Operation
	179, // 287: arista.studio_topology.v1.UpdateSyncConfigBatchedStreamRequest.partial_eq_filter:type_name -> arista.studio_topology.v1.UpdateSyncConfig
	165, // 288: arista.studio_topology.v1.UpdateSyncConfigBatchedStreamRequest.time:type_name -> arista.time.TimeBounds
	161, // 289: arista.studio_topology.v1.UpdateSyncConfigBatchedStreamRequest.max_messages:type_name -> google.protobuf.UInt32Value
	146, // 290: arista.studio_topology.v1.UpdateSyncConfigBatchedStreamResponse.responses:type_name -> arista.studio_topology.v1.UpdateSyncConfigStreamResponse
	179, // 291: arista.studio_topology.v1.UpdateSyncConfigSetRequest.value:type_name -> arista.studio_topology.v1.UpdateSyncConfig
	179, // 292: arista.studio_topology.v1.UpdateSyncConfigSetResponse.value:type_name -> arista.studio_topology.v1.UpdateSyncConfig
	159, // 293: arista.studio_topology.v1.UpdateSyncConfigSetResponse.time:type_name -> google.protobuf.Timestamp
	179, // 294: arista.studio_topology.v1.UpdateSyncConfigSetSomeRequest.values:type_name -> arista.studio_topology.v1.UpdateSyncConfig
	174, // 295: arista.studio_topology.v1.UpdateSyncConfigSetSomeResponse.key:type_name -> arista.workspace.v1.WorkspaceKey
	174, // 296: arista.studio_topology.v1.UpdateSyncConfigDeleteRequest.key:type_name -> arista.workspace.v1.WorkspaceKey
	174, // 297: arista.studio_topology.v1.UpdateSyncConfigDeleteResponse.key:type_name -> arista.workspace.v1.WorkspaceKey
	159, // 298: arista.studio_topology.v1.UpdateSyncConfigDeleteResponse.time:type_name -> google.protobuf.Timestamp
	174, // 299: arista.studio_topology.v1.UpdateSyncConfigDeleteSomeRequest.keys:type_name -> arista.workspace.v1.WorkspaceKey
	174, // 300: arista.studio_topology.v1.UpdateSyncConfigDeleteSomeResponse.key:type_name -> arista.workspace.v1.WorkspaceKey
	179, // 301: arista.studio_topology.v1.UpdateSyncConfigDeleteAllRequest.partial_eq_filter:type_name -> arista.studio_topology.v1.UpdateSyncConfig
	167, // 302: arista.studio_topology.v1.UpdateSyncConfigDeleteAllResponse.type:type_name -> fmp.DeleteError
	164, // 303: arista.studio_topology.v1.UpdateSyncConfigDeleteAllResponse.error:type_name -> google.protobuf.StringValue
	174, // 304: arista.studio_topology.v1.UpdateSyncConfigDeleteAllResponse.key:type_name -> arista.workspace.v1.WorkspaceKey
	159, // 305: arista.studio_topology.v1.UpdateSyncConfigDeleteAllResponse.time:type_name -> google.protobuf.Timestamp
	1,   // 306: arista.studio_topology.v1.DecommissionService.GetOne:input_type -> arista.studio_topology.v1.DecommissionRequest
	3,   // 307: arista.studio_topology.v1.DecommissionService.GetSome:input_type -> arista.studio_topology.v1.DecommissionSomeRequest
	5,   // 308: arista.studio_topology.v1.DecommissionService.GetAll:input_type -> arista.studio_topology.v1.DecommissionStreamRequest
	5,   // 309: arista.studio_topology.v1.DecommissionService.Subscribe:input_type -> arista.studio_topology.v1.DecommissionStreamRequest
	5,   // 310: arista.studio_topology.v1.DecommissionService.GetMeta:input_type -> arista.studio_topology.v1.DecommissionStreamRequest
	5,   // 311: arista.studio_topology.v1.DecommissionService.SubscribeMeta:input_type -> arista.studio_topology.v1.DecommissionStreamRequest
	7,   // 312: arista.studio_topology.v1.DecommissionService.GetAllBatched:input_type -> arista.studio_topology.v1.DecommissionBatchedStreamRequest
	7,   // 313: arista.studio_topology.v1.DecommissionService.SubscribeBatched:input_type -> arista.studio_topology.v1.DecommissionBatchedStreamRequest
	9,   // 314: arista.studio_topology.v1.DecommissionConfigService.GetOne:input_type -> arista.studio_topology.v1.DecommissionConfigRequest
	11,  // 315: arista.studio_topology.v1.DecommissionConfigService.GetSome:input_type -> arista.studio_topology.v1.DecommissionConfigSomeRequest
	13,  // 316: arista.studio_topology.v1.DecommissionConfigService.GetAll:input_type -> arista.studio_topology.v1.DecommissionConfigStreamRequest
	13,  // 317: arista.studio_topology.v1.DecommissionConfigService.Subscribe:input_type -> arista.studio_topology.v1.DecommissionConfigStreamRequest
	13,  // 318: arista.studio_topology.v1.DecommissionConfigService.GetMeta:input_type -> arista.studio_topology.v1.DecommissionConfigStreamRequest
	13,  // 319: arista.studio_topology.v1.DecommissionConfigService.SubscribeMeta:input_type -> arista.studio_topology.v1.DecommissionConfigStreamRequest
	17,  // 320: arista.studio_topology.v1.DecommissionConfigService.Set:input_type -> arista.studio_topology.v1.DecommissionConfigSetRequest
	19,  // 321: arista.studio_topology.v1.DecommissionConfigService.SetSome:input_type -> arista.studio_topology.v1.DecommissionConfigSetSomeRequest
	21,  // 322: arista.studio_topology.v1.DecommissionConfigService.Delete:input_type -> arista.studio_topology.v1.DecommissionConfigDeleteRequest
	23,  // 323: arista.studio_topology.v1.DecommissionConfigService.DeleteSome:input_type -> arista.studio_topology.v1.DecommissionConfigDeleteSomeRequest
	25,  // 324: arista.studio_topology.v1.DecommissionConfigService.DeleteAll:input_type -> arista.studio_topology.v1.DecommissionConfigDeleteAllRequest
	15,  // 325: arista.studio_topology.v1.DecommissionConfigService.GetAllBatched:input_type -> arista.studio_topology.v1.DecommissionConfigBatchedStreamRequest
	15,  // 326: arista.studio_topology.v1.DecommissionConfigService.SubscribeBatched:input_type -> arista.studio_topology.v1.DecommissionConfigBatchedStreamRequest
	27,  // 327: arista.studio_topology.v1.DeviceInputConfigService.GetOne:input_type -> arista.studio_topology.v1.DeviceInputConfigRequest
	29,  // 328: arista.studio_topology.v1.DeviceInputConfigService.GetSome:input_type -> arista.studio_topology.v1.DeviceInputConfigSomeRequest
	31,  // 329: arista.studio_topology.v1.DeviceInputConfigService.GetAll:input_type -> arista.studio_topology.v1.DeviceInputConfigStreamRequest
	31,  // 330: arista.studio_topology.v1.DeviceInputConfigService.Subscribe:input_type -> arista.studio_topology.v1.DeviceInputConfigStreamRequest
	31,  // 331: arista.studio_topology.v1.DeviceInputConfigService.GetMeta:input_type -> arista.studio_topology.v1.DeviceInputConfigStreamRequest
	31,  // 332: arista.studio_topology.v1.DeviceInputConfigService.SubscribeMeta:input_type -> arista.studio_topology.v1.DeviceInputConfigStreamRequest
	35,  // 333: arista.studio_topology.v1.DeviceInputConfigService.Set:input_type -> arista.studio_topology.v1.DeviceInputConfigSetRequest
	37,  // 334: arista.studio_topology.v1.DeviceInputConfigService.SetSome:input_type -> arista.studio_topology.v1.DeviceInputConfigSetSomeRequest
	39,  // 335: arista.studio_topology.v1.DeviceInputConfigService.Delete:input_type -> arista.studio_topology.v1.DeviceInputConfigDeleteRequest
	41,  // 336: arista.studio_topology.v1.DeviceInputConfigService.DeleteSome:input_type -> arista.studio_topology.v1.DeviceInputConfigDeleteSomeRequest
	43,  // 337: arista.studio_topology.v1.DeviceInputConfigService.DeleteAll:input_type -> arista.studio_topology.v1.DeviceInputConfigDeleteAllRequest
	33,  // 338: arista.studio_topology.v1.DeviceInputConfigService.GetAllBatched:input_type -> arista.studio_topology.v1.DeviceInputConfigBatchedStreamRequest
	33,  // 339: arista.studio_topology.v1.DeviceInputConfigService.SubscribeBatched:input_type -> arista.studio_topology.v1.DeviceInputConfigBatchedStreamRequest
	45,  // 340: arista.studio_topology.v1.DeviceStateService.GetOne:input_type -> arista.studio_topology.v1.DeviceStateRequest
	47,  // 341: arista.studio_topology.v1.DeviceStateService.GetSome:input_type -> arista.studio_topology.v1.DeviceStateSomeRequest
	49,  // 342: arista.studio_topology.v1.DeviceStateService.GetAll:input_type -> arista.studio_topology.v1.DeviceStateStreamRequest
	49,  // 343: arista.studio_topology.v1.DeviceStateService.Subscribe:input_type -> arista.studio_topology.v1.DeviceStateStreamRequest
	49,  // 344: arista.studio_topology.v1.DeviceStateService.GetMeta:input_type -> arista.studio_topology.v1.DeviceStateStreamRequest
	49,  // 345: arista.studio_topology.v1.DeviceStateService.SubscribeMeta:input_type -> arista.studio_topology.v1.DeviceStateStreamRequest
	51,  // 346: arista.studio_topology.v1.DeviceStateService.GetAllBatched:input_type -> arista.studio_topology.v1.DeviceStateBatchedStreamRequest
	51,  // 347: arista.studio_topology.v1.DeviceStateService.SubscribeBatched:input_type -> arista.studio_topology.v1.DeviceStateBatchedStreamRequest
	53,  // 348: arista.studio_topology.v1.InterfaceInputConfigService.GetOne:input_type -> arista.studio_topology.v1.InterfaceInputConfigRequest
	55,  // 349: arista.studio_topology.v1.InterfaceInputConfigService.GetSome:input_type -> arista.studio_topology.v1.InterfaceInputConfigSomeRequest
	57,  // 350: arista.studio_topology.v1.InterfaceInputConfigService.GetAll:input_type -> arista.studio_topology.v1.InterfaceInputConfigStreamRequest
	57,  // 351: arista.studio_topology.v1.InterfaceInputConfigService.Subscribe:input_type -> arista.studio_topology.v1.InterfaceInputConfigStreamRequest
	57,  // 352: arista.studio_topology.v1.InterfaceInputConfigService.GetMeta:input_type -> arista.studio_topology.v1.InterfaceInputConfigStreamRequest
	57,  // 353: arista.studio_topology.v1.InterfaceInputConfigService.SubscribeMeta:input_type -> arista.studio_topology.v1.InterfaceInputConfigStreamRequest
	61,  // 354: arista.studio_topology.v1.InterfaceInputConfigService.Set:input_type -> arista.studio_topology.v1.InterfaceInputConfigSetRequest
	63,  // 355: arista.studio_topology.v1.InterfaceInputConfigService.SetSome:input_type -> arista.studio_topology.v1.InterfaceInputConfigSetSomeRequest
	65,  // 356: arista.studio_topology.v1.InterfaceInputConfigService.Delete:input_type -> arista.studio_topology.v1.InterfaceInputConfigDeleteRequest
	67,  // 357: arista.studio_topology.v1.InterfaceInputConfigService.DeleteSome:input_type -> arista.studio_topology.v1.InterfaceInputConfigDeleteSomeRequest
	69,  // 358: arista.studio_topology.v1.InterfaceInputConfigService.DeleteAll:input_type -> arista.studio_topology.v1.InterfaceInputConfigDeleteAllRequest
	59,  // 359: arista.studio_topology.v1.InterfaceInputConfigService.GetAllBatched:input_type -> arista.studio_topology.v1.InterfaceInputConfigBatchedStreamRequest
	59,  // 360: arista.studio_topology.v1.InterfaceInputConfigService.SubscribeBatched:input_type -> arista.studio_topology.v1.InterfaceInputConfigBatchedStreamRequest
	71,  // 361: arista.studio_topology.v1.ReplaceService.GetOne:input_type -> arista.studio_topology.v1.ReplaceRequest
	73,  // 362: arista.studio_topology.v1.ReplaceService.GetSome:input_type -> arista.studio_topology.v1.ReplaceSomeRequest
	75,  // 363: arista.studio_topology.v1.ReplaceService.GetAll:input_type -> arista.studio_topology.v1.ReplaceStreamRequest
	75,  // 364: arista.studio_topology.v1.ReplaceService.Subscribe:input_type -> arista.studio_topology.v1.ReplaceStreamRequest
	75,  // 365: arista.studio_topology.v1.ReplaceService.GetMeta:input_type -> arista.studio_topology.v1.ReplaceStreamRequest
	75,  // 366: arista.studio_topology.v1.ReplaceService.SubscribeMeta:input_type -> arista.studio_topology.v1.ReplaceStreamRequest
	77,  // 367: arista.studio_topology.v1.ReplaceService.GetAllBatched:input_type -> arista.studio_topology.v1.ReplaceBatchedStreamRequest
	77,  // 368: arista.studio_topology.v1.ReplaceService.SubscribeBatched:input_type -> arista.studio_topology.v1.ReplaceBatchedStreamRequest
	79,  // 369: arista.studio_topology.v1.ReplaceConfigService.GetOne:input_type -> arista.studio_topology.v1.ReplaceConfigRequest
	81,  // 370: arista.studio_topology.v1.ReplaceConfigService.GetSome:input_type -> arista.studio_topology.v1.ReplaceConfigSomeRequest
	83,  // 371: arista.studio_topology.v1.ReplaceConfigService.GetAll:input_type -> arista.studio_topology.v1.ReplaceConfigStreamRequest
	83,  // 372: arista.studio_topology.v1.ReplaceConfigService.Subscribe:input_type -> arista.studio_topology.v1.ReplaceConfigStreamRequest
	83,  // 373: arista.studio_topology.v1.ReplaceConfigService.GetMeta:input_type -> arista.studio_topology.v1.ReplaceConfigStreamRequest
	83,  // 374: arista.studio_topology.v1.ReplaceConfigService.SubscribeMeta:input_type -> arista.studio_topology.v1.ReplaceConfigStreamRequest
	87,  // 375: arista.studio_topology.v1.ReplaceConfigService.Set:input_type -> arista.studio_topology.v1.ReplaceConfigSetRequest
	89,  // 376: arista.studio_topology.v1.ReplaceConfigService.SetSome:input_type -> arista.studio_topology.v1.ReplaceConfigSetSomeRequest
	91,  // 377: arista.studio_topology.v1.ReplaceConfigService.Delete:input_type -> arista.studio_topology.v1.ReplaceConfigDeleteRequest
	93,  // 378: arista.studio_topology.v1.ReplaceConfigService.DeleteSome:input_type -> arista.studio_topology.v1.ReplaceConfigDeleteSomeRequest
	95,  // 379: arista.studio_topology.v1.ReplaceConfigService.DeleteAll:input_type -> arista.studio_topology.v1.ReplaceConfigDeleteAllRequest
	85,  // 380: arista.studio_topology.v1.ReplaceConfigService.GetAllBatched:input_type -> arista.studio_topology.v1.ReplaceConfigBatchedStreamRequest
	85,  // 381: arista.studio_topology.v1.ReplaceConfigService.SubscribeBatched:input_type -> arista.studio_topology.v1.ReplaceConfigBatchedStreamRequest
	97,  // 382: arista.studio_topology.v1.RevertConfigService.GetOne:input_type -> arista.studio_topology.v1.RevertConfigRequest
	99,  // 383: arista.studio_topology.v1.RevertConfigService.GetSome:input_type -> arista.studio_topology.v1.RevertConfigSomeRequest
	101, // 384: arista.studio_topology.v1.RevertConfigService.GetAll:input_type -> arista.studio_topology.v1.RevertConfigStreamRequest
	101, // 385: arista.studio_topology.v1.RevertConfigService.Subscribe:input_type -> arista.studio_topology.v1.RevertConfigStreamRequest
	101, // 386: arista.studio_topology.v1.RevertConfigService.GetMeta:input_type -> arista.studio_topology.v1.RevertConfigStreamRequest
	101, // 387: arista.studio_topology.v1.RevertConfigService.SubscribeMeta:input_type -> arista.studio_topology.v1.RevertConfigStreamRequest
	105, // 388: arista.studio_topology.v1.RevertConfigService.Set:input_type -> arista.studio_topology.v1.RevertConfigSetRequest
	107, // 389: arista.studio_topology.v1.RevertConfigService.SetSome:input_type -> arista.studio_topology.v1.RevertConfigSetSomeRequest
	109, // 390: arista.studio_topology.v1.RevertConfigService.Delete:input_type -> arista.studio_topology.v1.RevertConfigDeleteRequest
	111, // 391: arista.studio_topology.v1.RevertConfigService.DeleteSome:input_type -> arista.studio_topology.v1.RevertConfigDeleteSomeRequest
	113, // 392: arista.studio_topology.v1.RevertConfigService.DeleteAll:input_type -> arista.studio_topology.v1.RevertConfigDeleteAllRequest
	103, // 393: arista.studio_topology.v1.RevertConfigService.GetAllBatched:input_type -> arista.studio_topology.v1.RevertConfigBatchedStreamRequest
	103, // 394: arista.studio_topology.v1.RevertConfigService.SubscribeBatched:input_type -> arista.studio_topology.v1.RevertConfigBatchedStreamRequest
	115, // 395: arista.studio_topology.v1.UpdateService.GetOne:input_type -> arista.studio_topology.v1.UpdateRequest
	117, // 396: arista.studio_topology.v1.UpdateService.GetSome:input_type -> arista.studio_topology.v1.UpdateSomeRequest
	119, // 397: arista.studio_topology.v1.UpdateService.GetAll:input_type -> arista.studio_topology.v1.UpdateStreamRequest
	119, // 398: arista.studio_topology.v1.UpdateService.Subscribe:input_type -> arista.studio_topology.v1.UpdateStreamRequest
	119, // 399: arista.studio_topology.v1.UpdateService.GetMeta:input_type -> arista.studio_topology.v1.UpdateStreamRequest
	119, // 400: arista.studio_topology.v1.UpdateService.SubscribeMeta:input_type -> arista.studio_topology.v1.UpdateStreamRequest
	121, // 401: arista.studio_topology.v1.UpdateService.GetAllBatched:input_type -> arista.studio_topology.v1.UpdateBatchedStreamRequest
	121, // 402: arista.studio_topology.v1.UpdateService.SubscribeBatched:input_type -> arista.studio_topology.v1.UpdateBatchedStreamRequest
	123, // 403: arista.studio_topology.v1.UpdateConfigService.GetOne:input_type -> arista.studio_topology.v1.UpdateConfigRequest
	125, // 404: arista.studio_topology.v1.UpdateConfigService.GetSome:input_type -> arista.studio_topology.v1.UpdateConfigSomeRequest
	127, // 405: arista.studio_topology.v1.UpdateConfigService.GetAll:input_type -> arista.studio_topology.v1.UpdateConfigStreamRequest
	127, // 406: arista.studio_topology.v1.UpdateConfigService.Subscribe:input_type -> arista.studio_topology.v1.UpdateConfigStreamRequest
	127, // 407: arista.studio_topology.v1.UpdateConfigService.GetMeta:input_type -> arista.studio_topology.v1.UpdateConfigStreamRequest
	127, // 408: arista.studio_topology.v1.UpdateConfigService.SubscribeMeta:input_type -> arista.studio_topology.v1.UpdateConfigStreamRequest
	131, // 409: arista.studio_topology.v1.UpdateConfigService.Set:input_type -> arista.studio_topology.v1.UpdateConfigSetRequest
	133, // 410: arista.studio_topology.v1.UpdateConfigService.SetSome:input_type -> arista.studio_topology.v1.UpdateConfigSetSomeRequest
	135, // 411: arista.studio_topology.v1.UpdateConfigService.Delete:input_type -> arista.studio_topology.v1.UpdateConfigDeleteRequest
	137, // 412: arista.studio_topology.v1.UpdateConfigService.DeleteSome:input_type -> arista.studio_topology.v1.UpdateConfigDeleteSomeRequest
	139, // 413: arista.studio_topology.v1.UpdateConfigService.DeleteAll:input_type -> arista.studio_topology.v1.UpdateConfigDeleteAllRequest
	129, // 414: arista.studio_topology.v1.UpdateConfigService.GetAllBatched:input_type -> arista.studio_topology.v1.UpdateConfigBatchedStreamRequest
	129, // 415: arista.studio_topology.v1.UpdateConfigService.SubscribeBatched:input_type -> arista.studio_topology.v1.UpdateConfigBatchedStreamRequest
	141, // 416: arista.studio_topology.v1.UpdateSyncConfigService.GetOne:input_type -> arista.studio_topology.v1.UpdateSyncConfigRequest
	143, // 417: arista.studio_topology.v1.UpdateSyncConfigService.GetSome:input_type -> arista.studio_topology.v1.UpdateSyncConfigSomeRequest
	145, // 418: arista.studio_topology.v1.UpdateSyncConfigService.GetAll:input_type -> arista.studio_topology.v1.UpdateSyncConfigStreamRequest
	145, // 419: arista.studio_topology.v1.UpdateSyncConfigService.Subscribe:input_type -> arista.studio_topology.v1.UpdateSyncConfigStreamRequest
	145, // 420: arista.studio_topology.v1.UpdateSyncConfigService.GetMeta:input_type -> arista.studio_topology.v1.UpdateSyncConfigStreamRequest
	145, // 421: arista.studio_topology.v1.UpdateSyncConfigService.SubscribeMeta:input_type -> arista.studio_topology.v1.UpdateSyncConfigStreamRequest
	149, // 422: arista.studio_topology.v1.UpdateSyncConfigService.Set:input_type -> arista.studio_topology.v1.UpdateSyncConfigSetRequest
	151, // 423: arista.studio_topology.v1.UpdateSyncConfigService.SetSome:input_type -> arista.studio_topology.v1.UpdateSyncConfigSetSomeRequest
	153, // 424: arista.studio_topology.v1.UpdateSyncConfigService.Delete:input_type -> arista.studio_topology.v1.UpdateSyncConfigDeleteRequest
	155, // 425: arista.studio_topology.v1.UpdateSyncConfigService.DeleteSome:input_type -> arista.studio_topology.v1.UpdateSyncConfigDeleteSomeRequest
	157, // 426: arista.studio_topology.v1.UpdateSyncConfigService.DeleteAll:input_type -> arista.studio_topology.v1.UpdateSyncConfigDeleteAllRequest
	147, // 427: arista.studio_topology.v1.UpdateSyncConfigService.GetAllBatched:input_type -> arista.studio_topology.v1.UpdateSyncConfigBatchedStreamRequest
	147, // 428: arista.studio_topology.v1.UpdateSyncConfigService.SubscribeBatched:input_type -> arista.studio_topology.v1.UpdateSyncConfigBatchedStreamRequest
	2,   // 429: arista.studio_topology.v1.DecommissionService.GetOne:output_type -> arista.studio_topology.v1.DecommissionResponse
	4,   // 430: arista.studio_topology.v1.DecommissionService.GetSome:output_type -> arista.studio_topology.v1.DecommissionSomeResponse
	6,   // 431: arista.studio_topology.v1.DecommissionService.GetAll:output_type -> arista.studio_topology.v1.DecommissionStreamResponse
	6,   // 432: arista.studio_topology.v1.DecommissionService.Subscribe:output_type -> arista.studio_topology.v1.DecommissionStreamResponse
	0,   // 433: arista.studio_topology.v1.DecommissionService.GetMeta:output_type -> arista.studio_topology.v1.MetaResponse
	0,   // 434: arista.studio_topology.v1.DecommissionService.SubscribeMeta:output_type -> arista.studio_topology.v1.MetaResponse
	8,   // 435: arista.studio_topology.v1.DecommissionService.GetAllBatched:output_type -> arista.studio_topology.v1.DecommissionBatchedStreamResponse
	8,   // 436: arista.studio_topology.v1.DecommissionService.SubscribeBatched:output_type -> arista.studio_topology.v1.DecommissionBatchedStreamResponse
	10,  // 437: arista.studio_topology.v1.DecommissionConfigService.GetOne:output_type -> arista.studio_topology.v1.DecommissionConfigResponse
	12,  // 438: arista.studio_topology.v1.DecommissionConfigService.GetSome:output_type -> arista.studio_topology.v1.DecommissionConfigSomeResponse
	14,  // 439: arista.studio_topology.v1.DecommissionConfigService.GetAll:output_type -> arista.studio_topology.v1.DecommissionConfigStreamResponse
	14,  // 440: arista.studio_topology.v1.DecommissionConfigService.Subscribe:output_type -> arista.studio_topology.v1.DecommissionConfigStreamResponse
	0,   // 441: arista.studio_topology.v1.DecommissionConfigService.GetMeta:output_type -> arista.studio_topology.v1.MetaResponse
	0,   // 442: arista.studio_topology.v1.DecommissionConfigService.SubscribeMeta:output_type -> arista.studio_topology.v1.MetaResponse
	18,  // 443: arista.studio_topology.v1.DecommissionConfigService.Set:output_type -> arista.studio_topology.v1.DecommissionConfigSetResponse
	20,  // 444: arista.studio_topology.v1.DecommissionConfigService.SetSome:output_type -> arista.studio_topology.v1.DecommissionConfigSetSomeResponse
	22,  // 445: arista.studio_topology.v1.DecommissionConfigService.Delete:output_type -> arista.studio_topology.v1.DecommissionConfigDeleteResponse
	24,  // 446: arista.studio_topology.v1.DecommissionConfigService.DeleteSome:output_type -> arista.studio_topology.v1.DecommissionConfigDeleteSomeResponse
	26,  // 447: arista.studio_topology.v1.DecommissionConfigService.DeleteAll:output_type -> arista.studio_topology.v1.DecommissionConfigDeleteAllResponse
	16,  // 448: arista.studio_topology.v1.DecommissionConfigService.GetAllBatched:output_type -> arista.studio_topology.v1.DecommissionConfigBatchedStreamResponse
	16,  // 449: arista.studio_topology.v1.DecommissionConfigService.SubscribeBatched:output_type -> arista.studio_topology.v1.DecommissionConfigBatchedStreamResponse
	28,  // 450: arista.studio_topology.v1.DeviceInputConfigService.GetOne:output_type -> arista.studio_topology.v1.DeviceInputConfigResponse
	30,  // 451: arista.studio_topology.v1.DeviceInputConfigService.GetSome:output_type -> arista.studio_topology.v1.DeviceInputConfigSomeResponse
	32,  // 452: arista.studio_topology.v1.DeviceInputConfigService.GetAll:output_type -> arista.studio_topology.v1.DeviceInputConfigStreamResponse
	32,  // 453: arista.studio_topology.v1.DeviceInputConfigService.Subscribe:output_type -> arista.studio_topology.v1.DeviceInputConfigStreamResponse
	0,   // 454: arista.studio_topology.v1.DeviceInputConfigService.GetMeta:output_type -> arista.studio_topology.v1.MetaResponse
	0,   // 455: arista.studio_topology.v1.DeviceInputConfigService.SubscribeMeta:output_type -> arista.studio_topology.v1.MetaResponse
	36,  // 456: arista.studio_topology.v1.DeviceInputConfigService.Set:output_type -> arista.studio_topology.v1.DeviceInputConfigSetResponse
	38,  // 457: arista.studio_topology.v1.DeviceInputConfigService.SetSome:output_type -> arista.studio_topology.v1.DeviceInputConfigSetSomeResponse
	40,  // 458: arista.studio_topology.v1.DeviceInputConfigService.Delete:output_type -> arista.studio_topology.v1.DeviceInputConfigDeleteResponse
	42,  // 459: arista.studio_topology.v1.DeviceInputConfigService.DeleteSome:output_type -> arista.studio_topology.v1.DeviceInputConfigDeleteSomeResponse
	44,  // 460: arista.studio_topology.v1.DeviceInputConfigService.DeleteAll:output_type -> arista.studio_topology.v1.DeviceInputConfigDeleteAllResponse
	34,  // 461: arista.studio_topology.v1.DeviceInputConfigService.GetAllBatched:output_type -> arista.studio_topology.v1.DeviceInputConfigBatchedStreamResponse
	34,  // 462: arista.studio_topology.v1.DeviceInputConfigService.SubscribeBatched:output_type -> arista.studio_topology.v1.DeviceInputConfigBatchedStreamResponse
	46,  // 463: arista.studio_topology.v1.DeviceStateService.GetOne:output_type -> arista.studio_topology.v1.DeviceStateResponse
	48,  // 464: arista.studio_topology.v1.DeviceStateService.GetSome:output_type -> arista.studio_topology.v1.DeviceStateSomeResponse
	50,  // 465: arista.studio_topology.v1.DeviceStateService.GetAll:output_type -> arista.studio_topology.v1.DeviceStateStreamResponse
	50,  // 466: arista.studio_topology.v1.DeviceStateService.Subscribe:output_type -> arista.studio_topology.v1.DeviceStateStreamResponse
	0,   // 467: arista.studio_topology.v1.DeviceStateService.GetMeta:output_type -> arista.studio_topology.v1.MetaResponse
	0,   // 468: arista.studio_topology.v1.DeviceStateService.SubscribeMeta:output_type -> arista.studio_topology.v1.MetaResponse
	52,  // 469: arista.studio_topology.v1.DeviceStateService.GetAllBatched:output_type -> arista.studio_topology.v1.DeviceStateBatchedStreamResponse
	52,  // 470: arista.studio_topology.v1.DeviceStateService.SubscribeBatched:output_type -> arista.studio_topology.v1.DeviceStateBatchedStreamResponse
	54,  // 471: arista.studio_topology.v1.InterfaceInputConfigService.GetOne:output_type -> arista.studio_topology.v1.InterfaceInputConfigResponse
	56,  // 472: arista.studio_topology.v1.InterfaceInputConfigService.GetSome:output_type -> arista.studio_topology.v1.InterfaceInputConfigSomeResponse
	58,  // 473: arista.studio_topology.v1.InterfaceInputConfigService.GetAll:output_type -> arista.studio_topology.v1.InterfaceInputConfigStreamResponse
	58,  // 474: arista.studio_topology.v1.InterfaceInputConfigService.Subscribe:output_type -> arista.studio_topology.v1.InterfaceInputConfigStreamResponse
	0,   // 475: arista.studio_topology.v1.InterfaceInputConfigService.GetMeta:output_type -> arista.studio_topology.v1.MetaResponse
	0,   // 476: arista.studio_topology.v1.InterfaceInputConfigService.SubscribeMeta:output_type -> arista.studio_topology.v1.MetaResponse
	62,  // 477: arista.studio_topology.v1.InterfaceInputConfigService.Set:output_type -> arista.studio_topology.v1.InterfaceInputConfigSetResponse
	64,  // 478: arista.studio_topology.v1.InterfaceInputConfigService.SetSome:output_type -> arista.studio_topology.v1.InterfaceInputConfigSetSomeResponse
	66,  // 479: arista.studio_topology.v1.InterfaceInputConfigService.Delete:output_type -> arista.studio_topology.v1.InterfaceInputConfigDeleteResponse
	68,  // 480: arista.studio_topology.v1.InterfaceInputConfigService.DeleteSome:output_type -> arista.studio_topology.v1.InterfaceInputConfigDeleteSomeResponse
	70,  // 481: arista.studio_topology.v1.InterfaceInputConfigService.DeleteAll:output_type -> arista.studio_topology.v1.InterfaceInputConfigDeleteAllResponse
	60,  // 482: arista.studio_topology.v1.InterfaceInputConfigService.GetAllBatched:output_type -> arista.studio_topology.v1.InterfaceInputConfigBatchedStreamResponse
	60,  // 483: arista.studio_topology.v1.InterfaceInputConfigService.SubscribeBatched:output_type -> arista.studio_topology.v1.InterfaceInputConfigBatchedStreamResponse
	72,  // 484: arista.studio_topology.v1.ReplaceService.GetOne:output_type -> arista.studio_topology.v1.ReplaceResponse
	74,  // 485: arista.studio_topology.v1.ReplaceService.GetSome:output_type -> arista.studio_topology.v1.ReplaceSomeResponse
	76,  // 486: arista.studio_topology.v1.ReplaceService.GetAll:output_type -> arista.studio_topology.v1.ReplaceStreamResponse
	76,  // 487: arista.studio_topology.v1.ReplaceService.Subscribe:output_type -> arista.studio_topology.v1.ReplaceStreamResponse
	0,   // 488: arista.studio_topology.v1.ReplaceService.GetMeta:output_type -> arista.studio_topology.v1.MetaResponse
	0,   // 489: arista.studio_topology.v1.ReplaceService.SubscribeMeta:output_type -> arista.studio_topology.v1.MetaResponse
	78,  // 490: arista.studio_topology.v1.ReplaceService.GetAllBatched:output_type -> arista.studio_topology.v1.ReplaceBatchedStreamResponse
	78,  // 491: arista.studio_topology.v1.ReplaceService.SubscribeBatched:output_type -> arista.studio_topology.v1.ReplaceBatchedStreamResponse
	80,  // 492: arista.studio_topology.v1.ReplaceConfigService.GetOne:output_type -> arista.studio_topology.v1.ReplaceConfigResponse
	82,  // 493: arista.studio_topology.v1.ReplaceConfigService.GetSome:output_type -> arista.studio_topology.v1.ReplaceConfigSomeResponse
	84,  // 494: arista.studio_topology.v1.ReplaceConfigService.GetAll:output_type -> arista.studio_topology.v1.ReplaceConfigStreamResponse
	84,  // 495: arista.studio_topology.v1.ReplaceConfigService.Subscribe:output_type -> arista.studio_topology.v1.ReplaceConfigStreamResponse
	0,   // 496: arista.studio_topology.v1.ReplaceConfigService.GetMeta:output_type -> arista.studio_topology.v1.MetaResponse
	0,   // 497: arista.studio_topology.v1.ReplaceConfigService.SubscribeMeta:output_type -> arista.studio_topology.v1.MetaResponse
	88,  // 498: arista.studio_topology.v1.ReplaceConfigService.Set:output_type -> arista.studio_topology.v1.ReplaceConfigSetResponse
	90,  // 499: arista.studio_topology.v1.ReplaceConfigService.SetSome:output_type -> arista.studio_topology.v1.ReplaceConfigSetSomeResponse
	92,  // 500: arista.studio_topology.v1.ReplaceConfigService.Delete:output_type -> arista.studio_topology.v1.ReplaceConfigDeleteResponse
	94,  // 501: arista.studio_topology.v1.ReplaceConfigService.DeleteSome:output_type -> arista.studio_topology.v1.ReplaceConfigDeleteSomeResponse
	96,  // 502: arista.studio_topology.v1.ReplaceConfigService.DeleteAll:output_type -> arista.studio_topology.v1.ReplaceConfigDeleteAllResponse
	86,  // 503: arista.studio_topology.v1.ReplaceConfigService.GetAllBatched:output_type -> arista.studio_topology.v1.ReplaceConfigBatchedStreamResponse
	86,  // 504: arista.studio_topology.v1.ReplaceConfigService.SubscribeBatched:output_type -> arista.studio_topology.v1.ReplaceConfigBatchedStreamResponse
	98,  // 505: arista.studio_topology.v1.RevertConfigService.GetOne:output_type -> arista.studio_topology.v1.RevertConfigResponse
	100, // 506: arista.studio_topology.v1.RevertConfigService.GetSome:output_type -> arista.studio_topology.v1.RevertConfigSomeResponse
	102, // 507: arista.studio_topology.v1.RevertConfigService.GetAll:output_type -> arista.studio_topology.v1.RevertConfigStreamResponse
	102, // 508: arista.studio_topology.v1.RevertConfigService.Subscribe:output_type -> arista.studio_topology.v1.RevertConfigStreamResponse
	0,   // 509: arista.studio_topology.v1.RevertConfigService.GetMeta:output_type -> arista.studio_topology.v1.MetaResponse
	0,   // 510: arista.studio_topology.v1.RevertConfigService.SubscribeMeta:output_type -> arista.studio_topology.v1.MetaResponse
	106, // 511: arista.studio_topology.v1.RevertConfigService.Set:output_type -> arista.studio_topology.v1.RevertConfigSetResponse
	108, // 512: arista.studio_topology.v1.RevertConfigService.SetSome:output_type -> arista.studio_topology.v1.RevertConfigSetSomeResponse
	110, // 513: arista.studio_topology.v1.RevertConfigService.Delete:output_type -> arista.studio_topology.v1.RevertConfigDeleteResponse
	112, // 514: arista.studio_topology.v1.RevertConfigService.DeleteSome:output_type -> arista.studio_topology.v1.RevertConfigDeleteSomeResponse
	114, // 515: arista.studio_topology.v1.RevertConfigService.DeleteAll:output_type -> arista.studio_topology.v1.RevertConfigDeleteAllResponse
	104, // 516: arista.studio_topology.v1.RevertConfigService.GetAllBatched:output_type -> arista.studio_topology.v1.RevertConfigBatchedStreamResponse
	104, // 517: arista.studio_topology.v1.RevertConfigService.SubscribeBatched:output_type -> arista.studio_topology.v1.RevertConfigBatchedStreamResponse
	116, // 518: arista.studio_topology.v1.UpdateService.GetOne:output_type -> arista.studio_topology.v1.UpdateResponse
	118, // 519: arista.studio_topology.v1.UpdateService.GetSome:output_type -> arista.studio_topology.v1.UpdateSomeResponse
	120, // 520: arista.studio_topology.v1.UpdateService.GetAll:output_type -> arista.studio_topology.v1.UpdateStreamResponse
	120, // 521: arista.studio_topology.v1.UpdateService.Subscribe:output_type -> arista.studio_topology.v1.UpdateStreamResponse
	0,   // 522: arista.studio_topology.v1.UpdateService.GetMeta:output_type -> arista.studio_topology.v1.MetaResponse
	0,   // 523: arista.studio_topology.v1.UpdateService.SubscribeMeta:output_type -> arista.studio_topology.v1.MetaResponse
	122, // 524: arista.studio_topology.v1.UpdateService.GetAllBatched:output_type -> arista.studio_topology.v1.UpdateBatchedStreamResponse
	122, // 525: arista.studio_topology.v1.UpdateService.SubscribeBatched:output_type -> arista.studio_topology.v1.UpdateBatchedStreamResponse
	124, // 526: arista.studio_topology.v1.UpdateConfigService.GetOne:output_type -> arista.studio_topology.v1.UpdateConfigResponse
	126, // 527: arista.studio_topology.v1.UpdateConfigService.GetSome:output_type -> arista.studio_topology.v1.UpdateConfigSomeResponse
	128, // 528: arista.studio_topology.v1.UpdateConfigService.GetAll:output_type -> arista.studio_topology.v1.UpdateConfigStreamResponse
	128, // 529: arista.studio_topology.v1.UpdateConfigService.Subscribe:output_type -> arista.studio_topology.v1.UpdateConfigStreamResponse
	0,   // 530: arista.studio_topology.v1.UpdateConfigService.GetMeta:output_type -> arista.studio_topology.v1.MetaResponse
	0,   // 531: arista.studio_topology.v1.UpdateConfigService.SubscribeMeta:output_type -> arista.studio_topology.v1.MetaResponse
	132, // 532: arista.studio_topology.v1.UpdateConfigService.Set:output_type -> arista.studio_topology.v1.UpdateConfigSetResponse
	134, // 533: arista.studio_topology.v1.UpdateConfigService.SetSome:output_type -> arista.studio_topology.v1.UpdateConfigSetSomeResponse
	136, // 534: arista.studio_topology.v1.UpdateConfigService.Delete:output_type -> arista.studio_topology.v1.UpdateConfigDeleteResponse
	138, // 535: arista.studio_topology.v1.UpdateConfigService.DeleteSome:output_type -> arista.studio_topology.v1.UpdateConfigDeleteSomeResponse
	140, // 536: arista.studio_topology.v1.UpdateConfigService.DeleteAll:output_type -> arista.studio_topology.v1.UpdateConfigDeleteAllResponse
	130, // 537: arista.studio_topology.v1.UpdateConfigService.GetAllBatched:output_type -> arista.studio_topology.v1.UpdateConfigBatchedStreamResponse
	130, // 538: arista.studio_topology.v1.UpdateConfigService.SubscribeBatched:output_type -> arista.studio_topology.v1.UpdateConfigBatchedStreamResponse
	142, // 539: arista.studio_topology.v1.UpdateSyncConfigService.GetOne:output_type -> arista.studio_topology.v1.UpdateSyncConfigResponse
	144, // 540: arista.studio_topology.v1.UpdateSyncConfigService.GetSome:output_type -> arista.studio_topology.v1.UpdateSyncConfigSomeResponse
	146, // 541: arista.studio_topology.v1.UpdateSyncConfigService.GetAll:output_type -> arista.studio_topology.v1.UpdateSyncConfigStreamResponse
	146, // 542: arista.studio_topology.v1.UpdateSyncConfigService.Subscribe:output_type -> arista.studio_topology.v1.UpdateSyncConfigStreamResponse
	0,   // 543: arista.studio_topology.v1.UpdateSyncConfigService.GetMeta:output_type -> arista.studio_topology.v1.MetaResponse
	0,   // 544: arista.studio_topology.v1.UpdateSyncConfigService.SubscribeMeta:output_type -> arista.studio_topology.v1.MetaResponse
	150, // 545: arista.studio_topology.v1.UpdateSyncConfigService.Set:output_type -> arista.studio_topology.v1.UpdateSyncConfigSetResponse
	152, // 546: arista.studio_topology.v1.UpdateSyncConfigService.SetSome:output_type -> arista.studio_topology.v1.UpdateSyncConfigSetSomeResponse
	154, // 547: arista.studio_topology.v1.UpdateSyncConfigService.Delete:output_type -> arista.studio_topology.v1.UpdateSyncConfigDeleteResponse
	156, // 548: arista.studio_topology.v1.UpdateSyncConfigService.DeleteSome:output_type -> arista.studio_topology.v1.UpdateSyncConfigDeleteSomeResponse
	158, // 549: arista.studio_topology.v1.UpdateSyncConfigService.DeleteAll:output_type -> arista.studio_topology.v1.UpdateSyncConfigDeleteAllResponse
	148, // 550: arista.studio_topology.v1.UpdateSyncConfigService.GetAllBatched:output_type -> arista.studio_topology.v1.UpdateSyncConfigBatchedStreamResponse
	148, // 551: arista.studio_topology.v1.UpdateSyncConfigService.SubscribeBatched:output_type -> arista.studio_topology.v1.UpdateSyncConfigBatchedStreamResponse
	429, // [429:552] is the sub-list for method output_type
	306, // [306:429] is the sub-list for method input_type
	306, // [306:306] is the sub-list for extension type_name
	306, // [306:306] is the sub-list for extension extendee
	0,   // [0:306] is the sub-list for field type_name
}

func init() { file_arista_studio_topology_v1_services_gen_proto_init() }
func file_arista_studio_topology_v1_services_gen_proto_init() {
	if File_arista_studio_topology_v1_services_gen_proto != nil {
		return
	}
	file_arista_studio_topology_v1_studio_topology_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecommissionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecommissionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecommissionSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecommissionSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecommissionStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecommissionStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecommissionBatchedStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecommissionBatchedStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecommissionConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecommissionConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecommissionConfigSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecommissionConfigSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecommissionConfigStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecommissionConfigStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecommissionConfigBatchedStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecommissionConfigBatchedStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecommissionConfigSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecommissionConfigSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecommissionConfigSetSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecommissionConfigSetSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecommissionConfigDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecommissionConfigDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecommissionConfigDeleteSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecommissionConfigDeleteSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecommissionConfigDeleteAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecommissionConfigDeleteAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInputConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInputConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInputConfigSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInputConfigSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInputConfigStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInputConfigStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInputConfigBatchedStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInputConfigBatchedStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInputConfigSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInputConfigSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInputConfigSetSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInputConfigSetSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInputConfigDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInputConfigDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInputConfigDeleteSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInputConfigDeleteSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInputConfigDeleteAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInputConfigDeleteAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceStateSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceStateSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceStateStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceStateStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceStateBatchedStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceStateBatchedStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceInputConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceInputConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceInputConfigSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceInputConfigSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceInputConfigStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceInputConfigStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceInputConfigBatchedStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceInputConfigBatchedStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceInputConfigSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceInputConfigSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceInputConfigSetSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceInputConfigSetSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceInputConfigDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceInputConfigDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceInputConfigDeleteSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceInputConfigDeleteSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceInputConfigDeleteAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceInputConfigDeleteAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceBatchedStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceBatchedStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceConfigSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceConfigSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceConfigStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceConfigStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceConfigBatchedStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceConfigBatchedStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceConfigSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceConfigSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceConfigSetSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceConfigSetSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceConfigDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceConfigDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceConfigDeleteSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceConfigDeleteSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceConfigDeleteAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceConfigDeleteAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevertConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevertConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevertConfigSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevertConfigSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevertConfigStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevertConfigStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevertConfigBatchedStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevertConfigBatchedStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevertConfigSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevertConfigSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevertConfigSetSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevertConfigSetSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevertConfigDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevertConfigDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevertConfigDeleteSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevertConfigDeleteSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevertConfigDeleteAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevertConfigDeleteAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBatchedStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBatchedStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConfigSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConfigSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConfigStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConfigStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConfigBatchedStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConfigBatchedStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConfigSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConfigSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConfigSetSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConfigSetSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConfigDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConfigDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConfigDeleteSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConfigDeleteSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConfigDeleteAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConfigDeleteAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSyncConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSyncConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSyncConfigSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSyncConfigSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSyncConfigStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSyncConfigStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSyncConfigBatchedStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSyncConfigBatchedStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSyncConfigSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSyncConfigSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSyncConfigSetSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSyncConfigSetSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSyncConfigDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSyncConfigDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSyncConfigDeleteSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSyncConfigDeleteSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSyncConfigDeleteAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_services_gen_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSyncConfigDeleteAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_arista_studio_topology_v1_services_gen_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   159,
			NumExtensions: 0,
			NumServices:   11,
		},
		GoTypes:           file_arista_studio_topology_v1_services_gen_proto_goTypes,
		DependencyIndexes: file_arista_studio_topology_v1_services_gen_proto_depIdxs,
		MessageInfos:      file_arista_studio_topology_v1_services_gen_proto_msgTypes,
	}.Build()
	File_arista_studio_topology_v1_services_gen_proto = out.File
	file_arista_studio_topology_v1_services_gen_proto_rawDesc = nil
	file_arista_studio_topology_v1_services_gen_proto_goTypes = nil
	file_arista_studio_topology_v1_services_gen_proto_depIdxs = nil
}
