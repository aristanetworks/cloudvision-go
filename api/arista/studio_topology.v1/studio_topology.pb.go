// Copyright (c) 2025 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

// NOTE: This is a workspace-aware Resource API.
// Please see workspace.v1 for more information.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v4.24.4
// source: arista/studio_topology.v1/studio_topology.proto

package studio_topology

import (
	workspace_v1 "github.com/aristanetworks/cloudvision-go/api/arista/workspace.v1"
	fmp "github.com/aristanetworks/cloudvision-go/api/fmp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Element defines the fundamental types of elements in topology.
type Element int32

const (
	// ELEMENT_UNSPECIFIED indicates an unspecified element type.
	Element_ELEMENT_UNSPECIFIED Element = 0
	// ELEMENT_DEVICE indicates a device.
	Element_ELEMENT_DEVICE Element = 1
	// ELEMENT_INTERFACE indicates an interface.
	Element_ELEMENT_INTERFACE Element = 2
	// ELEMENT_CONNECTION indicates a connection.
	Element_ELEMENT_CONNECTION Element = 3
)

// Enum value maps for Element.
var (
	Element_name = map[int32]string{
		0: "ELEMENT_UNSPECIFIED",
		1: "ELEMENT_DEVICE",
		2: "ELEMENT_INTERFACE",
		3: "ELEMENT_CONNECTION",
	}
	Element_value = map[string]int32{
		"ELEMENT_UNSPECIFIED": 0,
		"ELEMENT_DEVICE":      1,
		"ELEMENT_INTERFACE":   2,
		"ELEMENT_CONNECTION":  3,
	}
)

func (x Element) Enum() *Element {
	p := new(Element)
	*p = x
	return p
}

func (x Element) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Element) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_studio_topology_v1_studio_topology_proto_enumTypes[0].Descriptor()
}

func (Element) Type() protoreflect.EnumType {
	return &file_arista_studio_topology_v1_studio_topology_proto_enumTypes[0]
}

func (x Element) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Element.Descriptor instead.
func (Element) EnumDescriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_studio_topology_proto_rawDescGZIP(), []int{0}
}

// Operation defines the operations that may be performed on the topology.
type Operation int32

const (
	// OPERATION_UNSPECIFIED indicates an unspecified operation.
	Operation_OPERATION_UNSPECIFIED Operation = 0
	// OPERATION_ADDED indicates addition of an Element.
	Operation_OPERATION_ADDED Operation = 1
	// OPERATION_MODIFIED indicates modification of an Element.
	Operation_OPERATION_MODIFIED Operation = 2
	// OPERATION_REMOVED indicates removal of an Element.
	Operation_OPERATION_REMOVED Operation = 3
)

// Enum value maps for Operation.
var (
	Operation_name = map[int32]string{
		0: "OPERATION_UNSPECIFIED",
		1: "OPERATION_ADDED",
		2: "OPERATION_MODIFIED",
		3: "OPERATION_REMOVED",
	}
	Operation_value = map[string]int32{
		"OPERATION_UNSPECIFIED": 0,
		"OPERATION_ADDED":       1,
		"OPERATION_MODIFIED":    2,
		"OPERATION_REMOVED":     3,
	}
)

func (x Operation) Enum() *Operation {
	p := new(Operation)
	*p = x
	return p
}

func (x Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Operation) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_studio_topology_v1_studio_topology_proto_enumTypes[1].Descriptor()
}

func (Operation) Type() protoreflect.EnumType {
	return &file_arista_studio_topology_v1_studio_topology_proto_enumTypes[1]
}

func (x Operation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Operation.Descriptor instead.
func (Operation) EnumDescriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_studio_topology_proto_rawDescGZIP(), []int{1}
}

// UpdateStatus defines the set of statuses that apply to individual topology updates.
type UpdateStatus int32

const (
	// UPDATE_STATUS_UNSPECIFIED indicates an unspecified update status.
	UpdateStatus_UPDATE_STATUS_UNSPECIFIED UpdateStatus = 0
	// UPDATE_STATUS_NEW indicates the update is new.
	UpdateStatus_UPDATE_STATUS_NEW UpdateStatus = 1
	// UPDATE_STATUS_ACCEPTED indicates the update is accepted.
	UpdateStatus_UPDATE_STATUS_ACCEPTED UpdateStatus = 2
	// UPDATE_STATUS_IGNORED indicates the update is ignored.
	UpdateStatus_UPDATE_STATUS_IGNORED UpdateStatus = 3
)

// Enum value maps for UpdateStatus.
var (
	UpdateStatus_name = map[int32]string{
		0: "UPDATE_STATUS_UNSPECIFIED",
		1: "UPDATE_STATUS_NEW",
		2: "UPDATE_STATUS_ACCEPTED",
		3: "UPDATE_STATUS_IGNORED",
	}
	UpdateStatus_value = map[string]int32{
		"UPDATE_STATUS_UNSPECIFIED": 0,
		"UPDATE_STATUS_NEW":         1,
		"UPDATE_STATUS_ACCEPTED":    2,
		"UPDATE_STATUS_IGNORED":     3,
	}
)

func (x UpdateStatus) Enum() *UpdateStatus {
	p := new(UpdateStatus)
	*p = x
	return p
}

func (x UpdateStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_studio_topology_v1_studio_topology_proto_enumTypes[2].Descriptor()
}

func (UpdateStatus) Type() protoreflect.EnumType {
	return &file_arista_studio_topology_v1_studio_topology_proto_enumTypes[2]
}

func (x UpdateStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateStatus.Descriptor instead.
func (UpdateStatus) EnumDescriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_studio_topology_proto_rawDescGZIP(), []int{2}
}

// DecommissionStatus enumerates the status of decommissioning a device.
type DecommissionStatus int32

const (
	// DECOMMISSION_STATUS_UNSPECIFIED indicates that the device was decommissioned with
	// an unspecified state.
	DecommissionStatus_DECOMMISSION_STATUS_UNSPECIFIED DecommissionStatus = 0
	// DECOMMISSION_STATUS_SUCCESS indicates that the device was successfully decommissioned.
	DecommissionStatus_DECOMMISSION_STATUS_SUCCESS DecommissionStatus = 1
	// DECOMMISSION_STATUS_FAILURE indicates an error with decommissioning the device.
	DecommissionStatus_DECOMMISSION_STATUS_FAILURE DecommissionStatus = 2
)

// Enum value maps for DecommissionStatus.
var (
	DecommissionStatus_name = map[int32]string{
		0: "DECOMMISSION_STATUS_UNSPECIFIED",
		1: "DECOMMISSION_STATUS_SUCCESS",
		2: "DECOMMISSION_STATUS_FAILURE",
	}
	DecommissionStatus_value = map[string]int32{
		"DECOMMISSION_STATUS_UNSPECIFIED": 0,
		"DECOMMISSION_STATUS_SUCCESS":     1,
		"DECOMMISSION_STATUS_FAILURE":     2,
	}
)

func (x DecommissionStatus) Enum() *DecommissionStatus {
	p := new(DecommissionStatus)
	*p = x
	return p
}

func (x DecommissionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DecommissionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_studio_topology_v1_studio_topology_proto_enumTypes[3].Descriptor()
}

func (DecommissionStatus) Type() protoreflect.EnumType {
	return &file_arista_studio_topology_v1_studio_topology_proto_enumTypes[3]
}

func (x DecommissionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DecommissionStatus.Descriptor instead.
func (DecommissionStatus) EnumDescriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_studio_topology_proto_rawDescGZIP(), []int{3}
}

// ReplaceStatus enumerates the status of the device.
type ReplaceStatus int32

const (
	// REPLACE_STATUS_UNSPECIFIED indicates that the device was replaced with
	// an unspecified state.
	ReplaceStatus_REPLACE_STATUS_UNSPECIFIED ReplaceStatus = 0
	// REPLACE_STATUS_SUCCESS indicates that the device was successfully replaced.
	ReplaceStatus_REPLACE_STATUS_SUCCESS ReplaceStatus = 1
	// REPLACE_STATUS_FAILURE indicates an error with replace.
	ReplaceStatus_REPLACE_STATUS_FAILURE ReplaceStatus = 2
)

// Enum value maps for ReplaceStatus.
var (
	ReplaceStatus_name = map[int32]string{
		0: "REPLACE_STATUS_UNSPECIFIED",
		1: "REPLACE_STATUS_SUCCESS",
		2: "REPLACE_STATUS_FAILURE",
	}
	ReplaceStatus_value = map[string]int32{
		"REPLACE_STATUS_UNSPECIFIED": 0,
		"REPLACE_STATUS_SUCCESS":     1,
		"REPLACE_STATUS_FAILURE":     2,
	}
)

func (x ReplaceStatus) Enum() *ReplaceStatus {
	p := new(ReplaceStatus)
	*p = x
	return p
}

func (x ReplaceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReplaceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_studio_topology_v1_studio_topology_proto_enumTypes[4].Descriptor()
}

func (ReplaceStatus) Type() protoreflect.EnumType {
	return &file_arista_studio_topology_v1_studio_topology_proto_enumTypes[4]
}

func (x ReplaceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReplaceStatus.Descriptor instead.
func (ReplaceStatus) EnumDescriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_studio_topology_proto_rawDescGZIP(), []int{4}
}

// DeviceInfo contains device properties.
type DeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// device_id identifies the device uniquely.
	DeviceId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// model_name indicates the model of the device.
	ModelName *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
	// mac_address indicates the MAC address of the device.
	MacAddress *fmp.MACAddress `protobuf:"bytes,3,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	// hostname indicates the hostname of the device.
	Hostname *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=hostname,proto3" json:"hostname,omitempty"`
}

func (x *DeviceInfo) Reset() {
	*x = DeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_studio_topology_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfo) ProtoMessage() {}

func (x *DeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_studio_topology_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfo.ProtoReflect.Descriptor instead.
func (*DeviceInfo) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_studio_topology_proto_rawDescGZIP(), []int{0}
}

func (x *DeviceInfo) GetDeviceId() *wrapperspb.StringValue {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

func (x *DeviceInfo) GetModelName() *wrapperspb.StringValue {
	if x != nil {
		return x.ModelName
	}
	return nil
}

func (x *DeviceInfo) GetMacAddress() *fmp.MACAddress {
	if x != nil {
		return x.MacAddress
	}
	return nil
}

func (x *DeviceInfo) GetHostname() *wrapperspb.StringValue {
	if x != nil {
		return x.Hostname
	}
	return nil
}

// InterfaceInfo contains interface properties.
type InterfaceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of an interface.
	Name *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// neighbor_device_id indicates the device ID of the neighbor to which
	// this interface is connected.
	NeighborDeviceId *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=neighbor_device_id,json=neighborDeviceId,proto3" json:"neighbor_device_id,omitempty"`
	// neighbor_interface_name indicates the interface on the neighbor to which
	// this interface is connected.
	NeighborInterfaceName *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=neighbor_interface_name,json=neighborInterfaceName,proto3" json:"neighbor_interface_name,omitempty"`
}

func (x *InterfaceInfo) Reset() {
	*x = InterfaceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_studio_topology_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceInfo) ProtoMessage() {}

func (x *InterfaceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_studio_topology_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceInfo.ProtoReflect.Descriptor instead.
func (*InterfaceInfo) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_studio_topology_proto_rawDescGZIP(), []int{1}
}

func (x *InterfaceInfo) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *InterfaceInfo) GetNeighborDeviceId() *wrapperspb.StringValue {
	if x != nil {
		return x.NeighborDeviceId
	}
	return nil
}

func (x *InterfaceInfo) GetNeighborInterfaceName() *wrapperspb.StringValue {
	if x != nil {
		return x.NeighborInterfaceName
	}
	return nil
}

// InterfaceInfos is a list of InterfaceInfo.
type InterfaceInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values is a list of InterfaceInfo.
	Values []*InterfaceInfo `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *InterfaceInfos) Reset() {
	*x = InterfaceInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_studio_topology_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceInfos) ProtoMessage() {}

func (x *InterfaceInfos) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_studio_topology_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceInfos.ProtoReflect.Descriptor instead.
func (*InterfaceInfos) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_studio_topology_proto_rawDescGZIP(), []int{2}
}

func (x *InterfaceInfos) GetValues() []*InterfaceInfo {
	if x != nil {
		return x.Values
	}
	return nil
}

// DeviceKey uniquely identifies the device for a workspace.
type DeviceKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// workspace_id identifies the workspace uniquely.
	WorkspaceId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	// device_id identifies the device uniquely.
	DeviceId *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (x *DeviceKey) Reset() {
	*x = DeviceKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_studio_topology_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceKey) ProtoMessage() {}

func (x *DeviceKey) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_studio_topology_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceKey.ProtoReflect.Descriptor instead.
func (*DeviceKey) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_studio_topology_proto_rawDescGZIP(), []int{3}
}

func (x *DeviceKey) GetWorkspaceId() *wrapperspb.StringValue {
	if x != nil {
		return x.WorkspaceId
	}
	return nil
}

func (x *DeviceKey) GetDeviceId() *wrapperspb.StringValue {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

// DeviceInputConfig is the desired topology input for a device.
type DeviceInputConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key uniquely identifies the device ID for a given workspace.
	Key *DeviceKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// device_info contains device properties.
	DeviceInfo *DeviceInfo `protobuf:"bytes,2,opt,name=device_info,json=deviceInfo,proto3" json:"device_info,omitempty"`
	// remove if set to true will remove the device from mainline
	// post workspace merge
	Remove *wrapperspb.BoolValue `protobuf:"bytes,3,opt,name=remove,proto3" json:"remove,omitempty"`
}

func (x *DeviceInputConfig) Reset() {
	*x = DeviceInputConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_studio_topology_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInputConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInputConfig) ProtoMessage() {}

func (x *DeviceInputConfig) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_studio_topology_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInputConfig.ProtoReflect.Descriptor instead.
func (*DeviceInputConfig) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_studio_topology_proto_rawDescGZIP(), []int{4}
}

func (x *DeviceInputConfig) GetKey() *DeviceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *DeviceInputConfig) GetDeviceInfo() *DeviceInfo {
	if x != nil {
		return x.DeviceInfo
	}
	return nil
}

func (x *DeviceInputConfig) GetRemove() *wrapperspb.BoolValue {
	if x != nil {
		return x.Remove
	}
	return nil
}

// InterfaceInputKey is the set of inputs that uniquely identify
// the interface for a workspace.
type InterfaceInputKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// workspace_id identifies the workspace uniquely.
	WorkspaceId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	// device_id identifies the device uniquely.
	DeviceId *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// interface_id along with device_id identifies the interface uniquely.
	InterfaceId *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=interface_id,json=interfaceId,proto3" json:"interface_id,omitempty"`
}

func (x *InterfaceInputKey) Reset() {
	*x = InterfaceInputKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_studio_topology_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceInputKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceInputKey) ProtoMessage() {}

func (x *InterfaceInputKey) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_studio_topology_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceInputKey.ProtoReflect.Descriptor instead.
func (*InterfaceInputKey) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_studio_topology_proto_rawDescGZIP(), []int{5}
}

func (x *InterfaceInputKey) GetWorkspaceId() *wrapperspb.StringValue {
	if x != nil {
		return x.WorkspaceId
	}
	return nil
}

func (x *InterfaceInputKey) GetDeviceId() *wrapperspb.StringValue {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

func (x *InterfaceInputKey) GetInterfaceId() *wrapperspb.StringValue {
	if x != nil {
		return x.InterfaceId
	}
	return nil
}

// InterfaceInputConfig is the resource for manually adding
// an interface in I&T studios
type InterfaceInputConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key uniquely identifies the interface for a given workspace.
	Key *InterfaceInputKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// interface_info contains interface properties.
	InterfaceInfo *InterfaceInfo `protobuf:"bytes,2,opt,name=interface_info,json=interfaceInfo,proto3" json:"interface_info,omitempty"`
	// remove if set to true will remove the interface from mainline
	// post workspace merge
	Remove *wrapperspb.BoolValue `protobuf:"bytes,3,opt,name=remove,proto3" json:"remove,omitempty"`
}

func (x *InterfaceInputConfig) Reset() {
	*x = InterfaceInputConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_studio_topology_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceInputConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceInputConfig) ProtoMessage() {}

func (x *InterfaceInputConfig) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_studio_topology_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceInputConfig.ProtoReflect.Descriptor instead.
func (*InterfaceInputConfig) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_studio_topology_proto_rawDescGZIP(), []int{6}
}

func (x *InterfaceInputConfig) GetKey() *InterfaceInputKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *InterfaceInputConfig) GetInterfaceInfo() *InterfaceInfo {
	if x != nil {
		return x.InterfaceInfo
	}
	return nil
}

func (x *InterfaceInputConfig) GetRemove() *wrapperspb.BoolValue {
	if x != nil {
		return x.Remove
	}
	return nil
}

// DeviceState is the state of a device written by
// InterfaceInputConfig, DeviceInputConfig and
// UpdateConfig resources
type DeviceState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key uniquely identifies the device for a given workspace.
	Key *DeviceKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// device_info contains device properties
	DeviceInfo *DeviceInfo `protobuf:"bytes,2,opt,name=device_info,json=deviceInfo,proto3" json:"device_info,omitempty"`
	// interface_infos contains interface properties of all the interfaces
	// belonging to the device
	InterfaceInfos *InterfaceInfos `protobuf:"bytes,3,opt,name=interface_infos,json=interfaceInfos,proto3" json:"interface_infos,omitempty"`
}

func (x *DeviceState) Reset() {
	*x = DeviceState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_studio_topology_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceState) ProtoMessage() {}

func (x *DeviceState) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_studio_topology_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceState.ProtoReflect.Descriptor instead.
func (*DeviceState) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_studio_topology_proto_rawDescGZIP(), []int{7}
}

func (x *DeviceState) GetKey() *DeviceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *DeviceState) GetDeviceInfo() *DeviceInfo {
	if x != nil {
		return x.DeviceInfo
	}
	return nil
}

func (x *DeviceState) GetInterfaceInfos() *InterfaceInfos {
	if x != nil {
		return x.InterfaceInfos
	}
	return nil
}

// UpdateKey uniquely identifies a workspace topology update.
type UpdateKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// workspace_id identifies the workspace uniquely.
	WorkspaceId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	// update_id identifies the update uniquely.
	UpdateId *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=update_id,json=updateId,proto3" json:"update_id,omitempty"`
}

func (x *UpdateKey) Reset() {
	*x = UpdateKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_studio_topology_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateKey) ProtoMessage() {}

func (x *UpdateKey) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_studio_topology_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateKey.ProtoReflect.Descriptor instead.
func (*UpdateKey) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_studio_topology_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateKey) GetWorkspaceId() *wrapperspb.StringValue {
	if x != nil {
		return x.WorkspaceId
	}
	return nil
}

func (x *UpdateKey) GetUpdateId() *wrapperspb.StringValue {
	if x != nil {
		return x.UpdateId
	}
	return nil
}

// UpdateConfig contains the acceptance status of an Update.
type UpdateConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key uniquely identifies the update.
	Key *UpdateKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// status indicates the status of the topology update.
	Status UpdateStatus `protobuf:"varint,2,opt,name=status,proto3,enum=arista.studio_topology.v1.UpdateStatus" json:"status,omitempty"`
	// remove if set to true will remove the update key from mainline
	// post workspace merge. This can only be set true for ignored keys
	// since we don't carry accepted keys to mainline post workspace
	// merge
	Remove *wrapperspb.BoolValue `protobuf:"bytes,3,opt,name=remove,proto3" json:"remove,omitempty"`
}

func (x *UpdateConfig) Reset() {
	*x = UpdateConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_studio_topology_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConfig) ProtoMessage() {}

func (x *UpdateConfig) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_studio_topology_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConfig.ProtoReflect.Descriptor instead.
func (*UpdateConfig) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_studio_topology_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateConfig) GetKey() *UpdateKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *UpdateConfig) GetStatus() UpdateStatus {
	if x != nil {
		return x.Status
	}
	return UpdateStatus_UPDATE_STATUS_UNSPECIFIED
}

func (x *UpdateConfig) GetRemove() *wrapperspb.BoolValue {
	if x != nil {
		return x.Remove
	}
	return nil
}

// Update represents an update on to the workspace.
type Update struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key uniquely identifies the update.
	Key *UpdateKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// element indicates the type of a network element.
	Element Element `protobuf:"varint,2,opt,name=element,proto3,enum=arista.studio_topology.v1.Element" json:"element,omitempty"`
	// operation indicates the type of operation on the topology update.
	Operation Operation `protobuf:"varint,3,opt,name=operation,proto3,enum=arista.studio_topology.v1.Operation" json:"operation,omitempty"`
	// status indicates the status of the topology update.
	Status UpdateStatus `protobuf:"varint,4,opt,name=status,proto3,enum=arista.studio_topology.v1.UpdateStatus" json:"status,omitempty"`
	// description describes the topology update in short.
	Description *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// device_id indicates the device associated with the update.
	DeviceId *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (x *Update) Reset() {
	*x = Update{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_studio_topology_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Update) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Update) ProtoMessage() {}

func (x *Update) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_studio_topology_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Update.ProtoReflect.Descriptor instead.
func (*Update) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_studio_topology_proto_rawDescGZIP(), []int{10}
}

func (x *Update) GetKey() *UpdateKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Update) GetElement() Element {
	if x != nil {
		return x.Element
	}
	return Element_ELEMENT_UNSPECIFIED
}

func (x *Update) GetOperation() Operation {
	if x != nil {
		return x.Operation
	}
	return Operation_OPERATION_UNSPECIFIED
}

func (x *Update) GetStatus() UpdateStatus {
	if x != nil {
		return x.Status
	}
	return UpdateStatus_UPDATE_STATUS_UNSPECIFIED
}

func (x *Update) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Update) GetDeviceId() *wrapperspb.StringValue {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

// UpdateSyncConfig model represents a point in time all updates
// are to be accepted.
type UpdateSyncConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key uniquely identifies the workspace.
	Key *workspace_v1.WorkspaceKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// sync_time indicates the desired synchronization time with the live topology.
	// If the sync_time indicated in the config takes effect without error,
	// it will appear in the state model, and then all updates that occurred up to
	// and including the timestamp in the state model will be accepted.
	SyncTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=sync_time,json=syncTime,proto3" json:"sync_time,omitempty"`
}

func (x *UpdateSyncConfig) Reset() {
	*x = UpdateSyncConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_studio_topology_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSyncConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSyncConfig) ProtoMessage() {}

func (x *UpdateSyncConfig) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_studio_topology_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSyncConfig.ProtoReflect.Descriptor instead.
func (*UpdateSyncConfig) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_studio_topology_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateSyncConfig) GetKey() *workspace_v1.WorkspaceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *UpdateSyncConfig) GetSyncTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SyncTime
	}
	return nil
}

// RevertConfig is the model provided to revert a workspace.
type RevertConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key uniquely identifies the workspace.
	Key *workspace_v1.WorkspaceKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *RevertConfig) Reset() {
	*x = RevertConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_studio_topology_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevertConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevertConfig) ProtoMessage() {}

func (x *RevertConfig) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_studio_topology_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevertConfig.ProtoReflect.Descriptor instead.
func (*RevertConfig) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_studio_topology_proto_rawDescGZIP(), []int{12}
}

func (x *RevertConfig) GetKey() *workspace_v1.WorkspaceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

// DecommissionConfig is the resource for decommissioning
// the device from the studio.
type DecommissionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key uniquely identifies the device for a given workspace.
	Key *DeviceKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *DecommissionConfig) Reset() {
	*x = DecommissionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_studio_topology_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecommissionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecommissionConfig) ProtoMessage() {}

func (x *DecommissionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_studio_topology_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecommissionConfig.ProtoReflect.Descriptor instead.
func (*DecommissionConfig) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_studio_topology_proto_rawDescGZIP(), []int{13}
}

func (x *DecommissionConfig) GetKey() *DeviceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

// Decommission is the resource that holds the decommissioning
// state of a device.
type Decommission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key uniquely identifies the device in a given workspace.
	Key *DeviceKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// created_at is the time at which decommissioning was first initiated.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// created_by is the name of the user who first initiated decommissioning.
	CreatedBy *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// last_modified_at is the time at which the decommissioning was last modified.
	LastModifiedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=last_modified_at,json=lastModifiedAt,proto3" json:"last_modified_at,omitempty"`
	// last_modified_by is the name of the user that last modified the status.
	LastModifiedBy *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=last_modified_by,json=lastModifiedBy,proto3" json:"last_modified_by,omitempty"`
	// status of the decommissioning operation
	Status DecommissionStatus `protobuf:"varint,6,opt,name=status,proto3,enum=arista.studio_topology.v1.DecommissionStatus" json:"status,omitempty"`
	// error indicates if there is a failure in decommissioning
	Error *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *Decommission) Reset() {
	*x = Decommission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_studio_topology_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Decommission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Decommission) ProtoMessage() {}

func (x *Decommission) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_studio_topology_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Decommission.ProtoReflect.Descriptor instead.
func (*Decommission) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_studio_topology_proto_rawDescGZIP(), []int{14}
}

func (x *Decommission) GetKey() *DeviceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Decommission) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Decommission) GetCreatedBy() *wrapperspb.StringValue {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *Decommission) GetLastModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastModifiedAt
	}
	return nil
}

func (x *Decommission) GetLastModifiedBy() *wrapperspb.StringValue {
	if x != nil {
		return x.LastModifiedBy
	}
	return nil
}

func (x *Decommission) GetStatus() DecommissionStatus {
	if x != nil {
		return x.Status
	}
	return DecommissionStatus_DECOMMISSION_STATUS_UNSPECIFIED
}

func (x *Decommission) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

// ReplaceConfig is the resource for replacing a device with another device in Studios.
type ReplaceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key uniquely identifies the original device to be replaced in a given workspace.
	Key *DeviceKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// replacement_device_id is the device to replace the original device with.
	// All references to the original device in Studios and tags will be replaced with this device.
	ReplacementDeviceId *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=replacement_device_id,json=replacementDeviceId,proto3" json:"replacement_device_id,omitempty"`
}

func (x *ReplaceConfig) Reset() {
	*x = ReplaceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_studio_topology_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceConfig) ProtoMessage() {}

func (x *ReplaceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_studio_topology_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceConfig.ProtoReflect.Descriptor instead.
func (*ReplaceConfig) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_studio_topology_proto_rawDescGZIP(), []int{15}
}

func (x *ReplaceConfig) GetKey() *DeviceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ReplaceConfig) GetReplacementDeviceId() *wrapperspb.StringValue {
	if x != nil {
		return x.ReplacementDeviceId
	}
	return nil
}

// Replace is the resource that holds the status of the replace operation.
type Replace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key uniquely identifies the original device for a given workspace.
	Key *DeviceKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// replacement_device_id is the device to replace the original device with.
	ReplacementDeviceId *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=replacement_device_id,json=replacementDeviceId,proto3" json:"replacement_device_id,omitempty"`
	// created_at is the time at which the status was first set.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// created_by is the name of the user that first set the status.
	CreatedBy *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// last_modified_at is the time at which the status was last modified.
	LastModifiedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=last_modified_at,json=lastModifiedAt,proto3" json:"last_modified_at,omitempty"`
	// last_modified_by is the name of the user that last modified the status.
	LastModifiedBy *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=last_modified_by,json=lastModifiedBy,proto3" json:"last_modified_by,omitempty"`
	// status indicates the status of the replace operation.
	Status ReplaceStatus `protobuf:"varint,7,opt,name=status,proto3,enum=arista.studio_topology.v1.ReplaceStatus" json:"status,omitempty"`
	// error provides the reason if there is a failure in replace.
	Error *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *Replace) Reset() {
	*x = Replace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_topology_v1_studio_topology_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Replace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Replace) ProtoMessage() {}

func (x *Replace) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_topology_v1_studio_topology_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Replace.ProtoReflect.Descriptor instead.
func (*Replace) Descriptor() ([]byte, []int) {
	return file_arista_studio_topology_v1_studio_topology_proto_rawDescGZIP(), []int{16}
}

func (x *Replace) GetKey() *DeviceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Replace) GetReplacementDeviceId() *wrapperspb.StringValue {
	if x != nil {
		return x.ReplacementDeviceId
	}
	return nil
}

func (x *Replace) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Replace) GetCreatedBy() *wrapperspb.StringValue {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *Replace) GetLastModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastModifiedAt
	}
	return nil
}

func (x *Replace) GetLastModifiedBy() *wrapperspb.StringValue {
	if x != nil {
		return x.LastModifiedBy
	}
	return nil
}

func (x *Replace) GetStatus() ReplaceStatus {
	if x != nil {
		return x.Status
	}
	return ReplaceStatus_REPLACE_STATUS_UNSPECIFIED
}

func (x *Replace) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

var File_arista_studio_topology_v1_studio_topology_proto protoreflect.FileDescriptor

var file_arista_studio_topology_v1_studio_topology_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x19, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x14, 0x66, 0x6d,
	0x70, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0e, 0x66, 0x6d, 0x70, 0x2f, 0x79, 0x61, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x23, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf0, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x30, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x4d, 0x41, 0x43, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x38, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xe3, 0x01, 0x0a, 0x0d,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x4a, 0x0a, 0x12, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x17, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x52, 0x0a, 0x0e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x12, 0x40, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x09, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x3a,
	0x04, 0x80, 0x8e, 0x19, 0x01, 0x22, 0xcf, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x36, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x46, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x06, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x3a,
	0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72, 0x77, 0x22, 0xd6, 0x01, 0x0a, 0x11, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x3f, 0x0a,
	0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x39,
	0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0c, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x3a, 0x04, 0x80, 0x8e, 0x19, 0x01,
	0x22, 0xe3, 0x01, 0x0a, 0x14, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3e, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4f, 0x0a, 0x0e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x06, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x3a, 0x06,
	0xfa, 0x8d, 0x19, 0x02, 0x72, 0x77, 0x22, 0xe9, 0x01, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x46,
	0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x52, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02,
	0x72, 0x6f, 0x22, 0x8d, 0x01, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x12, 0x3f, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x39, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x3a, 0x04, 0x80, 0x8e,
	0x19, 0x01, 0x22, 0xc3, 0x01, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x36, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x06,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72, 0x77, 0x22, 0x86, 0x03, 0x0a, 0x06, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x07, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39,
	0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72,
	0x6f, 0x22, 0x88, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x33, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x09, 0x73,
	0x79, 0x6e, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x73, 0x79, 0x6e, 0x63,
	0x54, 0x69, 0x6d, 0x65, 0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72, 0x77, 0x22, 0x4b, 0x0a, 0x0c,
	0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x33, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72, 0x77, 0x22, 0x54, 0x0a, 0x12, 0x44, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x36, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b,
	0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72, 0x77, 0x22,
	0xcf, 0x03, 0x0a, 0x0c, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x36, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x12, 0x44, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x46, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e,
	0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x12, 0x45,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72,
	0x6f, 0x22, 0xa1, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x36, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x50, 0x0a, 0x15, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x3a, 0x06, 0xfa,
	0x8d, 0x19, 0x02, 0x72, 0x77, 0x22, 0x97, 0x04, 0x0a, 0x07, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x12, 0x36, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x50, 0x0a, 0x15, 0x72, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x12, 0x44, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x46, 0x0a, 0x10, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x28, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72, 0x6f, 0x2a,
	0x65, 0x0a, 0x07, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4c,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4c, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x10, 0x02, 0x12, 0x16,
	0x0a, 0x12, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x2a, 0x6a, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13,
	0x0a, 0x0f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x44, 0x44, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x44,
	0x10, 0x03, 0x2a, 0x7b, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x4e, 0x45, 0x57, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x03, 0x2a,
	0x7b, 0x0a, 0x12, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x45,
	0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x44,
	0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x2a, 0x67, 0x0a, 0x0d,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a,
	0x1a, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a,
	0x16, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x50,
	0x4c, 0x41, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x55, 0x52, 0x45, 0x10, 0x02, 0x42, 0x6f, 0xba, 0x9a, 0x19, 0x13, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x2d, 0x6b, 0x65, 0x79, 0x2d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x5a, 0x56,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x3b, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_arista_studio_topology_v1_studio_topology_proto_rawDescOnce sync.Once
	file_arista_studio_topology_v1_studio_topology_proto_rawDescData = file_arista_studio_topology_v1_studio_topology_proto_rawDesc
)

func file_arista_studio_topology_v1_studio_topology_proto_rawDescGZIP() []byte {
	file_arista_studio_topology_v1_studio_topology_proto_rawDescOnce.Do(func() {
		file_arista_studio_topology_v1_studio_topology_proto_rawDescData = protoimpl.X.CompressGZIP(file_arista_studio_topology_v1_studio_topology_proto_rawDescData)
	})
	return file_arista_studio_topology_v1_studio_topology_proto_rawDescData
}

var file_arista_studio_topology_v1_studio_topology_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_arista_studio_topology_v1_studio_topology_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_arista_studio_topology_v1_studio_topology_proto_goTypes = []interface{}{
	(Element)(0),                      // 0: arista.studio_topology.v1.Element
	(Operation)(0),                    // 1: arista.studio_topology.v1.Operation
	(UpdateStatus)(0),                 // 2: arista.studio_topology.v1.UpdateStatus
	(DecommissionStatus)(0),           // 3: arista.studio_topology.v1.DecommissionStatus
	(ReplaceStatus)(0),                // 4: arista.studio_topology.v1.ReplaceStatus
	(*DeviceInfo)(nil),                // 5: arista.studio_topology.v1.DeviceInfo
	(*InterfaceInfo)(nil),             // 6: arista.studio_topology.v1.InterfaceInfo
	(*InterfaceInfos)(nil),            // 7: arista.studio_topology.v1.InterfaceInfos
	(*DeviceKey)(nil),                 // 8: arista.studio_topology.v1.DeviceKey
	(*DeviceInputConfig)(nil),         // 9: arista.studio_topology.v1.DeviceInputConfig
	(*InterfaceInputKey)(nil),         // 10: arista.studio_topology.v1.InterfaceInputKey
	(*InterfaceInputConfig)(nil),      // 11: arista.studio_topology.v1.InterfaceInputConfig
	(*DeviceState)(nil),               // 12: arista.studio_topology.v1.DeviceState
	(*UpdateKey)(nil),                 // 13: arista.studio_topology.v1.UpdateKey
	(*UpdateConfig)(nil),              // 14: arista.studio_topology.v1.UpdateConfig
	(*Update)(nil),                    // 15: arista.studio_topology.v1.Update
	(*UpdateSyncConfig)(nil),          // 16: arista.studio_topology.v1.UpdateSyncConfig
	(*RevertConfig)(nil),              // 17: arista.studio_topology.v1.RevertConfig
	(*DecommissionConfig)(nil),        // 18: arista.studio_topology.v1.DecommissionConfig
	(*Decommission)(nil),              // 19: arista.studio_topology.v1.Decommission
	(*ReplaceConfig)(nil),             // 20: arista.studio_topology.v1.ReplaceConfig
	(*Replace)(nil),                   // 21: arista.studio_topology.v1.Replace
	(*wrapperspb.StringValue)(nil),    // 22: google.protobuf.StringValue
	(*fmp.MACAddress)(nil),            // 23: fmp.MACAddress
	(*wrapperspb.BoolValue)(nil),      // 24: google.protobuf.BoolValue
	(*workspace_v1.WorkspaceKey)(nil), // 25: arista.workspace.v1.WorkspaceKey
	(*timestamppb.Timestamp)(nil),     // 26: google.protobuf.Timestamp
}
var file_arista_studio_topology_v1_studio_topology_proto_depIdxs = []int32{
	22, // 0: arista.studio_topology.v1.DeviceInfo.device_id:type_name -> google.protobuf.StringValue
	22, // 1: arista.studio_topology.v1.DeviceInfo.model_name:type_name -> google.protobuf.StringValue
	23, // 2: arista.studio_topology.v1.DeviceInfo.mac_address:type_name -> fmp.MACAddress
	22, // 3: arista.studio_topology.v1.DeviceInfo.hostname:type_name -> google.protobuf.StringValue
	22, // 4: arista.studio_topology.v1.InterfaceInfo.name:type_name -> google.protobuf.StringValue
	22, // 5: arista.studio_topology.v1.InterfaceInfo.neighbor_device_id:type_name -> google.protobuf.StringValue
	22, // 6: arista.studio_topology.v1.InterfaceInfo.neighbor_interface_name:type_name -> google.protobuf.StringValue
	6,  // 7: arista.studio_topology.v1.InterfaceInfos.values:type_name -> arista.studio_topology.v1.InterfaceInfo
	22, // 8: arista.studio_topology.v1.DeviceKey.workspace_id:type_name -> google.protobuf.StringValue
	22, // 9: arista.studio_topology.v1.DeviceKey.device_id:type_name -> google.protobuf.StringValue
	8,  // 10: arista.studio_topology.v1.DeviceInputConfig.key:type_name -> arista.studio_topology.v1.DeviceKey
	5,  // 11: arista.studio_topology.v1.DeviceInputConfig.device_info:type_name -> arista.studio_topology.v1.DeviceInfo
	24, // 12: arista.studio_topology.v1.DeviceInputConfig.remove:type_name -> google.protobuf.BoolValue
	22, // 13: arista.studio_topology.v1.InterfaceInputKey.workspace_id:type_name -> google.protobuf.StringValue
	22, // 14: arista.studio_topology.v1.InterfaceInputKey.device_id:type_name -> google.protobuf.StringValue
	22, // 15: arista.studio_topology.v1.InterfaceInputKey.interface_id:type_name -> google.protobuf.StringValue
	10, // 16: arista.studio_topology.v1.InterfaceInputConfig.key:type_name -> arista.studio_topology.v1.InterfaceInputKey
	6,  // 17: arista.studio_topology.v1.InterfaceInputConfig.interface_info:type_name -> arista.studio_topology.v1.InterfaceInfo
	24, // 18: arista.studio_topology.v1.InterfaceInputConfig.remove:type_name -> google.protobuf.BoolValue
	8,  // 19: arista.studio_topology.v1.DeviceState.key:type_name -> arista.studio_topology.v1.DeviceKey
	5,  // 20: arista.studio_topology.v1.DeviceState.device_info:type_name -> arista.studio_topology.v1.DeviceInfo
	7,  // 21: arista.studio_topology.v1.DeviceState.interface_infos:type_name -> arista.studio_topology.v1.InterfaceInfos
	22, // 22: arista.studio_topology.v1.UpdateKey.workspace_id:type_name -> google.protobuf.StringValue
	22, // 23: arista.studio_topology.v1.UpdateKey.update_id:type_name -> google.protobuf.StringValue
	13, // 24: arista.studio_topology.v1.UpdateConfig.key:type_name -> arista.studio_topology.v1.UpdateKey
	2,  // 25: arista.studio_topology.v1.UpdateConfig.status:type_name -> arista.studio_topology.v1.UpdateStatus
	24, // 26: arista.studio_topology.v1.UpdateConfig.remove:type_name -> google.protobuf.BoolValue
	13, // 27: arista.studio_topology.v1.Update.key:type_name -> arista.studio_topology.v1.UpdateKey
	0,  // 28: arista.studio_topology.v1.Update.element:type_name -> arista.studio_topology.v1.Element
	1,  // 29: arista.studio_topology.v1.Update.operation:type_name -> arista.studio_topology.v1.Operation
	2,  // 30: arista.studio_topology.v1.Update.status:type_name -> arista.studio_topology.v1.UpdateStatus
	22, // 31: arista.studio_topology.v1.Update.description:type_name -> google.protobuf.StringValue
	22, // 32: arista.studio_topology.v1.Update.device_id:type_name -> google.protobuf.StringValue
	25, // 33: arista.studio_topology.v1.UpdateSyncConfig.key:type_name -> arista.workspace.v1.WorkspaceKey
	26, // 34: arista.studio_topology.v1.UpdateSyncConfig.sync_time:type_name -> google.protobuf.Timestamp
	25, // 35: arista.studio_topology.v1.RevertConfig.key:type_name -> arista.workspace.v1.WorkspaceKey
	8,  // 36: arista.studio_topology.v1.DecommissionConfig.key:type_name -> arista.studio_topology.v1.DeviceKey
	8,  // 37: arista.studio_topology.v1.Decommission.key:type_name -> arista.studio_topology.v1.DeviceKey
	26, // 38: arista.studio_topology.v1.Decommission.created_at:type_name -> google.protobuf.Timestamp
	22, // 39: arista.studio_topology.v1.Decommission.created_by:type_name -> google.protobuf.StringValue
	26, // 40: arista.studio_topology.v1.Decommission.last_modified_at:type_name -> google.protobuf.Timestamp
	22, // 41: arista.studio_topology.v1.Decommission.last_modified_by:type_name -> google.protobuf.StringValue
	3,  // 42: arista.studio_topology.v1.Decommission.status:type_name -> arista.studio_topology.v1.DecommissionStatus
	22, // 43: arista.studio_topology.v1.Decommission.error:type_name -> google.protobuf.StringValue
	8,  // 44: arista.studio_topology.v1.ReplaceConfig.key:type_name -> arista.studio_topology.v1.DeviceKey
	22, // 45: arista.studio_topology.v1.ReplaceConfig.replacement_device_id:type_name -> google.protobuf.StringValue
	8,  // 46: arista.studio_topology.v1.Replace.key:type_name -> arista.studio_topology.v1.DeviceKey
	22, // 47: arista.studio_topology.v1.Replace.replacement_device_id:type_name -> google.protobuf.StringValue
	26, // 48: arista.studio_topology.v1.Replace.created_at:type_name -> google.protobuf.Timestamp
	22, // 49: arista.studio_topology.v1.Replace.created_by:type_name -> google.protobuf.StringValue
	26, // 50: arista.studio_topology.v1.Replace.last_modified_at:type_name -> google.protobuf.Timestamp
	22, // 51: arista.studio_topology.v1.Replace.last_modified_by:type_name -> google.protobuf.StringValue
	4,  // 52: arista.studio_topology.v1.Replace.status:type_name -> arista.studio_topology.v1.ReplaceStatus
	22, // 53: arista.studio_topology.v1.Replace.error:type_name -> google.protobuf.StringValue
	54, // [54:54] is the sub-list for method output_type
	54, // [54:54] is the sub-list for method input_type
	54, // [54:54] is the sub-list for extension type_name
	54, // [54:54] is the sub-list for extension extendee
	0,  // [0:54] is the sub-list for field type_name
}

func init() { file_arista_studio_topology_v1_studio_topology_proto_init() }
func file_arista_studio_topology_v1_studio_topology_proto_init() {
	if File_arista_studio_topology_v1_studio_topology_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_arista_studio_topology_v1_studio_topology_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_studio_topology_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_studio_topology_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_studio_topology_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_studio_topology_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInputConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_studio_topology_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceInputKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_studio_topology_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceInputConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_studio_topology_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_studio_topology_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_studio_topology_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_studio_topology_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Update); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_studio_topology_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSyncConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_studio_topology_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevertConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_studio_topology_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecommissionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_studio_topology_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Decommission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_studio_topology_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_topology_v1_studio_topology_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Replace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_arista_studio_topology_v1_studio_topology_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_arista_studio_topology_v1_studio_topology_proto_goTypes,
		DependencyIndexes: file_arista_studio_topology_v1_studio_topology_proto_depIdxs,
		EnumInfos:         file_arista_studio_topology_v1_studio_topology_proto_enumTypes,
		MessageInfos:      file_arista_studio_topology_v1_studio_topology_proto_msgTypes,
	}.Build()
	File_arista_studio_topology_v1_studio_topology_proto = out.File
	file_arista_studio_topology_v1_studio_topology_proto_rawDesc = nil
	file_arista_studio_topology_v1_studio_topology_proto_goTypes = nil
	file_arista_studio_topology_v1_studio_topology_proto_depIdxs = nil
}
