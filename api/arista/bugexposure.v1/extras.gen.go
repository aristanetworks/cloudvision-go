// Copyright (c) 2023 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

//
// Code generated by boomtown. DO NOT EDIT.
//

package bugexposure

// HasKey returns whether the given BugExposure has a key provided in the model.
func (b *BugExposure) HasKey() bool {
	return b.GetKey() != nil
}

// HasKey returns whether the given BugExposureRequest has a key provided in the request.
func (b *BugExposureRequest) HasKey() bool {
	return b.GetKey() != nil
}

// PassesPartialEqFilter returns whether this Acknowledgement matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (a Acknowledgement) PassesPartialEqFilter(cmp Acknowledgement) bool {
	if cmp != Acknowledgement(0) {
		return a == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether this HighestExposure matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (h HighestExposure) PassesPartialEqFilter(cmp HighestExposure) bool {
	if cmp != HighestExposure(0) {
		return h == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether the BugExposureKey matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (b *BugExposureKey) PassesPartialEqFilter(cmp *BugExposureKey) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if b == nil {
		return false
	}

	if cmp.DeviceId != nil {
		if b.DeviceId == nil {
			return false
		}
		if b.DeviceId.Value != cmp.DeviceId.Value {
			return false
		}
	}
	if !b.Acknowledgement.PassesPartialEqFilter(cmp.Acknowledgement) {
		return false
	}

	return true
}

// PassesPartialEqFilter returns whether the BugExposure matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (b *BugExposure) PassesPartialEqFilter(cmp *BugExposure) bool {
	// if the resource is nil, there is nothing to send to the client
	if b == nil {
		return false
	}

	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if !b.Key.PassesPartialEqFilter(cmp.Key) {
		return false
	}

	if !b.BugIds.PassesPartialEqFilter(cmp.BugIds) {
		return false
	}

	if !b.CveIds.PassesPartialEqFilter(cmp.CveIds) {
		return false
	}

	if cmp.BugCount != nil {
		if b.BugCount == nil {
			return false
		}
		if b.BugCount.Value != cmp.BugCount.Value {
			return false
		}
	}

	if cmp.CveCount != nil {
		if b.CveCount == nil {
			return false
		}
		if b.CveCount.Value != cmp.CveCount.Value {
			return false
		}
	}

	if !b.HighestBugExposure.PassesPartialEqFilter(cmp.HighestBugExposure) {
		return false
	}

	if !b.HighestCveExposure.PassesPartialEqFilter(cmp.HighestCveExposure) {
		return false
	}

	return true
}

// MatchesAnyPartialEqFilter returns whether the receiver matches any filters in the given set.
func (b *BugExposure) MatchesAnyPartialEqFilter(filters []*BugExposure) bool {
	if len(filters) == 0 {
		return true
	}

	for _, filt := range filters {
		if b.PassesPartialEqFilter(filt) {
			return true
		}
	}

	return false
}
