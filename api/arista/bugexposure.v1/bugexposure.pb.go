// Copyright (c) 2023 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.7
// source: arista/bugexposure.v1/bugexposure.proto

package bugexposure

import (
	fmp "github.com/aristanetworks/cloudvision-go/api/fmp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Acknowledgement is an enumeration key
// for a BugExposure model that defines
// the acknowledgement state for the
// computed bugs
type Acknowledgement int32

const (
	// Unacknowledged and acknowledged bugs will be computed
	Acknowledgement_ACKNOWLEDGEMENT_UNSPECIFIED Acknowledgement = 0
	// Only unacknowledged bugs will be computed
	Acknowledgement_ACKNOWLEDGEMENT_UNACKNOWLEDGED Acknowledgement = 1
	// Only acknowledged bugs will be computed
	Acknowledgement_ACKNOWLEDGEMENT_ACKNOWLEDGED Acknowledgement = 2
)

// Enum value maps for Acknowledgement.
var (
	Acknowledgement_name = map[int32]string{
		0: "ACKNOWLEDGEMENT_UNSPECIFIED",
		1: "ACKNOWLEDGEMENT_UNACKNOWLEDGED",
		2: "ACKNOWLEDGEMENT_ACKNOWLEDGED",
	}
	Acknowledgement_value = map[string]int32{
		"ACKNOWLEDGEMENT_UNSPECIFIED":    0,
		"ACKNOWLEDGEMENT_UNACKNOWLEDGED": 1,
		"ACKNOWLEDGEMENT_ACKNOWLEDGED":   2,
	}
)

func (x Acknowledgement) Enum() *Acknowledgement {
	p := new(Acknowledgement)
	*p = x
	return p
}

func (x Acknowledgement) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Acknowledgement) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_bugexposure_v1_bugexposure_proto_enumTypes[0].Descriptor()
}

func (Acknowledgement) Type() protoreflect.EnumType {
	return &file_arista_bugexposure_v1_bugexposure_proto_enumTypes[0]
}

func (x Acknowledgement) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Acknowledgement.Descriptor instead.
func (Acknowledgement) EnumDescriptor() ([]byte, []int) {
	return file_arista_bugexposure_v1_bugexposure_proto_rawDescGZIP(), []int{0}
}

// HighestExposure is an enumeration
// that defines the options for
// highest exposure
type HighestExposure int32

const (
	// If not given this will be the default value
	// and it will compute devices with
	// any highest exposure
	HighestExposure_HIGHEST_EXPOSURE_UNSPECIFIED HighestExposure = 0
	// Not exposed to bugs
	HighestExposure_HIGHEST_EXPOSURE_NONE HighestExposure = 1
	// Highest exposure is to a low priority bug
	HighestExposure_HIGHEST_EXPOSURE_LOW HighestExposure = 2
	// Highest exposure is to a high priority bug
	HighestExposure_HIGHEST_EXPOSURE_HIGH HighestExposure = 3
)

// Enum value maps for HighestExposure.
var (
	HighestExposure_name = map[int32]string{
		0: "HIGHEST_EXPOSURE_UNSPECIFIED",
		1: "HIGHEST_EXPOSURE_NONE",
		2: "HIGHEST_EXPOSURE_LOW",
		3: "HIGHEST_EXPOSURE_HIGH",
	}
	HighestExposure_value = map[string]int32{
		"HIGHEST_EXPOSURE_UNSPECIFIED": 0,
		"HIGHEST_EXPOSURE_NONE":        1,
		"HIGHEST_EXPOSURE_LOW":         2,
		"HIGHEST_EXPOSURE_HIGH":        3,
	}
)

func (x HighestExposure) Enum() *HighestExposure {
	p := new(HighestExposure)
	*p = x
	return p
}

func (x HighestExposure) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HighestExposure) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_bugexposure_v1_bugexposure_proto_enumTypes[1].Descriptor()
}

func (HighestExposure) Type() protoreflect.EnumType {
	return &file_arista_bugexposure_v1_bugexposure_proto_enumTypes[1]
}

func (x HighestExposure) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HighestExposure.Descriptor instead.
func (HighestExposure) EnumDescriptor() ([]byte, []int) {
	return file_arista_bugexposure_v1_bugexposure_proto_rawDescGZIP(), []int{1}
}

// BugExposureKey is the key type for
// BugExposure model
type BugExposureKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// device_id is the device ID
	DeviceId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// acknowledgement is one of the options for
	// Acknowledgement enum
	Acknowledgement Acknowledgement `protobuf:"varint,2,opt,name=acknowledgement,proto3,enum=arista.bugexposure.v1.Acknowledgement" json:"acknowledgement,omitempty"`
}

func (x *BugExposureKey) Reset() {
	*x = BugExposureKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_bugexposure_v1_bugexposure_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BugExposureKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BugExposureKey) ProtoMessage() {}

func (x *BugExposureKey) ProtoReflect() protoreflect.Message {
	mi := &file_arista_bugexposure_v1_bugexposure_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BugExposureKey.ProtoReflect.Descriptor instead.
func (*BugExposureKey) Descriptor() ([]byte, []int) {
	return file_arista_bugexposure_v1_bugexposure_proto_rawDescGZIP(), []int{0}
}

func (x *BugExposureKey) GetDeviceId() *wrapperspb.StringValue {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

func (x *BugExposureKey) GetAcknowledgement() Acknowledgement {
	if x != nil {
		return x.Acknowledgement
	}
	return Acknowledgement_ACKNOWLEDGEMENT_UNSPECIFIED
}

// BugExposure is the state model that represents
// the exposure a device has to bugs
type BugExposure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BugExposureKey is the key of
	// BugExposure
	Key *BugExposureKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// bug_ids is a list of bug alerts affecting the device
	// with type Bug
	BugIds *fmp.RepeatedInt32 `protobuf:"bytes,2,opt,name=bug_ids,json=bugIds,proto3" json:"bug_ids,omitempty"`
	// cve_ids is a list of bug alerts affecting the device
	// with type CVE
	CveIds *fmp.RepeatedInt32 `protobuf:"bytes,3,opt,name=cve_ids,json=cveIds,proto3" json:"cve_ids,omitempty"`
	// bug_count is the number of bug alerts
	// with type Bug
	BugCount *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=bug_count,json=bugCount,proto3" json:"bug_count,omitempty"`
	// cve_count is the number of bug alerts
	// with type CVE
	CveCount *wrapperspb.Int32Value `protobuf:"bytes,5,opt,name=cve_count,json=cveCount,proto3" json:"cve_count,omitempty"`
	// highest_bug_exposure is the highest exposure
	// with type Bug
	HighestBugExposure HighestExposure `protobuf:"varint,6,opt,name=highest_bug_exposure,json=highestBugExposure,proto3,enum=arista.bugexposure.v1.HighestExposure" json:"highest_bug_exposure,omitempty"`
	// highest_cve_exposure is the highest exposure
	// with type CVE
	HighestCveExposure HighestExposure `protobuf:"varint,7,opt,name=highest_cve_exposure,json=highestCveExposure,proto3,enum=arista.bugexposure.v1.HighestExposure" json:"highest_cve_exposure,omitempty"`
}

func (x *BugExposure) Reset() {
	*x = BugExposure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_bugexposure_v1_bugexposure_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BugExposure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BugExposure) ProtoMessage() {}

func (x *BugExposure) ProtoReflect() protoreflect.Message {
	mi := &file_arista_bugexposure_v1_bugexposure_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BugExposure.ProtoReflect.Descriptor instead.
func (*BugExposure) Descriptor() ([]byte, []int) {
	return file_arista_bugexposure_v1_bugexposure_proto_rawDescGZIP(), []int{1}
}

func (x *BugExposure) GetKey() *BugExposureKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *BugExposure) GetBugIds() *fmp.RepeatedInt32 {
	if x != nil {
		return x.BugIds
	}
	return nil
}

func (x *BugExposure) GetCveIds() *fmp.RepeatedInt32 {
	if x != nil {
		return x.CveIds
	}
	return nil
}

func (x *BugExposure) GetBugCount() *wrapperspb.Int32Value {
	if x != nil {
		return x.BugCount
	}
	return nil
}

func (x *BugExposure) GetCveCount() *wrapperspb.Int32Value {
	if x != nil {
		return x.CveCount
	}
	return nil
}

func (x *BugExposure) GetHighestBugExposure() HighestExposure {
	if x != nil {
		return x.HighestBugExposure
	}
	return HighestExposure_HIGHEST_EXPOSURE_UNSPECIFIED
}

func (x *BugExposure) GetHighestCveExposure() HighestExposure {
	if x != nil {
		return x.HighestCveExposure
	}
	return HighestExposure_HIGHEST_EXPOSURE_UNSPECIFIED
}

var File_arista_bugexposure_v1_bugexposure_proto protoreflect.FileDescriptor

var file_arista_bugexposure_v1_bugexposure_proto_rawDesc = []byte{
	0x0a, 0x27, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x62, 0x75, 0x67, 0x65, 0x78, 0x70, 0x6f,
	0x73, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2f, 0x62, 0x75, 0x67, 0x65, 0x78, 0x70, 0x6f, 0x73,
	0x75, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x62, 0x75, 0x67, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x14, 0x66, 0x6d, 0x70, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x66, 0x6d, 0x70, 0x2f, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa3, 0x01, 0x0a, 0x0e, 0x42,
	0x75, 0x67, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x39, 0x0a,
	0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x0f, 0x61, 0x63, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x62, 0x75, 0x67, 0x65, 0x78,
	0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x61, 0x63, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x04, 0x80, 0x8e, 0x19, 0x01,
	0x22, 0xd0, 0x03, 0x0a, 0x0b, 0x42, 0x75, 0x67, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65,
	0x12, 0x37, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x62, 0x75, 0x67, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x67, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72,
	0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x07, 0x62, 0x75, 0x67,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x6d, 0x70,
	0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x06,
	0x62, 0x75, 0x67, 0x49, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x63, 0x76, 0x65, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x52, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x06, 0x63, 0x76, 0x65,
	0x49, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x62, 0x75, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x62, 0x75, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a,
	0x09, 0x63, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x63,
	0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x14, 0x68, 0x69, 0x67, 0x68, 0x65,
	0x73, 0x74, 0x5f, 0x62, 0x75, 0x67, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x62,
	0x75, 0x67, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x69,
	0x67, 0x68, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x52, 0x12, 0x68,
	0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x42, 0x75, 0x67, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72,
	0x65, 0x12, 0x58, 0x0a, 0x14, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x76, 0x65,
	0x5f, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x62, 0x75, 0x67, 0x65, 0x78, 0x70, 0x6f,
	0x73, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x45,
	0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x52, 0x12, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74,
	0x43, 0x76, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x3a, 0x06, 0xfa, 0x8d, 0x19,
	0x02, 0x72, 0x6f, 0x2a, 0x78, 0x0a, 0x0f, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x43, 0x4b, 0x4e, 0x4f, 0x57,
	0x4c, 0x45, 0x44, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x43, 0x4b, 0x4e, 0x4f,
	0x57, 0x4c, 0x45, 0x44, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x41, 0x43, 0x4b,
	0x4e, 0x4f, 0x57, 0x4c, 0x45, 0x44, 0x47, 0x45, 0x44, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x41,
	0x43, 0x4b, 0x4e, 0x4f, 0x57, 0x4c, 0x45, 0x44, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41,
	0x43, 0x4b, 0x4e, 0x4f, 0x57, 0x4c, 0x45, 0x44, 0x47, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x83, 0x01,
	0x0a, 0x0f, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72,
	0x65, 0x12, 0x20, 0x0a, 0x1c, 0x48, 0x49, 0x47, 0x48, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x58, 0x50,
	0x4f, 0x53, 0x55, 0x52, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x48, 0x49, 0x47, 0x48, 0x45, 0x53, 0x54, 0x5f, 0x45,
	0x58, 0x50, 0x4f, 0x53, 0x55, 0x52, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x18,
	0x0a, 0x14, 0x48, 0x49, 0x47, 0x48, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x58, 0x50, 0x4f, 0x53, 0x55,
	0x52, 0x45, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x48, 0x49, 0x47, 0x48,
	0x45, 0x53, 0x54, 0x5f, 0x45, 0x58, 0x50, 0x4f, 0x53, 0x55, 0x52, 0x45, 0x5f, 0x48, 0x49, 0x47,
	0x48, 0x10, 0x03, 0x42, 0x5e, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x62, 0x75, 0x67, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x42, 0x0b, 0x42, 0x75, 0x67, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x50, 0x01, 0x5a,
	0x32, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2f, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x62, 0x75, 0x67, 0x65, 0x78, 0x70, 0x6f,
	0x73, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x3b, 0x62, 0x75, 0x67, 0x65, 0x78, 0x70, 0x6f, 0x73,
	0x75, 0x72, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_arista_bugexposure_v1_bugexposure_proto_rawDescOnce sync.Once
	file_arista_bugexposure_v1_bugexposure_proto_rawDescData = file_arista_bugexposure_v1_bugexposure_proto_rawDesc
)

func file_arista_bugexposure_v1_bugexposure_proto_rawDescGZIP() []byte {
	file_arista_bugexposure_v1_bugexposure_proto_rawDescOnce.Do(func() {
		file_arista_bugexposure_v1_bugexposure_proto_rawDescData = protoimpl.X.CompressGZIP(file_arista_bugexposure_v1_bugexposure_proto_rawDescData)
	})
	return file_arista_bugexposure_v1_bugexposure_proto_rawDescData
}

var file_arista_bugexposure_v1_bugexposure_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_arista_bugexposure_v1_bugexposure_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_arista_bugexposure_v1_bugexposure_proto_goTypes = []interface{}{
	(Acknowledgement)(0),           // 0: arista.bugexposure.v1.Acknowledgement
	(HighestExposure)(0),           // 1: arista.bugexposure.v1.HighestExposure
	(*BugExposureKey)(nil),         // 2: arista.bugexposure.v1.BugExposureKey
	(*BugExposure)(nil),            // 3: arista.bugexposure.v1.BugExposure
	(*wrapperspb.StringValue)(nil), // 4: google.protobuf.StringValue
	(*fmp.RepeatedInt32)(nil),      // 5: fmp.RepeatedInt32
	(*wrapperspb.Int32Value)(nil),  // 6: google.protobuf.Int32Value
}
var file_arista_bugexposure_v1_bugexposure_proto_depIdxs = []int32{
	4, // 0: arista.bugexposure.v1.BugExposureKey.device_id:type_name -> google.protobuf.StringValue
	0, // 1: arista.bugexposure.v1.BugExposureKey.acknowledgement:type_name -> arista.bugexposure.v1.Acknowledgement
	2, // 2: arista.bugexposure.v1.BugExposure.key:type_name -> arista.bugexposure.v1.BugExposureKey
	5, // 3: arista.bugexposure.v1.BugExposure.bug_ids:type_name -> fmp.RepeatedInt32
	5, // 4: arista.bugexposure.v1.BugExposure.cve_ids:type_name -> fmp.RepeatedInt32
	6, // 5: arista.bugexposure.v1.BugExposure.bug_count:type_name -> google.protobuf.Int32Value
	6, // 6: arista.bugexposure.v1.BugExposure.cve_count:type_name -> google.protobuf.Int32Value
	1, // 7: arista.bugexposure.v1.BugExposure.highest_bug_exposure:type_name -> arista.bugexposure.v1.HighestExposure
	1, // 8: arista.bugexposure.v1.BugExposure.highest_cve_exposure:type_name -> arista.bugexposure.v1.HighestExposure
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_arista_bugexposure_v1_bugexposure_proto_init() }
func file_arista_bugexposure_v1_bugexposure_proto_init() {
	if File_arista_bugexposure_v1_bugexposure_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_arista_bugexposure_v1_bugexposure_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BugExposureKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_bugexposure_v1_bugexposure_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BugExposure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_arista_bugexposure_v1_bugexposure_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_arista_bugexposure_v1_bugexposure_proto_goTypes,
		DependencyIndexes: file_arista_bugexposure_v1_bugexposure_proto_depIdxs,
		EnumInfos:         file_arista_bugexposure_v1_bugexposure_proto_enumTypes,
		MessageInfos:      file_arista_bugexposure_v1_bugexposure_proto_msgTypes,
	}.Build()
	File_arista_bugexposure_v1_bugexposure_proto = out.File
	file_arista_bugexposure_v1_bugexposure_proto_rawDesc = nil
	file_arista_bugexposure_v1_bugexposure_proto_goTypes = nil
	file_arista_bugexposure_v1_bugexposure_proto_depIdxs = nil
}
