// Copyright (c) 2024 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

//
// Code generated by boomtown. DO NOT EDIT.
//

package identityprovider

import "google.golang.org/grpc"

// Client composes the service clients within the identityprovider package.
// This client can then be composed into a larger hierarchy for more complex clients.
//
// Because method names include the name of the Resource they operate on, the embedded
// clients are unnamed fields to reduce stutter.
//
// Included resources:
//   - OAuthConfig
//   - SAMLConfig
type Client struct {
	OAuthConfig OAuthConfigServiceClient
	SAMLConfig  SAMLConfigServiceClient
}

// NewClient creates a new composed-client from the given connection.
func NewClient(conn grpc.ClientConnInterface) Client {
	return Client{
		OAuthConfig: NewOAuthConfigServiceClient(conn),
		SAMLConfig:  NewSAMLConfigServiceClient(conn),
	}
}

// Server aggregates the various server interfaces required by gRPC.
// The included resources are:
//   - OAuthConfig
//   - SAMLConfig
type Server struct {
	OAuthConfig OAuthConfigServiceServer
	SAMLConfig  SAMLConfigServiceServer
}

// Register takes the given gRPC Server and registers our services with it.
func (s Server) Register(target *grpc.Server) {
	RegisterOAuthConfigServiceServer(target, s.OAuthConfig)
	RegisterSAMLConfigServiceServer(target, s.SAMLConfig)
}

// RegisterUnimplementeds adds unimplemented servers to the given gRPC Server
func RegisterUnimplementeds(target *grpc.Server) error {
	RegisterOAuthConfigServiceServer(target,
		UnimplementedOAuthConfigServiceServer{})
	RegisterSAMLConfigServiceServer(target,
		UnimplementedSAMLConfigServiceServer{})
	return nil
}

// HasKey returns whether the given OAuthConfig has a key provided in the model.
func (o *OAuthConfig) HasKey() bool {
	return o.GetKey() != nil
}

// HasKey returns whether the given OAuthConfigRequest has a key provided in the request.
func (o *OAuthConfigRequest) HasKey() bool {
	return o.GetKey() != nil
}

// HasKey returns whether the given OAuthConfigSetRequest has a key provided in the request.
func (o *OAuthConfigSetRequest) HasKey() bool {
	return o.GetValue().HasKey()
}

// HasKey returns whether the given OAuthConfigDeleteRequest has a key provided in the request.
func (o *OAuthConfigDeleteRequest) HasKey() bool {
	return o.GetKey() != nil
}

// HasKey returns whether the given SAMLConfig has a key provided in the model.
func (s *SAMLConfig) HasKey() bool {
	return s.GetKey() != nil
}

// HasKey returns whether the given SAMLConfigRequest has a key provided in the request.
func (s *SAMLConfigRequest) HasKey() bool {
	return s.GetKey() != nil
}

// HasKey returns whether the given SAMLConfigSetRequest has a key provided in the request.
func (s *SAMLConfigSetRequest) HasKey() bool {
	return s.GetValue().HasKey()
}

// HasKey returns whether the given SAMLConfigDeleteRequest has a key provided in the request.
func (s *SAMLConfigDeleteRequest) HasKey() bool {
	return s.GetKey() != nil
}

// PassesPartialEqFilter returns whether this ProtocolBinding matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (p ProtocolBinding) PassesPartialEqFilter(cmp ProtocolBinding) bool {
	if cmp != ProtocolBinding(0) {
		return p == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether the OAuthKey matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (o *OAuthKey) PassesPartialEqFilter(cmp *OAuthKey) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if o == nil {
		return false
	}

	if cmp.ProviderId != nil {
		if o.ProviderId == nil {
			return false
		}
		if o.ProviderId.Value != cmp.ProviderId.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the SAMLKey matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (s *SAMLKey) PassesPartialEqFilter(cmp *SAMLKey) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if s == nil {
		return false
	}

	if cmp.ProviderId != nil {
		if s.ProviderId == nil {
			return false
		}
		if s.ProviderId.Value != cmp.ProviderId.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the OAuthConfig matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (o *OAuthConfig) PassesPartialEqFilter(cmp *OAuthConfig) bool {
	// if the resource is nil, there is nothing to send to the client
	if o == nil {
		return false
	}

	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if !o.Key.PassesPartialEqFilter(cmp.Key) {
		return false
	}

	if cmp.Endpoint != nil {
		if o.Endpoint == nil {
			return false
		}
		if o.Endpoint.Value != cmp.Endpoint.Value {
			return false
		}
	}

	if cmp.ClientId != nil {
		if o.ClientId == nil {
			return false
		}
		if o.ClientId.Value != cmp.ClientId.Value {
			return false
		}
	}

	if cmp.ClientSecret != nil {
		if o.ClientSecret == nil {
			return false
		}
		if o.ClientSecret.Value != cmp.ClientSecret.Value {
			return false
		}
	}

	if !o.Algorithms.PassesPartialEqFilter(cmp.Algorithms) {
		return false
	}

	if cmp.LinkToSharedProvider != nil {
		if o.LinkToSharedProvider == nil {
			return false
		}
		if o.LinkToSharedProvider.Value != cmp.LinkToSharedProvider.Value {
			return false
		}
	}

	if cmp.JwksUri != nil {
		if o.JwksUri == nil {
			return false
		}
		if o.JwksUri.Value != cmp.JwksUri.Value {
			return false
		}
	}

	if !o.PermittedEmailDomains.PassesPartialEqFilter(cmp.PermittedEmailDomains) {
		return false
	}

	if cmp.RolesScopeName != nil {
		if o.RolesScopeName == nil {
			return false
		}
		if o.RolesScopeName.Value != cmp.RolesScopeName.Value {
			return false
		}
	}

	if cmp.BearerTokenIntrospectionEndpoint != nil {
		if o.BearerTokenIntrospectionEndpoint == nil {
			return false
		}
		if o.BearerTokenIntrospectionEndpoint.Value != cmp.BearerTokenIntrospectionEndpoint.Value {
			return false
		}
	}

	if cmp.RolesClaimName != nil {
		if o.RolesClaimName == nil {
			return false
		}
		if o.RolesClaimName.Value != cmp.RolesClaimName.Value {
			return false
		}
	}

	return true
}

// MatchesAnyPartialEqFilter returns whether the receiver matches any filters in the given set.
func (o *OAuthConfig) MatchesAnyPartialEqFilter(filters []*OAuthConfig) bool {
	if len(filters) == 0 {
		return true
	}

	for _, filt := range filters {
		if o.PassesPartialEqFilter(filt) {
			return true
		}
	}

	return false
}

// PassesPartialEqFilter returns whether the SAMLConfig matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (s *SAMLConfig) PassesPartialEqFilter(cmp *SAMLConfig) bool {
	// if the resource is nil, there is nothing to send to the client
	if s == nil {
		return false
	}

	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if !s.Key.PassesPartialEqFilter(cmp.Key) {
		return false
	}

	if cmp.IdpIssuer != nil {
		if s.IdpIssuer == nil {
			return false
		}
		if s.IdpIssuer.Value != cmp.IdpIssuer.Value {
			return false
		}
	}

	if cmp.IdpMetadataUrl != nil {
		if s.IdpMetadataUrl == nil {
			return false
		}
		if s.IdpMetadataUrl.Value != cmp.IdpMetadataUrl.Value {
			return false
		}
	}

	if !s.AuthreqBinding.PassesPartialEqFilter(cmp.AuthreqBinding) {
		return false
	}

	if cmp.EmailAttrname != nil {
		if s.EmailAttrname == nil {
			return false
		}
		if s.EmailAttrname.Value != cmp.EmailAttrname.Value {
			return false
		}
	}

	if cmp.LinkToSharedProvider != nil {
		if s.LinkToSharedProvider == nil {
			return false
		}
		if s.LinkToSharedProvider.Value != cmp.LinkToSharedProvider.Value {
			return false
		}
	}

	if !s.PermittedEmailDomains.PassesPartialEqFilter(cmp.PermittedEmailDomains) {
		return false
	}

	if cmp.ForceSamlAuthn != nil {
		if s.ForceSamlAuthn == nil {
			return false
		}
		if s.ForceSamlAuthn.Value != cmp.ForceSamlAuthn.Value {
			return false
		}
	}

	if cmp.RolesAttrname != nil {
		if s.RolesAttrname == nil {
			return false
		}
		if s.RolesAttrname.Value != cmp.RolesAttrname.Value {
			return false
		}
	}

	if cmp.OrgAttrname != nil {
		if s.OrgAttrname == nil {
			return false
		}
		if s.OrgAttrname.Value != cmp.OrgAttrname.Value {
			return false
		}
	}

	if cmp.UsernameAttrname != nil {
		if s.UsernameAttrname == nil {
			return false
		}
		if s.UsernameAttrname.Value != cmp.UsernameAttrname.Value {
			return false
		}
	}

	return true
}

// MatchesAnyPartialEqFilter returns whether the receiver matches any filters in the given set.
func (s *SAMLConfig) MatchesAnyPartialEqFilter(filters []*SAMLConfig) bool {
	if len(filters) == 0 {
		return true
	}

	for _, filt := range filters {
		if s.PassesPartialEqFilter(filt) {
			return true
		}
	}

	return false
}
