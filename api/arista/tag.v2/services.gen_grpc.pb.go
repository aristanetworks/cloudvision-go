// Copyright (c) 2021 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

//
// Code generated by boomtown. DO NOT EDIT.
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: arista/tag.v2/services.gen.proto

package tag

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TagService_GetOne_FullMethodName           = "/arista.tag.v2.TagService/GetOne"
	TagService_GetSome_FullMethodName          = "/arista.tag.v2.TagService/GetSome"
	TagService_GetAll_FullMethodName           = "/arista.tag.v2.TagService/GetAll"
	TagService_Subscribe_FullMethodName        = "/arista.tag.v2.TagService/Subscribe"
	TagService_GetMeta_FullMethodName          = "/arista.tag.v2.TagService/GetMeta"
	TagService_SubscribeMeta_FullMethodName    = "/arista.tag.v2.TagService/SubscribeMeta"
	TagService_GetAllBatched_FullMethodName    = "/arista.tag.v2.TagService/GetAllBatched"
	TagService_SubscribeBatched_FullMethodName = "/arista.tag.v2.TagService/SubscribeBatched"
)

// TagServiceClient is the client API for TagService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TagServiceClient interface {
	GetOne(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagResponse, error)
	GetSome(ctx context.Context, in *TagSomeRequest, opts ...grpc.CallOption) (TagService_GetSomeClient, error)
	GetAll(ctx context.Context, in *TagStreamRequest, opts ...grpc.CallOption) (TagService_GetAllClient, error)
	Subscribe(ctx context.Context, in *TagStreamRequest, opts ...grpc.CallOption) (TagService_SubscribeClient, error)
	GetMeta(ctx context.Context, in *TagStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error)
	SubscribeMeta(ctx context.Context, in *TagStreamRequest, opts ...grpc.CallOption) (TagService_SubscribeMetaClient, error)
	GetAllBatched(ctx context.Context, in *TagBatchedStreamRequest, opts ...grpc.CallOption) (TagService_GetAllBatchedClient, error)
	SubscribeBatched(ctx context.Context, in *TagBatchedStreamRequest, opts ...grpc.CallOption) (TagService_SubscribeBatchedClient, error)
}

type tagServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTagServiceClient(cc grpc.ClientConnInterface) TagServiceClient {
	return &tagServiceClient{cc}
}

func (c *tagServiceClient) GetOne(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagResponse, error) {
	out := new(TagResponse)
	err := c.cc.Invoke(ctx, TagService_GetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagServiceClient) GetSome(ctx context.Context, in *TagSomeRequest, opts ...grpc.CallOption) (TagService_GetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &TagService_ServiceDesc.Streams[0], TagService_GetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tagServiceGetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TagService_GetSomeClient interface {
	Recv() (*TagSomeResponse, error)
	grpc.ClientStream
}

type tagServiceGetSomeClient struct {
	grpc.ClientStream
}

func (x *tagServiceGetSomeClient) Recv() (*TagSomeResponse, error) {
	m := new(TagSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tagServiceClient) GetAll(ctx context.Context, in *TagStreamRequest, opts ...grpc.CallOption) (TagService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &TagService_ServiceDesc.Streams[1], TagService_GetAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tagServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TagService_GetAllClient interface {
	Recv() (*TagStreamResponse, error)
	grpc.ClientStream
}

type tagServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *tagServiceGetAllClient) Recv() (*TagStreamResponse, error) {
	m := new(TagStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tagServiceClient) Subscribe(ctx context.Context, in *TagStreamRequest, opts ...grpc.CallOption) (TagService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &TagService_ServiceDesc.Streams[2], TagService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tagServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TagService_SubscribeClient interface {
	Recv() (*TagStreamResponse, error)
	grpc.ClientStream
}

type tagServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *tagServiceSubscribeClient) Recv() (*TagStreamResponse, error) {
	m := new(TagStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tagServiceClient) GetMeta(ctx context.Context, in *TagStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error) {
	out := new(MetaResponse)
	err := c.cc.Invoke(ctx, TagService_GetMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagServiceClient) SubscribeMeta(ctx context.Context, in *TagStreamRequest, opts ...grpc.CallOption) (TagService_SubscribeMetaClient, error) {
	stream, err := c.cc.NewStream(ctx, &TagService_ServiceDesc.Streams[3], TagService_SubscribeMeta_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tagServiceSubscribeMetaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TagService_SubscribeMetaClient interface {
	Recv() (*MetaResponse, error)
	grpc.ClientStream
}

type tagServiceSubscribeMetaClient struct {
	grpc.ClientStream
}

func (x *tagServiceSubscribeMetaClient) Recv() (*MetaResponse, error) {
	m := new(MetaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tagServiceClient) GetAllBatched(ctx context.Context, in *TagBatchedStreamRequest, opts ...grpc.CallOption) (TagService_GetAllBatchedClient, error) {
	stream, err := c.cc.NewStream(ctx, &TagService_ServiceDesc.Streams[4], TagService_GetAllBatched_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tagServiceGetAllBatchedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TagService_GetAllBatchedClient interface {
	Recv() (*TagBatchedStreamResponse, error)
	grpc.ClientStream
}

type tagServiceGetAllBatchedClient struct {
	grpc.ClientStream
}

func (x *tagServiceGetAllBatchedClient) Recv() (*TagBatchedStreamResponse, error) {
	m := new(TagBatchedStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tagServiceClient) SubscribeBatched(ctx context.Context, in *TagBatchedStreamRequest, opts ...grpc.CallOption) (TagService_SubscribeBatchedClient, error) {
	stream, err := c.cc.NewStream(ctx, &TagService_ServiceDesc.Streams[5], TagService_SubscribeBatched_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tagServiceSubscribeBatchedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TagService_SubscribeBatchedClient interface {
	Recv() (*TagBatchedStreamResponse, error)
	grpc.ClientStream
}

type tagServiceSubscribeBatchedClient struct {
	grpc.ClientStream
}

func (x *tagServiceSubscribeBatchedClient) Recv() (*TagBatchedStreamResponse, error) {
	m := new(TagBatchedStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TagServiceServer is the server API for TagService service.
// All implementations must embed UnimplementedTagServiceServer
// for forward compatibility
type TagServiceServer interface {
	GetOne(context.Context, *TagRequest) (*TagResponse, error)
	GetSome(*TagSomeRequest, TagService_GetSomeServer) error
	GetAll(*TagStreamRequest, TagService_GetAllServer) error
	Subscribe(*TagStreamRequest, TagService_SubscribeServer) error
	GetMeta(context.Context, *TagStreamRequest) (*MetaResponse, error)
	SubscribeMeta(*TagStreamRequest, TagService_SubscribeMetaServer) error
	GetAllBatched(*TagBatchedStreamRequest, TagService_GetAllBatchedServer) error
	SubscribeBatched(*TagBatchedStreamRequest, TagService_SubscribeBatchedServer) error
	mustEmbedUnimplementedTagServiceServer()
}

// UnimplementedTagServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTagServiceServer struct {
}

func (UnimplementedTagServiceServer) GetOne(context.Context, *TagRequest) (*TagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedTagServiceServer) GetSome(*TagSomeRequest, TagService_GetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSome not implemented")
}
func (UnimplementedTagServiceServer) GetAll(*TagStreamRequest, TagService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedTagServiceServer) Subscribe(*TagStreamRequest, TagService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedTagServiceServer) GetMeta(context.Context, *TagStreamRequest) (*MetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeta not implemented")
}
func (UnimplementedTagServiceServer) SubscribeMeta(*TagStreamRequest, TagService_SubscribeMetaServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMeta not implemented")
}
func (UnimplementedTagServiceServer) GetAllBatched(*TagBatchedStreamRequest, TagService_GetAllBatchedServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllBatched not implemented")
}
func (UnimplementedTagServiceServer) SubscribeBatched(*TagBatchedStreamRequest, TagService_SubscribeBatchedServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeBatched not implemented")
}
func (UnimplementedTagServiceServer) mustEmbedUnimplementedTagServiceServer() {}

// UnsafeTagServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TagServiceServer will
// result in compilation errors.
type UnsafeTagServiceServer interface {
	mustEmbedUnimplementedTagServiceServer()
}

func RegisterTagServiceServer(s grpc.ServiceRegistrar, srv TagServiceServer) {
	s.RegisterService(&TagService_ServiceDesc, srv)
}

func _TagService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TagService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServiceServer).GetOne(ctx, req.(*TagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagService_GetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TagSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TagServiceServer).GetSome(m, &tagServiceGetSomeServer{stream})
}

type TagService_GetSomeServer interface {
	Send(*TagSomeResponse) error
	grpc.ServerStream
}

type tagServiceGetSomeServer struct {
	grpc.ServerStream
}

func (x *tagServiceGetSomeServer) Send(m *TagSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TagService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TagStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TagServiceServer).GetAll(m, &tagServiceGetAllServer{stream})
}

type TagService_GetAllServer interface {
	Send(*TagStreamResponse) error
	grpc.ServerStream
}

type tagServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *tagServiceGetAllServer) Send(m *TagStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TagService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TagStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TagServiceServer).Subscribe(m, &tagServiceSubscribeServer{stream})
}

type TagService_SubscribeServer interface {
	Send(*TagStreamResponse) error
	grpc.ServerStream
}

type tagServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *tagServiceSubscribeServer) Send(m *TagStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TagService_GetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServiceServer).GetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TagService_GetMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServiceServer).GetMeta(ctx, req.(*TagStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagService_SubscribeMeta_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TagStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TagServiceServer).SubscribeMeta(m, &tagServiceSubscribeMetaServer{stream})
}

type TagService_SubscribeMetaServer interface {
	Send(*MetaResponse) error
	grpc.ServerStream
}

type tagServiceSubscribeMetaServer struct {
	grpc.ServerStream
}

func (x *tagServiceSubscribeMetaServer) Send(m *MetaResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TagService_GetAllBatched_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TagBatchedStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TagServiceServer).GetAllBatched(m, &tagServiceGetAllBatchedServer{stream})
}

type TagService_GetAllBatchedServer interface {
	Send(*TagBatchedStreamResponse) error
	grpc.ServerStream
}

type tagServiceGetAllBatchedServer struct {
	grpc.ServerStream
}

func (x *tagServiceGetAllBatchedServer) Send(m *TagBatchedStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TagService_SubscribeBatched_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TagBatchedStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TagServiceServer).SubscribeBatched(m, &tagServiceSubscribeBatchedServer{stream})
}

type TagService_SubscribeBatchedServer interface {
	Send(*TagBatchedStreamResponse) error
	grpc.ServerStream
}

type tagServiceSubscribeBatchedServer struct {
	grpc.ServerStream
}

func (x *tagServiceSubscribeBatchedServer) Send(m *TagBatchedStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// TagService_ServiceDesc is the grpc.ServiceDesc for TagService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TagService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.tag.v2.TagService",
	HandlerType: (*TagServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _TagService_GetOne_Handler,
		},
		{
			MethodName: "GetMeta",
			Handler:    _TagService_GetMeta_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSome",
			Handler:       _TagService_GetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAll",
			Handler:       _TagService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _TagService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeMeta",
			Handler:       _TagService_SubscribeMeta_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllBatched",
			Handler:       _TagService_GetAllBatched_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeBatched",
			Handler:       _TagService_SubscribeBatched_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/tag.v2/services.gen.proto",
}

const (
	TagAssignmentService_GetOne_FullMethodName           = "/arista.tag.v2.TagAssignmentService/GetOne"
	TagAssignmentService_GetSome_FullMethodName          = "/arista.tag.v2.TagAssignmentService/GetSome"
	TagAssignmentService_GetAll_FullMethodName           = "/arista.tag.v2.TagAssignmentService/GetAll"
	TagAssignmentService_Subscribe_FullMethodName        = "/arista.tag.v2.TagAssignmentService/Subscribe"
	TagAssignmentService_GetMeta_FullMethodName          = "/arista.tag.v2.TagAssignmentService/GetMeta"
	TagAssignmentService_SubscribeMeta_FullMethodName    = "/arista.tag.v2.TagAssignmentService/SubscribeMeta"
	TagAssignmentService_GetAllBatched_FullMethodName    = "/arista.tag.v2.TagAssignmentService/GetAllBatched"
	TagAssignmentService_SubscribeBatched_FullMethodName = "/arista.tag.v2.TagAssignmentService/SubscribeBatched"
)

// TagAssignmentServiceClient is the client API for TagAssignmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TagAssignmentServiceClient interface {
	GetOne(ctx context.Context, in *TagAssignmentRequest, opts ...grpc.CallOption) (*TagAssignmentResponse, error)
	GetSome(ctx context.Context, in *TagAssignmentSomeRequest, opts ...grpc.CallOption) (TagAssignmentService_GetSomeClient, error)
	GetAll(ctx context.Context, in *TagAssignmentStreamRequest, opts ...grpc.CallOption) (TagAssignmentService_GetAllClient, error)
	Subscribe(ctx context.Context, in *TagAssignmentStreamRequest, opts ...grpc.CallOption) (TagAssignmentService_SubscribeClient, error)
	GetMeta(ctx context.Context, in *TagAssignmentStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error)
	SubscribeMeta(ctx context.Context, in *TagAssignmentStreamRequest, opts ...grpc.CallOption) (TagAssignmentService_SubscribeMetaClient, error)
	GetAllBatched(ctx context.Context, in *TagAssignmentBatchedStreamRequest, opts ...grpc.CallOption) (TagAssignmentService_GetAllBatchedClient, error)
	SubscribeBatched(ctx context.Context, in *TagAssignmentBatchedStreamRequest, opts ...grpc.CallOption) (TagAssignmentService_SubscribeBatchedClient, error)
}

type tagAssignmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTagAssignmentServiceClient(cc grpc.ClientConnInterface) TagAssignmentServiceClient {
	return &tagAssignmentServiceClient{cc}
}

func (c *tagAssignmentServiceClient) GetOne(ctx context.Context, in *TagAssignmentRequest, opts ...grpc.CallOption) (*TagAssignmentResponse, error) {
	out := new(TagAssignmentResponse)
	err := c.cc.Invoke(ctx, TagAssignmentService_GetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagAssignmentServiceClient) GetSome(ctx context.Context, in *TagAssignmentSomeRequest, opts ...grpc.CallOption) (TagAssignmentService_GetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &TagAssignmentService_ServiceDesc.Streams[0], TagAssignmentService_GetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tagAssignmentServiceGetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TagAssignmentService_GetSomeClient interface {
	Recv() (*TagAssignmentSomeResponse, error)
	grpc.ClientStream
}

type tagAssignmentServiceGetSomeClient struct {
	grpc.ClientStream
}

func (x *tagAssignmentServiceGetSomeClient) Recv() (*TagAssignmentSomeResponse, error) {
	m := new(TagAssignmentSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tagAssignmentServiceClient) GetAll(ctx context.Context, in *TagAssignmentStreamRequest, opts ...grpc.CallOption) (TagAssignmentService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &TagAssignmentService_ServiceDesc.Streams[1], TagAssignmentService_GetAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tagAssignmentServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TagAssignmentService_GetAllClient interface {
	Recv() (*TagAssignmentStreamResponse, error)
	grpc.ClientStream
}

type tagAssignmentServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *tagAssignmentServiceGetAllClient) Recv() (*TagAssignmentStreamResponse, error) {
	m := new(TagAssignmentStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tagAssignmentServiceClient) Subscribe(ctx context.Context, in *TagAssignmentStreamRequest, opts ...grpc.CallOption) (TagAssignmentService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &TagAssignmentService_ServiceDesc.Streams[2], TagAssignmentService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tagAssignmentServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TagAssignmentService_SubscribeClient interface {
	Recv() (*TagAssignmentStreamResponse, error)
	grpc.ClientStream
}

type tagAssignmentServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *tagAssignmentServiceSubscribeClient) Recv() (*TagAssignmentStreamResponse, error) {
	m := new(TagAssignmentStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tagAssignmentServiceClient) GetMeta(ctx context.Context, in *TagAssignmentStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error) {
	out := new(MetaResponse)
	err := c.cc.Invoke(ctx, TagAssignmentService_GetMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagAssignmentServiceClient) SubscribeMeta(ctx context.Context, in *TagAssignmentStreamRequest, opts ...grpc.CallOption) (TagAssignmentService_SubscribeMetaClient, error) {
	stream, err := c.cc.NewStream(ctx, &TagAssignmentService_ServiceDesc.Streams[3], TagAssignmentService_SubscribeMeta_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tagAssignmentServiceSubscribeMetaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TagAssignmentService_SubscribeMetaClient interface {
	Recv() (*MetaResponse, error)
	grpc.ClientStream
}

type tagAssignmentServiceSubscribeMetaClient struct {
	grpc.ClientStream
}

func (x *tagAssignmentServiceSubscribeMetaClient) Recv() (*MetaResponse, error) {
	m := new(MetaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tagAssignmentServiceClient) GetAllBatched(ctx context.Context, in *TagAssignmentBatchedStreamRequest, opts ...grpc.CallOption) (TagAssignmentService_GetAllBatchedClient, error) {
	stream, err := c.cc.NewStream(ctx, &TagAssignmentService_ServiceDesc.Streams[4], TagAssignmentService_GetAllBatched_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tagAssignmentServiceGetAllBatchedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TagAssignmentService_GetAllBatchedClient interface {
	Recv() (*TagAssignmentBatchedStreamResponse, error)
	grpc.ClientStream
}

type tagAssignmentServiceGetAllBatchedClient struct {
	grpc.ClientStream
}

func (x *tagAssignmentServiceGetAllBatchedClient) Recv() (*TagAssignmentBatchedStreamResponse, error) {
	m := new(TagAssignmentBatchedStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tagAssignmentServiceClient) SubscribeBatched(ctx context.Context, in *TagAssignmentBatchedStreamRequest, opts ...grpc.CallOption) (TagAssignmentService_SubscribeBatchedClient, error) {
	stream, err := c.cc.NewStream(ctx, &TagAssignmentService_ServiceDesc.Streams[5], TagAssignmentService_SubscribeBatched_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tagAssignmentServiceSubscribeBatchedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TagAssignmentService_SubscribeBatchedClient interface {
	Recv() (*TagAssignmentBatchedStreamResponse, error)
	grpc.ClientStream
}

type tagAssignmentServiceSubscribeBatchedClient struct {
	grpc.ClientStream
}

func (x *tagAssignmentServiceSubscribeBatchedClient) Recv() (*TagAssignmentBatchedStreamResponse, error) {
	m := new(TagAssignmentBatchedStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TagAssignmentServiceServer is the server API for TagAssignmentService service.
// All implementations must embed UnimplementedTagAssignmentServiceServer
// for forward compatibility
type TagAssignmentServiceServer interface {
	GetOne(context.Context, *TagAssignmentRequest) (*TagAssignmentResponse, error)
	GetSome(*TagAssignmentSomeRequest, TagAssignmentService_GetSomeServer) error
	GetAll(*TagAssignmentStreamRequest, TagAssignmentService_GetAllServer) error
	Subscribe(*TagAssignmentStreamRequest, TagAssignmentService_SubscribeServer) error
	GetMeta(context.Context, *TagAssignmentStreamRequest) (*MetaResponse, error)
	SubscribeMeta(*TagAssignmentStreamRequest, TagAssignmentService_SubscribeMetaServer) error
	GetAllBatched(*TagAssignmentBatchedStreamRequest, TagAssignmentService_GetAllBatchedServer) error
	SubscribeBatched(*TagAssignmentBatchedStreamRequest, TagAssignmentService_SubscribeBatchedServer) error
	mustEmbedUnimplementedTagAssignmentServiceServer()
}

// UnimplementedTagAssignmentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTagAssignmentServiceServer struct {
}

func (UnimplementedTagAssignmentServiceServer) GetOne(context.Context, *TagAssignmentRequest) (*TagAssignmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedTagAssignmentServiceServer) GetSome(*TagAssignmentSomeRequest, TagAssignmentService_GetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSome not implemented")
}
func (UnimplementedTagAssignmentServiceServer) GetAll(*TagAssignmentStreamRequest, TagAssignmentService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedTagAssignmentServiceServer) Subscribe(*TagAssignmentStreamRequest, TagAssignmentService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedTagAssignmentServiceServer) GetMeta(context.Context, *TagAssignmentStreamRequest) (*MetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeta not implemented")
}
func (UnimplementedTagAssignmentServiceServer) SubscribeMeta(*TagAssignmentStreamRequest, TagAssignmentService_SubscribeMetaServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMeta not implemented")
}
func (UnimplementedTagAssignmentServiceServer) GetAllBatched(*TagAssignmentBatchedStreamRequest, TagAssignmentService_GetAllBatchedServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllBatched not implemented")
}
func (UnimplementedTagAssignmentServiceServer) SubscribeBatched(*TagAssignmentBatchedStreamRequest, TagAssignmentService_SubscribeBatchedServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeBatched not implemented")
}
func (UnimplementedTagAssignmentServiceServer) mustEmbedUnimplementedTagAssignmentServiceServer() {}

// UnsafeTagAssignmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TagAssignmentServiceServer will
// result in compilation errors.
type UnsafeTagAssignmentServiceServer interface {
	mustEmbedUnimplementedTagAssignmentServiceServer()
}

func RegisterTagAssignmentServiceServer(s grpc.ServiceRegistrar, srv TagAssignmentServiceServer) {
	s.RegisterService(&TagAssignmentService_ServiceDesc, srv)
}

func _TagAssignmentService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagAssignmentServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TagAssignmentService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagAssignmentServiceServer).GetOne(ctx, req.(*TagAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagAssignmentService_GetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TagAssignmentSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TagAssignmentServiceServer).GetSome(m, &tagAssignmentServiceGetSomeServer{stream})
}

type TagAssignmentService_GetSomeServer interface {
	Send(*TagAssignmentSomeResponse) error
	grpc.ServerStream
}

type tagAssignmentServiceGetSomeServer struct {
	grpc.ServerStream
}

func (x *tagAssignmentServiceGetSomeServer) Send(m *TagAssignmentSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TagAssignmentService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TagAssignmentStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TagAssignmentServiceServer).GetAll(m, &tagAssignmentServiceGetAllServer{stream})
}

type TagAssignmentService_GetAllServer interface {
	Send(*TagAssignmentStreamResponse) error
	grpc.ServerStream
}

type tagAssignmentServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *tagAssignmentServiceGetAllServer) Send(m *TagAssignmentStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TagAssignmentService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TagAssignmentStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TagAssignmentServiceServer).Subscribe(m, &tagAssignmentServiceSubscribeServer{stream})
}

type TagAssignmentService_SubscribeServer interface {
	Send(*TagAssignmentStreamResponse) error
	grpc.ServerStream
}

type tagAssignmentServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *tagAssignmentServiceSubscribeServer) Send(m *TagAssignmentStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TagAssignmentService_GetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagAssignmentStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagAssignmentServiceServer).GetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TagAssignmentService_GetMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagAssignmentServiceServer).GetMeta(ctx, req.(*TagAssignmentStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagAssignmentService_SubscribeMeta_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TagAssignmentStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TagAssignmentServiceServer).SubscribeMeta(m, &tagAssignmentServiceSubscribeMetaServer{stream})
}

type TagAssignmentService_SubscribeMetaServer interface {
	Send(*MetaResponse) error
	grpc.ServerStream
}

type tagAssignmentServiceSubscribeMetaServer struct {
	grpc.ServerStream
}

func (x *tagAssignmentServiceSubscribeMetaServer) Send(m *MetaResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TagAssignmentService_GetAllBatched_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TagAssignmentBatchedStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TagAssignmentServiceServer).GetAllBatched(m, &tagAssignmentServiceGetAllBatchedServer{stream})
}

type TagAssignmentService_GetAllBatchedServer interface {
	Send(*TagAssignmentBatchedStreamResponse) error
	grpc.ServerStream
}

type tagAssignmentServiceGetAllBatchedServer struct {
	grpc.ServerStream
}

func (x *tagAssignmentServiceGetAllBatchedServer) Send(m *TagAssignmentBatchedStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TagAssignmentService_SubscribeBatched_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TagAssignmentBatchedStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TagAssignmentServiceServer).SubscribeBatched(m, &tagAssignmentServiceSubscribeBatchedServer{stream})
}

type TagAssignmentService_SubscribeBatchedServer interface {
	Send(*TagAssignmentBatchedStreamResponse) error
	grpc.ServerStream
}

type tagAssignmentServiceSubscribeBatchedServer struct {
	grpc.ServerStream
}

func (x *tagAssignmentServiceSubscribeBatchedServer) Send(m *TagAssignmentBatchedStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// TagAssignmentService_ServiceDesc is the grpc.ServiceDesc for TagAssignmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TagAssignmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.tag.v2.TagAssignmentService",
	HandlerType: (*TagAssignmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _TagAssignmentService_GetOne_Handler,
		},
		{
			MethodName: "GetMeta",
			Handler:    _TagAssignmentService_GetMeta_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSome",
			Handler:       _TagAssignmentService_GetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAll",
			Handler:       _TagAssignmentService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _TagAssignmentService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeMeta",
			Handler:       _TagAssignmentService_SubscribeMeta_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllBatched",
			Handler:       _TagAssignmentService_GetAllBatched_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeBatched",
			Handler:       _TagAssignmentService_SubscribeBatched_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/tag.v2/services.gen.proto",
}

const (
	TagAssignmentConfigService_GetOne_FullMethodName           = "/arista.tag.v2.TagAssignmentConfigService/GetOne"
	TagAssignmentConfigService_GetSome_FullMethodName          = "/arista.tag.v2.TagAssignmentConfigService/GetSome"
	TagAssignmentConfigService_GetAll_FullMethodName           = "/arista.tag.v2.TagAssignmentConfigService/GetAll"
	TagAssignmentConfigService_Subscribe_FullMethodName        = "/arista.tag.v2.TagAssignmentConfigService/Subscribe"
	TagAssignmentConfigService_GetMeta_FullMethodName          = "/arista.tag.v2.TagAssignmentConfigService/GetMeta"
	TagAssignmentConfigService_SubscribeMeta_FullMethodName    = "/arista.tag.v2.TagAssignmentConfigService/SubscribeMeta"
	TagAssignmentConfigService_Set_FullMethodName              = "/arista.tag.v2.TagAssignmentConfigService/Set"
	TagAssignmentConfigService_SetSome_FullMethodName          = "/arista.tag.v2.TagAssignmentConfigService/SetSome"
	TagAssignmentConfigService_Delete_FullMethodName           = "/arista.tag.v2.TagAssignmentConfigService/Delete"
	TagAssignmentConfigService_DeleteSome_FullMethodName       = "/arista.tag.v2.TagAssignmentConfigService/DeleteSome"
	TagAssignmentConfigService_DeleteAll_FullMethodName        = "/arista.tag.v2.TagAssignmentConfigService/DeleteAll"
	TagAssignmentConfigService_GetAllBatched_FullMethodName    = "/arista.tag.v2.TagAssignmentConfigService/GetAllBatched"
	TagAssignmentConfigService_SubscribeBatched_FullMethodName = "/arista.tag.v2.TagAssignmentConfigService/SubscribeBatched"
)

// TagAssignmentConfigServiceClient is the client API for TagAssignmentConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TagAssignmentConfigServiceClient interface {
	GetOne(ctx context.Context, in *TagAssignmentConfigRequest, opts ...grpc.CallOption) (*TagAssignmentConfigResponse, error)
	GetSome(ctx context.Context, in *TagAssignmentConfigSomeRequest, opts ...grpc.CallOption) (TagAssignmentConfigService_GetSomeClient, error)
	GetAll(ctx context.Context, in *TagAssignmentConfigStreamRequest, opts ...grpc.CallOption) (TagAssignmentConfigService_GetAllClient, error)
	Subscribe(ctx context.Context, in *TagAssignmentConfigStreamRequest, opts ...grpc.CallOption) (TagAssignmentConfigService_SubscribeClient, error)
	GetMeta(ctx context.Context, in *TagAssignmentConfigStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error)
	SubscribeMeta(ctx context.Context, in *TagAssignmentConfigStreamRequest, opts ...grpc.CallOption) (TagAssignmentConfigService_SubscribeMetaClient, error)
	Set(ctx context.Context, in *TagAssignmentConfigSetRequest, opts ...grpc.CallOption) (*TagAssignmentConfigSetResponse, error)
	SetSome(ctx context.Context, in *TagAssignmentConfigSetSomeRequest, opts ...grpc.CallOption) (TagAssignmentConfigService_SetSomeClient, error)
	Delete(ctx context.Context, in *TagAssignmentConfigDeleteRequest, opts ...grpc.CallOption) (*TagAssignmentConfigDeleteResponse, error)
	DeleteSome(ctx context.Context, in *TagAssignmentConfigDeleteSomeRequest, opts ...grpc.CallOption) (TagAssignmentConfigService_DeleteSomeClient, error)
	DeleteAll(ctx context.Context, in *TagAssignmentConfigDeleteAllRequest, opts ...grpc.CallOption) (TagAssignmentConfigService_DeleteAllClient, error)
	GetAllBatched(ctx context.Context, in *TagAssignmentConfigBatchedStreamRequest, opts ...grpc.CallOption) (TagAssignmentConfigService_GetAllBatchedClient, error)
	SubscribeBatched(ctx context.Context, in *TagAssignmentConfigBatchedStreamRequest, opts ...grpc.CallOption) (TagAssignmentConfigService_SubscribeBatchedClient, error)
}

type tagAssignmentConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTagAssignmentConfigServiceClient(cc grpc.ClientConnInterface) TagAssignmentConfigServiceClient {
	return &tagAssignmentConfigServiceClient{cc}
}

func (c *tagAssignmentConfigServiceClient) GetOne(ctx context.Context, in *TagAssignmentConfigRequest, opts ...grpc.CallOption) (*TagAssignmentConfigResponse, error) {
	out := new(TagAssignmentConfigResponse)
	err := c.cc.Invoke(ctx, TagAssignmentConfigService_GetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagAssignmentConfigServiceClient) GetSome(ctx context.Context, in *TagAssignmentConfigSomeRequest, opts ...grpc.CallOption) (TagAssignmentConfigService_GetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &TagAssignmentConfigService_ServiceDesc.Streams[0], TagAssignmentConfigService_GetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tagAssignmentConfigServiceGetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TagAssignmentConfigService_GetSomeClient interface {
	Recv() (*TagAssignmentConfigSomeResponse, error)
	grpc.ClientStream
}

type tagAssignmentConfigServiceGetSomeClient struct {
	grpc.ClientStream
}

func (x *tagAssignmentConfigServiceGetSomeClient) Recv() (*TagAssignmentConfigSomeResponse, error) {
	m := new(TagAssignmentConfigSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tagAssignmentConfigServiceClient) GetAll(ctx context.Context, in *TagAssignmentConfigStreamRequest, opts ...grpc.CallOption) (TagAssignmentConfigService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &TagAssignmentConfigService_ServiceDesc.Streams[1], TagAssignmentConfigService_GetAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tagAssignmentConfigServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TagAssignmentConfigService_GetAllClient interface {
	Recv() (*TagAssignmentConfigStreamResponse, error)
	grpc.ClientStream
}

type tagAssignmentConfigServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *tagAssignmentConfigServiceGetAllClient) Recv() (*TagAssignmentConfigStreamResponse, error) {
	m := new(TagAssignmentConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tagAssignmentConfigServiceClient) Subscribe(ctx context.Context, in *TagAssignmentConfigStreamRequest, opts ...grpc.CallOption) (TagAssignmentConfigService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &TagAssignmentConfigService_ServiceDesc.Streams[2], TagAssignmentConfigService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tagAssignmentConfigServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TagAssignmentConfigService_SubscribeClient interface {
	Recv() (*TagAssignmentConfigStreamResponse, error)
	grpc.ClientStream
}

type tagAssignmentConfigServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *tagAssignmentConfigServiceSubscribeClient) Recv() (*TagAssignmentConfigStreamResponse, error) {
	m := new(TagAssignmentConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tagAssignmentConfigServiceClient) GetMeta(ctx context.Context, in *TagAssignmentConfigStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error) {
	out := new(MetaResponse)
	err := c.cc.Invoke(ctx, TagAssignmentConfigService_GetMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagAssignmentConfigServiceClient) SubscribeMeta(ctx context.Context, in *TagAssignmentConfigStreamRequest, opts ...grpc.CallOption) (TagAssignmentConfigService_SubscribeMetaClient, error) {
	stream, err := c.cc.NewStream(ctx, &TagAssignmentConfigService_ServiceDesc.Streams[3], TagAssignmentConfigService_SubscribeMeta_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tagAssignmentConfigServiceSubscribeMetaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TagAssignmentConfigService_SubscribeMetaClient interface {
	Recv() (*MetaResponse, error)
	grpc.ClientStream
}

type tagAssignmentConfigServiceSubscribeMetaClient struct {
	grpc.ClientStream
}

func (x *tagAssignmentConfigServiceSubscribeMetaClient) Recv() (*MetaResponse, error) {
	m := new(MetaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tagAssignmentConfigServiceClient) Set(ctx context.Context, in *TagAssignmentConfigSetRequest, opts ...grpc.CallOption) (*TagAssignmentConfigSetResponse, error) {
	out := new(TagAssignmentConfigSetResponse)
	err := c.cc.Invoke(ctx, TagAssignmentConfigService_Set_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagAssignmentConfigServiceClient) SetSome(ctx context.Context, in *TagAssignmentConfigSetSomeRequest, opts ...grpc.CallOption) (TagAssignmentConfigService_SetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &TagAssignmentConfigService_ServiceDesc.Streams[4], TagAssignmentConfigService_SetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tagAssignmentConfigServiceSetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TagAssignmentConfigService_SetSomeClient interface {
	Recv() (*TagAssignmentConfigSetSomeResponse, error)
	grpc.ClientStream
}

type tagAssignmentConfigServiceSetSomeClient struct {
	grpc.ClientStream
}

func (x *tagAssignmentConfigServiceSetSomeClient) Recv() (*TagAssignmentConfigSetSomeResponse, error) {
	m := new(TagAssignmentConfigSetSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tagAssignmentConfigServiceClient) Delete(ctx context.Context, in *TagAssignmentConfigDeleteRequest, opts ...grpc.CallOption) (*TagAssignmentConfigDeleteResponse, error) {
	out := new(TagAssignmentConfigDeleteResponse)
	err := c.cc.Invoke(ctx, TagAssignmentConfigService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagAssignmentConfigServiceClient) DeleteSome(ctx context.Context, in *TagAssignmentConfigDeleteSomeRequest, opts ...grpc.CallOption) (TagAssignmentConfigService_DeleteSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &TagAssignmentConfigService_ServiceDesc.Streams[5], TagAssignmentConfigService_DeleteSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tagAssignmentConfigServiceDeleteSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TagAssignmentConfigService_DeleteSomeClient interface {
	Recv() (*TagAssignmentConfigDeleteSomeResponse, error)
	grpc.ClientStream
}

type tagAssignmentConfigServiceDeleteSomeClient struct {
	grpc.ClientStream
}

func (x *tagAssignmentConfigServiceDeleteSomeClient) Recv() (*TagAssignmentConfigDeleteSomeResponse, error) {
	m := new(TagAssignmentConfigDeleteSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tagAssignmentConfigServiceClient) DeleteAll(ctx context.Context, in *TagAssignmentConfigDeleteAllRequest, opts ...grpc.CallOption) (TagAssignmentConfigService_DeleteAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &TagAssignmentConfigService_ServiceDesc.Streams[6], TagAssignmentConfigService_DeleteAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tagAssignmentConfigServiceDeleteAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TagAssignmentConfigService_DeleteAllClient interface {
	Recv() (*TagAssignmentConfigDeleteAllResponse, error)
	grpc.ClientStream
}

type tagAssignmentConfigServiceDeleteAllClient struct {
	grpc.ClientStream
}

func (x *tagAssignmentConfigServiceDeleteAllClient) Recv() (*TagAssignmentConfigDeleteAllResponse, error) {
	m := new(TagAssignmentConfigDeleteAllResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tagAssignmentConfigServiceClient) GetAllBatched(ctx context.Context, in *TagAssignmentConfigBatchedStreamRequest, opts ...grpc.CallOption) (TagAssignmentConfigService_GetAllBatchedClient, error) {
	stream, err := c.cc.NewStream(ctx, &TagAssignmentConfigService_ServiceDesc.Streams[7], TagAssignmentConfigService_GetAllBatched_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tagAssignmentConfigServiceGetAllBatchedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TagAssignmentConfigService_GetAllBatchedClient interface {
	Recv() (*TagAssignmentConfigBatchedStreamResponse, error)
	grpc.ClientStream
}

type tagAssignmentConfigServiceGetAllBatchedClient struct {
	grpc.ClientStream
}

func (x *tagAssignmentConfigServiceGetAllBatchedClient) Recv() (*TagAssignmentConfigBatchedStreamResponse, error) {
	m := new(TagAssignmentConfigBatchedStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tagAssignmentConfigServiceClient) SubscribeBatched(ctx context.Context, in *TagAssignmentConfigBatchedStreamRequest, opts ...grpc.CallOption) (TagAssignmentConfigService_SubscribeBatchedClient, error) {
	stream, err := c.cc.NewStream(ctx, &TagAssignmentConfigService_ServiceDesc.Streams[8], TagAssignmentConfigService_SubscribeBatched_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tagAssignmentConfigServiceSubscribeBatchedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TagAssignmentConfigService_SubscribeBatchedClient interface {
	Recv() (*TagAssignmentConfigBatchedStreamResponse, error)
	grpc.ClientStream
}

type tagAssignmentConfigServiceSubscribeBatchedClient struct {
	grpc.ClientStream
}

func (x *tagAssignmentConfigServiceSubscribeBatchedClient) Recv() (*TagAssignmentConfigBatchedStreamResponse, error) {
	m := new(TagAssignmentConfigBatchedStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TagAssignmentConfigServiceServer is the server API for TagAssignmentConfigService service.
// All implementations must embed UnimplementedTagAssignmentConfigServiceServer
// for forward compatibility
type TagAssignmentConfigServiceServer interface {
	GetOne(context.Context, *TagAssignmentConfigRequest) (*TagAssignmentConfigResponse, error)
	GetSome(*TagAssignmentConfigSomeRequest, TagAssignmentConfigService_GetSomeServer) error
	GetAll(*TagAssignmentConfigStreamRequest, TagAssignmentConfigService_GetAllServer) error
	Subscribe(*TagAssignmentConfigStreamRequest, TagAssignmentConfigService_SubscribeServer) error
	GetMeta(context.Context, *TagAssignmentConfigStreamRequest) (*MetaResponse, error)
	SubscribeMeta(*TagAssignmentConfigStreamRequest, TagAssignmentConfigService_SubscribeMetaServer) error
	Set(context.Context, *TagAssignmentConfigSetRequest) (*TagAssignmentConfigSetResponse, error)
	SetSome(*TagAssignmentConfigSetSomeRequest, TagAssignmentConfigService_SetSomeServer) error
	Delete(context.Context, *TagAssignmentConfigDeleteRequest) (*TagAssignmentConfigDeleteResponse, error)
	DeleteSome(*TagAssignmentConfigDeleteSomeRequest, TagAssignmentConfigService_DeleteSomeServer) error
	DeleteAll(*TagAssignmentConfigDeleteAllRequest, TagAssignmentConfigService_DeleteAllServer) error
	GetAllBatched(*TagAssignmentConfigBatchedStreamRequest, TagAssignmentConfigService_GetAllBatchedServer) error
	SubscribeBatched(*TagAssignmentConfigBatchedStreamRequest, TagAssignmentConfigService_SubscribeBatchedServer) error
	mustEmbedUnimplementedTagAssignmentConfigServiceServer()
}

// UnimplementedTagAssignmentConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTagAssignmentConfigServiceServer struct {
}

func (UnimplementedTagAssignmentConfigServiceServer) GetOne(context.Context, *TagAssignmentConfigRequest) (*TagAssignmentConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedTagAssignmentConfigServiceServer) GetSome(*TagAssignmentConfigSomeRequest, TagAssignmentConfigService_GetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSome not implemented")
}
func (UnimplementedTagAssignmentConfigServiceServer) GetAll(*TagAssignmentConfigStreamRequest, TagAssignmentConfigService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedTagAssignmentConfigServiceServer) Subscribe(*TagAssignmentConfigStreamRequest, TagAssignmentConfigService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedTagAssignmentConfigServiceServer) GetMeta(context.Context, *TagAssignmentConfigStreamRequest) (*MetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeta not implemented")
}
func (UnimplementedTagAssignmentConfigServiceServer) SubscribeMeta(*TagAssignmentConfigStreamRequest, TagAssignmentConfigService_SubscribeMetaServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMeta not implemented")
}
func (UnimplementedTagAssignmentConfigServiceServer) Set(context.Context, *TagAssignmentConfigSetRequest) (*TagAssignmentConfigSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedTagAssignmentConfigServiceServer) SetSome(*TagAssignmentConfigSetSomeRequest, TagAssignmentConfigService_SetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method SetSome not implemented")
}
func (UnimplementedTagAssignmentConfigServiceServer) Delete(context.Context, *TagAssignmentConfigDeleteRequest) (*TagAssignmentConfigDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTagAssignmentConfigServiceServer) DeleteSome(*TagAssignmentConfigDeleteSomeRequest, TagAssignmentConfigService_DeleteSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteSome not implemented")
}
func (UnimplementedTagAssignmentConfigServiceServer) DeleteAll(*TagAssignmentConfigDeleteAllRequest, TagAssignmentConfigService_DeleteAllServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteAll not implemented")
}
func (UnimplementedTagAssignmentConfigServiceServer) GetAllBatched(*TagAssignmentConfigBatchedStreamRequest, TagAssignmentConfigService_GetAllBatchedServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllBatched not implemented")
}
func (UnimplementedTagAssignmentConfigServiceServer) SubscribeBatched(*TagAssignmentConfigBatchedStreamRequest, TagAssignmentConfigService_SubscribeBatchedServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeBatched not implemented")
}
func (UnimplementedTagAssignmentConfigServiceServer) mustEmbedUnimplementedTagAssignmentConfigServiceServer() {
}

// UnsafeTagAssignmentConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TagAssignmentConfigServiceServer will
// result in compilation errors.
type UnsafeTagAssignmentConfigServiceServer interface {
	mustEmbedUnimplementedTagAssignmentConfigServiceServer()
}

func RegisterTagAssignmentConfigServiceServer(s grpc.ServiceRegistrar, srv TagAssignmentConfigServiceServer) {
	s.RegisterService(&TagAssignmentConfigService_ServiceDesc, srv)
}

func _TagAssignmentConfigService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagAssignmentConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagAssignmentConfigServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TagAssignmentConfigService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagAssignmentConfigServiceServer).GetOne(ctx, req.(*TagAssignmentConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagAssignmentConfigService_GetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TagAssignmentConfigSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TagAssignmentConfigServiceServer).GetSome(m, &tagAssignmentConfigServiceGetSomeServer{stream})
}

type TagAssignmentConfigService_GetSomeServer interface {
	Send(*TagAssignmentConfigSomeResponse) error
	grpc.ServerStream
}

type tagAssignmentConfigServiceGetSomeServer struct {
	grpc.ServerStream
}

func (x *tagAssignmentConfigServiceGetSomeServer) Send(m *TagAssignmentConfigSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TagAssignmentConfigService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TagAssignmentConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TagAssignmentConfigServiceServer).GetAll(m, &tagAssignmentConfigServiceGetAllServer{stream})
}

type TagAssignmentConfigService_GetAllServer interface {
	Send(*TagAssignmentConfigStreamResponse) error
	grpc.ServerStream
}

type tagAssignmentConfigServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *tagAssignmentConfigServiceGetAllServer) Send(m *TagAssignmentConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TagAssignmentConfigService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TagAssignmentConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TagAssignmentConfigServiceServer).Subscribe(m, &tagAssignmentConfigServiceSubscribeServer{stream})
}

type TagAssignmentConfigService_SubscribeServer interface {
	Send(*TagAssignmentConfigStreamResponse) error
	grpc.ServerStream
}

type tagAssignmentConfigServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *tagAssignmentConfigServiceSubscribeServer) Send(m *TagAssignmentConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TagAssignmentConfigService_GetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagAssignmentConfigStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagAssignmentConfigServiceServer).GetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TagAssignmentConfigService_GetMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagAssignmentConfigServiceServer).GetMeta(ctx, req.(*TagAssignmentConfigStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagAssignmentConfigService_SubscribeMeta_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TagAssignmentConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TagAssignmentConfigServiceServer).SubscribeMeta(m, &tagAssignmentConfigServiceSubscribeMetaServer{stream})
}

type TagAssignmentConfigService_SubscribeMetaServer interface {
	Send(*MetaResponse) error
	grpc.ServerStream
}

type tagAssignmentConfigServiceSubscribeMetaServer struct {
	grpc.ServerStream
}

func (x *tagAssignmentConfigServiceSubscribeMetaServer) Send(m *MetaResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TagAssignmentConfigService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagAssignmentConfigSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagAssignmentConfigServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TagAssignmentConfigService_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagAssignmentConfigServiceServer).Set(ctx, req.(*TagAssignmentConfigSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagAssignmentConfigService_SetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TagAssignmentConfigSetSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TagAssignmentConfigServiceServer).SetSome(m, &tagAssignmentConfigServiceSetSomeServer{stream})
}

type TagAssignmentConfigService_SetSomeServer interface {
	Send(*TagAssignmentConfigSetSomeResponse) error
	grpc.ServerStream
}

type tagAssignmentConfigServiceSetSomeServer struct {
	grpc.ServerStream
}

func (x *tagAssignmentConfigServiceSetSomeServer) Send(m *TagAssignmentConfigSetSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TagAssignmentConfigService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagAssignmentConfigDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagAssignmentConfigServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TagAssignmentConfigService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagAssignmentConfigServiceServer).Delete(ctx, req.(*TagAssignmentConfigDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagAssignmentConfigService_DeleteSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TagAssignmentConfigDeleteSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TagAssignmentConfigServiceServer).DeleteSome(m, &tagAssignmentConfigServiceDeleteSomeServer{stream})
}

type TagAssignmentConfigService_DeleteSomeServer interface {
	Send(*TagAssignmentConfigDeleteSomeResponse) error
	grpc.ServerStream
}

type tagAssignmentConfigServiceDeleteSomeServer struct {
	grpc.ServerStream
}

func (x *tagAssignmentConfigServiceDeleteSomeServer) Send(m *TagAssignmentConfigDeleteSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TagAssignmentConfigService_DeleteAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TagAssignmentConfigDeleteAllRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TagAssignmentConfigServiceServer).DeleteAll(m, &tagAssignmentConfigServiceDeleteAllServer{stream})
}

type TagAssignmentConfigService_DeleteAllServer interface {
	Send(*TagAssignmentConfigDeleteAllResponse) error
	grpc.ServerStream
}

type tagAssignmentConfigServiceDeleteAllServer struct {
	grpc.ServerStream
}

func (x *tagAssignmentConfigServiceDeleteAllServer) Send(m *TagAssignmentConfigDeleteAllResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TagAssignmentConfigService_GetAllBatched_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TagAssignmentConfigBatchedStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TagAssignmentConfigServiceServer).GetAllBatched(m, &tagAssignmentConfigServiceGetAllBatchedServer{stream})
}

type TagAssignmentConfigService_GetAllBatchedServer interface {
	Send(*TagAssignmentConfigBatchedStreamResponse) error
	grpc.ServerStream
}

type tagAssignmentConfigServiceGetAllBatchedServer struct {
	grpc.ServerStream
}

func (x *tagAssignmentConfigServiceGetAllBatchedServer) Send(m *TagAssignmentConfigBatchedStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TagAssignmentConfigService_SubscribeBatched_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TagAssignmentConfigBatchedStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TagAssignmentConfigServiceServer).SubscribeBatched(m, &tagAssignmentConfigServiceSubscribeBatchedServer{stream})
}

type TagAssignmentConfigService_SubscribeBatchedServer interface {
	Send(*TagAssignmentConfigBatchedStreamResponse) error
	grpc.ServerStream
}

type tagAssignmentConfigServiceSubscribeBatchedServer struct {
	grpc.ServerStream
}

func (x *tagAssignmentConfigServiceSubscribeBatchedServer) Send(m *TagAssignmentConfigBatchedStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// TagAssignmentConfigService_ServiceDesc is the grpc.ServiceDesc for TagAssignmentConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TagAssignmentConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.tag.v2.TagAssignmentConfigService",
	HandlerType: (*TagAssignmentConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _TagAssignmentConfigService_GetOne_Handler,
		},
		{
			MethodName: "GetMeta",
			Handler:    _TagAssignmentConfigService_GetMeta_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _TagAssignmentConfigService_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TagAssignmentConfigService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSome",
			Handler:       _TagAssignmentConfigService_GetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAll",
			Handler:       _TagAssignmentConfigService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _TagAssignmentConfigService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeMeta",
			Handler:       _TagAssignmentConfigService_SubscribeMeta_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SetSome",
			Handler:       _TagAssignmentConfigService_SetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteSome",
			Handler:       _TagAssignmentConfigService_DeleteSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteAll",
			Handler:       _TagAssignmentConfigService_DeleteAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllBatched",
			Handler:       _TagAssignmentConfigService_GetAllBatched_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeBatched",
			Handler:       _TagAssignmentConfigService_SubscribeBatched_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/tag.v2/services.gen.proto",
}

const (
	TagConfigService_GetOne_FullMethodName           = "/arista.tag.v2.TagConfigService/GetOne"
	TagConfigService_GetSome_FullMethodName          = "/arista.tag.v2.TagConfigService/GetSome"
	TagConfigService_GetAll_FullMethodName           = "/arista.tag.v2.TagConfigService/GetAll"
	TagConfigService_Subscribe_FullMethodName        = "/arista.tag.v2.TagConfigService/Subscribe"
	TagConfigService_GetMeta_FullMethodName          = "/arista.tag.v2.TagConfigService/GetMeta"
	TagConfigService_SubscribeMeta_FullMethodName    = "/arista.tag.v2.TagConfigService/SubscribeMeta"
	TagConfigService_Set_FullMethodName              = "/arista.tag.v2.TagConfigService/Set"
	TagConfigService_SetSome_FullMethodName          = "/arista.tag.v2.TagConfigService/SetSome"
	TagConfigService_Delete_FullMethodName           = "/arista.tag.v2.TagConfigService/Delete"
	TagConfigService_DeleteSome_FullMethodName       = "/arista.tag.v2.TagConfigService/DeleteSome"
	TagConfigService_DeleteAll_FullMethodName        = "/arista.tag.v2.TagConfigService/DeleteAll"
	TagConfigService_GetAllBatched_FullMethodName    = "/arista.tag.v2.TagConfigService/GetAllBatched"
	TagConfigService_SubscribeBatched_FullMethodName = "/arista.tag.v2.TagConfigService/SubscribeBatched"
)

// TagConfigServiceClient is the client API for TagConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TagConfigServiceClient interface {
	GetOne(ctx context.Context, in *TagConfigRequest, opts ...grpc.CallOption) (*TagConfigResponse, error)
	GetSome(ctx context.Context, in *TagConfigSomeRequest, opts ...grpc.CallOption) (TagConfigService_GetSomeClient, error)
	GetAll(ctx context.Context, in *TagConfigStreamRequest, opts ...grpc.CallOption) (TagConfigService_GetAllClient, error)
	Subscribe(ctx context.Context, in *TagConfigStreamRequest, opts ...grpc.CallOption) (TagConfigService_SubscribeClient, error)
	GetMeta(ctx context.Context, in *TagConfigStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error)
	SubscribeMeta(ctx context.Context, in *TagConfigStreamRequest, opts ...grpc.CallOption) (TagConfigService_SubscribeMetaClient, error)
	Set(ctx context.Context, in *TagConfigSetRequest, opts ...grpc.CallOption) (*TagConfigSetResponse, error)
	SetSome(ctx context.Context, in *TagConfigSetSomeRequest, opts ...grpc.CallOption) (TagConfigService_SetSomeClient, error)
	Delete(ctx context.Context, in *TagConfigDeleteRequest, opts ...grpc.CallOption) (*TagConfigDeleteResponse, error)
	DeleteSome(ctx context.Context, in *TagConfigDeleteSomeRequest, opts ...grpc.CallOption) (TagConfigService_DeleteSomeClient, error)
	DeleteAll(ctx context.Context, in *TagConfigDeleteAllRequest, opts ...grpc.CallOption) (TagConfigService_DeleteAllClient, error)
	GetAllBatched(ctx context.Context, in *TagConfigBatchedStreamRequest, opts ...grpc.CallOption) (TagConfigService_GetAllBatchedClient, error)
	SubscribeBatched(ctx context.Context, in *TagConfigBatchedStreamRequest, opts ...grpc.CallOption) (TagConfigService_SubscribeBatchedClient, error)
}

type tagConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTagConfigServiceClient(cc grpc.ClientConnInterface) TagConfigServiceClient {
	return &tagConfigServiceClient{cc}
}

func (c *tagConfigServiceClient) GetOne(ctx context.Context, in *TagConfigRequest, opts ...grpc.CallOption) (*TagConfigResponse, error) {
	out := new(TagConfigResponse)
	err := c.cc.Invoke(ctx, TagConfigService_GetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagConfigServiceClient) GetSome(ctx context.Context, in *TagConfigSomeRequest, opts ...grpc.CallOption) (TagConfigService_GetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &TagConfigService_ServiceDesc.Streams[0], TagConfigService_GetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tagConfigServiceGetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TagConfigService_GetSomeClient interface {
	Recv() (*TagConfigSomeResponse, error)
	grpc.ClientStream
}

type tagConfigServiceGetSomeClient struct {
	grpc.ClientStream
}

func (x *tagConfigServiceGetSomeClient) Recv() (*TagConfigSomeResponse, error) {
	m := new(TagConfigSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tagConfigServiceClient) GetAll(ctx context.Context, in *TagConfigStreamRequest, opts ...grpc.CallOption) (TagConfigService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &TagConfigService_ServiceDesc.Streams[1], TagConfigService_GetAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tagConfigServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TagConfigService_GetAllClient interface {
	Recv() (*TagConfigStreamResponse, error)
	grpc.ClientStream
}

type tagConfigServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *tagConfigServiceGetAllClient) Recv() (*TagConfigStreamResponse, error) {
	m := new(TagConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tagConfigServiceClient) Subscribe(ctx context.Context, in *TagConfigStreamRequest, opts ...grpc.CallOption) (TagConfigService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &TagConfigService_ServiceDesc.Streams[2], TagConfigService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tagConfigServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TagConfigService_SubscribeClient interface {
	Recv() (*TagConfigStreamResponse, error)
	grpc.ClientStream
}

type tagConfigServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *tagConfigServiceSubscribeClient) Recv() (*TagConfigStreamResponse, error) {
	m := new(TagConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tagConfigServiceClient) GetMeta(ctx context.Context, in *TagConfigStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error) {
	out := new(MetaResponse)
	err := c.cc.Invoke(ctx, TagConfigService_GetMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagConfigServiceClient) SubscribeMeta(ctx context.Context, in *TagConfigStreamRequest, opts ...grpc.CallOption) (TagConfigService_SubscribeMetaClient, error) {
	stream, err := c.cc.NewStream(ctx, &TagConfigService_ServiceDesc.Streams[3], TagConfigService_SubscribeMeta_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tagConfigServiceSubscribeMetaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TagConfigService_SubscribeMetaClient interface {
	Recv() (*MetaResponse, error)
	grpc.ClientStream
}

type tagConfigServiceSubscribeMetaClient struct {
	grpc.ClientStream
}

func (x *tagConfigServiceSubscribeMetaClient) Recv() (*MetaResponse, error) {
	m := new(MetaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tagConfigServiceClient) Set(ctx context.Context, in *TagConfigSetRequest, opts ...grpc.CallOption) (*TagConfigSetResponse, error) {
	out := new(TagConfigSetResponse)
	err := c.cc.Invoke(ctx, TagConfigService_Set_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagConfigServiceClient) SetSome(ctx context.Context, in *TagConfigSetSomeRequest, opts ...grpc.CallOption) (TagConfigService_SetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &TagConfigService_ServiceDesc.Streams[4], TagConfigService_SetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tagConfigServiceSetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TagConfigService_SetSomeClient interface {
	Recv() (*TagConfigSetSomeResponse, error)
	grpc.ClientStream
}

type tagConfigServiceSetSomeClient struct {
	grpc.ClientStream
}

func (x *tagConfigServiceSetSomeClient) Recv() (*TagConfigSetSomeResponse, error) {
	m := new(TagConfigSetSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tagConfigServiceClient) Delete(ctx context.Context, in *TagConfigDeleteRequest, opts ...grpc.CallOption) (*TagConfigDeleteResponse, error) {
	out := new(TagConfigDeleteResponse)
	err := c.cc.Invoke(ctx, TagConfigService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagConfigServiceClient) DeleteSome(ctx context.Context, in *TagConfigDeleteSomeRequest, opts ...grpc.CallOption) (TagConfigService_DeleteSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &TagConfigService_ServiceDesc.Streams[5], TagConfigService_DeleteSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tagConfigServiceDeleteSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TagConfigService_DeleteSomeClient interface {
	Recv() (*TagConfigDeleteSomeResponse, error)
	grpc.ClientStream
}

type tagConfigServiceDeleteSomeClient struct {
	grpc.ClientStream
}

func (x *tagConfigServiceDeleteSomeClient) Recv() (*TagConfigDeleteSomeResponse, error) {
	m := new(TagConfigDeleteSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tagConfigServiceClient) DeleteAll(ctx context.Context, in *TagConfigDeleteAllRequest, opts ...grpc.CallOption) (TagConfigService_DeleteAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &TagConfigService_ServiceDesc.Streams[6], TagConfigService_DeleteAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tagConfigServiceDeleteAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TagConfigService_DeleteAllClient interface {
	Recv() (*TagConfigDeleteAllResponse, error)
	grpc.ClientStream
}

type tagConfigServiceDeleteAllClient struct {
	grpc.ClientStream
}

func (x *tagConfigServiceDeleteAllClient) Recv() (*TagConfigDeleteAllResponse, error) {
	m := new(TagConfigDeleteAllResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tagConfigServiceClient) GetAllBatched(ctx context.Context, in *TagConfigBatchedStreamRequest, opts ...grpc.CallOption) (TagConfigService_GetAllBatchedClient, error) {
	stream, err := c.cc.NewStream(ctx, &TagConfigService_ServiceDesc.Streams[7], TagConfigService_GetAllBatched_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tagConfigServiceGetAllBatchedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TagConfigService_GetAllBatchedClient interface {
	Recv() (*TagConfigBatchedStreamResponse, error)
	grpc.ClientStream
}

type tagConfigServiceGetAllBatchedClient struct {
	grpc.ClientStream
}

func (x *tagConfigServiceGetAllBatchedClient) Recv() (*TagConfigBatchedStreamResponse, error) {
	m := new(TagConfigBatchedStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tagConfigServiceClient) SubscribeBatched(ctx context.Context, in *TagConfigBatchedStreamRequest, opts ...grpc.CallOption) (TagConfigService_SubscribeBatchedClient, error) {
	stream, err := c.cc.NewStream(ctx, &TagConfigService_ServiceDesc.Streams[8], TagConfigService_SubscribeBatched_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tagConfigServiceSubscribeBatchedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TagConfigService_SubscribeBatchedClient interface {
	Recv() (*TagConfigBatchedStreamResponse, error)
	grpc.ClientStream
}

type tagConfigServiceSubscribeBatchedClient struct {
	grpc.ClientStream
}

func (x *tagConfigServiceSubscribeBatchedClient) Recv() (*TagConfigBatchedStreamResponse, error) {
	m := new(TagConfigBatchedStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TagConfigServiceServer is the server API for TagConfigService service.
// All implementations must embed UnimplementedTagConfigServiceServer
// for forward compatibility
type TagConfigServiceServer interface {
	GetOne(context.Context, *TagConfigRequest) (*TagConfigResponse, error)
	GetSome(*TagConfigSomeRequest, TagConfigService_GetSomeServer) error
	GetAll(*TagConfigStreamRequest, TagConfigService_GetAllServer) error
	Subscribe(*TagConfigStreamRequest, TagConfigService_SubscribeServer) error
	GetMeta(context.Context, *TagConfigStreamRequest) (*MetaResponse, error)
	SubscribeMeta(*TagConfigStreamRequest, TagConfigService_SubscribeMetaServer) error
	Set(context.Context, *TagConfigSetRequest) (*TagConfigSetResponse, error)
	SetSome(*TagConfigSetSomeRequest, TagConfigService_SetSomeServer) error
	Delete(context.Context, *TagConfigDeleteRequest) (*TagConfigDeleteResponse, error)
	DeleteSome(*TagConfigDeleteSomeRequest, TagConfigService_DeleteSomeServer) error
	DeleteAll(*TagConfigDeleteAllRequest, TagConfigService_DeleteAllServer) error
	GetAllBatched(*TagConfigBatchedStreamRequest, TagConfigService_GetAllBatchedServer) error
	SubscribeBatched(*TagConfigBatchedStreamRequest, TagConfigService_SubscribeBatchedServer) error
	mustEmbedUnimplementedTagConfigServiceServer()
}

// UnimplementedTagConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTagConfigServiceServer struct {
}

func (UnimplementedTagConfigServiceServer) GetOne(context.Context, *TagConfigRequest) (*TagConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedTagConfigServiceServer) GetSome(*TagConfigSomeRequest, TagConfigService_GetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSome not implemented")
}
func (UnimplementedTagConfigServiceServer) GetAll(*TagConfigStreamRequest, TagConfigService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedTagConfigServiceServer) Subscribe(*TagConfigStreamRequest, TagConfigService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedTagConfigServiceServer) GetMeta(context.Context, *TagConfigStreamRequest) (*MetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeta not implemented")
}
func (UnimplementedTagConfigServiceServer) SubscribeMeta(*TagConfigStreamRequest, TagConfigService_SubscribeMetaServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMeta not implemented")
}
func (UnimplementedTagConfigServiceServer) Set(context.Context, *TagConfigSetRequest) (*TagConfigSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedTagConfigServiceServer) SetSome(*TagConfigSetSomeRequest, TagConfigService_SetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method SetSome not implemented")
}
func (UnimplementedTagConfigServiceServer) Delete(context.Context, *TagConfigDeleteRequest) (*TagConfigDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTagConfigServiceServer) DeleteSome(*TagConfigDeleteSomeRequest, TagConfigService_DeleteSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteSome not implemented")
}
func (UnimplementedTagConfigServiceServer) DeleteAll(*TagConfigDeleteAllRequest, TagConfigService_DeleteAllServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteAll not implemented")
}
func (UnimplementedTagConfigServiceServer) GetAllBatched(*TagConfigBatchedStreamRequest, TagConfigService_GetAllBatchedServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllBatched not implemented")
}
func (UnimplementedTagConfigServiceServer) SubscribeBatched(*TagConfigBatchedStreamRequest, TagConfigService_SubscribeBatchedServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeBatched not implemented")
}
func (UnimplementedTagConfigServiceServer) mustEmbedUnimplementedTagConfigServiceServer() {}

// UnsafeTagConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TagConfigServiceServer will
// result in compilation errors.
type UnsafeTagConfigServiceServer interface {
	mustEmbedUnimplementedTagConfigServiceServer()
}

func RegisterTagConfigServiceServer(s grpc.ServiceRegistrar, srv TagConfigServiceServer) {
	s.RegisterService(&TagConfigService_ServiceDesc, srv)
}

func _TagConfigService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagConfigServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TagConfigService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagConfigServiceServer).GetOne(ctx, req.(*TagConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagConfigService_GetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TagConfigSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TagConfigServiceServer).GetSome(m, &tagConfigServiceGetSomeServer{stream})
}

type TagConfigService_GetSomeServer interface {
	Send(*TagConfigSomeResponse) error
	grpc.ServerStream
}

type tagConfigServiceGetSomeServer struct {
	grpc.ServerStream
}

func (x *tagConfigServiceGetSomeServer) Send(m *TagConfigSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TagConfigService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TagConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TagConfigServiceServer).GetAll(m, &tagConfigServiceGetAllServer{stream})
}

type TagConfigService_GetAllServer interface {
	Send(*TagConfigStreamResponse) error
	grpc.ServerStream
}

type tagConfigServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *tagConfigServiceGetAllServer) Send(m *TagConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TagConfigService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TagConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TagConfigServiceServer).Subscribe(m, &tagConfigServiceSubscribeServer{stream})
}

type TagConfigService_SubscribeServer interface {
	Send(*TagConfigStreamResponse) error
	grpc.ServerStream
}

type tagConfigServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *tagConfigServiceSubscribeServer) Send(m *TagConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TagConfigService_GetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagConfigStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagConfigServiceServer).GetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TagConfigService_GetMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagConfigServiceServer).GetMeta(ctx, req.(*TagConfigStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagConfigService_SubscribeMeta_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TagConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TagConfigServiceServer).SubscribeMeta(m, &tagConfigServiceSubscribeMetaServer{stream})
}

type TagConfigService_SubscribeMetaServer interface {
	Send(*MetaResponse) error
	grpc.ServerStream
}

type tagConfigServiceSubscribeMetaServer struct {
	grpc.ServerStream
}

func (x *tagConfigServiceSubscribeMetaServer) Send(m *MetaResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TagConfigService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagConfigSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagConfigServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TagConfigService_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagConfigServiceServer).Set(ctx, req.(*TagConfigSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagConfigService_SetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TagConfigSetSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TagConfigServiceServer).SetSome(m, &tagConfigServiceSetSomeServer{stream})
}

type TagConfigService_SetSomeServer interface {
	Send(*TagConfigSetSomeResponse) error
	grpc.ServerStream
}

type tagConfigServiceSetSomeServer struct {
	grpc.ServerStream
}

func (x *tagConfigServiceSetSomeServer) Send(m *TagConfigSetSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TagConfigService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagConfigDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagConfigServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TagConfigService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagConfigServiceServer).Delete(ctx, req.(*TagConfigDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagConfigService_DeleteSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TagConfigDeleteSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TagConfigServiceServer).DeleteSome(m, &tagConfigServiceDeleteSomeServer{stream})
}

type TagConfigService_DeleteSomeServer interface {
	Send(*TagConfigDeleteSomeResponse) error
	grpc.ServerStream
}

type tagConfigServiceDeleteSomeServer struct {
	grpc.ServerStream
}

func (x *tagConfigServiceDeleteSomeServer) Send(m *TagConfigDeleteSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TagConfigService_DeleteAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TagConfigDeleteAllRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TagConfigServiceServer).DeleteAll(m, &tagConfigServiceDeleteAllServer{stream})
}

type TagConfigService_DeleteAllServer interface {
	Send(*TagConfigDeleteAllResponse) error
	grpc.ServerStream
}

type tagConfigServiceDeleteAllServer struct {
	grpc.ServerStream
}

func (x *tagConfigServiceDeleteAllServer) Send(m *TagConfigDeleteAllResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TagConfigService_GetAllBatched_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TagConfigBatchedStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TagConfigServiceServer).GetAllBatched(m, &tagConfigServiceGetAllBatchedServer{stream})
}

type TagConfigService_GetAllBatchedServer interface {
	Send(*TagConfigBatchedStreamResponse) error
	grpc.ServerStream
}

type tagConfigServiceGetAllBatchedServer struct {
	grpc.ServerStream
}

func (x *tagConfigServiceGetAllBatchedServer) Send(m *TagConfigBatchedStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TagConfigService_SubscribeBatched_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TagConfigBatchedStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TagConfigServiceServer).SubscribeBatched(m, &tagConfigServiceSubscribeBatchedServer{stream})
}

type TagConfigService_SubscribeBatchedServer interface {
	Send(*TagConfigBatchedStreamResponse) error
	grpc.ServerStream
}

type tagConfigServiceSubscribeBatchedServer struct {
	grpc.ServerStream
}

func (x *tagConfigServiceSubscribeBatchedServer) Send(m *TagConfigBatchedStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// TagConfigService_ServiceDesc is the grpc.ServiceDesc for TagConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TagConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.tag.v2.TagConfigService",
	HandlerType: (*TagConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _TagConfigService_GetOne_Handler,
		},
		{
			MethodName: "GetMeta",
			Handler:    _TagConfigService_GetMeta_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _TagConfigService_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TagConfigService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSome",
			Handler:       _TagConfigService_GetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAll",
			Handler:       _TagConfigService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _TagConfigService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeMeta",
			Handler:       _TagConfigService_SubscribeMeta_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SetSome",
			Handler:       _TagConfigService_SetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteSome",
			Handler:       _TagConfigService_DeleteSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteAll",
			Handler:       _TagConfigService_DeleteAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllBatched",
			Handler:       _TagConfigService_GetAllBatched_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeBatched",
			Handler:       _TagConfigService_SubscribeBatched_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/tag.v2/services.gen.proto",
}
