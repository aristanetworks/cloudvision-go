// Copyright (c) 2021 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v4.24.4
// source: arista/tag.v2/tag.proto

package tag

import (
	_ "github.com/aristanetworks/cloudvision-go/api/fmp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ElementType enumerates the types of network elements that can
// be associated with tags.
type ElementType int32

const (
	// ELEMENT_TYPE_UNSPECIFIED is the default value.
	ElementType_ELEMENT_TYPE_UNSPECIFIED ElementType = 0
	// ELEMENT_TYPE_DEVICE is used for device tags.
	ElementType_ELEMENT_TYPE_DEVICE ElementType = 1
	// ELEMENT_TYPE_INTERFACE is used for interface tags.
	ElementType_ELEMENT_TYPE_INTERFACE ElementType = 2
	// ELEMENT_TYPE_VIRTUAL is used for virtual entities(applications/services) tags.
	ElementType_ELEMENT_TYPE_VIRTUAL ElementType = 3
)

// Enum value maps for ElementType.
var (
	ElementType_name = map[int32]string{
		0: "ELEMENT_TYPE_UNSPECIFIED",
		1: "ELEMENT_TYPE_DEVICE",
		2: "ELEMENT_TYPE_INTERFACE",
		3: "ELEMENT_TYPE_VIRTUAL",
	}
	ElementType_value = map[string]int32{
		"ELEMENT_TYPE_UNSPECIFIED": 0,
		"ELEMENT_TYPE_DEVICE":      1,
		"ELEMENT_TYPE_INTERFACE":   2,
		"ELEMENT_TYPE_VIRTUAL":     3,
	}
)

func (x ElementType) Enum() *ElementType {
	p := new(ElementType)
	*p = x
	return p
}

func (x ElementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ElementType) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_tag_v2_tag_proto_enumTypes[0].Descriptor()
}

func (ElementType) Type() protoreflect.EnumType {
	return &file_arista_tag_v2_tag_proto_enumTypes[0]
}

func (x ElementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ElementType.Descriptor instead.
func (ElementType) EnumDescriptor() ([]byte, []int) {
	return file_arista_tag_v2_tag_proto_rawDescGZIP(), []int{0}
}

// ElementSubType enumerates the sub-types of network elements that can
// be associated with tags.
type ElementSubType int32

const (
	// ELEMENT_SUB_TYPE_UNSPECIFIED is the default value.
	ElementSubType_ELEMENT_SUB_TYPE_UNSPECIFIED ElementSubType = 0
	// ELEMENT_SUB_TYPE_DEVICE is used for EOS or
	// third-party devices discovered via LLDP/SNMP.
	ElementSubType_ELEMENT_SUB_TYPE_DEVICE ElementSubType = 1
	// ELEMENT_SUB_TYPE_VDS is used for VMWare vSphere Distributed Switch (VDS) tags.
	ElementSubType_ELEMENT_SUB_TYPE_VDS ElementSubType = 2
	// ELEMENT_SUB_TYPE_WORKLOAD_SERVER is used for workload server
	// tags (such as VMWare ESXi host).
	// A workload server is a server/data storage device on which
	// the hypervisor is installed.
	ElementSubType_ELEMENT_SUB_TYPE_WORKLOAD_SERVER ElementSubType = 3
	// ELEMENT_SUB_TYPE_VM is used for VM tags.
	// A VM is a software computer that, like a physical computer,
	// runs an operating system and applications.
	ElementSubType_ELEMENT_SUB_TYPE_VM ElementSubType = 4
	// ELEMENT_SUB_TYPE_APPLICATION is used for application tags.
	// An application is defined as a set of services where each service provides
	// a subset of the applicationâ€™s functionality. An application can exist without
	// a service but not vice-versa.
	ElementSubType_ELEMENT_SUB_TYPE_APPLICATION ElementSubType = 5
)

// Enum value maps for ElementSubType.
var (
	ElementSubType_name = map[int32]string{
		0: "ELEMENT_SUB_TYPE_UNSPECIFIED",
		1: "ELEMENT_SUB_TYPE_DEVICE",
		2: "ELEMENT_SUB_TYPE_VDS",
		3: "ELEMENT_SUB_TYPE_WORKLOAD_SERVER",
		4: "ELEMENT_SUB_TYPE_VM",
		5: "ELEMENT_SUB_TYPE_APPLICATION",
	}
	ElementSubType_value = map[string]int32{
		"ELEMENT_SUB_TYPE_UNSPECIFIED":     0,
		"ELEMENT_SUB_TYPE_DEVICE":          1,
		"ELEMENT_SUB_TYPE_VDS":             2,
		"ELEMENT_SUB_TYPE_WORKLOAD_SERVER": 3,
		"ELEMENT_SUB_TYPE_VM":              4,
		"ELEMENT_SUB_TYPE_APPLICATION":     5,
	}
)

func (x ElementSubType) Enum() *ElementSubType {
	p := new(ElementSubType)
	*p = x
	return p
}

func (x ElementSubType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ElementSubType) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_tag_v2_tag_proto_enumTypes[1].Descriptor()
}

func (ElementSubType) Type() protoreflect.EnumType {
	return &file_arista_tag_v2_tag_proto_enumTypes[1]
}

func (x ElementSubType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ElementSubType.Descriptor instead.
func (ElementSubType) EnumDescriptor() ([]byte, []int) {
	return file_arista_tag_v2_tag_proto_rawDescGZIP(), []int{1}
}

// CreatorType enumerates the types of entities that can create
// a tag.
type CreatorType int32

const (
	// CREATOR_TYPE_UNSPECIFIED is the default value.
	CreatorType_CREATOR_TYPE_UNSPECIFIED CreatorType = 0
	// CREATOR_TYPE_SYSTEM is used for system tags.
	CreatorType_CREATOR_TYPE_SYSTEM CreatorType = 1
	// CREATOR_TYPE_USER is used for user tags.
	CreatorType_CREATOR_TYPE_USER CreatorType = 2
	// CREATOR_TYPE_EXTERNAL is used for tags created from external sources.
	// For E.g., vCenter
	CreatorType_CREATOR_TYPE_EXTERNAL CreatorType = 3
)

// Enum value maps for CreatorType.
var (
	CreatorType_name = map[int32]string{
		0: "CREATOR_TYPE_UNSPECIFIED",
		1: "CREATOR_TYPE_SYSTEM",
		2: "CREATOR_TYPE_USER",
		3: "CREATOR_TYPE_EXTERNAL",
	}
	CreatorType_value = map[string]int32{
		"CREATOR_TYPE_UNSPECIFIED": 0,
		"CREATOR_TYPE_SYSTEM":      1,
		"CREATOR_TYPE_USER":        2,
		"CREATOR_TYPE_EXTERNAL":    3,
	}
)

func (x CreatorType) Enum() *CreatorType {
	p := new(CreatorType)
	*p = x
	return p
}

func (x CreatorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreatorType) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_tag_v2_tag_proto_enumTypes[2].Descriptor()
}

func (CreatorType) Type() protoreflect.EnumType {
	return &file_arista_tag_v2_tag_proto_enumTypes[2]
}

func (x CreatorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreatorType.Descriptor instead.
func (CreatorType) EnumDescriptor() ([]byte, []int) {
	return file_arista_tag_v2_tag_proto_rawDescGZIP(), []int{2}
}

// TagKey uniquely identifies a tag.
type TagKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// workspace_id is the ID of a workspace. The special ID ""
	// identifies the location where merged tags reside.
	WorkspaceId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	// element_type is the category of network element to which
	// this tag can be assigned.
	ElementType ElementType `protobuf:"varint,2,opt,name=element_type,json=elementType,proto3,enum=arista.tag.v2.ElementType" json:"element_type,omitempty"`
	// label is an arbitrary label.
	Label *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	// value is an arbitrary value.
	Value *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	// element_sub_type is the sub-category of network element
	// to which this tag can be assigned.
	ElementSubType ElementSubType `protobuf:"varint,5,opt,name=element_sub_type,json=elementSubType,proto3,enum=arista.tag.v2.ElementSubType" json:"element_sub_type,omitempty"`
}

func (x *TagKey) Reset() {
	*x = TagKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_tag_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagKey) ProtoMessage() {}

func (x *TagKey) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_tag_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagKey.ProtoReflect.Descriptor instead.
func (*TagKey) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_tag_proto_rawDescGZIP(), []int{0}
}

func (x *TagKey) GetWorkspaceId() *wrapperspb.StringValue {
	if x != nil {
		return x.WorkspaceId
	}
	return nil
}

func (x *TagKey) GetElementType() ElementType {
	if x != nil {
		return x.ElementType
	}
	return ElementType_ELEMENT_TYPE_UNSPECIFIED
}

func (x *TagKey) GetLabel() *wrapperspb.StringValue {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *TagKey) GetValue() *wrapperspb.StringValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TagKey) GetElementSubType() ElementSubType {
	if x != nil {
		return x.ElementSubType
	}
	return ElementSubType_ELEMENT_SUB_TYPE_UNSPECIFIED
}

// TagConfig holds a configuration for a user tag.
// The tags that belong to entities other than ELEMENT_SUB_TYPE_DEVICE
// will always be present in mainline only.
type TagConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key identifies a tag. The special workspace ID "" for
	// merged tags should not be set here.
	Key *TagKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// remove indicates whether to remove (true) or add (false,
	// unset) the tag identified by the key if the encompassing
	// workspace merges.
	Remove *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=remove,proto3" json:"remove,omitempty"`
}

func (x *TagConfig) Reset() {
	*x = TagConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_tag_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagConfig) ProtoMessage() {}

func (x *TagConfig) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_tag_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagConfig.ProtoReflect.Descriptor instead.
func (*TagConfig) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_tag_proto_rawDescGZIP(), []int{1}
}

func (x *TagConfig) GetKey() *TagKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TagConfig) GetRemove() *wrapperspb.BoolValue {
	if x != nil {
		return x.Remove
	}
	return nil
}

// Tag holds a merge-preview or the existing merged state (if the
// workspace ID is "") of a tag.
type Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key identifies a tag.
	Key *TagKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// creator_type is the creator type of the tag.
	CreatorType CreatorType `protobuf:"varint,2,opt,name=creator_type,json=creatorType,proto3,enum=arista.tag.v2.CreatorType" json:"creator_type,omitempty"`
	// assigned indicates whether the tag is assigned
	// (true) or not (false).
	Assigned *wrapperspb.BoolValue `protobuf:"bytes,3,opt,name=assigned,proto3" json:"assigned,omitempty"`
}

func (x *Tag) Reset() {
	*x = Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_tag_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_tag_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_tag_proto_rawDescGZIP(), []int{2}
}

func (x *Tag) GetKey() *TagKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Tag) GetCreatorType() CreatorType {
	if x != nil {
		return x.CreatorType
	}
	return CreatorType_CREATOR_TYPE_UNSPECIFIED
}

func (x *Tag) GetAssigned() *wrapperspb.BoolValue {
	if x != nil {
		return x.Assigned
	}
	return nil
}

// TagAssignmentKey uniquely identifies an assignment between
// a tag and a network element.
type TagAssignmentKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// workspace_id is the ID of a workspace. The special ID ""
	// identifies the location where merged assignments reside.
	WorkspaceId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	// element_type is the element type of a tag. What should
	// be set per element type:
	//
	// ELEMENT_TYPE_DEVICE: device_id
	// ELEMENT_TYPE_INTERFACE: device_id, interface_id
	// ELEMENT_TYPE_VIRTUAL:
	//
	//	primary_entity_id -> application_id
	//	secondary_entity_id -> service_id
	ElementType ElementType `protobuf:"varint,2,opt,name=element_type,json=elementType,proto3,enum=arista.tag.v2.ElementType" json:"element_type,omitempty"`
	// label is the label of a tag.
	Label *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	// value is the value of a tag.
	Value *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	// device_id identifies a device.
	DeviceId *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// interface_id identifies an interface on a device.
	InterfaceId *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=interface_id,json=interfaceId,proto3" json:"interface_id,omitempty"`
	// element_sub_type is the element sub-type of a tag.
	ElementSubType ElementSubType `protobuf:"varint,7,opt,name=element_sub_type,json=elementSubType,proto3,enum=arista.tag.v2.ElementSubType" json:"element_sub_type,omitempty"`
	// primary_entity_id holds unique identifiers of an application/device.
	// The primary entity is the entity which can exist by itself or can be
	// associated with a secondary entity.
	PrimaryEntityId *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=primary_entity_id,json=primaryEntityId,proto3" json:"primary_entity_id,omitempty"`
	// secondary_entity_id holds unique identifier of a service/interface. The secondary
	// entity is the entity which cannot exist by itself and always has to be associated
	// with a primary entity.
	SecondaryEntityId *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=secondary_entity_id,json=secondaryEntityId,proto3" json:"secondary_entity_id,omitempty"`
}

func (x *TagAssignmentKey) Reset() {
	*x = TagAssignmentKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_tag_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagAssignmentKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagAssignmentKey) ProtoMessage() {}

func (x *TagAssignmentKey) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_tag_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagAssignmentKey.ProtoReflect.Descriptor instead.
func (*TagAssignmentKey) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_tag_proto_rawDescGZIP(), []int{3}
}

func (x *TagAssignmentKey) GetWorkspaceId() *wrapperspb.StringValue {
	if x != nil {
		return x.WorkspaceId
	}
	return nil
}

func (x *TagAssignmentKey) GetElementType() ElementType {
	if x != nil {
		return x.ElementType
	}
	return ElementType_ELEMENT_TYPE_UNSPECIFIED
}

func (x *TagAssignmentKey) GetLabel() *wrapperspb.StringValue {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *TagAssignmentKey) GetValue() *wrapperspb.StringValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TagAssignmentKey) GetDeviceId() *wrapperspb.StringValue {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

func (x *TagAssignmentKey) GetInterfaceId() *wrapperspb.StringValue {
	if x != nil {
		return x.InterfaceId
	}
	return nil
}

func (x *TagAssignmentKey) GetElementSubType() ElementSubType {
	if x != nil {
		return x.ElementSubType
	}
	return ElementSubType_ELEMENT_SUB_TYPE_UNSPECIFIED
}

func (x *TagAssignmentKey) GetPrimaryEntityId() *wrapperspb.StringValue {
	if x != nil {
		return x.PrimaryEntityId
	}
	return nil
}

func (x *TagAssignmentKey) GetSecondaryEntityId() *wrapperspb.StringValue {
	if x != nil {
		return x.SecondaryEntityId
	}
	return nil
}

// TagAssignmentConfig holds a configuration for an assignment
// between a tag and a network element.
// The tag assignments that belong to entities other than ELEMENT_SUB_TYPE_DEVICE
// will always be present in mainline only.
type TagAssignmentConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key identifies an assignment. The special workspace ID ""
	// for merged assignments should not be set here.
	Key *TagAssignmentKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// remove indicates whether to remove (true) or add (false,
	// unset) the assignment identified by the key if the
	// encompassing workspace merges.
	Remove *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=remove,proto3" json:"remove,omitempty"`
}

func (x *TagAssignmentConfig) Reset() {
	*x = TagAssignmentConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_tag_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagAssignmentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagAssignmentConfig) ProtoMessage() {}

func (x *TagAssignmentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_tag_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagAssignmentConfig.ProtoReflect.Descriptor instead.
func (*TagAssignmentConfig) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_tag_proto_rawDescGZIP(), []int{4}
}

func (x *TagAssignmentConfig) GetKey() *TagAssignmentKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TagAssignmentConfig) GetRemove() *wrapperspb.BoolValue {
	if x != nil {
		return x.Remove
	}
	return nil
}

// TagAssignment holds a merge-preview or the existing merged
// state (if the workspace ID is "") of an assignment between
// a tag and a network element.
type TagAssignment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key identifies an assignment.
	Key *TagAssignmentKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// tag_creator_type is the creator type of the tag
	// involved in the assignment.
	TagCreatorType CreatorType `protobuf:"varint,2,opt,name=tag_creator_type,json=tagCreatorType,proto3,enum=arista.tag.v2.CreatorType" json:"tag_creator_type,omitempty"`
}

func (x *TagAssignment) Reset() {
	*x = TagAssignment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_tag_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagAssignment) ProtoMessage() {}

func (x *TagAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_tag_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagAssignment.ProtoReflect.Descriptor instead.
func (*TagAssignment) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_tag_proto_rawDescGZIP(), []int{5}
}

func (x *TagAssignment) GetKey() *TagAssignmentKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TagAssignment) GetTagCreatorType() CreatorType {
	if x != nil {
		return x.TagCreatorType
	}
	return CreatorType_CREATOR_TYPE_UNSPECIFIED
}

// ElementFilter is a custom filter for elements.
type ElementFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// search can be used to search for elements via a tag query.
	Search *ElementSearchFilter `protobuf:"bytes,1,opt,name=search,proto3" json:"search,omitempty"`
}

func (x *ElementFilter) Reset() {
	*x = ElementFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_tag_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementFilter) ProtoMessage() {}

func (x *ElementFilter) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_tag_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementFilter.ProtoReflect.Descriptor instead.
func (*ElementFilter) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_tag_proto_rawDescGZIP(), []int{6}
}

func (x *ElementFilter) GetSearch() *ElementSearchFilter {
	if x != nil {
		return x.Search
	}
	return nil
}

// ElementSearchFilter is a filter that can be used to search for a set of
// elements using a tag query.
type ElementSearchFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// query_element_type (required) indicates the type of element against which
	// the query will be executed. To search by sub-type, use the special "type:"
	// tag from within the query.
	QueryElementType ElementType `protobuf:"varint,1,opt,name=query_element_type,json=queryElementType,proto3,enum=arista.tag.v2.ElementType" json:"query_element_type,omitempty"`
	// query (required) is a tag query. This is a string that specifies a set of
	// tag assignment conditions. For example:
	//
	//   - "Campus:SF"
	//     Match any device that has the "Campus:SF" tag assigned to it.
	//     I.e., match any device in the SF campus.
	//   - "Campus:*"
	//     Match any device that has any "Campus:" tag assigned to it.
	//     I.e., match any device in any campus.
	//   - "Campus:SF AND Role:Spine"
	//     Match any device that has the "Campus:SF" and "Role:Spine"
	//     tag assigned to it.
	//     I.e., match any spine device in the SF campus.
	//
	// TODO: Link to grammar file.
	Query *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// workspace_id is the ID of a workspace. If set, it indicates that the
	// search space should be constrained only to the elements that are known
	// or configured in the given workspace.
	WorkspaceId *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	// exclude_unregistered_elements indicates whether elements that are not registered
	// in the Inventory and Topology (I&T) Studio should be excluded from the results.
	ExcludeUnregisteredElements *wrapperspb.BoolValue `protobuf:"bytes,11,opt,name=exclude_unregistered_elements,json=excludeUnregisteredElements,proto3" json:"exclude_unregistered_elements,omitempty"`
	// ignore_topology_tags indicates whether topology_hint tags should be ignored during
	// the execution of the query.
	IgnoreTopologyTags *wrapperspb.BoolValue `protobuf:"bytes,12,opt,name=ignore_topology_tags,json=ignoreTopologyTags,proto3" json:"ignore_topology_tags,omitempty"`
}

func (x *ElementSearchFilter) Reset() {
	*x = ElementSearchFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_tag_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementSearchFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementSearchFilter) ProtoMessage() {}

func (x *ElementSearchFilter) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_tag_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementSearchFilter.ProtoReflect.Descriptor instead.
func (*ElementSearchFilter) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_tag_proto_rawDescGZIP(), []int{7}
}

func (x *ElementSearchFilter) GetQueryElementType() ElementType {
	if x != nil {
		return x.QueryElementType
	}
	return ElementType_ELEMENT_TYPE_UNSPECIFIED
}

func (x *ElementSearchFilter) GetQuery() *wrapperspb.StringValue {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *ElementSearchFilter) GetWorkspaceId() *wrapperspb.StringValue {
	if x != nil {
		return x.WorkspaceId
	}
	return nil
}

func (x *ElementSearchFilter) GetExcludeUnregisteredElements() *wrapperspb.BoolValue {
	if x != nil {
		return x.ExcludeUnregisteredElements
	}
	return nil
}

func (x *ElementSearchFilter) GetIgnoreTopologyTags() *wrapperspb.BoolValue {
	if x != nil {
		return x.IgnoreTopologyTags
	}
	return nil
}

// ElementKey uniquely identifies a tagged or untagged network element.
type ElementKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type is the type of the element.
	Type ElementType `protobuf:"varint,1,opt,name=type,proto3,enum=arista.tag.v2.ElementType" json:"type,omitempty"`
	// sub_type is the sub-type of the element.
	SubType ElementSubType `protobuf:"varint,2,opt,name=sub_type,json=subType,proto3,enum=arista.tag.v2.ElementSubType" json:"sub_type,omitempty"`
	// primary_id is the device ID of the element. The value of
	// this ID is based on type and sub_type:
	//
	// type: DEVICE
	//
	//	sub_type: DEVICE
	//	  id: <serial_number>
	//	sub_type: VDS, WORKLOAD_SERVER, VM
	//	  id: <uuid>
	//
	// type: INTERFACE
	//
	//	sub_type: DEVICE
	//	  id: <serial_number>
	//	sub_type: VDS, WORKLOAD_SERVER, VM
	//	  id: <uuid>
	//
	// type: VIRTUAL
	//
	//	sub_type: APPLICATION
	//	  id: <application_id>
	PrimaryId *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=primary_id,json=primaryId,proto3" json:"primary_id,omitempty"`
	// secondary_id is the interface ID of the element. The value of
	// this ID is based on type and sub_type:
	//
	// type: DEVICE
	//
	//	N/A
	//
	// type: INTERFACE
	//
	//	sub_type: DEVICE
	//	  id: <interface_name>
	//	sub_type: VDS, WORKLOAD_SERVER, VM
	//	  id: <interface_name>
	//
	// type: VIRTUAL
	//
	//	sub_type: APPLICATION
	//	  id: <service_id>
	SecondaryId *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=secondary_id,json=secondaryId,proto3" json:"secondary_id,omitempty"`
}

func (x *ElementKey) Reset() {
	*x = ElementKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_tag_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementKey) ProtoMessage() {}

func (x *ElementKey) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_tag_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementKey.ProtoReflect.Descriptor instead.
func (*ElementKey) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_tag_proto_rawDescGZIP(), []int{8}
}

func (x *ElementKey) GetType() ElementType {
	if x != nil {
		return x.Type
	}
	return ElementType_ELEMENT_TYPE_UNSPECIFIED
}

func (x *ElementKey) GetSubType() ElementSubType {
	if x != nil {
		return x.SubType
	}
	return ElementSubType_ELEMENT_SUB_TYPE_UNSPECIFIED
}

func (x *ElementKey) GetPrimaryId() *wrapperspb.StringValue {
	if x != nil {
		return x.PrimaryId
	}
	return nil
}

func (x *ElementKey) GetSecondaryId() *wrapperspb.StringValue {
	if x != nil {
		return x.SecondaryId
	}
	return nil
}

// Element holds basic information about a tagged or untagged network
// element.
type Element struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key uniquely identifies the element.
	Key *ElementKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *Element) Reset() {
	*x = Element{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_tag_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Element) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Element) ProtoMessage() {}

func (x *Element) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_tag_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Element.ProtoReflect.Descriptor instead.
func (*Element) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_tag_proto_rawDescGZIP(), []int{9}
}

func (x *Element) GetKey() *ElementKey {
	if x != nil {
		return x.Key
	}
	return nil
}

var File_arista_tag_v2_tag_proto protoreflect.FileDescriptor

var file_arista_tag_v2_tag_proto_rawDesc = []byte{
	0x0a, 0x17, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2f,
	0x74, 0x61, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x66, 0x6d, 0x70, 0x2f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbf,
	0x02, 0x0a, 0x06, 0x54, 0x61, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x0c, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32,
	0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x32, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x47, 0x0a, 0x10, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x04, 0x80, 0x8e, 0x19, 0x01,
	0x22, 0x70, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x27, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x4b, 0x65,
	0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02,
	0x72, 0x77, 0x22, 0xad, 0x01, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x12, 0x27, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x4b, 0x65, 0x79, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02,
	0x72, 0x6f, 0x22, 0xdd, 0x04, 0x0a, 0x10, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x32, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x39, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0c, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x10, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74,
	0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x11, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x4c,
	0x0a, 0x13, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x3a, 0x04, 0x80, 0x8e,
	0x19, 0x01, 0x22, 0x84, 0x01, 0x0a, 0x13, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x31, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a,
	0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72, 0x77, 0x22, 0x90, 0x01, 0x0a, 0x0d, 0x54, 0x61,
	0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x44,
	0x0a, 0x10, 0x74, 0x61, 0x67, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x74, 0x61, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72, 0x6f, 0x22, 0x4b, 0x0a, 0x0d,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3a, 0x0a,
	0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x22, 0x82, 0x03, 0x0a, 0x13, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x48, 0x0a, 0x12, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x3f, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x5e, 0x0a, 0x1d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x75, 0x6e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x1b, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x55, 0x6e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x4c, 0x0a, 0x14, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x69, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x61, 0x67, 0x73, 0x22, 0xfa,
	0x01, 0x0a, 0x0a, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x2e, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a,
	0x08, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07,
	0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x49, 0x64, 0x3a, 0x04, 0x80, 0x8e, 0x19, 0x01, 0x22, 0x4f, 0x0a, 0x07, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67,
	0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x3a, 0x17, 0xfa, 0x8d, 0x19, 0x02, 0x72, 0x6f, 0x8a, 0x8e, 0x19, 0x0d, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2a, 0x7a, 0x0a, 0x0b,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x45,
	0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4c, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45,
	0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x10, 0x02, 0x12, 0x18,
	0x0a, 0x14, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56,
	0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x10, 0x03, 0x2a, 0xca, 0x01, 0x0a, 0x0e, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x45,
	0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a,
	0x17, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x4c,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56,
	0x44, 0x53, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x4c, 0x4f, 0x41,
	0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4c,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56,
	0x4d, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53,
	0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x05, 0x2a, 0x76, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x52, 0x45, 0x41, 0x54, 0x4f, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x52, 0x45, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x52, 0x45, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x03, 0x42, 0x40, 0x5a,
	0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2f, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x3b, 0x74, 0x61, 0x67, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_arista_tag_v2_tag_proto_rawDescOnce sync.Once
	file_arista_tag_v2_tag_proto_rawDescData = file_arista_tag_v2_tag_proto_rawDesc
)

func file_arista_tag_v2_tag_proto_rawDescGZIP() []byte {
	file_arista_tag_v2_tag_proto_rawDescOnce.Do(func() {
		file_arista_tag_v2_tag_proto_rawDescData = protoimpl.X.CompressGZIP(file_arista_tag_v2_tag_proto_rawDescData)
	})
	return file_arista_tag_v2_tag_proto_rawDescData
}

var file_arista_tag_v2_tag_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_arista_tag_v2_tag_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_arista_tag_v2_tag_proto_goTypes = []interface{}{
	(ElementType)(0),               // 0: arista.tag.v2.ElementType
	(ElementSubType)(0),            // 1: arista.tag.v2.ElementSubType
	(CreatorType)(0),               // 2: arista.tag.v2.CreatorType
	(*TagKey)(nil),                 // 3: arista.tag.v2.TagKey
	(*TagConfig)(nil),              // 4: arista.tag.v2.TagConfig
	(*Tag)(nil),                    // 5: arista.tag.v2.Tag
	(*TagAssignmentKey)(nil),       // 6: arista.tag.v2.TagAssignmentKey
	(*TagAssignmentConfig)(nil),    // 7: arista.tag.v2.TagAssignmentConfig
	(*TagAssignment)(nil),          // 8: arista.tag.v2.TagAssignment
	(*ElementFilter)(nil),          // 9: arista.tag.v2.ElementFilter
	(*ElementSearchFilter)(nil),    // 10: arista.tag.v2.ElementSearchFilter
	(*ElementKey)(nil),             // 11: arista.tag.v2.ElementKey
	(*Element)(nil),                // 12: arista.tag.v2.Element
	(*wrapperspb.StringValue)(nil), // 13: google.protobuf.StringValue
	(*wrapperspb.BoolValue)(nil),   // 14: google.protobuf.BoolValue
}
var file_arista_tag_v2_tag_proto_depIdxs = []int32{
	13, // 0: arista.tag.v2.TagKey.workspace_id:type_name -> google.protobuf.StringValue
	0,  // 1: arista.tag.v2.TagKey.element_type:type_name -> arista.tag.v2.ElementType
	13, // 2: arista.tag.v2.TagKey.label:type_name -> google.protobuf.StringValue
	13, // 3: arista.tag.v2.TagKey.value:type_name -> google.protobuf.StringValue
	1,  // 4: arista.tag.v2.TagKey.element_sub_type:type_name -> arista.tag.v2.ElementSubType
	3,  // 5: arista.tag.v2.TagConfig.key:type_name -> arista.tag.v2.TagKey
	14, // 6: arista.tag.v2.TagConfig.remove:type_name -> google.protobuf.BoolValue
	3,  // 7: arista.tag.v2.Tag.key:type_name -> arista.tag.v2.TagKey
	2,  // 8: arista.tag.v2.Tag.creator_type:type_name -> arista.tag.v2.CreatorType
	14, // 9: arista.tag.v2.Tag.assigned:type_name -> google.protobuf.BoolValue
	13, // 10: arista.tag.v2.TagAssignmentKey.workspace_id:type_name -> google.protobuf.StringValue
	0,  // 11: arista.tag.v2.TagAssignmentKey.element_type:type_name -> arista.tag.v2.ElementType
	13, // 12: arista.tag.v2.TagAssignmentKey.label:type_name -> google.protobuf.StringValue
	13, // 13: arista.tag.v2.TagAssignmentKey.value:type_name -> google.protobuf.StringValue
	13, // 14: arista.tag.v2.TagAssignmentKey.device_id:type_name -> google.protobuf.StringValue
	13, // 15: arista.tag.v2.TagAssignmentKey.interface_id:type_name -> google.protobuf.StringValue
	1,  // 16: arista.tag.v2.TagAssignmentKey.element_sub_type:type_name -> arista.tag.v2.ElementSubType
	13, // 17: arista.tag.v2.TagAssignmentKey.primary_entity_id:type_name -> google.protobuf.StringValue
	13, // 18: arista.tag.v2.TagAssignmentKey.secondary_entity_id:type_name -> google.protobuf.StringValue
	6,  // 19: arista.tag.v2.TagAssignmentConfig.key:type_name -> arista.tag.v2.TagAssignmentKey
	14, // 20: arista.tag.v2.TagAssignmentConfig.remove:type_name -> google.protobuf.BoolValue
	6,  // 21: arista.tag.v2.TagAssignment.key:type_name -> arista.tag.v2.TagAssignmentKey
	2,  // 22: arista.tag.v2.TagAssignment.tag_creator_type:type_name -> arista.tag.v2.CreatorType
	10, // 23: arista.tag.v2.ElementFilter.search:type_name -> arista.tag.v2.ElementSearchFilter
	0,  // 24: arista.tag.v2.ElementSearchFilter.query_element_type:type_name -> arista.tag.v2.ElementType
	13, // 25: arista.tag.v2.ElementSearchFilter.query:type_name -> google.protobuf.StringValue
	13, // 26: arista.tag.v2.ElementSearchFilter.workspace_id:type_name -> google.protobuf.StringValue
	14, // 27: arista.tag.v2.ElementSearchFilter.exclude_unregistered_elements:type_name -> google.protobuf.BoolValue
	14, // 28: arista.tag.v2.ElementSearchFilter.ignore_topology_tags:type_name -> google.protobuf.BoolValue
	0,  // 29: arista.tag.v2.ElementKey.type:type_name -> arista.tag.v2.ElementType
	1,  // 30: arista.tag.v2.ElementKey.sub_type:type_name -> arista.tag.v2.ElementSubType
	13, // 31: arista.tag.v2.ElementKey.primary_id:type_name -> google.protobuf.StringValue
	13, // 32: arista.tag.v2.ElementKey.secondary_id:type_name -> google.protobuf.StringValue
	11, // 33: arista.tag.v2.Element.key:type_name -> arista.tag.v2.ElementKey
	34, // [34:34] is the sub-list for method output_type
	34, // [34:34] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_arista_tag_v2_tag_proto_init() }
func file_arista_tag_v2_tag_proto_init() {
	if File_arista_tag_v2_tag_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_arista_tag_v2_tag_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v2_tag_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v2_tag_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v2_tag_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagAssignmentKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v2_tag_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagAssignmentConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v2_tag_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagAssignment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v2_tag_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v2_tag_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementSearchFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v2_tag_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v2_tag_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Element); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_arista_tag_v2_tag_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_arista_tag_v2_tag_proto_goTypes,
		DependencyIndexes: file_arista_tag_v2_tag_proto_depIdxs,
		EnumInfos:         file_arista_tag_v2_tag_proto_enumTypes,
		MessageInfos:      file_arista_tag_v2_tag_proto_msgTypes,
	}.Build()
	File_arista_tag_v2_tag_proto = out.File
	file_arista_tag_v2_tag_proto_rawDesc = nil
	file_arista_tag_v2_tag_proto_goTypes = nil
	file_arista_tag_v2_tag_proto_depIdxs = nil
}
