// Copyright (c) 2021 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

//
// Code generated by boomtown. DO NOT EDIT.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.0
// 	protoc        v4.24.4
// source: arista/tag.v2/services.gen.proto

package tag

import (
	subscriptions "github.com/aristanetworks/cloudvision-go/api/arista/subscriptions"
	time "github.com/aristanetworks/cloudvision-go/api/arista/time"
	fmp "github.com/aristanetworks/cloudvision-go/api/fmp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MetaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time holds the timestamp of the last item included in the metadata calculation.
	Time *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,2,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
	// Count is the number of items present under the conditions of the request.
	Count *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *MetaResponse) Reset() {
	*x = MetaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_services_gen_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaResponse) ProtoMessage() {}

func (x *MetaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_services_gen_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaResponse.ProtoReflect.Descriptor instead.
func (*MetaResponse) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_services_gen_proto_rawDescGZIP(), []int{0}
}

func (x *MetaResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *MetaResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation(0)
}

func (x *MetaResponse) GetCount() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Count
	}
	return nil
}

type TagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a Tag instance to retrieve.
	// This value must be populated.
	Key *TagKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TagRequest) Reset() {
	*x = TagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_services_gen_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagRequest) ProtoMessage() {}

func (x *TagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_services_gen_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagRequest.ProtoReflect.Descriptor instead.
func (*TagRequest) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_services_gen_proto_rawDescGZIP(), []int{1}
}

func (x *TagRequest) GetKey() *TagKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TagRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type TagResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *Tag `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// Tag instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TagResponse) Reset() {
	*x = TagResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_services_gen_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagResponse) ProtoMessage() {}

func (x *TagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_services_gen_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagResponse.ProtoReflect.Descriptor instead.
func (*TagResponse) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_services_gen_proto_rawDescGZIP(), []int{2}
}

func (x *TagResponse) GetValue() *Tag {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TagResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type TagSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*TagKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TagSomeRequest) Reset() {
	*x = TagSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_services_gen_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagSomeRequest) ProtoMessage() {}

func (x *TagSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_services_gen_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagSomeRequest.ProtoReflect.Descriptor instead.
func (*TagSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_services_gen_proto_rawDescGZIP(), []int{3}
}

func (x *TagSomeRequest) GetKeys() []*TagKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *TagSomeRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type TagSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *Tag `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Time  *timestamppb.Timestamp  `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TagSomeResponse) Reset() {
	*x = TagSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_services_gen_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagSomeResponse) ProtoMessage() {}

func (x *TagSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_services_gen_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagSomeResponse.ProtoReflect.Descriptor instead.
func (*TagSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_services_gen_proto_rawDescGZIP(), []int{4}
}

func (x *TagSomeResponse) GetValue() *Tag {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TagSomeResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TagSomeResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type TagStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*Tag `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each Tag at end.
	//   - Each Tag response is fully-specified (all fields set).
	//   - start: Returns the state of each Tag at start, followed by updates until now.
	//   - Each Tag response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each Tag at start, followed by updates
	//     until end.
	//   - Each Tag response at start is fully-specified, but updates until end may
	//     be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TagStreamRequest) Reset() {
	*x = TagStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_services_gen_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagStreamRequest) ProtoMessage() {}

func (x *TagStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_services_gen_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagStreamRequest.ProtoReflect.Descriptor instead.
func (*TagStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_services_gen_proto_rawDescGZIP(), []int{5}
}

func (x *TagStreamRequest) GetPartialEqFilter() []*Tag {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *TagStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type TagStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *Tag `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this Tag's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the Tag value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *TagStreamResponse) Reset() {
	*x = TagStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_services_gen_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagStreamResponse) ProtoMessage() {}

func (x *TagStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_services_gen_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagStreamResponse.ProtoReflect.Descriptor instead.
func (*TagStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_services_gen_proto_rawDescGZIP(), []int{6}
}

func (x *TagStreamResponse) GetValue() *Tag {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TagStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *TagStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation(0)
}

type TagAssignmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a TagAssignment instance to retrieve.
	// This value must be populated.
	Key *TagAssignmentKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TagAssignmentRequest) Reset() {
	*x = TagAssignmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_services_gen_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagAssignmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagAssignmentRequest) ProtoMessage() {}

func (x *TagAssignmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_services_gen_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagAssignmentRequest.ProtoReflect.Descriptor instead.
func (*TagAssignmentRequest) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_services_gen_proto_rawDescGZIP(), []int{7}
}

func (x *TagAssignmentRequest) GetKey() *TagAssignmentKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TagAssignmentRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type TagAssignmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *TagAssignment `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// TagAssignment instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TagAssignmentResponse) Reset() {
	*x = TagAssignmentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_services_gen_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagAssignmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagAssignmentResponse) ProtoMessage() {}

func (x *TagAssignmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_services_gen_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagAssignmentResponse.ProtoReflect.Descriptor instead.
func (*TagAssignmentResponse) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_services_gen_proto_rawDescGZIP(), []int{8}
}

func (x *TagAssignmentResponse) GetValue() *TagAssignment {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TagAssignmentResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type TagAssignmentSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*TagAssignmentKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TagAssignmentSomeRequest) Reset() {
	*x = TagAssignmentSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_services_gen_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagAssignmentSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagAssignmentSomeRequest) ProtoMessage() {}

func (x *TagAssignmentSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_services_gen_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagAssignmentSomeRequest.ProtoReflect.Descriptor instead.
func (*TagAssignmentSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_services_gen_proto_rawDescGZIP(), []int{9}
}

func (x *TagAssignmentSomeRequest) GetKeys() []*TagAssignmentKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *TagAssignmentSomeRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type TagAssignmentSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *TagAssignment `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Time  *timestamppb.Timestamp  `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TagAssignmentSomeResponse) Reset() {
	*x = TagAssignmentSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_services_gen_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagAssignmentSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagAssignmentSomeResponse) ProtoMessage() {}

func (x *TagAssignmentSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_services_gen_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagAssignmentSomeResponse.ProtoReflect.Descriptor instead.
func (*TagAssignmentSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_services_gen_proto_rawDescGZIP(), []int{10}
}

func (x *TagAssignmentSomeResponse) GetValue() *TagAssignment {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TagAssignmentSomeResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TagAssignmentSomeResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type TagAssignmentStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*TagAssignment `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each TagAssignment at end.
	//   - Each TagAssignment response is fully-specified (all fields set).
	//   - start: Returns the state of each TagAssignment at start, followed by updates until now.
	//   - Each TagAssignment response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each TagAssignment at start, followed by updates
	//     until end.
	//   - Each TagAssignment response at start is fully-specified, but updates until end may
	//     be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TagAssignmentStreamRequest) Reset() {
	*x = TagAssignmentStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_services_gen_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagAssignmentStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagAssignmentStreamRequest) ProtoMessage() {}

func (x *TagAssignmentStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_services_gen_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagAssignmentStreamRequest.ProtoReflect.Descriptor instead.
func (*TagAssignmentStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_services_gen_proto_rawDescGZIP(), []int{11}
}

func (x *TagAssignmentStreamRequest) GetPartialEqFilter() []*TagAssignment {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *TagAssignmentStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type TagAssignmentStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *TagAssignment `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this TagAssignment's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the TagAssignment value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *TagAssignmentStreamResponse) Reset() {
	*x = TagAssignmentStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_services_gen_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagAssignmentStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagAssignmentStreamResponse) ProtoMessage() {}

func (x *TagAssignmentStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_services_gen_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagAssignmentStreamResponse.ProtoReflect.Descriptor instead.
func (*TagAssignmentStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_services_gen_proto_rawDescGZIP(), []int{12}
}

func (x *TagAssignmentStreamResponse) GetValue() *TagAssignment {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TagAssignmentStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *TagAssignmentStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation(0)
}

type TagAssignmentConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a TagAssignmentConfig instance to retrieve.
	// This value must be populated.
	Key *TagAssignmentKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TagAssignmentConfigRequest) Reset() {
	*x = TagAssignmentConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_services_gen_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagAssignmentConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagAssignmentConfigRequest) ProtoMessage() {}

func (x *TagAssignmentConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_services_gen_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagAssignmentConfigRequest.ProtoReflect.Descriptor instead.
func (*TagAssignmentConfigRequest) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_services_gen_proto_rawDescGZIP(), []int{13}
}

func (x *TagAssignmentConfigRequest) GetKey() *TagAssignmentKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TagAssignmentConfigRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type TagAssignmentConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *TagAssignmentConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// TagAssignmentConfig instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TagAssignmentConfigResponse) Reset() {
	*x = TagAssignmentConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_services_gen_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagAssignmentConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagAssignmentConfigResponse) ProtoMessage() {}

func (x *TagAssignmentConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_services_gen_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagAssignmentConfigResponse.ProtoReflect.Descriptor instead.
func (*TagAssignmentConfigResponse) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_services_gen_proto_rawDescGZIP(), []int{14}
}

func (x *TagAssignmentConfigResponse) GetValue() *TagAssignmentConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TagAssignmentConfigResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type TagAssignmentConfigSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*TagAssignmentKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TagAssignmentConfigSomeRequest) Reset() {
	*x = TagAssignmentConfigSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_services_gen_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagAssignmentConfigSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagAssignmentConfigSomeRequest) ProtoMessage() {}

func (x *TagAssignmentConfigSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_services_gen_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagAssignmentConfigSomeRequest.ProtoReflect.Descriptor instead.
func (*TagAssignmentConfigSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_services_gen_proto_rawDescGZIP(), []int{15}
}

func (x *TagAssignmentConfigSomeRequest) GetKeys() []*TagAssignmentKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *TagAssignmentConfigSomeRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type TagAssignmentConfigSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *TagAssignmentConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Time  *timestamppb.Timestamp  `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TagAssignmentConfigSomeResponse) Reset() {
	*x = TagAssignmentConfigSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_services_gen_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagAssignmentConfigSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagAssignmentConfigSomeResponse) ProtoMessage() {}

func (x *TagAssignmentConfigSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_services_gen_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagAssignmentConfigSomeResponse.ProtoReflect.Descriptor instead.
func (*TagAssignmentConfigSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_services_gen_proto_rawDescGZIP(), []int{16}
}

func (x *TagAssignmentConfigSomeResponse) GetValue() *TagAssignmentConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TagAssignmentConfigSomeResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TagAssignmentConfigSomeResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type TagAssignmentConfigStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*TagAssignmentConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each TagAssignmentConfig at end.
	//   - Each TagAssignmentConfig response is fully-specified (all fields set).
	//   - start: Returns the state of each TagAssignmentConfig at start, followed by updates until now.
	//   - Each TagAssignmentConfig response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each TagAssignmentConfig at start, followed by updates
	//     until end.
	//   - Each TagAssignmentConfig response at start is fully-specified, but updates until end may
	//     be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TagAssignmentConfigStreamRequest) Reset() {
	*x = TagAssignmentConfigStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_services_gen_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagAssignmentConfigStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagAssignmentConfigStreamRequest) ProtoMessage() {}

func (x *TagAssignmentConfigStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_services_gen_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagAssignmentConfigStreamRequest.ProtoReflect.Descriptor instead.
func (*TagAssignmentConfigStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_services_gen_proto_rawDescGZIP(), []int{17}
}

func (x *TagAssignmentConfigStreamRequest) GetPartialEqFilter() []*TagAssignmentConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *TagAssignmentConfigStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type TagAssignmentConfigStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *TagAssignmentConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this TagAssignmentConfig's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the TagAssignmentConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *TagAssignmentConfigStreamResponse) Reset() {
	*x = TagAssignmentConfigStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_services_gen_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagAssignmentConfigStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagAssignmentConfigStreamResponse) ProtoMessage() {}

func (x *TagAssignmentConfigStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_services_gen_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagAssignmentConfigStreamResponse.ProtoReflect.Descriptor instead.
func (*TagAssignmentConfigStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_services_gen_proto_rawDescGZIP(), []int{18}
}

func (x *TagAssignmentConfigStreamResponse) GetValue() *TagAssignmentConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TagAssignmentConfigStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *TagAssignmentConfigStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation(0)
}

type TagAssignmentConfigSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TagAssignmentConfig carries the value to set into the datastore.
	// See the documentation on the TagAssignmentConfig struct for which fields are required.
	Value *TagAssignmentConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TagAssignmentConfigSetRequest) Reset() {
	*x = TagAssignmentConfigSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_services_gen_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagAssignmentConfigSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagAssignmentConfigSetRequest) ProtoMessage() {}

func (x *TagAssignmentConfigSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_services_gen_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagAssignmentConfigSetRequest.ProtoReflect.Descriptor instead.
func (*TagAssignmentConfigSetRequest) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_services_gen_proto_rawDescGZIP(), []int{19}
}

func (x *TagAssignmentConfigSetRequest) GetValue() *TagAssignmentConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

type TagAssignmentConfigSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value carries all the values given in the TagAssignmentConfigSetRequest as well
	// as any server-generated values.
	Value *TagAssignmentConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//   - it is after the time the request was received
	//   - a time-ranged query with StartTime==CreatedAt will include this instance.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TagAssignmentConfigSetResponse) Reset() {
	*x = TagAssignmentConfigSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_services_gen_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagAssignmentConfigSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagAssignmentConfigSetResponse) ProtoMessage() {}

func (x *TagAssignmentConfigSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_services_gen_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagAssignmentConfigSetResponse.ProtoReflect.Descriptor instead.
func (*TagAssignmentConfigSetResponse) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_services_gen_proto_rawDescGZIP(), []int{20}
}

func (x *TagAssignmentConfigSetResponse) GetValue() *TagAssignmentConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TagAssignmentConfigSetResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type TagAssignmentConfigSetSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value contains a list of TagAssignmentConfig values to write.
	// It is possible to provide more values than can fit within either:
	//   - the maxiumum send size of the client
	//   - the maximum receive size of the server
	//
	// If this error occurs you must reduce the number of values sent.
	// See gRPC "maximum message size" documentation for more information.
	Values []*TagAssignmentConfig `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *TagAssignmentConfigSetSomeRequest) Reset() {
	*x = TagAssignmentConfigSetSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_services_gen_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagAssignmentConfigSetSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagAssignmentConfigSetSomeRequest) ProtoMessage() {}

func (x *TagAssignmentConfigSetSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_services_gen_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagAssignmentConfigSetSomeRequest.ProtoReflect.Descriptor instead.
func (*TagAssignmentConfigSetSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_services_gen_proto_rawDescGZIP(), []int{21}
}

func (x *TagAssignmentConfigSetSomeRequest) GetValues() []*TagAssignmentConfig {
	if x != nil {
		return x.Values
	}
	return nil
}

type TagAssignmentConfigSetSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *TagAssignmentKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Error string            `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *TagAssignmentConfigSetSomeResponse) Reset() {
	*x = TagAssignmentConfigSetSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_services_gen_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagAssignmentConfigSetSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagAssignmentConfigSetSomeResponse) ProtoMessage() {}

func (x *TagAssignmentConfigSetSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_services_gen_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagAssignmentConfigSetSomeResponse.ProtoReflect.Descriptor instead.
func (*TagAssignmentConfigSetSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_services_gen_proto_rawDescGZIP(), []int{22}
}

func (x *TagAssignmentConfigSetSomeResponse) GetKey() *TagAssignmentKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TagAssignmentConfigSetSomeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type TagAssignmentConfigDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key indicates which TagAssignmentConfig instance to remove.
	// This field must always be set.
	Key *TagAssignmentKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *TagAssignmentConfigDeleteRequest) Reset() {
	*x = TagAssignmentConfigDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_services_gen_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagAssignmentConfigDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagAssignmentConfigDeleteRequest) ProtoMessage() {}

func (x *TagAssignmentConfigDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_services_gen_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagAssignmentConfigDeleteRequest.ProtoReflect.Descriptor instead.
func (*TagAssignmentConfigDeleteRequest) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_services_gen_proto_rawDescGZIP(), []int{23}
}

func (x *TagAssignmentConfigDeleteRequest) GetKey() *TagAssignmentKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type TagAssignmentConfigDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key echoes back the key of the deleted TagAssignmentConfig instance.
	Key *TagAssignmentKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//   - it is after the time the request was received
	//   - a time-ranged query with StartTime==DeletedAt will not include this instance.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TagAssignmentConfigDeleteResponse) Reset() {
	*x = TagAssignmentConfigDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_services_gen_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagAssignmentConfigDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagAssignmentConfigDeleteResponse) ProtoMessage() {}

func (x *TagAssignmentConfigDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_services_gen_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagAssignmentConfigDeleteResponse.ProtoReflect.Descriptor instead.
func (*TagAssignmentConfigDeleteResponse) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_services_gen_proto_rawDescGZIP(), []int{24}
}

func (x *TagAssignmentConfigDeleteResponse) GetKey() *TagAssignmentKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TagAssignmentConfigDeleteResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type TagAssignmentConfigDeleteSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key contains a list of TagAssignmentConfig keys to delete
	Keys []*TagAssignmentKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *TagAssignmentConfigDeleteSomeRequest) Reset() {
	*x = TagAssignmentConfigDeleteSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_services_gen_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagAssignmentConfigDeleteSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagAssignmentConfigDeleteSomeRequest) ProtoMessage() {}

func (x *TagAssignmentConfigDeleteSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_services_gen_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagAssignmentConfigDeleteSomeRequest.ProtoReflect.Descriptor instead.
func (*TagAssignmentConfigDeleteSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_services_gen_proto_rawDescGZIP(), []int{25}
}

func (x *TagAssignmentConfigDeleteSomeRequest) GetKeys() []*TagAssignmentKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

// TagAssignmentConfigDeleteSomeResponse is only sent when there is an error.
type TagAssignmentConfigDeleteSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *TagAssignmentKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Error string            `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *TagAssignmentConfigDeleteSomeResponse) Reset() {
	*x = TagAssignmentConfigDeleteSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_services_gen_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagAssignmentConfigDeleteSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagAssignmentConfigDeleteSomeResponse) ProtoMessage() {}

func (x *TagAssignmentConfigDeleteSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_services_gen_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagAssignmentConfigDeleteSomeResponse.ProtoReflect.Descriptor instead.
func (*TagAssignmentConfigDeleteSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_services_gen_proto_rawDescGZIP(), []int{26}
}

func (x *TagAssignmentConfigDeleteSomeResponse) GetKey() *TagAssignmentKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TagAssignmentConfigDeleteSomeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type TagAssignmentConfigDeleteAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TagAssignmentConfigDeleteAllRequest) Reset() {
	*x = TagAssignmentConfigDeleteAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_services_gen_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagAssignmentConfigDeleteAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagAssignmentConfigDeleteAllRequest) ProtoMessage() {}

func (x *TagAssignmentConfigDeleteAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_services_gen_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagAssignmentConfigDeleteAllRequest.ProtoReflect.Descriptor instead.
func (*TagAssignmentConfigDeleteAllRequest) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_services_gen_proto_rawDescGZIP(), []int{27}
}

type TagAssignmentConfigDeleteAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This describes the class of delete error.
	Type fmp.DeleteError `protobuf:"varint,1,opt,name=type,proto3,enum=fmp.DeleteError" json:"type,omitempty"`
	// This indicates the error message from the delete failure.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// This is the key of the TagAssignmentConfig instance that failed to be deleted.
	Key *TagAssignmentKey `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp when the key was being deleted.
	Time *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TagAssignmentConfigDeleteAllResponse) Reset() {
	*x = TagAssignmentConfigDeleteAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_services_gen_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagAssignmentConfigDeleteAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagAssignmentConfigDeleteAllResponse) ProtoMessage() {}

func (x *TagAssignmentConfigDeleteAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_services_gen_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagAssignmentConfigDeleteAllResponse.ProtoReflect.Descriptor instead.
func (*TagAssignmentConfigDeleteAllResponse) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_services_gen_proto_rawDescGZIP(), []int{28}
}

func (x *TagAssignmentConfigDeleteAllResponse) GetType() fmp.DeleteError {
	if x != nil {
		return x.Type
	}
	return fmp.DeleteError(0)
}

func (x *TagAssignmentConfigDeleteAllResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TagAssignmentConfigDeleteAllResponse) GetKey() *TagAssignmentKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TagAssignmentConfigDeleteAllResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type TagConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a TagConfig instance to retrieve.
	// This value must be populated.
	Key *TagKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TagConfigRequest) Reset() {
	*x = TagConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_services_gen_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagConfigRequest) ProtoMessage() {}

func (x *TagConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_services_gen_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagConfigRequest.ProtoReflect.Descriptor instead.
func (*TagConfigRequest) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_services_gen_proto_rawDescGZIP(), []int{29}
}

func (x *TagConfigRequest) GetKey() *TagKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TagConfigRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type TagConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *TagConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// TagConfig instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TagConfigResponse) Reset() {
	*x = TagConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_services_gen_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagConfigResponse) ProtoMessage() {}

func (x *TagConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_services_gen_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagConfigResponse.ProtoReflect.Descriptor instead.
func (*TagConfigResponse) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_services_gen_proto_rawDescGZIP(), []int{30}
}

func (x *TagConfigResponse) GetValue() *TagConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TagConfigResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type TagConfigSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*TagKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TagConfigSomeRequest) Reset() {
	*x = TagConfigSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_services_gen_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagConfigSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagConfigSomeRequest) ProtoMessage() {}

func (x *TagConfigSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_services_gen_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagConfigSomeRequest.ProtoReflect.Descriptor instead.
func (*TagConfigSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_services_gen_proto_rawDescGZIP(), []int{31}
}

func (x *TagConfigSomeRequest) GetKeys() []*TagKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *TagConfigSomeRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type TagConfigSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *TagConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Time  *timestamppb.Timestamp  `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TagConfigSomeResponse) Reset() {
	*x = TagConfigSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_services_gen_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagConfigSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagConfigSomeResponse) ProtoMessage() {}

func (x *TagConfigSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_services_gen_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagConfigSomeResponse.ProtoReflect.Descriptor instead.
func (*TagConfigSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_services_gen_proto_rawDescGZIP(), []int{32}
}

func (x *TagConfigSomeResponse) GetValue() *TagConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TagConfigSomeResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TagConfigSomeResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type TagConfigStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*TagConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each TagConfig at end.
	//   - Each TagConfig response is fully-specified (all fields set).
	//   - start: Returns the state of each TagConfig at start, followed by updates until now.
	//   - Each TagConfig response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each TagConfig at start, followed by updates
	//     until end.
	//   - Each TagConfig response at start is fully-specified, but updates until end may
	//     be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TagConfigStreamRequest) Reset() {
	*x = TagConfigStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_services_gen_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagConfigStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagConfigStreamRequest) ProtoMessage() {}

func (x *TagConfigStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_services_gen_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagConfigStreamRequest.ProtoReflect.Descriptor instead.
func (*TagConfigStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_services_gen_proto_rawDescGZIP(), []int{33}
}

func (x *TagConfigStreamRequest) GetPartialEqFilter() []*TagConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *TagConfigStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type TagConfigStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *TagConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this TagConfig's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the TagConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *TagConfigStreamResponse) Reset() {
	*x = TagConfigStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_services_gen_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagConfigStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagConfigStreamResponse) ProtoMessage() {}

func (x *TagConfigStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_services_gen_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagConfigStreamResponse.ProtoReflect.Descriptor instead.
func (*TagConfigStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_services_gen_proto_rawDescGZIP(), []int{34}
}

func (x *TagConfigStreamResponse) GetValue() *TagConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TagConfigStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *TagConfigStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation(0)
}

type TagConfigSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TagConfig carries the value to set into the datastore.
	// See the documentation on the TagConfig struct for which fields are required.
	Value *TagConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TagConfigSetRequest) Reset() {
	*x = TagConfigSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_services_gen_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagConfigSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagConfigSetRequest) ProtoMessage() {}

func (x *TagConfigSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_services_gen_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagConfigSetRequest.ProtoReflect.Descriptor instead.
func (*TagConfigSetRequest) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_services_gen_proto_rawDescGZIP(), []int{35}
}

func (x *TagConfigSetRequest) GetValue() *TagConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

type TagConfigSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value carries all the values given in the TagConfigSetRequest as well
	// as any server-generated values.
	Value *TagConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//   - it is after the time the request was received
	//   - a time-ranged query with StartTime==CreatedAt will include this instance.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TagConfigSetResponse) Reset() {
	*x = TagConfigSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_services_gen_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagConfigSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagConfigSetResponse) ProtoMessage() {}

func (x *TagConfigSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_services_gen_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagConfigSetResponse.ProtoReflect.Descriptor instead.
func (*TagConfigSetResponse) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_services_gen_proto_rawDescGZIP(), []int{36}
}

func (x *TagConfigSetResponse) GetValue() *TagConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TagConfigSetResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type TagConfigSetSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value contains a list of TagConfig values to write.
	// It is possible to provide more values than can fit within either:
	//   - the maxiumum send size of the client
	//   - the maximum receive size of the server
	//
	// If this error occurs you must reduce the number of values sent.
	// See gRPC "maximum message size" documentation for more information.
	Values []*TagConfig `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *TagConfigSetSomeRequest) Reset() {
	*x = TagConfigSetSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_services_gen_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagConfigSetSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagConfigSetSomeRequest) ProtoMessage() {}

func (x *TagConfigSetSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_services_gen_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagConfigSetSomeRequest.ProtoReflect.Descriptor instead.
func (*TagConfigSetSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_services_gen_proto_rawDescGZIP(), []int{37}
}

func (x *TagConfigSetSomeRequest) GetValues() []*TagConfig {
	if x != nil {
		return x.Values
	}
	return nil
}

type TagConfigSetSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *TagKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Error string  `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *TagConfigSetSomeResponse) Reset() {
	*x = TagConfigSetSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_services_gen_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagConfigSetSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagConfigSetSomeResponse) ProtoMessage() {}

func (x *TagConfigSetSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_services_gen_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagConfigSetSomeResponse.ProtoReflect.Descriptor instead.
func (*TagConfigSetSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_services_gen_proto_rawDescGZIP(), []int{38}
}

func (x *TagConfigSetSomeResponse) GetKey() *TagKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TagConfigSetSomeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type TagConfigDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key indicates which TagConfig instance to remove.
	// This field must always be set.
	Key *TagKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *TagConfigDeleteRequest) Reset() {
	*x = TagConfigDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_services_gen_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagConfigDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagConfigDeleteRequest) ProtoMessage() {}

func (x *TagConfigDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_services_gen_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagConfigDeleteRequest.ProtoReflect.Descriptor instead.
func (*TagConfigDeleteRequest) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_services_gen_proto_rawDescGZIP(), []int{39}
}

func (x *TagConfigDeleteRequest) GetKey() *TagKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type TagConfigDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key echoes back the key of the deleted TagConfig instance.
	Key *TagKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//   - it is after the time the request was received
	//   - a time-ranged query with StartTime==DeletedAt will not include this instance.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TagConfigDeleteResponse) Reset() {
	*x = TagConfigDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_services_gen_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagConfigDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagConfigDeleteResponse) ProtoMessage() {}

func (x *TagConfigDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_services_gen_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagConfigDeleteResponse.ProtoReflect.Descriptor instead.
func (*TagConfigDeleteResponse) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_services_gen_proto_rawDescGZIP(), []int{40}
}

func (x *TagConfigDeleteResponse) GetKey() *TagKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TagConfigDeleteResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type TagConfigDeleteSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key contains a list of TagConfig keys to delete
	Keys []*TagKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *TagConfigDeleteSomeRequest) Reset() {
	*x = TagConfigDeleteSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_services_gen_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagConfigDeleteSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagConfigDeleteSomeRequest) ProtoMessage() {}

func (x *TagConfigDeleteSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_services_gen_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagConfigDeleteSomeRequest.ProtoReflect.Descriptor instead.
func (*TagConfigDeleteSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_services_gen_proto_rawDescGZIP(), []int{41}
}

func (x *TagConfigDeleteSomeRequest) GetKeys() []*TagKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

// TagConfigDeleteSomeResponse is only sent when there is an error.
type TagConfigDeleteSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *TagKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Error string  `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *TagConfigDeleteSomeResponse) Reset() {
	*x = TagConfigDeleteSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_services_gen_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagConfigDeleteSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagConfigDeleteSomeResponse) ProtoMessage() {}

func (x *TagConfigDeleteSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_services_gen_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagConfigDeleteSomeResponse.ProtoReflect.Descriptor instead.
func (*TagConfigDeleteSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_services_gen_proto_rawDescGZIP(), []int{42}
}

func (x *TagConfigDeleteSomeResponse) GetKey() *TagKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TagConfigDeleteSomeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type TagConfigDeleteAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TagConfigDeleteAllRequest) Reset() {
	*x = TagConfigDeleteAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_services_gen_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagConfigDeleteAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagConfigDeleteAllRequest) ProtoMessage() {}

func (x *TagConfigDeleteAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_services_gen_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagConfigDeleteAllRequest.ProtoReflect.Descriptor instead.
func (*TagConfigDeleteAllRequest) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_services_gen_proto_rawDescGZIP(), []int{43}
}

type TagConfigDeleteAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This describes the class of delete error.
	Type fmp.DeleteError `protobuf:"varint,1,opt,name=type,proto3,enum=fmp.DeleteError" json:"type,omitempty"`
	// This indicates the error message from the delete failure.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// This is the key of the TagConfig instance that failed to be deleted.
	Key *TagKey `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp when the key was being deleted.
	Time *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TagConfigDeleteAllResponse) Reset() {
	*x = TagConfigDeleteAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v2_services_gen_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagConfigDeleteAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagConfigDeleteAllResponse) ProtoMessage() {}

func (x *TagConfigDeleteAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v2_services_gen_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagConfigDeleteAllResponse.ProtoReflect.Descriptor instead.
func (*TagConfigDeleteAllResponse) Descriptor() ([]byte, []int) {
	return file_arista_tag_v2_services_gen_proto_rawDescGZIP(), []int{44}
}

func (x *TagConfigDeleteAllResponse) GetType() fmp.DeleteError {
	if x != nil {
		return x.Type
	}
	return fmp.DeleteError(0)
}

func (x *TagConfigDeleteAllResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TagConfigDeleteAllResponse) GetKey() *TagKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TagConfigDeleteAllResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

var File_arista_tag_v2_services_gen_proto protoreflect.FileDescriptor

var file_arista_tag_v2_services_gen_proto_rawDesc = []byte{
	0x0a, 0x20, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x67, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0d, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76,
	0x32, 0x1a, 0x17, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32,
	0x2f, 0x74, 0x61, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x28, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x66, 0x6d,
	0x70, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xa7, 0x01, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x65, 0x0a, 0x0a, 0x54, 0x61,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74,
	0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0x67, 0x0a, 0x0b, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e,
	0x54, 0x61, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x6b, 0x0a, 0x0e, 0x54, 0x61,
	0x67, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x04,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x4b, 0x65,
	0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x0f, 0x54, 0x61, 0x67, 0x53,
	0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x7f, 0x0a, 0x10, 0x54, 0x61, 0x67,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a,
	0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x0f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x11, 0x54,
	0x61, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e,
	0x54, 0x61, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x79, 0x0a, 0x14, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61,
	0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x7b, 0x0a, 0x15, 0x54, 0x61,
	0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e,
	0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x7f, 0x0a, 0x18, 0x54, 0x61, 0x67, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76,
	0x32, 0x2e, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4b,
	0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x19, 0x54, 0x61, 0x67,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74,
	0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2e,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x93,
	0x01, 0x0a, 0x1a, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a,
	0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45,
	0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0xb6, 0x01, 0x0a, 0x1b, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67,
	0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x7f, 0x0a,
	0x1a, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x87,
	0x01, 0x0a, 0x1b, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61,
	0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x1e, 0x54, 0x61, 0x67,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73,
	0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x22, 0xbf, 0x01, 0x0a, 0x1f, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67,
	0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x20, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e,
	0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45,
	0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x21, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x59, 0x0a, 0x1d, 0x54, 0x61, 0x67,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x1e, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0x5f, 0x0a, 0x21, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x22, 0x6d, 0x0a, 0x22, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74,
	0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x55, 0x0a, 0x20, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e,
	0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x86, 0x01, 0x0a, 0x21, 0x54, 0x61, 0x67,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0x5b, 0x0a, 0x24, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x6b, 0x65, 0x79,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x70,
	0x0a, 0x25, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61,
	0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0x25, 0x0a, 0x23, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xe3, 0x01, 0x0a, 0x24, 0x54, 0x61, 0x67, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x31, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x6b, 0x0a,
	0x10, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x27, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54,
	0x61, 0x67, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x73, 0x0a, 0x11, 0x54, 0x61,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54,
	0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0x71, 0x0a, 0x14, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74,
	0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65,
	0x79, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x15, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x22, 0x8b, 0x01, 0x0a, 0x16, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x11, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xae,
	0x01, 0x0a, 0x17, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x45, 0x0a, 0x13, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74,
	0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x76, 0x0a, 0x14, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x4b,
	0x0a, 0x17, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x59, 0x0a, 0x18, 0x54,
	0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61,
	0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x41, 0x0a, 0x16, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x27, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61,
	0x67, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x72, 0x0a, 0x17, 0x54, 0x61, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76,
	0x32, 0x2e, 0x54, 0x61, 0x67, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x47, 0x0a,
	0x1a, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x4b, 0x65, 0x79,
	0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x5c, 0x0a, 0x1b, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e,
	0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x1b, 0x0a, 0x19, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0xcf, 0x01, 0x0a, 0x1a, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x4b, 0x65, 0x79, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x32, 0xd4, 0x03, 0x0a, 0x0a, 0x54, 0x61, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x12, 0x19, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x1d,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54,
	0x61, 0x67, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61,
	0x67, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12,
	0x4d, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x50,
	0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x1f, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01,
	0x12, 0x47, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1f, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0d, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1f, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0xc2, 0x04, 0x0a, 0x14, 0x54,
	0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x53, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x12, 0x23, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61,
	0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e,
	0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x53,
	0x6f, 0x6d, 0x65, 0x12, 0x27, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67,
	0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x61, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x12, 0x29, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e,
	0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61,
	0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x64, 0x0a, 0x09, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x29, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67,
	0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30,
	0x01, 0x12, 0x51, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x29, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x29, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74,
	0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x32,
	0xba, 0x09, 0x0a, 0x1a, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5f,
	0x0a, 0x06, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x12, 0x29, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67,
	0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x6a, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x2d, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x6d, 0x0a, 0x06, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x2f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74,
	0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x70, 0x0a, 0x09, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x2f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x57, 0x0a, 0x07,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x2f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x2f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x62, 0x0a, 0x03, 0x53, 0x65, 0x74, 0x12, 0x2c, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61,
	0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x07, 0x53, 0x65,
	0x74, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x30, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74,
	0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x6b, 0x0a, 0x06,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x0a, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x33, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x30, 0x01, 0x12, 0x76, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c,
	0x6c, 0x12, 0x32, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76,
	0x32, 0x2e, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74,
	0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0xe8, 0x07, 0x0a,
	0x10, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x4b, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x12, 0x1f, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56,
	0x0a, 0x07, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54,
	0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x59, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x12, 0x25, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32,
	0x2e, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30,
	0x01, 0x12, 0x5c, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x25,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54,
	0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74,
	0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12,
	0x4d, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x25, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76,
	0x32, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55,
	0x0a, 0x0d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12,
	0x25, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e,
	0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x4e, 0x0a, 0x03, 0x53, 0x65, 0x74, 0x12, 0x22, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32,
	0x2e, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65,
	0x12, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32,
	0x2e, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x30, 0x01, 0x12, 0x57, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x25, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61,
	0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x0a,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x29, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74,
	0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x30, 0x01, 0x12, 0x62, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c,
	0x12, 0x28, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32,
	0x2e, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x42, 0x40, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x2d, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x74,
	0x61, 0x67, 0x2e, 0x76, 0x32, 0x3b, 0x74, 0x61, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_arista_tag_v2_services_gen_proto_rawDescOnce sync.Once
	file_arista_tag_v2_services_gen_proto_rawDescData = file_arista_tag_v2_services_gen_proto_rawDesc
)

func file_arista_tag_v2_services_gen_proto_rawDescGZIP() []byte {
	file_arista_tag_v2_services_gen_proto_rawDescOnce.Do(func() {
		file_arista_tag_v2_services_gen_proto_rawDescData = protoimpl.X.CompressGZIP(file_arista_tag_v2_services_gen_proto_rawDescData)
	})
	return file_arista_tag_v2_services_gen_proto_rawDescData
}

var file_arista_tag_v2_services_gen_proto_msgTypes = make([]protoimpl.MessageInfo, 45)
var file_arista_tag_v2_services_gen_proto_goTypes = []interface{}{
	(*MetaResponse)(nil),                          // 0: arista.tag.v2.MetaResponse
	(*TagRequest)(nil),                            // 1: arista.tag.v2.TagRequest
	(*TagResponse)(nil),                           // 2: arista.tag.v2.TagResponse
	(*TagSomeRequest)(nil),                        // 3: arista.tag.v2.TagSomeRequest
	(*TagSomeResponse)(nil),                       // 4: arista.tag.v2.TagSomeResponse
	(*TagStreamRequest)(nil),                      // 5: arista.tag.v2.TagStreamRequest
	(*TagStreamResponse)(nil),                     // 6: arista.tag.v2.TagStreamResponse
	(*TagAssignmentRequest)(nil),                  // 7: arista.tag.v2.TagAssignmentRequest
	(*TagAssignmentResponse)(nil),                 // 8: arista.tag.v2.TagAssignmentResponse
	(*TagAssignmentSomeRequest)(nil),              // 9: arista.tag.v2.TagAssignmentSomeRequest
	(*TagAssignmentSomeResponse)(nil),             // 10: arista.tag.v2.TagAssignmentSomeResponse
	(*TagAssignmentStreamRequest)(nil),            // 11: arista.tag.v2.TagAssignmentStreamRequest
	(*TagAssignmentStreamResponse)(nil),           // 12: arista.tag.v2.TagAssignmentStreamResponse
	(*TagAssignmentConfigRequest)(nil),            // 13: arista.tag.v2.TagAssignmentConfigRequest
	(*TagAssignmentConfigResponse)(nil),           // 14: arista.tag.v2.TagAssignmentConfigResponse
	(*TagAssignmentConfigSomeRequest)(nil),        // 15: arista.tag.v2.TagAssignmentConfigSomeRequest
	(*TagAssignmentConfigSomeResponse)(nil),       // 16: arista.tag.v2.TagAssignmentConfigSomeResponse
	(*TagAssignmentConfigStreamRequest)(nil),      // 17: arista.tag.v2.TagAssignmentConfigStreamRequest
	(*TagAssignmentConfigStreamResponse)(nil),     // 18: arista.tag.v2.TagAssignmentConfigStreamResponse
	(*TagAssignmentConfigSetRequest)(nil),         // 19: arista.tag.v2.TagAssignmentConfigSetRequest
	(*TagAssignmentConfigSetResponse)(nil),        // 20: arista.tag.v2.TagAssignmentConfigSetResponse
	(*TagAssignmentConfigSetSomeRequest)(nil),     // 21: arista.tag.v2.TagAssignmentConfigSetSomeRequest
	(*TagAssignmentConfigSetSomeResponse)(nil),    // 22: arista.tag.v2.TagAssignmentConfigSetSomeResponse
	(*TagAssignmentConfigDeleteRequest)(nil),      // 23: arista.tag.v2.TagAssignmentConfigDeleteRequest
	(*TagAssignmentConfigDeleteResponse)(nil),     // 24: arista.tag.v2.TagAssignmentConfigDeleteResponse
	(*TagAssignmentConfigDeleteSomeRequest)(nil),  // 25: arista.tag.v2.TagAssignmentConfigDeleteSomeRequest
	(*TagAssignmentConfigDeleteSomeResponse)(nil), // 26: arista.tag.v2.TagAssignmentConfigDeleteSomeResponse
	(*TagAssignmentConfigDeleteAllRequest)(nil),   // 27: arista.tag.v2.TagAssignmentConfigDeleteAllRequest
	(*TagAssignmentConfigDeleteAllResponse)(nil),  // 28: arista.tag.v2.TagAssignmentConfigDeleteAllResponse
	(*TagConfigRequest)(nil),                      // 29: arista.tag.v2.TagConfigRequest
	(*TagConfigResponse)(nil),                     // 30: arista.tag.v2.TagConfigResponse
	(*TagConfigSomeRequest)(nil),                  // 31: arista.tag.v2.TagConfigSomeRequest
	(*TagConfigSomeResponse)(nil),                 // 32: arista.tag.v2.TagConfigSomeResponse
	(*TagConfigStreamRequest)(nil),                // 33: arista.tag.v2.TagConfigStreamRequest
	(*TagConfigStreamResponse)(nil),               // 34: arista.tag.v2.TagConfigStreamResponse
	(*TagConfigSetRequest)(nil),                   // 35: arista.tag.v2.TagConfigSetRequest
	(*TagConfigSetResponse)(nil),                  // 36: arista.tag.v2.TagConfigSetResponse
	(*TagConfigSetSomeRequest)(nil),               // 37: arista.tag.v2.TagConfigSetSomeRequest
	(*TagConfigSetSomeResponse)(nil),              // 38: arista.tag.v2.TagConfigSetSomeResponse
	(*TagConfigDeleteRequest)(nil),                // 39: arista.tag.v2.TagConfigDeleteRequest
	(*TagConfigDeleteResponse)(nil),               // 40: arista.tag.v2.TagConfigDeleteResponse
	(*TagConfigDeleteSomeRequest)(nil),            // 41: arista.tag.v2.TagConfigDeleteSomeRequest
	(*TagConfigDeleteSomeResponse)(nil),           // 42: arista.tag.v2.TagConfigDeleteSomeResponse
	(*TagConfigDeleteAllRequest)(nil),             // 43: arista.tag.v2.TagConfigDeleteAllRequest
	(*TagConfigDeleteAllResponse)(nil),            // 44: arista.tag.v2.TagConfigDeleteAllResponse
	(*timestamppb.Timestamp)(nil),                 // 45: google.protobuf.Timestamp
	(subscriptions.Operation)(0),                  // 46: arista.subscriptions.Operation
	(*wrapperspb.UInt32Value)(nil),                // 47: google.protobuf.UInt32Value
	(*TagKey)(nil),                                // 48: arista.tag.v2.TagKey
	(*Tag)(nil),                                   // 49: arista.tag.v2.Tag
	(*wrapperspb.StringValue)(nil),                // 50: google.protobuf.StringValue
	(*time.TimeBounds)(nil),                       // 51: arista.time.TimeBounds
	(*TagAssignmentKey)(nil),                      // 52: arista.tag.v2.TagAssignmentKey
	(*TagAssignment)(nil),                         // 53: arista.tag.v2.TagAssignment
	(*TagAssignmentConfig)(nil),                   // 54: arista.tag.v2.TagAssignmentConfig
	(fmp.DeleteError)(0),                          // 55: fmp.DeleteError
	(*TagConfig)(nil),                             // 56: arista.tag.v2.TagConfig
}
var file_arista_tag_v2_services_gen_proto_depIdxs = []int32{
	45,  // 0: arista.tag.v2.MetaResponse.time:type_name -> google.protobuf.Timestamp
	46,  // 1: arista.tag.v2.MetaResponse.type:type_name -> arista.subscriptions.Operation
	47,  // 2: arista.tag.v2.MetaResponse.count:type_name -> google.protobuf.UInt32Value
	48,  // 3: arista.tag.v2.TagRequest.key:type_name -> arista.tag.v2.TagKey
	45,  // 4: arista.tag.v2.TagRequest.time:type_name -> google.protobuf.Timestamp
	49,  // 5: arista.tag.v2.TagResponse.value:type_name -> arista.tag.v2.Tag
	45,  // 6: arista.tag.v2.TagResponse.time:type_name -> google.protobuf.Timestamp
	48,  // 7: arista.tag.v2.TagSomeRequest.keys:type_name -> arista.tag.v2.TagKey
	45,  // 8: arista.tag.v2.TagSomeRequest.time:type_name -> google.protobuf.Timestamp
	49,  // 9: arista.tag.v2.TagSomeResponse.value:type_name -> arista.tag.v2.Tag
	50,  // 10: arista.tag.v2.TagSomeResponse.error:type_name -> google.protobuf.StringValue
	45,  // 11: arista.tag.v2.TagSomeResponse.time:type_name -> google.protobuf.Timestamp
	49,  // 12: arista.tag.v2.TagStreamRequest.partial_eq_filter:type_name -> arista.tag.v2.Tag
	51,  // 13: arista.tag.v2.TagStreamRequest.time:type_name -> arista.time.TimeBounds
	49,  // 14: arista.tag.v2.TagStreamResponse.value:type_name -> arista.tag.v2.Tag
	45,  // 15: arista.tag.v2.TagStreamResponse.time:type_name -> google.protobuf.Timestamp
	46,  // 16: arista.tag.v2.TagStreamResponse.type:type_name -> arista.subscriptions.Operation
	52,  // 17: arista.tag.v2.TagAssignmentRequest.key:type_name -> arista.tag.v2.TagAssignmentKey
	45,  // 18: arista.tag.v2.TagAssignmentRequest.time:type_name -> google.protobuf.Timestamp
	53,  // 19: arista.tag.v2.TagAssignmentResponse.value:type_name -> arista.tag.v2.TagAssignment
	45,  // 20: arista.tag.v2.TagAssignmentResponse.time:type_name -> google.protobuf.Timestamp
	52,  // 21: arista.tag.v2.TagAssignmentSomeRequest.keys:type_name -> arista.tag.v2.TagAssignmentKey
	45,  // 22: arista.tag.v2.TagAssignmentSomeRequest.time:type_name -> google.protobuf.Timestamp
	53,  // 23: arista.tag.v2.TagAssignmentSomeResponse.value:type_name -> arista.tag.v2.TagAssignment
	50,  // 24: arista.tag.v2.TagAssignmentSomeResponse.error:type_name -> google.protobuf.StringValue
	45,  // 25: arista.tag.v2.TagAssignmentSomeResponse.time:type_name -> google.protobuf.Timestamp
	53,  // 26: arista.tag.v2.TagAssignmentStreamRequest.partial_eq_filter:type_name -> arista.tag.v2.TagAssignment
	51,  // 27: arista.tag.v2.TagAssignmentStreamRequest.time:type_name -> arista.time.TimeBounds
	53,  // 28: arista.tag.v2.TagAssignmentStreamResponse.value:type_name -> arista.tag.v2.TagAssignment
	45,  // 29: arista.tag.v2.TagAssignmentStreamResponse.time:type_name -> google.protobuf.Timestamp
	46,  // 30: arista.tag.v2.TagAssignmentStreamResponse.type:type_name -> arista.subscriptions.Operation
	52,  // 31: arista.tag.v2.TagAssignmentConfigRequest.key:type_name -> arista.tag.v2.TagAssignmentKey
	45,  // 32: arista.tag.v2.TagAssignmentConfigRequest.time:type_name -> google.protobuf.Timestamp
	54,  // 33: arista.tag.v2.TagAssignmentConfigResponse.value:type_name -> arista.tag.v2.TagAssignmentConfig
	45,  // 34: arista.tag.v2.TagAssignmentConfigResponse.time:type_name -> google.protobuf.Timestamp
	52,  // 35: arista.tag.v2.TagAssignmentConfigSomeRequest.keys:type_name -> arista.tag.v2.TagAssignmentKey
	45,  // 36: arista.tag.v2.TagAssignmentConfigSomeRequest.time:type_name -> google.protobuf.Timestamp
	54,  // 37: arista.tag.v2.TagAssignmentConfigSomeResponse.value:type_name -> arista.tag.v2.TagAssignmentConfig
	50,  // 38: arista.tag.v2.TagAssignmentConfigSomeResponse.error:type_name -> google.protobuf.StringValue
	45,  // 39: arista.tag.v2.TagAssignmentConfigSomeResponse.time:type_name -> google.protobuf.Timestamp
	54,  // 40: arista.tag.v2.TagAssignmentConfigStreamRequest.partial_eq_filter:type_name -> arista.tag.v2.TagAssignmentConfig
	51,  // 41: arista.tag.v2.TagAssignmentConfigStreamRequest.time:type_name -> arista.time.TimeBounds
	54,  // 42: arista.tag.v2.TagAssignmentConfigStreamResponse.value:type_name -> arista.tag.v2.TagAssignmentConfig
	45,  // 43: arista.tag.v2.TagAssignmentConfigStreamResponse.time:type_name -> google.protobuf.Timestamp
	46,  // 44: arista.tag.v2.TagAssignmentConfigStreamResponse.type:type_name -> arista.subscriptions.Operation
	54,  // 45: arista.tag.v2.TagAssignmentConfigSetRequest.value:type_name -> arista.tag.v2.TagAssignmentConfig
	54,  // 46: arista.tag.v2.TagAssignmentConfigSetResponse.value:type_name -> arista.tag.v2.TagAssignmentConfig
	45,  // 47: arista.tag.v2.TagAssignmentConfigSetResponse.time:type_name -> google.protobuf.Timestamp
	54,  // 48: arista.tag.v2.TagAssignmentConfigSetSomeRequest.values:type_name -> arista.tag.v2.TagAssignmentConfig
	52,  // 49: arista.tag.v2.TagAssignmentConfigSetSomeResponse.key:type_name -> arista.tag.v2.TagAssignmentKey
	52,  // 50: arista.tag.v2.TagAssignmentConfigDeleteRequest.key:type_name -> arista.tag.v2.TagAssignmentKey
	52,  // 51: arista.tag.v2.TagAssignmentConfigDeleteResponse.key:type_name -> arista.tag.v2.TagAssignmentKey
	45,  // 52: arista.tag.v2.TagAssignmentConfigDeleteResponse.time:type_name -> google.protobuf.Timestamp
	52,  // 53: arista.tag.v2.TagAssignmentConfigDeleteSomeRequest.keys:type_name -> arista.tag.v2.TagAssignmentKey
	52,  // 54: arista.tag.v2.TagAssignmentConfigDeleteSomeResponse.key:type_name -> arista.tag.v2.TagAssignmentKey
	55,  // 55: arista.tag.v2.TagAssignmentConfigDeleteAllResponse.type:type_name -> fmp.DeleteError
	50,  // 56: arista.tag.v2.TagAssignmentConfigDeleteAllResponse.error:type_name -> google.protobuf.StringValue
	52,  // 57: arista.tag.v2.TagAssignmentConfigDeleteAllResponse.key:type_name -> arista.tag.v2.TagAssignmentKey
	45,  // 58: arista.tag.v2.TagAssignmentConfigDeleteAllResponse.time:type_name -> google.protobuf.Timestamp
	48,  // 59: arista.tag.v2.TagConfigRequest.key:type_name -> arista.tag.v2.TagKey
	45,  // 60: arista.tag.v2.TagConfigRequest.time:type_name -> google.protobuf.Timestamp
	56,  // 61: arista.tag.v2.TagConfigResponse.value:type_name -> arista.tag.v2.TagConfig
	45,  // 62: arista.tag.v2.TagConfigResponse.time:type_name -> google.protobuf.Timestamp
	48,  // 63: arista.tag.v2.TagConfigSomeRequest.keys:type_name -> arista.tag.v2.TagKey
	45,  // 64: arista.tag.v2.TagConfigSomeRequest.time:type_name -> google.protobuf.Timestamp
	56,  // 65: arista.tag.v2.TagConfigSomeResponse.value:type_name -> arista.tag.v2.TagConfig
	50,  // 66: arista.tag.v2.TagConfigSomeResponse.error:type_name -> google.protobuf.StringValue
	45,  // 67: arista.tag.v2.TagConfigSomeResponse.time:type_name -> google.protobuf.Timestamp
	56,  // 68: arista.tag.v2.TagConfigStreamRequest.partial_eq_filter:type_name -> arista.tag.v2.TagConfig
	51,  // 69: arista.tag.v2.TagConfigStreamRequest.time:type_name -> arista.time.TimeBounds
	56,  // 70: arista.tag.v2.TagConfigStreamResponse.value:type_name -> arista.tag.v2.TagConfig
	45,  // 71: arista.tag.v2.TagConfigStreamResponse.time:type_name -> google.protobuf.Timestamp
	46,  // 72: arista.tag.v2.TagConfigStreamResponse.type:type_name -> arista.subscriptions.Operation
	56,  // 73: arista.tag.v2.TagConfigSetRequest.value:type_name -> arista.tag.v2.TagConfig
	56,  // 74: arista.tag.v2.TagConfigSetResponse.value:type_name -> arista.tag.v2.TagConfig
	45,  // 75: arista.tag.v2.TagConfigSetResponse.time:type_name -> google.protobuf.Timestamp
	56,  // 76: arista.tag.v2.TagConfigSetSomeRequest.values:type_name -> arista.tag.v2.TagConfig
	48,  // 77: arista.tag.v2.TagConfigSetSomeResponse.key:type_name -> arista.tag.v2.TagKey
	48,  // 78: arista.tag.v2.TagConfigDeleteRequest.key:type_name -> arista.tag.v2.TagKey
	48,  // 79: arista.tag.v2.TagConfigDeleteResponse.key:type_name -> arista.tag.v2.TagKey
	45,  // 80: arista.tag.v2.TagConfigDeleteResponse.time:type_name -> google.protobuf.Timestamp
	48,  // 81: arista.tag.v2.TagConfigDeleteSomeRequest.keys:type_name -> arista.tag.v2.TagKey
	48,  // 82: arista.tag.v2.TagConfigDeleteSomeResponse.key:type_name -> arista.tag.v2.TagKey
	55,  // 83: arista.tag.v2.TagConfigDeleteAllResponse.type:type_name -> fmp.DeleteError
	50,  // 84: arista.tag.v2.TagConfigDeleteAllResponse.error:type_name -> google.protobuf.StringValue
	48,  // 85: arista.tag.v2.TagConfigDeleteAllResponse.key:type_name -> arista.tag.v2.TagKey
	45,  // 86: arista.tag.v2.TagConfigDeleteAllResponse.time:type_name -> google.protobuf.Timestamp
	1,   // 87: arista.tag.v2.TagService.GetOne:input_type -> arista.tag.v2.TagRequest
	3,   // 88: arista.tag.v2.TagService.GetSome:input_type -> arista.tag.v2.TagSomeRequest
	5,   // 89: arista.tag.v2.TagService.GetAll:input_type -> arista.tag.v2.TagStreamRequest
	5,   // 90: arista.tag.v2.TagService.Subscribe:input_type -> arista.tag.v2.TagStreamRequest
	5,   // 91: arista.tag.v2.TagService.GetMeta:input_type -> arista.tag.v2.TagStreamRequest
	5,   // 92: arista.tag.v2.TagService.SubscribeMeta:input_type -> arista.tag.v2.TagStreamRequest
	7,   // 93: arista.tag.v2.TagAssignmentService.GetOne:input_type -> arista.tag.v2.TagAssignmentRequest
	9,   // 94: arista.tag.v2.TagAssignmentService.GetSome:input_type -> arista.tag.v2.TagAssignmentSomeRequest
	11,  // 95: arista.tag.v2.TagAssignmentService.GetAll:input_type -> arista.tag.v2.TagAssignmentStreamRequest
	11,  // 96: arista.tag.v2.TagAssignmentService.Subscribe:input_type -> arista.tag.v2.TagAssignmentStreamRequest
	11,  // 97: arista.tag.v2.TagAssignmentService.GetMeta:input_type -> arista.tag.v2.TagAssignmentStreamRequest
	11,  // 98: arista.tag.v2.TagAssignmentService.SubscribeMeta:input_type -> arista.tag.v2.TagAssignmentStreamRequest
	13,  // 99: arista.tag.v2.TagAssignmentConfigService.GetOne:input_type -> arista.tag.v2.TagAssignmentConfigRequest
	15,  // 100: arista.tag.v2.TagAssignmentConfigService.GetSome:input_type -> arista.tag.v2.TagAssignmentConfigSomeRequest
	17,  // 101: arista.tag.v2.TagAssignmentConfigService.GetAll:input_type -> arista.tag.v2.TagAssignmentConfigStreamRequest
	17,  // 102: arista.tag.v2.TagAssignmentConfigService.Subscribe:input_type -> arista.tag.v2.TagAssignmentConfigStreamRequest
	17,  // 103: arista.tag.v2.TagAssignmentConfigService.GetMeta:input_type -> arista.tag.v2.TagAssignmentConfigStreamRequest
	17,  // 104: arista.tag.v2.TagAssignmentConfigService.SubscribeMeta:input_type -> arista.tag.v2.TagAssignmentConfigStreamRequest
	19,  // 105: arista.tag.v2.TagAssignmentConfigService.Set:input_type -> arista.tag.v2.TagAssignmentConfigSetRequest
	21,  // 106: arista.tag.v2.TagAssignmentConfigService.SetSome:input_type -> arista.tag.v2.TagAssignmentConfigSetSomeRequest
	23,  // 107: arista.tag.v2.TagAssignmentConfigService.Delete:input_type -> arista.tag.v2.TagAssignmentConfigDeleteRequest
	25,  // 108: arista.tag.v2.TagAssignmentConfigService.DeleteSome:input_type -> arista.tag.v2.TagAssignmentConfigDeleteSomeRequest
	27,  // 109: arista.tag.v2.TagAssignmentConfigService.DeleteAll:input_type -> arista.tag.v2.TagAssignmentConfigDeleteAllRequest
	29,  // 110: arista.tag.v2.TagConfigService.GetOne:input_type -> arista.tag.v2.TagConfigRequest
	31,  // 111: arista.tag.v2.TagConfigService.GetSome:input_type -> arista.tag.v2.TagConfigSomeRequest
	33,  // 112: arista.tag.v2.TagConfigService.GetAll:input_type -> arista.tag.v2.TagConfigStreamRequest
	33,  // 113: arista.tag.v2.TagConfigService.Subscribe:input_type -> arista.tag.v2.TagConfigStreamRequest
	33,  // 114: arista.tag.v2.TagConfigService.GetMeta:input_type -> arista.tag.v2.TagConfigStreamRequest
	33,  // 115: arista.tag.v2.TagConfigService.SubscribeMeta:input_type -> arista.tag.v2.TagConfigStreamRequest
	35,  // 116: arista.tag.v2.TagConfigService.Set:input_type -> arista.tag.v2.TagConfigSetRequest
	37,  // 117: arista.tag.v2.TagConfigService.SetSome:input_type -> arista.tag.v2.TagConfigSetSomeRequest
	39,  // 118: arista.tag.v2.TagConfigService.Delete:input_type -> arista.tag.v2.TagConfigDeleteRequest
	41,  // 119: arista.tag.v2.TagConfigService.DeleteSome:input_type -> arista.tag.v2.TagConfigDeleteSomeRequest
	43,  // 120: arista.tag.v2.TagConfigService.DeleteAll:input_type -> arista.tag.v2.TagConfigDeleteAllRequest
	2,   // 121: arista.tag.v2.TagService.GetOne:output_type -> arista.tag.v2.TagResponse
	4,   // 122: arista.tag.v2.TagService.GetSome:output_type -> arista.tag.v2.TagSomeResponse
	6,   // 123: arista.tag.v2.TagService.GetAll:output_type -> arista.tag.v2.TagStreamResponse
	6,   // 124: arista.tag.v2.TagService.Subscribe:output_type -> arista.tag.v2.TagStreamResponse
	0,   // 125: arista.tag.v2.TagService.GetMeta:output_type -> arista.tag.v2.MetaResponse
	0,   // 126: arista.tag.v2.TagService.SubscribeMeta:output_type -> arista.tag.v2.MetaResponse
	8,   // 127: arista.tag.v2.TagAssignmentService.GetOne:output_type -> arista.tag.v2.TagAssignmentResponse
	10,  // 128: arista.tag.v2.TagAssignmentService.GetSome:output_type -> arista.tag.v2.TagAssignmentSomeResponse
	12,  // 129: arista.tag.v2.TagAssignmentService.GetAll:output_type -> arista.tag.v2.TagAssignmentStreamResponse
	12,  // 130: arista.tag.v2.TagAssignmentService.Subscribe:output_type -> arista.tag.v2.TagAssignmentStreamResponse
	0,   // 131: arista.tag.v2.TagAssignmentService.GetMeta:output_type -> arista.tag.v2.MetaResponse
	0,   // 132: arista.tag.v2.TagAssignmentService.SubscribeMeta:output_type -> arista.tag.v2.MetaResponse
	14,  // 133: arista.tag.v2.TagAssignmentConfigService.GetOne:output_type -> arista.tag.v2.TagAssignmentConfigResponse
	16,  // 134: arista.tag.v2.TagAssignmentConfigService.GetSome:output_type -> arista.tag.v2.TagAssignmentConfigSomeResponse
	18,  // 135: arista.tag.v2.TagAssignmentConfigService.GetAll:output_type -> arista.tag.v2.TagAssignmentConfigStreamResponse
	18,  // 136: arista.tag.v2.TagAssignmentConfigService.Subscribe:output_type -> arista.tag.v2.TagAssignmentConfigStreamResponse
	0,   // 137: arista.tag.v2.TagAssignmentConfigService.GetMeta:output_type -> arista.tag.v2.MetaResponse
	0,   // 138: arista.tag.v2.TagAssignmentConfigService.SubscribeMeta:output_type -> arista.tag.v2.MetaResponse
	20,  // 139: arista.tag.v2.TagAssignmentConfigService.Set:output_type -> arista.tag.v2.TagAssignmentConfigSetResponse
	22,  // 140: arista.tag.v2.TagAssignmentConfigService.SetSome:output_type -> arista.tag.v2.TagAssignmentConfigSetSomeResponse
	24,  // 141: arista.tag.v2.TagAssignmentConfigService.Delete:output_type -> arista.tag.v2.TagAssignmentConfigDeleteResponse
	26,  // 142: arista.tag.v2.TagAssignmentConfigService.DeleteSome:output_type -> arista.tag.v2.TagAssignmentConfigDeleteSomeResponse
	28,  // 143: arista.tag.v2.TagAssignmentConfigService.DeleteAll:output_type -> arista.tag.v2.TagAssignmentConfigDeleteAllResponse
	30,  // 144: arista.tag.v2.TagConfigService.GetOne:output_type -> arista.tag.v2.TagConfigResponse
	32,  // 145: arista.tag.v2.TagConfigService.GetSome:output_type -> arista.tag.v2.TagConfigSomeResponse
	34,  // 146: arista.tag.v2.TagConfigService.GetAll:output_type -> arista.tag.v2.TagConfigStreamResponse
	34,  // 147: arista.tag.v2.TagConfigService.Subscribe:output_type -> arista.tag.v2.TagConfigStreamResponse
	0,   // 148: arista.tag.v2.TagConfigService.GetMeta:output_type -> arista.tag.v2.MetaResponse
	0,   // 149: arista.tag.v2.TagConfigService.SubscribeMeta:output_type -> arista.tag.v2.MetaResponse
	36,  // 150: arista.tag.v2.TagConfigService.Set:output_type -> arista.tag.v2.TagConfigSetResponse
	38,  // 151: arista.tag.v2.TagConfigService.SetSome:output_type -> arista.tag.v2.TagConfigSetSomeResponse
	40,  // 152: arista.tag.v2.TagConfigService.Delete:output_type -> arista.tag.v2.TagConfigDeleteResponse
	42,  // 153: arista.tag.v2.TagConfigService.DeleteSome:output_type -> arista.tag.v2.TagConfigDeleteSomeResponse
	44,  // 154: arista.tag.v2.TagConfigService.DeleteAll:output_type -> arista.tag.v2.TagConfigDeleteAllResponse
	121, // [121:155] is the sub-list for method output_type
	87,  // [87:121] is the sub-list for method input_type
	87,  // [87:87] is the sub-list for extension type_name
	87,  // [87:87] is the sub-list for extension extendee
	0,   // [0:87] is the sub-list for field type_name
}

func init() { file_arista_tag_v2_services_gen_proto_init() }
func file_arista_tag_v2_services_gen_proto_init() {
	if File_arista_tag_v2_services_gen_proto != nil {
		return
	}
	file_arista_tag_v2_tag_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_arista_tag_v2_services_gen_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v2_services_gen_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v2_services_gen_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v2_services_gen_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v2_services_gen_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v2_services_gen_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v2_services_gen_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v2_services_gen_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagAssignmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v2_services_gen_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagAssignmentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v2_services_gen_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagAssignmentSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v2_services_gen_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagAssignmentSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v2_services_gen_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagAssignmentStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v2_services_gen_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagAssignmentStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v2_services_gen_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagAssignmentConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v2_services_gen_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagAssignmentConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v2_services_gen_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagAssignmentConfigSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v2_services_gen_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagAssignmentConfigSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v2_services_gen_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagAssignmentConfigStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v2_services_gen_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagAssignmentConfigStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v2_services_gen_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagAssignmentConfigSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v2_services_gen_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagAssignmentConfigSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v2_services_gen_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagAssignmentConfigSetSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v2_services_gen_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagAssignmentConfigSetSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v2_services_gen_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagAssignmentConfigDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v2_services_gen_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagAssignmentConfigDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v2_services_gen_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagAssignmentConfigDeleteSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v2_services_gen_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagAssignmentConfigDeleteSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v2_services_gen_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagAssignmentConfigDeleteAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v2_services_gen_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagAssignmentConfigDeleteAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v2_services_gen_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v2_services_gen_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v2_services_gen_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagConfigSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v2_services_gen_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagConfigSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v2_services_gen_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagConfigStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v2_services_gen_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagConfigStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v2_services_gen_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagConfigSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v2_services_gen_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagConfigSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v2_services_gen_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagConfigSetSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v2_services_gen_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagConfigSetSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v2_services_gen_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagConfigDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v2_services_gen_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagConfigDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v2_services_gen_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagConfigDeleteSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v2_services_gen_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagConfigDeleteSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v2_services_gen_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagConfigDeleteAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v2_services_gen_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagConfigDeleteAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_arista_tag_v2_services_gen_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   45,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_arista_tag_v2_services_gen_proto_goTypes,
		DependencyIndexes: file_arista_tag_v2_services_gen_proto_depIdxs,
		MessageInfos:      file_arista_tag_v2_services_gen_proto_msgTypes,
	}.Build()
	File_arista_tag_v2_services_gen_proto = out.File
	file_arista_tag_v2_services_gen_proto_rawDesc = nil
	file_arista_tag_v2_services_gen_proto_goTypes = nil
	file_arista_tag_v2_services_gen_proto_depIdxs = nil
}
