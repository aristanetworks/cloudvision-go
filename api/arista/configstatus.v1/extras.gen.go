// Copyright (c) 2024 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

//
// Code generated by boomtown. DO NOT EDIT.
//

package configstatus

import "google.golang.org/grpc"

// Client composes the service clients within the configstatus package.
// This client can then be composed into a larger hierarchy for more complex clients.
//
// Because method names include the name of the Resource they operate on, the embedded
// clients are unnamed fields to reduce stutter.
//
// Included resources:
//   - ConfigDiff
//   - Configuration
//   - SecurityProfile
//   - SecurityProfileDiff
//   - SecurityProfileDiffSummary
//   - Summary
type Client struct {
	ConfigDiff                 ConfigDiffServiceClient
	Configuration              ConfigurationServiceClient
	SecurityProfile            SecurityProfileServiceClient
	SecurityProfileDiff        SecurityProfileDiffServiceClient
	SecurityProfileDiffSummary SecurityProfileDiffSummaryServiceClient
	Summary                    SummaryServiceClient
}

// NewClient creates a new composed-client from the given connection.
func NewClient(conn grpc.ClientConnInterface) Client {
	return Client{
		ConfigDiff:                 NewConfigDiffServiceClient(conn),
		Configuration:              NewConfigurationServiceClient(conn),
		SecurityProfile:            NewSecurityProfileServiceClient(conn),
		SecurityProfileDiff:        NewSecurityProfileDiffServiceClient(conn),
		SecurityProfileDiffSummary: NewSecurityProfileDiffSummaryServiceClient(conn),
		Summary:                    NewSummaryServiceClient(conn),
	}
}

// Server aggregates the various server interfaces required by gRPC.
// The included resources are:
//   - ConfigDiff
//   - Configuration
//   - SecurityProfile
//   - SecurityProfileDiff
//   - SecurityProfileDiffSummary
//   - Summary
type Server struct {
	ConfigDiff                 ConfigDiffServiceServer
	Configuration              ConfigurationServiceServer
	SecurityProfile            SecurityProfileServiceServer
	SecurityProfileDiff        SecurityProfileDiffServiceServer
	SecurityProfileDiffSummary SecurityProfileDiffSummaryServiceServer
	Summary                    SummaryServiceServer
}

// Register takes the given gRPC Server and registers our services with it.
func (s Server) Register(target *grpc.Server) {
	RegisterConfigDiffServiceServer(target, s.ConfigDiff)
	RegisterConfigurationServiceServer(target, s.Configuration)
	RegisterSecurityProfileServiceServer(target, s.SecurityProfile)
	RegisterSecurityProfileDiffServiceServer(target, s.SecurityProfileDiff)
	RegisterSecurityProfileDiffSummaryServiceServer(target, s.SecurityProfileDiffSummary)
	RegisterSummaryServiceServer(target, s.Summary)
}

// RegisterUnimplementeds adds unimplemented servers to the given gRPC Server
func RegisterUnimplementeds(target *grpc.Server) error {
	RegisterConfigDiffServiceServer(target,
		UnimplementedConfigDiffServiceServer{})
	RegisterConfigurationServiceServer(target,
		UnimplementedConfigurationServiceServer{})
	RegisterSecurityProfileServiceServer(target,
		UnimplementedSecurityProfileServiceServer{})
	RegisterSecurityProfileDiffServiceServer(target,
		UnimplementedSecurityProfileDiffServiceServer{})
	RegisterSecurityProfileDiffSummaryServiceServer(target,
		UnimplementedSecurityProfileDiffSummaryServiceServer{})
	RegisterSummaryServiceServer(target,
		UnimplementedSummaryServiceServer{})
	return nil
}

// HasKey returns whether the given ConfigDiff has a key provided in the model.
func (c *ConfigDiff) HasKey() bool {
	return c.GetKey() != nil
}

// HasKey returns whether the given ConfigDiffRequest has a key provided in the request.
func (c *ConfigDiffRequest) HasKey() bool {
	return c.GetKey() != nil
}

// HasKey returns whether the given Configuration has a key provided in the model.
func (c *Configuration) HasKey() bool {
	return c.GetKey() != nil
}

// HasKey returns whether the given ConfigurationRequest has a key provided in the request.
func (c *ConfigurationRequest) HasKey() bool {
	return c.GetKey() != nil
}

// HasKey returns whether the given SecurityProfile has a key provided in the model.
func (s *SecurityProfile) HasKey() bool {
	return s.GetKey() != nil
}

// HasKey returns whether the given SecurityProfileRequest has a key provided in the request.
func (s *SecurityProfileRequest) HasKey() bool {
	return s.GetKey() != nil
}

// HasKey returns whether the given SecurityProfileDiff has a key provided in the model.
func (s *SecurityProfileDiff) HasKey() bool {
	return s.GetKey() != nil
}

// HasKey returns whether the given SecurityProfileDiffRequest has a key provided in the request.
func (s *SecurityProfileDiffRequest) HasKey() bool {
	return s.GetKey() != nil
}

// HasKey returns whether the given SecurityProfileDiffSummary has a key provided in the model.
func (s *SecurityProfileDiffSummary) HasKey() bool {
	return s.GetKey() != nil
}

// HasKey returns whether the given SecurityProfileDiffSummaryRequest has a key provided in the request.
func (s *SecurityProfileDiffSummaryRequest) HasKey() bool {
	return s.GetKey() != nil
}

// HasKey returns whether the given Summary has a key provided in the model.
func (s *Summary) HasKey() bool {
	return s.GetKey() != nil
}

// HasKey returns whether the given SummaryRequest has a key provided in the request.
func (s *SummaryRequest) HasKey() bool {
	return s.GetKey() != nil
}

// PassesPartialEqFilter returns whether this ConfigFilterCode matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (c ConfigFilterCode) PassesPartialEqFilter(cmp ConfigFilterCode) bool {
	if cmp != ConfigFilterCode(0) {
		return c == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether this ConfigSourceType matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (c ConfigSourceType) PassesPartialEqFilter(cmp ConfigSourceType) bool {
	if cmp != ConfigSourceType(0) {
		return c == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether this ConfigSyncCode matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (c ConfigSyncCode) PassesPartialEqFilter(cmp ConfigSyncCode) bool {
	if cmp != ConfigSyncCode(0) {
		return c == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether this ConfigType matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (c ConfigType) PassesPartialEqFilter(cmp ConfigType) bool {
	if cmp != ConfigType(0) {
		return c == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether this DiffOp matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (d DiffOp) PassesPartialEqFilter(cmp DiffOp) bool {
	if cmp != DiffOp(0) {
		return d == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether this ErrorCode matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (e ErrorCode) PassesPartialEqFilter(cmp ErrorCode) bool {
	if cmp != ErrorCode(0) {
		return e == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether the ConfigError matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (c *ConfigError) PassesPartialEqFilter(cmp *ConfigError) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if c == nil {
		return false
	}
	if !c.ErrorCode.PassesPartialEqFilter(cmp.ErrorCode) {
		return false
	}

	if cmp.ErrorMsg != nil {
		if c.ErrorMsg == nil {
			return false
		}
		if c.ErrorMsg.Value != cmp.ErrorMsg.Value {
			return false
		}
	}

	if cmp.LineNum != nil {
		if c.LineNum == nil {
			return false
		}
		if c.LineNum.Value != cmp.LineNum.Value {
			return false
		}
	}

	if cmp.ConfigletName != nil {
		if c.ConfigletName == nil {
			return false
		}
		if c.ConfigletName.Value != cmp.ConfigletName.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the ConfigErrors matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (c *ConfigErrors) PassesPartialEqFilter(cmp *ConfigErrors) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if c == nil {
		return false
	}
	if len(c.Values) != len(cmp.Values) {
		return false
	}
	for i, f := range c.Values {
		if !f.PassesPartialEqFilter(cmp.Values[i]) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the ConfigSource matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (c *ConfigSource) PassesPartialEqFilter(cmp *ConfigSource) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if c == nil {
		return false
	}
	if !c.SourceType.PassesPartialEqFilter(cmp.SourceType) {
		return false
	}

	if cmp.SourceId != nil {
		if c.SourceId == nil {
			return false
		}
		if c.SourceId.Value != cmp.SourceId.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the ConfigSources matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (c *ConfigSources) PassesPartialEqFilter(cmp *ConfigSources) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if c == nil {
		return false
	}
	if len(c.Values) != len(cmp.Values) {
		return false
	}
	for i, f := range c.Values {
		if !f.PassesPartialEqFilter(cmp.Values[i]) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the ConfigSummary matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (c *ConfigSummary) PassesPartialEqFilter(cmp *ConfigSummary) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if c == nil {
		return false
	}
	if !c.Sync.PassesPartialEqFilter(cmp.Sync) {
		return false
	}

	if cmp.NopLines != nil {
		if c.NopLines == nil {
			return false
		}
		if c.NopLines.Value != cmp.NopLines.Value {
			return false
		}
	}

	if cmp.IgnoredLines != nil {
		if c.IgnoredLines == nil {
			return false
		}
		if c.IgnoredLines.Value != cmp.IgnoredLines.Value {
			return false
		}
	}

	if cmp.AddedLines != nil {
		if c.AddedLines == nil {
			return false
		}
		if c.AddedLines.Value != cmp.AddedLines.Value {
			return false
		}
	}

	if cmp.DeletedLines != nil {
		if c.DeletedLines == nil {
			return false
		}
		if c.DeletedLines.Value != cmp.DeletedLines.Value {
			return false
		}
	}

	if cmp.ChangedLines != nil {
		if c.ChangedLines == nil {
			return false
		}
		if c.ChangedLines.Value != cmp.ChangedLines.Value {
			return false
		}
	}

	if cmp.DesignedConfigErrors != nil {
		if c.DesignedConfigErrors == nil {
			return false
		}
		if c.DesignedConfigErrors.Value != cmp.DesignedConfigErrors.Value {
			return false
		}
	}

	if cmp.DesignedConfigWarnings != nil {
		if c.DesignedConfigWarnings == nil {
			return false
		}
		if c.DesignedConfigWarnings.Value != cmp.DesignedConfigWarnings.Value {
			return false
		}
	}

	if cmp.RunningConfigUpdateTime != nil {
		if cmp.RunningConfigUpdateTime.Seconds != 0 {
			if c.RunningConfigUpdateTime.Seconds != cmp.RunningConfigUpdateTime.Seconds {
				return false
			}
		}
		if cmp.RunningConfigUpdateTime.Nanos != 0 {
			if c.RunningConfigUpdateTime.Nanos != cmp.RunningConfigUpdateTime.Nanos {
				return false
			}
		}
	}

	if cmp.DesignedConfigUpdateTime != nil {
		if cmp.DesignedConfigUpdateTime.Seconds != 0 {
			if c.DesignedConfigUpdateTime.Seconds != cmp.DesignedConfigUpdateTime.Seconds {
				return false
			}
		}
		if cmp.DesignedConfigUpdateTime.Nanos != 0 {
			if c.DesignedConfigUpdateTime.Nanos != cmp.DesignedConfigUpdateTime.Nanos {
				return false
			}
		}
	}

	if cmp.RunningConfigUri != nil {
		if c.RunningConfigUri == nil {
			return false
		}
		if c.RunningConfigUri.Value != cmp.RunningConfigUri.Value {
			return false
		}
	}

	if cmp.DesignedConfigUri != nil {
		if c.DesignedConfigUri == nil {
			return false
		}
		if c.DesignedConfigUri.Value != cmp.DesignedConfigUri.Value {
			return false
		}
	}

	if cmp.DiffUri != nil {
		if c.DiffUri == nil {
			return false
		}
		if c.DiffUri.Value != cmp.DiffUri.Value {
			return false
		}
	}

	if cmp.Digest != nil {
		if c.Digest == nil {
			return false
		}
		if c.Digest.Value != cmp.Digest.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the DiffEntries matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (d *DiffEntries) PassesPartialEqFilter(cmp *DiffEntries) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if d == nil {
		return false
	}
	if len(d.Values) != len(cmp.Values) {
		return false
	}
	for i, f := range d.Values {
		if !f.PassesPartialEqFilter(cmp.Values[i]) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the DiffEntry matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (d *DiffEntry) PassesPartialEqFilter(cmp *DiffEntry) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if d == nil {
		return false
	}
	if !d.Op.PassesPartialEqFilter(cmp.Op) {
		return false
	}

	if cmp.ALineNum != nil {
		if d.ALineNum == nil {
			return false
		}
		if d.ALineNum.Value != cmp.ALineNum.Value {
			return false
		}
	}

	if cmp.BLineNum != nil {
		if d.BLineNum == nil {
			return false
		}
		if d.BLineNum.Value != cmp.BLineNum.Value {
			return false
		}
	}

	if cmp.BParentLineNum != nil {
		if d.BParentLineNum == nil {
			return false
		}
		if d.BParentLineNum.Value != cmp.BParentLineNum.Value {
			return false
		}
	}

	if cmp.ALine != nil {
		if d.ALine == nil {
			return false
		}
		if d.ALine.Value != cmp.ALine.Value {
			return false
		}
	}

	if cmp.BLine != nil {
		if d.BLine == nil {
			return false
		}
		if d.BLine.Value != cmp.BLine.Value {
			return false
		}
	}
	if !d.AFilterCode.PassesPartialEqFilter(cmp.AFilterCode) {
		return false
	}
	if !d.BFilterCode.PassesPartialEqFilter(cmp.BFilterCode) {
		return false
	}

	if cmp.AParentLineNum != nil {
		if d.AParentLineNum == nil {
			return false
		}
		if d.AParentLineNum.Value != cmp.AParentLineNum.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the SecurityProfileComplianceSummary matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (s *SecurityProfileComplianceSummary) PassesPartialEqFilter(cmp *SecurityProfileComplianceSummary) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if s == nil {
		return false
	}
	if !s.Sync.PassesPartialEqFilter(cmp.Sync) {
		return false
	}

	if cmp.NopLines != nil {
		if s.NopLines == nil {
			return false
		}
		if s.NopLines.Value != cmp.NopLines.Value {
			return false
		}
	}

	if cmp.IgnoredLines != nil {
		if s.IgnoredLines == nil {
			return false
		}
		if s.IgnoredLines.Value != cmp.IgnoredLines.Value {
			return false
		}
	}

	if cmp.AddedLines != nil {
		if s.AddedLines == nil {
			return false
		}
		if s.AddedLines.Value != cmp.AddedLines.Value {
			return false
		}
	}

	if cmp.DeletedLines != nil {
		if s.DeletedLines == nil {
			return false
		}
		if s.DeletedLines.Value != cmp.DeletedLines.Value {
			return false
		}
	}

	if cmp.ChangedLines != nil {
		if s.ChangedLines == nil {
			return false
		}
		if s.ChangedLines.Value != cmp.ChangedLines.Value {
			return false
		}
	}

	if cmp.Digest != nil {
		if s.Digest == nil {
			return false
		}
		if s.Digest.Value != cmp.Digest.Value {
			return false
		}
	}

	if cmp.RunningConfigUpdateTime != nil {
		if cmp.RunningConfigUpdateTime.Seconds != 0 {
			if s.RunningConfigUpdateTime.Seconds != cmp.RunningConfigUpdateTime.Seconds {
				return false
			}
		}
		if cmp.RunningConfigUpdateTime.Nanos != 0 {
			if s.RunningConfigUpdateTime.Nanos != cmp.RunningConfigUpdateTime.Nanos {
				return false
			}
		}
	}

	if cmp.DesignedConfigUpdateTime != nil {
		if cmp.DesignedConfigUpdateTime.Seconds != 0 {
			if s.DesignedConfigUpdateTime.Seconds != cmp.DesignedConfigUpdateTime.Seconds {
				return false
			}
		}
		if cmp.DesignedConfigUpdateTime.Nanos != 0 {
			if s.DesignedConfigUpdateTime.Nanos != cmp.DesignedConfigUpdateTime.Nanos {
				return false
			}
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the ConfigDiffKey matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (c *ConfigDiffKey) PassesPartialEqFilter(cmp *ConfigDiffKey) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if c == nil {
		return false
	}

	if cmp.ADeviceId != nil {
		if c.ADeviceId == nil {
			return false
		}
		if c.ADeviceId.Value != cmp.ADeviceId.Value {
			return false
		}
	}
	if !c.AType.PassesPartialEqFilter(cmp.AType) {
		return false
	}

	if cmp.ATime != nil {
		if cmp.ATime.Seconds != 0 {
			if c.ATime.Seconds != cmp.ATime.Seconds {
				return false
			}
		}
		if cmp.ATime.Nanos != 0 {
			if c.ATime.Nanos != cmp.ATime.Nanos {
				return false
			}
		}
	}

	if cmp.BDeviceId != nil {
		if c.BDeviceId == nil {
			return false
		}
		if c.BDeviceId.Value != cmp.BDeviceId.Value {
			return false
		}
	}
	if !c.BType.PassesPartialEqFilter(cmp.BType) {
		return false
	}

	if cmp.BTime != nil {
		if cmp.BTime.Seconds != 0 {
			if c.BTime.Seconds != cmp.BTime.Seconds {
				return false
			}
		}
		if cmp.BTime.Nanos != 0 {
			if c.BTime.Nanos != cmp.BTime.Nanos {
				return false
			}
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the ConfigKey matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (c *ConfigKey) PassesPartialEqFilter(cmp *ConfigKey) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if c == nil {
		return false
	}

	if cmp.DeviceId != nil {
		if c.DeviceId == nil {
			return false
		}
		if c.DeviceId.Value != cmp.DeviceId.Value {
			return false
		}
	}
	if !c.Type.PassesPartialEqFilter(cmp.Type) {
		return false
	}

	return true
}

// PassesPartialEqFilter returns whether the SummaryKey matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (s *SummaryKey) PassesPartialEqFilter(cmp *SummaryKey) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if s == nil {
		return false
	}

	if cmp.DeviceId != nil {
		if s.DeviceId == nil {
			return false
		}
		if s.DeviceId.Value != cmp.DeviceId.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the ConfigDiff matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (c *ConfigDiff) PassesPartialEqFilter(cmp *ConfigDiff) bool {
	// if the resource is nil, there is nothing to send to the client
	if c == nil {
		return false
	}

	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if !c.Key.PassesPartialEqFilter(cmp.Key) {
		return false
	}

	if cmp.Uri != nil {
		if c.Uri == nil {
			return false
		}
		if c.Uri.Value != cmp.Uri.Value {
			return false
		}
	}

	return true
}

// MatchesAnyPartialEqFilter returns whether the receiver matches any filters in the given set.
func (c *ConfigDiff) MatchesAnyPartialEqFilter(filters []*ConfigDiff) bool {
	if len(filters) == 0 {
		return true
	}

	for _, filt := range filters {
		if c.PassesPartialEqFilter(filt) {
			return true
		}
	}

	return false
}

// PassesPartialEqFilter returns whether the Configuration matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (c *Configuration) PassesPartialEqFilter(cmp *Configuration) bool {
	// if the resource is nil, there is nothing to send to the client
	if c == nil {
		return false
	}

	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if !c.Key.PassesPartialEqFilter(cmp.Key) {
		return false
	}

	if cmp.Uri != nil {
		if c.Uri == nil {
			return false
		}
		if c.Uri.Value != cmp.Uri.Value {
			return false
		}
	}

	return true
}

// MatchesAnyPartialEqFilter returns whether the receiver matches any filters in the given set.
func (c *Configuration) MatchesAnyPartialEqFilter(filters []*Configuration) bool {
	if len(filters) == 0 {
		return true
	}

	for _, filt := range filters {
		if c.PassesPartialEqFilter(filt) {
			return true
		}
	}

	return false
}

// PassesPartialEqFilter returns whether the SecurityProfile matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (s *SecurityProfile) PassesPartialEqFilter(cmp *SecurityProfile) bool {
	// if the resource is nil, there is nothing to send to the client
	if s == nil {
		return false
	}

	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if !s.Key.PassesPartialEqFilter(cmp.Key) {
		return false
	}

	if cmp.Config != nil {
		if s.Config == nil {
			return false
		}
		if s.Config.Value != cmp.Config.Value {
			return false
		}
	}

	return true
}

// MatchesAnyPartialEqFilter returns whether the receiver matches any filters in the given set.
func (s *SecurityProfile) MatchesAnyPartialEqFilter(filters []*SecurityProfile) bool {
	if len(filters) == 0 {
		return true
	}

	for _, filt := range filters {
		if s.PassesPartialEqFilter(filt) {
			return true
		}
	}

	return false
}

// PassesPartialEqFilter returns whether the SecurityProfileDiff matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (s *SecurityProfileDiff) PassesPartialEqFilter(cmp *SecurityProfileDiff) bool {
	// if the resource is nil, there is nothing to send to the client
	if s == nil {
		return false
	}

	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if !s.Key.PassesPartialEqFilter(cmp.Key) {
		return false
	}

	if !s.Diff.PassesPartialEqFilter(cmp.Diff) {
		return false
	}

	return true
}

// MatchesAnyPartialEqFilter returns whether the receiver matches any filters in the given set.
func (s *SecurityProfileDiff) MatchesAnyPartialEqFilter(filters []*SecurityProfileDiff) bool {
	if len(filters) == 0 {
		return true
	}

	for _, filt := range filters {
		if s.PassesPartialEqFilter(filt) {
			return true
		}
	}

	return false
}

// PassesPartialEqFilter returns whether the SecurityProfileDiffSummary matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (s *SecurityProfileDiffSummary) PassesPartialEqFilter(cmp *SecurityProfileDiffSummary) bool {
	// if the resource is nil, there is nothing to send to the client
	if s == nil {
		return false
	}

	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if !s.Key.PassesPartialEqFilter(cmp.Key) {
		return false
	}

	if !s.Summary.PassesPartialEqFilter(cmp.Summary) {
		return false
	}

	return true
}

// MatchesAnyPartialEqFilter returns whether the receiver matches any filters in the given set.
func (s *SecurityProfileDiffSummary) MatchesAnyPartialEqFilter(filters []*SecurityProfileDiffSummary) bool {
	if len(filters) == 0 {
		return true
	}

	for _, filt := range filters {
		if s.PassesPartialEqFilter(filt) {
			return true
		}
	}

	return false
}

// PassesPartialEqFilter returns whether the Summary matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (s *Summary) PassesPartialEqFilter(cmp *Summary) bool {
	// if the resource is nil, there is nothing to send to the client
	if s == nil {
		return false
	}

	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if !s.Key.PassesPartialEqFilter(cmp.Key) {
		return false
	}

	if !s.Summary.PassesPartialEqFilter(cmp.Summary) {
		return false
	}

	return true
}

// MatchesAnyPartialEqFilter returns whether the receiver matches any filters in the given set.
func (s *Summary) MatchesAnyPartialEqFilter(filters []*Summary) bool {
	if len(filters) == 0 {
		return true
	}

	for _, filt := range filters {
		if s.PassesPartialEqFilter(filt) {
			return true
		}
	}

	return false
}
