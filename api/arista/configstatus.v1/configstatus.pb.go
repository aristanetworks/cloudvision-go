// Copyright (c) 2021 Arista Networks, Inc.  All rights reserved.
// Arista Networks, Inc. Confidential and Proprietary.
// Subject to Arista Networks, Inc.'s EULA.
// FOR INTERNAL USE ONLY. NOT FOR DISTRIBUTION.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: arista/configstatus.v1/configstatus.proto

package configstatus

import (
	_ "github.com/aristanetworks/cloudvision-go/api/fmp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ErrorCode indicates warnings and errors produced during computing config
type ErrorCode int32

const (
	ErrorCode_ERROR_CODE_UNSPECIFIED ErrorCode = 0
	// DEVICE_WARNING indicates device warning
	ErrorCode_ERROR_CODE_DEVICE_WARNING ErrorCode = 1
	// DEVICE_ERROR indicates device error
	ErrorCode_ERROR_CODE_DEVICE_ERROR ErrorCode = 2
	// UNREACHABLE_DEVICE indicates the device cannot be reached
	ErrorCode_ERROR_CODE_UNREACHABLE_DEVICE ErrorCode = 3
	// CONFIG_FILTER_ERROR indicates error from partial config management filters
	ErrorCode_ERROR_CODE_CONFIG_FILTER_ERROR ErrorCode = 4
	// INTERNAL indicates internal errors
	ErrorCode_ERROR_CODE_INTERNAL ErrorCode = 5
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0: "ERROR_CODE_UNSPECIFIED",
		1: "ERROR_CODE_DEVICE_WARNING",
		2: "ERROR_CODE_DEVICE_ERROR",
		3: "ERROR_CODE_UNREACHABLE_DEVICE",
		4: "ERROR_CODE_CONFIG_FILTER_ERROR",
		5: "ERROR_CODE_INTERNAL",
	}
	ErrorCode_value = map[string]int32{
		"ERROR_CODE_UNSPECIFIED":         0,
		"ERROR_CODE_DEVICE_WARNING":      1,
		"ERROR_CODE_DEVICE_ERROR":        2,
		"ERROR_CODE_UNREACHABLE_DEVICE":  3,
		"ERROR_CODE_CONFIG_FILTER_ERROR": 4,
		"ERROR_CODE_INTERNAL":            5,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_configstatus_v1_configstatus_proto_enumTypes[0].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_arista_configstatus_v1_configstatus_proto_enumTypes[0]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_arista_configstatus_v1_configstatus_proto_rawDescGZIP(), []int{0}
}

// DiffOp is the operation to a line from one side of diff to get to another
type DiffOp int32

const (
	DiffOp_DIFF_OP_UNSPECIFIED DiffOp = 0
	// NOP indicates no change. A and B are identical at this line
	DiffOp_DIFF_OP_NOP DiffOp = 1
	// IGNORE indicates a line that's ignored in either A or B.
	// One of a_line_num or b_line_num will be -1
	DiffOp_DIFF_OP_IGNORE DiffOp = 2
	// ADD is an addition of a line from A
	DiffOp_DIFF_OP_ADD DiffOp = 3
	// DELETE is deletion of a line from B
	DiffOp_DIFF_OP_DELETE DiffOp = 4
	// CHANGE is a modification to a line in A
	DiffOp_DIFF_OP_CHANGE DiffOp = 5
)

// Enum value maps for DiffOp.
var (
	DiffOp_name = map[int32]string{
		0: "DIFF_OP_UNSPECIFIED",
		1: "DIFF_OP_NOP",
		2: "DIFF_OP_IGNORE",
		3: "DIFF_OP_ADD",
		4: "DIFF_OP_DELETE",
		5: "DIFF_OP_CHANGE",
	}
	DiffOp_value = map[string]int32{
		"DIFF_OP_UNSPECIFIED": 0,
		"DIFF_OP_NOP":         1,
		"DIFF_OP_IGNORE":      2,
		"DIFF_OP_ADD":         3,
		"DIFF_OP_DELETE":      4,
		"DIFF_OP_CHANGE":      5,
	}
)

func (x DiffOp) Enum() *DiffOp {
	p := new(DiffOp)
	*p = x
	return p
}

func (x DiffOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiffOp) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_configstatus_v1_configstatus_proto_enumTypes[1].Descriptor()
}

func (DiffOp) Type() protoreflect.EnumType {
	return &file_arista_configstatus_v1_configstatus_proto_enumTypes[1]
}

func (x DiffOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiffOp.Descriptor instead.
func (DiffOp) EnumDescriptor() ([]byte, []int) {
	return file_arista_configstatus_v1_configstatus_proto_rawDescGZIP(), []int{1}
}

// ConfigFilterCode indicates if a config line matches PCM filter(s)
type ConfigFilterCode int32

const (
	// UNSPECIFIED indicates config line did not match any partial config management (PCM) filter
	ConfigFilterCode_CONFIG_FILTER_CODE_UNSPECIFIED ConfigFilterCode = 0
	// MANAGED_LINE indicates config line matches managed PCM filter hence is managed
	ConfigFilterCode_CONFIG_FILTER_CODE_MANAGED_LINE ConfigFilterCode = 1
	// UNMANAGED_LINE indicates config line matches unmanaged PCM filter hence is not managed
	ConfigFilterCode_CONFIG_FILTER_CODE_UNMANAGED_LINE ConfigFilterCode = 2
)

// Enum value maps for ConfigFilterCode.
var (
	ConfigFilterCode_name = map[int32]string{
		0: "CONFIG_FILTER_CODE_UNSPECIFIED",
		1: "CONFIG_FILTER_CODE_MANAGED_LINE",
		2: "CONFIG_FILTER_CODE_UNMANAGED_LINE",
	}
	ConfigFilterCode_value = map[string]int32{
		"CONFIG_FILTER_CODE_UNSPECIFIED":    0,
		"CONFIG_FILTER_CODE_MANAGED_LINE":   1,
		"CONFIG_FILTER_CODE_UNMANAGED_LINE": 2,
	}
)

func (x ConfigFilterCode) Enum() *ConfigFilterCode {
	p := new(ConfigFilterCode)
	*p = x
	return p
}

func (x ConfigFilterCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigFilterCode) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_configstatus_v1_configstatus_proto_enumTypes[2].Descriptor()
}

func (ConfigFilterCode) Type() protoreflect.EnumType {
	return &file_arista_configstatus_v1_configstatus_proto_enumTypes[2]
}

func (x ConfigFilterCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigFilterCode.Descriptor instead.
func (ConfigFilterCode) EnumDescriptor() ([]byte, []int) {
	return file_arista_configstatus_v1_configstatus_proto_rawDescGZIP(), []int{2}
}

// ConfigSyncCode indicates config synchronization status
type ConfigSyncCode int32

const (
	ConfigSyncCode_CONFIG_SYNC_CODE_UNSPECIFIED ConfigSyncCode = 0
	// IN_SYNC indicates designed config and running config are identical
	ConfigSyncCode_CONFIG_SYNC_CODE_IN_SYNC ConfigSyncCode = 1
	// OUT_OF_SYNC indicates designed config and running config are not identical
	ConfigSyncCode_CONFIG_SYNC_CODE_OUT_OF_SYNC ConfigSyncCode = 2
)

// Enum value maps for ConfigSyncCode.
var (
	ConfigSyncCode_name = map[int32]string{
		0: "CONFIG_SYNC_CODE_UNSPECIFIED",
		1: "CONFIG_SYNC_CODE_IN_SYNC",
		2: "CONFIG_SYNC_CODE_OUT_OF_SYNC",
	}
	ConfigSyncCode_value = map[string]int32{
		"CONFIG_SYNC_CODE_UNSPECIFIED": 0,
		"CONFIG_SYNC_CODE_IN_SYNC":     1,
		"CONFIG_SYNC_CODE_OUT_OF_SYNC": 2,
	}
)

func (x ConfigSyncCode) Enum() *ConfigSyncCode {
	p := new(ConfigSyncCode)
	*p = x
	return p
}

func (x ConfigSyncCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigSyncCode) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_configstatus_v1_configstatus_proto_enumTypes[3].Descriptor()
}

func (ConfigSyncCode) Type() protoreflect.EnumType {
	return &file_arista_configstatus_v1_configstatus_proto_enumTypes[3]
}

func (x ConfigSyncCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigSyncCode.Descriptor instead.
func (ConfigSyncCode) EnumDescriptor() ([]byte, []int) {
	return file_arista_configstatus_v1_configstatus_proto_rawDescGZIP(), []int{3}
}

type ConfigType int32

const (
	ConfigType_CONFIG_TYPE_UNSPECIFIED     ConfigType = 0
	ConfigType_CONFIG_TYPE_RUNNING_CONFIG  ConfigType = 1
	ConfigType_CONFIG_TYPE_DESIGNED_CONFIG ConfigType = 2
)

// Enum value maps for ConfigType.
var (
	ConfigType_name = map[int32]string{
		0: "CONFIG_TYPE_UNSPECIFIED",
		1: "CONFIG_TYPE_RUNNING_CONFIG",
		2: "CONFIG_TYPE_DESIGNED_CONFIG",
	}
	ConfigType_value = map[string]int32{
		"CONFIG_TYPE_UNSPECIFIED":     0,
		"CONFIG_TYPE_RUNNING_CONFIG":  1,
		"CONFIG_TYPE_DESIGNED_CONFIG": 2,
	}
)

func (x ConfigType) Enum() *ConfigType {
	p := new(ConfigType)
	*p = x
	return p
}

func (x ConfigType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigType) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_configstatus_v1_configstatus_proto_enumTypes[4].Descriptor()
}

func (ConfigType) Type() protoreflect.EnumType {
	return &file_arista_configstatus_v1_configstatus_proto_enumTypes[4]
}

func (x ConfigType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigType.Descriptor instead.
func (ConfigType) EnumDescriptor() ([]byte, []int) {
	return file_arista_configstatus_v1_configstatus_proto_rawDescGZIP(), []int{4}
}

// ConfigError represents errors reported by CVP when handling device configuration
type ConfigError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode ErrorCode               `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=arista.configstatus.v1.ErrorCode" json:"error_code,omitempty"`
	ErrorMsg  *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
	// Line_num represents line number, if any
	LineNum *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=line_num,json=lineNum,proto3" json:"line_num,omitempty"`
	// Configlet_name represents the originating configlet name. Configlet_name
	// and line_num point to the line where config warning or config error originate.
	ConfigletName *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=configlet_name,json=configletName,proto3" json:"configlet_name,omitempty"`
}

func (x *ConfigError) Reset() {
	*x = ConfigError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_configstatus_v1_configstatus_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigError) ProtoMessage() {}

func (x *ConfigError) ProtoReflect() protoreflect.Message {
	mi := &file_arista_configstatus_v1_configstatus_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigError.ProtoReflect.Descriptor instead.
func (*ConfigError) Descriptor() ([]byte, []int) {
	return file_arista_configstatus_v1_configstatus_proto_rawDescGZIP(), []int{0}
}

func (x *ConfigError) GetErrorCode() ErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCode_ERROR_CODE_UNSPECIFIED
}

func (x *ConfigError) GetErrorMsg() *wrapperspb.StringValue {
	if x != nil {
		return x.ErrorMsg
	}
	return nil
}

func (x *ConfigError) GetLineNum() *wrapperspb.Int32Value {
	if x != nil {
		return x.LineNum
	}
	return nil
}

func (x *ConfigError) GetConfigletName() *wrapperspb.StringValue {
	if x != nil {
		return x.ConfigletName
	}
	return nil
}

type ConfigErrors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*ConfigError `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *ConfigErrors) Reset() {
	*x = ConfigErrors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_configstatus_v1_configstatus_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigErrors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigErrors) ProtoMessage() {}

func (x *ConfigErrors) ProtoReflect() protoreflect.Message {
	mi := &file_arista_configstatus_v1_configstatus_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigErrors.ProtoReflect.Descriptor instead.
func (*ConfigErrors) Descriptor() ([]byte, []int) {
	return file_arista_configstatus_v1_configstatus_proto_rawDescGZIP(), []int{1}
}

func (x *ConfigErrors) GetValues() []*ConfigError {
	if x != nil {
		return x.Values
	}
	return nil
}

// DiffEntry represents one entry in a Diff
type DiffEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op DiffOp `protobuf:"varint,1,opt,name=op,proto3,enum=arista.configstatus.v1.DiffOp" json:"op,omitempty"`
	// line number in A this diff applies to
	ALineNum *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=a_line_num,json=aLineNum,proto3" json:"a_line_num,omitempty"`
	// line number in B this diff applies to
	BLineNum *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=b_line_num,json=bLineNum,proto3" json:"b_line_num,omitempty"`
	// line number in B of the leading command of the containing block
	BParentLineNum *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=b_parent_line_num,json=bParentLineNum,proto3" json:"b_parent_line_num,omitempty"`
	// content of config line in A
	ALine *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=a_line,json=aLine,proto3" json:"a_line,omitempty"`
	// content of config line in B
	BLine *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=b_line,json=bLine,proto3" json:"b_line,omitempty"`
	// Config filter code of the line in A
	AFilterCode ConfigFilterCode `protobuf:"varint,7,opt,name=a_filter_code,json=aFilterCode,proto3,enum=arista.configstatus.v1.ConfigFilterCode" json:"a_filter_code,omitempty"`
	// Config filter code of the line in B
	BFilterCode ConfigFilterCode `protobuf:"varint,8,opt,name=b_filter_code,json=bFilterCode,proto3,enum=arista.configstatus.v1.ConfigFilterCode" json:"b_filter_code,omitempty"`
}

func (x *DiffEntry) Reset() {
	*x = DiffEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_configstatus_v1_configstatus_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiffEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiffEntry) ProtoMessage() {}

func (x *DiffEntry) ProtoReflect() protoreflect.Message {
	mi := &file_arista_configstatus_v1_configstatus_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiffEntry.ProtoReflect.Descriptor instead.
func (*DiffEntry) Descriptor() ([]byte, []int) {
	return file_arista_configstatus_v1_configstatus_proto_rawDescGZIP(), []int{2}
}

func (x *DiffEntry) GetOp() DiffOp {
	if x != nil {
		return x.Op
	}
	return DiffOp_DIFF_OP_UNSPECIFIED
}

func (x *DiffEntry) GetALineNum() *wrapperspb.Int32Value {
	if x != nil {
		return x.ALineNum
	}
	return nil
}

func (x *DiffEntry) GetBLineNum() *wrapperspb.Int32Value {
	if x != nil {
		return x.BLineNum
	}
	return nil
}

func (x *DiffEntry) GetBParentLineNum() *wrapperspb.Int32Value {
	if x != nil {
		return x.BParentLineNum
	}
	return nil
}

func (x *DiffEntry) GetALine() *wrapperspb.StringValue {
	if x != nil {
		return x.ALine
	}
	return nil
}

func (x *DiffEntry) GetBLine() *wrapperspb.StringValue {
	if x != nil {
		return x.BLine
	}
	return nil
}

func (x *DiffEntry) GetAFilterCode() ConfigFilterCode {
	if x != nil {
		return x.AFilterCode
	}
	return ConfigFilterCode_CONFIG_FILTER_CODE_UNSPECIFIED
}

func (x *DiffEntry) GetBFilterCode() ConfigFilterCode {
	if x != nil {
		return x.BFilterCode
	}
	return ConfigFilterCode_CONFIG_FILTER_CODE_UNSPECIFIED
}

// DiffEntries indicates potential multiple lines of config diff
type DiffEntries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*DiffEntry `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *DiffEntries) Reset() {
	*x = DiffEntries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_configstatus_v1_configstatus_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiffEntries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiffEntries) ProtoMessage() {}

func (x *DiffEntries) ProtoReflect() protoreflect.Message {
	mi := &file_arista_configstatus_v1_configstatus_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiffEntries.ProtoReflect.Descriptor instead.
func (*DiffEntries) Descriptor() ([]byte, []int) {
	return file_arista_configstatus_v1_configstatus_proto_rawDescGZIP(), []int{3}
}

func (x *DiffEntries) GetValues() []*DiffEntry {
	if x != nil {
		return x.Values
	}
	return nil
}

// ConfigSummary represents device configuration summary.
type ConfigSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sync ConfigSyncCode `protobuf:"varint,1,opt,name=sync,proto3,enum=arista.configstatus.v1.ConfigSyncCode" json:"sync,omitempty"`
	// Number of lines with code no-operation
	NopLines *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=nop_lines,json=nopLines,proto3" json:"nop_lines,omitempty"`
	// Number of lines with code IGNORE
	IgnoredLines *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=ignored_lines,json=ignoredLines,proto3" json:"ignored_lines,omitempty"`
	// Number of lines with code ADD
	AddedLines *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=added_lines,json=addedLines,proto3" json:"added_lines,omitempty"`
	// Number of lines with code DELETE
	DeletedLines *wrapperspb.Int32Value `protobuf:"bytes,5,opt,name=deleted_lines,json=deletedLines,proto3" json:"deleted_lines,omitempty"`
	// Number of lines with code CHANGE
	ChangedLines *wrapperspb.Int32Value `protobuf:"bytes,6,opt,name=changed_lines,json=changedLines,proto3" json:"changed_lines,omitempty"`
	// Number of designed config errors
	DesignedConfigErrors *wrapperspb.Int32Value `protobuf:"bytes,7,opt,name=designed_config_errors,json=designedConfigErrors,proto3" json:"designed_config_errors,omitempty"`
	// Number of designed config warnings
	DesignedConfigWarnings *wrapperspb.Int32Value `protobuf:"bytes,8,opt,name=designed_config_warnings,json=designedConfigWarnings,proto3" json:"designed_config_warnings,omitempty"`
	// Timestamp at which running config is updated
	RunningConfigUpdateTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=running_config_update_time,json=runningConfigUpdateTime,proto3" json:"running_config_update_time,omitempty"`
	// Timestamp at which designed config is updated
	DesignedConfigUpdateTime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=designed_config_update_time,json=designedConfigUpdateTime,proto3" json:"designed_config_update_time,omitempty"`
	// The HTTP URI client can use to GET running config and associated errors
	RunningConfigUri *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=running_config_uri,json=runningConfigUri,proto3" json:"running_config_uri,omitempty"`
	// The HTTP URI client can use to GET designed config and associated errors
	DesignedConfigUri *wrapperspb.StringValue `protobuf:"bytes,12,opt,name=designed_config_uri,json=designedConfigUri,proto3" json:"designed_config_uri,omitempty"`
	// The HTTP URI client can use to GET config diff and associated errors
	DiffUri *wrapperspb.StringValue `protobuf:"bytes,13,opt,name=diff_uri,json=diffUri,proto3" json:"diff_uri,omitempty"`
	// Digest of the config diff. For example, it can be SHA-256 hash of the config diff
	Digest *wrapperspb.StringValue `protobuf:"bytes,14,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (x *ConfigSummary) Reset() {
	*x = ConfigSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_configstatus_v1_configstatus_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigSummary) ProtoMessage() {}

func (x *ConfigSummary) ProtoReflect() protoreflect.Message {
	mi := &file_arista_configstatus_v1_configstatus_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigSummary.ProtoReflect.Descriptor instead.
func (*ConfigSummary) Descriptor() ([]byte, []int) {
	return file_arista_configstatus_v1_configstatus_proto_rawDescGZIP(), []int{4}
}

func (x *ConfigSummary) GetSync() ConfigSyncCode {
	if x != nil {
		return x.Sync
	}
	return ConfigSyncCode_CONFIG_SYNC_CODE_UNSPECIFIED
}

func (x *ConfigSummary) GetNopLines() *wrapperspb.Int32Value {
	if x != nil {
		return x.NopLines
	}
	return nil
}

func (x *ConfigSummary) GetIgnoredLines() *wrapperspb.Int32Value {
	if x != nil {
		return x.IgnoredLines
	}
	return nil
}

func (x *ConfigSummary) GetAddedLines() *wrapperspb.Int32Value {
	if x != nil {
		return x.AddedLines
	}
	return nil
}

func (x *ConfigSummary) GetDeletedLines() *wrapperspb.Int32Value {
	if x != nil {
		return x.DeletedLines
	}
	return nil
}

func (x *ConfigSummary) GetChangedLines() *wrapperspb.Int32Value {
	if x != nil {
		return x.ChangedLines
	}
	return nil
}

func (x *ConfigSummary) GetDesignedConfigErrors() *wrapperspb.Int32Value {
	if x != nil {
		return x.DesignedConfigErrors
	}
	return nil
}

func (x *ConfigSummary) GetDesignedConfigWarnings() *wrapperspb.Int32Value {
	if x != nil {
		return x.DesignedConfigWarnings
	}
	return nil
}

func (x *ConfigSummary) GetRunningConfigUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RunningConfigUpdateTime
	}
	return nil
}

func (x *ConfigSummary) GetDesignedConfigUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DesignedConfigUpdateTime
	}
	return nil
}

func (x *ConfigSummary) GetRunningConfigUri() *wrapperspb.StringValue {
	if x != nil {
		return x.RunningConfigUri
	}
	return nil
}

func (x *ConfigSummary) GetDesignedConfigUri() *wrapperspb.StringValue {
	if x != nil {
		return x.DesignedConfigUri
	}
	return nil
}

func (x *ConfigSummary) GetDiffUri() *wrapperspb.StringValue {
	if x != nil {
		return x.DiffUri
	}
	return nil
}

func (x *ConfigSummary) GetDigest() *wrapperspb.StringValue {
	if x != nil {
		return x.Digest
	}
	return nil
}

// ConfigKey uniquely identifies a config request.
type ConfigKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device_id is the serial number of the device
	DeviceId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// Type describes the config type
	Type ConfigType `protobuf:"varint,2,opt,name=type,proto3,enum=arista.configstatus.v1.ConfigType" json:"type,omitempty"`
}

func (x *ConfigKey) Reset() {
	*x = ConfigKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_configstatus_v1_configstatus_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigKey) ProtoMessage() {}

func (x *ConfigKey) ProtoReflect() protoreflect.Message {
	mi := &file_arista_configstatus_v1_configstatus_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigKey.ProtoReflect.Descriptor instead.
func (*ConfigKey) Descriptor() ([]byte, []int) {
	return file_arista_configstatus_v1_configstatus_proto_rawDescGZIP(), []int{5}
}

func (x *ConfigKey) GetDeviceId() *wrapperspb.StringValue {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

func (x *ConfigKey) GetType() ConfigType {
	if x != nil {
		return x.Type
	}
	return ConfigType_CONFIG_TYPE_UNSPECIFIED
}

// Configuration represents device's CLI configuration
type Configuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key *ConfigKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Uri represents the HTTP URI client can use to GET config body and associated errors
	Uri   *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	Error *ConfigError            `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *Configuration) Reset() {
	*x = Configuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_configstatus_v1_configstatus_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Configuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Configuration) ProtoMessage() {}

func (x *Configuration) ProtoReflect() protoreflect.Message {
	mi := &file_arista_configstatus_v1_configstatus_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Configuration.ProtoReflect.Descriptor instead.
func (*Configuration) Descriptor() ([]byte, []int) {
	return file_arista_configstatus_v1_configstatus_proto_rawDescGZIP(), []int{6}
}

func (x *Configuration) GetKey() *ConfigKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Configuration) GetUri() *wrapperspb.StringValue {
	if x != nil {
		return x.Uri
	}
	return nil
}

func (x *Configuration) GetError() *ConfigError {
	if x != nil {
		return x.Error
	}
	return nil
}

// ConfigDiffKey uniquely identifies a configuration diff request
type ConfigDiffKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A_device_id is the serial number of the device on A side (left hand side)
	ADeviceId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=a_device_id,json=aDeviceId,proto3" json:"a_device_id,omitempty"`
	// A_type is the config type on A side (left hand side)
	AType ConfigType `protobuf:"varint,2,opt,name=a_type,json=aType,proto3,enum=arista.configstatus.v1.ConfigType" json:"a_type,omitempty"`
	// A_time is the time at which to fetch config on A side (left hand side)
	ATime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=a_time,json=aTime,proto3" json:"a_time,omitempty"`
	// B_device_id is the serial number of the device on B side (right hand side)
	BDeviceId *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=b_device_id,json=bDeviceId,proto3" json:"b_device_id,omitempty"`
	// B_type is the config type on B side (right hand side)
	BType ConfigType `protobuf:"varint,5,opt,name=b_type,json=bType,proto3,enum=arista.configstatus.v1.ConfigType" json:"b_type,omitempty"`
	// B_time is the time at which to fetch config on B side (right hand side)
	BTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=b_time,json=bTime,proto3" json:"b_time,omitempty"`
}

func (x *ConfigDiffKey) Reset() {
	*x = ConfigDiffKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_configstatus_v1_configstatus_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigDiffKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigDiffKey) ProtoMessage() {}

func (x *ConfigDiffKey) ProtoReflect() protoreflect.Message {
	mi := &file_arista_configstatus_v1_configstatus_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigDiffKey.ProtoReflect.Descriptor instead.
func (*ConfigDiffKey) Descriptor() ([]byte, []int) {
	return file_arista_configstatus_v1_configstatus_proto_rawDescGZIP(), []int{7}
}

func (x *ConfigDiffKey) GetADeviceId() *wrapperspb.StringValue {
	if x != nil {
		return x.ADeviceId
	}
	return nil
}

func (x *ConfigDiffKey) GetAType() ConfigType {
	if x != nil {
		return x.AType
	}
	return ConfigType_CONFIG_TYPE_UNSPECIFIED
}

func (x *ConfigDiffKey) GetATime() *timestamppb.Timestamp {
	if x != nil {
		return x.ATime
	}
	return nil
}

func (x *ConfigDiffKey) GetBDeviceId() *wrapperspb.StringValue {
	if x != nil {
		return x.BDeviceId
	}
	return nil
}

func (x *ConfigDiffKey) GetBType() ConfigType {
	if x != nil {
		return x.BType
	}
	return ConfigType_CONFIG_TYPE_UNSPECIFIED
}

func (x *ConfigDiffKey) GetBTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BTime
	}
	return nil
}

type ConfigDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key represents config diff key
	Key *ConfigDiffKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Uri represents the HTTP URI client can use to GET config diff and associated errors
	Uri   *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	Error *ConfigError            `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ConfigDiff) Reset() {
	*x = ConfigDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_configstatus_v1_configstatus_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigDiff) ProtoMessage() {}

func (x *ConfigDiff) ProtoReflect() protoreflect.Message {
	mi := &file_arista_configstatus_v1_configstatus_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigDiff.ProtoReflect.Descriptor instead.
func (*ConfigDiff) Descriptor() ([]byte, []int) {
	return file_arista_configstatus_v1_configstatus_proto_rawDescGZIP(), []int{8}
}

func (x *ConfigDiff) GetKey() *ConfigDiffKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ConfigDiff) GetUri() *wrapperspb.StringValue {
	if x != nil {
		return x.Uri
	}
	return nil
}

func (x *ConfigDiff) GetError() *ConfigError {
	if x != nil {
		return x.Error
	}
	return nil
}

// SummaryKey uniquely identifies a device summary request
type SummaryKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device_id is the serial number of the device
	DeviceId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (x *SummaryKey) Reset() {
	*x = SummaryKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_configstatus_v1_configstatus_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummaryKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummaryKey) ProtoMessage() {}

func (x *SummaryKey) ProtoReflect() protoreflect.Message {
	mi := &file_arista_configstatus_v1_configstatus_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummaryKey.ProtoReflect.Descriptor instead.
func (*SummaryKey) Descriptor() ([]byte, []int) {
	return file_arista_configstatus_v1_configstatus_proto_rawDescGZIP(), []int{9}
}

func (x *SummaryKey) GetDeviceId() *wrapperspb.StringValue {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

type Summary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     *SummaryKey    `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Summary *ConfigSummary `protobuf:"bytes,2,opt,name=summary,proto3" json:"summary,omitempty"`
	Error   *ConfigError   `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *Summary) Reset() {
	*x = Summary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_configstatus_v1_configstatus_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Summary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Summary) ProtoMessage() {}

func (x *Summary) ProtoReflect() protoreflect.Message {
	mi := &file_arista_configstatus_v1_configstatus_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Summary.ProtoReflect.Descriptor instead.
func (*Summary) Descriptor() ([]byte, []int) {
	return file_arista_configstatus_v1_configstatus_proto_rawDescGZIP(), []int{10}
}

func (x *Summary) GetKey() *SummaryKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Summary) GetSummary() *ConfigSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *Summary) GetError() *ConfigError {
	if x != nil {
		return x.Error
	}
	return nil
}

var File_arista_configstatus_v1_configstatus_proto protoreflect.FileDescriptor

var file_arista_configstatus_v1_configstatus_proto_rawDesc = []byte{
	0x0a, 0x29, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x66, 0x6d, 0x70, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x87, 0x02, 0x0a, 0x0b, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x40, 0x0a, 0x0a, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x36, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x12,
	0x43, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6c, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6c, 0x65, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4b, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x22, 0xff, 0x03, 0x0a, 0x09, 0x44, 0x69, 0x66, 0x66, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x2e, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x4f, 0x70, 0x52, 0x02, 0x6f, 0x70, 0x12,
	0x39, 0x0a, 0x0a, 0x61, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x61, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x39, 0x0a, 0x0a, 0x62, 0x5f,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x62, 0x4c, 0x69,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x46, 0x0a, 0x11, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x62,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x33, 0x0a,
	0x06, 0x61, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x61, 0x4c, 0x69,
	0x6e, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x62, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x62, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x61, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x62, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x62, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x48, 0x0a, 0x0b, 0x44, 0x69, 0x66, 0x66, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x39, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x66, 0x66,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xf0, 0x07,
	0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x3a, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x79, 0x6e,
	0x63, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x38, 0x0a, 0x09, 0x6e,
	0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x70,
	0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x69, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x65, 0x64,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x65, 0x64,
	0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x16, 0x64, 0x65, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x55, 0x0a, 0x18,
	0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x64, 0x65, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x57, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x57, 0x0a, 0x1a, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x17, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x59, 0x0a, 0x1b,
	0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x18, 0x64,
	0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x12, 0x72, 0x75, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x10, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x55, 0x72, 0x69, 0x12, 0x4c, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11,
	0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x72,
	0x69, 0x12, 0x37, 0x0a, 0x08, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x64, 0x69, 0x66, 0x66, 0x55, 0x72, 0x69, 0x12, 0x34, 0x0a, 0x06, 0x64, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74,
	0x22, 0x84, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x39,
	0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x3a, 0x04, 0x80, 0x8e, 0x19, 0x01, 0x22, 0xb7, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e,
	0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x39,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72,
	0x6f, 0x22, 0xed, 0x02, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x66, 0x66,
	0x4b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x0b, 0x61, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x61, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x39, 0x0a, 0x06, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x06,
	0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x3c, 0x0a, 0x0b, 0x62, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x09, 0x62, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a,
	0x06, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x05, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x62, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x62, 0x54, 0x69, 0x6d, 0x65, 0x3a, 0x04, 0x80, 0x8e, 0x19,
	0x01, 0x22, 0xb8, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x66, 0x66,
	0x12, 0x37, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x66,
	0x66, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x03, 0x75, 0x72, 0x69,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72, 0x6f, 0x22, 0x4d, 0x0a, 0x0a,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x09, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x3a, 0x04, 0x80, 0x8e, 0x19, 0x01, 0x22, 0xc3, 0x01, 0x0a, 0x07,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x34, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3f, 0x0a,
	0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x39,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72,
	0x6f, 0x2a, 0xc3, 0x01, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x16, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x17,
	0x0a, 0x13, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x05, 0x2a, 0x7f, 0x0a, 0x06, 0x44, 0x69, 0x66, 0x66, 0x4f,
	0x70, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x49, 0x46, 0x46, 0x5f, 0x4f, 0x50, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x49,
	0x46, 0x46, 0x5f, 0x4f, 0x50, 0x5f, 0x4e, 0x4f, 0x50, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x44,
	0x49, 0x46, 0x46, 0x5f, 0x4f, 0x50, 0x5f, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x10, 0x02, 0x12,
	0x0f, 0x0a, 0x0b, 0x44, 0x49, 0x46, 0x46, 0x5f, 0x4f, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x03,
	0x12, 0x12, 0x0a, 0x0e, 0x44, 0x49, 0x46, 0x46, 0x5f, 0x4f, 0x50, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x49, 0x46, 0x46, 0x5f, 0x4f, 0x50, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x05, 0x2a, 0x82, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a,
	0x1e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x46, 0x49, 0x4c, 0x54,
	0x45, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x44, 0x5f,
	0x4c, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x4d,
	0x41, 0x4e, 0x41, 0x47, 0x45, 0x44, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x02, 0x2a, 0x72, 0x0a,
	0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x59, 0x4e, 0x43,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x01, 0x12,
	0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10,
	0x02, 0x2a, 0x6a, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x55, 0x4e, 0x4e,
	0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x49,
	0x47, 0x4e, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x02, 0x42, 0x62, 0x0a,
	0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x01, 0x5a, 0x34, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x76, 0x31, 0x3b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_arista_configstatus_v1_configstatus_proto_rawDescOnce sync.Once
	file_arista_configstatus_v1_configstatus_proto_rawDescData = file_arista_configstatus_v1_configstatus_proto_rawDesc
)

func file_arista_configstatus_v1_configstatus_proto_rawDescGZIP() []byte {
	file_arista_configstatus_v1_configstatus_proto_rawDescOnce.Do(func() {
		file_arista_configstatus_v1_configstatus_proto_rawDescData = protoimpl.X.CompressGZIP(file_arista_configstatus_v1_configstatus_proto_rawDescData)
	})
	return file_arista_configstatus_v1_configstatus_proto_rawDescData
}

var file_arista_configstatus_v1_configstatus_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_arista_configstatus_v1_configstatus_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_arista_configstatus_v1_configstatus_proto_goTypes = []interface{}{
	(ErrorCode)(0),                 // 0: arista.configstatus.v1.ErrorCode
	(DiffOp)(0),                    // 1: arista.configstatus.v1.DiffOp
	(ConfigFilterCode)(0),          // 2: arista.configstatus.v1.ConfigFilterCode
	(ConfigSyncCode)(0),            // 3: arista.configstatus.v1.ConfigSyncCode
	(ConfigType)(0),                // 4: arista.configstatus.v1.ConfigType
	(*ConfigError)(nil),            // 5: arista.configstatus.v1.ConfigError
	(*ConfigErrors)(nil),           // 6: arista.configstatus.v1.ConfigErrors
	(*DiffEntry)(nil),              // 7: arista.configstatus.v1.DiffEntry
	(*DiffEntries)(nil),            // 8: arista.configstatus.v1.DiffEntries
	(*ConfigSummary)(nil),          // 9: arista.configstatus.v1.ConfigSummary
	(*ConfigKey)(nil),              // 10: arista.configstatus.v1.ConfigKey
	(*Configuration)(nil),          // 11: arista.configstatus.v1.Configuration
	(*ConfigDiffKey)(nil),          // 12: arista.configstatus.v1.ConfigDiffKey
	(*ConfigDiff)(nil),             // 13: arista.configstatus.v1.ConfigDiff
	(*SummaryKey)(nil),             // 14: arista.configstatus.v1.SummaryKey
	(*Summary)(nil),                // 15: arista.configstatus.v1.Summary
	(*wrapperspb.StringValue)(nil), // 16: google.protobuf.StringValue
	(*wrapperspb.Int32Value)(nil),  // 17: google.protobuf.Int32Value
	(*timestamppb.Timestamp)(nil),  // 18: google.protobuf.Timestamp
}
var file_arista_configstatus_v1_configstatus_proto_depIdxs = []int32{
	0,  // 0: arista.configstatus.v1.ConfigError.error_code:type_name -> arista.configstatus.v1.ErrorCode
	16, // 1: arista.configstatus.v1.ConfigError.error_msg:type_name -> google.protobuf.StringValue
	17, // 2: arista.configstatus.v1.ConfigError.line_num:type_name -> google.protobuf.Int32Value
	16, // 3: arista.configstatus.v1.ConfigError.configlet_name:type_name -> google.protobuf.StringValue
	5,  // 4: arista.configstatus.v1.ConfigErrors.values:type_name -> arista.configstatus.v1.ConfigError
	1,  // 5: arista.configstatus.v1.DiffEntry.op:type_name -> arista.configstatus.v1.DiffOp
	17, // 6: arista.configstatus.v1.DiffEntry.a_line_num:type_name -> google.protobuf.Int32Value
	17, // 7: arista.configstatus.v1.DiffEntry.b_line_num:type_name -> google.protobuf.Int32Value
	17, // 8: arista.configstatus.v1.DiffEntry.b_parent_line_num:type_name -> google.protobuf.Int32Value
	16, // 9: arista.configstatus.v1.DiffEntry.a_line:type_name -> google.protobuf.StringValue
	16, // 10: arista.configstatus.v1.DiffEntry.b_line:type_name -> google.protobuf.StringValue
	2,  // 11: arista.configstatus.v1.DiffEntry.a_filter_code:type_name -> arista.configstatus.v1.ConfigFilterCode
	2,  // 12: arista.configstatus.v1.DiffEntry.b_filter_code:type_name -> arista.configstatus.v1.ConfigFilterCode
	7,  // 13: arista.configstatus.v1.DiffEntries.values:type_name -> arista.configstatus.v1.DiffEntry
	3,  // 14: arista.configstatus.v1.ConfigSummary.sync:type_name -> arista.configstatus.v1.ConfigSyncCode
	17, // 15: arista.configstatus.v1.ConfigSummary.nop_lines:type_name -> google.protobuf.Int32Value
	17, // 16: arista.configstatus.v1.ConfigSummary.ignored_lines:type_name -> google.protobuf.Int32Value
	17, // 17: arista.configstatus.v1.ConfigSummary.added_lines:type_name -> google.protobuf.Int32Value
	17, // 18: arista.configstatus.v1.ConfigSummary.deleted_lines:type_name -> google.protobuf.Int32Value
	17, // 19: arista.configstatus.v1.ConfigSummary.changed_lines:type_name -> google.protobuf.Int32Value
	17, // 20: arista.configstatus.v1.ConfigSummary.designed_config_errors:type_name -> google.protobuf.Int32Value
	17, // 21: arista.configstatus.v1.ConfigSummary.designed_config_warnings:type_name -> google.protobuf.Int32Value
	18, // 22: arista.configstatus.v1.ConfigSummary.running_config_update_time:type_name -> google.protobuf.Timestamp
	18, // 23: arista.configstatus.v1.ConfigSummary.designed_config_update_time:type_name -> google.protobuf.Timestamp
	16, // 24: arista.configstatus.v1.ConfigSummary.running_config_uri:type_name -> google.protobuf.StringValue
	16, // 25: arista.configstatus.v1.ConfigSummary.designed_config_uri:type_name -> google.protobuf.StringValue
	16, // 26: arista.configstatus.v1.ConfigSummary.diff_uri:type_name -> google.protobuf.StringValue
	16, // 27: arista.configstatus.v1.ConfigSummary.digest:type_name -> google.protobuf.StringValue
	16, // 28: arista.configstatus.v1.ConfigKey.device_id:type_name -> google.protobuf.StringValue
	4,  // 29: arista.configstatus.v1.ConfigKey.type:type_name -> arista.configstatus.v1.ConfigType
	10, // 30: arista.configstatus.v1.Configuration.key:type_name -> arista.configstatus.v1.ConfigKey
	16, // 31: arista.configstatus.v1.Configuration.uri:type_name -> google.protobuf.StringValue
	5,  // 32: arista.configstatus.v1.Configuration.error:type_name -> arista.configstatus.v1.ConfigError
	16, // 33: arista.configstatus.v1.ConfigDiffKey.a_device_id:type_name -> google.protobuf.StringValue
	4,  // 34: arista.configstatus.v1.ConfigDiffKey.a_type:type_name -> arista.configstatus.v1.ConfigType
	18, // 35: arista.configstatus.v1.ConfigDiffKey.a_time:type_name -> google.protobuf.Timestamp
	16, // 36: arista.configstatus.v1.ConfigDiffKey.b_device_id:type_name -> google.protobuf.StringValue
	4,  // 37: arista.configstatus.v1.ConfigDiffKey.b_type:type_name -> arista.configstatus.v1.ConfigType
	18, // 38: arista.configstatus.v1.ConfigDiffKey.b_time:type_name -> google.protobuf.Timestamp
	12, // 39: arista.configstatus.v1.ConfigDiff.key:type_name -> arista.configstatus.v1.ConfigDiffKey
	16, // 40: arista.configstatus.v1.ConfigDiff.uri:type_name -> google.protobuf.StringValue
	5,  // 41: arista.configstatus.v1.ConfigDiff.error:type_name -> arista.configstatus.v1.ConfigError
	16, // 42: arista.configstatus.v1.SummaryKey.device_id:type_name -> google.protobuf.StringValue
	14, // 43: arista.configstatus.v1.Summary.key:type_name -> arista.configstatus.v1.SummaryKey
	9,  // 44: arista.configstatus.v1.Summary.summary:type_name -> arista.configstatus.v1.ConfigSummary
	5,  // 45: arista.configstatus.v1.Summary.error:type_name -> arista.configstatus.v1.ConfigError
	46, // [46:46] is the sub-list for method output_type
	46, // [46:46] is the sub-list for method input_type
	46, // [46:46] is the sub-list for extension type_name
	46, // [46:46] is the sub-list for extension extendee
	0,  // [0:46] is the sub-list for field type_name
}

func init() { file_arista_configstatus_v1_configstatus_proto_init() }
func file_arista_configstatus_v1_configstatus_proto_init() {
	if File_arista_configstatus_v1_configstatus_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_arista_configstatus_v1_configstatus_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_configstatus_v1_configstatus_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigErrors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_configstatus_v1_configstatus_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiffEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_configstatus_v1_configstatus_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiffEntries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_configstatus_v1_configstatus_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_configstatus_v1_configstatus_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_configstatus_v1_configstatus_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Configuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_configstatus_v1_configstatus_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigDiffKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_configstatus_v1_configstatus_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_configstatus_v1_configstatus_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummaryKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_configstatus_v1_configstatus_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Summary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_arista_configstatus_v1_configstatus_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_arista_configstatus_v1_configstatus_proto_goTypes,
		DependencyIndexes: file_arista_configstatus_v1_configstatus_proto_depIdxs,
		EnumInfos:         file_arista_configstatus_v1_configstatus_proto_enumTypes,
		MessageInfos:      file_arista_configstatus_v1_configstatus_proto_msgTypes,
	}.Build()
	File_arista_configstatus_v1_configstatus_proto = out.File
	file_arista_configstatus_v1_configstatus_proto_rawDesc = nil
	file_arista_configstatus_v1_configstatus_proto_goTypes = nil
	file_arista_configstatus_v1_configstatus_proto_depIdxs = nil
}
