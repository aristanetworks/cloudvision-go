// Copyright (c) 2021 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

//
// Code generated by boomtown. DO NOT EDIT.
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: arista/configstatus.v1/services.gen.proto

package configstatus

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ConfigDiffService_GetOne_FullMethodName        = "/arista.configstatus.v1.ConfigDiffService/GetOne"
	ConfigDiffService_GetSome_FullMethodName       = "/arista.configstatus.v1.ConfigDiffService/GetSome"
	ConfigDiffService_GetAll_FullMethodName        = "/arista.configstatus.v1.ConfigDiffService/GetAll"
	ConfigDiffService_Subscribe_FullMethodName     = "/arista.configstatus.v1.ConfigDiffService/Subscribe"
	ConfigDiffService_GetMeta_FullMethodName       = "/arista.configstatus.v1.ConfigDiffService/GetMeta"
	ConfigDiffService_SubscribeMeta_FullMethodName = "/arista.configstatus.v1.ConfigDiffService/SubscribeMeta"
)

// ConfigDiffServiceClient is the client API for ConfigDiffService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigDiffServiceClient interface {
	GetOne(ctx context.Context, in *ConfigDiffRequest, opts ...grpc.CallOption) (*ConfigDiffResponse, error)
	GetSome(ctx context.Context, in *ConfigDiffSomeRequest, opts ...grpc.CallOption) (ConfigDiffService_GetSomeClient, error)
	GetAll(ctx context.Context, in *ConfigDiffStreamRequest, opts ...grpc.CallOption) (ConfigDiffService_GetAllClient, error)
	Subscribe(ctx context.Context, in *ConfigDiffStreamRequest, opts ...grpc.CallOption) (ConfigDiffService_SubscribeClient, error)
	GetMeta(ctx context.Context, in *ConfigDiffStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error)
	SubscribeMeta(ctx context.Context, in *ConfigDiffStreamRequest, opts ...grpc.CallOption) (ConfigDiffService_SubscribeMetaClient, error)
}

type configDiffServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigDiffServiceClient(cc grpc.ClientConnInterface) ConfigDiffServiceClient {
	return &configDiffServiceClient{cc}
}

func (c *configDiffServiceClient) GetOne(ctx context.Context, in *ConfigDiffRequest, opts ...grpc.CallOption) (*ConfigDiffResponse, error) {
	out := new(ConfigDiffResponse)
	err := c.cc.Invoke(ctx, ConfigDiffService_GetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configDiffServiceClient) GetSome(ctx context.Context, in *ConfigDiffSomeRequest, opts ...grpc.CallOption) (ConfigDiffService_GetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConfigDiffService_ServiceDesc.Streams[0], ConfigDiffService_GetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &configDiffServiceGetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigDiffService_GetSomeClient interface {
	Recv() (*ConfigDiffSomeResponse, error)
	grpc.ClientStream
}

type configDiffServiceGetSomeClient struct {
	grpc.ClientStream
}

func (x *configDiffServiceGetSomeClient) Recv() (*ConfigDiffSomeResponse, error) {
	m := new(ConfigDiffSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *configDiffServiceClient) GetAll(ctx context.Context, in *ConfigDiffStreamRequest, opts ...grpc.CallOption) (ConfigDiffService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConfigDiffService_ServiceDesc.Streams[1], ConfigDiffService_GetAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &configDiffServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigDiffService_GetAllClient interface {
	Recv() (*ConfigDiffStreamResponse, error)
	grpc.ClientStream
}

type configDiffServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *configDiffServiceGetAllClient) Recv() (*ConfigDiffStreamResponse, error) {
	m := new(ConfigDiffStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *configDiffServiceClient) Subscribe(ctx context.Context, in *ConfigDiffStreamRequest, opts ...grpc.CallOption) (ConfigDiffService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConfigDiffService_ServiceDesc.Streams[2], ConfigDiffService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &configDiffServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigDiffService_SubscribeClient interface {
	Recv() (*ConfigDiffStreamResponse, error)
	grpc.ClientStream
}

type configDiffServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *configDiffServiceSubscribeClient) Recv() (*ConfigDiffStreamResponse, error) {
	m := new(ConfigDiffStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *configDiffServiceClient) GetMeta(ctx context.Context, in *ConfigDiffStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error) {
	out := new(MetaResponse)
	err := c.cc.Invoke(ctx, ConfigDiffService_GetMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configDiffServiceClient) SubscribeMeta(ctx context.Context, in *ConfigDiffStreamRequest, opts ...grpc.CallOption) (ConfigDiffService_SubscribeMetaClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConfigDiffService_ServiceDesc.Streams[3], ConfigDiffService_SubscribeMeta_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &configDiffServiceSubscribeMetaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigDiffService_SubscribeMetaClient interface {
	Recv() (*MetaResponse, error)
	grpc.ClientStream
}

type configDiffServiceSubscribeMetaClient struct {
	grpc.ClientStream
}

func (x *configDiffServiceSubscribeMetaClient) Recv() (*MetaResponse, error) {
	m := new(MetaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConfigDiffServiceServer is the server API for ConfigDiffService service.
// All implementations must embed UnimplementedConfigDiffServiceServer
// for forward compatibility
type ConfigDiffServiceServer interface {
	GetOne(context.Context, *ConfigDiffRequest) (*ConfigDiffResponse, error)
	GetSome(*ConfigDiffSomeRequest, ConfigDiffService_GetSomeServer) error
	GetAll(*ConfigDiffStreamRequest, ConfigDiffService_GetAllServer) error
	Subscribe(*ConfigDiffStreamRequest, ConfigDiffService_SubscribeServer) error
	GetMeta(context.Context, *ConfigDiffStreamRequest) (*MetaResponse, error)
	SubscribeMeta(*ConfigDiffStreamRequest, ConfigDiffService_SubscribeMetaServer) error
	mustEmbedUnimplementedConfigDiffServiceServer()
}

// UnimplementedConfigDiffServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConfigDiffServiceServer struct {
}

func (UnimplementedConfigDiffServiceServer) GetOne(context.Context, *ConfigDiffRequest) (*ConfigDiffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedConfigDiffServiceServer) GetSome(*ConfigDiffSomeRequest, ConfigDiffService_GetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSome not implemented")
}
func (UnimplementedConfigDiffServiceServer) GetAll(*ConfigDiffStreamRequest, ConfigDiffService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedConfigDiffServiceServer) Subscribe(*ConfigDiffStreamRequest, ConfigDiffService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedConfigDiffServiceServer) GetMeta(context.Context, *ConfigDiffStreamRequest) (*MetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeta not implemented")
}
func (UnimplementedConfigDiffServiceServer) SubscribeMeta(*ConfigDiffStreamRequest, ConfigDiffService_SubscribeMetaServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMeta not implemented")
}
func (UnimplementedConfigDiffServiceServer) mustEmbedUnimplementedConfigDiffServiceServer() {}

// UnsafeConfigDiffServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigDiffServiceServer will
// result in compilation errors.
type UnsafeConfigDiffServiceServer interface {
	mustEmbedUnimplementedConfigDiffServiceServer()
}

func RegisterConfigDiffServiceServer(s grpc.ServiceRegistrar, srv ConfigDiffServiceServer) {
	s.RegisterService(&ConfigDiffService_ServiceDesc, srv)
}

func _ConfigDiffService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigDiffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigDiffServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigDiffService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigDiffServiceServer).GetOne(ctx, req.(*ConfigDiffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigDiffService_GetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConfigDiffSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigDiffServiceServer).GetSome(m, &configDiffServiceGetSomeServer{stream})
}

type ConfigDiffService_GetSomeServer interface {
	Send(*ConfigDiffSomeResponse) error
	grpc.ServerStream
}

type configDiffServiceGetSomeServer struct {
	grpc.ServerStream
}

func (x *configDiffServiceGetSomeServer) Send(m *ConfigDiffSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ConfigDiffService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConfigDiffStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigDiffServiceServer).GetAll(m, &configDiffServiceGetAllServer{stream})
}

type ConfigDiffService_GetAllServer interface {
	Send(*ConfigDiffStreamResponse) error
	grpc.ServerStream
}

type configDiffServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *configDiffServiceGetAllServer) Send(m *ConfigDiffStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ConfigDiffService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConfigDiffStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigDiffServiceServer).Subscribe(m, &configDiffServiceSubscribeServer{stream})
}

type ConfigDiffService_SubscribeServer interface {
	Send(*ConfigDiffStreamResponse) error
	grpc.ServerStream
}

type configDiffServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *configDiffServiceSubscribeServer) Send(m *ConfigDiffStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ConfigDiffService_GetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigDiffStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigDiffServiceServer).GetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigDiffService_GetMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigDiffServiceServer).GetMeta(ctx, req.(*ConfigDiffStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigDiffService_SubscribeMeta_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConfigDiffStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigDiffServiceServer).SubscribeMeta(m, &configDiffServiceSubscribeMetaServer{stream})
}

type ConfigDiffService_SubscribeMetaServer interface {
	Send(*MetaResponse) error
	grpc.ServerStream
}

type configDiffServiceSubscribeMetaServer struct {
	grpc.ServerStream
}

func (x *configDiffServiceSubscribeMetaServer) Send(m *MetaResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ConfigDiffService_ServiceDesc is the grpc.ServiceDesc for ConfigDiffService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigDiffService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.configstatus.v1.ConfigDiffService",
	HandlerType: (*ConfigDiffServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _ConfigDiffService_GetOne_Handler,
		},
		{
			MethodName: "GetMeta",
			Handler:    _ConfigDiffService_GetMeta_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSome",
			Handler:       _ConfigDiffService_GetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAll",
			Handler:       _ConfigDiffService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _ConfigDiffService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeMeta",
			Handler:       _ConfigDiffService_SubscribeMeta_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/configstatus.v1/services.gen.proto",
}

const (
	ConfigurationService_GetOne_FullMethodName        = "/arista.configstatus.v1.ConfigurationService/GetOne"
	ConfigurationService_GetSome_FullMethodName       = "/arista.configstatus.v1.ConfigurationService/GetSome"
	ConfigurationService_GetAll_FullMethodName        = "/arista.configstatus.v1.ConfigurationService/GetAll"
	ConfigurationService_Subscribe_FullMethodName     = "/arista.configstatus.v1.ConfigurationService/Subscribe"
	ConfigurationService_GetMeta_FullMethodName       = "/arista.configstatus.v1.ConfigurationService/GetMeta"
	ConfigurationService_SubscribeMeta_FullMethodName = "/arista.configstatus.v1.ConfigurationService/SubscribeMeta"
)

// ConfigurationServiceClient is the client API for ConfigurationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigurationServiceClient interface {
	GetOne(ctx context.Context, in *ConfigurationRequest, opts ...grpc.CallOption) (*ConfigurationResponse, error)
	GetSome(ctx context.Context, in *ConfigurationSomeRequest, opts ...grpc.CallOption) (ConfigurationService_GetSomeClient, error)
	GetAll(ctx context.Context, in *ConfigurationStreamRequest, opts ...grpc.CallOption) (ConfigurationService_GetAllClient, error)
	Subscribe(ctx context.Context, in *ConfigurationStreamRequest, opts ...grpc.CallOption) (ConfigurationService_SubscribeClient, error)
	GetMeta(ctx context.Context, in *ConfigurationStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error)
	SubscribeMeta(ctx context.Context, in *ConfigurationStreamRequest, opts ...grpc.CallOption) (ConfigurationService_SubscribeMetaClient, error)
}

type configurationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigurationServiceClient(cc grpc.ClientConnInterface) ConfigurationServiceClient {
	return &configurationServiceClient{cc}
}

func (c *configurationServiceClient) GetOne(ctx context.Context, in *ConfigurationRequest, opts ...grpc.CallOption) (*ConfigurationResponse, error) {
	out := new(ConfigurationResponse)
	err := c.cc.Invoke(ctx, ConfigurationService_GetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationServiceClient) GetSome(ctx context.Context, in *ConfigurationSomeRequest, opts ...grpc.CallOption) (ConfigurationService_GetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConfigurationService_ServiceDesc.Streams[0], ConfigurationService_GetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &configurationServiceGetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigurationService_GetSomeClient interface {
	Recv() (*ConfigurationSomeResponse, error)
	grpc.ClientStream
}

type configurationServiceGetSomeClient struct {
	grpc.ClientStream
}

func (x *configurationServiceGetSomeClient) Recv() (*ConfigurationSomeResponse, error) {
	m := new(ConfigurationSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *configurationServiceClient) GetAll(ctx context.Context, in *ConfigurationStreamRequest, opts ...grpc.CallOption) (ConfigurationService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConfigurationService_ServiceDesc.Streams[1], ConfigurationService_GetAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &configurationServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigurationService_GetAllClient interface {
	Recv() (*ConfigurationStreamResponse, error)
	grpc.ClientStream
}

type configurationServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *configurationServiceGetAllClient) Recv() (*ConfigurationStreamResponse, error) {
	m := new(ConfigurationStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *configurationServiceClient) Subscribe(ctx context.Context, in *ConfigurationStreamRequest, opts ...grpc.CallOption) (ConfigurationService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConfigurationService_ServiceDesc.Streams[2], ConfigurationService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &configurationServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigurationService_SubscribeClient interface {
	Recv() (*ConfigurationStreamResponse, error)
	grpc.ClientStream
}

type configurationServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *configurationServiceSubscribeClient) Recv() (*ConfigurationStreamResponse, error) {
	m := new(ConfigurationStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *configurationServiceClient) GetMeta(ctx context.Context, in *ConfigurationStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error) {
	out := new(MetaResponse)
	err := c.cc.Invoke(ctx, ConfigurationService_GetMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationServiceClient) SubscribeMeta(ctx context.Context, in *ConfigurationStreamRequest, opts ...grpc.CallOption) (ConfigurationService_SubscribeMetaClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConfigurationService_ServiceDesc.Streams[3], ConfigurationService_SubscribeMeta_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &configurationServiceSubscribeMetaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigurationService_SubscribeMetaClient interface {
	Recv() (*MetaResponse, error)
	grpc.ClientStream
}

type configurationServiceSubscribeMetaClient struct {
	grpc.ClientStream
}

func (x *configurationServiceSubscribeMetaClient) Recv() (*MetaResponse, error) {
	m := new(MetaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConfigurationServiceServer is the server API for ConfigurationService service.
// All implementations must embed UnimplementedConfigurationServiceServer
// for forward compatibility
type ConfigurationServiceServer interface {
	GetOne(context.Context, *ConfigurationRequest) (*ConfigurationResponse, error)
	GetSome(*ConfigurationSomeRequest, ConfigurationService_GetSomeServer) error
	GetAll(*ConfigurationStreamRequest, ConfigurationService_GetAllServer) error
	Subscribe(*ConfigurationStreamRequest, ConfigurationService_SubscribeServer) error
	GetMeta(context.Context, *ConfigurationStreamRequest) (*MetaResponse, error)
	SubscribeMeta(*ConfigurationStreamRequest, ConfigurationService_SubscribeMetaServer) error
	mustEmbedUnimplementedConfigurationServiceServer()
}

// UnimplementedConfigurationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConfigurationServiceServer struct {
}

func (UnimplementedConfigurationServiceServer) GetOne(context.Context, *ConfigurationRequest) (*ConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedConfigurationServiceServer) GetSome(*ConfigurationSomeRequest, ConfigurationService_GetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSome not implemented")
}
func (UnimplementedConfigurationServiceServer) GetAll(*ConfigurationStreamRequest, ConfigurationService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedConfigurationServiceServer) Subscribe(*ConfigurationStreamRequest, ConfigurationService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedConfigurationServiceServer) GetMeta(context.Context, *ConfigurationStreamRequest) (*MetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeta not implemented")
}
func (UnimplementedConfigurationServiceServer) SubscribeMeta(*ConfigurationStreamRequest, ConfigurationService_SubscribeMetaServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMeta not implemented")
}
func (UnimplementedConfigurationServiceServer) mustEmbedUnimplementedConfigurationServiceServer() {}

// UnsafeConfigurationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigurationServiceServer will
// result in compilation errors.
type UnsafeConfigurationServiceServer interface {
	mustEmbedUnimplementedConfigurationServiceServer()
}

func RegisterConfigurationServiceServer(s grpc.ServiceRegistrar, srv ConfigurationServiceServer) {
	s.RegisterService(&ConfigurationService_ServiceDesc, srv)
}

func _ConfigurationService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigurationService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServiceServer).GetOne(ctx, req.(*ConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigurationService_GetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConfigurationSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigurationServiceServer).GetSome(m, &configurationServiceGetSomeServer{stream})
}

type ConfigurationService_GetSomeServer interface {
	Send(*ConfigurationSomeResponse) error
	grpc.ServerStream
}

type configurationServiceGetSomeServer struct {
	grpc.ServerStream
}

func (x *configurationServiceGetSomeServer) Send(m *ConfigurationSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ConfigurationService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConfigurationStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigurationServiceServer).GetAll(m, &configurationServiceGetAllServer{stream})
}

type ConfigurationService_GetAllServer interface {
	Send(*ConfigurationStreamResponse) error
	grpc.ServerStream
}

type configurationServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *configurationServiceGetAllServer) Send(m *ConfigurationStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ConfigurationService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConfigurationStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigurationServiceServer).Subscribe(m, &configurationServiceSubscribeServer{stream})
}

type ConfigurationService_SubscribeServer interface {
	Send(*ConfigurationStreamResponse) error
	grpc.ServerStream
}

type configurationServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *configurationServiceSubscribeServer) Send(m *ConfigurationStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ConfigurationService_GetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigurationStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServiceServer).GetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigurationService_GetMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServiceServer).GetMeta(ctx, req.(*ConfigurationStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigurationService_SubscribeMeta_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConfigurationStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigurationServiceServer).SubscribeMeta(m, &configurationServiceSubscribeMetaServer{stream})
}

type ConfigurationService_SubscribeMetaServer interface {
	Send(*MetaResponse) error
	grpc.ServerStream
}

type configurationServiceSubscribeMetaServer struct {
	grpc.ServerStream
}

func (x *configurationServiceSubscribeMetaServer) Send(m *MetaResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ConfigurationService_ServiceDesc is the grpc.ServiceDesc for ConfigurationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigurationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.configstatus.v1.ConfigurationService",
	HandlerType: (*ConfigurationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _ConfigurationService_GetOne_Handler,
		},
		{
			MethodName: "GetMeta",
			Handler:    _ConfigurationService_GetMeta_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSome",
			Handler:       _ConfigurationService_GetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAll",
			Handler:       _ConfigurationService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _ConfigurationService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeMeta",
			Handler:       _ConfigurationService_SubscribeMeta_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/configstatus.v1/services.gen.proto",
}

const (
	SecurityProfileService_GetOne_FullMethodName        = "/arista.configstatus.v1.SecurityProfileService/GetOne"
	SecurityProfileService_GetSome_FullMethodName       = "/arista.configstatus.v1.SecurityProfileService/GetSome"
	SecurityProfileService_GetAll_FullMethodName        = "/arista.configstatus.v1.SecurityProfileService/GetAll"
	SecurityProfileService_Subscribe_FullMethodName     = "/arista.configstatus.v1.SecurityProfileService/Subscribe"
	SecurityProfileService_GetMeta_FullMethodName       = "/arista.configstatus.v1.SecurityProfileService/GetMeta"
	SecurityProfileService_SubscribeMeta_FullMethodName = "/arista.configstatus.v1.SecurityProfileService/SubscribeMeta"
)

// SecurityProfileServiceClient is the client API for SecurityProfileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecurityProfileServiceClient interface {
	GetOne(ctx context.Context, in *SecurityProfileRequest, opts ...grpc.CallOption) (*SecurityProfileResponse, error)
	GetSome(ctx context.Context, in *SecurityProfileSomeRequest, opts ...grpc.CallOption) (SecurityProfileService_GetSomeClient, error)
	GetAll(ctx context.Context, in *SecurityProfileStreamRequest, opts ...grpc.CallOption) (SecurityProfileService_GetAllClient, error)
	Subscribe(ctx context.Context, in *SecurityProfileStreamRequest, opts ...grpc.CallOption) (SecurityProfileService_SubscribeClient, error)
	GetMeta(ctx context.Context, in *SecurityProfileStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error)
	SubscribeMeta(ctx context.Context, in *SecurityProfileStreamRequest, opts ...grpc.CallOption) (SecurityProfileService_SubscribeMetaClient, error)
}

type securityProfileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSecurityProfileServiceClient(cc grpc.ClientConnInterface) SecurityProfileServiceClient {
	return &securityProfileServiceClient{cc}
}

func (c *securityProfileServiceClient) GetOne(ctx context.Context, in *SecurityProfileRequest, opts ...grpc.CallOption) (*SecurityProfileResponse, error) {
	out := new(SecurityProfileResponse)
	err := c.cc.Invoke(ctx, SecurityProfileService_GetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityProfileServiceClient) GetSome(ctx context.Context, in *SecurityProfileSomeRequest, opts ...grpc.CallOption) (SecurityProfileService_GetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &SecurityProfileService_ServiceDesc.Streams[0], SecurityProfileService_GetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &securityProfileServiceGetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SecurityProfileService_GetSomeClient interface {
	Recv() (*SecurityProfileSomeResponse, error)
	grpc.ClientStream
}

type securityProfileServiceGetSomeClient struct {
	grpc.ClientStream
}

func (x *securityProfileServiceGetSomeClient) Recv() (*SecurityProfileSomeResponse, error) {
	m := new(SecurityProfileSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *securityProfileServiceClient) GetAll(ctx context.Context, in *SecurityProfileStreamRequest, opts ...grpc.CallOption) (SecurityProfileService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &SecurityProfileService_ServiceDesc.Streams[1], SecurityProfileService_GetAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &securityProfileServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SecurityProfileService_GetAllClient interface {
	Recv() (*SecurityProfileStreamResponse, error)
	grpc.ClientStream
}

type securityProfileServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *securityProfileServiceGetAllClient) Recv() (*SecurityProfileStreamResponse, error) {
	m := new(SecurityProfileStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *securityProfileServiceClient) Subscribe(ctx context.Context, in *SecurityProfileStreamRequest, opts ...grpc.CallOption) (SecurityProfileService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &SecurityProfileService_ServiceDesc.Streams[2], SecurityProfileService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &securityProfileServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SecurityProfileService_SubscribeClient interface {
	Recv() (*SecurityProfileStreamResponse, error)
	grpc.ClientStream
}

type securityProfileServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *securityProfileServiceSubscribeClient) Recv() (*SecurityProfileStreamResponse, error) {
	m := new(SecurityProfileStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *securityProfileServiceClient) GetMeta(ctx context.Context, in *SecurityProfileStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error) {
	out := new(MetaResponse)
	err := c.cc.Invoke(ctx, SecurityProfileService_GetMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityProfileServiceClient) SubscribeMeta(ctx context.Context, in *SecurityProfileStreamRequest, opts ...grpc.CallOption) (SecurityProfileService_SubscribeMetaClient, error) {
	stream, err := c.cc.NewStream(ctx, &SecurityProfileService_ServiceDesc.Streams[3], SecurityProfileService_SubscribeMeta_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &securityProfileServiceSubscribeMetaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SecurityProfileService_SubscribeMetaClient interface {
	Recv() (*MetaResponse, error)
	grpc.ClientStream
}

type securityProfileServiceSubscribeMetaClient struct {
	grpc.ClientStream
}

func (x *securityProfileServiceSubscribeMetaClient) Recv() (*MetaResponse, error) {
	m := new(MetaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SecurityProfileServiceServer is the server API for SecurityProfileService service.
// All implementations must embed UnimplementedSecurityProfileServiceServer
// for forward compatibility
type SecurityProfileServiceServer interface {
	GetOne(context.Context, *SecurityProfileRequest) (*SecurityProfileResponse, error)
	GetSome(*SecurityProfileSomeRequest, SecurityProfileService_GetSomeServer) error
	GetAll(*SecurityProfileStreamRequest, SecurityProfileService_GetAllServer) error
	Subscribe(*SecurityProfileStreamRequest, SecurityProfileService_SubscribeServer) error
	GetMeta(context.Context, *SecurityProfileStreamRequest) (*MetaResponse, error)
	SubscribeMeta(*SecurityProfileStreamRequest, SecurityProfileService_SubscribeMetaServer) error
	mustEmbedUnimplementedSecurityProfileServiceServer()
}

// UnimplementedSecurityProfileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSecurityProfileServiceServer struct {
}

func (UnimplementedSecurityProfileServiceServer) GetOne(context.Context, *SecurityProfileRequest) (*SecurityProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedSecurityProfileServiceServer) GetSome(*SecurityProfileSomeRequest, SecurityProfileService_GetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSome not implemented")
}
func (UnimplementedSecurityProfileServiceServer) GetAll(*SecurityProfileStreamRequest, SecurityProfileService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedSecurityProfileServiceServer) Subscribe(*SecurityProfileStreamRequest, SecurityProfileService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedSecurityProfileServiceServer) GetMeta(context.Context, *SecurityProfileStreamRequest) (*MetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeta not implemented")
}
func (UnimplementedSecurityProfileServiceServer) SubscribeMeta(*SecurityProfileStreamRequest, SecurityProfileService_SubscribeMetaServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMeta not implemented")
}
func (UnimplementedSecurityProfileServiceServer) mustEmbedUnimplementedSecurityProfileServiceServer() {
}

// UnsafeSecurityProfileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecurityProfileServiceServer will
// result in compilation errors.
type UnsafeSecurityProfileServiceServer interface {
	mustEmbedUnimplementedSecurityProfileServiceServer()
}

func RegisterSecurityProfileServiceServer(s grpc.ServiceRegistrar, srv SecurityProfileServiceServer) {
	s.RegisterService(&SecurityProfileService_ServiceDesc, srv)
}

func _SecurityProfileService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecurityProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityProfileServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityProfileService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityProfileServiceServer).GetOne(ctx, req.(*SecurityProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityProfileService_GetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SecurityProfileSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SecurityProfileServiceServer).GetSome(m, &securityProfileServiceGetSomeServer{stream})
}

type SecurityProfileService_GetSomeServer interface {
	Send(*SecurityProfileSomeResponse) error
	grpc.ServerStream
}

type securityProfileServiceGetSomeServer struct {
	grpc.ServerStream
}

func (x *securityProfileServiceGetSomeServer) Send(m *SecurityProfileSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SecurityProfileService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SecurityProfileStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SecurityProfileServiceServer).GetAll(m, &securityProfileServiceGetAllServer{stream})
}

type SecurityProfileService_GetAllServer interface {
	Send(*SecurityProfileStreamResponse) error
	grpc.ServerStream
}

type securityProfileServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *securityProfileServiceGetAllServer) Send(m *SecurityProfileStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SecurityProfileService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SecurityProfileStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SecurityProfileServiceServer).Subscribe(m, &securityProfileServiceSubscribeServer{stream})
}

type SecurityProfileService_SubscribeServer interface {
	Send(*SecurityProfileStreamResponse) error
	grpc.ServerStream
}

type securityProfileServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *securityProfileServiceSubscribeServer) Send(m *SecurityProfileStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SecurityProfileService_GetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecurityProfileStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityProfileServiceServer).GetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityProfileService_GetMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityProfileServiceServer).GetMeta(ctx, req.(*SecurityProfileStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityProfileService_SubscribeMeta_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SecurityProfileStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SecurityProfileServiceServer).SubscribeMeta(m, &securityProfileServiceSubscribeMetaServer{stream})
}

type SecurityProfileService_SubscribeMetaServer interface {
	Send(*MetaResponse) error
	grpc.ServerStream
}

type securityProfileServiceSubscribeMetaServer struct {
	grpc.ServerStream
}

func (x *securityProfileServiceSubscribeMetaServer) Send(m *MetaResponse) error {
	return x.ServerStream.SendMsg(m)
}

// SecurityProfileService_ServiceDesc is the grpc.ServiceDesc for SecurityProfileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecurityProfileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.configstatus.v1.SecurityProfileService",
	HandlerType: (*SecurityProfileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _SecurityProfileService_GetOne_Handler,
		},
		{
			MethodName: "GetMeta",
			Handler:    _SecurityProfileService_GetMeta_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSome",
			Handler:       _SecurityProfileService_GetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAll",
			Handler:       _SecurityProfileService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _SecurityProfileService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeMeta",
			Handler:       _SecurityProfileService_SubscribeMeta_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/configstatus.v1/services.gen.proto",
}

const (
	SecurityProfileDiffService_GetOne_FullMethodName        = "/arista.configstatus.v1.SecurityProfileDiffService/GetOne"
	SecurityProfileDiffService_GetSome_FullMethodName       = "/arista.configstatus.v1.SecurityProfileDiffService/GetSome"
	SecurityProfileDiffService_GetAll_FullMethodName        = "/arista.configstatus.v1.SecurityProfileDiffService/GetAll"
	SecurityProfileDiffService_Subscribe_FullMethodName     = "/arista.configstatus.v1.SecurityProfileDiffService/Subscribe"
	SecurityProfileDiffService_GetMeta_FullMethodName       = "/arista.configstatus.v1.SecurityProfileDiffService/GetMeta"
	SecurityProfileDiffService_SubscribeMeta_FullMethodName = "/arista.configstatus.v1.SecurityProfileDiffService/SubscribeMeta"
)

// SecurityProfileDiffServiceClient is the client API for SecurityProfileDiffService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecurityProfileDiffServiceClient interface {
	GetOne(ctx context.Context, in *SecurityProfileDiffRequest, opts ...grpc.CallOption) (*SecurityProfileDiffResponse, error)
	GetSome(ctx context.Context, in *SecurityProfileDiffSomeRequest, opts ...grpc.CallOption) (SecurityProfileDiffService_GetSomeClient, error)
	GetAll(ctx context.Context, in *SecurityProfileDiffStreamRequest, opts ...grpc.CallOption) (SecurityProfileDiffService_GetAllClient, error)
	Subscribe(ctx context.Context, in *SecurityProfileDiffStreamRequest, opts ...grpc.CallOption) (SecurityProfileDiffService_SubscribeClient, error)
	GetMeta(ctx context.Context, in *SecurityProfileDiffStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error)
	SubscribeMeta(ctx context.Context, in *SecurityProfileDiffStreamRequest, opts ...grpc.CallOption) (SecurityProfileDiffService_SubscribeMetaClient, error)
}

type securityProfileDiffServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSecurityProfileDiffServiceClient(cc grpc.ClientConnInterface) SecurityProfileDiffServiceClient {
	return &securityProfileDiffServiceClient{cc}
}

func (c *securityProfileDiffServiceClient) GetOne(ctx context.Context, in *SecurityProfileDiffRequest, opts ...grpc.CallOption) (*SecurityProfileDiffResponse, error) {
	out := new(SecurityProfileDiffResponse)
	err := c.cc.Invoke(ctx, SecurityProfileDiffService_GetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityProfileDiffServiceClient) GetSome(ctx context.Context, in *SecurityProfileDiffSomeRequest, opts ...grpc.CallOption) (SecurityProfileDiffService_GetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &SecurityProfileDiffService_ServiceDesc.Streams[0], SecurityProfileDiffService_GetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &securityProfileDiffServiceGetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SecurityProfileDiffService_GetSomeClient interface {
	Recv() (*SecurityProfileDiffSomeResponse, error)
	grpc.ClientStream
}

type securityProfileDiffServiceGetSomeClient struct {
	grpc.ClientStream
}

func (x *securityProfileDiffServiceGetSomeClient) Recv() (*SecurityProfileDiffSomeResponse, error) {
	m := new(SecurityProfileDiffSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *securityProfileDiffServiceClient) GetAll(ctx context.Context, in *SecurityProfileDiffStreamRequest, opts ...grpc.CallOption) (SecurityProfileDiffService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &SecurityProfileDiffService_ServiceDesc.Streams[1], SecurityProfileDiffService_GetAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &securityProfileDiffServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SecurityProfileDiffService_GetAllClient interface {
	Recv() (*SecurityProfileDiffStreamResponse, error)
	grpc.ClientStream
}

type securityProfileDiffServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *securityProfileDiffServiceGetAllClient) Recv() (*SecurityProfileDiffStreamResponse, error) {
	m := new(SecurityProfileDiffStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *securityProfileDiffServiceClient) Subscribe(ctx context.Context, in *SecurityProfileDiffStreamRequest, opts ...grpc.CallOption) (SecurityProfileDiffService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &SecurityProfileDiffService_ServiceDesc.Streams[2], SecurityProfileDiffService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &securityProfileDiffServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SecurityProfileDiffService_SubscribeClient interface {
	Recv() (*SecurityProfileDiffStreamResponse, error)
	grpc.ClientStream
}

type securityProfileDiffServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *securityProfileDiffServiceSubscribeClient) Recv() (*SecurityProfileDiffStreamResponse, error) {
	m := new(SecurityProfileDiffStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *securityProfileDiffServiceClient) GetMeta(ctx context.Context, in *SecurityProfileDiffStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error) {
	out := new(MetaResponse)
	err := c.cc.Invoke(ctx, SecurityProfileDiffService_GetMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityProfileDiffServiceClient) SubscribeMeta(ctx context.Context, in *SecurityProfileDiffStreamRequest, opts ...grpc.CallOption) (SecurityProfileDiffService_SubscribeMetaClient, error) {
	stream, err := c.cc.NewStream(ctx, &SecurityProfileDiffService_ServiceDesc.Streams[3], SecurityProfileDiffService_SubscribeMeta_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &securityProfileDiffServiceSubscribeMetaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SecurityProfileDiffService_SubscribeMetaClient interface {
	Recv() (*MetaResponse, error)
	grpc.ClientStream
}

type securityProfileDiffServiceSubscribeMetaClient struct {
	grpc.ClientStream
}

func (x *securityProfileDiffServiceSubscribeMetaClient) Recv() (*MetaResponse, error) {
	m := new(MetaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SecurityProfileDiffServiceServer is the server API for SecurityProfileDiffService service.
// All implementations must embed UnimplementedSecurityProfileDiffServiceServer
// for forward compatibility
type SecurityProfileDiffServiceServer interface {
	GetOne(context.Context, *SecurityProfileDiffRequest) (*SecurityProfileDiffResponse, error)
	GetSome(*SecurityProfileDiffSomeRequest, SecurityProfileDiffService_GetSomeServer) error
	GetAll(*SecurityProfileDiffStreamRequest, SecurityProfileDiffService_GetAllServer) error
	Subscribe(*SecurityProfileDiffStreamRequest, SecurityProfileDiffService_SubscribeServer) error
	GetMeta(context.Context, *SecurityProfileDiffStreamRequest) (*MetaResponse, error)
	SubscribeMeta(*SecurityProfileDiffStreamRequest, SecurityProfileDiffService_SubscribeMetaServer) error
	mustEmbedUnimplementedSecurityProfileDiffServiceServer()
}

// UnimplementedSecurityProfileDiffServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSecurityProfileDiffServiceServer struct {
}

func (UnimplementedSecurityProfileDiffServiceServer) GetOne(context.Context, *SecurityProfileDiffRequest) (*SecurityProfileDiffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedSecurityProfileDiffServiceServer) GetSome(*SecurityProfileDiffSomeRequest, SecurityProfileDiffService_GetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSome not implemented")
}
func (UnimplementedSecurityProfileDiffServiceServer) GetAll(*SecurityProfileDiffStreamRequest, SecurityProfileDiffService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedSecurityProfileDiffServiceServer) Subscribe(*SecurityProfileDiffStreamRequest, SecurityProfileDiffService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedSecurityProfileDiffServiceServer) GetMeta(context.Context, *SecurityProfileDiffStreamRequest) (*MetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeta not implemented")
}
func (UnimplementedSecurityProfileDiffServiceServer) SubscribeMeta(*SecurityProfileDiffStreamRequest, SecurityProfileDiffService_SubscribeMetaServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMeta not implemented")
}
func (UnimplementedSecurityProfileDiffServiceServer) mustEmbedUnimplementedSecurityProfileDiffServiceServer() {
}

// UnsafeSecurityProfileDiffServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecurityProfileDiffServiceServer will
// result in compilation errors.
type UnsafeSecurityProfileDiffServiceServer interface {
	mustEmbedUnimplementedSecurityProfileDiffServiceServer()
}

func RegisterSecurityProfileDiffServiceServer(s grpc.ServiceRegistrar, srv SecurityProfileDiffServiceServer) {
	s.RegisterService(&SecurityProfileDiffService_ServiceDesc, srv)
}

func _SecurityProfileDiffService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecurityProfileDiffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityProfileDiffServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityProfileDiffService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityProfileDiffServiceServer).GetOne(ctx, req.(*SecurityProfileDiffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityProfileDiffService_GetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SecurityProfileDiffSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SecurityProfileDiffServiceServer).GetSome(m, &securityProfileDiffServiceGetSomeServer{stream})
}

type SecurityProfileDiffService_GetSomeServer interface {
	Send(*SecurityProfileDiffSomeResponse) error
	grpc.ServerStream
}

type securityProfileDiffServiceGetSomeServer struct {
	grpc.ServerStream
}

func (x *securityProfileDiffServiceGetSomeServer) Send(m *SecurityProfileDiffSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SecurityProfileDiffService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SecurityProfileDiffStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SecurityProfileDiffServiceServer).GetAll(m, &securityProfileDiffServiceGetAllServer{stream})
}

type SecurityProfileDiffService_GetAllServer interface {
	Send(*SecurityProfileDiffStreamResponse) error
	grpc.ServerStream
}

type securityProfileDiffServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *securityProfileDiffServiceGetAllServer) Send(m *SecurityProfileDiffStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SecurityProfileDiffService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SecurityProfileDiffStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SecurityProfileDiffServiceServer).Subscribe(m, &securityProfileDiffServiceSubscribeServer{stream})
}

type SecurityProfileDiffService_SubscribeServer interface {
	Send(*SecurityProfileDiffStreamResponse) error
	grpc.ServerStream
}

type securityProfileDiffServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *securityProfileDiffServiceSubscribeServer) Send(m *SecurityProfileDiffStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SecurityProfileDiffService_GetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecurityProfileDiffStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityProfileDiffServiceServer).GetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityProfileDiffService_GetMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityProfileDiffServiceServer).GetMeta(ctx, req.(*SecurityProfileDiffStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityProfileDiffService_SubscribeMeta_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SecurityProfileDiffStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SecurityProfileDiffServiceServer).SubscribeMeta(m, &securityProfileDiffServiceSubscribeMetaServer{stream})
}

type SecurityProfileDiffService_SubscribeMetaServer interface {
	Send(*MetaResponse) error
	grpc.ServerStream
}

type securityProfileDiffServiceSubscribeMetaServer struct {
	grpc.ServerStream
}

func (x *securityProfileDiffServiceSubscribeMetaServer) Send(m *MetaResponse) error {
	return x.ServerStream.SendMsg(m)
}

// SecurityProfileDiffService_ServiceDesc is the grpc.ServiceDesc for SecurityProfileDiffService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecurityProfileDiffService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.configstatus.v1.SecurityProfileDiffService",
	HandlerType: (*SecurityProfileDiffServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _SecurityProfileDiffService_GetOne_Handler,
		},
		{
			MethodName: "GetMeta",
			Handler:    _SecurityProfileDiffService_GetMeta_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSome",
			Handler:       _SecurityProfileDiffService_GetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAll",
			Handler:       _SecurityProfileDiffService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _SecurityProfileDiffService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeMeta",
			Handler:       _SecurityProfileDiffService_SubscribeMeta_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/configstatus.v1/services.gen.proto",
}

const (
	SecurityProfileDiffSummaryService_GetOne_FullMethodName        = "/arista.configstatus.v1.SecurityProfileDiffSummaryService/GetOne"
	SecurityProfileDiffSummaryService_GetSome_FullMethodName       = "/arista.configstatus.v1.SecurityProfileDiffSummaryService/GetSome"
	SecurityProfileDiffSummaryService_GetAll_FullMethodName        = "/arista.configstatus.v1.SecurityProfileDiffSummaryService/GetAll"
	SecurityProfileDiffSummaryService_Subscribe_FullMethodName     = "/arista.configstatus.v1.SecurityProfileDiffSummaryService/Subscribe"
	SecurityProfileDiffSummaryService_GetMeta_FullMethodName       = "/arista.configstatus.v1.SecurityProfileDiffSummaryService/GetMeta"
	SecurityProfileDiffSummaryService_SubscribeMeta_FullMethodName = "/arista.configstatus.v1.SecurityProfileDiffSummaryService/SubscribeMeta"
)

// SecurityProfileDiffSummaryServiceClient is the client API for SecurityProfileDiffSummaryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecurityProfileDiffSummaryServiceClient interface {
	GetOne(ctx context.Context, in *SecurityProfileDiffSummaryRequest, opts ...grpc.CallOption) (*SecurityProfileDiffSummaryResponse, error)
	GetSome(ctx context.Context, in *SecurityProfileDiffSummarySomeRequest, opts ...grpc.CallOption) (SecurityProfileDiffSummaryService_GetSomeClient, error)
	GetAll(ctx context.Context, in *SecurityProfileDiffSummaryStreamRequest, opts ...grpc.CallOption) (SecurityProfileDiffSummaryService_GetAllClient, error)
	Subscribe(ctx context.Context, in *SecurityProfileDiffSummaryStreamRequest, opts ...grpc.CallOption) (SecurityProfileDiffSummaryService_SubscribeClient, error)
	GetMeta(ctx context.Context, in *SecurityProfileDiffSummaryStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error)
	SubscribeMeta(ctx context.Context, in *SecurityProfileDiffSummaryStreamRequest, opts ...grpc.CallOption) (SecurityProfileDiffSummaryService_SubscribeMetaClient, error)
}

type securityProfileDiffSummaryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSecurityProfileDiffSummaryServiceClient(cc grpc.ClientConnInterface) SecurityProfileDiffSummaryServiceClient {
	return &securityProfileDiffSummaryServiceClient{cc}
}

func (c *securityProfileDiffSummaryServiceClient) GetOne(ctx context.Context, in *SecurityProfileDiffSummaryRequest, opts ...grpc.CallOption) (*SecurityProfileDiffSummaryResponse, error) {
	out := new(SecurityProfileDiffSummaryResponse)
	err := c.cc.Invoke(ctx, SecurityProfileDiffSummaryService_GetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityProfileDiffSummaryServiceClient) GetSome(ctx context.Context, in *SecurityProfileDiffSummarySomeRequest, opts ...grpc.CallOption) (SecurityProfileDiffSummaryService_GetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &SecurityProfileDiffSummaryService_ServiceDesc.Streams[0], SecurityProfileDiffSummaryService_GetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &securityProfileDiffSummaryServiceGetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SecurityProfileDiffSummaryService_GetSomeClient interface {
	Recv() (*SecurityProfileDiffSummarySomeResponse, error)
	grpc.ClientStream
}

type securityProfileDiffSummaryServiceGetSomeClient struct {
	grpc.ClientStream
}

func (x *securityProfileDiffSummaryServiceGetSomeClient) Recv() (*SecurityProfileDiffSummarySomeResponse, error) {
	m := new(SecurityProfileDiffSummarySomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *securityProfileDiffSummaryServiceClient) GetAll(ctx context.Context, in *SecurityProfileDiffSummaryStreamRequest, opts ...grpc.CallOption) (SecurityProfileDiffSummaryService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &SecurityProfileDiffSummaryService_ServiceDesc.Streams[1], SecurityProfileDiffSummaryService_GetAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &securityProfileDiffSummaryServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SecurityProfileDiffSummaryService_GetAllClient interface {
	Recv() (*SecurityProfileDiffSummaryStreamResponse, error)
	grpc.ClientStream
}

type securityProfileDiffSummaryServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *securityProfileDiffSummaryServiceGetAllClient) Recv() (*SecurityProfileDiffSummaryStreamResponse, error) {
	m := new(SecurityProfileDiffSummaryStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *securityProfileDiffSummaryServiceClient) Subscribe(ctx context.Context, in *SecurityProfileDiffSummaryStreamRequest, opts ...grpc.CallOption) (SecurityProfileDiffSummaryService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &SecurityProfileDiffSummaryService_ServiceDesc.Streams[2], SecurityProfileDiffSummaryService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &securityProfileDiffSummaryServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SecurityProfileDiffSummaryService_SubscribeClient interface {
	Recv() (*SecurityProfileDiffSummaryStreamResponse, error)
	grpc.ClientStream
}

type securityProfileDiffSummaryServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *securityProfileDiffSummaryServiceSubscribeClient) Recv() (*SecurityProfileDiffSummaryStreamResponse, error) {
	m := new(SecurityProfileDiffSummaryStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *securityProfileDiffSummaryServiceClient) GetMeta(ctx context.Context, in *SecurityProfileDiffSummaryStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error) {
	out := new(MetaResponse)
	err := c.cc.Invoke(ctx, SecurityProfileDiffSummaryService_GetMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityProfileDiffSummaryServiceClient) SubscribeMeta(ctx context.Context, in *SecurityProfileDiffSummaryStreamRequest, opts ...grpc.CallOption) (SecurityProfileDiffSummaryService_SubscribeMetaClient, error) {
	stream, err := c.cc.NewStream(ctx, &SecurityProfileDiffSummaryService_ServiceDesc.Streams[3], SecurityProfileDiffSummaryService_SubscribeMeta_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &securityProfileDiffSummaryServiceSubscribeMetaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SecurityProfileDiffSummaryService_SubscribeMetaClient interface {
	Recv() (*MetaResponse, error)
	grpc.ClientStream
}

type securityProfileDiffSummaryServiceSubscribeMetaClient struct {
	grpc.ClientStream
}

func (x *securityProfileDiffSummaryServiceSubscribeMetaClient) Recv() (*MetaResponse, error) {
	m := new(MetaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SecurityProfileDiffSummaryServiceServer is the server API for SecurityProfileDiffSummaryService service.
// All implementations must embed UnimplementedSecurityProfileDiffSummaryServiceServer
// for forward compatibility
type SecurityProfileDiffSummaryServiceServer interface {
	GetOne(context.Context, *SecurityProfileDiffSummaryRequest) (*SecurityProfileDiffSummaryResponse, error)
	GetSome(*SecurityProfileDiffSummarySomeRequest, SecurityProfileDiffSummaryService_GetSomeServer) error
	GetAll(*SecurityProfileDiffSummaryStreamRequest, SecurityProfileDiffSummaryService_GetAllServer) error
	Subscribe(*SecurityProfileDiffSummaryStreamRequest, SecurityProfileDiffSummaryService_SubscribeServer) error
	GetMeta(context.Context, *SecurityProfileDiffSummaryStreamRequest) (*MetaResponse, error)
	SubscribeMeta(*SecurityProfileDiffSummaryStreamRequest, SecurityProfileDiffSummaryService_SubscribeMetaServer) error
	mustEmbedUnimplementedSecurityProfileDiffSummaryServiceServer()
}

// UnimplementedSecurityProfileDiffSummaryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSecurityProfileDiffSummaryServiceServer struct {
}

func (UnimplementedSecurityProfileDiffSummaryServiceServer) GetOne(context.Context, *SecurityProfileDiffSummaryRequest) (*SecurityProfileDiffSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedSecurityProfileDiffSummaryServiceServer) GetSome(*SecurityProfileDiffSummarySomeRequest, SecurityProfileDiffSummaryService_GetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSome not implemented")
}
func (UnimplementedSecurityProfileDiffSummaryServiceServer) GetAll(*SecurityProfileDiffSummaryStreamRequest, SecurityProfileDiffSummaryService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedSecurityProfileDiffSummaryServiceServer) Subscribe(*SecurityProfileDiffSummaryStreamRequest, SecurityProfileDiffSummaryService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedSecurityProfileDiffSummaryServiceServer) GetMeta(context.Context, *SecurityProfileDiffSummaryStreamRequest) (*MetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeta not implemented")
}
func (UnimplementedSecurityProfileDiffSummaryServiceServer) SubscribeMeta(*SecurityProfileDiffSummaryStreamRequest, SecurityProfileDiffSummaryService_SubscribeMetaServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMeta not implemented")
}
func (UnimplementedSecurityProfileDiffSummaryServiceServer) mustEmbedUnimplementedSecurityProfileDiffSummaryServiceServer() {
}

// UnsafeSecurityProfileDiffSummaryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecurityProfileDiffSummaryServiceServer will
// result in compilation errors.
type UnsafeSecurityProfileDiffSummaryServiceServer interface {
	mustEmbedUnimplementedSecurityProfileDiffSummaryServiceServer()
}

func RegisterSecurityProfileDiffSummaryServiceServer(s grpc.ServiceRegistrar, srv SecurityProfileDiffSummaryServiceServer) {
	s.RegisterService(&SecurityProfileDiffSummaryService_ServiceDesc, srv)
}

func _SecurityProfileDiffSummaryService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecurityProfileDiffSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityProfileDiffSummaryServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityProfileDiffSummaryService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityProfileDiffSummaryServiceServer).GetOne(ctx, req.(*SecurityProfileDiffSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityProfileDiffSummaryService_GetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SecurityProfileDiffSummarySomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SecurityProfileDiffSummaryServiceServer).GetSome(m, &securityProfileDiffSummaryServiceGetSomeServer{stream})
}

type SecurityProfileDiffSummaryService_GetSomeServer interface {
	Send(*SecurityProfileDiffSummarySomeResponse) error
	grpc.ServerStream
}

type securityProfileDiffSummaryServiceGetSomeServer struct {
	grpc.ServerStream
}

func (x *securityProfileDiffSummaryServiceGetSomeServer) Send(m *SecurityProfileDiffSummarySomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SecurityProfileDiffSummaryService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SecurityProfileDiffSummaryStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SecurityProfileDiffSummaryServiceServer).GetAll(m, &securityProfileDiffSummaryServiceGetAllServer{stream})
}

type SecurityProfileDiffSummaryService_GetAllServer interface {
	Send(*SecurityProfileDiffSummaryStreamResponse) error
	grpc.ServerStream
}

type securityProfileDiffSummaryServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *securityProfileDiffSummaryServiceGetAllServer) Send(m *SecurityProfileDiffSummaryStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SecurityProfileDiffSummaryService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SecurityProfileDiffSummaryStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SecurityProfileDiffSummaryServiceServer).Subscribe(m, &securityProfileDiffSummaryServiceSubscribeServer{stream})
}

type SecurityProfileDiffSummaryService_SubscribeServer interface {
	Send(*SecurityProfileDiffSummaryStreamResponse) error
	grpc.ServerStream
}

type securityProfileDiffSummaryServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *securityProfileDiffSummaryServiceSubscribeServer) Send(m *SecurityProfileDiffSummaryStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SecurityProfileDiffSummaryService_GetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecurityProfileDiffSummaryStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityProfileDiffSummaryServiceServer).GetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityProfileDiffSummaryService_GetMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityProfileDiffSummaryServiceServer).GetMeta(ctx, req.(*SecurityProfileDiffSummaryStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityProfileDiffSummaryService_SubscribeMeta_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SecurityProfileDiffSummaryStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SecurityProfileDiffSummaryServiceServer).SubscribeMeta(m, &securityProfileDiffSummaryServiceSubscribeMetaServer{stream})
}

type SecurityProfileDiffSummaryService_SubscribeMetaServer interface {
	Send(*MetaResponse) error
	grpc.ServerStream
}

type securityProfileDiffSummaryServiceSubscribeMetaServer struct {
	grpc.ServerStream
}

func (x *securityProfileDiffSummaryServiceSubscribeMetaServer) Send(m *MetaResponse) error {
	return x.ServerStream.SendMsg(m)
}

// SecurityProfileDiffSummaryService_ServiceDesc is the grpc.ServiceDesc for SecurityProfileDiffSummaryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecurityProfileDiffSummaryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.configstatus.v1.SecurityProfileDiffSummaryService",
	HandlerType: (*SecurityProfileDiffSummaryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _SecurityProfileDiffSummaryService_GetOne_Handler,
		},
		{
			MethodName: "GetMeta",
			Handler:    _SecurityProfileDiffSummaryService_GetMeta_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSome",
			Handler:       _SecurityProfileDiffSummaryService_GetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAll",
			Handler:       _SecurityProfileDiffSummaryService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _SecurityProfileDiffSummaryService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeMeta",
			Handler:       _SecurityProfileDiffSummaryService_SubscribeMeta_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/configstatus.v1/services.gen.proto",
}

const (
	SummaryService_GetOne_FullMethodName        = "/arista.configstatus.v1.SummaryService/GetOne"
	SummaryService_GetSome_FullMethodName       = "/arista.configstatus.v1.SummaryService/GetSome"
	SummaryService_GetAll_FullMethodName        = "/arista.configstatus.v1.SummaryService/GetAll"
	SummaryService_Subscribe_FullMethodName     = "/arista.configstatus.v1.SummaryService/Subscribe"
	SummaryService_GetMeta_FullMethodName       = "/arista.configstatus.v1.SummaryService/GetMeta"
	SummaryService_SubscribeMeta_FullMethodName = "/arista.configstatus.v1.SummaryService/SubscribeMeta"
)

// SummaryServiceClient is the client API for SummaryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SummaryServiceClient interface {
	GetOne(ctx context.Context, in *SummaryRequest, opts ...grpc.CallOption) (*SummaryResponse, error)
	GetSome(ctx context.Context, in *SummarySomeRequest, opts ...grpc.CallOption) (SummaryService_GetSomeClient, error)
	GetAll(ctx context.Context, in *SummaryStreamRequest, opts ...grpc.CallOption) (SummaryService_GetAllClient, error)
	Subscribe(ctx context.Context, in *SummaryStreamRequest, opts ...grpc.CallOption) (SummaryService_SubscribeClient, error)
	GetMeta(ctx context.Context, in *SummaryStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error)
	SubscribeMeta(ctx context.Context, in *SummaryStreamRequest, opts ...grpc.CallOption) (SummaryService_SubscribeMetaClient, error)
}

type summaryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSummaryServiceClient(cc grpc.ClientConnInterface) SummaryServiceClient {
	return &summaryServiceClient{cc}
}

func (c *summaryServiceClient) GetOne(ctx context.Context, in *SummaryRequest, opts ...grpc.CallOption) (*SummaryResponse, error) {
	out := new(SummaryResponse)
	err := c.cc.Invoke(ctx, SummaryService_GetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summaryServiceClient) GetSome(ctx context.Context, in *SummarySomeRequest, opts ...grpc.CallOption) (SummaryService_GetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &SummaryService_ServiceDesc.Streams[0], SummaryService_GetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &summaryServiceGetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SummaryService_GetSomeClient interface {
	Recv() (*SummarySomeResponse, error)
	grpc.ClientStream
}

type summaryServiceGetSomeClient struct {
	grpc.ClientStream
}

func (x *summaryServiceGetSomeClient) Recv() (*SummarySomeResponse, error) {
	m := new(SummarySomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *summaryServiceClient) GetAll(ctx context.Context, in *SummaryStreamRequest, opts ...grpc.CallOption) (SummaryService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &SummaryService_ServiceDesc.Streams[1], SummaryService_GetAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &summaryServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SummaryService_GetAllClient interface {
	Recv() (*SummaryStreamResponse, error)
	grpc.ClientStream
}

type summaryServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *summaryServiceGetAllClient) Recv() (*SummaryStreamResponse, error) {
	m := new(SummaryStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *summaryServiceClient) Subscribe(ctx context.Context, in *SummaryStreamRequest, opts ...grpc.CallOption) (SummaryService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &SummaryService_ServiceDesc.Streams[2], SummaryService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &summaryServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SummaryService_SubscribeClient interface {
	Recv() (*SummaryStreamResponse, error)
	grpc.ClientStream
}

type summaryServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *summaryServiceSubscribeClient) Recv() (*SummaryStreamResponse, error) {
	m := new(SummaryStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *summaryServiceClient) GetMeta(ctx context.Context, in *SummaryStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error) {
	out := new(MetaResponse)
	err := c.cc.Invoke(ctx, SummaryService_GetMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summaryServiceClient) SubscribeMeta(ctx context.Context, in *SummaryStreamRequest, opts ...grpc.CallOption) (SummaryService_SubscribeMetaClient, error) {
	stream, err := c.cc.NewStream(ctx, &SummaryService_ServiceDesc.Streams[3], SummaryService_SubscribeMeta_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &summaryServiceSubscribeMetaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SummaryService_SubscribeMetaClient interface {
	Recv() (*MetaResponse, error)
	grpc.ClientStream
}

type summaryServiceSubscribeMetaClient struct {
	grpc.ClientStream
}

func (x *summaryServiceSubscribeMetaClient) Recv() (*MetaResponse, error) {
	m := new(MetaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SummaryServiceServer is the server API for SummaryService service.
// All implementations must embed UnimplementedSummaryServiceServer
// for forward compatibility
type SummaryServiceServer interface {
	GetOne(context.Context, *SummaryRequest) (*SummaryResponse, error)
	GetSome(*SummarySomeRequest, SummaryService_GetSomeServer) error
	GetAll(*SummaryStreamRequest, SummaryService_GetAllServer) error
	Subscribe(*SummaryStreamRequest, SummaryService_SubscribeServer) error
	GetMeta(context.Context, *SummaryStreamRequest) (*MetaResponse, error)
	SubscribeMeta(*SummaryStreamRequest, SummaryService_SubscribeMetaServer) error
	mustEmbedUnimplementedSummaryServiceServer()
}

// UnimplementedSummaryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSummaryServiceServer struct {
}

func (UnimplementedSummaryServiceServer) GetOne(context.Context, *SummaryRequest) (*SummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedSummaryServiceServer) GetSome(*SummarySomeRequest, SummaryService_GetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSome not implemented")
}
func (UnimplementedSummaryServiceServer) GetAll(*SummaryStreamRequest, SummaryService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedSummaryServiceServer) Subscribe(*SummaryStreamRequest, SummaryService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedSummaryServiceServer) GetMeta(context.Context, *SummaryStreamRequest) (*MetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeta not implemented")
}
func (UnimplementedSummaryServiceServer) SubscribeMeta(*SummaryStreamRequest, SummaryService_SubscribeMetaServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMeta not implemented")
}
func (UnimplementedSummaryServiceServer) mustEmbedUnimplementedSummaryServiceServer() {}

// UnsafeSummaryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SummaryServiceServer will
// result in compilation errors.
type UnsafeSummaryServiceServer interface {
	mustEmbedUnimplementedSummaryServiceServer()
}

func RegisterSummaryServiceServer(s grpc.ServiceRegistrar, srv SummaryServiceServer) {
	s.RegisterService(&SummaryService_ServiceDesc, srv)
}

func _SummaryService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummaryServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SummaryService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummaryServiceServer).GetOne(ctx, req.(*SummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummaryService_GetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SummarySomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SummaryServiceServer).GetSome(m, &summaryServiceGetSomeServer{stream})
}

type SummaryService_GetSomeServer interface {
	Send(*SummarySomeResponse) error
	grpc.ServerStream
}

type summaryServiceGetSomeServer struct {
	grpc.ServerStream
}

func (x *summaryServiceGetSomeServer) Send(m *SummarySomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SummaryService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SummaryStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SummaryServiceServer).GetAll(m, &summaryServiceGetAllServer{stream})
}

type SummaryService_GetAllServer interface {
	Send(*SummaryStreamResponse) error
	grpc.ServerStream
}

type summaryServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *summaryServiceGetAllServer) Send(m *SummaryStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SummaryService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SummaryStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SummaryServiceServer).Subscribe(m, &summaryServiceSubscribeServer{stream})
}

type SummaryService_SubscribeServer interface {
	Send(*SummaryStreamResponse) error
	grpc.ServerStream
}

type summaryServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *summaryServiceSubscribeServer) Send(m *SummaryStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SummaryService_GetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SummaryStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummaryServiceServer).GetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SummaryService_GetMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummaryServiceServer).GetMeta(ctx, req.(*SummaryStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummaryService_SubscribeMeta_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SummaryStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SummaryServiceServer).SubscribeMeta(m, &summaryServiceSubscribeMetaServer{stream})
}

type SummaryService_SubscribeMetaServer interface {
	Send(*MetaResponse) error
	grpc.ServerStream
}

type summaryServiceSubscribeMetaServer struct {
	grpc.ServerStream
}

func (x *summaryServiceSubscribeMetaServer) Send(m *MetaResponse) error {
	return x.ServerStream.SendMsg(m)
}

// SummaryService_ServiceDesc is the grpc.ServiceDesc for SummaryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SummaryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.configstatus.v1.SummaryService",
	HandlerType: (*SummaryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _SummaryService_GetOne_Handler,
		},
		{
			MethodName: "GetMeta",
			Handler:    _SummaryService_GetMeta_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSome",
			Handler:       _SummaryService_GetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAll",
			Handler:       _SummaryService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _SummaryService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeMeta",
			Handler:       _SummaryService_SubscribeMeta_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/configstatus.v1/services.gen.proto",
}
