// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package event

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EventServiceClient is the client API for EventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventServiceClient interface {
	GetOne(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error)
	GetAll(ctx context.Context, in *EventStreamRequest, opts ...grpc.CallOption) (EventService_GetAllClient, error)
	Subscribe(ctx context.Context, in *EventStreamRequest, opts ...grpc.CallOption) (EventService_SubscribeClient, error)
}

type eventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventServiceClient(cc grpc.ClientConnInterface) EventServiceClient {
	return &eventServiceClient{cc}
}

func (c *eventServiceClient) GetOne(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/arista.event.v1.EventService/GetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) GetAll(ctx context.Context, in *EventStreamRequest, opts ...grpc.CallOption) (EventService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventService_ServiceDesc.Streams[0], "/arista.event.v1.EventService/GetAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventService_GetAllClient interface {
	Recv() (*EventStreamResponse, error)
	grpc.ClientStream
}

type eventServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *eventServiceGetAllClient) Recv() (*EventStreamResponse, error) {
	m := new(EventStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventServiceClient) Subscribe(ctx context.Context, in *EventStreamRequest, opts ...grpc.CallOption) (EventService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventService_ServiceDesc.Streams[1], "/arista.event.v1.EventService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventService_SubscribeClient interface {
	Recv() (*EventStreamResponse, error)
	grpc.ClientStream
}

type eventServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *eventServiceSubscribeClient) Recv() (*EventStreamResponse, error) {
	m := new(EventStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventServiceServer is the server API for EventService service.
// All implementations must embed UnimplementedEventServiceServer
// for forward compatibility
type EventServiceServer interface {
	GetOne(context.Context, *EventRequest) (*EventResponse, error)
	GetAll(*EventStreamRequest, EventService_GetAllServer) error
	Subscribe(*EventStreamRequest, EventService_SubscribeServer) error
	mustEmbedUnimplementedEventServiceServer()
}

// UnimplementedEventServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEventServiceServer struct {
}

func (UnimplementedEventServiceServer) GetOne(context.Context, *EventRequest) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedEventServiceServer) GetAll(*EventStreamRequest, EventService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedEventServiceServer) Subscribe(*EventStreamRequest, EventService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedEventServiceServer) mustEmbedUnimplementedEventServiceServer() {}

// UnsafeEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventServiceServer will
// result in compilation errors.
type UnsafeEventServiceServer interface {
	mustEmbedUnimplementedEventServiceServer()
}

func RegisterEventServiceServer(s grpc.ServiceRegistrar, srv EventServiceServer) {
	s.RegisterService(&EventService_ServiceDesc, srv)
}

func _EventService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arista.event.v1.EventService/GetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).GetOne(ctx, req.(*EventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventServiceServer).GetAll(m, &eventServiceGetAllServer{stream})
}

type EventService_GetAllServer interface {
	Send(*EventStreamResponse) error
	grpc.ServerStream
}

type eventServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *eventServiceGetAllServer) Send(m *EventStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EventService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventServiceServer).Subscribe(m, &eventServiceSubscribeServer{stream})
}

type EventService_SubscribeServer interface {
	Send(*EventStreamResponse) error
	grpc.ServerStream
}

type eventServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *eventServiceSubscribeServer) Send(m *EventStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// EventService_ServiceDesc is the grpc.ServiceDesc for EventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.event.v1.EventService",
	HandlerType: (*EventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _EventService_GetOne_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAll",
			Handler:       _EventService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _EventService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/event.v1/services.gen.proto",
}

// EventAnnotationConfigServiceClient is the client API for EventAnnotationConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventAnnotationConfigServiceClient interface {
	GetOne(ctx context.Context, in *EventAnnotationConfigRequest, opts ...grpc.CallOption) (*EventAnnotationConfigResponse, error)
	GetAll(ctx context.Context, in *EventAnnotationConfigStreamRequest, opts ...grpc.CallOption) (EventAnnotationConfigService_GetAllClient, error)
	Subscribe(ctx context.Context, in *EventAnnotationConfigStreamRequest, opts ...grpc.CallOption) (EventAnnotationConfigService_SubscribeClient, error)
	Set(ctx context.Context, in *EventAnnotationConfigSetRequest, opts ...grpc.CallOption) (*EventAnnotationConfigSetResponse, error)
	SetSome(ctx context.Context, in *EventAnnotationConfigSetSomeRequest, opts ...grpc.CallOption) (EventAnnotationConfigService_SetSomeClient, error)
	Delete(ctx context.Context, in *EventAnnotationConfigDeleteRequest, opts ...grpc.CallOption) (*EventAnnotationConfigDeleteResponse, error)
	DeleteAll(ctx context.Context, in *EventAnnotationConfigDeleteAllRequest, opts ...grpc.CallOption) (EventAnnotationConfigService_DeleteAllClient, error)
}

type eventAnnotationConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventAnnotationConfigServiceClient(cc grpc.ClientConnInterface) EventAnnotationConfigServiceClient {
	return &eventAnnotationConfigServiceClient{cc}
}

func (c *eventAnnotationConfigServiceClient) GetOne(ctx context.Context, in *EventAnnotationConfigRequest, opts ...grpc.CallOption) (*EventAnnotationConfigResponse, error) {
	out := new(EventAnnotationConfigResponse)
	err := c.cc.Invoke(ctx, "/arista.event.v1.EventAnnotationConfigService/GetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventAnnotationConfigServiceClient) GetAll(ctx context.Context, in *EventAnnotationConfigStreamRequest, opts ...grpc.CallOption) (EventAnnotationConfigService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventAnnotationConfigService_ServiceDesc.Streams[0], "/arista.event.v1.EventAnnotationConfigService/GetAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventAnnotationConfigServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventAnnotationConfigService_GetAllClient interface {
	Recv() (*EventAnnotationConfigStreamResponse, error)
	grpc.ClientStream
}

type eventAnnotationConfigServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *eventAnnotationConfigServiceGetAllClient) Recv() (*EventAnnotationConfigStreamResponse, error) {
	m := new(EventAnnotationConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventAnnotationConfigServiceClient) Subscribe(ctx context.Context, in *EventAnnotationConfigStreamRequest, opts ...grpc.CallOption) (EventAnnotationConfigService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventAnnotationConfigService_ServiceDesc.Streams[1], "/arista.event.v1.EventAnnotationConfigService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventAnnotationConfigServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventAnnotationConfigService_SubscribeClient interface {
	Recv() (*EventAnnotationConfigStreamResponse, error)
	grpc.ClientStream
}

type eventAnnotationConfigServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *eventAnnotationConfigServiceSubscribeClient) Recv() (*EventAnnotationConfigStreamResponse, error) {
	m := new(EventAnnotationConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventAnnotationConfigServiceClient) Set(ctx context.Context, in *EventAnnotationConfigSetRequest, opts ...grpc.CallOption) (*EventAnnotationConfigSetResponse, error) {
	out := new(EventAnnotationConfigSetResponse)
	err := c.cc.Invoke(ctx, "/arista.event.v1.EventAnnotationConfigService/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventAnnotationConfigServiceClient) SetSome(ctx context.Context, in *EventAnnotationConfigSetSomeRequest, opts ...grpc.CallOption) (EventAnnotationConfigService_SetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventAnnotationConfigService_ServiceDesc.Streams[2], "/arista.event.v1.EventAnnotationConfigService/SetSome", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventAnnotationConfigServiceSetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventAnnotationConfigService_SetSomeClient interface {
	Recv() (*EventAnnotationConfigSetSomeResponse, error)
	grpc.ClientStream
}

type eventAnnotationConfigServiceSetSomeClient struct {
	grpc.ClientStream
}

func (x *eventAnnotationConfigServiceSetSomeClient) Recv() (*EventAnnotationConfigSetSomeResponse, error) {
	m := new(EventAnnotationConfigSetSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventAnnotationConfigServiceClient) Delete(ctx context.Context, in *EventAnnotationConfigDeleteRequest, opts ...grpc.CallOption) (*EventAnnotationConfigDeleteResponse, error) {
	out := new(EventAnnotationConfigDeleteResponse)
	err := c.cc.Invoke(ctx, "/arista.event.v1.EventAnnotationConfigService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventAnnotationConfigServiceClient) DeleteAll(ctx context.Context, in *EventAnnotationConfigDeleteAllRequest, opts ...grpc.CallOption) (EventAnnotationConfigService_DeleteAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventAnnotationConfigService_ServiceDesc.Streams[3], "/arista.event.v1.EventAnnotationConfigService/DeleteAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventAnnotationConfigServiceDeleteAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventAnnotationConfigService_DeleteAllClient interface {
	Recv() (*EventAnnotationConfigDeleteAllResponse, error)
	grpc.ClientStream
}

type eventAnnotationConfigServiceDeleteAllClient struct {
	grpc.ClientStream
}

func (x *eventAnnotationConfigServiceDeleteAllClient) Recv() (*EventAnnotationConfigDeleteAllResponse, error) {
	m := new(EventAnnotationConfigDeleteAllResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventAnnotationConfigServiceServer is the server API for EventAnnotationConfigService service.
// All implementations must embed UnimplementedEventAnnotationConfigServiceServer
// for forward compatibility
type EventAnnotationConfigServiceServer interface {
	GetOne(context.Context, *EventAnnotationConfigRequest) (*EventAnnotationConfigResponse, error)
	GetAll(*EventAnnotationConfigStreamRequest, EventAnnotationConfigService_GetAllServer) error
	Subscribe(*EventAnnotationConfigStreamRequest, EventAnnotationConfigService_SubscribeServer) error
	Set(context.Context, *EventAnnotationConfigSetRequest) (*EventAnnotationConfigSetResponse, error)
	SetSome(*EventAnnotationConfigSetSomeRequest, EventAnnotationConfigService_SetSomeServer) error
	Delete(context.Context, *EventAnnotationConfigDeleteRequest) (*EventAnnotationConfigDeleteResponse, error)
	DeleteAll(*EventAnnotationConfigDeleteAllRequest, EventAnnotationConfigService_DeleteAllServer) error
	mustEmbedUnimplementedEventAnnotationConfigServiceServer()
}

// UnimplementedEventAnnotationConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEventAnnotationConfigServiceServer struct {
}

func (UnimplementedEventAnnotationConfigServiceServer) GetOne(context.Context, *EventAnnotationConfigRequest) (*EventAnnotationConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedEventAnnotationConfigServiceServer) GetAll(*EventAnnotationConfigStreamRequest, EventAnnotationConfigService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedEventAnnotationConfigServiceServer) Subscribe(*EventAnnotationConfigStreamRequest, EventAnnotationConfigService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedEventAnnotationConfigServiceServer) Set(context.Context, *EventAnnotationConfigSetRequest) (*EventAnnotationConfigSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedEventAnnotationConfigServiceServer) SetSome(*EventAnnotationConfigSetSomeRequest, EventAnnotationConfigService_SetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method SetSome not implemented")
}
func (UnimplementedEventAnnotationConfigServiceServer) Delete(context.Context, *EventAnnotationConfigDeleteRequest) (*EventAnnotationConfigDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedEventAnnotationConfigServiceServer) DeleteAll(*EventAnnotationConfigDeleteAllRequest, EventAnnotationConfigService_DeleteAllServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteAll not implemented")
}
func (UnimplementedEventAnnotationConfigServiceServer) mustEmbedUnimplementedEventAnnotationConfigServiceServer() {
}

// UnsafeEventAnnotationConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventAnnotationConfigServiceServer will
// result in compilation errors.
type UnsafeEventAnnotationConfigServiceServer interface {
	mustEmbedUnimplementedEventAnnotationConfigServiceServer()
}

func RegisterEventAnnotationConfigServiceServer(s grpc.ServiceRegistrar, srv EventAnnotationConfigServiceServer) {
	s.RegisterService(&EventAnnotationConfigService_ServiceDesc, srv)
}

func _EventAnnotationConfigService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventAnnotationConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventAnnotationConfigServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arista.event.v1.EventAnnotationConfigService/GetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventAnnotationConfigServiceServer).GetOne(ctx, req.(*EventAnnotationConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventAnnotationConfigService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventAnnotationConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventAnnotationConfigServiceServer).GetAll(m, &eventAnnotationConfigServiceGetAllServer{stream})
}

type EventAnnotationConfigService_GetAllServer interface {
	Send(*EventAnnotationConfigStreamResponse) error
	grpc.ServerStream
}

type eventAnnotationConfigServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *eventAnnotationConfigServiceGetAllServer) Send(m *EventAnnotationConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EventAnnotationConfigService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventAnnotationConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventAnnotationConfigServiceServer).Subscribe(m, &eventAnnotationConfigServiceSubscribeServer{stream})
}

type EventAnnotationConfigService_SubscribeServer interface {
	Send(*EventAnnotationConfigStreamResponse) error
	grpc.ServerStream
}

type eventAnnotationConfigServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *eventAnnotationConfigServiceSubscribeServer) Send(m *EventAnnotationConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EventAnnotationConfigService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventAnnotationConfigSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventAnnotationConfigServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arista.event.v1.EventAnnotationConfigService/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventAnnotationConfigServiceServer).Set(ctx, req.(*EventAnnotationConfigSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventAnnotationConfigService_SetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventAnnotationConfigSetSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventAnnotationConfigServiceServer).SetSome(m, &eventAnnotationConfigServiceSetSomeServer{stream})
}

type EventAnnotationConfigService_SetSomeServer interface {
	Send(*EventAnnotationConfigSetSomeResponse) error
	grpc.ServerStream
}

type eventAnnotationConfigServiceSetSomeServer struct {
	grpc.ServerStream
}

func (x *eventAnnotationConfigServiceSetSomeServer) Send(m *EventAnnotationConfigSetSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EventAnnotationConfigService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventAnnotationConfigDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventAnnotationConfigServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arista.event.v1.EventAnnotationConfigService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventAnnotationConfigServiceServer).Delete(ctx, req.(*EventAnnotationConfigDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventAnnotationConfigService_DeleteAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventAnnotationConfigDeleteAllRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventAnnotationConfigServiceServer).DeleteAll(m, &eventAnnotationConfigServiceDeleteAllServer{stream})
}

type EventAnnotationConfigService_DeleteAllServer interface {
	Send(*EventAnnotationConfigDeleteAllResponse) error
	grpc.ServerStream
}

type eventAnnotationConfigServiceDeleteAllServer struct {
	grpc.ServerStream
}

func (x *eventAnnotationConfigServiceDeleteAllServer) Send(m *EventAnnotationConfigDeleteAllResponse) error {
	return x.ServerStream.SendMsg(m)
}

// EventAnnotationConfigService_ServiceDesc is the grpc.ServiceDesc for EventAnnotationConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventAnnotationConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.event.v1.EventAnnotationConfigService",
	HandlerType: (*EventAnnotationConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _EventAnnotationConfigService_GetOne_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _EventAnnotationConfigService_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _EventAnnotationConfigService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAll",
			Handler:       _EventAnnotationConfigService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _EventAnnotationConfigService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SetSome",
			Handler:       _EventAnnotationConfigService_SetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteAll",
			Handler:       _EventAnnotationConfigService_DeleteAll_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/event.v1/services.gen.proto",
}
