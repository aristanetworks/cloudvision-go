// Copyright (c) 2023 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.7
// source: arista/event.v1/event.proto

package event

import (
	_ "github.com/aristanetworks/cloudvision-go/api/fmp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// EventSeverity is the severity level of the event
type EventSeverity int32

const (
	// EVENT_SEVERITY_UNSPECIFIED is the default value, if the severity is not specified.
	EventSeverity_EVENT_SEVERITY_UNSPECIFIED EventSeverity = 0
	// EVENT_SEVERITY_INFO is used for generally useful information.
	EventSeverity_EVENT_SEVERITY_INFO EventSeverity = 1
	// EVENT_SEVERITY_WARNING is used for potentially harmful conditions.
	EventSeverity_EVENT_SEVERITY_WARNING EventSeverity = 2
	// EVENT_SEVERITY_ERROR is used for errors events that may allow for continued functioning.
	EventSeverity_EVENT_SEVERITY_ERROR EventSeverity = 3
	// EVENT_SEVERITY_CRITICAL is used to designate severe errors that impede functioning.
	EventSeverity_EVENT_SEVERITY_CRITICAL EventSeverity = 4
	// EVENT_SEVERITY_DEBUG is used for debugging useful information.
	EventSeverity_EVENT_SEVERITY_DEBUG EventSeverity = 5
)

// Enum value maps for EventSeverity.
var (
	EventSeverity_name = map[int32]string{
		0: "EVENT_SEVERITY_UNSPECIFIED",
		1: "EVENT_SEVERITY_INFO",
		2: "EVENT_SEVERITY_WARNING",
		3: "EVENT_SEVERITY_ERROR",
		4: "EVENT_SEVERITY_CRITICAL",
		5: "EVENT_SEVERITY_DEBUG",
	}
	EventSeverity_value = map[string]int32{
		"EVENT_SEVERITY_UNSPECIFIED": 0,
		"EVENT_SEVERITY_INFO":        1,
		"EVENT_SEVERITY_WARNING":     2,
		"EVENT_SEVERITY_ERROR":       3,
		"EVENT_SEVERITY_CRITICAL":    4,
		"EVENT_SEVERITY_DEBUG":       5,
	}
)

func (x EventSeverity) Enum() *EventSeverity {
	p := new(EventSeverity)
	*p = x
	return p
}

func (x EventSeverity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventSeverity) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_event_v1_event_proto_enumTypes[0].Descriptor()
}

func (EventSeverity) Type() protoreflect.EnumType {
	return &file_arista_event_v1_event_proto_enumTypes[0]
}

func (x EventSeverity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventSeverity.Descriptor instead.
func (EventSeverity) EnumDescriptor() ([]byte, []int) {
	return file_arista_event_v1_event_proto_rawDescGZIP(), []int{0}
}

// ComponentType describes the type of entity on which the event occurred
type ComponentType int32

const (
	// COMPONENT_TYPE_UNSPECIFIED is the default value, if the type is not specified.
	ComponentType_COMPONENT_TYPE_UNSPECIFIED ComponentType = 0
	// COMPONENT_TYPE_DEVICE is used for device events.
	ComponentType_COMPONENT_TYPE_DEVICE ComponentType = 1
	// COMPONENT_TYPE_INTERFACE is used for device interface events.
	ComponentType_COMPONENT_TYPE_INTERFACE ComponentType = 2
	// COMPONENT_TYPE_TURBINE is used for events on the internal CVP turbine
	// components. A turbine is an internal CV streaming analytics backend process.
	ComponentType_COMPONENT_TYPE_TURBINE ComponentType = 3
	// COMPONENT_TYPE_VDS is used for VDS events.
	// A vSphere Distributed Switch provides centralized management and
	// monitoring of the networking configuration of all workload servers that are
	// associated with the switch.
	ComponentType_COMPONENT_TYPE_VDS ComponentType = 4
	// COMPONENT_TYPE_VDS_INTERFACE is used for VDS interface events.
	ComponentType_COMPONENT_TYPE_VDS_INTERFACE ComponentType = 5
	// COMPONENT_TYPE_VM is used for VM events.
	// A VM is a software computer that, like a physical computer, runs an
	// operating system and applications.
	ComponentType_COMPONENT_TYPE_VM ComponentType = 6
	// COMPONENT_TYPE_VM_INTERFACE is used for VM interface events.
	ComponentType_COMPONENT_TYPE_VM_INTERFACE ComponentType = 7
	// COMPONENT_TYPE_WORKLOAD_SERVER is used for workload server events.
	// A workload server is a server/data storage device on which the hypervisor is installed.
	ComponentType_COMPONENT_TYPE_WORKLOAD_SERVER ComponentType = 8
	// COMPONENT_TYPE_WORKLOAD_SERVER_INTERFACE is used for workload server interface events.
	ComponentType_COMPONENT_TYPE_WORKLOAD_SERVER_INTERFACE ComponentType = 9
	// COMPONENT_TYPE_APPLICATION is used for application-service events.
	ComponentType_COMPONENT_TYPE_APPLICATION ComponentType = 10
	// COMPONENT_TYPE_CVP_NODE is used for CVP node events.
	ComponentType_COMPONENT_TYPE_CVP_NODE ComponentType = 11
)

// Enum value maps for ComponentType.
var (
	ComponentType_name = map[int32]string{
		0:  "COMPONENT_TYPE_UNSPECIFIED",
		1:  "COMPONENT_TYPE_DEVICE",
		2:  "COMPONENT_TYPE_INTERFACE",
		3:  "COMPONENT_TYPE_TURBINE",
		4:  "COMPONENT_TYPE_VDS",
		5:  "COMPONENT_TYPE_VDS_INTERFACE",
		6:  "COMPONENT_TYPE_VM",
		7:  "COMPONENT_TYPE_VM_INTERFACE",
		8:  "COMPONENT_TYPE_WORKLOAD_SERVER",
		9:  "COMPONENT_TYPE_WORKLOAD_SERVER_INTERFACE",
		10: "COMPONENT_TYPE_APPLICATION",
		11: "COMPONENT_TYPE_CVP_NODE",
	}
	ComponentType_value = map[string]int32{
		"COMPONENT_TYPE_UNSPECIFIED":               0,
		"COMPONENT_TYPE_DEVICE":                    1,
		"COMPONENT_TYPE_INTERFACE":                 2,
		"COMPONENT_TYPE_TURBINE":                   3,
		"COMPONENT_TYPE_VDS":                       4,
		"COMPONENT_TYPE_VDS_INTERFACE":             5,
		"COMPONENT_TYPE_VM":                        6,
		"COMPONENT_TYPE_VM_INTERFACE":              7,
		"COMPONENT_TYPE_WORKLOAD_SERVER":           8,
		"COMPONENT_TYPE_WORKLOAD_SERVER_INTERFACE": 9,
		"COMPONENT_TYPE_APPLICATION":               10,
		"COMPONENT_TYPE_CVP_NODE":                  11,
	}
)

func (x ComponentType) Enum() *ComponentType {
	p := new(ComponentType)
	*p = x
	return p
}

func (x ComponentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComponentType) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_event_v1_event_proto_enumTypes[1].Descriptor()
}

func (ComponentType) Type() protoreflect.EnumType {
	return &file_arista_event_v1_event_proto_enumTypes[1]
}

func (x ComponentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComponentType.Descriptor instead.
func (ComponentType) EnumDescriptor() ([]byte, []int) {
	return file_arista_event_v1_event_proto_rawDescGZIP(), []int{1}
}

// EventComponent describes an entity on which the event occurred
type EventComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type is the type of component
	Type ComponentType `protobuf:"varint,1,opt,name=type,proto3,enum=arista.event.v1.ComponentType" json:"type,omitempty"`
	// components identifies the entity on which the event occurred
	Components map[string]string `protobuf:"bytes,2,rep,name=components,proto3" json:"components,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EventComponent) Reset() {
	*x = EventComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_event_v1_event_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventComponent) ProtoMessage() {}

func (x *EventComponent) ProtoReflect() protoreflect.Message {
	mi := &file_arista_event_v1_event_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventComponent.ProtoReflect.Descriptor instead.
func (*EventComponent) Descriptor() ([]byte, []int) {
	return file_arista_event_v1_event_proto_rawDescGZIP(), []int{0}
}

func (x *EventComponent) GetType() ComponentType {
	if x != nil {
		return x.Type
	}
	return ComponentType_COMPONENT_TYPE_UNSPECIFIED
}

func (x *EventComponent) GetComponents() map[string]string {
	if x != nil {
		return x.Components
	}
	return nil
}

// EventComponents contains entities on which an event occurred
type EventComponents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// components describes the components on which an event occurred
	Components []*EventComponent `protobuf:"bytes,1,rep,name=components,proto3" json:"components,omitempty"`
}

func (x *EventComponents) Reset() {
	*x = EventComponents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_event_v1_event_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventComponents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventComponents) ProtoMessage() {}

func (x *EventComponents) ProtoReflect() protoreflect.Message {
	mi := &file_arista_event_v1_event_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventComponents.ProtoReflect.Descriptor instead.
func (*EventComponents) Descriptor() ([]byte, []int) {
	return file_arista_event_v1_event_proto_rawDescGZIP(), []int{1}
}

func (x *EventComponents) GetComponents() []*EventComponent {
	if x != nil {
		return x.Components
	}
	return nil
}

// EventAck contains acknowledgement information of an event
type EventAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ack is the acknowledgement state of an event
	Ack *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=ack,proto3" json:"ack,omitempty"`
	// acker is the user that acknowledged the event
	Acker *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=acker,proto3" json:"acker,omitempty"`
	// ack_time is the time of acknowledgement
	AckTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=ack_time,json=ackTime,proto3" json:"ack_time,omitempty"`
}

func (x *EventAck) Reset() {
	*x = EventAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_event_v1_event_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventAck) ProtoMessage() {}

func (x *EventAck) ProtoReflect() protoreflect.Message {
	mi := &file_arista_event_v1_event_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventAck.ProtoReflect.Descriptor instead.
func (*EventAck) Descriptor() ([]byte, []int) {
	return file_arista_event_v1_event_proto_rawDescGZIP(), []int{2}
}

func (x *EventAck) GetAck() *wrapperspb.BoolValue {
	if x != nil {
		return x.Ack
	}
	return nil
}

func (x *EventAck) GetAcker() *wrapperspb.StringValue {
	if x != nil {
		return x.Acker
	}
	return nil
}

func (x *EventAck) GetAckTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AckTime
	}
	return nil
}

// EventRead contains read information of an event
type EventRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// read is the read state of an event
	Read *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=read,proto3" json:"read,omitempty"`
	// reader is the user that read the event
	Reader *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=reader,proto3" json:"reader,omitempty"`
	// read_time is the time of read
	ReadTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=read_time,json=readTime,proto3" json:"read_time,omitempty"`
}

func (x *EventRead) Reset() {
	*x = EventRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_event_v1_event_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRead) ProtoMessage() {}

func (x *EventRead) ProtoReflect() protoreflect.Message {
	mi := &file_arista_event_v1_event_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRead.ProtoReflect.Descriptor instead.
func (*EventRead) Descriptor() ([]byte, []int) {
	return file_arista_event_v1_event_proto_rawDescGZIP(), []int{3}
}

func (x *EventRead) GetRead() *wrapperspb.BoolValue {
	if x != nil {
		return x.Read
	}
	return nil
}

func (x *EventRead) GetReader() *wrapperspb.StringValue {
	if x != nil {
		return x.Reader
	}
	return nil
}

func (x *EventRead) GetReadTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ReadTime
	}
	return nil
}

// EventNoteConfig configures a note
//
// NOTE: note is required when used as an argument
//       to Set.
type EventNoteConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// note is the text of the note
	Note *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *EventNoteConfig) Reset() {
	*x = EventNoteConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_event_v1_event_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventNoteConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventNoteConfig) ProtoMessage() {}

func (x *EventNoteConfig) ProtoReflect() protoreflect.Message {
	mi := &file_arista_event_v1_event_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventNoteConfig.ProtoReflect.Descriptor instead.
func (*EventNoteConfig) Descriptor() ([]byte, []int) {
	return file_arista_event_v1_event_proto_rawDescGZIP(), []int{4}
}

func (x *EventNoteConfig) GetNote() *wrapperspb.StringValue {
	if x != nil {
		return x.Note
	}
	return nil
}

// EventNote is the state of a note
type EventNote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// note is the text of the note
	Note *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=note,proto3" json:"note,omitempty"`
	// note_creator is the creator of the note
	NoteCreator *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=note_creator,json=noteCreator,proto3" json:"note_creator,omitempty"`
}

func (x *EventNote) Reset() {
	*x = EventNote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_event_v1_event_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventNote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventNote) ProtoMessage() {}

func (x *EventNote) ProtoReflect() protoreflect.Message {
	mi := &file_arista_event_v1_event_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventNote.ProtoReflect.Descriptor instead.
func (*EventNote) Descriptor() ([]byte, []int) {
	return file_arista_event_v1_event_proto_rawDescGZIP(), []int{5}
}

func (x *EventNote) GetNote() *wrapperspb.StringValue {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *EventNote) GetNoteCreator() *wrapperspb.StringValue {
	if x != nil {
		return x.NoteCreator
	}
	return nil
}

// EventKey uniquely identifies an event
//
// NOTE: All fields are required when used as an argument
//       to GetOne, Set or Delete.
type EventKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key is the event data identifier
	Key *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// timestamp is the time the event occurred
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *EventKey) Reset() {
	*x = EventKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_event_v1_event_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventKey) ProtoMessage() {}

func (x *EventKey) ProtoReflect() protoreflect.Message {
	mi := &file_arista_event_v1_event_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventKey.ProtoReflect.Descriptor instead.
func (*EventKey) Descriptor() ([]byte, []int) {
	return file_arista_event_v1_event_proto_rawDescGZIP(), []int{6}
}

func (x *EventKey) GetKey() *wrapperspb.StringValue {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *EventKey) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// EventData is additional event data
type EventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// data is event data specific to the type of this event
	Data map[string]string `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EventData) Reset() {
	*x = EventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_event_v1_event_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventData) ProtoMessage() {}

func (x *EventData) ProtoReflect() protoreflect.Message {
	mi := &file_arista_event_v1_event_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventData.ProtoReflect.Descriptor instead.
func (*EventData) Descriptor() ([]byte, []int) {
	return file_arista_event_v1_event_proto_rawDescGZIP(), []int{7}
}

func (x *EventData) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

// EventNotesConfig configures the notes of an event
//
// NOTE: notes is required when used as an argument
//       to Set.
type EventNotesConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// notes is keyed by desired note time in Unix time, in milliseconds
	Notes map[int64]*EventNoteConfig `protobuf:"bytes,1,rep,name=notes,proto3" json:"notes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EventNotesConfig) Reset() {
	*x = EventNotesConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_event_v1_event_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventNotesConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventNotesConfig) ProtoMessage() {}

func (x *EventNotesConfig) ProtoReflect() protoreflect.Message {
	mi := &file_arista_event_v1_event_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventNotesConfig.ProtoReflect.Descriptor instead.
func (*EventNotesConfig) Descriptor() ([]byte, []int) {
	return file_arista_event_v1_event_proto_rawDescGZIP(), []int{8}
}

func (x *EventNotesConfig) GetNotes() map[int64]*EventNoteConfig {
	if x != nil {
		return x.Notes
	}
	return nil
}

// EventAnnotationConfig configures an event annotation
//
// NOTE: Either 1) key and ack or 2) key and notes or 3) key and read are
//       required when used as an argument to Set.
type EventAnnotationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key is the event instance identifier
	Key *EventKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// ack is the acknowledgement state of an event
	Ack *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=ack,proto3" json:"ack,omitempty"`
	// notes is the notes on an event
	Notes *EventNotesConfig `protobuf:"bytes,3,opt,name=notes,proto3" json:"notes,omitempty"`
	// read is the read state of an event. Setting this implies that an event has been read by a user
	Read *wrapperspb.BoolValue `protobuf:"bytes,4,opt,name=read,proto3" json:"read,omitempty"`
}

func (x *EventAnnotationConfig) Reset() {
	*x = EventAnnotationConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_event_v1_event_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventAnnotationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventAnnotationConfig) ProtoMessage() {}

func (x *EventAnnotationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_arista_event_v1_event_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventAnnotationConfig.ProtoReflect.Descriptor instead.
func (*EventAnnotationConfig) Descriptor() ([]byte, []int) {
	return file_arista_event_v1_event_proto_rawDescGZIP(), []int{9}
}

func (x *EventAnnotationConfig) GetKey() *EventKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *EventAnnotationConfig) GetAck() *wrapperspb.BoolValue {
	if x != nil {
		return x.Ack
	}
	return nil
}

func (x *EventAnnotationConfig) GetNotes() *EventNotesConfig {
	if x != nil {
		return x.Notes
	}
	return nil
}

func (x *EventAnnotationConfig) GetRead() *wrapperspb.BoolValue {
	if x != nil {
		return x.Read
	}
	return nil
}

// EventNotes is the notes of an event state
type EventNotes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// notes is keyed by the time desired
	Notes map[int64]*EventNote `protobuf:"bytes,1,rep,name=notes,proto3" json:"notes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EventNotes) Reset() {
	*x = EventNotes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_event_v1_event_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventNotes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventNotes) ProtoMessage() {}

func (x *EventNotes) ProtoReflect() protoreflect.Message {
	mi := &file_arista_event_v1_event_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventNotes.ProtoReflect.Descriptor instead.
func (*EventNotes) Descriptor() ([]byte, []int) {
	return file_arista_event_v1_event_proto_rawDescGZIP(), []int{10}
}

func (x *EventNotes) GetNotes() map[int64]*EventNote {
	if x != nil {
		return x.Notes
	}
	return nil
}

// Event is a telemetry event
type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key is the event instance identifier
	Key *EventKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// severity is the severity of the event
	Severity EventSeverity `protobuf:"varint,2,opt,name=severity,proto3,enum=arista.event.v1.EventSeverity" json:"severity,omitempty"`
	// title is the title of the event
	Title *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	// description is the description of the event
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// event_type is the type of the event
	EventType *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	// data is the data of the event
	Data *EventData `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	// components is the components on which the event occurred
	Components *EventComponents `protobuf:"bytes,7,opt,name=components,proto3" json:"components,omitempty"`
	// ack is the acknowledgement status of the event
	Ack *EventAck `protobuf:"bytes,8,opt,name=ack,proto3" json:"ack,omitempty"`
	// notes is the notes of the event
	Notes *EventNotes `protobuf:"bytes,9,opt,name=notes,proto3" json:"notes,omitempty"`
	// last_updated_time is the time of the most recent update to the event
	LastUpdatedTime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=last_updated_time,json=lastUpdatedTime,proto3" json:"last_updated_time,omitempty"`
	// read is the read status of the event
	Read *EventRead `protobuf:"bytes,11,opt,name=read,proto3" json:"read,omitempty"`
	// rule_id is the label of the rule associated with the event
	RuleId *wrapperspb.StringValue `protobuf:"bytes,12,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_event_v1_event_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_arista_event_v1_event_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_arista_event_v1_event_proto_rawDescGZIP(), []int{11}
}

func (x *Event) GetKey() *EventKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Event) GetSeverity() EventSeverity {
	if x != nil {
		return x.Severity
	}
	return EventSeverity_EVENT_SEVERITY_UNSPECIFIED
}

func (x *Event) GetTitle() *wrapperspb.StringValue {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *Event) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Event) GetEventType() *wrapperspb.StringValue {
	if x != nil {
		return x.EventType
	}
	return nil
}

func (x *Event) GetData() *EventData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Event) GetComponents() *EventComponents {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *Event) GetAck() *EventAck {
	if x != nil {
		return x.Ack
	}
	return nil
}

func (x *Event) GetNotes() *EventNotes {
	if x != nil {
		return x.Notes
	}
	return nil
}

func (x *Event) GetLastUpdatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedTime
	}
	return nil
}

func (x *Event) GetRead() *EventRead {
	if x != nil {
		return x.Read
	}
	return nil
}

func (x *Event) GetRuleId() *wrapperspb.StringValue {
	if x != nil {
		return x.RuleId
	}
	return nil
}

// UserEventCreationKey uniquely identifies a user event request.
type UserEventCreationKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key is a unique string identifier
	Key *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *UserEventCreationKey) Reset() {
	*x = UserEventCreationKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_event_v1_event_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEventCreationKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEventCreationKey) ProtoMessage() {}

func (x *UserEventCreationKey) ProtoReflect() protoreflect.Message {
	mi := &file_arista_event_v1_event_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEventCreationKey.ProtoReflect.Descriptor instead.
func (*UserEventCreationKey) Descriptor() ([]byte, []int) {
	return file_arista_event_v1_event_proto_rawDescGZIP(), []int{12}
}

func (x *UserEventCreationKey) GetKey() *wrapperspb.StringValue {
	if x != nil {
		return x.Key
	}
	return nil
}

// UserEventCreationConfig is the basis for the manual creation of new events.
//
// NOTE: Set is the only valid operation.
//       Objects are immediately deleted upon event creation.
//       All fields are required to create a well-formed event.
type UserEventCreationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key is the event instance identifier
	Key *UserEventCreationKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// severity is the severity of the event
	Severity EventSeverity `protobuf:"varint,2,opt,name=severity,proto3,enum=arista.event.v1.EventSeverity" json:"severity,omitempty"`
	// title is the title of the event
	Title *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	// description is the description of the event
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// event_type is the type of the event
	EventType *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	// rule_id is the label of the rule associated with the event
	RuleId *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	// components is the components on which the event occurred
	Components *EventComponents `protobuf:"bytes,7,opt,name=components,proto3" json:"components,omitempty"`
	// start_time is the time point at which the event occurred
	StartTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
}

func (x *UserEventCreationConfig) Reset() {
	*x = UserEventCreationConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_event_v1_event_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEventCreationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEventCreationConfig) ProtoMessage() {}

func (x *UserEventCreationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_arista_event_v1_event_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEventCreationConfig.ProtoReflect.Descriptor instead.
func (*UserEventCreationConfig) Descriptor() ([]byte, []int) {
	return file_arista_event_v1_event_proto_rawDescGZIP(), []int{13}
}

func (x *UserEventCreationConfig) GetKey() *UserEventCreationKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *UserEventCreationConfig) GetSeverity() EventSeverity {
	if x != nil {
		return x.Severity
	}
	return EventSeverity_EVENT_SEVERITY_UNSPECIFIED
}

func (x *UserEventCreationConfig) GetTitle() *wrapperspb.StringValue {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *UserEventCreationConfig) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *UserEventCreationConfig) GetEventType() *wrapperspb.StringValue {
	if x != nil {
		return x.EventType
	}
	return nil
}

func (x *UserEventCreationConfig) GetRuleId() *wrapperspb.StringValue {
	if x != nil {
		return x.RuleId
	}
	return nil
}

func (x *UserEventCreationConfig) GetComponents() *EventComponents {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *UserEventCreationConfig) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

var File_arista_event_v1_event_proto protoreflect.FileDescriptor

var file_arista_event_v1_event_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x14, 0x66, 0x6d, 0x70, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd4, 0x01, 0x0a, 0x0e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4f, 0x0a, 0x0a,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x3d, 0x0a,
	0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x52, 0x0a, 0x0f,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x3f, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0xa3, 0x01, 0x0a, 0x08, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x6b, 0x12, 0x2c, 0x0a,
	0x03, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x12, 0x32, 0x0a, 0x05, 0x61,
	0x63, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x12,
	0x35, 0x0a, 0x08, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x61,
	0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x61, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x72, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04,
	0x72, 0x65, 0x61, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x06, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x43, 0x0a, 0x0f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x22, 0x7e, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x65, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6e, 0x6f, 0x74,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x7a, 0x0a, 0x08, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x4b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x3a, 0x04,
	0x80, 0x8e, 0x19, 0x01, 0x22, 0x7e, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09, 0x44,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xb2, 0x01, 0x0a, 0x10, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f,
	0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x42, 0x0a, 0x05, 0x6e, 0x6f, 0x74,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x4e, 0x6f, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e, 0x6f, 0x74, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x1a, 0x5a, 0x0a,
	0x0a, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe3, 0x01, 0x0a, 0x15, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x2b, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2c, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x12, 0x37,
	0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x72, 0x65, 0x61, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x04, 0x72, 0x65, 0x61, 0x64, 0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72, 0x77, 0x22,
	0xa0, 0x01, 0x0a, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x3c,
	0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x1a, 0x54, 0x0a, 0x0a,
	0x4e, 0x6f, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xaa, 0x05, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0a, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x0a, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x6b,
	0x52, 0x03, 0x61, 0x63, 0x6b, 0x12, 0x31, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x65,
	0x73, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0f, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x2e, 0x0a, 0x04, 0x72, 0x65, 0x61, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x64, 0x52, 0x04, 0x72, 0x65, 0x61, 0x64,
	0x12, 0x35, 0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72, 0x6f, 0x22,
	0x4c, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x3a, 0x04, 0x80, 0x8e, 0x19, 0x01, 0x22, 0xfb, 0x03,
	0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x37, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x32,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x35, 0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06,
	0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x0a, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72, 0x77, 0x2a, 0xb5, 0x01, 0x0a, 0x0d,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a,
	0x1a, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a,
	0x13, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47,
	0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x43,
	0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x45, 0x42, 0x55,
	0x47, 0x10, 0x05, 0x2a, 0x85, 0x03, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x01,
	0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x10, 0x02, 0x12, 0x1a,
	0x0a, 0x16, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x54, 0x55, 0x52, 0x42, 0x49, 0x4e, 0x45, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f,
	0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x44, 0x53,
	0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x44, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4d, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x43,
	0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4d,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x10, 0x07, 0x12, 0x22, 0x0a, 0x1e,
	0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57,
	0x4f, 0x52, 0x4b, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x08,
	0x12, 0x2c, 0x0a, 0x28, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x45, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x10, 0x09, 0x12, 0x1e,
	0x0a, 0x1a, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0a, 0x12, 0x1b,
	0x0a, 0x17, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x56, 0x50, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x0b, 0x42, 0x28, 0x5a, 0x26, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x3b,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_arista_event_v1_event_proto_rawDescOnce sync.Once
	file_arista_event_v1_event_proto_rawDescData = file_arista_event_v1_event_proto_rawDesc
)

func file_arista_event_v1_event_proto_rawDescGZIP() []byte {
	file_arista_event_v1_event_proto_rawDescOnce.Do(func() {
		file_arista_event_v1_event_proto_rawDescData = protoimpl.X.CompressGZIP(file_arista_event_v1_event_proto_rawDescData)
	})
	return file_arista_event_v1_event_proto_rawDescData
}

var file_arista_event_v1_event_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_arista_event_v1_event_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_arista_event_v1_event_proto_goTypes = []interface{}{
	(EventSeverity)(0),              // 0: arista.event.v1.EventSeverity
	(ComponentType)(0),              // 1: arista.event.v1.ComponentType
	(*EventComponent)(nil),          // 2: arista.event.v1.EventComponent
	(*EventComponents)(nil),         // 3: arista.event.v1.EventComponents
	(*EventAck)(nil),                // 4: arista.event.v1.EventAck
	(*EventRead)(nil),               // 5: arista.event.v1.EventRead
	(*EventNoteConfig)(nil),         // 6: arista.event.v1.EventNoteConfig
	(*EventNote)(nil),               // 7: arista.event.v1.EventNote
	(*EventKey)(nil),                // 8: arista.event.v1.EventKey
	(*EventData)(nil),               // 9: arista.event.v1.EventData
	(*EventNotesConfig)(nil),        // 10: arista.event.v1.EventNotesConfig
	(*EventAnnotationConfig)(nil),   // 11: arista.event.v1.EventAnnotationConfig
	(*EventNotes)(nil),              // 12: arista.event.v1.EventNotes
	(*Event)(nil),                   // 13: arista.event.v1.Event
	(*UserEventCreationKey)(nil),    // 14: arista.event.v1.UserEventCreationKey
	(*UserEventCreationConfig)(nil), // 15: arista.event.v1.UserEventCreationConfig
	nil,                             // 16: arista.event.v1.EventComponent.ComponentsEntry
	nil,                             // 17: arista.event.v1.EventData.DataEntry
	nil,                             // 18: arista.event.v1.EventNotesConfig.NotesEntry
	nil,                             // 19: arista.event.v1.EventNotes.NotesEntry
	(*wrapperspb.BoolValue)(nil),    // 20: google.protobuf.BoolValue
	(*wrapperspb.StringValue)(nil),  // 21: google.protobuf.StringValue
	(*timestamppb.Timestamp)(nil),   // 22: google.protobuf.Timestamp
}
var file_arista_event_v1_event_proto_depIdxs = []int32{
	1,  // 0: arista.event.v1.EventComponent.type:type_name -> arista.event.v1.ComponentType
	16, // 1: arista.event.v1.EventComponent.components:type_name -> arista.event.v1.EventComponent.ComponentsEntry
	2,  // 2: arista.event.v1.EventComponents.components:type_name -> arista.event.v1.EventComponent
	20, // 3: arista.event.v1.EventAck.ack:type_name -> google.protobuf.BoolValue
	21, // 4: arista.event.v1.EventAck.acker:type_name -> google.protobuf.StringValue
	22, // 5: arista.event.v1.EventAck.ack_time:type_name -> google.protobuf.Timestamp
	20, // 6: arista.event.v1.EventRead.read:type_name -> google.protobuf.BoolValue
	21, // 7: arista.event.v1.EventRead.reader:type_name -> google.protobuf.StringValue
	22, // 8: arista.event.v1.EventRead.read_time:type_name -> google.protobuf.Timestamp
	21, // 9: arista.event.v1.EventNoteConfig.note:type_name -> google.protobuf.StringValue
	21, // 10: arista.event.v1.EventNote.note:type_name -> google.protobuf.StringValue
	21, // 11: arista.event.v1.EventNote.note_creator:type_name -> google.protobuf.StringValue
	21, // 12: arista.event.v1.EventKey.key:type_name -> google.protobuf.StringValue
	22, // 13: arista.event.v1.EventKey.timestamp:type_name -> google.protobuf.Timestamp
	17, // 14: arista.event.v1.EventData.data:type_name -> arista.event.v1.EventData.DataEntry
	18, // 15: arista.event.v1.EventNotesConfig.notes:type_name -> arista.event.v1.EventNotesConfig.NotesEntry
	8,  // 16: arista.event.v1.EventAnnotationConfig.key:type_name -> arista.event.v1.EventKey
	20, // 17: arista.event.v1.EventAnnotationConfig.ack:type_name -> google.protobuf.BoolValue
	10, // 18: arista.event.v1.EventAnnotationConfig.notes:type_name -> arista.event.v1.EventNotesConfig
	20, // 19: arista.event.v1.EventAnnotationConfig.read:type_name -> google.protobuf.BoolValue
	19, // 20: arista.event.v1.EventNotes.notes:type_name -> arista.event.v1.EventNotes.NotesEntry
	8,  // 21: arista.event.v1.Event.key:type_name -> arista.event.v1.EventKey
	0,  // 22: arista.event.v1.Event.severity:type_name -> arista.event.v1.EventSeverity
	21, // 23: arista.event.v1.Event.title:type_name -> google.protobuf.StringValue
	21, // 24: arista.event.v1.Event.description:type_name -> google.protobuf.StringValue
	21, // 25: arista.event.v1.Event.event_type:type_name -> google.protobuf.StringValue
	9,  // 26: arista.event.v1.Event.data:type_name -> arista.event.v1.EventData
	3,  // 27: arista.event.v1.Event.components:type_name -> arista.event.v1.EventComponents
	4,  // 28: arista.event.v1.Event.ack:type_name -> arista.event.v1.EventAck
	12, // 29: arista.event.v1.Event.notes:type_name -> arista.event.v1.EventNotes
	22, // 30: arista.event.v1.Event.last_updated_time:type_name -> google.protobuf.Timestamp
	5,  // 31: arista.event.v1.Event.read:type_name -> arista.event.v1.EventRead
	21, // 32: arista.event.v1.Event.rule_id:type_name -> google.protobuf.StringValue
	21, // 33: arista.event.v1.UserEventCreationKey.key:type_name -> google.protobuf.StringValue
	14, // 34: arista.event.v1.UserEventCreationConfig.key:type_name -> arista.event.v1.UserEventCreationKey
	0,  // 35: arista.event.v1.UserEventCreationConfig.severity:type_name -> arista.event.v1.EventSeverity
	21, // 36: arista.event.v1.UserEventCreationConfig.title:type_name -> google.protobuf.StringValue
	21, // 37: arista.event.v1.UserEventCreationConfig.description:type_name -> google.protobuf.StringValue
	21, // 38: arista.event.v1.UserEventCreationConfig.event_type:type_name -> google.protobuf.StringValue
	21, // 39: arista.event.v1.UserEventCreationConfig.rule_id:type_name -> google.protobuf.StringValue
	3,  // 40: arista.event.v1.UserEventCreationConfig.components:type_name -> arista.event.v1.EventComponents
	22, // 41: arista.event.v1.UserEventCreationConfig.start_time:type_name -> google.protobuf.Timestamp
	6,  // 42: arista.event.v1.EventNotesConfig.NotesEntry.value:type_name -> arista.event.v1.EventNoteConfig
	7,  // 43: arista.event.v1.EventNotes.NotesEntry.value:type_name -> arista.event.v1.EventNote
	44, // [44:44] is the sub-list for method output_type
	44, // [44:44] is the sub-list for method input_type
	44, // [44:44] is the sub-list for extension type_name
	44, // [44:44] is the sub-list for extension extendee
	0,  // [0:44] is the sub-list for field type_name
}

func init() { file_arista_event_v1_event_proto_init() }
func file_arista_event_v1_event_proto_init() {
	if File_arista_event_v1_event_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_arista_event_v1_event_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_event_v1_event_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventComponents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_event_v1_event_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_event_v1_event_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_event_v1_event_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventNoteConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_event_v1_event_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventNote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_event_v1_event_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_event_v1_event_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_event_v1_event_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventNotesConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_event_v1_event_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventAnnotationConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_event_v1_event_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventNotes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_event_v1_event_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_event_v1_event_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEventCreationKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_event_v1_event_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEventCreationConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_arista_event_v1_event_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_arista_event_v1_event_proto_goTypes,
		DependencyIndexes: file_arista_event_v1_event_proto_depIdxs,
		EnumInfos:         file_arista_event_v1_event_proto_enumTypes,
		MessageInfos:      file_arista_event_v1_event_proto_msgTypes,
	}.Build()
	File_arista_event_v1_event_proto = out.File
	file_arista_event_v1_event_proto_rawDesc = nil
	file_arista_event_v1_event_proto_goTypes = nil
	file_arista_event_v1_event_proto_depIdxs = nil
}
