// Copyright (c) 2020 Arista Networks, Inc.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

//
// Code generated by boomtown. DO NOT EDIT.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.3
// source: arista/event.v1/services.gen.proto

package event

import (
	subscriptions "github.com/aristanetworks/cloudvision-go/api/arista/subscriptions"
	time "github.com/aristanetworks/cloudvision-go/api/arista/time"
	context "context"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a Event instance to retrieve.
	// This value (and all fields, unless otherwise specified) must be populated.
	Key *EventKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at twhich it makes the request.
	Time *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *EventRequest) Reset() {
	*x = EventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_event_v1_services_gen_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRequest) ProtoMessage() {}

func (x *EventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_event_v1_services_gen_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRequest.ProtoReflect.Descriptor instead.
func (*EventRequest) Descriptor() ([]byte, []int) {
	return file_arista_event_v1_services_gen_proto_rawDescGZIP(), []int{0}
}

func (x *EventRequest) GetKey() *EventKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *EventRequest) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type EventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *Event `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// Event instance in this response.
	Time *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *EventResponse) Reset() {
	*x = EventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_event_v1_services_gen_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventResponse) ProtoMessage() {}

func (x *EventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_event_v1_services_gen_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventResponse.ProtoReflect.Descriptor instead.
func (*EventResponse) Descriptor() ([]byte, []int) {
	return file_arista_event_v1_services_gen_proto_rawDescGZIP(), []int{1}
}

func (x *EventResponse) GetValue() *Event {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *EventResponse) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type EventStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*Event `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *EventStreamRequest) Reset() {
	*x = EventStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_event_v1_services_gen_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventStreamRequest) ProtoMessage() {}

func (x *EventStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_event_v1_services_gen_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventStreamRequest.ProtoReflect.Descriptor instead.
func (*EventStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_event_v1_services_gen_proto_rawDescGZIP(), []int{2}
}

func (x *EventStreamRequest) GetPartialEqFilter() []*Event {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *EventStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type EventStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *Event `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this Event's last modification.
	Time *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the Event value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *EventStreamResponse) Reset() {
	*x = EventStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_event_v1_services_gen_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventStreamResponse) ProtoMessage() {}

func (x *EventStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_event_v1_services_gen_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventStreamResponse.ProtoReflect.Descriptor instead.
func (*EventStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_event_v1_services_gen_proto_rawDescGZIP(), []int{3}
}

func (x *EventStreamResponse) GetValue() *Event {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *EventStreamResponse) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *EventStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation_UNSPECIFIED
}

type EventAnnotationConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a EventAnnotationConfig instance to retrieve.
	// This value (and all fields, unless otherwise specified) must be populated.
	Key *EventKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at twhich it makes the request.
	Time *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *EventAnnotationConfigRequest) Reset() {
	*x = EventAnnotationConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_event_v1_services_gen_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventAnnotationConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventAnnotationConfigRequest) ProtoMessage() {}

func (x *EventAnnotationConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_event_v1_services_gen_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventAnnotationConfigRequest.ProtoReflect.Descriptor instead.
func (*EventAnnotationConfigRequest) Descriptor() ([]byte, []int) {
	return file_arista_event_v1_services_gen_proto_rawDescGZIP(), []int{4}
}

func (x *EventAnnotationConfigRequest) GetKey() *EventKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *EventAnnotationConfigRequest) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type EventAnnotationConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *EventAnnotationConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// EventAnnotationConfig instance in this response.
	Time *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *EventAnnotationConfigResponse) Reset() {
	*x = EventAnnotationConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_event_v1_services_gen_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventAnnotationConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventAnnotationConfigResponse) ProtoMessage() {}

func (x *EventAnnotationConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_event_v1_services_gen_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventAnnotationConfigResponse.ProtoReflect.Descriptor instead.
func (*EventAnnotationConfigResponse) Descriptor() ([]byte, []int) {
	return file_arista_event_v1_services_gen_proto_rawDescGZIP(), []int{5}
}

func (x *EventAnnotationConfigResponse) GetValue() *EventAnnotationConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *EventAnnotationConfigResponse) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type EventAnnotationConfigStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*EventAnnotationConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *EventAnnotationConfigStreamRequest) Reset() {
	*x = EventAnnotationConfigStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_event_v1_services_gen_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventAnnotationConfigStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventAnnotationConfigStreamRequest) ProtoMessage() {}

func (x *EventAnnotationConfigStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_event_v1_services_gen_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventAnnotationConfigStreamRequest.ProtoReflect.Descriptor instead.
func (*EventAnnotationConfigStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_event_v1_services_gen_proto_rawDescGZIP(), []int{6}
}

func (x *EventAnnotationConfigStreamRequest) GetPartialEqFilter() []*EventAnnotationConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *EventAnnotationConfigStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type EventAnnotationConfigStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *EventAnnotationConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this EventAnnotationConfig's last modification.
	Time *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the EventAnnotationConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *EventAnnotationConfigStreamResponse) Reset() {
	*x = EventAnnotationConfigStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_event_v1_services_gen_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventAnnotationConfigStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventAnnotationConfigStreamResponse) ProtoMessage() {}

func (x *EventAnnotationConfigStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_event_v1_services_gen_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventAnnotationConfigStreamResponse.ProtoReflect.Descriptor instead.
func (*EventAnnotationConfigStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_event_v1_services_gen_proto_rawDescGZIP(), []int{7}
}

func (x *EventAnnotationConfigStreamResponse) GetValue() *EventAnnotationConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *EventAnnotationConfigStreamResponse) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *EventAnnotationConfigStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation_UNSPECIFIED
}

type EventAnnotationConfigSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EventAnnotationConfig carries the value to set into the datastore.
	// See the documentation on the EventAnnotationConfig struct for which fields are required.
	Value *EventAnnotationConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *EventAnnotationConfigSetRequest) Reset() {
	*x = EventAnnotationConfigSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_event_v1_services_gen_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventAnnotationConfigSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventAnnotationConfigSetRequest) ProtoMessage() {}

func (x *EventAnnotationConfigSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_event_v1_services_gen_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventAnnotationConfigSetRequest.ProtoReflect.Descriptor instead.
func (*EventAnnotationConfigSetRequest) Descriptor() ([]byte, []int) {
	return file_arista_event_v1_services_gen_proto_rawDescGZIP(), []int{8}
}

func (x *EventAnnotationConfigSetRequest) GetValue() *EventAnnotationConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

type EventAnnotationConfigSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value carries all the values given in the EventAnnotationConfigSetRequest as well
	// as any server-generated values.
	Value *EventAnnotationConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==CreatedAt will include this instance.
	//
	Time *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *EventAnnotationConfigSetResponse) Reset() {
	*x = EventAnnotationConfigSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_event_v1_services_gen_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventAnnotationConfigSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventAnnotationConfigSetResponse) ProtoMessage() {}

func (x *EventAnnotationConfigSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_event_v1_services_gen_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventAnnotationConfigSetResponse.ProtoReflect.Descriptor instead.
func (*EventAnnotationConfigSetResponse) Descriptor() ([]byte, []int) {
	return file_arista_event_v1_services_gen_proto_rawDescGZIP(), []int{9}
}

func (x *EventAnnotationConfigSetResponse) GetValue() *EventAnnotationConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *EventAnnotationConfigSetResponse) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type EventAnnotationConfigDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key indicates which EventAnnotationConfig instance to remove.
	// This field (and all keys, unless otherwise specified) must always be set.
	Key *EventKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *EventAnnotationConfigDeleteRequest) Reset() {
	*x = EventAnnotationConfigDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_event_v1_services_gen_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventAnnotationConfigDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventAnnotationConfigDeleteRequest) ProtoMessage() {}

func (x *EventAnnotationConfigDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_event_v1_services_gen_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventAnnotationConfigDeleteRequest.ProtoReflect.Descriptor instead.
func (*EventAnnotationConfigDeleteRequest) Descriptor() ([]byte, []int) {
	return file_arista_event_v1_services_gen_proto_rawDescGZIP(), []int{10}
}

func (x *EventAnnotationConfigDeleteRequest) GetKey() *EventKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type EventAnnotationConfigDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key echoes back the key of the deleted EventAnnotationConfig instance.
	Key *EventKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==DeletedAt will not include this instance.
	//
	Time *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *EventAnnotationConfigDeleteResponse) Reset() {
	*x = EventAnnotationConfigDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_event_v1_services_gen_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventAnnotationConfigDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventAnnotationConfigDeleteResponse) ProtoMessage() {}

func (x *EventAnnotationConfigDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_event_v1_services_gen_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventAnnotationConfigDeleteResponse.ProtoReflect.Descriptor instead.
func (*EventAnnotationConfigDeleteResponse) Descriptor() ([]byte, []int) {
	return file_arista_event_v1_services_gen_proto_rawDescGZIP(), []int{11}
}

func (x *EventAnnotationConfigDeleteResponse) GetKey() *EventKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *EventAnnotationConfigDeleteResponse) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

var File_arista_event_v1_services_gen_proto protoreflect.FileDescriptor

var file_arista_event_v1_services_gen_proto_rawDesc = []byte{
	0x0a, 0x22, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x67, 0x65, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x16, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6b, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0x6d, 0x0a, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0x85, 0x01, 0x0a, 0x12, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x13, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x7b, 0x0a, 0x1c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0x8d, 0x01, 0x0a, 0x1d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0xa5, 0x01, 0x0a, 0x22, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xc8, 0x01, 0x0a, 0x23, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x5f, 0x0a, 0x1f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x20, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x51, 0x0a, 0x22, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x82, 0x01, 0x0a, 0x23,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x32, 0x88, 0x02, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x47, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x12, 0x1d, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x06, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x12, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30,
	0x01, 0x12, 0x58, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x23,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0xd9, 0x04, 0x0a, 0x1c,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x67, 0x0a, 0x06,
	0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x12, 0x2d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12,
	0x33, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x78, 0x0a, 0x09,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x33, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x6a, 0x0a, 0x03, 0x53, 0x65, 0x74, 0x12, 0x30, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x31, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x73, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x33, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x34, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x28, 0x5a, 0x26, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x3b, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_arista_event_v1_services_gen_proto_rawDescOnce sync.Once
	file_arista_event_v1_services_gen_proto_rawDescData = file_arista_event_v1_services_gen_proto_rawDesc
)

func file_arista_event_v1_services_gen_proto_rawDescGZIP() []byte {
	file_arista_event_v1_services_gen_proto_rawDescOnce.Do(func() {
		file_arista_event_v1_services_gen_proto_rawDescData = protoimpl.X.CompressGZIP(file_arista_event_v1_services_gen_proto_rawDescData)
	})
	return file_arista_event_v1_services_gen_proto_rawDescData
}

var file_arista_event_v1_services_gen_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_arista_event_v1_services_gen_proto_goTypes = []interface{}{
	(*EventRequest)(nil),                        // 0: arista.event.v1.EventRequest
	(*EventResponse)(nil),                       // 1: arista.event.v1.EventResponse
	(*EventStreamRequest)(nil),                  // 2: arista.event.v1.EventStreamRequest
	(*EventStreamResponse)(nil),                 // 3: arista.event.v1.EventStreamResponse
	(*EventAnnotationConfigRequest)(nil),        // 4: arista.event.v1.EventAnnotationConfigRequest
	(*EventAnnotationConfigResponse)(nil),       // 5: arista.event.v1.EventAnnotationConfigResponse
	(*EventAnnotationConfigStreamRequest)(nil),  // 6: arista.event.v1.EventAnnotationConfigStreamRequest
	(*EventAnnotationConfigStreamResponse)(nil), // 7: arista.event.v1.EventAnnotationConfigStreamResponse
	(*EventAnnotationConfigSetRequest)(nil),     // 8: arista.event.v1.EventAnnotationConfigSetRequest
	(*EventAnnotationConfigSetResponse)(nil),    // 9: arista.event.v1.EventAnnotationConfigSetResponse
	(*EventAnnotationConfigDeleteRequest)(nil),  // 10: arista.event.v1.EventAnnotationConfigDeleteRequest
	(*EventAnnotationConfigDeleteResponse)(nil), // 11: arista.event.v1.EventAnnotationConfigDeleteResponse
	(*EventKey)(nil),                            // 12: arista.event.v1.EventKey
	(*timestamp.Timestamp)(nil),                 // 13: google.protobuf.Timestamp
	(*Event)(nil),                               // 14: arista.event.v1.Event
	(*time.TimeBounds)(nil),                     // 15: arista.time.TimeBounds
	(subscriptions.Operation)(0),                // 16: arista.subscriptions.Operation
	(*EventAnnotationConfig)(nil),               // 17: arista.event.v1.EventAnnotationConfig
}
var file_arista_event_v1_services_gen_proto_depIdxs = []int32{
	12, // 0: arista.event.v1.EventRequest.key:type_name -> arista.event.v1.EventKey
	13, // 1: arista.event.v1.EventRequest.time:type_name -> google.protobuf.Timestamp
	14, // 2: arista.event.v1.EventResponse.value:type_name -> arista.event.v1.Event
	13, // 3: arista.event.v1.EventResponse.time:type_name -> google.protobuf.Timestamp
	14, // 4: arista.event.v1.EventStreamRequest.partial_eq_filter:type_name -> arista.event.v1.Event
	15, // 5: arista.event.v1.EventStreamRequest.time:type_name -> arista.time.TimeBounds
	14, // 6: arista.event.v1.EventStreamResponse.value:type_name -> arista.event.v1.Event
	13, // 7: arista.event.v1.EventStreamResponse.time:type_name -> google.protobuf.Timestamp
	16, // 8: arista.event.v1.EventStreamResponse.type:type_name -> arista.subscriptions.Operation
	12, // 9: arista.event.v1.EventAnnotationConfigRequest.key:type_name -> arista.event.v1.EventKey
	13, // 10: arista.event.v1.EventAnnotationConfigRequest.time:type_name -> google.protobuf.Timestamp
	17, // 11: arista.event.v1.EventAnnotationConfigResponse.value:type_name -> arista.event.v1.EventAnnotationConfig
	13, // 12: arista.event.v1.EventAnnotationConfigResponse.time:type_name -> google.protobuf.Timestamp
	17, // 13: arista.event.v1.EventAnnotationConfigStreamRequest.partial_eq_filter:type_name -> arista.event.v1.EventAnnotationConfig
	15, // 14: arista.event.v1.EventAnnotationConfigStreamRequest.time:type_name -> arista.time.TimeBounds
	17, // 15: arista.event.v1.EventAnnotationConfigStreamResponse.value:type_name -> arista.event.v1.EventAnnotationConfig
	13, // 16: arista.event.v1.EventAnnotationConfigStreamResponse.time:type_name -> google.protobuf.Timestamp
	16, // 17: arista.event.v1.EventAnnotationConfigStreamResponse.type:type_name -> arista.subscriptions.Operation
	17, // 18: arista.event.v1.EventAnnotationConfigSetRequest.value:type_name -> arista.event.v1.EventAnnotationConfig
	17, // 19: arista.event.v1.EventAnnotationConfigSetResponse.value:type_name -> arista.event.v1.EventAnnotationConfig
	13, // 20: arista.event.v1.EventAnnotationConfigSetResponse.time:type_name -> google.protobuf.Timestamp
	12, // 21: arista.event.v1.EventAnnotationConfigDeleteRequest.key:type_name -> arista.event.v1.EventKey
	12, // 22: arista.event.v1.EventAnnotationConfigDeleteResponse.key:type_name -> arista.event.v1.EventKey
	13, // 23: arista.event.v1.EventAnnotationConfigDeleteResponse.time:type_name -> google.protobuf.Timestamp
	0,  // 24: arista.event.v1.EventService.GetOne:input_type -> arista.event.v1.EventRequest
	2,  // 25: arista.event.v1.EventService.GetAll:input_type -> arista.event.v1.EventStreamRequest
	2,  // 26: arista.event.v1.EventService.Subscribe:input_type -> arista.event.v1.EventStreamRequest
	4,  // 27: arista.event.v1.EventAnnotationConfigService.GetOne:input_type -> arista.event.v1.EventAnnotationConfigRequest
	6,  // 28: arista.event.v1.EventAnnotationConfigService.GetAll:input_type -> arista.event.v1.EventAnnotationConfigStreamRequest
	6,  // 29: arista.event.v1.EventAnnotationConfigService.Subscribe:input_type -> arista.event.v1.EventAnnotationConfigStreamRequest
	8,  // 30: arista.event.v1.EventAnnotationConfigService.Set:input_type -> arista.event.v1.EventAnnotationConfigSetRequest
	10, // 31: arista.event.v1.EventAnnotationConfigService.Delete:input_type -> arista.event.v1.EventAnnotationConfigDeleteRequest
	1,  // 32: arista.event.v1.EventService.GetOne:output_type -> arista.event.v1.EventResponse
	3,  // 33: arista.event.v1.EventService.GetAll:output_type -> arista.event.v1.EventStreamResponse
	3,  // 34: arista.event.v1.EventService.Subscribe:output_type -> arista.event.v1.EventStreamResponse
	5,  // 35: arista.event.v1.EventAnnotationConfigService.GetOne:output_type -> arista.event.v1.EventAnnotationConfigResponse
	7,  // 36: arista.event.v1.EventAnnotationConfigService.GetAll:output_type -> arista.event.v1.EventAnnotationConfigStreamResponse
	7,  // 37: arista.event.v1.EventAnnotationConfigService.Subscribe:output_type -> arista.event.v1.EventAnnotationConfigStreamResponse
	9,  // 38: arista.event.v1.EventAnnotationConfigService.Set:output_type -> arista.event.v1.EventAnnotationConfigSetResponse
	11, // 39: arista.event.v1.EventAnnotationConfigService.Delete:output_type -> arista.event.v1.EventAnnotationConfigDeleteResponse
	32, // [32:40] is the sub-list for method output_type
	24, // [24:32] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_arista_event_v1_services_gen_proto_init() }
func file_arista_event_v1_services_gen_proto_init() {
	if File_arista_event_v1_services_gen_proto != nil {
		return
	}
	file_arista_event_v1_event_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_arista_event_v1_services_gen_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_event_v1_services_gen_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_event_v1_services_gen_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_event_v1_services_gen_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_event_v1_services_gen_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventAnnotationConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_event_v1_services_gen_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventAnnotationConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_event_v1_services_gen_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventAnnotationConfigStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_event_v1_services_gen_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventAnnotationConfigStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_event_v1_services_gen_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventAnnotationConfigSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_event_v1_services_gen_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventAnnotationConfigSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_event_v1_services_gen_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventAnnotationConfigDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_event_v1_services_gen_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventAnnotationConfigDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_arista_event_v1_services_gen_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_arista_event_v1_services_gen_proto_goTypes,
		DependencyIndexes: file_arista_event_v1_services_gen_proto_depIdxs,
		MessageInfos:      file_arista_event_v1_services_gen_proto_msgTypes,
	}.Build()
	File_arista_event_v1_services_gen_proto = out.File
	file_arista_event_v1_services_gen_proto_rawDesc = nil
	file_arista_event_v1_services_gen_proto_goTypes = nil
	file_arista_event_v1_services_gen_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EventServiceClient is the client API for EventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventServiceClient interface {
	// GetOne returns a unary model as specified by the key in the request.
	// The key must be provided and all fields populated (unless otherwise specified).
	GetOne(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error)
	// GetAll returns all entities for this model, with optional filtering.
	GetAll(ctx context.Context, in *EventStreamRequest, opts ...grpc.CallOption) (EventService_GetAllClient, error)
	// Subscribe first returns all initial state known to the system,
	// then will send deltas as entities are changed.
	Subscribe(ctx context.Context, in *EventStreamRequest, opts ...grpc.CallOption) (EventService_SubscribeClient, error)
}

type eventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventServiceClient(cc grpc.ClientConnInterface) EventServiceClient {
	return &eventServiceClient{cc}
}

func (c *eventServiceClient) GetOne(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/arista.event.v1.EventService/GetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) GetAll(ctx context.Context, in *EventStreamRequest, opts ...grpc.CallOption) (EventService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EventService_serviceDesc.Streams[0], "/arista.event.v1.EventService/GetAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventService_GetAllClient interface {
	Recv() (*EventStreamResponse, error)
	grpc.ClientStream
}

type eventServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *eventServiceGetAllClient) Recv() (*EventStreamResponse, error) {
	m := new(EventStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventServiceClient) Subscribe(ctx context.Context, in *EventStreamRequest, opts ...grpc.CallOption) (EventService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EventService_serviceDesc.Streams[1], "/arista.event.v1.EventService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventService_SubscribeClient interface {
	Recv() (*EventStreamResponse, error)
	grpc.ClientStream
}

type eventServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *eventServiceSubscribeClient) Recv() (*EventStreamResponse, error) {
	m := new(EventStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventServiceServer is the server API for EventService service.
type EventServiceServer interface {
	// GetOne returns a unary model as specified by the key in the request.
	// The key must be provided and all fields populated (unless otherwise specified).
	GetOne(context.Context, *EventRequest) (*EventResponse, error)
	// GetAll returns all entities for this model, with optional filtering.
	GetAll(*EventStreamRequest, EventService_GetAllServer) error
	// Subscribe first returns all initial state known to the system,
	// then will send deltas as entities are changed.
	Subscribe(*EventStreamRequest, EventService_SubscribeServer) error
}

// UnimplementedEventServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEventServiceServer struct {
}

func (*UnimplementedEventServiceServer) GetOne(context.Context, *EventRequest) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (*UnimplementedEventServiceServer) GetAll(*EventStreamRequest, EventService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (*UnimplementedEventServiceServer) Subscribe(*EventStreamRequest, EventService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}

func RegisterEventServiceServer(s *grpc.Server, srv EventServiceServer) {
	s.RegisterService(&_EventService_serviceDesc, srv)
}

func _EventService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arista.event.v1.EventService/GetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).GetOne(ctx, req.(*EventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventServiceServer).GetAll(m, &eventServiceGetAllServer{stream})
}

type EventService_GetAllServer interface {
	Send(*EventStreamResponse) error
	grpc.ServerStream
}

type eventServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *eventServiceGetAllServer) Send(m *EventStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EventService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventServiceServer).Subscribe(m, &eventServiceSubscribeServer{stream})
}

type EventService_SubscribeServer interface {
	Send(*EventStreamResponse) error
	grpc.ServerStream
}

type eventServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *eventServiceSubscribeServer) Send(m *EventStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _EventService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "arista.event.v1.EventService",
	HandlerType: (*EventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _EventService_GetOne_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAll",
			Handler:       _EventService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _EventService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/event.v1/services.gen.proto",
}

// EventAnnotationConfigServiceClient is the client API for EventAnnotationConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventAnnotationConfigServiceClient interface {
	// GetOne returns a unary model as specified by the key in the request.
	// The key must be provided and all fields populated (unless otherwise specified).
	GetOne(ctx context.Context, in *EventAnnotationConfigRequest, opts ...grpc.CallOption) (*EventAnnotationConfigResponse, error)
	// GetAll returns all entities for this model, with optional filtering.
	GetAll(ctx context.Context, in *EventAnnotationConfigStreamRequest, opts ...grpc.CallOption) (EventAnnotationConfigService_GetAllClient, error)
	// Subscribe first returns all initial state known to the system,
	// then will send deltas as entities are changed.
	Subscribe(ctx context.Context, in *EventAnnotationConfigStreamRequest, opts ...grpc.CallOption) (EventAnnotationConfigService_SubscribeClient, error)
	// Set allows setting values for the entity specified by the key in the request.
	// The key must be provided and all fields set (unless otherwise specified).
	Set(ctx context.Context, in *EventAnnotationConfigSetRequest, opts ...grpc.CallOption) (*EventAnnotationConfigSetResponse, error)
	// Delete will remove the entity specified by the key within the request.
	// The key must be provided and all fields populated (unless otherwise specified).
	Delete(ctx context.Context, in *EventAnnotationConfigDeleteRequest, opts ...grpc.CallOption) (*EventAnnotationConfigDeleteResponse, error)
}

type eventAnnotationConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventAnnotationConfigServiceClient(cc grpc.ClientConnInterface) EventAnnotationConfigServiceClient {
	return &eventAnnotationConfigServiceClient{cc}
}

func (c *eventAnnotationConfigServiceClient) GetOne(ctx context.Context, in *EventAnnotationConfigRequest, opts ...grpc.CallOption) (*EventAnnotationConfigResponse, error) {
	out := new(EventAnnotationConfigResponse)
	err := c.cc.Invoke(ctx, "/arista.event.v1.EventAnnotationConfigService/GetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventAnnotationConfigServiceClient) GetAll(ctx context.Context, in *EventAnnotationConfigStreamRequest, opts ...grpc.CallOption) (EventAnnotationConfigService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EventAnnotationConfigService_serviceDesc.Streams[0], "/arista.event.v1.EventAnnotationConfigService/GetAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventAnnotationConfigServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventAnnotationConfigService_GetAllClient interface {
	Recv() (*EventAnnotationConfigStreamResponse, error)
	grpc.ClientStream
}

type eventAnnotationConfigServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *eventAnnotationConfigServiceGetAllClient) Recv() (*EventAnnotationConfigStreamResponse, error) {
	m := new(EventAnnotationConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventAnnotationConfigServiceClient) Subscribe(ctx context.Context, in *EventAnnotationConfigStreamRequest, opts ...grpc.CallOption) (EventAnnotationConfigService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EventAnnotationConfigService_serviceDesc.Streams[1], "/arista.event.v1.EventAnnotationConfigService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventAnnotationConfigServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventAnnotationConfigService_SubscribeClient interface {
	Recv() (*EventAnnotationConfigStreamResponse, error)
	grpc.ClientStream
}

type eventAnnotationConfigServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *eventAnnotationConfigServiceSubscribeClient) Recv() (*EventAnnotationConfigStreamResponse, error) {
	m := new(EventAnnotationConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventAnnotationConfigServiceClient) Set(ctx context.Context, in *EventAnnotationConfigSetRequest, opts ...grpc.CallOption) (*EventAnnotationConfigSetResponse, error) {
	out := new(EventAnnotationConfigSetResponse)
	err := c.cc.Invoke(ctx, "/arista.event.v1.EventAnnotationConfigService/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventAnnotationConfigServiceClient) Delete(ctx context.Context, in *EventAnnotationConfigDeleteRequest, opts ...grpc.CallOption) (*EventAnnotationConfigDeleteResponse, error) {
	out := new(EventAnnotationConfigDeleteResponse)
	err := c.cc.Invoke(ctx, "/arista.event.v1.EventAnnotationConfigService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventAnnotationConfigServiceServer is the server API for EventAnnotationConfigService service.
type EventAnnotationConfigServiceServer interface {
	// GetOne returns a unary model as specified by the key in the request.
	// The key must be provided and all fields populated (unless otherwise specified).
	GetOne(context.Context, *EventAnnotationConfigRequest) (*EventAnnotationConfigResponse, error)
	// GetAll returns all entities for this model, with optional filtering.
	GetAll(*EventAnnotationConfigStreamRequest, EventAnnotationConfigService_GetAllServer) error
	// Subscribe first returns all initial state known to the system,
	// then will send deltas as entities are changed.
	Subscribe(*EventAnnotationConfigStreamRequest, EventAnnotationConfigService_SubscribeServer) error
	// Set allows setting values for the entity specified by the key in the request.
	// The key must be provided and all fields set (unless otherwise specified).
	Set(context.Context, *EventAnnotationConfigSetRequest) (*EventAnnotationConfigSetResponse, error)
	// Delete will remove the entity specified by the key within the request.
	// The key must be provided and all fields populated (unless otherwise specified).
	Delete(context.Context, *EventAnnotationConfigDeleteRequest) (*EventAnnotationConfigDeleteResponse, error)
}

// UnimplementedEventAnnotationConfigServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEventAnnotationConfigServiceServer struct {
}

func (*UnimplementedEventAnnotationConfigServiceServer) GetOne(context.Context, *EventAnnotationConfigRequest) (*EventAnnotationConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (*UnimplementedEventAnnotationConfigServiceServer) GetAll(*EventAnnotationConfigStreamRequest, EventAnnotationConfigService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (*UnimplementedEventAnnotationConfigServiceServer) Subscribe(*EventAnnotationConfigStreamRequest, EventAnnotationConfigService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (*UnimplementedEventAnnotationConfigServiceServer) Set(context.Context, *EventAnnotationConfigSetRequest) (*EventAnnotationConfigSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (*UnimplementedEventAnnotationConfigServiceServer) Delete(context.Context, *EventAnnotationConfigDeleteRequest) (*EventAnnotationConfigDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterEventAnnotationConfigServiceServer(s *grpc.Server, srv EventAnnotationConfigServiceServer) {
	s.RegisterService(&_EventAnnotationConfigService_serviceDesc, srv)
}

func _EventAnnotationConfigService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventAnnotationConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventAnnotationConfigServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arista.event.v1.EventAnnotationConfigService/GetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventAnnotationConfigServiceServer).GetOne(ctx, req.(*EventAnnotationConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventAnnotationConfigService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventAnnotationConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventAnnotationConfigServiceServer).GetAll(m, &eventAnnotationConfigServiceGetAllServer{stream})
}

type EventAnnotationConfigService_GetAllServer interface {
	Send(*EventAnnotationConfigStreamResponse) error
	grpc.ServerStream
}

type eventAnnotationConfigServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *eventAnnotationConfigServiceGetAllServer) Send(m *EventAnnotationConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EventAnnotationConfigService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventAnnotationConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventAnnotationConfigServiceServer).Subscribe(m, &eventAnnotationConfigServiceSubscribeServer{stream})
}

type EventAnnotationConfigService_SubscribeServer interface {
	Send(*EventAnnotationConfigStreamResponse) error
	grpc.ServerStream
}

type eventAnnotationConfigServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *eventAnnotationConfigServiceSubscribeServer) Send(m *EventAnnotationConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EventAnnotationConfigService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventAnnotationConfigSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventAnnotationConfigServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arista.event.v1.EventAnnotationConfigService/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventAnnotationConfigServiceServer).Set(ctx, req.(*EventAnnotationConfigSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventAnnotationConfigService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventAnnotationConfigDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventAnnotationConfigServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arista.event.v1.EventAnnotationConfigService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventAnnotationConfigServiceServer).Delete(ctx, req.(*EventAnnotationConfigDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventAnnotationConfigService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "arista.event.v1.EventAnnotationConfigService",
	HandlerType: (*EventAnnotationConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _EventAnnotationConfigService_GetOne_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _EventAnnotationConfigService_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _EventAnnotationConfigService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAll",
			Handler:       _EventAnnotationConfigService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _EventAnnotationConfigService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/event.v1/services.gen.proto",
}
