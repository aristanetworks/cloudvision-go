// Copyright (c) 2024 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

//
// Code generated by boomtown. DO NOT EDIT.
//

package event

import "google.golang.org/grpc"

// Client composes the service clients within the event package.
// This client can then be composed into a larger hierarchy for more complex clients.
//
// Because method names include the name of the Resource they operate on, the embedded
// clients are unnamed fields to reduce stutter.
//
// Included resources:
//   - Event
//   - EventAnnotationConfig
//   - UserEventCreationConfig
type Client struct {
	Event                   EventServiceClient
	EventAnnotationConfig   EventAnnotationConfigServiceClient
	UserEventCreationConfig UserEventCreationConfigServiceClient
}

// NewClient creates a new composed-client from the given connection.
func NewClient(conn grpc.ClientConnInterface) Client {
	return Client{
		Event:                   NewEventServiceClient(conn),
		EventAnnotationConfig:   NewEventAnnotationConfigServiceClient(conn),
		UserEventCreationConfig: NewUserEventCreationConfigServiceClient(conn),
	}
}

// Server aggregates the various server interfaces required by gRPC.
// The included resources are:
//   - Event
//   - EventAnnotationConfig
//   - UserEventCreationConfig
type Server struct {
	Event                   EventServiceServer
	EventAnnotationConfig   EventAnnotationConfigServiceServer
	UserEventCreationConfig UserEventCreationConfigServiceServer
}

// Register takes the given gRPC Server and registers our services with it.
func (s Server) Register(target *grpc.Server) {
	RegisterEventServiceServer(target, s.Event)
	RegisterEventAnnotationConfigServiceServer(target, s.EventAnnotationConfig)
	RegisterUserEventCreationConfigServiceServer(target, s.UserEventCreationConfig)
}

// RegisterUnimplementeds adds unimplemented servers to the given gRPC Server
func RegisterUnimplementeds(target *grpc.Server) error {
	RegisterEventServiceServer(target,
		UnimplementedEventServiceServer{})
	RegisterEventAnnotationConfigServiceServer(target,
		UnimplementedEventAnnotationConfigServiceServer{})
	RegisterUserEventCreationConfigServiceServer(target,
		UnimplementedUserEventCreationConfigServiceServer{})
	return nil
}

// HasKey returns whether the given Event has a key provided in the model.
func (e *Event) HasKey() bool {
	return e.GetKey() != nil
}

// HasKey returns whether the given EventRequest has a key provided in the request.
func (e *EventRequest) HasKey() bool {
	return e.GetKey() != nil
}

// HasKey returns whether the given EventAnnotationConfig has a key provided in the model.
func (e *EventAnnotationConfig) HasKey() bool {
	return e.GetKey() != nil
}

// HasKey returns whether the given EventAnnotationConfigRequest has a key provided in the request.
func (e *EventAnnotationConfigRequest) HasKey() bool {
	return e.GetKey() != nil
}

// HasKey returns whether the given EventAnnotationConfigSetRequest has a key provided in the request.
func (e *EventAnnotationConfigSetRequest) HasKey() bool {
	return e.GetValue().HasKey()
}

// HasKey returns whether the given EventAnnotationConfigDeleteRequest has a key provided in the request.
func (e *EventAnnotationConfigDeleteRequest) HasKey() bool {
	return e.GetKey() != nil
}

// HasKey returns whether the given UserEventCreationConfig has a key provided in the model.
func (u *UserEventCreationConfig) HasKey() bool {
	return u.GetKey() != nil
}

// HasKey returns whether the given UserEventCreationConfigRequest has a key provided in the request.
func (u *UserEventCreationConfigRequest) HasKey() bool {
	return u.GetKey() != nil
}

// HasKey returns whether the given UserEventCreationConfigSetRequest has a key provided in the request.
func (u *UserEventCreationConfigSetRequest) HasKey() bool {
	return u.GetValue().HasKey()
}

// HasKey returns whether the given UserEventCreationConfigDeleteRequest has a key provided in the request.
func (u *UserEventCreationConfigDeleteRequest) HasKey() bool {
	return u.GetKey() != nil
}

// PassesPartialEqFilter returns whether this ComponentType matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (c ComponentType) PassesPartialEqFilter(cmp ComponentType) bool {
	if cmp != ComponentType(0) {
		return c == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether this EventSeverity matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (e EventSeverity) PassesPartialEqFilter(cmp EventSeverity) bool {
	if cmp != EventSeverity(0) {
		return e == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether the EventAck matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (e *EventAck) PassesPartialEqFilter(cmp *EventAck) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if e == nil {
		return false
	}

	if cmp.Ack != nil {
		if e.Ack == nil {
			return false
		}
		if e.Ack.Value != cmp.Ack.Value {
			return false
		}
	}

	if cmp.Acker != nil {
		if e.Acker == nil {
			return false
		}
		if e.Acker.Value != cmp.Acker.Value {
			return false
		}
	}

	if cmp.AckTime != nil {
		if cmp.AckTime.Seconds != 0 {
			if e.AckTime.Seconds != cmp.AckTime.Seconds {
				return false
			}
		}
		if cmp.AckTime.Nanos != 0 {
			if e.AckTime.Nanos != cmp.AckTime.Nanos {
				return false
			}
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the EventComponent matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (e *EventComponent) PassesPartialEqFilter(cmp *EventComponent) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if e == nil {
		return false
	}
	if !e.Type.PassesPartialEqFilter(cmp.Type) {
		return false
	}
	if len(cmp.Components) > len(e.Components) {
		return false
	}
	for k, filt := range cmp.Components {
		self, exists := e.Components[k]
		if !exists || filt != self {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the EventComponents matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (e *EventComponents) PassesPartialEqFilter(cmp *EventComponents) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if e == nil {
		return false
	}
	if len(e.Components) != len(cmp.Components) {
		return false
	}
	for i, f := range e.Components {
		if !f.PassesPartialEqFilter(cmp.Components[i]) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the EventData matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (e *EventData) PassesPartialEqFilter(cmp *EventData) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if e == nil {
		return false
	}
	if len(cmp.Data) > len(e.Data) {
		return false
	}
	for k, filt := range cmp.Data {
		self, exists := e.Data[k]
		if !exists || filt != self {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the EventNote matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (e *EventNote) PassesPartialEqFilter(cmp *EventNote) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if e == nil {
		return false
	}

	if cmp.Note != nil {
		if e.Note == nil {
			return false
		}
		if e.Note.Value != cmp.Note.Value {
			return false
		}
	}

	if cmp.NoteCreator != nil {
		if e.NoteCreator == nil {
			return false
		}
		if e.NoteCreator.Value != cmp.NoteCreator.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the EventNoteConfig matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (e *EventNoteConfig) PassesPartialEqFilter(cmp *EventNoteConfig) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if e == nil {
		return false
	}

	if cmp.Note != nil {
		if e.Note == nil {
			return false
		}
		if e.Note.Value != cmp.Note.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the EventNotes matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (e *EventNotes) PassesPartialEqFilter(cmp *EventNotes) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if e == nil {
		return false
	}
	if len(cmp.Notes) > len(e.Notes) {
		return false
	}
	for k, filt := range cmp.Notes {
		self, exists := e.Notes[k]
		if !exists || !self.PassesPartialEqFilter(filt) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the EventNotesConfig matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (e *EventNotesConfig) PassesPartialEqFilter(cmp *EventNotesConfig) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if e == nil {
		return false
	}
	if len(cmp.Notes) > len(e.Notes) {
		return false
	}
	for k, filt := range cmp.Notes {
		self, exists := e.Notes[k]
		if !exists || !self.PassesPartialEqFilter(filt) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the EventRead matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (e *EventRead) PassesPartialEqFilter(cmp *EventRead) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if e == nil {
		return false
	}

	if cmp.Read != nil {
		if e.Read == nil {
			return false
		}
		if e.Read.Value != cmp.Read.Value {
			return false
		}
	}

	if cmp.Reader != nil {
		if e.Reader == nil {
			return false
		}
		if e.Reader.Value != cmp.Reader.Value {
			return false
		}
	}

	if cmp.ReadTime != nil {
		if cmp.ReadTime.Seconds != 0 {
			if e.ReadTime.Seconds != cmp.ReadTime.Seconds {
				return false
			}
		}
		if cmp.ReadTime.Nanos != 0 {
			if e.ReadTime.Nanos != cmp.ReadTime.Nanos {
				return false
			}
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the EventKey matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (e *EventKey) PassesPartialEqFilter(cmp *EventKey) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if e == nil {
		return false
	}

	if cmp.Key != nil {
		if e.Key == nil {
			return false
		}
		if e.Key.Value != cmp.Key.Value {
			return false
		}
	}

	if cmp.Timestamp != nil {
		if cmp.Timestamp.Seconds != 0 {
			if e.Timestamp.Seconds != cmp.Timestamp.Seconds {
				return false
			}
		}
		if cmp.Timestamp.Nanos != 0 {
			if e.Timestamp.Nanos != cmp.Timestamp.Nanos {
				return false
			}
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the UserEventCreationKey matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (u *UserEventCreationKey) PassesPartialEqFilter(cmp *UserEventCreationKey) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if u == nil {
		return false
	}

	if cmp.Key != nil {
		if u.Key == nil {
			return false
		}
		if u.Key.Value != cmp.Key.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the Event matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (e *Event) PassesPartialEqFilter(cmp *Event) bool {
	// if the resource is nil, there is nothing to send to the client
	if e == nil {
		return false
	}

	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if !e.Key.PassesPartialEqFilter(cmp.Key) {
		return false
	}

	if !e.Severity.PassesPartialEqFilter(cmp.Severity) {
		return false
	}

	if cmp.Title != nil {
		if e.Title == nil {
			return false
		}
		if e.Title.Value != cmp.Title.Value {
			return false
		}
	}

	if cmp.Description != nil {
		if e.Description == nil {
			return false
		}
		if e.Description.Value != cmp.Description.Value {
			return false
		}
	}

	if cmp.EventType != nil {
		if e.EventType == nil {
			return false
		}
		if e.EventType.Value != cmp.EventType.Value {
			return false
		}
	}

	if !e.Data.PassesPartialEqFilter(cmp.Data) {
		return false
	}

	if !e.Components.PassesPartialEqFilter(cmp.Components) {
		return false
	}

	if !e.Ack.PassesPartialEqFilter(cmp.Ack) {
		return false
	}

	if !e.Notes.PassesPartialEqFilter(cmp.Notes) {
		return false
	}

	if cmp.LastUpdatedTime != nil {
		if cmp.LastUpdatedTime.Seconds != 0 {
			if e.LastUpdatedTime.Seconds != cmp.LastUpdatedTime.Seconds {
				return false
			}
		}
		if cmp.LastUpdatedTime.Nanos != 0 {
			if e.LastUpdatedTime.Nanos != cmp.LastUpdatedTime.Nanos {
				return false
			}
		}
	}

	if !e.Read.PassesPartialEqFilter(cmp.Read) {
		return false
	}

	if cmp.RuleId != nil {
		if e.RuleId == nil {
			return false
		}
		if e.RuleId.Value != cmp.RuleId.Value {
			return false
		}
	}

	return true
}

// MatchesAnyPartialEqFilter returns whether the receiver matches any filters in the given set.
func (e *Event) MatchesAnyPartialEqFilter(filters []*Event) bool {
	if len(filters) == 0 {
		return true
	}

	for _, filt := range filters {
		if e.PassesPartialEqFilter(filt) {
			return true
		}
	}

	return false
}

// PassesPartialEqFilter returns whether the EventAnnotationConfig matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (e *EventAnnotationConfig) PassesPartialEqFilter(cmp *EventAnnotationConfig) bool {
	// if the resource is nil, there is nothing to send to the client
	if e == nil {
		return false
	}

	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if !e.Key.PassesPartialEqFilter(cmp.Key) {
		return false
	}

	if cmp.Ack != nil {
		if e.Ack == nil {
			return false
		}
		if e.Ack.Value != cmp.Ack.Value {
			return false
		}
	}

	if !e.Notes.PassesPartialEqFilter(cmp.Notes) {
		return false
	}

	if cmp.Read != nil {
		if e.Read == nil {
			return false
		}
		if e.Read.Value != cmp.Read.Value {
			return false
		}
	}

	return true
}

// MatchesAnyPartialEqFilter returns whether the receiver matches any filters in the given set.
func (e *EventAnnotationConfig) MatchesAnyPartialEqFilter(filters []*EventAnnotationConfig) bool {
	if len(filters) == 0 {
		return true
	}

	for _, filt := range filters {
		if e.PassesPartialEqFilter(filt) {
			return true
		}
	}

	return false
}

// PassesPartialEqFilter returns whether the UserEventCreationConfig matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (u *UserEventCreationConfig) PassesPartialEqFilter(cmp *UserEventCreationConfig) bool {
	// if the resource is nil, there is nothing to send to the client
	if u == nil {
		return false
	}

	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if !u.Key.PassesPartialEqFilter(cmp.Key) {
		return false
	}

	if !u.Severity.PassesPartialEqFilter(cmp.Severity) {
		return false
	}

	if cmp.Title != nil {
		if u.Title == nil {
			return false
		}
		if u.Title.Value != cmp.Title.Value {
			return false
		}
	}

	if cmp.Description != nil {
		if u.Description == nil {
			return false
		}
		if u.Description.Value != cmp.Description.Value {
			return false
		}
	}

	if cmp.EventType != nil {
		if u.EventType == nil {
			return false
		}
		if u.EventType.Value != cmp.EventType.Value {
			return false
		}
	}

	if cmp.RuleId != nil {
		if u.RuleId == nil {
			return false
		}
		if u.RuleId.Value != cmp.RuleId.Value {
			return false
		}
	}

	if !u.Components.PassesPartialEqFilter(cmp.Components) {
		return false
	}

	if cmp.StartTime != nil {
		if cmp.StartTime.Seconds != 0 {
			if u.StartTime.Seconds != cmp.StartTime.Seconds {
				return false
			}
		}
		if cmp.StartTime.Nanos != 0 {
			if u.StartTime.Nanos != cmp.StartTime.Nanos {
				return false
			}
		}
	}

	return true
}

// MatchesAnyPartialEqFilter returns whether the receiver matches any filters in the given set.
func (u *UserEventCreationConfig) MatchesAnyPartialEqFilter(filters []*UserEventCreationConfig) bool {
	if len(filters) == 0 {
		return true
	}

	for _, filt := range filters {
		if u.PassesPartialEqFilter(filt) {
			return true
		}
	}

	return false
}
