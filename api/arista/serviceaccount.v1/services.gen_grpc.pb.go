// Copyright (c) 2020 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

//
// Code generated by boomtown. DO NOT EDIT.
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: arista/serviceaccount.v1/services.gen.proto

package serviceaccount

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AccountService_GetOne_FullMethodName        = "/arista.serviceaccount.v1.AccountService/GetOne"
	AccountService_GetSome_FullMethodName       = "/arista.serviceaccount.v1.AccountService/GetSome"
	AccountService_GetAll_FullMethodName        = "/arista.serviceaccount.v1.AccountService/GetAll"
	AccountService_Subscribe_FullMethodName     = "/arista.serviceaccount.v1.AccountService/Subscribe"
	AccountService_GetMeta_FullMethodName       = "/arista.serviceaccount.v1.AccountService/GetMeta"
	AccountService_SubscribeMeta_FullMethodName = "/arista.serviceaccount.v1.AccountService/SubscribeMeta"
)

// AccountServiceClient is the client API for AccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountServiceClient interface {
	GetOne(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountResponse, error)
	GetSome(ctx context.Context, in *AccountSomeRequest, opts ...grpc.CallOption) (AccountService_GetSomeClient, error)
	GetAll(ctx context.Context, in *AccountStreamRequest, opts ...grpc.CallOption) (AccountService_GetAllClient, error)
	Subscribe(ctx context.Context, in *AccountStreamRequest, opts ...grpc.CallOption) (AccountService_SubscribeClient, error)
	GetMeta(ctx context.Context, in *AccountStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error)
	SubscribeMeta(ctx context.Context, in *AccountStreamRequest, opts ...grpc.CallOption) (AccountService_SubscribeMetaClient, error)
}

type accountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountServiceClient(cc grpc.ClientConnInterface) AccountServiceClient {
	return &accountServiceClient{cc}
}

func (c *accountServiceClient) GetOne(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountResponse, error) {
	out := new(AccountResponse)
	err := c.cc.Invoke(ctx, AccountService_GetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetSome(ctx context.Context, in *AccountSomeRequest, opts ...grpc.CallOption) (AccountService_GetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &AccountService_ServiceDesc.Streams[0], AccountService_GetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &accountServiceGetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AccountService_GetSomeClient interface {
	Recv() (*AccountSomeResponse, error)
	grpc.ClientStream
}

type accountServiceGetSomeClient struct {
	grpc.ClientStream
}

func (x *accountServiceGetSomeClient) Recv() (*AccountSomeResponse, error) {
	m := new(AccountSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *accountServiceClient) GetAll(ctx context.Context, in *AccountStreamRequest, opts ...grpc.CallOption) (AccountService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &AccountService_ServiceDesc.Streams[1], AccountService_GetAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &accountServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AccountService_GetAllClient interface {
	Recv() (*AccountStreamResponse, error)
	grpc.ClientStream
}

type accountServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *accountServiceGetAllClient) Recv() (*AccountStreamResponse, error) {
	m := new(AccountStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *accountServiceClient) Subscribe(ctx context.Context, in *AccountStreamRequest, opts ...grpc.CallOption) (AccountService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &AccountService_ServiceDesc.Streams[2], AccountService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &accountServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AccountService_SubscribeClient interface {
	Recv() (*AccountStreamResponse, error)
	grpc.ClientStream
}

type accountServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *accountServiceSubscribeClient) Recv() (*AccountStreamResponse, error) {
	m := new(AccountStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *accountServiceClient) GetMeta(ctx context.Context, in *AccountStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error) {
	out := new(MetaResponse)
	err := c.cc.Invoke(ctx, AccountService_GetMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) SubscribeMeta(ctx context.Context, in *AccountStreamRequest, opts ...grpc.CallOption) (AccountService_SubscribeMetaClient, error) {
	stream, err := c.cc.NewStream(ctx, &AccountService_ServiceDesc.Streams[3], AccountService_SubscribeMeta_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &accountServiceSubscribeMetaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AccountService_SubscribeMetaClient interface {
	Recv() (*MetaResponse, error)
	grpc.ClientStream
}

type accountServiceSubscribeMetaClient struct {
	grpc.ClientStream
}

func (x *accountServiceSubscribeMetaClient) Recv() (*MetaResponse, error) {
	m := new(MetaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AccountServiceServer is the server API for AccountService service.
// All implementations must embed UnimplementedAccountServiceServer
// for forward compatibility
type AccountServiceServer interface {
	GetOne(context.Context, *AccountRequest) (*AccountResponse, error)
	GetSome(*AccountSomeRequest, AccountService_GetSomeServer) error
	GetAll(*AccountStreamRequest, AccountService_GetAllServer) error
	Subscribe(*AccountStreamRequest, AccountService_SubscribeServer) error
	GetMeta(context.Context, *AccountStreamRequest) (*MetaResponse, error)
	SubscribeMeta(*AccountStreamRequest, AccountService_SubscribeMetaServer) error
	mustEmbedUnimplementedAccountServiceServer()
}

// UnimplementedAccountServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccountServiceServer struct {
}

func (UnimplementedAccountServiceServer) GetOne(context.Context, *AccountRequest) (*AccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedAccountServiceServer) GetSome(*AccountSomeRequest, AccountService_GetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSome not implemented")
}
func (UnimplementedAccountServiceServer) GetAll(*AccountStreamRequest, AccountService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedAccountServiceServer) Subscribe(*AccountStreamRequest, AccountService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedAccountServiceServer) GetMeta(context.Context, *AccountStreamRequest) (*MetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeta not implemented")
}
func (UnimplementedAccountServiceServer) SubscribeMeta(*AccountStreamRequest, AccountService_SubscribeMetaServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMeta not implemented")
}
func (UnimplementedAccountServiceServer) mustEmbedUnimplementedAccountServiceServer() {}

// UnsafeAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServiceServer will
// result in compilation errors.
type UnsafeAccountServiceServer interface {
	mustEmbedUnimplementedAccountServiceServer()
}

func RegisterAccountServiceServer(s grpc.ServiceRegistrar, srv AccountServiceServer) {
	s.RegisterService(&AccountService_ServiceDesc, srv)
}

func _AccountService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetOne(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AccountSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AccountServiceServer).GetSome(m, &accountServiceGetSomeServer{stream})
}

type AccountService_GetSomeServer interface {
	Send(*AccountSomeResponse) error
	grpc.ServerStream
}

type accountServiceGetSomeServer struct {
	grpc.ServerStream
}

func (x *accountServiceGetSomeServer) Send(m *AccountSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AccountService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AccountStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AccountServiceServer).GetAll(m, &accountServiceGetAllServer{stream})
}

type AccountService_GetAllServer interface {
	Send(*AccountStreamResponse) error
	grpc.ServerStream
}

type accountServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *accountServiceGetAllServer) Send(m *AccountStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AccountService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AccountStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AccountServiceServer).Subscribe(m, &accountServiceSubscribeServer{stream})
}

type AccountService_SubscribeServer interface {
	Send(*AccountStreamResponse) error
	grpc.ServerStream
}

type accountServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *accountServiceSubscribeServer) Send(m *AccountStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AccountService_GetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_GetMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetMeta(ctx, req.(*AccountStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_SubscribeMeta_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AccountStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AccountServiceServer).SubscribeMeta(m, &accountServiceSubscribeMetaServer{stream})
}

type AccountService_SubscribeMetaServer interface {
	Send(*MetaResponse) error
	grpc.ServerStream
}

type accountServiceSubscribeMetaServer struct {
	grpc.ServerStream
}

func (x *accountServiceSubscribeMetaServer) Send(m *MetaResponse) error {
	return x.ServerStream.SendMsg(m)
}

// AccountService_ServiceDesc is the grpc.ServiceDesc for AccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.serviceaccount.v1.AccountService",
	HandlerType: (*AccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _AccountService_GetOne_Handler,
		},
		{
			MethodName: "GetMeta",
			Handler:    _AccountService_GetMeta_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSome",
			Handler:       _AccountService_GetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAll",
			Handler:       _AccountService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _AccountService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeMeta",
			Handler:       _AccountService_SubscribeMeta_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/serviceaccount.v1/services.gen.proto",
}

const (
	AccountConfigService_GetOne_FullMethodName        = "/arista.serviceaccount.v1.AccountConfigService/GetOne"
	AccountConfigService_GetSome_FullMethodName       = "/arista.serviceaccount.v1.AccountConfigService/GetSome"
	AccountConfigService_GetAll_FullMethodName        = "/arista.serviceaccount.v1.AccountConfigService/GetAll"
	AccountConfigService_Subscribe_FullMethodName     = "/arista.serviceaccount.v1.AccountConfigService/Subscribe"
	AccountConfigService_GetMeta_FullMethodName       = "/arista.serviceaccount.v1.AccountConfigService/GetMeta"
	AccountConfigService_SubscribeMeta_FullMethodName = "/arista.serviceaccount.v1.AccountConfigService/SubscribeMeta"
	AccountConfigService_Set_FullMethodName           = "/arista.serviceaccount.v1.AccountConfigService/Set"
	AccountConfigService_SetSome_FullMethodName       = "/arista.serviceaccount.v1.AccountConfigService/SetSome"
	AccountConfigService_Delete_FullMethodName        = "/arista.serviceaccount.v1.AccountConfigService/Delete"
	AccountConfigService_DeleteSome_FullMethodName    = "/arista.serviceaccount.v1.AccountConfigService/DeleteSome"
	AccountConfigService_DeleteAll_FullMethodName     = "/arista.serviceaccount.v1.AccountConfigService/DeleteAll"
)

// AccountConfigServiceClient is the client API for AccountConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountConfigServiceClient interface {
	GetOne(ctx context.Context, in *AccountConfigRequest, opts ...grpc.CallOption) (*AccountConfigResponse, error)
	GetSome(ctx context.Context, in *AccountConfigSomeRequest, opts ...grpc.CallOption) (AccountConfigService_GetSomeClient, error)
	GetAll(ctx context.Context, in *AccountConfigStreamRequest, opts ...grpc.CallOption) (AccountConfigService_GetAllClient, error)
	Subscribe(ctx context.Context, in *AccountConfigStreamRequest, opts ...grpc.CallOption) (AccountConfigService_SubscribeClient, error)
	GetMeta(ctx context.Context, in *AccountConfigStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error)
	SubscribeMeta(ctx context.Context, in *AccountConfigStreamRequest, opts ...grpc.CallOption) (AccountConfigService_SubscribeMetaClient, error)
	Set(ctx context.Context, in *AccountConfigSetRequest, opts ...grpc.CallOption) (*AccountConfigSetResponse, error)
	SetSome(ctx context.Context, in *AccountConfigSetSomeRequest, opts ...grpc.CallOption) (AccountConfigService_SetSomeClient, error)
	Delete(ctx context.Context, in *AccountConfigDeleteRequest, opts ...grpc.CallOption) (*AccountConfigDeleteResponse, error)
	DeleteSome(ctx context.Context, in *AccountConfigDeleteSomeRequest, opts ...grpc.CallOption) (AccountConfigService_DeleteSomeClient, error)
	DeleteAll(ctx context.Context, in *AccountConfigDeleteAllRequest, opts ...grpc.CallOption) (AccountConfigService_DeleteAllClient, error)
}

type accountConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountConfigServiceClient(cc grpc.ClientConnInterface) AccountConfigServiceClient {
	return &accountConfigServiceClient{cc}
}

func (c *accountConfigServiceClient) GetOne(ctx context.Context, in *AccountConfigRequest, opts ...grpc.CallOption) (*AccountConfigResponse, error) {
	out := new(AccountConfigResponse)
	err := c.cc.Invoke(ctx, AccountConfigService_GetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountConfigServiceClient) GetSome(ctx context.Context, in *AccountConfigSomeRequest, opts ...grpc.CallOption) (AccountConfigService_GetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &AccountConfigService_ServiceDesc.Streams[0], AccountConfigService_GetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &accountConfigServiceGetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AccountConfigService_GetSomeClient interface {
	Recv() (*AccountConfigSomeResponse, error)
	grpc.ClientStream
}

type accountConfigServiceGetSomeClient struct {
	grpc.ClientStream
}

func (x *accountConfigServiceGetSomeClient) Recv() (*AccountConfigSomeResponse, error) {
	m := new(AccountConfigSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *accountConfigServiceClient) GetAll(ctx context.Context, in *AccountConfigStreamRequest, opts ...grpc.CallOption) (AccountConfigService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &AccountConfigService_ServiceDesc.Streams[1], AccountConfigService_GetAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &accountConfigServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AccountConfigService_GetAllClient interface {
	Recv() (*AccountConfigStreamResponse, error)
	grpc.ClientStream
}

type accountConfigServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *accountConfigServiceGetAllClient) Recv() (*AccountConfigStreamResponse, error) {
	m := new(AccountConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *accountConfigServiceClient) Subscribe(ctx context.Context, in *AccountConfigStreamRequest, opts ...grpc.CallOption) (AccountConfigService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &AccountConfigService_ServiceDesc.Streams[2], AccountConfigService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &accountConfigServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AccountConfigService_SubscribeClient interface {
	Recv() (*AccountConfigStreamResponse, error)
	grpc.ClientStream
}

type accountConfigServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *accountConfigServiceSubscribeClient) Recv() (*AccountConfigStreamResponse, error) {
	m := new(AccountConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *accountConfigServiceClient) GetMeta(ctx context.Context, in *AccountConfigStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error) {
	out := new(MetaResponse)
	err := c.cc.Invoke(ctx, AccountConfigService_GetMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountConfigServiceClient) SubscribeMeta(ctx context.Context, in *AccountConfigStreamRequest, opts ...grpc.CallOption) (AccountConfigService_SubscribeMetaClient, error) {
	stream, err := c.cc.NewStream(ctx, &AccountConfigService_ServiceDesc.Streams[3], AccountConfigService_SubscribeMeta_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &accountConfigServiceSubscribeMetaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AccountConfigService_SubscribeMetaClient interface {
	Recv() (*MetaResponse, error)
	grpc.ClientStream
}

type accountConfigServiceSubscribeMetaClient struct {
	grpc.ClientStream
}

func (x *accountConfigServiceSubscribeMetaClient) Recv() (*MetaResponse, error) {
	m := new(MetaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *accountConfigServiceClient) Set(ctx context.Context, in *AccountConfigSetRequest, opts ...grpc.CallOption) (*AccountConfigSetResponse, error) {
	out := new(AccountConfigSetResponse)
	err := c.cc.Invoke(ctx, AccountConfigService_Set_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountConfigServiceClient) SetSome(ctx context.Context, in *AccountConfigSetSomeRequest, opts ...grpc.CallOption) (AccountConfigService_SetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &AccountConfigService_ServiceDesc.Streams[4], AccountConfigService_SetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &accountConfigServiceSetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AccountConfigService_SetSomeClient interface {
	Recv() (*AccountConfigSetSomeResponse, error)
	grpc.ClientStream
}

type accountConfigServiceSetSomeClient struct {
	grpc.ClientStream
}

func (x *accountConfigServiceSetSomeClient) Recv() (*AccountConfigSetSomeResponse, error) {
	m := new(AccountConfigSetSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *accountConfigServiceClient) Delete(ctx context.Context, in *AccountConfigDeleteRequest, opts ...grpc.CallOption) (*AccountConfigDeleteResponse, error) {
	out := new(AccountConfigDeleteResponse)
	err := c.cc.Invoke(ctx, AccountConfigService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountConfigServiceClient) DeleteSome(ctx context.Context, in *AccountConfigDeleteSomeRequest, opts ...grpc.CallOption) (AccountConfigService_DeleteSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &AccountConfigService_ServiceDesc.Streams[5], AccountConfigService_DeleteSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &accountConfigServiceDeleteSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AccountConfigService_DeleteSomeClient interface {
	Recv() (*AccountConfigDeleteSomeResponse, error)
	grpc.ClientStream
}

type accountConfigServiceDeleteSomeClient struct {
	grpc.ClientStream
}

func (x *accountConfigServiceDeleteSomeClient) Recv() (*AccountConfigDeleteSomeResponse, error) {
	m := new(AccountConfigDeleteSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *accountConfigServiceClient) DeleteAll(ctx context.Context, in *AccountConfigDeleteAllRequest, opts ...grpc.CallOption) (AccountConfigService_DeleteAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &AccountConfigService_ServiceDesc.Streams[6], AccountConfigService_DeleteAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &accountConfigServiceDeleteAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AccountConfigService_DeleteAllClient interface {
	Recv() (*AccountConfigDeleteAllResponse, error)
	grpc.ClientStream
}

type accountConfigServiceDeleteAllClient struct {
	grpc.ClientStream
}

func (x *accountConfigServiceDeleteAllClient) Recv() (*AccountConfigDeleteAllResponse, error) {
	m := new(AccountConfigDeleteAllResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AccountConfigServiceServer is the server API for AccountConfigService service.
// All implementations must embed UnimplementedAccountConfigServiceServer
// for forward compatibility
type AccountConfigServiceServer interface {
	GetOne(context.Context, *AccountConfigRequest) (*AccountConfigResponse, error)
	GetSome(*AccountConfigSomeRequest, AccountConfigService_GetSomeServer) error
	GetAll(*AccountConfigStreamRequest, AccountConfigService_GetAllServer) error
	Subscribe(*AccountConfigStreamRequest, AccountConfigService_SubscribeServer) error
	GetMeta(context.Context, *AccountConfigStreamRequest) (*MetaResponse, error)
	SubscribeMeta(*AccountConfigStreamRequest, AccountConfigService_SubscribeMetaServer) error
	Set(context.Context, *AccountConfigSetRequest) (*AccountConfigSetResponse, error)
	SetSome(*AccountConfigSetSomeRequest, AccountConfigService_SetSomeServer) error
	Delete(context.Context, *AccountConfigDeleteRequest) (*AccountConfigDeleteResponse, error)
	DeleteSome(*AccountConfigDeleteSomeRequest, AccountConfigService_DeleteSomeServer) error
	DeleteAll(*AccountConfigDeleteAllRequest, AccountConfigService_DeleteAllServer) error
	mustEmbedUnimplementedAccountConfigServiceServer()
}

// UnimplementedAccountConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccountConfigServiceServer struct {
}

func (UnimplementedAccountConfigServiceServer) GetOne(context.Context, *AccountConfigRequest) (*AccountConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedAccountConfigServiceServer) GetSome(*AccountConfigSomeRequest, AccountConfigService_GetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSome not implemented")
}
func (UnimplementedAccountConfigServiceServer) GetAll(*AccountConfigStreamRequest, AccountConfigService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedAccountConfigServiceServer) Subscribe(*AccountConfigStreamRequest, AccountConfigService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedAccountConfigServiceServer) GetMeta(context.Context, *AccountConfigStreamRequest) (*MetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeta not implemented")
}
func (UnimplementedAccountConfigServiceServer) SubscribeMeta(*AccountConfigStreamRequest, AccountConfigService_SubscribeMetaServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMeta not implemented")
}
func (UnimplementedAccountConfigServiceServer) Set(context.Context, *AccountConfigSetRequest) (*AccountConfigSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedAccountConfigServiceServer) SetSome(*AccountConfigSetSomeRequest, AccountConfigService_SetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method SetSome not implemented")
}
func (UnimplementedAccountConfigServiceServer) Delete(context.Context, *AccountConfigDeleteRequest) (*AccountConfigDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAccountConfigServiceServer) DeleteSome(*AccountConfigDeleteSomeRequest, AccountConfigService_DeleteSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteSome not implemented")
}
func (UnimplementedAccountConfigServiceServer) DeleteAll(*AccountConfigDeleteAllRequest, AccountConfigService_DeleteAllServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteAll not implemented")
}
func (UnimplementedAccountConfigServiceServer) mustEmbedUnimplementedAccountConfigServiceServer() {}

// UnsafeAccountConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountConfigServiceServer will
// result in compilation errors.
type UnsafeAccountConfigServiceServer interface {
	mustEmbedUnimplementedAccountConfigServiceServer()
}

func RegisterAccountConfigServiceServer(s grpc.ServiceRegistrar, srv AccountConfigServiceServer) {
	s.RegisterService(&AccountConfigService_ServiceDesc, srv)
}

func _AccountConfigService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountConfigServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountConfigService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountConfigServiceServer).GetOne(ctx, req.(*AccountConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountConfigService_GetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AccountConfigSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AccountConfigServiceServer).GetSome(m, &accountConfigServiceGetSomeServer{stream})
}

type AccountConfigService_GetSomeServer interface {
	Send(*AccountConfigSomeResponse) error
	grpc.ServerStream
}

type accountConfigServiceGetSomeServer struct {
	grpc.ServerStream
}

func (x *accountConfigServiceGetSomeServer) Send(m *AccountConfigSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AccountConfigService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AccountConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AccountConfigServiceServer).GetAll(m, &accountConfigServiceGetAllServer{stream})
}

type AccountConfigService_GetAllServer interface {
	Send(*AccountConfigStreamResponse) error
	grpc.ServerStream
}

type accountConfigServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *accountConfigServiceGetAllServer) Send(m *AccountConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AccountConfigService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AccountConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AccountConfigServiceServer).Subscribe(m, &accountConfigServiceSubscribeServer{stream})
}

type AccountConfigService_SubscribeServer interface {
	Send(*AccountConfigStreamResponse) error
	grpc.ServerStream
}

type accountConfigServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *accountConfigServiceSubscribeServer) Send(m *AccountConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AccountConfigService_GetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountConfigStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountConfigServiceServer).GetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountConfigService_GetMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountConfigServiceServer).GetMeta(ctx, req.(*AccountConfigStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountConfigService_SubscribeMeta_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AccountConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AccountConfigServiceServer).SubscribeMeta(m, &accountConfigServiceSubscribeMetaServer{stream})
}

type AccountConfigService_SubscribeMetaServer interface {
	Send(*MetaResponse) error
	grpc.ServerStream
}

type accountConfigServiceSubscribeMetaServer struct {
	grpc.ServerStream
}

func (x *accountConfigServiceSubscribeMetaServer) Send(m *MetaResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AccountConfigService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountConfigSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountConfigServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountConfigService_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountConfigServiceServer).Set(ctx, req.(*AccountConfigSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountConfigService_SetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AccountConfigSetSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AccountConfigServiceServer).SetSome(m, &accountConfigServiceSetSomeServer{stream})
}

type AccountConfigService_SetSomeServer interface {
	Send(*AccountConfigSetSomeResponse) error
	grpc.ServerStream
}

type accountConfigServiceSetSomeServer struct {
	grpc.ServerStream
}

func (x *accountConfigServiceSetSomeServer) Send(m *AccountConfigSetSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AccountConfigService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountConfigDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountConfigServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountConfigService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountConfigServiceServer).Delete(ctx, req.(*AccountConfigDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountConfigService_DeleteSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AccountConfigDeleteSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AccountConfigServiceServer).DeleteSome(m, &accountConfigServiceDeleteSomeServer{stream})
}

type AccountConfigService_DeleteSomeServer interface {
	Send(*AccountConfigDeleteSomeResponse) error
	grpc.ServerStream
}

type accountConfigServiceDeleteSomeServer struct {
	grpc.ServerStream
}

func (x *accountConfigServiceDeleteSomeServer) Send(m *AccountConfigDeleteSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AccountConfigService_DeleteAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AccountConfigDeleteAllRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AccountConfigServiceServer).DeleteAll(m, &accountConfigServiceDeleteAllServer{stream})
}

type AccountConfigService_DeleteAllServer interface {
	Send(*AccountConfigDeleteAllResponse) error
	grpc.ServerStream
}

type accountConfigServiceDeleteAllServer struct {
	grpc.ServerStream
}

func (x *accountConfigServiceDeleteAllServer) Send(m *AccountConfigDeleteAllResponse) error {
	return x.ServerStream.SendMsg(m)
}

// AccountConfigService_ServiceDesc is the grpc.ServiceDesc for AccountConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.serviceaccount.v1.AccountConfigService",
	HandlerType: (*AccountConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _AccountConfigService_GetOne_Handler,
		},
		{
			MethodName: "GetMeta",
			Handler:    _AccountConfigService_GetMeta_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _AccountConfigService_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AccountConfigService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSome",
			Handler:       _AccountConfigService_GetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAll",
			Handler:       _AccountConfigService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _AccountConfigService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeMeta",
			Handler:       _AccountConfigService_SubscribeMeta_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SetSome",
			Handler:       _AccountConfigService_SetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteSome",
			Handler:       _AccountConfigService_DeleteSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteAll",
			Handler:       _AccountConfigService_DeleteAll_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/serviceaccount.v1/services.gen.proto",
}

const (
	TokenService_GetOne_FullMethodName        = "/arista.serviceaccount.v1.TokenService/GetOne"
	TokenService_GetSome_FullMethodName       = "/arista.serviceaccount.v1.TokenService/GetSome"
	TokenService_GetAll_FullMethodName        = "/arista.serviceaccount.v1.TokenService/GetAll"
	TokenService_Subscribe_FullMethodName     = "/arista.serviceaccount.v1.TokenService/Subscribe"
	TokenService_GetMeta_FullMethodName       = "/arista.serviceaccount.v1.TokenService/GetMeta"
	TokenService_SubscribeMeta_FullMethodName = "/arista.serviceaccount.v1.TokenService/SubscribeMeta"
)

// TokenServiceClient is the client API for TokenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokenServiceClient interface {
	GetOne(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error)
	GetSome(ctx context.Context, in *TokenSomeRequest, opts ...grpc.CallOption) (TokenService_GetSomeClient, error)
	GetAll(ctx context.Context, in *TokenStreamRequest, opts ...grpc.CallOption) (TokenService_GetAllClient, error)
	Subscribe(ctx context.Context, in *TokenStreamRequest, opts ...grpc.CallOption) (TokenService_SubscribeClient, error)
	GetMeta(ctx context.Context, in *TokenStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error)
	SubscribeMeta(ctx context.Context, in *TokenStreamRequest, opts ...grpc.CallOption) (TokenService_SubscribeMetaClient, error)
}

type tokenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTokenServiceClient(cc grpc.ClientConnInterface) TokenServiceClient {
	return &tokenServiceClient{cc}
}

func (c *tokenServiceClient) GetOne(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, TokenService_GetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) GetSome(ctx context.Context, in *TokenSomeRequest, opts ...grpc.CallOption) (TokenService_GetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &TokenService_ServiceDesc.Streams[0], TokenService_GetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tokenServiceGetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TokenService_GetSomeClient interface {
	Recv() (*TokenSomeResponse, error)
	grpc.ClientStream
}

type tokenServiceGetSomeClient struct {
	grpc.ClientStream
}

func (x *tokenServiceGetSomeClient) Recv() (*TokenSomeResponse, error) {
	m := new(TokenSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tokenServiceClient) GetAll(ctx context.Context, in *TokenStreamRequest, opts ...grpc.CallOption) (TokenService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &TokenService_ServiceDesc.Streams[1], TokenService_GetAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tokenServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TokenService_GetAllClient interface {
	Recv() (*TokenStreamResponse, error)
	grpc.ClientStream
}

type tokenServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *tokenServiceGetAllClient) Recv() (*TokenStreamResponse, error) {
	m := new(TokenStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tokenServiceClient) Subscribe(ctx context.Context, in *TokenStreamRequest, opts ...grpc.CallOption) (TokenService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &TokenService_ServiceDesc.Streams[2], TokenService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tokenServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TokenService_SubscribeClient interface {
	Recv() (*TokenStreamResponse, error)
	grpc.ClientStream
}

type tokenServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *tokenServiceSubscribeClient) Recv() (*TokenStreamResponse, error) {
	m := new(TokenStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tokenServiceClient) GetMeta(ctx context.Context, in *TokenStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error) {
	out := new(MetaResponse)
	err := c.cc.Invoke(ctx, TokenService_GetMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) SubscribeMeta(ctx context.Context, in *TokenStreamRequest, opts ...grpc.CallOption) (TokenService_SubscribeMetaClient, error) {
	stream, err := c.cc.NewStream(ctx, &TokenService_ServiceDesc.Streams[3], TokenService_SubscribeMeta_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tokenServiceSubscribeMetaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TokenService_SubscribeMetaClient interface {
	Recv() (*MetaResponse, error)
	grpc.ClientStream
}

type tokenServiceSubscribeMetaClient struct {
	grpc.ClientStream
}

func (x *tokenServiceSubscribeMetaClient) Recv() (*MetaResponse, error) {
	m := new(MetaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TokenServiceServer is the server API for TokenService service.
// All implementations must embed UnimplementedTokenServiceServer
// for forward compatibility
type TokenServiceServer interface {
	GetOne(context.Context, *TokenRequest) (*TokenResponse, error)
	GetSome(*TokenSomeRequest, TokenService_GetSomeServer) error
	GetAll(*TokenStreamRequest, TokenService_GetAllServer) error
	Subscribe(*TokenStreamRequest, TokenService_SubscribeServer) error
	GetMeta(context.Context, *TokenStreamRequest) (*MetaResponse, error)
	SubscribeMeta(*TokenStreamRequest, TokenService_SubscribeMetaServer) error
	mustEmbedUnimplementedTokenServiceServer()
}

// UnimplementedTokenServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTokenServiceServer struct {
}

func (UnimplementedTokenServiceServer) GetOne(context.Context, *TokenRequest) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedTokenServiceServer) GetSome(*TokenSomeRequest, TokenService_GetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSome not implemented")
}
func (UnimplementedTokenServiceServer) GetAll(*TokenStreamRequest, TokenService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedTokenServiceServer) Subscribe(*TokenStreamRequest, TokenService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedTokenServiceServer) GetMeta(context.Context, *TokenStreamRequest) (*MetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeta not implemented")
}
func (UnimplementedTokenServiceServer) SubscribeMeta(*TokenStreamRequest, TokenService_SubscribeMetaServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMeta not implemented")
}
func (UnimplementedTokenServiceServer) mustEmbedUnimplementedTokenServiceServer() {}

// UnsafeTokenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokenServiceServer will
// result in compilation errors.
type UnsafeTokenServiceServer interface {
	mustEmbedUnimplementedTokenServiceServer()
}

func RegisterTokenServiceServer(s grpc.ServiceRegistrar, srv TokenServiceServer) {
	s.RegisterService(&TokenService_ServiceDesc, srv)
}

func _TokenService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).GetOne(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_GetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TokenSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TokenServiceServer).GetSome(m, &tokenServiceGetSomeServer{stream})
}

type TokenService_GetSomeServer interface {
	Send(*TokenSomeResponse) error
	grpc.ServerStream
}

type tokenServiceGetSomeServer struct {
	grpc.ServerStream
}

func (x *tokenServiceGetSomeServer) Send(m *TokenSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TokenService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TokenStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TokenServiceServer).GetAll(m, &tokenServiceGetAllServer{stream})
}

type TokenService_GetAllServer interface {
	Send(*TokenStreamResponse) error
	grpc.ServerStream
}

type tokenServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *tokenServiceGetAllServer) Send(m *TokenStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TokenService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TokenStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TokenServiceServer).Subscribe(m, &tokenServiceSubscribeServer{stream})
}

type TokenService_SubscribeServer interface {
	Send(*TokenStreamResponse) error
	grpc.ServerStream
}

type tokenServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *tokenServiceSubscribeServer) Send(m *TokenStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TokenService_GetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).GetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenService_GetMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).GetMeta(ctx, req.(*TokenStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_SubscribeMeta_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TokenStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TokenServiceServer).SubscribeMeta(m, &tokenServiceSubscribeMetaServer{stream})
}

type TokenService_SubscribeMetaServer interface {
	Send(*MetaResponse) error
	grpc.ServerStream
}

type tokenServiceSubscribeMetaServer struct {
	grpc.ServerStream
}

func (x *tokenServiceSubscribeMetaServer) Send(m *MetaResponse) error {
	return x.ServerStream.SendMsg(m)
}

// TokenService_ServiceDesc is the grpc.ServiceDesc for TokenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TokenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.serviceaccount.v1.TokenService",
	HandlerType: (*TokenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _TokenService_GetOne_Handler,
		},
		{
			MethodName: "GetMeta",
			Handler:    _TokenService_GetMeta_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSome",
			Handler:       _TokenService_GetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAll",
			Handler:       _TokenService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _TokenService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeMeta",
			Handler:       _TokenService_SubscribeMeta_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/serviceaccount.v1/services.gen.proto",
}

const (
	TokenConfigService_GetOne_FullMethodName        = "/arista.serviceaccount.v1.TokenConfigService/GetOne"
	TokenConfigService_GetSome_FullMethodName       = "/arista.serviceaccount.v1.TokenConfigService/GetSome"
	TokenConfigService_GetAll_FullMethodName        = "/arista.serviceaccount.v1.TokenConfigService/GetAll"
	TokenConfigService_Subscribe_FullMethodName     = "/arista.serviceaccount.v1.TokenConfigService/Subscribe"
	TokenConfigService_GetMeta_FullMethodName       = "/arista.serviceaccount.v1.TokenConfigService/GetMeta"
	TokenConfigService_SubscribeMeta_FullMethodName = "/arista.serviceaccount.v1.TokenConfigService/SubscribeMeta"
	TokenConfigService_Set_FullMethodName           = "/arista.serviceaccount.v1.TokenConfigService/Set"
	TokenConfigService_SetSome_FullMethodName       = "/arista.serviceaccount.v1.TokenConfigService/SetSome"
	TokenConfigService_Delete_FullMethodName        = "/arista.serviceaccount.v1.TokenConfigService/Delete"
	TokenConfigService_DeleteSome_FullMethodName    = "/arista.serviceaccount.v1.TokenConfigService/DeleteSome"
	TokenConfigService_DeleteAll_FullMethodName     = "/arista.serviceaccount.v1.TokenConfigService/DeleteAll"
)

// TokenConfigServiceClient is the client API for TokenConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokenConfigServiceClient interface {
	GetOne(ctx context.Context, in *TokenConfigRequest, opts ...grpc.CallOption) (*TokenConfigResponse, error)
	GetSome(ctx context.Context, in *TokenConfigSomeRequest, opts ...grpc.CallOption) (TokenConfigService_GetSomeClient, error)
	GetAll(ctx context.Context, in *TokenConfigStreamRequest, opts ...grpc.CallOption) (TokenConfigService_GetAllClient, error)
	Subscribe(ctx context.Context, in *TokenConfigStreamRequest, opts ...grpc.CallOption) (TokenConfigService_SubscribeClient, error)
	GetMeta(ctx context.Context, in *TokenConfigStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error)
	SubscribeMeta(ctx context.Context, in *TokenConfigStreamRequest, opts ...grpc.CallOption) (TokenConfigService_SubscribeMetaClient, error)
	Set(ctx context.Context, in *TokenConfigSetRequest, opts ...grpc.CallOption) (*TokenConfigSetResponse, error)
	SetSome(ctx context.Context, in *TokenConfigSetSomeRequest, opts ...grpc.CallOption) (TokenConfigService_SetSomeClient, error)
	Delete(ctx context.Context, in *TokenConfigDeleteRequest, opts ...grpc.CallOption) (*TokenConfigDeleteResponse, error)
	DeleteSome(ctx context.Context, in *TokenConfigDeleteSomeRequest, opts ...grpc.CallOption) (TokenConfigService_DeleteSomeClient, error)
	DeleteAll(ctx context.Context, in *TokenConfigDeleteAllRequest, opts ...grpc.CallOption) (TokenConfigService_DeleteAllClient, error)
}

type tokenConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTokenConfigServiceClient(cc grpc.ClientConnInterface) TokenConfigServiceClient {
	return &tokenConfigServiceClient{cc}
}

func (c *tokenConfigServiceClient) GetOne(ctx context.Context, in *TokenConfigRequest, opts ...grpc.CallOption) (*TokenConfigResponse, error) {
	out := new(TokenConfigResponse)
	err := c.cc.Invoke(ctx, TokenConfigService_GetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenConfigServiceClient) GetSome(ctx context.Context, in *TokenConfigSomeRequest, opts ...grpc.CallOption) (TokenConfigService_GetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &TokenConfigService_ServiceDesc.Streams[0], TokenConfigService_GetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tokenConfigServiceGetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TokenConfigService_GetSomeClient interface {
	Recv() (*TokenConfigSomeResponse, error)
	grpc.ClientStream
}

type tokenConfigServiceGetSomeClient struct {
	grpc.ClientStream
}

func (x *tokenConfigServiceGetSomeClient) Recv() (*TokenConfigSomeResponse, error) {
	m := new(TokenConfigSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tokenConfigServiceClient) GetAll(ctx context.Context, in *TokenConfigStreamRequest, opts ...grpc.CallOption) (TokenConfigService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &TokenConfigService_ServiceDesc.Streams[1], TokenConfigService_GetAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tokenConfigServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TokenConfigService_GetAllClient interface {
	Recv() (*TokenConfigStreamResponse, error)
	grpc.ClientStream
}

type tokenConfigServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *tokenConfigServiceGetAllClient) Recv() (*TokenConfigStreamResponse, error) {
	m := new(TokenConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tokenConfigServiceClient) Subscribe(ctx context.Context, in *TokenConfigStreamRequest, opts ...grpc.CallOption) (TokenConfigService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &TokenConfigService_ServiceDesc.Streams[2], TokenConfigService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tokenConfigServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TokenConfigService_SubscribeClient interface {
	Recv() (*TokenConfigStreamResponse, error)
	grpc.ClientStream
}

type tokenConfigServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *tokenConfigServiceSubscribeClient) Recv() (*TokenConfigStreamResponse, error) {
	m := new(TokenConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tokenConfigServiceClient) GetMeta(ctx context.Context, in *TokenConfigStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error) {
	out := new(MetaResponse)
	err := c.cc.Invoke(ctx, TokenConfigService_GetMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenConfigServiceClient) SubscribeMeta(ctx context.Context, in *TokenConfigStreamRequest, opts ...grpc.CallOption) (TokenConfigService_SubscribeMetaClient, error) {
	stream, err := c.cc.NewStream(ctx, &TokenConfigService_ServiceDesc.Streams[3], TokenConfigService_SubscribeMeta_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tokenConfigServiceSubscribeMetaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TokenConfigService_SubscribeMetaClient interface {
	Recv() (*MetaResponse, error)
	grpc.ClientStream
}

type tokenConfigServiceSubscribeMetaClient struct {
	grpc.ClientStream
}

func (x *tokenConfigServiceSubscribeMetaClient) Recv() (*MetaResponse, error) {
	m := new(MetaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tokenConfigServiceClient) Set(ctx context.Context, in *TokenConfigSetRequest, opts ...grpc.CallOption) (*TokenConfigSetResponse, error) {
	out := new(TokenConfigSetResponse)
	err := c.cc.Invoke(ctx, TokenConfigService_Set_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenConfigServiceClient) SetSome(ctx context.Context, in *TokenConfigSetSomeRequest, opts ...grpc.CallOption) (TokenConfigService_SetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &TokenConfigService_ServiceDesc.Streams[4], TokenConfigService_SetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tokenConfigServiceSetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TokenConfigService_SetSomeClient interface {
	Recv() (*TokenConfigSetSomeResponse, error)
	grpc.ClientStream
}

type tokenConfigServiceSetSomeClient struct {
	grpc.ClientStream
}

func (x *tokenConfigServiceSetSomeClient) Recv() (*TokenConfigSetSomeResponse, error) {
	m := new(TokenConfigSetSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tokenConfigServiceClient) Delete(ctx context.Context, in *TokenConfigDeleteRequest, opts ...grpc.CallOption) (*TokenConfigDeleteResponse, error) {
	out := new(TokenConfigDeleteResponse)
	err := c.cc.Invoke(ctx, TokenConfigService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenConfigServiceClient) DeleteSome(ctx context.Context, in *TokenConfigDeleteSomeRequest, opts ...grpc.CallOption) (TokenConfigService_DeleteSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &TokenConfigService_ServiceDesc.Streams[5], TokenConfigService_DeleteSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tokenConfigServiceDeleteSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TokenConfigService_DeleteSomeClient interface {
	Recv() (*TokenConfigDeleteSomeResponse, error)
	grpc.ClientStream
}

type tokenConfigServiceDeleteSomeClient struct {
	grpc.ClientStream
}

func (x *tokenConfigServiceDeleteSomeClient) Recv() (*TokenConfigDeleteSomeResponse, error) {
	m := new(TokenConfigDeleteSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tokenConfigServiceClient) DeleteAll(ctx context.Context, in *TokenConfigDeleteAllRequest, opts ...grpc.CallOption) (TokenConfigService_DeleteAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &TokenConfigService_ServiceDesc.Streams[6], TokenConfigService_DeleteAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tokenConfigServiceDeleteAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TokenConfigService_DeleteAllClient interface {
	Recv() (*TokenConfigDeleteAllResponse, error)
	grpc.ClientStream
}

type tokenConfigServiceDeleteAllClient struct {
	grpc.ClientStream
}

func (x *tokenConfigServiceDeleteAllClient) Recv() (*TokenConfigDeleteAllResponse, error) {
	m := new(TokenConfigDeleteAllResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TokenConfigServiceServer is the server API for TokenConfigService service.
// All implementations must embed UnimplementedTokenConfigServiceServer
// for forward compatibility
type TokenConfigServiceServer interface {
	GetOne(context.Context, *TokenConfigRequest) (*TokenConfigResponse, error)
	GetSome(*TokenConfigSomeRequest, TokenConfigService_GetSomeServer) error
	GetAll(*TokenConfigStreamRequest, TokenConfigService_GetAllServer) error
	Subscribe(*TokenConfigStreamRequest, TokenConfigService_SubscribeServer) error
	GetMeta(context.Context, *TokenConfigStreamRequest) (*MetaResponse, error)
	SubscribeMeta(*TokenConfigStreamRequest, TokenConfigService_SubscribeMetaServer) error
	Set(context.Context, *TokenConfigSetRequest) (*TokenConfigSetResponse, error)
	SetSome(*TokenConfigSetSomeRequest, TokenConfigService_SetSomeServer) error
	Delete(context.Context, *TokenConfigDeleteRequest) (*TokenConfigDeleteResponse, error)
	DeleteSome(*TokenConfigDeleteSomeRequest, TokenConfigService_DeleteSomeServer) error
	DeleteAll(*TokenConfigDeleteAllRequest, TokenConfigService_DeleteAllServer) error
	mustEmbedUnimplementedTokenConfigServiceServer()
}

// UnimplementedTokenConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTokenConfigServiceServer struct {
}

func (UnimplementedTokenConfigServiceServer) GetOne(context.Context, *TokenConfigRequest) (*TokenConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedTokenConfigServiceServer) GetSome(*TokenConfigSomeRequest, TokenConfigService_GetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSome not implemented")
}
func (UnimplementedTokenConfigServiceServer) GetAll(*TokenConfigStreamRequest, TokenConfigService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedTokenConfigServiceServer) Subscribe(*TokenConfigStreamRequest, TokenConfigService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedTokenConfigServiceServer) GetMeta(context.Context, *TokenConfigStreamRequest) (*MetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeta not implemented")
}
func (UnimplementedTokenConfigServiceServer) SubscribeMeta(*TokenConfigStreamRequest, TokenConfigService_SubscribeMetaServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMeta not implemented")
}
func (UnimplementedTokenConfigServiceServer) Set(context.Context, *TokenConfigSetRequest) (*TokenConfigSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedTokenConfigServiceServer) SetSome(*TokenConfigSetSomeRequest, TokenConfigService_SetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method SetSome not implemented")
}
func (UnimplementedTokenConfigServiceServer) Delete(context.Context, *TokenConfigDeleteRequest) (*TokenConfigDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTokenConfigServiceServer) DeleteSome(*TokenConfigDeleteSomeRequest, TokenConfigService_DeleteSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteSome not implemented")
}
func (UnimplementedTokenConfigServiceServer) DeleteAll(*TokenConfigDeleteAllRequest, TokenConfigService_DeleteAllServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteAll not implemented")
}
func (UnimplementedTokenConfigServiceServer) mustEmbedUnimplementedTokenConfigServiceServer() {}

// UnsafeTokenConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokenConfigServiceServer will
// result in compilation errors.
type UnsafeTokenConfigServiceServer interface {
	mustEmbedUnimplementedTokenConfigServiceServer()
}

func RegisterTokenConfigServiceServer(s grpc.ServiceRegistrar, srv TokenConfigServiceServer) {
	s.RegisterService(&TokenConfigService_ServiceDesc, srv)
}

func _TokenConfigService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenConfigServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenConfigService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenConfigServiceServer).GetOne(ctx, req.(*TokenConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenConfigService_GetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TokenConfigSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TokenConfigServiceServer).GetSome(m, &tokenConfigServiceGetSomeServer{stream})
}

type TokenConfigService_GetSomeServer interface {
	Send(*TokenConfigSomeResponse) error
	grpc.ServerStream
}

type tokenConfigServiceGetSomeServer struct {
	grpc.ServerStream
}

func (x *tokenConfigServiceGetSomeServer) Send(m *TokenConfigSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TokenConfigService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TokenConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TokenConfigServiceServer).GetAll(m, &tokenConfigServiceGetAllServer{stream})
}

type TokenConfigService_GetAllServer interface {
	Send(*TokenConfigStreamResponse) error
	grpc.ServerStream
}

type tokenConfigServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *tokenConfigServiceGetAllServer) Send(m *TokenConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TokenConfigService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TokenConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TokenConfigServiceServer).Subscribe(m, &tokenConfigServiceSubscribeServer{stream})
}

type TokenConfigService_SubscribeServer interface {
	Send(*TokenConfigStreamResponse) error
	grpc.ServerStream
}

type tokenConfigServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *tokenConfigServiceSubscribeServer) Send(m *TokenConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TokenConfigService_GetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenConfigStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenConfigServiceServer).GetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenConfigService_GetMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenConfigServiceServer).GetMeta(ctx, req.(*TokenConfigStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenConfigService_SubscribeMeta_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TokenConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TokenConfigServiceServer).SubscribeMeta(m, &tokenConfigServiceSubscribeMetaServer{stream})
}

type TokenConfigService_SubscribeMetaServer interface {
	Send(*MetaResponse) error
	grpc.ServerStream
}

type tokenConfigServiceSubscribeMetaServer struct {
	grpc.ServerStream
}

func (x *tokenConfigServiceSubscribeMetaServer) Send(m *MetaResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TokenConfigService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenConfigSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenConfigServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenConfigService_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenConfigServiceServer).Set(ctx, req.(*TokenConfigSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenConfigService_SetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TokenConfigSetSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TokenConfigServiceServer).SetSome(m, &tokenConfigServiceSetSomeServer{stream})
}

type TokenConfigService_SetSomeServer interface {
	Send(*TokenConfigSetSomeResponse) error
	grpc.ServerStream
}

type tokenConfigServiceSetSomeServer struct {
	grpc.ServerStream
}

func (x *tokenConfigServiceSetSomeServer) Send(m *TokenConfigSetSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TokenConfigService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenConfigDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenConfigServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenConfigService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenConfigServiceServer).Delete(ctx, req.(*TokenConfigDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenConfigService_DeleteSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TokenConfigDeleteSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TokenConfigServiceServer).DeleteSome(m, &tokenConfigServiceDeleteSomeServer{stream})
}

type TokenConfigService_DeleteSomeServer interface {
	Send(*TokenConfigDeleteSomeResponse) error
	grpc.ServerStream
}

type tokenConfigServiceDeleteSomeServer struct {
	grpc.ServerStream
}

func (x *tokenConfigServiceDeleteSomeServer) Send(m *TokenConfigDeleteSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TokenConfigService_DeleteAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TokenConfigDeleteAllRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TokenConfigServiceServer).DeleteAll(m, &tokenConfigServiceDeleteAllServer{stream})
}

type TokenConfigService_DeleteAllServer interface {
	Send(*TokenConfigDeleteAllResponse) error
	grpc.ServerStream
}

type tokenConfigServiceDeleteAllServer struct {
	grpc.ServerStream
}

func (x *tokenConfigServiceDeleteAllServer) Send(m *TokenConfigDeleteAllResponse) error {
	return x.ServerStream.SendMsg(m)
}

// TokenConfigService_ServiceDesc is the grpc.ServiceDesc for TokenConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TokenConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.serviceaccount.v1.TokenConfigService",
	HandlerType: (*TokenConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _TokenConfigService_GetOne_Handler,
		},
		{
			MethodName: "GetMeta",
			Handler:    _TokenConfigService_GetMeta_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _TokenConfigService_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TokenConfigService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSome",
			Handler:       _TokenConfigService_GetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAll",
			Handler:       _TokenConfigService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _TokenConfigService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeMeta",
			Handler:       _TokenConfigService_SubscribeMeta_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SetSome",
			Handler:       _TokenConfigService_SetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteSome",
			Handler:       _TokenConfigService_DeleteSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteAll",
			Handler:       _TokenConfigService_DeleteAll_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/serviceaccount.v1/services.gen.proto",
}

const (
	TokenSelfRefreshConfigService_GetOne_FullMethodName        = "/arista.serviceaccount.v1.TokenSelfRefreshConfigService/GetOne"
	TokenSelfRefreshConfigService_GetAll_FullMethodName        = "/arista.serviceaccount.v1.TokenSelfRefreshConfigService/GetAll"
	TokenSelfRefreshConfigService_Subscribe_FullMethodName     = "/arista.serviceaccount.v1.TokenSelfRefreshConfigService/Subscribe"
	TokenSelfRefreshConfigService_SubscribeMeta_FullMethodName = "/arista.serviceaccount.v1.TokenSelfRefreshConfigService/SubscribeMeta"
	TokenSelfRefreshConfigService_Set_FullMethodName           = "/arista.serviceaccount.v1.TokenSelfRefreshConfigService/Set"
)

// TokenSelfRefreshConfigServiceClient is the client API for TokenSelfRefreshConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokenSelfRefreshConfigServiceClient interface {
	GetOne(ctx context.Context, in *TokenSelfRefreshConfigRequest, opts ...grpc.CallOption) (*TokenSelfRefreshConfigResponse, error)
	GetAll(ctx context.Context, in *TokenSelfRefreshConfigStreamRequest, opts ...grpc.CallOption) (TokenSelfRefreshConfigService_GetAllClient, error)
	Subscribe(ctx context.Context, in *TokenSelfRefreshConfigStreamRequest, opts ...grpc.CallOption) (TokenSelfRefreshConfigService_SubscribeClient, error)
	SubscribeMeta(ctx context.Context, in *TokenSelfRefreshConfigStreamRequest, opts ...grpc.CallOption) (TokenSelfRefreshConfigService_SubscribeMetaClient, error)
	Set(ctx context.Context, in *TokenSelfRefreshConfigSetRequest, opts ...grpc.CallOption) (*TokenSelfRefreshConfigSetResponse, error)
}

type tokenSelfRefreshConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTokenSelfRefreshConfigServiceClient(cc grpc.ClientConnInterface) TokenSelfRefreshConfigServiceClient {
	return &tokenSelfRefreshConfigServiceClient{cc}
}

func (c *tokenSelfRefreshConfigServiceClient) GetOne(ctx context.Context, in *TokenSelfRefreshConfigRequest, opts ...grpc.CallOption) (*TokenSelfRefreshConfigResponse, error) {
	out := new(TokenSelfRefreshConfigResponse)
	err := c.cc.Invoke(ctx, TokenSelfRefreshConfigService_GetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenSelfRefreshConfigServiceClient) GetAll(ctx context.Context, in *TokenSelfRefreshConfigStreamRequest, opts ...grpc.CallOption) (TokenSelfRefreshConfigService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &TokenSelfRefreshConfigService_ServiceDesc.Streams[0], TokenSelfRefreshConfigService_GetAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tokenSelfRefreshConfigServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TokenSelfRefreshConfigService_GetAllClient interface {
	Recv() (*TokenSelfRefreshConfigStreamResponse, error)
	grpc.ClientStream
}

type tokenSelfRefreshConfigServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *tokenSelfRefreshConfigServiceGetAllClient) Recv() (*TokenSelfRefreshConfigStreamResponse, error) {
	m := new(TokenSelfRefreshConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tokenSelfRefreshConfigServiceClient) Subscribe(ctx context.Context, in *TokenSelfRefreshConfigStreamRequest, opts ...grpc.CallOption) (TokenSelfRefreshConfigService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &TokenSelfRefreshConfigService_ServiceDesc.Streams[1], TokenSelfRefreshConfigService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tokenSelfRefreshConfigServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TokenSelfRefreshConfigService_SubscribeClient interface {
	Recv() (*TokenSelfRefreshConfigStreamResponse, error)
	grpc.ClientStream
}

type tokenSelfRefreshConfigServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *tokenSelfRefreshConfigServiceSubscribeClient) Recv() (*TokenSelfRefreshConfigStreamResponse, error) {
	m := new(TokenSelfRefreshConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tokenSelfRefreshConfigServiceClient) SubscribeMeta(ctx context.Context, in *TokenSelfRefreshConfigStreamRequest, opts ...grpc.CallOption) (TokenSelfRefreshConfigService_SubscribeMetaClient, error) {
	stream, err := c.cc.NewStream(ctx, &TokenSelfRefreshConfigService_ServiceDesc.Streams[2], TokenSelfRefreshConfigService_SubscribeMeta_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tokenSelfRefreshConfigServiceSubscribeMetaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TokenSelfRefreshConfigService_SubscribeMetaClient interface {
	Recv() (*MetaResponse, error)
	grpc.ClientStream
}

type tokenSelfRefreshConfigServiceSubscribeMetaClient struct {
	grpc.ClientStream
}

func (x *tokenSelfRefreshConfigServiceSubscribeMetaClient) Recv() (*MetaResponse, error) {
	m := new(MetaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tokenSelfRefreshConfigServiceClient) Set(ctx context.Context, in *TokenSelfRefreshConfigSetRequest, opts ...grpc.CallOption) (*TokenSelfRefreshConfigSetResponse, error) {
	out := new(TokenSelfRefreshConfigSetResponse)
	err := c.cc.Invoke(ctx, TokenSelfRefreshConfigService_Set_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenSelfRefreshConfigServiceServer is the server API for TokenSelfRefreshConfigService service.
// All implementations must embed UnimplementedTokenSelfRefreshConfigServiceServer
// for forward compatibility
type TokenSelfRefreshConfigServiceServer interface {
	GetOne(context.Context, *TokenSelfRefreshConfigRequest) (*TokenSelfRefreshConfigResponse, error)
	GetAll(*TokenSelfRefreshConfigStreamRequest, TokenSelfRefreshConfigService_GetAllServer) error
	Subscribe(*TokenSelfRefreshConfigStreamRequest, TokenSelfRefreshConfigService_SubscribeServer) error
	SubscribeMeta(*TokenSelfRefreshConfigStreamRequest, TokenSelfRefreshConfigService_SubscribeMetaServer) error
	Set(context.Context, *TokenSelfRefreshConfigSetRequest) (*TokenSelfRefreshConfigSetResponse, error)
	mustEmbedUnimplementedTokenSelfRefreshConfigServiceServer()
}

// UnimplementedTokenSelfRefreshConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTokenSelfRefreshConfigServiceServer struct {
}

func (UnimplementedTokenSelfRefreshConfigServiceServer) GetOne(context.Context, *TokenSelfRefreshConfigRequest) (*TokenSelfRefreshConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedTokenSelfRefreshConfigServiceServer) GetAll(*TokenSelfRefreshConfigStreamRequest, TokenSelfRefreshConfigService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedTokenSelfRefreshConfigServiceServer) Subscribe(*TokenSelfRefreshConfigStreamRequest, TokenSelfRefreshConfigService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedTokenSelfRefreshConfigServiceServer) SubscribeMeta(*TokenSelfRefreshConfigStreamRequest, TokenSelfRefreshConfigService_SubscribeMetaServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMeta not implemented")
}
func (UnimplementedTokenSelfRefreshConfigServiceServer) Set(context.Context, *TokenSelfRefreshConfigSetRequest) (*TokenSelfRefreshConfigSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedTokenSelfRefreshConfigServiceServer) mustEmbedUnimplementedTokenSelfRefreshConfigServiceServer() {
}

// UnsafeTokenSelfRefreshConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokenSelfRefreshConfigServiceServer will
// result in compilation errors.
type UnsafeTokenSelfRefreshConfigServiceServer interface {
	mustEmbedUnimplementedTokenSelfRefreshConfigServiceServer()
}

func RegisterTokenSelfRefreshConfigServiceServer(s grpc.ServiceRegistrar, srv TokenSelfRefreshConfigServiceServer) {
	s.RegisterService(&TokenSelfRefreshConfigService_ServiceDesc, srv)
}

func _TokenSelfRefreshConfigService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenSelfRefreshConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenSelfRefreshConfigServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenSelfRefreshConfigService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenSelfRefreshConfigServiceServer).GetOne(ctx, req.(*TokenSelfRefreshConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenSelfRefreshConfigService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TokenSelfRefreshConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TokenSelfRefreshConfigServiceServer).GetAll(m, &tokenSelfRefreshConfigServiceGetAllServer{stream})
}

type TokenSelfRefreshConfigService_GetAllServer interface {
	Send(*TokenSelfRefreshConfigStreamResponse) error
	grpc.ServerStream
}

type tokenSelfRefreshConfigServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *tokenSelfRefreshConfigServiceGetAllServer) Send(m *TokenSelfRefreshConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TokenSelfRefreshConfigService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TokenSelfRefreshConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TokenSelfRefreshConfigServiceServer).Subscribe(m, &tokenSelfRefreshConfigServiceSubscribeServer{stream})
}

type TokenSelfRefreshConfigService_SubscribeServer interface {
	Send(*TokenSelfRefreshConfigStreamResponse) error
	grpc.ServerStream
}

type tokenSelfRefreshConfigServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *tokenSelfRefreshConfigServiceSubscribeServer) Send(m *TokenSelfRefreshConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TokenSelfRefreshConfigService_SubscribeMeta_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TokenSelfRefreshConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TokenSelfRefreshConfigServiceServer).SubscribeMeta(m, &tokenSelfRefreshConfigServiceSubscribeMetaServer{stream})
}

type TokenSelfRefreshConfigService_SubscribeMetaServer interface {
	Send(*MetaResponse) error
	grpc.ServerStream
}

type tokenSelfRefreshConfigServiceSubscribeMetaServer struct {
	grpc.ServerStream
}

func (x *tokenSelfRefreshConfigServiceSubscribeMetaServer) Send(m *MetaResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TokenSelfRefreshConfigService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenSelfRefreshConfigSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenSelfRefreshConfigServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenSelfRefreshConfigService_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenSelfRefreshConfigServiceServer).Set(ctx, req.(*TokenSelfRefreshConfigSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TokenSelfRefreshConfigService_ServiceDesc is the grpc.ServiceDesc for TokenSelfRefreshConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TokenSelfRefreshConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.serviceaccount.v1.TokenSelfRefreshConfigService",
	HandlerType: (*TokenSelfRefreshConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _TokenSelfRefreshConfigService_GetOne_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _TokenSelfRefreshConfigService_Set_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAll",
			Handler:       _TokenSelfRefreshConfigService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _TokenSelfRefreshConfigService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeMeta",
			Handler:       _TokenSelfRefreshConfigService_SubscribeMeta_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/serviceaccount.v1/services.gen.proto",
}
