// Copyright (c) 2020 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v4.24.4
// source: arista/serviceaccount.v1/serviceaccount.proto

package serviceaccount

import (
	fmp "github.com/aristanetworks/cloudvision-go/api/fmp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AccountStatus determines whether an service account is enabled or disabled.
type AccountStatus int32

const (
	// ACCOUNT_STATUS_UNSPECIFIED indicates the service account status is unspecified.
	AccountStatus_ACCOUNT_STATUS_UNSPECIFIED AccountStatus = 0
	// ACCOUNT_STATUS_ENABLED indicates the service account is enabled.
	AccountStatus_ACCOUNT_STATUS_ENABLED AccountStatus = 1
	// ACCOUNT_STATUS_DISABLED indicates the service account is disabled.
	AccountStatus_ACCOUNT_STATUS_DISABLED AccountStatus = 2
)

// Enum value maps for AccountStatus.
var (
	AccountStatus_name = map[int32]string{
		0: "ACCOUNT_STATUS_UNSPECIFIED",
		1: "ACCOUNT_STATUS_ENABLED",
		2: "ACCOUNT_STATUS_DISABLED",
	}
	AccountStatus_value = map[string]int32{
		"ACCOUNT_STATUS_UNSPECIFIED": 0,
		"ACCOUNT_STATUS_ENABLED":     1,
		"ACCOUNT_STATUS_DISABLED":    2,
	}
)

func (x AccountStatus) Enum() *AccountStatus {
	p := new(AccountStatus)
	*p = x
	return p
}

func (x AccountStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_serviceaccount_v1_serviceaccount_proto_enumTypes[0].Descriptor()
}

func (AccountStatus) Type() protoreflect.EnumType {
	return &file_arista_serviceaccount_v1_serviceaccount_proto_enumTypes[0]
}

func (x AccountStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountStatus.Descriptor instead.
func (AccountStatus) EnumDescriptor() ([]byte, []int) {
	return file_arista_serviceaccount_v1_serviceaccount_proto_rawDescGZIP(), []int{0}
}

// AccountKey contains the name of the service account.
type AccountKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the unique identifier of the service account.
	Name *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *AccountKey) Reset() {
	*x = AccountKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_serviceaccount_v1_serviceaccount_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountKey) ProtoMessage() {}

func (x *AccountKey) ProtoReflect() protoreflect.Message {
	mi := &file_arista_serviceaccount_v1_serviceaccount_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountKey.ProtoReflect.Descriptor instead.
func (*AccountKey) Descriptor() ([]byte, []int) {
	return file_arista_serviceaccount_v1_serviceaccount_proto_rawDescGZIP(), []int{0}
}

func (x *AccountKey) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

// AccountConfig holds the configuration for a service account.
type AccountConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key contains the name of the service account.
	Key *AccountKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// status determines if the service account is enabled or disabled. New service accounts are
	// enabled by default.
	Status AccountStatus `protobuf:"varint,2,opt,name=status,proto3,enum=arista.serviceaccount.v1.AccountStatus" json:"status,omitempty"`
	// description is a comment describing the service account.
	Description *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// groups is a list of roles that the service account inherits permissions from.
	Groups *fmp.RepeatedString `protobuf:"bytes,4,opt,name=groups,proto3" json:"groups,omitempty"`
	// allow_token_refresh determines whether or not the service account can refresh
	// any of its own active tokens, including preexisting ones.
	AllowTokenRefresh *wrapperspb.BoolValue `protobuf:"bytes,7,opt,name=allow_token_refresh,json=allowTokenRefresh,proto3" json:"allow_token_refresh,omitempty"`
}

func (x *AccountConfig) Reset() {
	*x = AccountConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_serviceaccount_v1_serviceaccount_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountConfig) ProtoMessage() {}

func (x *AccountConfig) ProtoReflect() protoreflect.Message {
	mi := &file_arista_serviceaccount_v1_serviceaccount_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountConfig.ProtoReflect.Descriptor instead.
func (*AccountConfig) Descriptor() ([]byte, []int) {
	return file_arista_serviceaccount_v1_serviceaccount_proto_rawDescGZIP(), []int{1}
}

func (x *AccountConfig) GetKey() *AccountKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AccountConfig) GetStatus() AccountStatus {
	if x != nil {
		return x.Status
	}
	return AccountStatus_ACCOUNT_STATUS_UNSPECIFIED
}

func (x *AccountConfig) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *AccountConfig) GetGroups() *fmp.RepeatedString {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *AccountConfig) GetAllowTokenRefresh() *wrapperspb.BoolValue {
	if x != nil {
		return x.AllowTokenRefresh
	}
	return nil
}

// Account describes a service account.
type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key uniquely identifies the service account.
	Key *AccountKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// status determines whether the service account is enabled or disabled.
	Status AccountStatus `protobuf:"varint,2,opt,name=status,proto3,enum=arista.serviceaccount.v1.AccountStatus" json:"status,omitempty"`
	// description is a comment describing the service account.
	Description *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// groups is a list of roles that the service account inherits permissions from.
	Groups *fmp.RepeatedString `protobuf:"bytes,4,opt,name=groups,proto3" json:"groups,omitempty"`
	// created_by is the name of the entity that created the service account.
	CreatedBy *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// last_access is the time when the service account was last fetched.
	LastAccess *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=last_access,json=lastAccess,proto3" json:"last_access,omitempty"`
	// allow_token_refresh determines whether or not the service account can refresh
	// any of its own active tokens, including preexisting ones.
	AllowTokenRefresh *wrapperspb.BoolValue `protobuf:"bytes,7,opt,name=allow_token_refresh,json=allowTokenRefresh,proto3" json:"allow_token_refresh,omitempty"`
}

func (x *Account) Reset() {
	*x = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_serviceaccount_v1_serviceaccount_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_arista_serviceaccount_v1_serviceaccount_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_arista_serviceaccount_v1_serviceaccount_proto_rawDescGZIP(), []int{2}
}

func (x *Account) GetKey() *AccountKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Account) GetStatus() AccountStatus {
	if x != nil {
		return x.Status
	}
	return AccountStatus_ACCOUNT_STATUS_UNSPECIFIED
}

func (x *Account) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Account) GetGroups() *fmp.RepeatedString {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *Account) GetCreatedBy() *wrapperspb.StringValue {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *Account) GetLastAccess() *timestamppb.Timestamp {
	if x != nil {
		return x.LastAccess
	}
	return nil
}

func (x *Account) GetAllowTokenRefresh() *wrapperspb.BoolValue {
	if x != nil {
		return x.AllowTokenRefresh
	}
	return nil
}

// TokenKey contains service account token ID.
type TokenKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the unique identifier of the service account token.
	Id *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TokenKey) Reset() {
	*x = TokenKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_serviceaccount_v1_serviceaccount_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenKey) ProtoMessage() {}

func (x *TokenKey) ProtoReflect() protoreflect.Message {
	mi := &file_arista_serviceaccount_v1_serviceaccount_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenKey.ProtoReflect.Descriptor instead.
func (*TokenKey) Descriptor() ([]byte, []int) {
	return file_arista_serviceaccount_v1_serviceaccount_proto_rawDescGZIP(), []int{3}
}

func (x *TokenKey) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

// TokenConfig holds the configuration for a service account token. The token is a signed JWT which
// can be used as a credential for REST and WRPC endpoints.
type TokenConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key uniquely identifies the service account token.
	Key *TokenKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// user is the name of the service account that the token is generated for.
	User *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	// description is a short name or comment used to identify the service account token.
	Description *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// valid_for determines the duration that the service account token will be valid for.
	ValidFor *durationpb.Duration `protobuf:"bytes,4,opt,name=valid_for,json=validFor,proto3" json:"valid_for,omitempty"`
	// token is the JWT generated for a service account token.
	// It is only populated in Set response.
	Token *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *TokenConfig) Reset() {
	*x = TokenConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_serviceaccount_v1_serviceaccount_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenConfig) ProtoMessage() {}

func (x *TokenConfig) ProtoReflect() protoreflect.Message {
	mi := &file_arista_serviceaccount_v1_serviceaccount_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenConfig.ProtoReflect.Descriptor instead.
func (*TokenConfig) Descriptor() ([]byte, []int) {
	return file_arista_serviceaccount_v1_serviceaccount_proto_rawDescGZIP(), []int{4}
}

func (x *TokenConfig) GetKey() *TokenKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TokenConfig) GetUser() *wrapperspb.StringValue {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *TokenConfig) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *TokenConfig) GetValidFor() *durationpb.Duration {
	if x != nil {
		return x.ValidFor
	}
	return nil
}

func (x *TokenConfig) GetToken() *wrapperspb.StringValue {
	if x != nil {
		return x.Token
	}
	return nil
}

// Token describes a service account token.
type Token struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key uniquely identifies the service account token.
	Key *TokenKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// user is the name of the service account that the token is generated for.
	User *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	// description is a short name or comment used to identify the service account token.
	Description *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// valid_until is the time that the service account token will be valid until.
	ValidUntil *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=valid_until,json=validUntil,proto3" json:"valid_until,omitempty"`
	// created_by is the name of the entity that created the service account token.
	CreatedBy *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// last_used is the time when the service account token was last used to authenticate.
	LastUsed *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=last_used,json=lastUsed,proto3" json:"last_used,omitempty"`
	// replaced_at is the time which the token has been replaced.
	// It is only populated when the token is refreshed.
	ReplacedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=replaced_at,json=replacedAt,proto3" json:"replaced_at,omitempty"`
}

func (x *Token) Reset() {
	*x = Token{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_serviceaccount_v1_serviceaccount_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Token) ProtoMessage() {}

func (x *Token) ProtoReflect() protoreflect.Message {
	mi := &file_arista_serviceaccount_v1_serviceaccount_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Token.ProtoReflect.Descriptor instead.
func (*Token) Descriptor() ([]byte, []int) {
	return file_arista_serviceaccount_v1_serviceaccount_proto_rawDescGZIP(), []int{5}
}

func (x *Token) GetKey() *TokenKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Token) GetUser() *wrapperspb.StringValue {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Token) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Token) GetValidUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.ValidUntil
	}
	return nil
}

func (x *Token) GetCreatedBy() *wrapperspb.StringValue {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *Token) GetLastUsed() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUsed
	}
	return nil
}

func (x *Token) GetReplacedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReplacedAt
	}
	return nil
}

// TokenSelfRefreshConfig describes the response a service account gets when they refresh their token
type TokenSelfRefreshConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// valid_for is the duration that the service account token will be valid for.
	// Default value will be the original token duration.
	ValidFor *durationpb.Duration `protobuf:"bytes,1,opt,name=valid_for,json=validFor,proto3" json:"valid_for,omitempty"`
	// new_token is the JWT token generated for a service account token.
	// This is populated in the response of a Set() request.
	NewToken *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=new_token,json=newToken,proto3" json:"new_token,omitempty"`
}

func (x *TokenSelfRefreshConfig) Reset() {
	*x = TokenSelfRefreshConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_serviceaccount_v1_serviceaccount_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenSelfRefreshConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenSelfRefreshConfig) ProtoMessage() {}

func (x *TokenSelfRefreshConfig) ProtoReflect() protoreflect.Message {
	mi := &file_arista_serviceaccount_v1_serviceaccount_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenSelfRefreshConfig.ProtoReflect.Descriptor instead.
func (*TokenSelfRefreshConfig) Descriptor() ([]byte, []int) {
	return file_arista_serviceaccount_v1_serviceaccount_proto_rawDescGZIP(), []int{6}
}

func (x *TokenSelfRefreshConfig) GetValidFor() *durationpb.Duration {
	if x != nil {
		return x.ValidFor
	}
	return nil
}

func (x *TokenSelfRefreshConfig) GetNewToken() *wrapperspb.StringValue {
	if x != nil {
		return x.NewToken
	}
	return nil
}

var File_arista_serviceaccount_v1_serviceaccount_proto protoreflect.FileDescriptor

var file_arista_serviceaccount_v1_serviceaccount_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x18, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x66, 0x6d, 0x70, 0x2f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x12, 0x66, 0x6d, 0x70, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x44, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b,
	0x65, 0x79, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x04, 0x80, 0x8e, 0x19, 0x01, 0x22, 0xc9, 0x02, 0x0a, 0x0d, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x36, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x52, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x12, 0x4a, 0x0a, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x3a, 0x06,
	0xfa, 0x8d, 0x19, 0x02, 0x72, 0x77, 0x22, 0xbd, 0x03, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x36, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6d,
	0x70, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x3b, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x4a, 0x0a, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x3a, 0x06,
	0xfa, 0x8d, 0x19, 0x02, 0x72, 0x6f, 0x22, 0x3e, 0x0a, 0x08, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4b,
	0x65, 0x79, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64,
	0x3a, 0x04, 0x80, 0x8e, 0x19, 0x01, 0x22, 0xad, 0x02, 0x0a, 0x0b, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x34, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x3e,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36,
	0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x46, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x0a, 0xfa, 0x8d, 0x19, 0x02,
	0x72, 0x77, 0x98, 0x8e, 0x19, 0x00, 0x22, 0xa7, 0x03, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x34, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4b, 0x65,
	0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x55, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x37, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72, 0x6f,
	0x22, 0x97, 0x01, 0x0a, 0x16, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65, 0x6c, 0x66, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x36, 0x0a, 0x09, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x46, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x0a,
	0x98, 0x8e, 0x19, 0x00, 0xa2, 0x8e, 0x19, 0x02, 0x72, 0x77, 0x2a, 0x68, 0x0a, 0x0d, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x4e,
	0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c,
	0x45, 0x44, 0x10, 0x02, 0x42, 0x56, 0x5a, 0x54, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x6f,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x3b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_arista_serviceaccount_v1_serviceaccount_proto_rawDescOnce sync.Once
	file_arista_serviceaccount_v1_serviceaccount_proto_rawDescData = file_arista_serviceaccount_v1_serviceaccount_proto_rawDesc
)

func file_arista_serviceaccount_v1_serviceaccount_proto_rawDescGZIP() []byte {
	file_arista_serviceaccount_v1_serviceaccount_proto_rawDescOnce.Do(func() {
		file_arista_serviceaccount_v1_serviceaccount_proto_rawDescData = protoimpl.X.CompressGZIP(file_arista_serviceaccount_v1_serviceaccount_proto_rawDescData)
	})
	return file_arista_serviceaccount_v1_serviceaccount_proto_rawDescData
}

var file_arista_serviceaccount_v1_serviceaccount_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_arista_serviceaccount_v1_serviceaccount_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_arista_serviceaccount_v1_serviceaccount_proto_goTypes = []interface{}{
	(AccountStatus)(0),             // 0: arista.serviceaccount.v1.AccountStatus
	(*AccountKey)(nil),             // 1: arista.serviceaccount.v1.AccountKey
	(*AccountConfig)(nil),          // 2: arista.serviceaccount.v1.AccountConfig
	(*Account)(nil),                // 3: arista.serviceaccount.v1.Account
	(*TokenKey)(nil),               // 4: arista.serviceaccount.v1.TokenKey
	(*TokenConfig)(nil),            // 5: arista.serviceaccount.v1.TokenConfig
	(*Token)(nil),                  // 6: arista.serviceaccount.v1.Token
	(*TokenSelfRefreshConfig)(nil), // 7: arista.serviceaccount.v1.TokenSelfRefreshConfig
	(*wrapperspb.StringValue)(nil), // 8: google.protobuf.StringValue
	(*fmp.RepeatedString)(nil),     // 9: fmp.RepeatedString
	(*wrapperspb.BoolValue)(nil),   // 10: google.protobuf.BoolValue
	(*timestamppb.Timestamp)(nil),  // 11: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),    // 12: google.protobuf.Duration
}
var file_arista_serviceaccount_v1_serviceaccount_proto_depIdxs = []int32{
	8,  // 0: arista.serviceaccount.v1.AccountKey.name:type_name -> google.protobuf.StringValue
	1,  // 1: arista.serviceaccount.v1.AccountConfig.key:type_name -> arista.serviceaccount.v1.AccountKey
	0,  // 2: arista.serviceaccount.v1.AccountConfig.status:type_name -> arista.serviceaccount.v1.AccountStatus
	8,  // 3: arista.serviceaccount.v1.AccountConfig.description:type_name -> google.protobuf.StringValue
	9,  // 4: arista.serviceaccount.v1.AccountConfig.groups:type_name -> fmp.RepeatedString
	10, // 5: arista.serviceaccount.v1.AccountConfig.allow_token_refresh:type_name -> google.protobuf.BoolValue
	1,  // 6: arista.serviceaccount.v1.Account.key:type_name -> arista.serviceaccount.v1.AccountKey
	0,  // 7: arista.serviceaccount.v1.Account.status:type_name -> arista.serviceaccount.v1.AccountStatus
	8,  // 8: arista.serviceaccount.v1.Account.description:type_name -> google.protobuf.StringValue
	9,  // 9: arista.serviceaccount.v1.Account.groups:type_name -> fmp.RepeatedString
	8,  // 10: arista.serviceaccount.v1.Account.created_by:type_name -> google.protobuf.StringValue
	11, // 11: arista.serviceaccount.v1.Account.last_access:type_name -> google.protobuf.Timestamp
	10, // 12: arista.serviceaccount.v1.Account.allow_token_refresh:type_name -> google.protobuf.BoolValue
	8,  // 13: arista.serviceaccount.v1.TokenKey.id:type_name -> google.protobuf.StringValue
	4,  // 14: arista.serviceaccount.v1.TokenConfig.key:type_name -> arista.serviceaccount.v1.TokenKey
	8,  // 15: arista.serviceaccount.v1.TokenConfig.user:type_name -> google.protobuf.StringValue
	8,  // 16: arista.serviceaccount.v1.TokenConfig.description:type_name -> google.protobuf.StringValue
	12, // 17: arista.serviceaccount.v1.TokenConfig.valid_for:type_name -> google.protobuf.Duration
	8,  // 18: arista.serviceaccount.v1.TokenConfig.token:type_name -> google.protobuf.StringValue
	4,  // 19: arista.serviceaccount.v1.Token.key:type_name -> arista.serviceaccount.v1.TokenKey
	8,  // 20: arista.serviceaccount.v1.Token.user:type_name -> google.protobuf.StringValue
	8,  // 21: arista.serviceaccount.v1.Token.description:type_name -> google.protobuf.StringValue
	11, // 22: arista.serviceaccount.v1.Token.valid_until:type_name -> google.protobuf.Timestamp
	8,  // 23: arista.serviceaccount.v1.Token.created_by:type_name -> google.protobuf.StringValue
	11, // 24: arista.serviceaccount.v1.Token.last_used:type_name -> google.protobuf.Timestamp
	11, // 25: arista.serviceaccount.v1.Token.replaced_at:type_name -> google.protobuf.Timestamp
	12, // 26: arista.serviceaccount.v1.TokenSelfRefreshConfig.valid_for:type_name -> google.protobuf.Duration
	8,  // 27: arista.serviceaccount.v1.TokenSelfRefreshConfig.new_token:type_name -> google.protobuf.StringValue
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_arista_serviceaccount_v1_serviceaccount_proto_init() }
func file_arista_serviceaccount_v1_serviceaccount_proto_init() {
	if File_arista_serviceaccount_v1_serviceaccount_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_arista_serviceaccount_v1_serviceaccount_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_serviceaccount_v1_serviceaccount_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_serviceaccount_v1_serviceaccount_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_serviceaccount_v1_serviceaccount_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_serviceaccount_v1_serviceaccount_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_serviceaccount_v1_serviceaccount_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Token); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_serviceaccount_v1_serviceaccount_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenSelfRefreshConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_arista_serviceaccount_v1_serviceaccount_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_arista_serviceaccount_v1_serviceaccount_proto_goTypes,
		DependencyIndexes: file_arista_serviceaccount_v1_serviceaccount_proto_depIdxs,
		EnumInfos:         file_arista_serviceaccount_v1_serviceaccount_proto_enumTypes,
		MessageInfos:      file_arista_serviceaccount_v1_serviceaccount_proto_msgTypes,
	}.Build()
	File_arista_serviceaccount_v1_serviceaccount_proto = out.File
	file_arista_serviceaccount_v1_serviceaccount_proto_rawDesc = nil
	file_arista_serviceaccount_v1_serviceaccount_proto_goTypes = nil
	file_arista_serviceaccount_v1_serviceaccount_proto_depIdxs = nil
}
