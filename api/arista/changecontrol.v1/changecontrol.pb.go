// Copyright (c) 2020 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.7
// source: arista/changecontrol.v1/changecontrol.proto

package changecontrol

import (
	fmp "github.com/aristanetworks/cloudvision-go/api/fmp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// StageStatus defines the possible execution statuses of a stage.
type StageStatus int32

const (
	StageStatus_STAGE_STATUS_UNSPECIFIED StageStatus = 0
	// STAGE_STATUS_RUNNING means the stage has begun execution.
	StageStatus_STAGE_STATUS_RUNNING StageStatus = 1
	// STAGE_STATUS_COMPLETED means the stage has ceased execution.
	// Success/failure of a stage cannot be inferred from this status
	// alone but rather this status plus the stage error. That is, no
	// error implies success and some error implies failure.
	StageStatus_STAGE_STATUS_COMPLETED StageStatus = 2
)

// Enum value maps for StageStatus.
var (
	StageStatus_name = map[int32]string{
		0: "STAGE_STATUS_UNSPECIFIED",
		1: "STAGE_STATUS_RUNNING",
		2: "STAGE_STATUS_COMPLETED",
	}
	StageStatus_value = map[string]int32{
		"STAGE_STATUS_UNSPECIFIED": 0,
		"STAGE_STATUS_RUNNING":     1,
		"STAGE_STATUS_COMPLETED":   2,
	}
)

func (x StageStatus) Enum() *StageStatus {
	p := new(StageStatus)
	*p = x
	return p
}

func (x StageStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StageStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_changecontrol_v1_changecontrol_proto_enumTypes[0].Descriptor()
}

func (StageStatus) Type() protoreflect.EnumType {
	return &file_arista_changecontrol_v1_changecontrol_proto_enumTypes[0]
}

func (x StageStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StageStatus.Descriptor instead.
func (StageStatus) EnumDescriptor() ([]byte, []int) {
	return file_arista_changecontrol_v1_changecontrol_proto_rawDescGZIP(), []int{0}
}

// ChangeControlStatus defines the possible execution statuses of
// a change control.
type ChangeControlStatus int32

const (
	ChangeControlStatus_CHANGE_CONTROL_STATUS_UNSPECIFIED ChangeControlStatus = 0
	// CHANGE_CONTROL_STATUS_RUNNING means the change control has begun
	// execution.
	ChangeControlStatus_CHANGE_CONTROL_STATUS_RUNNING ChangeControlStatus = 1
	// CHANGE_CONTROL_STATUS_COMPLETED means the change control has ceased
	// execution. Success/failure of a change control cannot be inferred
	// from this status alone but rather this status plus the change control
	// error. That is, no error implies success and some error implies failure.
	ChangeControlStatus_CHANGE_CONTROL_STATUS_COMPLETED ChangeControlStatus = 2
	// CHANGE_CONTROL_STATUS_SCHEDULED means the change control has been
	// scheduled for execution at some time. Any failure that occurs during
	// this process will cause a transition back to the unspecified status,
	// a reset of the schedule flag by the system, and an error on the change
	// control reporting the details of the failure.
	ChangeControlStatus_CHANGE_CONTROL_STATUS_SCHEDULED ChangeControlStatus = 3
)

// Enum value maps for ChangeControlStatus.
var (
	ChangeControlStatus_name = map[int32]string{
		0: "CHANGE_CONTROL_STATUS_UNSPECIFIED",
		1: "CHANGE_CONTROL_STATUS_RUNNING",
		2: "CHANGE_CONTROL_STATUS_COMPLETED",
		3: "CHANGE_CONTROL_STATUS_SCHEDULED",
	}
	ChangeControlStatus_value = map[string]int32{
		"CHANGE_CONTROL_STATUS_UNSPECIFIED": 0,
		"CHANGE_CONTROL_STATUS_RUNNING":     1,
		"CHANGE_CONTROL_STATUS_COMPLETED":   2,
		"CHANGE_CONTROL_STATUS_SCHEDULED":   3,
	}
)

func (x ChangeControlStatus) Enum() *ChangeControlStatus {
	p := new(ChangeControlStatus)
	*p = x
	return p
}

func (x ChangeControlStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChangeControlStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_changecontrol_v1_changecontrol_proto_enumTypes[1].Descriptor()
}

func (ChangeControlStatus) Type() protoreflect.EnumType {
	return &file_arista_changecontrol_v1_changecontrol_proto_enumTypes[1]
}

func (x ChangeControlStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChangeControlStatus.Descriptor instead.
func (ChangeControlStatus) EnumDescriptor() ([]byte, []int) {
	return file_arista_changecontrol_v1_changecontrol_proto_rawDescGZIP(), []int{1}
}

// RepeatedRepeatedString wraps a repeated `fmp.RepeatedString`
// to define a string matrix which is used to represent stage
// rows (see `StageConfig`).
type RepeatedRepeatedString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values is a list of `fmp.RepeatedString`.
	Values []*fmp.RepeatedString `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *RepeatedRepeatedString) Reset() {
	*x = RepeatedRepeatedString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_changecontrol_v1_changecontrol_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepeatedRepeatedString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedRepeatedString) ProtoMessage() {}

func (x *RepeatedRepeatedString) ProtoReflect() protoreflect.Message {
	mi := &file_arista_changecontrol_v1_changecontrol_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedRepeatedString.ProtoReflect.Descriptor instead.
func (*RepeatedRepeatedString) Descriptor() ([]byte, []int) {
	return file_arista_changecontrol_v1_changecontrol_proto_rawDescGZIP(), []int{0}
}

func (x *RepeatedRepeatedString) GetValues() []*fmp.RepeatedString {
	if x != nil {
		return x.Values
	}
	return nil
}

// ChangeControlKey uniquely identifies a change control.
type ChangeControlKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the ID of the change control.
	Id *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ChangeControlKey) Reset() {
	*x = ChangeControlKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_changecontrol_v1_changecontrol_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeControlKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeControlKey) ProtoMessage() {}

func (x *ChangeControlKey) ProtoReflect() protoreflect.Message {
	mi := &file_arista_changecontrol_v1_changecontrol_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeControlKey.ProtoReflect.Descriptor instead.
func (*ChangeControlKey) Descriptor() ([]byte, []int) {
	return file_arista_changecontrol_v1_changecontrol_proto_rawDescGZIP(), []int{1}
}

func (x *ChangeControlKey) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

// Action is an action to perform during the execution of
// a stage of a change control. Available actions can be
// fetched using the "action" services.
type Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the action.
	Name *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// timeout is the maximum duration in seconds that
	// the action can execute before timing out. If this
	// is not set, then this is interpreted to mean there
	// is no timeout.
	Timeout *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// args are the arguments of the action.
	Args *fmp.MapStringString `protobuf:"bytes,3,opt,name=args,proto3" json:"args,omitempty"`
}

func (x *Action) Reset() {
	*x = Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_changecontrol_v1_changecontrol_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_arista_changecontrol_v1_changecontrol_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_arista_changecontrol_v1_changecontrol_proto_rawDescGZIP(), []int{2}
}

func (x *Action) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Action) GetTimeout() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *Action) GetArgs() *fmp.MapStringString {
	if x != nil {
		return x.Args
	}
	return nil
}

// StageConfig holds a configuration for a stage in a change
// control. Each stage generally defines either an action
// or a series of sub-stages.
type StageConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the stage.
	Name *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// action is the action to perform on stage execution.
	Action *Action `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	// rows is a series of rows of parallel stages referenced
	// by ID. Each row is run one after the other and the
	// stages within each row are run in parallel.
	//
	// For example:
	//
	// ```
	// [["1a", "1b"], ["2"]]
	// ```
	//
	// This configures stage 1a and stage 1b to run at the
	// same time, and then stage 2 once both of them have
	// completed.
	Rows *RepeatedRepeatedString `protobuf:"bytes,3,opt,name=rows,proto3" json:"rows,omitempty"`
}

func (x *StageConfig) Reset() {
	*x = StageConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_changecontrol_v1_changecontrol_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StageConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StageConfig) ProtoMessage() {}

func (x *StageConfig) ProtoReflect() protoreflect.Message {
	mi := &file_arista_changecontrol_v1_changecontrol_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StageConfig.ProtoReflect.Descriptor instead.
func (*StageConfig) Descriptor() ([]byte, []int) {
	return file_arista_changecontrol_v1_changecontrol_proto_rawDescGZIP(), []int{3}
}

func (x *StageConfig) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *StageConfig) GetAction() *Action {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *StageConfig) GetRows() *RepeatedRepeatedString {
	if x != nil {
		return x.Rows
	}
	return nil
}

// StageConfigMap wraps a map from stage ID to `StageConfig`.
// This defines the configuration and order of execution
// for the stages in a change control.
//
// For example:
//
// ```
// {
//     "root": { name: "root", rows: [["1-2"], ["3"]] },
//     "1-2":  { name: "stages 1-2", rows: [["1"], ["2"]] },
//     "1":    { name: "stage 1", rows: [["1a", "1b"]] },
//     "1a":   { name: "stage 1a", action: { name: "task", args: { "TaskID": "101" } },
//     "1b":   { name: "stage 1b", action: { name: "task", args: { "TaskID": "102" } },
//     "2":    { name: "stage 2", action: { name: "task", args: { "TaskID": "103" } },
//     "3":    { name: "stage 3", action: { name: "task", args: { "TaskID": "104" } }
// }
// ```
//
// Assuming the root stage ID of the enclosing change control
// is "root", this would mean to do the following in sequence:
//
// ```
// root
// |- stages 1-2
// |  |- stage 1
// |  |  |- stage 1a, stage 1b (parallel)
// |  |- stage 2
// |- stage 3
// ```
//
// That is, execute tasks `101` and `102` in parallel, then task `103`, then task `104`.
type StageConfigMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values is a map from stage ID to `StageConfig`.
	Values map[string]*StageConfig `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *StageConfigMap) Reset() {
	*x = StageConfigMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_changecontrol_v1_changecontrol_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StageConfigMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StageConfigMap) ProtoMessage() {}

func (x *StageConfigMap) ProtoReflect() protoreflect.Message {
	mi := &file_arista_changecontrol_v1_changecontrol_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StageConfigMap.ProtoReflect.Descriptor instead.
func (*StageConfigMap) Descriptor() ([]byte, []int) {
	return file_arista_changecontrol_v1_changecontrol_proto_rawDescGZIP(), []int{4}
}

func (x *StageConfigMap) GetValues() map[string]*StageConfig {
	if x != nil {
		return x.Values
	}
	return nil
}

// ChangeConfig holds a configuration for the change of a change
// control which is essentially a named configuration of stages.
type ChangeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the change.
	Name *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// root_stage_id is the ID of the root stage or the stage that
	// should execute first.
	RootStageId *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=root_stage_id,json=rootStageId,proto3" json:"root_stage_id,omitempty"`
	// stages holds a configuration of stages. See `StageConfigMap`
	// description for more information.
	Stages *StageConfigMap `protobuf:"bytes,3,opt,name=stages,proto3" json:"stages,omitempty"`
	// notes are any notes associated with the change.
	Notes *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=notes,proto3" json:"notes,omitempty"`
}

func (x *ChangeConfig) Reset() {
	*x = ChangeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_changecontrol_v1_changecontrol_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeConfig) ProtoMessage() {}

func (x *ChangeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_arista_changecontrol_v1_changecontrol_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeConfig.ProtoReflect.Descriptor instead.
func (*ChangeConfig) Descriptor() ([]byte, []int) {
	return file_arista_changecontrol_v1_changecontrol_proto_rawDescGZIP(), []int{5}
}

func (x *ChangeConfig) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ChangeConfig) GetRootStageId() *wrapperspb.StringValue {
	if x != nil {
		return x.RootStageId
	}
	return nil
}

func (x *ChangeConfig) GetStages() *StageConfigMap {
	if x != nil {
		return x.Stages
	}
	return nil
}

func (x *ChangeConfig) GetNotes() *wrapperspb.StringValue {
	if x != nil {
		return x.Notes
	}
	return nil
}

// FlagConfig is used to set a flag on a change control that takes
// a boolean value (e.g. start/stop, approve/unapprove).
type FlagConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value is the value of the flag (`true` or `false`).
	Value *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// notes are any notes associated with the flag value.
	Notes *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=notes,proto3" json:"notes,omitempty"`
}

func (x *FlagConfig) Reset() {
	*x = FlagConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_changecontrol_v1_changecontrol_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlagConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagConfig) ProtoMessage() {}

func (x *FlagConfig) ProtoReflect() protoreflect.Message {
	mi := &file_arista_changecontrol_v1_changecontrol_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagConfig.ProtoReflect.Descriptor instead.
func (*FlagConfig) Descriptor() ([]byte, []int) {
	return file_arista_changecontrol_v1_changecontrol_proto_rawDescGZIP(), []int{6}
}

func (x *FlagConfig) GetValue() *wrapperspb.BoolValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *FlagConfig) GetNotes() *wrapperspb.StringValue {
	if x != nil {
		return x.Notes
	}
	return nil
}

// TimestampFlagConfig is used to set a flag on a change control
// that takes a timestamp value (e.g. schedule/unschedule).
type TimestampFlagConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value is the value of the flag (some timestamp).
	Value *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// notes are the notes associated with the flag value.
	Notes *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=notes,proto3" json:"notes,omitempty"`
}

func (x *TimestampFlagConfig) Reset() {
	*x = TimestampFlagConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_changecontrol_v1_changecontrol_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimestampFlagConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimestampFlagConfig) ProtoMessage() {}

func (x *TimestampFlagConfig) ProtoReflect() protoreflect.Message {
	mi := &file_arista_changecontrol_v1_changecontrol_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimestampFlagConfig.ProtoReflect.Descriptor instead.
func (*TimestampFlagConfig) Descriptor() ([]byte, []int) {
	return file_arista_changecontrol_v1_changecontrol_proto_rawDescGZIP(), []int{7}
}

func (x *TimestampFlagConfig) GetValue() *timestamppb.Timestamp {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TimestampFlagConfig) GetNotes() *wrapperspb.StringValue {
	if x != nil {
		return x.Notes
	}
	return nil
}

// ChangeControlConfig holds the configuration of a change control.
type ChangeControlConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key uniquely identifies the change control.
	Key *ChangeControlKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// change is the change subject to execution.
	Change *ChangeConfig `protobuf:"bytes,2,opt,name=change,proto3" json:"change,omitempty"`
	// start is the flag to start (`start.value` set to `true`)
	// or stop (`start.value` set to `false`) execution of the
	// change control.
	Start *FlagConfig `protobuf:"bytes,3,opt,name=start,proto3" json:"start,omitempty"`
	// schedule is the flag to schedule (`schedule.value` set to
	// some timestamp) or unschedule (`schedule.value` set to
	// `nil`) the change control for execution.
	Schedule *TimestampFlagConfig `protobuf:"bytes,4,opt,name=schedule,proto3" json:"schedule,omitempty"`
}

func (x *ChangeControlConfig) Reset() {
	*x = ChangeControlConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_changecontrol_v1_changecontrol_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeControlConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeControlConfig) ProtoMessage() {}

func (x *ChangeControlConfig) ProtoReflect() protoreflect.Message {
	mi := &file_arista_changecontrol_v1_changecontrol_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeControlConfig.ProtoReflect.Descriptor instead.
func (*ChangeControlConfig) Descriptor() ([]byte, []int) {
	return file_arista_changecontrol_v1_changecontrol_proto_rawDescGZIP(), []int{8}
}

func (x *ChangeControlConfig) GetKey() *ChangeControlKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ChangeControlConfig) GetChange() *ChangeConfig {
	if x != nil {
		return x.Change
	}
	return nil
}

func (x *ChangeControlConfig) GetStart() *FlagConfig {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *ChangeControlConfig) GetSchedule() *TimestampFlagConfig {
	if x != nil {
		return x.Schedule
	}
	return nil
}

// Stage holds the configuration and status of a stage.
type Stage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the stage.
	Name *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// action is the action to perform during the stage.
	Action *Action `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	// rows is a series of rows of parallel stages referenced
	// by ID. See `StageConfig.rows` for more details.
	Rows *RepeatedRepeatedString `protobuf:"bytes,3,opt,name=rows,proto3" json:"rows,omitempty"`
	// status is the execution status of the stage.
	Status StageStatus `protobuf:"varint,4,opt,name=status,proto3,enum=arista.changecontrol.v1.StageStatus" json:"status,omitempty"`
	// error is any error that occured during the execution
	// of the stage.
	Error *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
	// start_time is the time when status change to Running
	StartTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// end_time is the time when status change to Completed
	EndTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *Stage) Reset() {
	*x = Stage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_changecontrol_v1_changecontrol_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stage) ProtoMessage() {}

func (x *Stage) ProtoReflect() protoreflect.Message {
	mi := &file_arista_changecontrol_v1_changecontrol_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stage.ProtoReflect.Descriptor instead.
func (*Stage) Descriptor() ([]byte, []int) {
	return file_arista_changecontrol_v1_changecontrol_proto_rawDescGZIP(), []int{9}
}

func (x *Stage) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Stage) GetAction() *Action {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *Stage) GetRows() *RepeatedRepeatedString {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *Stage) GetStatus() StageStatus {
	if x != nil {
		return x.Status
	}
	return StageStatus_STAGE_STATUS_UNSPECIFIED
}

func (x *Stage) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *Stage) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *Stage) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

// StageMap is a map from stage ID to `Stage`. This has essentially
// the same structure as `StageConfigMap`, but with each ID mapping
// to a `Stage` instead of `StageConfig`.
type StageMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values is a map from stage ID to `Stage`.
	Values map[string]*Stage `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *StageMap) Reset() {
	*x = StageMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_changecontrol_v1_changecontrol_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StageMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StageMap) ProtoMessage() {}

func (x *StageMap) ProtoReflect() protoreflect.Message {
	mi := &file_arista_changecontrol_v1_changecontrol_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StageMap.ProtoReflect.Descriptor instead.
func (*StageMap) Descriptor() ([]byte, []int) {
	return file_arista_changecontrol_v1_changecontrol_proto_rawDescGZIP(), []int{10}
}

func (x *StageMap) GetValues() map[string]*Stage {
	if x != nil {
		return x.Values
	}
	return nil
}

// Change holds the configuration and status of the change of a
// change control.
type Change struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the change.
	Name *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// root_stage_id is the ID of the root stage or the stage that
	// should execute first.
	RootStageId *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=root_stage_id,json=rootStageId,proto3" json:"root_stage_id,omitempty"`
	// stages holds a configuration of stages and their statuses.
	Stages *StageMap `protobuf:"bytes,3,opt,name=stages,proto3" json:"stages,omitempty"`
	// notes are any notes associated with the change.
	Notes *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=notes,proto3" json:"notes,omitempty"`
	// time is the time at which the change was last updated.
	Time *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=time,proto3" json:"time,omitempty"`
	// user is the user by which the change was last updated.
	User *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *Change) Reset() {
	*x = Change{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_changecontrol_v1_changecontrol_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Change) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Change) ProtoMessage() {}

func (x *Change) ProtoReflect() protoreflect.Message {
	mi := &file_arista_changecontrol_v1_changecontrol_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Change.ProtoReflect.Descriptor instead.
func (*Change) Descriptor() ([]byte, []int) {
	return file_arista_changecontrol_v1_changecontrol_proto_rawDescGZIP(), []int{11}
}

func (x *Change) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Change) GetRootStageId() *wrapperspb.StringValue {
	if x != nil {
		return x.RootStageId
	}
	return nil
}

func (x *Change) GetStages() *StageMap {
	if x != nil {
		return x.Stages
	}
	return nil
}

func (x *Change) GetNotes() *wrapperspb.StringValue {
	if x != nil {
		return x.Notes
	}
	return nil
}

func (x *Change) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Change) GetUser() *wrapperspb.StringValue {
	if x != nil {
		return x.User
	}
	return nil
}

// Flag holds the configuration of a boolean flag plus some
// information about when and by whom it was set.
type Flag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value is the value of the flag (`true` or `false`).
	Value *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// notes are any notes associated with the setting of the flag.
	Notes *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=notes,proto3" json:"notes,omitempty"`
	// time is the time at which the flag was last updated.
	Time *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	// user is the user by which the flag was last updated.
	User *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *Flag) Reset() {
	*x = Flag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_changecontrol_v1_changecontrol_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Flag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flag) ProtoMessage() {}

func (x *Flag) ProtoReflect() protoreflect.Message {
	mi := &file_arista_changecontrol_v1_changecontrol_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flag.ProtoReflect.Descriptor instead.
func (*Flag) Descriptor() ([]byte, []int) {
	return file_arista_changecontrol_v1_changecontrol_proto_rawDescGZIP(), []int{12}
}

func (x *Flag) GetValue() *wrapperspb.BoolValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Flag) GetNotes() *wrapperspb.StringValue {
	if x != nil {
		return x.Notes
	}
	return nil
}

func (x *Flag) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Flag) GetUser() *wrapperspb.StringValue {
	if x != nil {
		return x.User
	}
	return nil
}

// TimestampFlag holds the configuration of a timestamp flag
// plus some information about when and by whom is was set.
type TimestampFlag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value is the value of the flag (some timestamp).
	Value *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// notes are any notes associated with the setting of the flag.
	Notes *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=notes,proto3" json:"notes,omitempty"`
	// time is the time at which the flag was last updated.
	Time *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	// user is the user by which the flag was last updated.
	User *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *TimestampFlag) Reset() {
	*x = TimestampFlag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_changecontrol_v1_changecontrol_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimestampFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimestampFlag) ProtoMessage() {}

func (x *TimestampFlag) ProtoReflect() protoreflect.Message {
	mi := &file_arista_changecontrol_v1_changecontrol_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimestampFlag.ProtoReflect.Descriptor instead.
func (*TimestampFlag) Descriptor() ([]byte, []int) {
	return file_arista_changecontrol_v1_changecontrol_proto_rawDescGZIP(), []int{13}
}

func (x *TimestampFlag) GetValue() *timestamppb.Timestamp {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TimestampFlag) GetNotes() *wrapperspb.StringValue {
	if x != nil {
		return x.Notes
	}
	return nil
}

func (x *TimestampFlag) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *TimestampFlag) GetUser() *wrapperspb.StringValue {
	if x != nil {
		return x.User
	}
	return nil
}

// Filter is used to filter changecontrols for requested device ids.
type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// device_ids includes the list of device ids to be matched with devices
	// in the changecontrol state model.
	// At least one of the provided device ids must be present in CC devices field.
	DeviceIds *fmp.RepeatedString `protobuf:"bytes,1,opt,name=device_ids,json=deviceIds,proto3" json:"device_ids,omitempty"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_changecontrol_v1_changecontrol_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_arista_changecontrol_v1_changecontrol_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_arista_changecontrol_v1_changecontrol_proto_rawDescGZIP(), []int{14}
}

func (x *Filter) GetDeviceIds() *fmp.RepeatedString {
	if x != nil {
		return x.DeviceIds
	}
	return nil
}

// ChangeControl holds the configuration and status of a change control.
type ChangeControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key uniquely identifies the change control.
	Key *ChangeControlKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// change holds the configuration and status of the change of
	// the change control.
	Change *Change `protobuf:"bytes,2,opt,name=change,proto3" json:"change,omitempty"`
	// approve indicates whether the change control was flagged
	// as approved (`approve.value` set to `true`) or unapproved
	// (`approve.value` set to `false`).
	Approve *Flag `protobuf:"bytes,3,opt,name=approve,proto3" json:"approve,omitempty"`
	// start indicates whether the change control was flagged to
	// start (`start.value` set to `true`) or stop (`start.value`
	// set to `false`) execution.
	Start *Flag `protobuf:"bytes,4,opt,name=start,proto3" json:"start,omitempty"`
	// status is the execution status of the change control.
	Status ChangeControlStatus `protobuf:"varint,5,opt,name=status,proto3,enum=arista.changecontrol.v1.ChangeControlStatus" json:"status,omitempty"`
	// error is any error that occurred during the execution of the
	// change control.
	Error *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=error,proto3" json:"error,omitempty"`
	// schedule indicates whether the change control was flagged
	// to be scheduled (`schedule.value` set to some timestamp) or
	// unscheduled (`schedule.value` set to `nil`) for execution.
	Schedule *TimestampFlag `protobuf:"bytes,7,opt,name=schedule,proto3" json:"schedule,omitempty"`
	// device_ids is a list of device IDs on which the change control will operate.
	DeviceIds *fmp.RepeatedString `protobuf:"bytes,8,opt,name=device_ids,json=deviceIds,proto3" json:"device_ids,omitempty"`
}

func (x *ChangeControl) Reset() {
	*x = ChangeControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_changecontrol_v1_changecontrol_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeControl) ProtoMessage() {}

func (x *ChangeControl) ProtoReflect() protoreflect.Message {
	mi := &file_arista_changecontrol_v1_changecontrol_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeControl.ProtoReflect.Descriptor instead.
func (*ChangeControl) Descriptor() ([]byte, []int) {
	return file_arista_changecontrol_v1_changecontrol_proto_rawDescGZIP(), []int{15}
}

func (x *ChangeControl) GetKey() *ChangeControlKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ChangeControl) GetChange() *Change {
	if x != nil {
		return x.Change
	}
	return nil
}

func (x *ChangeControl) GetApprove() *Flag {
	if x != nil {
		return x.Approve
	}
	return nil
}

func (x *ChangeControl) GetStart() *Flag {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *ChangeControl) GetStatus() ChangeControlStatus {
	if x != nil {
		return x.Status
	}
	return ChangeControlStatus_CHANGE_CONTROL_STATUS_UNSPECIFIED
}

func (x *ChangeControl) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ChangeControl) GetSchedule() *TimestampFlag {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *ChangeControl) GetDeviceIds() *fmp.RepeatedString {
	if x != nil {
		return x.DeviceIds
	}
	return nil
}

// ApproveConfig is used to configure the approval of a change control.
type ApproveConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key uniquely identifies the change control.
	Key *ChangeControlKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// approve is the flag to approve (`approve.value` set to `true`)
	// or unapprove (`approve.value` set to `false`) the change control.
	Approve *FlagConfig `protobuf:"bytes,2,opt,name=approve,proto3" json:"approve,omitempty"`
	// version is the timestamp of the change control to approve.
	// This field must be set when `approve.value` is set to `true`
	// and is intended to safeguard against approving a change control
	// that has been updated since last read.
	Version *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ApproveConfig) Reset() {
	*x = ApproveConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_changecontrol_v1_changecontrol_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveConfig) ProtoMessage() {}

func (x *ApproveConfig) ProtoReflect() protoreflect.Message {
	mi := &file_arista_changecontrol_v1_changecontrol_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveConfig.ProtoReflect.Descriptor instead.
func (*ApproveConfig) Descriptor() ([]byte, []int) {
	return file_arista_changecontrol_v1_changecontrol_proto_rawDescGZIP(), []int{16}
}

func (x *ApproveConfig) GetKey() *ChangeControlKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ApproveConfig) GetApprove() *FlagConfig {
	if x != nil {
		return x.Approve
	}
	return nil
}

func (x *ApproveConfig) GetVersion() *timestamppb.Timestamp {
	if x != nil {
		return x.Version
	}
	return nil
}

var File_arista_changecontrol_v1_changecontrol_proto protoreflect.FileDescriptor

var file_arista_changecontrol_v1_changecontrol_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x66, 0x6d, 0x70, 0x2f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x66,
	0x6d, 0x70, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x45, 0x0a, 0x16, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6d,
	0x70, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x46, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x04, 0x80, 0x8e, 0x19, 0x01,
	0x22, 0x9c, 0x01, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22,
	0xbd, 0x01, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x37, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x04, 0x72, 0x6f,
	0x77, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22,
	0xbe, 0x01, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d,
	0x61, 0x70, 0x12, 0x4b, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a,
	0x5f, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xf7, 0x01, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x72, 0x6f, 0x6f, 0x74, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x72, 0x0a, 0x0a, 0x46, 0x6c,
	0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x6e, 0x6f,
	0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x7b,
	0x0a, 0x13, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x9e, 0x02, 0x0a, 0x13,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x3b, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x3d, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x39, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x48, 0x0a, 0x08, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72, 0x77, 0x22, 0x9b, 0x03, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x43, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x08, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x45, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x59,
	0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcd, 0x02, 0x0a, 0x06, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x72, 0x6f, 0x6f,
	0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0xce, 0x01, 0x0a, 0x04, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0xd7, 0x01, 0x0a, 0x0d, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x30, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32,
	0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x74,
	0x65, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x22, 0x3c, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x32,
	0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x73, 0x22, 0xf7, 0x03, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x12, 0x3b, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x37, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x07, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x61,
	0x67, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x42, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x08, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6d, 0x70,
	0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x73, 0x3a, 0x10, 0xfa, 0x8d, 0x19, 0x02,
	0x72, 0x6f, 0x8a, 0x8e, 0x19, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xc9, 0x01, 0x0a,
	0x0d, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3b,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x07, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x07, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72, 0x77, 0x2a, 0x61, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x41, 0x47, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12,
	0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x2a, 0xa9, 0x01, 0x0a, 0x13,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x23, 0x0a,
	0x1f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x43, 0x48, 0x45,
	0x44, 0x55, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x42, 0x38, 0x5a, 0x36, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x2e, 0x76, 0x31, 0x3b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_arista_changecontrol_v1_changecontrol_proto_rawDescOnce sync.Once
	file_arista_changecontrol_v1_changecontrol_proto_rawDescData = file_arista_changecontrol_v1_changecontrol_proto_rawDesc
)

func file_arista_changecontrol_v1_changecontrol_proto_rawDescGZIP() []byte {
	file_arista_changecontrol_v1_changecontrol_proto_rawDescOnce.Do(func() {
		file_arista_changecontrol_v1_changecontrol_proto_rawDescData = protoimpl.X.CompressGZIP(file_arista_changecontrol_v1_changecontrol_proto_rawDescData)
	})
	return file_arista_changecontrol_v1_changecontrol_proto_rawDescData
}

var file_arista_changecontrol_v1_changecontrol_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_arista_changecontrol_v1_changecontrol_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_arista_changecontrol_v1_changecontrol_proto_goTypes = []interface{}{
	(StageStatus)(0),               // 0: arista.changecontrol.v1.StageStatus
	(ChangeControlStatus)(0),       // 1: arista.changecontrol.v1.ChangeControlStatus
	(*RepeatedRepeatedString)(nil), // 2: arista.changecontrol.v1.RepeatedRepeatedString
	(*ChangeControlKey)(nil),       // 3: arista.changecontrol.v1.ChangeControlKey
	(*Action)(nil),                 // 4: arista.changecontrol.v1.Action
	(*StageConfig)(nil),            // 5: arista.changecontrol.v1.StageConfig
	(*StageConfigMap)(nil),         // 6: arista.changecontrol.v1.StageConfigMap
	(*ChangeConfig)(nil),           // 7: arista.changecontrol.v1.ChangeConfig
	(*FlagConfig)(nil),             // 8: arista.changecontrol.v1.FlagConfig
	(*TimestampFlagConfig)(nil),    // 9: arista.changecontrol.v1.TimestampFlagConfig
	(*ChangeControlConfig)(nil),    // 10: arista.changecontrol.v1.ChangeControlConfig
	(*Stage)(nil),                  // 11: arista.changecontrol.v1.Stage
	(*StageMap)(nil),               // 12: arista.changecontrol.v1.StageMap
	(*Change)(nil),                 // 13: arista.changecontrol.v1.Change
	(*Flag)(nil),                   // 14: arista.changecontrol.v1.Flag
	(*TimestampFlag)(nil),          // 15: arista.changecontrol.v1.TimestampFlag
	(*Filter)(nil),                 // 16: arista.changecontrol.v1.Filter
	(*ChangeControl)(nil),          // 17: arista.changecontrol.v1.ChangeControl
	(*ApproveConfig)(nil),          // 18: arista.changecontrol.v1.ApproveConfig
	nil,                            // 19: arista.changecontrol.v1.StageConfigMap.ValuesEntry
	nil,                            // 20: arista.changecontrol.v1.StageMap.ValuesEntry
	(*fmp.RepeatedString)(nil),     // 21: fmp.RepeatedString
	(*wrapperspb.StringValue)(nil), // 22: google.protobuf.StringValue
	(*wrapperspb.UInt32Value)(nil), // 23: google.protobuf.UInt32Value
	(*fmp.MapStringString)(nil),    // 24: fmp.MapStringString
	(*wrapperspb.BoolValue)(nil),   // 25: google.protobuf.BoolValue
	(*timestamppb.Timestamp)(nil),  // 26: google.protobuf.Timestamp
}
var file_arista_changecontrol_v1_changecontrol_proto_depIdxs = []int32{
	21, // 0: arista.changecontrol.v1.RepeatedRepeatedString.values:type_name -> fmp.RepeatedString
	22, // 1: arista.changecontrol.v1.ChangeControlKey.id:type_name -> google.protobuf.StringValue
	22, // 2: arista.changecontrol.v1.Action.name:type_name -> google.protobuf.StringValue
	23, // 3: arista.changecontrol.v1.Action.timeout:type_name -> google.protobuf.UInt32Value
	24, // 4: arista.changecontrol.v1.Action.args:type_name -> fmp.MapStringString
	22, // 5: arista.changecontrol.v1.StageConfig.name:type_name -> google.protobuf.StringValue
	4,  // 6: arista.changecontrol.v1.StageConfig.action:type_name -> arista.changecontrol.v1.Action
	2,  // 7: arista.changecontrol.v1.StageConfig.rows:type_name -> arista.changecontrol.v1.RepeatedRepeatedString
	19, // 8: arista.changecontrol.v1.StageConfigMap.values:type_name -> arista.changecontrol.v1.StageConfigMap.ValuesEntry
	22, // 9: arista.changecontrol.v1.ChangeConfig.name:type_name -> google.protobuf.StringValue
	22, // 10: arista.changecontrol.v1.ChangeConfig.root_stage_id:type_name -> google.protobuf.StringValue
	6,  // 11: arista.changecontrol.v1.ChangeConfig.stages:type_name -> arista.changecontrol.v1.StageConfigMap
	22, // 12: arista.changecontrol.v1.ChangeConfig.notes:type_name -> google.protobuf.StringValue
	25, // 13: arista.changecontrol.v1.FlagConfig.value:type_name -> google.protobuf.BoolValue
	22, // 14: arista.changecontrol.v1.FlagConfig.notes:type_name -> google.protobuf.StringValue
	26, // 15: arista.changecontrol.v1.TimestampFlagConfig.value:type_name -> google.protobuf.Timestamp
	22, // 16: arista.changecontrol.v1.TimestampFlagConfig.notes:type_name -> google.protobuf.StringValue
	3,  // 17: arista.changecontrol.v1.ChangeControlConfig.key:type_name -> arista.changecontrol.v1.ChangeControlKey
	7,  // 18: arista.changecontrol.v1.ChangeControlConfig.change:type_name -> arista.changecontrol.v1.ChangeConfig
	8,  // 19: arista.changecontrol.v1.ChangeControlConfig.start:type_name -> arista.changecontrol.v1.FlagConfig
	9,  // 20: arista.changecontrol.v1.ChangeControlConfig.schedule:type_name -> arista.changecontrol.v1.TimestampFlagConfig
	22, // 21: arista.changecontrol.v1.Stage.name:type_name -> google.protobuf.StringValue
	4,  // 22: arista.changecontrol.v1.Stage.action:type_name -> arista.changecontrol.v1.Action
	2,  // 23: arista.changecontrol.v1.Stage.rows:type_name -> arista.changecontrol.v1.RepeatedRepeatedString
	0,  // 24: arista.changecontrol.v1.Stage.status:type_name -> arista.changecontrol.v1.StageStatus
	22, // 25: arista.changecontrol.v1.Stage.error:type_name -> google.protobuf.StringValue
	26, // 26: arista.changecontrol.v1.Stage.start_time:type_name -> google.protobuf.Timestamp
	26, // 27: arista.changecontrol.v1.Stage.end_time:type_name -> google.protobuf.Timestamp
	20, // 28: arista.changecontrol.v1.StageMap.values:type_name -> arista.changecontrol.v1.StageMap.ValuesEntry
	22, // 29: arista.changecontrol.v1.Change.name:type_name -> google.protobuf.StringValue
	22, // 30: arista.changecontrol.v1.Change.root_stage_id:type_name -> google.protobuf.StringValue
	12, // 31: arista.changecontrol.v1.Change.stages:type_name -> arista.changecontrol.v1.StageMap
	22, // 32: arista.changecontrol.v1.Change.notes:type_name -> google.protobuf.StringValue
	26, // 33: arista.changecontrol.v1.Change.time:type_name -> google.protobuf.Timestamp
	22, // 34: arista.changecontrol.v1.Change.user:type_name -> google.protobuf.StringValue
	25, // 35: arista.changecontrol.v1.Flag.value:type_name -> google.protobuf.BoolValue
	22, // 36: arista.changecontrol.v1.Flag.notes:type_name -> google.protobuf.StringValue
	26, // 37: arista.changecontrol.v1.Flag.time:type_name -> google.protobuf.Timestamp
	22, // 38: arista.changecontrol.v1.Flag.user:type_name -> google.protobuf.StringValue
	26, // 39: arista.changecontrol.v1.TimestampFlag.value:type_name -> google.protobuf.Timestamp
	22, // 40: arista.changecontrol.v1.TimestampFlag.notes:type_name -> google.protobuf.StringValue
	26, // 41: arista.changecontrol.v1.TimestampFlag.time:type_name -> google.protobuf.Timestamp
	22, // 42: arista.changecontrol.v1.TimestampFlag.user:type_name -> google.protobuf.StringValue
	21, // 43: arista.changecontrol.v1.Filter.device_ids:type_name -> fmp.RepeatedString
	3,  // 44: arista.changecontrol.v1.ChangeControl.key:type_name -> arista.changecontrol.v1.ChangeControlKey
	13, // 45: arista.changecontrol.v1.ChangeControl.change:type_name -> arista.changecontrol.v1.Change
	14, // 46: arista.changecontrol.v1.ChangeControl.approve:type_name -> arista.changecontrol.v1.Flag
	14, // 47: arista.changecontrol.v1.ChangeControl.start:type_name -> arista.changecontrol.v1.Flag
	1,  // 48: arista.changecontrol.v1.ChangeControl.status:type_name -> arista.changecontrol.v1.ChangeControlStatus
	22, // 49: arista.changecontrol.v1.ChangeControl.error:type_name -> google.protobuf.StringValue
	15, // 50: arista.changecontrol.v1.ChangeControl.schedule:type_name -> arista.changecontrol.v1.TimestampFlag
	21, // 51: arista.changecontrol.v1.ChangeControl.device_ids:type_name -> fmp.RepeatedString
	3,  // 52: arista.changecontrol.v1.ApproveConfig.key:type_name -> arista.changecontrol.v1.ChangeControlKey
	8,  // 53: arista.changecontrol.v1.ApproveConfig.approve:type_name -> arista.changecontrol.v1.FlagConfig
	26, // 54: arista.changecontrol.v1.ApproveConfig.version:type_name -> google.protobuf.Timestamp
	5,  // 55: arista.changecontrol.v1.StageConfigMap.ValuesEntry.value:type_name -> arista.changecontrol.v1.StageConfig
	11, // 56: arista.changecontrol.v1.StageMap.ValuesEntry.value:type_name -> arista.changecontrol.v1.Stage
	57, // [57:57] is the sub-list for method output_type
	57, // [57:57] is the sub-list for method input_type
	57, // [57:57] is the sub-list for extension type_name
	57, // [57:57] is the sub-list for extension extendee
	0,  // [0:57] is the sub-list for field type_name
}

func init() { file_arista_changecontrol_v1_changecontrol_proto_init() }
func file_arista_changecontrol_v1_changecontrol_proto_init() {
	if File_arista_changecontrol_v1_changecontrol_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_arista_changecontrol_v1_changecontrol_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepeatedRepeatedString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_changecontrol_v1_changecontrol_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeControlKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_changecontrol_v1_changecontrol_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_changecontrol_v1_changecontrol_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StageConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_changecontrol_v1_changecontrol_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StageConfigMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_changecontrol_v1_changecontrol_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_changecontrol_v1_changecontrol_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlagConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_changecontrol_v1_changecontrol_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimestampFlagConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_changecontrol_v1_changecontrol_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeControlConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_changecontrol_v1_changecontrol_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_changecontrol_v1_changecontrol_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StageMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_changecontrol_v1_changecontrol_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Change); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_changecontrol_v1_changecontrol_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Flag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_changecontrol_v1_changecontrol_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimestampFlag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_changecontrol_v1_changecontrol_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_changecontrol_v1_changecontrol_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_changecontrol_v1_changecontrol_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_arista_changecontrol_v1_changecontrol_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_arista_changecontrol_v1_changecontrol_proto_goTypes,
		DependencyIndexes: file_arista_changecontrol_v1_changecontrol_proto_depIdxs,
		EnumInfos:         file_arista_changecontrol_v1_changecontrol_proto_enumTypes,
		MessageInfos:      file_arista_changecontrol_v1_changecontrol_proto_msgTypes,
	}.Build()
	File_arista_changecontrol_v1_changecontrol_proto = out.File
	file_arista_changecontrol_v1_changecontrol_proto_rawDesc = nil
	file_arista_changecontrol_v1_changecontrol_proto_goTypes = nil
	file_arista_changecontrol_v1_changecontrol_proto_depIdxs = nil
}
