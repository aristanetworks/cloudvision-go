// Copyright (c) 2024 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

//
// Code generated by boomtown. DO NOT EDIT.
//

package changecontrol

import "google.golang.org/grpc"

// Client composes the service clients within the changecontrol package.
// This client can then be composed into a larger hierarchy for more complex clients.
//
// Because method names include the name of the Resource they operate on, the embedded
// clients are unnamed fields to reduce stutter.
//
// Included resources:
//   - ApproveConfig
//   - ChangeControl
//   - ChangeControlConfig
type Client struct {
	ApproveConfig       ApproveConfigServiceClient
	ChangeControl       ChangeControlServiceClient
	ChangeControlConfig ChangeControlConfigServiceClient
}

// NewClient creates a new composed-client from the given connection.
func NewClient(conn grpc.ClientConnInterface) Client {
	return Client{
		ApproveConfig:       NewApproveConfigServiceClient(conn),
		ChangeControl:       NewChangeControlServiceClient(conn),
		ChangeControlConfig: NewChangeControlConfigServiceClient(conn),
	}
}

// Server aggregates the various server interfaces required by gRPC.
// The included resources are:
//   - ApproveConfig
//   - ChangeControl
//   - ChangeControlConfig
type Server struct {
	ApproveConfig       ApproveConfigServiceServer
	ChangeControl       ChangeControlServiceServer
	ChangeControlConfig ChangeControlConfigServiceServer
}

// Register takes the given gRPC Server and registers our services with it.
func (s Server) Register(target *grpc.Server) {
	RegisterApproveConfigServiceServer(target, s.ApproveConfig)
	RegisterChangeControlServiceServer(target, s.ChangeControl)
	RegisterChangeControlConfigServiceServer(target, s.ChangeControlConfig)
}

// RegisterUnimplementeds adds unimplemented servers to the given gRPC Server
func RegisterUnimplementeds(target *grpc.Server) error {
	RegisterApproveConfigServiceServer(target,
		UnimplementedApproveConfigServiceServer{})
	RegisterChangeControlServiceServer(target,
		UnimplementedChangeControlServiceServer{})
	RegisterChangeControlConfigServiceServer(target,
		UnimplementedChangeControlConfigServiceServer{})
	return nil
}

// HasKey returns whether the given ApproveConfig has a key provided in the model.
func (a *ApproveConfig) HasKey() bool {
	return a.GetKey() != nil
}

// HasKey returns whether the given ApproveConfigRequest has a key provided in the request.
func (a *ApproveConfigRequest) HasKey() bool {
	return a.GetKey() != nil
}

// HasKey returns whether the given ApproveConfigSetRequest has a key provided in the request.
func (a *ApproveConfigSetRequest) HasKey() bool {
	return a.GetValue().HasKey()
}

// HasKey returns whether the given ApproveConfigDeleteRequest has a key provided in the request.
func (a *ApproveConfigDeleteRequest) HasKey() bool {
	return a.GetKey() != nil
}

// HasKey returns whether the given ChangeControl has a key provided in the model.
func (c *ChangeControl) HasKey() bool {
	return c.GetKey() != nil
}

// HasKey returns whether the given ChangeControlRequest has a key provided in the request.
func (c *ChangeControlRequest) HasKey() bool {
	return c.GetKey() != nil
}

// HasKey returns whether the given ChangeControlConfig has a key provided in the model.
func (c *ChangeControlConfig) HasKey() bool {
	return c.GetKey() != nil
}

// HasKey returns whether the given ChangeControlConfigRequest has a key provided in the request.
func (c *ChangeControlConfigRequest) HasKey() bool {
	return c.GetKey() != nil
}

// HasKey returns whether the given ChangeControlConfigSetRequest has a key provided in the request.
func (c *ChangeControlConfigSetRequest) HasKey() bool {
	return c.GetValue().HasKey()
}

// HasKey returns whether the given ChangeControlConfigDeleteRequest has a key provided in the request.
func (c *ChangeControlConfigDeleteRequest) HasKey() bool {
	return c.GetKey() != nil
}

// PassesPartialEqFilter returns whether this ChangeControlStatus matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (c ChangeControlStatus) PassesPartialEqFilter(cmp ChangeControlStatus) bool {
	if cmp != ChangeControlStatus(0) {
		return c == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether this StageStatus matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (s StageStatus) PassesPartialEqFilter(cmp StageStatus) bool {
	if cmp != StageStatus(0) {
		return s == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether the Action matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (a *Action) PassesPartialEqFilter(cmp *Action) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if a == nil {
		return false
	}

	if cmp.Name != nil {
		if a.Name == nil {
			return false
		}
		if a.Name.Value != cmp.Name.Value {
			return false
		}
	}

	if cmp.Timeout != nil {
		if a.Timeout == nil {
			return false
		}
		if a.Timeout.Value != cmp.Timeout.Value {
			return false
		}
	}
	if !a.Args.PassesPartialEqFilter(cmp.Args) {
		return false
	}

	return true
}

// PassesPartialEqFilter returns whether the Change matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (c *Change) PassesPartialEqFilter(cmp *Change) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if c == nil {
		return false
	}

	if cmp.Name != nil {
		if c.Name == nil {
			return false
		}
		if c.Name.Value != cmp.Name.Value {
			return false
		}
	}

	if cmp.RootStageId != nil {
		if c.RootStageId == nil {
			return false
		}
		if c.RootStageId.Value != cmp.RootStageId.Value {
			return false
		}
	}
	if !c.Stages.PassesPartialEqFilter(cmp.Stages) {
		return false
	}

	if cmp.Notes != nil {
		if c.Notes == nil {
			return false
		}
		if c.Notes.Value != cmp.Notes.Value {
			return false
		}
	}

	if cmp.Time != nil {
		if cmp.Time.Seconds != 0 {
			if c.Time.Seconds != cmp.Time.Seconds {
				return false
			}
		}
		if cmp.Time.Nanos != 0 {
			if c.Time.Nanos != cmp.Time.Nanos {
				return false
			}
		}
	}

	if cmp.User != nil {
		if c.User == nil {
			return false
		}
		if c.User.Value != cmp.User.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the ChangeConfig matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (c *ChangeConfig) PassesPartialEqFilter(cmp *ChangeConfig) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if c == nil {
		return false
	}

	if cmp.Name != nil {
		if c.Name == nil {
			return false
		}
		if c.Name.Value != cmp.Name.Value {
			return false
		}
	}

	if cmp.RootStageId != nil {
		if c.RootStageId == nil {
			return false
		}
		if c.RootStageId.Value != cmp.RootStageId.Value {
			return false
		}
	}
	if !c.Stages.PassesPartialEqFilter(cmp.Stages) {
		return false
	}

	if cmp.Notes != nil {
		if c.Notes == nil {
			return false
		}
		if c.Notes.Value != cmp.Notes.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the Flag matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (f *Flag) PassesPartialEqFilter(cmp *Flag) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if f == nil {
		return false
	}

	if cmp.Value != nil {
		if f.Value == nil {
			return false
		}
		if f.Value.Value != cmp.Value.Value {
			return false
		}
	}

	if cmp.Notes != nil {
		if f.Notes == nil {
			return false
		}
		if f.Notes.Value != cmp.Notes.Value {
			return false
		}
	}

	if cmp.Time != nil {
		if cmp.Time.Seconds != 0 {
			if f.Time.Seconds != cmp.Time.Seconds {
				return false
			}
		}
		if cmp.Time.Nanos != 0 {
			if f.Time.Nanos != cmp.Time.Nanos {
				return false
			}
		}
	}

	if cmp.User != nil {
		if f.User == nil {
			return false
		}
		if f.User.Value != cmp.User.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the FlagConfig matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (f *FlagConfig) PassesPartialEqFilter(cmp *FlagConfig) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if f == nil {
		return false
	}

	if cmp.Value != nil {
		if f.Value == nil {
			return false
		}
		if f.Value.Value != cmp.Value.Value {
			return false
		}
	}

	if cmp.Notes != nil {
		if f.Notes == nil {
			return false
		}
		if f.Notes.Value != cmp.Notes.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the RepeatedRepeatedString matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (r *RepeatedRepeatedString) PassesPartialEqFilter(cmp *RepeatedRepeatedString) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if r == nil {
		return false
	}
	if len(r.Values) != len(cmp.Values) {
		return false
	}
	for i, f := range r.Values {
		if !f.PassesPartialEqFilter(cmp.Values[i]) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the Stage matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (s *Stage) PassesPartialEqFilter(cmp *Stage) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if s == nil {
		return false
	}

	if cmp.Name != nil {
		if s.Name == nil {
			return false
		}
		if s.Name.Value != cmp.Name.Value {
			return false
		}
	}
	if !s.Action.PassesPartialEqFilter(cmp.Action) {
		return false
	}
	if !s.Rows.PassesPartialEqFilter(cmp.Rows) {
		return false
	}
	if !s.Status.PassesPartialEqFilter(cmp.Status) {
		return false
	}

	if cmp.Error != nil {
		if s.Error == nil {
			return false
		}
		if s.Error.Value != cmp.Error.Value {
			return false
		}
	}

	if cmp.StartTime != nil {
		if cmp.StartTime.Seconds != 0 {
			if s.StartTime.Seconds != cmp.StartTime.Seconds {
				return false
			}
		}
		if cmp.StartTime.Nanos != 0 {
			if s.StartTime.Nanos != cmp.StartTime.Nanos {
				return false
			}
		}
	}

	if cmp.EndTime != nil {
		if cmp.EndTime.Seconds != 0 {
			if s.EndTime.Seconds != cmp.EndTime.Seconds {
				return false
			}
		}
		if cmp.EndTime.Nanos != 0 {
			if s.EndTime.Nanos != cmp.EndTime.Nanos {
				return false
			}
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the StageConfig matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (s *StageConfig) PassesPartialEqFilter(cmp *StageConfig) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if s == nil {
		return false
	}

	if cmp.Name != nil {
		if s.Name == nil {
			return false
		}
		if s.Name.Value != cmp.Name.Value {
			return false
		}
	}
	if !s.Action.PassesPartialEqFilter(cmp.Action) {
		return false
	}
	if !s.Rows.PassesPartialEqFilter(cmp.Rows) {
		return false
	}

	return true
}

// PassesPartialEqFilter returns whether the StageConfigMap matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (s *StageConfigMap) PassesPartialEqFilter(cmp *StageConfigMap) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if s == nil {
		return false
	}
	if len(cmp.Values) > len(s.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := s.Values[k]
		if !exists || !self.PassesPartialEqFilter(filt) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the StageMap matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (s *StageMap) PassesPartialEqFilter(cmp *StageMap) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if s == nil {
		return false
	}
	if len(cmp.Values) > len(s.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := s.Values[k]
		if !exists || !self.PassesPartialEqFilter(filt) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the TimestampFlag matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (t *TimestampFlag) PassesPartialEqFilter(cmp *TimestampFlag) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if t == nil {
		return false
	}

	if cmp.Value != nil {
		if cmp.Value.Seconds != 0 {
			if t.Value.Seconds != cmp.Value.Seconds {
				return false
			}
		}
		if cmp.Value.Nanos != 0 {
			if t.Value.Nanos != cmp.Value.Nanos {
				return false
			}
		}
	}

	if cmp.Notes != nil {
		if t.Notes == nil {
			return false
		}
		if t.Notes.Value != cmp.Notes.Value {
			return false
		}
	}

	if cmp.Time != nil {
		if cmp.Time.Seconds != 0 {
			if t.Time.Seconds != cmp.Time.Seconds {
				return false
			}
		}
		if cmp.Time.Nanos != 0 {
			if t.Time.Nanos != cmp.Time.Nanos {
				return false
			}
		}
	}

	if cmp.User != nil {
		if t.User == nil {
			return false
		}
		if t.User.Value != cmp.User.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the TimestampFlagConfig matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (t *TimestampFlagConfig) PassesPartialEqFilter(cmp *TimestampFlagConfig) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if t == nil {
		return false
	}

	if cmp.Value != nil {
		if cmp.Value.Seconds != 0 {
			if t.Value.Seconds != cmp.Value.Seconds {
				return false
			}
		}
		if cmp.Value.Nanos != 0 {
			if t.Value.Nanos != cmp.Value.Nanos {
				return false
			}
		}
	}

	if cmp.Notes != nil {
		if t.Notes == nil {
			return false
		}
		if t.Notes.Value != cmp.Notes.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the ChangeControlKey matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (c *ChangeControlKey) PassesPartialEqFilter(cmp *ChangeControlKey) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if c == nil {
		return false
	}

	if cmp.Id != nil {
		if c.Id == nil {
			return false
		}
		if c.Id.Value != cmp.Id.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the ApproveConfig matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (a *ApproveConfig) PassesPartialEqFilter(cmp *ApproveConfig) bool {
	// if the resource is nil, there is nothing to send to the client
	if a == nil {
		return false
	}

	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if !a.Key.PassesPartialEqFilter(cmp.Key) {
		return false
	}

	if !a.Approve.PassesPartialEqFilter(cmp.Approve) {
		return false
	}

	if cmp.Version != nil {
		if cmp.Version.Seconds != 0 {
			if a.Version.Seconds != cmp.Version.Seconds {
				return false
			}
		}
		if cmp.Version.Nanos != 0 {
			if a.Version.Nanos != cmp.Version.Nanos {
				return false
			}
		}
	}

	return true
}

// MatchesAnyPartialEqFilter returns whether the receiver matches any filters in the given set.
func (a *ApproveConfig) MatchesAnyPartialEqFilter(filters []*ApproveConfig) bool {
	if len(filters) == 0 {
		return true
	}

	for _, filt := range filters {
		if a.PassesPartialEqFilter(filt) {
			return true
		}
	}

	return false
}

// PassesPartialEqFilter returns whether the ChangeControl matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (c *ChangeControl) PassesPartialEqFilter(cmp *ChangeControl) bool {
	// if the resource is nil, there is nothing to send to the client
	if c == nil {
		return false
	}

	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if !c.Key.PassesPartialEqFilter(cmp.Key) {
		return false
	}

	if !c.Change.PassesPartialEqFilter(cmp.Change) {
		return false
	}

	if !c.Approve.PassesPartialEqFilter(cmp.Approve) {
		return false
	}

	if !c.Start.PassesPartialEqFilter(cmp.Start) {
		return false
	}

	if !c.Status.PassesPartialEqFilter(cmp.Status) {
		return false
	}

	if cmp.Error != nil {
		if c.Error == nil {
			return false
		}
		if c.Error.Value != cmp.Error.Value {
			return false
		}
	}

	if !c.Schedule.PassesPartialEqFilter(cmp.Schedule) {
		return false
	}

	if !c.DeviceIds.PassesPartialEqFilter(cmp.DeviceIds) {
		return false
	}

	return true
}

// MatchesAnyPartialEqFilter returns whether the receiver matches any filters in the given set.
func (c *ChangeControl) MatchesAnyPartialEqFilter(filters []*ChangeControl) bool {
	if len(filters) == 0 {
		return true
	}

	for _, filt := range filters {
		if c.PassesPartialEqFilter(filt) {
			return true
		}
	}

	return false
}

// PassesPartialEqFilter returns whether the ChangeControlConfig matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (c *ChangeControlConfig) PassesPartialEqFilter(cmp *ChangeControlConfig) bool {
	// if the resource is nil, there is nothing to send to the client
	if c == nil {
		return false
	}

	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if !c.Key.PassesPartialEqFilter(cmp.Key) {
		return false
	}

	if !c.Change.PassesPartialEqFilter(cmp.Change) {
		return false
	}

	if !c.Start.PassesPartialEqFilter(cmp.Start) {
		return false
	}

	if !c.Schedule.PassesPartialEqFilter(cmp.Schedule) {
		return false
	}

	return true
}

// MatchesAnyPartialEqFilter returns whether the receiver matches any filters in the given set.
func (c *ChangeControlConfig) MatchesAnyPartialEqFilter(filters []*ChangeControlConfig) bool {
	if len(filters) == 0 {
		return true
	}

	for _, filt := range filters {
		if c.PassesPartialEqFilter(filt) {
			return true
		}
	}

	return false
}
