// Copyright (c) 2020 Arista Networks, Inc.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

//
// Code generated by boomtown. DO NOT EDIT.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.3
// source: arista/tag.v1/services.gen.proto

package tag

import (
	subscriptions "github.com/aristanetworks/cloudvision-go/api/arista/subscriptions"
	time "github.com/aristanetworks/cloudvision-go/api/arista/time"
	context "context"
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type DeviceTagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a DeviceTag instance to retrieve.
	// This value (and all fields, unless otherwise specified) must be populated.
	Key *TagKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at twhich it makes the request.
	Time *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *DeviceTagRequest) Reset() {
	*x = DeviceTagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v1_services_gen_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceTagRequest) ProtoMessage() {}

func (x *DeviceTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v1_services_gen_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceTagRequest.ProtoReflect.Descriptor instead.
func (*DeviceTagRequest) Descriptor() ([]byte, []int) {
	return file_arista_tag_v1_services_gen_proto_rawDescGZIP(), []int{0}
}

func (x *DeviceTagRequest) GetKey() *TagKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *DeviceTagRequest) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type DeviceTagResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *DeviceTag `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// DeviceTag instance in this response.
	Time *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *DeviceTagResponse) Reset() {
	*x = DeviceTagResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v1_services_gen_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceTagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceTagResponse) ProtoMessage() {}

func (x *DeviceTagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v1_services_gen_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceTagResponse.ProtoReflect.Descriptor instead.
func (*DeviceTagResponse) Descriptor() ([]byte, []int) {
	return file_arista_tag_v1_services_gen_proto_rawDescGZIP(), []int{1}
}

func (x *DeviceTagResponse) GetValue() *DeviceTag {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *DeviceTagResponse) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type DeviceTagStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*DeviceTag `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *DeviceTagStreamRequest) Reset() {
	*x = DeviceTagStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v1_services_gen_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceTagStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceTagStreamRequest) ProtoMessage() {}

func (x *DeviceTagStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v1_services_gen_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceTagStreamRequest.ProtoReflect.Descriptor instead.
func (*DeviceTagStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_tag_v1_services_gen_proto_rawDescGZIP(), []int{2}
}

func (x *DeviceTagStreamRequest) GetPartialEqFilter() []*DeviceTag {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *DeviceTagStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type DeviceTagStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *DeviceTag `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this DeviceTag's last modification.
	Time *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the DeviceTag value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *DeviceTagStreamResponse) Reset() {
	*x = DeviceTagStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v1_services_gen_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceTagStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceTagStreamResponse) ProtoMessage() {}

func (x *DeviceTagStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v1_services_gen_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceTagStreamResponse.ProtoReflect.Descriptor instead.
func (*DeviceTagStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_tag_v1_services_gen_proto_rawDescGZIP(), []int{3}
}

func (x *DeviceTagStreamResponse) GetValue() *DeviceTag {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *DeviceTagStreamResponse) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *DeviceTagStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation_UNSPECIFIED
}

type DeviceTagAssignmentConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a DeviceTagAssignmentConfig instance to retrieve.
	// This value (and all fields, unless otherwise specified) must be populated.
	Key *DeviceTagAssignmentKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at twhich it makes the request.
	Time *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *DeviceTagAssignmentConfigRequest) Reset() {
	*x = DeviceTagAssignmentConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v1_services_gen_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceTagAssignmentConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceTagAssignmentConfigRequest) ProtoMessage() {}

func (x *DeviceTagAssignmentConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v1_services_gen_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceTagAssignmentConfigRequest.ProtoReflect.Descriptor instead.
func (*DeviceTagAssignmentConfigRequest) Descriptor() ([]byte, []int) {
	return file_arista_tag_v1_services_gen_proto_rawDescGZIP(), []int{4}
}

func (x *DeviceTagAssignmentConfigRequest) GetKey() *DeviceTagAssignmentKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *DeviceTagAssignmentConfigRequest) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type DeviceTagAssignmentConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *DeviceTagAssignmentConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// DeviceTagAssignmentConfig instance in this response.
	Time *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *DeviceTagAssignmentConfigResponse) Reset() {
	*x = DeviceTagAssignmentConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v1_services_gen_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceTagAssignmentConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceTagAssignmentConfigResponse) ProtoMessage() {}

func (x *DeviceTagAssignmentConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v1_services_gen_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceTagAssignmentConfigResponse.ProtoReflect.Descriptor instead.
func (*DeviceTagAssignmentConfigResponse) Descriptor() ([]byte, []int) {
	return file_arista_tag_v1_services_gen_proto_rawDescGZIP(), []int{5}
}

func (x *DeviceTagAssignmentConfigResponse) GetValue() *DeviceTagAssignmentConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *DeviceTagAssignmentConfigResponse) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type DeviceTagAssignmentConfigStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*DeviceTagAssignmentConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *DeviceTagAssignmentConfigStreamRequest) Reset() {
	*x = DeviceTagAssignmentConfigStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v1_services_gen_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceTagAssignmentConfigStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceTagAssignmentConfigStreamRequest) ProtoMessage() {}

func (x *DeviceTagAssignmentConfigStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v1_services_gen_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceTagAssignmentConfigStreamRequest.ProtoReflect.Descriptor instead.
func (*DeviceTagAssignmentConfigStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_tag_v1_services_gen_proto_rawDescGZIP(), []int{6}
}

func (x *DeviceTagAssignmentConfigStreamRequest) GetPartialEqFilter() []*DeviceTagAssignmentConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *DeviceTagAssignmentConfigStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type DeviceTagAssignmentConfigStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *DeviceTagAssignmentConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this DeviceTagAssignmentConfig's last modification.
	Time *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the DeviceTagAssignmentConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *DeviceTagAssignmentConfigStreamResponse) Reset() {
	*x = DeviceTagAssignmentConfigStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v1_services_gen_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceTagAssignmentConfigStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceTagAssignmentConfigStreamResponse) ProtoMessage() {}

func (x *DeviceTagAssignmentConfigStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v1_services_gen_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceTagAssignmentConfigStreamResponse.ProtoReflect.Descriptor instead.
func (*DeviceTagAssignmentConfigStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_tag_v1_services_gen_proto_rawDescGZIP(), []int{7}
}

func (x *DeviceTagAssignmentConfigStreamResponse) GetValue() *DeviceTagAssignmentConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *DeviceTagAssignmentConfigStreamResponse) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *DeviceTagAssignmentConfigStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation_UNSPECIFIED
}

type DeviceTagAssignmentConfigSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DeviceTagAssignmentConfig carries the value to set into the datastore.
	// See the documentation on the DeviceTagAssignmentConfig struct for which fields are required.
	Value *DeviceTagAssignmentConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DeviceTagAssignmentConfigSetRequest) Reset() {
	*x = DeviceTagAssignmentConfigSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v1_services_gen_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceTagAssignmentConfigSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceTagAssignmentConfigSetRequest) ProtoMessage() {}

func (x *DeviceTagAssignmentConfigSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v1_services_gen_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceTagAssignmentConfigSetRequest.ProtoReflect.Descriptor instead.
func (*DeviceTagAssignmentConfigSetRequest) Descriptor() ([]byte, []int) {
	return file_arista_tag_v1_services_gen_proto_rawDescGZIP(), []int{8}
}

func (x *DeviceTagAssignmentConfigSetRequest) GetValue() *DeviceTagAssignmentConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

type DeviceTagAssignmentConfigSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value carries all the values given in the DeviceTagAssignmentConfigSetRequest as well
	// as any server-generated values.
	Value *DeviceTagAssignmentConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==CreatedAt will include this instance.
	//
	Time *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *DeviceTagAssignmentConfigSetResponse) Reset() {
	*x = DeviceTagAssignmentConfigSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v1_services_gen_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceTagAssignmentConfigSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceTagAssignmentConfigSetResponse) ProtoMessage() {}

func (x *DeviceTagAssignmentConfigSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v1_services_gen_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceTagAssignmentConfigSetResponse.ProtoReflect.Descriptor instead.
func (*DeviceTagAssignmentConfigSetResponse) Descriptor() ([]byte, []int) {
	return file_arista_tag_v1_services_gen_proto_rawDescGZIP(), []int{9}
}

func (x *DeviceTagAssignmentConfigSetResponse) GetValue() *DeviceTagAssignmentConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *DeviceTagAssignmentConfigSetResponse) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type DeviceTagAssignmentConfigDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key indicates which DeviceTagAssignmentConfig instance to remove.
	// This field (and all keys, unless otherwise specified) must always be set.
	Key *DeviceTagAssignmentKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *DeviceTagAssignmentConfigDeleteRequest) Reset() {
	*x = DeviceTagAssignmentConfigDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v1_services_gen_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceTagAssignmentConfigDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceTagAssignmentConfigDeleteRequest) ProtoMessage() {}

func (x *DeviceTagAssignmentConfigDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v1_services_gen_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceTagAssignmentConfigDeleteRequest.ProtoReflect.Descriptor instead.
func (*DeviceTagAssignmentConfigDeleteRequest) Descriptor() ([]byte, []int) {
	return file_arista_tag_v1_services_gen_proto_rawDescGZIP(), []int{10}
}

func (x *DeviceTagAssignmentConfigDeleteRequest) GetKey() *DeviceTagAssignmentKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type DeviceTagAssignmentConfigDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key echoes back the key of the deleted DeviceTagAssignmentConfig instance.
	Key *DeviceTagAssignmentKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==DeletedAt will not include this instance.
	//
	Time *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *DeviceTagAssignmentConfigDeleteResponse) Reset() {
	*x = DeviceTagAssignmentConfigDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v1_services_gen_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceTagAssignmentConfigDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceTagAssignmentConfigDeleteResponse) ProtoMessage() {}

func (x *DeviceTagAssignmentConfigDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v1_services_gen_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceTagAssignmentConfigDeleteResponse.ProtoReflect.Descriptor instead.
func (*DeviceTagAssignmentConfigDeleteResponse) Descriptor() ([]byte, []int) {
	return file_arista_tag_v1_services_gen_proto_rawDescGZIP(), []int{11}
}

func (x *DeviceTagAssignmentConfigDeleteResponse) GetKey() *DeviceTagAssignmentKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *DeviceTagAssignmentConfigDeleteResponse) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type DeviceTagConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a DeviceTagConfig instance to retrieve.
	// This value (and all fields, unless otherwise specified) must be populated.
	Key *TagKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at twhich it makes the request.
	Time *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *DeviceTagConfigRequest) Reset() {
	*x = DeviceTagConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v1_services_gen_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceTagConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceTagConfigRequest) ProtoMessage() {}

func (x *DeviceTagConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v1_services_gen_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceTagConfigRequest.ProtoReflect.Descriptor instead.
func (*DeviceTagConfigRequest) Descriptor() ([]byte, []int) {
	return file_arista_tag_v1_services_gen_proto_rawDescGZIP(), []int{12}
}

func (x *DeviceTagConfigRequest) GetKey() *TagKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *DeviceTagConfigRequest) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type DeviceTagConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *DeviceTagConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// DeviceTagConfig instance in this response.
	Time *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *DeviceTagConfigResponse) Reset() {
	*x = DeviceTagConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v1_services_gen_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceTagConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceTagConfigResponse) ProtoMessage() {}

func (x *DeviceTagConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v1_services_gen_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceTagConfigResponse.ProtoReflect.Descriptor instead.
func (*DeviceTagConfigResponse) Descriptor() ([]byte, []int) {
	return file_arista_tag_v1_services_gen_proto_rawDescGZIP(), []int{13}
}

func (x *DeviceTagConfigResponse) GetValue() *DeviceTagConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *DeviceTagConfigResponse) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type DeviceTagConfigStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*DeviceTagConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *DeviceTagConfigStreamRequest) Reset() {
	*x = DeviceTagConfigStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v1_services_gen_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceTagConfigStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceTagConfigStreamRequest) ProtoMessage() {}

func (x *DeviceTagConfigStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v1_services_gen_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceTagConfigStreamRequest.ProtoReflect.Descriptor instead.
func (*DeviceTagConfigStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_tag_v1_services_gen_proto_rawDescGZIP(), []int{14}
}

func (x *DeviceTagConfigStreamRequest) GetPartialEqFilter() []*DeviceTagConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *DeviceTagConfigStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type DeviceTagConfigStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *DeviceTagConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this DeviceTagConfig's last modification.
	Time *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the DeviceTagConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *DeviceTagConfigStreamResponse) Reset() {
	*x = DeviceTagConfigStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v1_services_gen_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceTagConfigStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceTagConfigStreamResponse) ProtoMessage() {}

func (x *DeviceTagConfigStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v1_services_gen_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceTagConfigStreamResponse.ProtoReflect.Descriptor instead.
func (*DeviceTagConfigStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_tag_v1_services_gen_proto_rawDescGZIP(), []int{15}
}

func (x *DeviceTagConfigStreamResponse) GetValue() *DeviceTagConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *DeviceTagConfigStreamResponse) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *DeviceTagConfigStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation_UNSPECIFIED
}

type DeviceTagConfigSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DeviceTagConfig carries the value to set into the datastore.
	// See the documentation on the DeviceTagConfig struct for which fields are required.
	Value *DeviceTagConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DeviceTagConfigSetRequest) Reset() {
	*x = DeviceTagConfigSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v1_services_gen_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceTagConfigSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceTagConfigSetRequest) ProtoMessage() {}

func (x *DeviceTagConfigSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v1_services_gen_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceTagConfigSetRequest.ProtoReflect.Descriptor instead.
func (*DeviceTagConfigSetRequest) Descriptor() ([]byte, []int) {
	return file_arista_tag_v1_services_gen_proto_rawDescGZIP(), []int{16}
}

func (x *DeviceTagConfigSetRequest) GetValue() *DeviceTagConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

type DeviceTagConfigSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value carries all the values given in the DeviceTagConfigSetRequest as well
	// as any server-generated values.
	Value *DeviceTagConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==CreatedAt will include this instance.
	//
	Time *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *DeviceTagConfigSetResponse) Reset() {
	*x = DeviceTagConfigSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v1_services_gen_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceTagConfigSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceTagConfigSetResponse) ProtoMessage() {}

func (x *DeviceTagConfigSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v1_services_gen_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceTagConfigSetResponse.ProtoReflect.Descriptor instead.
func (*DeviceTagConfigSetResponse) Descriptor() ([]byte, []int) {
	return file_arista_tag_v1_services_gen_proto_rawDescGZIP(), []int{17}
}

func (x *DeviceTagConfigSetResponse) GetValue() *DeviceTagConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *DeviceTagConfigSetResponse) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type DeviceTagConfigDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key indicates which DeviceTagConfig instance to remove.
	// This field (and all keys, unless otherwise specified) must always be set.
	Key *TagKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *DeviceTagConfigDeleteRequest) Reset() {
	*x = DeviceTagConfigDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v1_services_gen_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceTagConfigDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceTagConfigDeleteRequest) ProtoMessage() {}

func (x *DeviceTagConfigDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v1_services_gen_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceTagConfigDeleteRequest.ProtoReflect.Descriptor instead.
func (*DeviceTagConfigDeleteRequest) Descriptor() ([]byte, []int) {
	return file_arista_tag_v1_services_gen_proto_rawDescGZIP(), []int{18}
}

func (x *DeviceTagConfigDeleteRequest) GetKey() *TagKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type DeviceTagConfigDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key echoes back the key of the deleted DeviceTagConfig instance.
	Key *TagKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==DeletedAt will not include this instance.
	//
	Time *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *DeviceTagConfigDeleteResponse) Reset() {
	*x = DeviceTagConfigDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v1_services_gen_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceTagConfigDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceTagConfigDeleteResponse) ProtoMessage() {}

func (x *DeviceTagConfigDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v1_services_gen_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceTagConfigDeleteResponse.ProtoReflect.Descriptor instead.
func (*DeviceTagConfigDeleteResponse) Descriptor() ([]byte, []int) {
	return file_arista_tag_v1_services_gen_proto_rawDescGZIP(), []int{19}
}

func (x *DeviceTagConfigDeleteResponse) GetKey() *TagKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *DeviceTagConfigDeleteResponse) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type InterfaceTagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a InterfaceTag instance to retrieve.
	// This value (and all fields, unless otherwise specified) must be populated.
	Key *TagKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at twhich it makes the request.
	Time *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *InterfaceTagRequest) Reset() {
	*x = InterfaceTagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v1_services_gen_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceTagRequest) ProtoMessage() {}

func (x *InterfaceTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v1_services_gen_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceTagRequest.ProtoReflect.Descriptor instead.
func (*InterfaceTagRequest) Descriptor() ([]byte, []int) {
	return file_arista_tag_v1_services_gen_proto_rawDescGZIP(), []int{20}
}

func (x *InterfaceTagRequest) GetKey() *TagKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *InterfaceTagRequest) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type InterfaceTagResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *InterfaceTag `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// InterfaceTag instance in this response.
	Time *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *InterfaceTagResponse) Reset() {
	*x = InterfaceTagResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v1_services_gen_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceTagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceTagResponse) ProtoMessage() {}

func (x *InterfaceTagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v1_services_gen_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceTagResponse.ProtoReflect.Descriptor instead.
func (*InterfaceTagResponse) Descriptor() ([]byte, []int) {
	return file_arista_tag_v1_services_gen_proto_rawDescGZIP(), []int{21}
}

func (x *InterfaceTagResponse) GetValue() *InterfaceTag {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *InterfaceTagResponse) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type InterfaceTagStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*InterfaceTag `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *InterfaceTagStreamRequest) Reset() {
	*x = InterfaceTagStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v1_services_gen_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceTagStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceTagStreamRequest) ProtoMessage() {}

func (x *InterfaceTagStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v1_services_gen_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceTagStreamRequest.ProtoReflect.Descriptor instead.
func (*InterfaceTagStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_tag_v1_services_gen_proto_rawDescGZIP(), []int{22}
}

func (x *InterfaceTagStreamRequest) GetPartialEqFilter() []*InterfaceTag {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *InterfaceTagStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type InterfaceTagStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *InterfaceTag `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this InterfaceTag's last modification.
	Time *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the InterfaceTag value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *InterfaceTagStreamResponse) Reset() {
	*x = InterfaceTagStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v1_services_gen_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceTagStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceTagStreamResponse) ProtoMessage() {}

func (x *InterfaceTagStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v1_services_gen_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceTagStreamResponse.ProtoReflect.Descriptor instead.
func (*InterfaceTagStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_tag_v1_services_gen_proto_rawDescGZIP(), []int{23}
}

func (x *InterfaceTagStreamResponse) GetValue() *InterfaceTag {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *InterfaceTagStreamResponse) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *InterfaceTagStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation_UNSPECIFIED
}

type InterfaceTagAssignmentConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a InterfaceTagAssignmentConfig instance to retrieve.
	// This value (and all fields, unless otherwise specified) must be populated.
	Key *InterfaceTagAssignmentKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at twhich it makes the request.
	Time *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *InterfaceTagAssignmentConfigRequest) Reset() {
	*x = InterfaceTagAssignmentConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v1_services_gen_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceTagAssignmentConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceTagAssignmentConfigRequest) ProtoMessage() {}

func (x *InterfaceTagAssignmentConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v1_services_gen_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceTagAssignmentConfigRequest.ProtoReflect.Descriptor instead.
func (*InterfaceTagAssignmentConfigRequest) Descriptor() ([]byte, []int) {
	return file_arista_tag_v1_services_gen_proto_rawDescGZIP(), []int{24}
}

func (x *InterfaceTagAssignmentConfigRequest) GetKey() *InterfaceTagAssignmentKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *InterfaceTagAssignmentConfigRequest) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type InterfaceTagAssignmentConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *InterfaceTagAssignmentConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// InterfaceTagAssignmentConfig instance in this response.
	Time *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *InterfaceTagAssignmentConfigResponse) Reset() {
	*x = InterfaceTagAssignmentConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v1_services_gen_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceTagAssignmentConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceTagAssignmentConfigResponse) ProtoMessage() {}

func (x *InterfaceTagAssignmentConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v1_services_gen_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceTagAssignmentConfigResponse.ProtoReflect.Descriptor instead.
func (*InterfaceTagAssignmentConfigResponse) Descriptor() ([]byte, []int) {
	return file_arista_tag_v1_services_gen_proto_rawDescGZIP(), []int{25}
}

func (x *InterfaceTagAssignmentConfigResponse) GetValue() *InterfaceTagAssignmentConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *InterfaceTagAssignmentConfigResponse) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type InterfaceTagAssignmentConfigStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*InterfaceTagAssignmentConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *InterfaceTagAssignmentConfigStreamRequest) Reset() {
	*x = InterfaceTagAssignmentConfigStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v1_services_gen_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceTagAssignmentConfigStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceTagAssignmentConfigStreamRequest) ProtoMessage() {}

func (x *InterfaceTagAssignmentConfigStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v1_services_gen_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceTagAssignmentConfigStreamRequest.ProtoReflect.Descriptor instead.
func (*InterfaceTagAssignmentConfigStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_tag_v1_services_gen_proto_rawDescGZIP(), []int{26}
}

func (x *InterfaceTagAssignmentConfigStreamRequest) GetPartialEqFilter() []*InterfaceTagAssignmentConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *InterfaceTagAssignmentConfigStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type InterfaceTagAssignmentConfigStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *InterfaceTagAssignmentConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this InterfaceTagAssignmentConfig's last modification.
	Time *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the InterfaceTagAssignmentConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *InterfaceTagAssignmentConfigStreamResponse) Reset() {
	*x = InterfaceTagAssignmentConfigStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v1_services_gen_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceTagAssignmentConfigStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceTagAssignmentConfigStreamResponse) ProtoMessage() {}

func (x *InterfaceTagAssignmentConfigStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v1_services_gen_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceTagAssignmentConfigStreamResponse.ProtoReflect.Descriptor instead.
func (*InterfaceTagAssignmentConfigStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_tag_v1_services_gen_proto_rawDescGZIP(), []int{27}
}

func (x *InterfaceTagAssignmentConfigStreamResponse) GetValue() *InterfaceTagAssignmentConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *InterfaceTagAssignmentConfigStreamResponse) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *InterfaceTagAssignmentConfigStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation_UNSPECIFIED
}

type InterfaceTagAssignmentConfigSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// InterfaceTagAssignmentConfig carries the value to set into the datastore.
	// See the documentation on the InterfaceTagAssignmentConfig struct for which fields are required.
	Value *InterfaceTagAssignmentConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *InterfaceTagAssignmentConfigSetRequest) Reset() {
	*x = InterfaceTagAssignmentConfigSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v1_services_gen_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceTagAssignmentConfigSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceTagAssignmentConfigSetRequest) ProtoMessage() {}

func (x *InterfaceTagAssignmentConfigSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v1_services_gen_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceTagAssignmentConfigSetRequest.ProtoReflect.Descriptor instead.
func (*InterfaceTagAssignmentConfigSetRequest) Descriptor() ([]byte, []int) {
	return file_arista_tag_v1_services_gen_proto_rawDescGZIP(), []int{28}
}

func (x *InterfaceTagAssignmentConfigSetRequest) GetValue() *InterfaceTagAssignmentConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

type InterfaceTagAssignmentConfigSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value carries all the values given in the InterfaceTagAssignmentConfigSetRequest as well
	// as any server-generated values.
	Value *InterfaceTagAssignmentConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==CreatedAt will include this instance.
	//
	Time *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *InterfaceTagAssignmentConfigSetResponse) Reset() {
	*x = InterfaceTagAssignmentConfigSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v1_services_gen_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceTagAssignmentConfigSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceTagAssignmentConfigSetResponse) ProtoMessage() {}

func (x *InterfaceTagAssignmentConfigSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v1_services_gen_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceTagAssignmentConfigSetResponse.ProtoReflect.Descriptor instead.
func (*InterfaceTagAssignmentConfigSetResponse) Descriptor() ([]byte, []int) {
	return file_arista_tag_v1_services_gen_proto_rawDescGZIP(), []int{29}
}

func (x *InterfaceTagAssignmentConfigSetResponse) GetValue() *InterfaceTagAssignmentConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *InterfaceTagAssignmentConfigSetResponse) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type InterfaceTagAssignmentConfigDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key indicates which InterfaceTagAssignmentConfig instance to remove.
	// This field (and all keys, unless otherwise specified) must always be set.
	Key *InterfaceTagAssignmentKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *InterfaceTagAssignmentConfigDeleteRequest) Reset() {
	*x = InterfaceTagAssignmentConfigDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v1_services_gen_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceTagAssignmentConfigDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceTagAssignmentConfigDeleteRequest) ProtoMessage() {}

func (x *InterfaceTagAssignmentConfigDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v1_services_gen_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceTagAssignmentConfigDeleteRequest.ProtoReflect.Descriptor instead.
func (*InterfaceTagAssignmentConfigDeleteRequest) Descriptor() ([]byte, []int) {
	return file_arista_tag_v1_services_gen_proto_rawDescGZIP(), []int{30}
}

func (x *InterfaceTagAssignmentConfigDeleteRequest) GetKey() *InterfaceTagAssignmentKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type InterfaceTagAssignmentConfigDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key echoes back the key of the deleted InterfaceTagAssignmentConfig instance.
	Key *InterfaceTagAssignmentKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==DeletedAt will not include this instance.
	//
	Time *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *InterfaceTagAssignmentConfigDeleteResponse) Reset() {
	*x = InterfaceTagAssignmentConfigDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v1_services_gen_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceTagAssignmentConfigDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceTagAssignmentConfigDeleteResponse) ProtoMessage() {}

func (x *InterfaceTagAssignmentConfigDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v1_services_gen_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceTagAssignmentConfigDeleteResponse.ProtoReflect.Descriptor instead.
func (*InterfaceTagAssignmentConfigDeleteResponse) Descriptor() ([]byte, []int) {
	return file_arista_tag_v1_services_gen_proto_rawDescGZIP(), []int{31}
}

func (x *InterfaceTagAssignmentConfigDeleteResponse) GetKey() *InterfaceTagAssignmentKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *InterfaceTagAssignmentConfigDeleteResponse) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type InterfaceTagConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a InterfaceTagConfig instance to retrieve.
	// This value (and all fields, unless otherwise specified) must be populated.
	Key *TagKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at twhich it makes the request.
	Time *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *InterfaceTagConfigRequest) Reset() {
	*x = InterfaceTagConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v1_services_gen_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceTagConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceTagConfigRequest) ProtoMessage() {}

func (x *InterfaceTagConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v1_services_gen_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceTagConfigRequest.ProtoReflect.Descriptor instead.
func (*InterfaceTagConfigRequest) Descriptor() ([]byte, []int) {
	return file_arista_tag_v1_services_gen_proto_rawDescGZIP(), []int{32}
}

func (x *InterfaceTagConfigRequest) GetKey() *TagKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *InterfaceTagConfigRequest) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type InterfaceTagConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *InterfaceTagConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// InterfaceTagConfig instance in this response.
	Time *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *InterfaceTagConfigResponse) Reset() {
	*x = InterfaceTagConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v1_services_gen_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceTagConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceTagConfigResponse) ProtoMessage() {}

func (x *InterfaceTagConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v1_services_gen_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceTagConfigResponse.ProtoReflect.Descriptor instead.
func (*InterfaceTagConfigResponse) Descriptor() ([]byte, []int) {
	return file_arista_tag_v1_services_gen_proto_rawDescGZIP(), []int{33}
}

func (x *InterfaceTagConfigResponse) GetValue() *InterfaceTagConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *InterfaceTagConfigResponse) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type InterfaceTagConfigStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*InterfaceTagConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *InterfaceTagConfigStreamRequest) Reset() {
	*x = InterfaceTagConfigStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v1_services_gen_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceTagConfigStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceTagConfigStreamRequest) ProtoMessage() {}

func (x *InterfaceTagConfigStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v1_services_gen_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceTagConfigStreamRequest.ProtoReflect.Descriptor instead.
func (*InterfaceTagConfigStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_tag_v1_services_gen_proto_rawDescGZIP(), []int{34}
}

func (x *InterfaceTagConfigStreamRequest) GetPartialEqFilter() []*InterfaceTagConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *InterfaceTagConfigStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type InterfaceTagConfigStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *InterfaceTagConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this InterfaceTagConfig's last modification.
	Time *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the InterfaceTagConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *InterfaceTagConfigStreamResponse) Reset() {
	*x = InterfaceTagConfigStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v1_services_gen_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceTagConfigStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceTagConfigStreamResponse) ProtoMessage() {}

func (x *InterfaceTagConfigStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v1_services_gen_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceTagConfigStreamResponse.ProtoReflect.Descriptor instead.
func (*InterfaceTagConfigStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_tag_v1_services_gen_proto_rawDescGZIP(), []int{35}
}

func (x *InterfaceTagConfigStreamResponse) GetValue() *InterfaceTagConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *InterfaceTagConfigStreamResponse) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *InterfaceTagConfigStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation_UNSPECIFIED
}

type InterfaceTagConfigSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// InterfaceTagConfig carries the value to set into the datastore.
	// See the documentation on the InterfaceTagConfig struct for which fields are required.
	Value *InterfaceTagConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *InterfaceTagConfigSetRequest) Reset() {
	*x = InterfaceTagConfigSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v1_services_gen_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceTagConfigSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceTagConfigSetRequest) ProtoMessage() {}

func (x *InterfaceTagConfigSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v1_services_gen_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceTagConfigSetRequest.ProtoReflect.Descriptor instead.
func (*InterfaceTagConfigSetRequest) Descriptor() ([]byte, []int) {
	return file_arista_tag_v1_services_gen_proto_rawDescGZIP(), []int{36}
}

func (x *InterfaceTagConfigSetRequest) GetValue() *InterfaceTagConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

type InterfaceTagConfigSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value carries all the values given in the InterfaceTagConfigSetRequest as well
	// as any server-generated values.
	Value *InterfaceTagConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==CreatedAt will include this instance.
	//
	Time *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *InterfaceTagConfigSetResponse) Reset() {
	*x = InterfaceTagConfigSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v1_services_gen_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceTagConfigSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceTagConfigSetResponse) ProtoMessage() {}

func (x *InterfaceTagConfigSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v1_services_gen_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceTagConfigSetResponse.ProtoReflect.Descriptor instead.
func (*InterfaceTagConfigSetResponse) Descriptor() ([]byte, []int) {
	return file_arista_tag_v1_services_gen_proto_rawDescGZIP(), []int{37}
}

func (x *InterfaceTagConfigSetResponse) GetValue() *InterfaceTagConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *InterfaceTagConfigSetResponse) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type InterfaceTagConfigDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key indicates which InterfaceTagConfig instance to remove.
	// This field (and all keys, unless otherwise specified) must always be set.
	Key *TagKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *InterfaceTagConfigDeleteRequest) Reset() {
	*x = InterfaceTagConfigDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v1_services_gen_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceTagConfigDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceTagConfigDeleteRequest) ProtoMessage() {}

func (x *InterfaceTagConfigDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v1_services_gen_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceTagConfigDeleteRequest.ProtoReflect.Descriptor instead.
func (*InterfaceTagConfigDeleteRequest) Descriptor() ([]byte, []int) {
	return file_arista_tag_v1_services_gen_proto_rawDescGZIP(), []int{38}
}

func (x *InterfaceTagConfigDeleteRequest) GetKey() *TagKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type InterfaceTagConfigDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key echoes back the key of the deleted InterfaceTagConfig instance.
	Key *TagKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==DeletedAt will not include this instance.
	//
	Time *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *InterfaceTagConfigDeleteResponse) Reset() {
	*x = InterfaceTagConfigDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_tag_v1_services_gen_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceTagConfigDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceTagConfigDeleteResponse) ProtoMessage() {}

func (x *InterfaceTagConfigDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_tag_v1_services_gen_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceTagConfigDeleteResponse.ProtoReflect.Descriptor instead.
func (*InterfaceTagConfigDeleteResponse) Descriptor() ([]byte, []int) {
	return file_arista_tag_v1_services_gen_proto_rawDescGZIP(), []int{39}
}

func (x *InterfaceTagConfigDeleteResponse) GetKey() *TagKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *InterfaceTagConfigDeleteResponse) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

var File_arista_tag_v1_services_gen_proto protoreflect.FileDescriptor

var file_arista_tag_v1_services_gen_proto_rawDesc = []byte{
	0x0a, 0x20, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x67, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0d, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76,
	0x31, 0x1a, 0x17, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31,
	0x2f, 0x74, 0x61, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x28, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6b, 0x0a,
	0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x27, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x61, 0x67, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x73, 0x0a, 0x11, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0x8b, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x11, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74,
	0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x52,
	0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xae, 0x01,
	0x0a, 0x17, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x61, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x8b,
	0x01, 0x0a, 0x20, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x93, 0x01, 0x0a,
	0x21, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x26, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a,
	0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x22, 0xce, 0x01, 0x0a, 0x27, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x65, 0x0a, 0x23, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61,
	0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x24, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0x61, 0x0a, 0x26, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x22, 0x92, 0x01, 0x0a, 0x27, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x37, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x71, 0x0a, 0x16, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x61, 0x67, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x7f, 0x0a, 0x17,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x97, 0x01,
	0x0a, 0x1c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a,
	0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x1d, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x51, 0x0a, 0x19, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74,
	0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x47, 0x0a, 0x1c,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x4b, 0x65, 0x79,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x78, 0x0a, 0x1d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0x6e, 0x0a, 0x13, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0x79, 0x0a, 0x14, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x54, 0x61, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x19, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67,
	0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xb4,
	0x01, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x23, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x24, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x29, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65,
	0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xd4, 0x01, 0x0a, 0x2a, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x6b, 0x0a, 0x26, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9c, 0x01,
	0x0a, 0x27, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x67, 0x0a, 0x29,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x98, 0x01, 0x0a, 0x2a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x22, 0x74, 0x0a, 0x19, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x4b, 0x65,
	0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x61,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x9d,
	0x01, 0x0a, 0x1f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x4d, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xc0,
	0x01, 0x0a, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x57, 0x0a, 0x1c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x61,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x1d, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x4a, 0x0a, 0x1f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74,
	0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x22, 0x7b, 0x0a, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x61,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x32, 0x98,
	0x02, 0x0a, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x12, 0x1f, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x59, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x25, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x61, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x5c, 0x0a, 0x09, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x25, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x61, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0xf1, 0x04, 0x0a, 0x20, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6b,
	0x0a, 0x06, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x12, 0x2f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x06, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x35, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74,
	0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x7c, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x12, 0x35, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x30, 0x01, 0x12, 0x6e, 0x0a, 0x03, 0x53, 0x65, 0x74, 0x12, 0x32, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x33, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x35,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74,
	0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x83, 0x04,
	0x0a, 0x16, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4f,
	0x6e, 0x65, 0x12, 0x25, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x65, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x2b, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x68, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74,
	0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x30, 0x01, 0x12, 0x5a, 0x0a, 0x03, 0x53, 0x65, 0x74, 0x12, 0x28, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63,
	0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74,
	0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x32, 0xad, 0x02, 0x0a, 0x13, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x54, 0x61, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x06, 0x47,
	0x65, 0x74, 0x4f, 0x6e, 0x65, 0x12, 0x22, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74,
	0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54,
	0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f,
	0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x28, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x54, 0x61, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12,
	0x62, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x28, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x54, 0x61, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x30, 0x01, 0x32, 0x93, 0x05, 0x0a, 0x23, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x71, 0x0a, 0x06, 0x47,
	0x65, 0x74, 0x4f, 0x6e, 0x65, 0x12, 0x32, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74,
	0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54,
	0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7f,
	0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x38, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x39, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12,
	0x82, 0x01, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x38, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x30, 0x01, 0x12, 0x74, 0x0a, 0x03, 0x53, 0x65, 0x74, 0x12, 0x35, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x36, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7d, 0x0a, 0x06, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x38, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x61,
	0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xa4, 0x04, 0x0a, 0x19, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4f, 0x6e,
	0x65, 0x12, 0x28, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x12, 0x2e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x30, 0x01, 0x12, 0x6e, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x12, 0x2e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x30, 0x01, 0x12, 0x60, 0x0a, 0x03, 0x53, 0x65, 0x74, 0x12, 0x2b, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x2e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x24, 0x5a, 0x22, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2f, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x74, 0x61, 0x67, 0x2e,
	0x76, 0x31, 0x3b, 0x74, 0x61, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_arista_tag_v1_services_gen_proto_rawDescOnce sync.Once
	file_arista_tag_v1_services_gen_proto_rawDescData = file_arista_tag_v1_services_gen_proto_rawDesc
)

func file_arista_tag_v1_services_gen_proto_rawDescGZIP() []byte {
	file_arista_tag_v1_services_gen_proto_rawDescOnce.Do(func() {
		file_arista_tag_v1_services_gen_proto_rawDescData = protoimpl.X.CompressGZIP(file_arista_tag_v1_services_gen_proto_rawDescData)
	})
	return file_arista_tag_v1_services_gen_proto_rawDescData
}

var file_arista_tag_v1_services_gen_proto_msgTypes = make([]protoimpl.MessageInfo, 40)
var file_arista_tag_v1_services_gen_proto_goTypes = []interface{}{
	(*DeviceTagRequest)(nil),                           // 0: arista.tag.v1.DeviceTagRequest
	(*DeviceTagResponse)(nil),                          // 1: arista.tag.v1.DeviceTagResponse
	(*DeviceTagStreamRequest)(nil),                     // 2: arista.tag.v1.DeviceTagStreamRequest
	(*DeviceTagStreamResponse)(nil),                    // 3: arista.tag.v1.DeviceTagStreamResponse
	(*DeviceTagAssignmentConfigRequest)(nil),           // 4: arista.tag.v1.DeviceTagAssignmentConfigRequest
	(*DeviceTagAssignmentConfigResponse)(nil),          // 5: arista.tag.v1.DeviceTagAssignmentConfigResponse
	(*DeviceTagAssignmentConfigStreamRequest)(nil),     // 6: arista.tag.v1.DeviceTagAssignmentConfigStreamRequest
	(*DeviceTagAssignmentConfigStreamResponse)(nil),    // 7: arista.tag.v1.DeviceTagAssignmentConfigStreamResponse
	(*DeviceTagAssignmentConfigSetRequest)(nil),        // 8: arista.tag.v1.DeviceTagAssignmentConfigSetRequest
	(*DeviceTagAssignmentConfigSetResponse)(nil),       // 9: arista.tag.v1.DeviceTagAssignmentConfigSetResponse
	(*DeviceTagAssignmentConfigDeleteRequest)(nil),     // 10: arista.tag.v1.DeviceTagAssignmentConfigDeleteRequest
	(*DeviceTagAssignmentConfigDeleteResponse)(nil),    // 11: arista.tag.v1.DeviceTagAssignmentConfigDeleteResponse
	(*DeviceTagConfigRequest)(nil),                     // 12: arista.tag.v1.DeviceTagConfigRequest
	(*DeviceTagConfigResponse)(nil),                    // 13: arista.tag.v1.DeviceTagConfigResponse
	(*DeviceTagConfigStreamRequest)(nil),               // 14: arista.tag.v1.DeviceTagConfigStreamRequest
	(*DeviceTagConfigStreamResponse)(nil),              // 15: arista.tag.v1.DeviceTagConfigStreamResponse
	(*DeviceTagConfigSetRequest)(nil),                  // 16: arista.tag.v1.DeviceTagConfigSetRequest
	(*DeviceTagConfigSetResponse)(nil),                 // 17: arista.tag.v1.DeviceTagConfigSetResponse
	(*DeviceTagConfigDeleteRequest)(nil),               // 18: arista.tag.v1.DeviceTagConfigDeleteRequest
	(*DeviceTagConfigDeleteResponse)(nil),              // 19: arista.tag.v1.DeviceTagConfigDeleteResponse
	(*InterfaceTagRequest)(nil),                        // 20: arista.tag.v1.InterfaceTagRequest
	(*InterfaceTagResponse)(nil),                       // 21: arista.tag.v1.InterfaceTagResponse
	(*InterfaceTagStreamRequest)(nil),                  // 22: arista.tag.v1.InterfaceTagStreamRequest
	(*InterfaceTagStreamResponse)(nil),                 // 23: arista.tag.v1.InterfaceTagStreamResponse
	(*InterfaceTagAssignmentConfigRequest)(nil),        // 24: arista.tag.v1.InterfaceTagAssignmentConfigRequest
	(*InterfaceTagAssignmentConfigResponse)(nil),       // 25: arista.tag.v1.InterfaceTagAssignmentConfigResponse
	(*InterfaceTagAssignmentConfigStreamRequest)(nil),  // 26: arista.tag.v1.InterfaceTagAssignmentConfigStreamRequest
	(*InterfaceTagAssignmentConfigStreamResponse)(nil), // 27: arista.tag.v1.InterfaceTagAssignmentConfigStreamResponse
	(*InterfaceTagAssignmentConfigSetRequest)(nil),     // 28: arista.tag.v1.InterfaceTagAssignmentConfigSetRequest
	(*InterfaceTagAssignmentConfigSetResponse)(nil),    // 29: arista.tag.v1.InterfaceTagAssignmentConfigSetResponse
	(*InterfaceTagAssignmentConfigDeleteRequest)(nil),  // 30: arista.tag.v1.InterfaceTagAssignmentConfigDeleteRequest
	(*InterfaceTagAssignmentConfigDeleteResponse)(nil), // 31: arista.tag.v1.InterfaceTagAssignmentConfigDeleteResponse
	(*InterfaceTagConfigRequest)(nil),                  // 32: arista.tag.v1.InterfaceTagConfigRequest
	(*InterfaceTagConfigResponse)(nil),                 // 33: arista.tag.v1.InterfaceTagConfigResponse
	(*InterfaceTagConfigStreamRequest)(nil),            // 34: arista.tag.v1.InterfaceTagConfigStreamRequest
	(*InterfaceTagConfigStreamResponse)(nil),           // 35: arista.tag.v1.InterfaceTagConfigStreamResponse
	(*InterfaceTagConfigSetRequest)(nil),               // 36: arista.tag.v1.InterfaceTagConfigSetRequest
	(*InterfaceTagConfigSetResponse)(nil),              // 37: arista.tag.v1.InterfaceTagConfigSetResponse
	(*InterfaceTagConfigDeleteRequest)(nil),            // 38: arista.tag.v1.InterfaceTagConfigDeleteRequest
	(*InterfaceTagConfigDeleteResponse)(nil),           // 39: arista.tag.v1.InterfaceTagConfigDeleteResponse
	(*TagKey)(nil),                                     // 40: arista.tag.v1.TagKey
	(*timestamp.Timestamp)(nil),                        // 41: google.protobuf.Timestamp
	(*DeviceTag)(nil),                                  // 42: arista.tag.v1.DeviceTag
	(*time.TimeBounds)(nil),                            // 43: arista.time.TimeBounds
	(subscriptions.Operation)(0),                       // 44: arista.subscriptions.Operation
	(*DeviceTagAssignmentKey)(nil),                     // 45: arista.tag.v1.DeviceTagAssignmentKey
	(*DeviceTagAssignmentConfig)(nil),                  // 46: arista.tag.v1.DeviceTagAssignmentConfig
	(*DeviceTagConfig)(nil),                            // 47: arista.tag.v1.DeviceTagConfig
	(*InterfaceTag)(nil),                               // 48: arista.tag.v1.InterfaceTag
	(*InterfaceTagAssignmentKey)(nil),                  // 49: arista.tag.v1.InterfaceTagAssignmentKey
	(*InterfaceTagAssignmentConfig)(nil),               // 50: arista.tag.v1.InterfaceTagAssignmentConfig
	(*InterfaceTagConfig)(nil),                         // 51: arista.tag.v1.InterfaceTagConfig
}
var file_arista_tag_v1_services_gen_proto_depIdxs = []int32{
	40,  // 0: arista.tag.v1.DeviceTagRequest.key:type_name -> arista.tag.v1.TagKey
	41,  // 1: arista.tag.v1.DeviceTagRequest.time:type_name -> google.protobuf.Timestamp
	42,  // 2: arista.tag.v1.DeviceTagResponse.value:type_name -> arista.tag.v1.DeviceTag
	41,  // 3: arista.tag.v1.DeviceTagResponse.time:type_name -> google.protobuf.Timestamp
	42,  // 4: arista.tag.v1.DeviceTagStreamRequest.partial_eq_filter:type_name -> arista.tag.v1.DeviceTag
	43,  // 5: arista.tag.v1.DeviceTagStreamRequest.time:type_name -> arista.time.TimeBounds
	42,  // 6: arista.tag.v1.DeviceTagStreamResponse.value:type_name -> arista.tag.v1.DeviceTag
	41,  // 7: arista.tag.v1.DeviceTagStreamResponse.time:type_name -> google.protobuf.Timestamp
	44,  // 8: arista.tag.v1.DeviceTagStreamResponse.type:type_name -> arista.subscriptions.Operation
	45,  // 9: arista.tag.v1.DeviceTagAssignmentConfigRequest.key:type_name -> arista.tag.v1.DeviceTagAssignmentKey
	41,  // 10: arista.tag.v1.DeviceTagAssignmentConfigRequest.time:type_name -> google.protobuf.Timestamp
	46,  // 11: arista.tag.v1.DeviceTagAssignmentConfigResponse.value:type_name -> arista.tag.v1.DeviceTagAssignmentConfig
	41,  // 12: arista.tag.v1.DeviceTagAssignmentConfigResponse.time:type_name -> google.protobuf.Timestamp
	46,  // 13: arista.tag.v1.DeviceTagAssignmentConfigStreamRequest.partial_eq_filter:type_name -> arista.tag.v1.DeviceTagAssignmentConfig
	43,  // 14: arista.tag.v1.DeviceTagAssignmentConfigStreamRequest.time:type_name -> arista.time.TimeBounds
	46,  // 15: arista.tag.v1.DeviceTagAssignmentConfigStreamResponse.value:type_name -> arista.tag.v1.DeviceTagAssignmentConfig
	41,  // 16: arista.tag.v1.DeviceTagAssignmentConfigStreamResponse.time:type_name -> google.protobuf.Timestamp
	44,  // 17: arista.tag.v1.DeviceTagAssignmentConfigStreamResponse.type:type_name -> arista.subscriptions.Operation
	46,  // 18: arista.tag.v1.DeviceTagAssignmentConfigSetRequest.value:type_name -> arista.tag.v1.DeviceTagAssignmentConfig
	46,  // 19: arista.tag.v1.DeviceTagAssignmentConfigSetResponse.value:type_name -> arista.tag.v1.DeviceTagAssignmentConfig
	41,  // 20: arista.tag.v1.DeviceTagAssignmentConfigSetResponse.time:type_name -> google.protobuf.Timestamp
	45,  // 21: arista.tag.v1.DeviceTagAssignmentConfigDeleteRequest.key:type_name -> arista.tag.v1.DeviceTagAssignmentKey
	45,  // 22: arista.tag.v1.DeviceTagAssignmentConfigDeleteResponse.key:type_name -> arista.tag.v1.DeviceTagAssignmentKey
	41,  // 23: arista.tag.v1.DeviceTagAssignmentConfigDeleteResponse.time:type_name -> google.protobuf.Timestamp
	40,  // 24: arista.tag.v1.DeviceTagConfigRequest.key:type_name -> arista.tag.v1.TagKey
	41,  // 25: arista.tag.v1.DeviceTagConfigRequest.time:type_name -> google.protobuf.Timestamp
	47,  // 26: arista.tag.v1.DeviceTagConfigResponse.value:type_name -> arista.tag.v1.DeviceTagConfig
	41,  // 27: arista.tag.v1.DeviceTagConfigResponse.time:type_name -> google.protobuf.Timestamp
	47,  // 28: arista.tag.v1.DeviceTagConfigStreamRequest.partial_eq_filter:type_name -> arista.tag.v1.DeviceTagConfig
	43,  // 29: arista.tag.v1.DeviceTagConfigStreamRequest.time:type_name -> arista.time.TimeBounds
	47,  // 30: arista.tag.v1.DeviceTagConfigStreamResponse.value:type_name -> arista.tag.v1.DeviceTagConfig
	41,  // 31: arista.tag.v1.DeviceTagConfigStreamResponse.time:type_name -> google.protobuf.Timestamp
	44,  // 32: arista.tag.v1.DeviceTagConfigStreamResponse.type:type_name -> arista.subscriptions.Operation
	47,  // 33: arista.tag.v1.DeviceTagConfigSetRequest.value:type_name -> arista.tag.v1.DeviceTagConfig
	47,  // 34: arista.tag.v1.DeviceTagConfigSetResponse.value:type_name -> arista.tag.v1.DeviceTagConfig
	41,  // 35: arista.tag.v1.DeviceTagConfigSetResponse.time:type_name -> google.protobuf.Timestamp
	40,  // 36: arista.tag.v1.DeviceTagConfigDeleteRequest.key:type_name -> arista.tag.v1.TagKey
	40,  // 37: arista.tag.v1.DeviceTagConfigDeleteResponse.key:type_name -> arista.tag.v1.TagKey
	41,  // 38: arista.tag.v1.DeviceTagConfigDeleteResponse.time:type_name -> google.protobuf.Timestamp
	40,  // 39: arista.tag.v1.InterfaceTagRequest.key:type_name -> arista.tag.v1.TagKey
	41,  // 40: arista.tag.v1.InterfaceTagRequest.time:type_name -> google.protobuf.Timestamp
	48,  // 41: arista.tag.v1.InterfaceTagResponse.value:type_name -> arista.tag.v1.InterfaceTag
	41,  // 42: arista.tag.v1.InterfaceTagResponse.time:type_name -> google.protobuf.Timestamp
	48,  // 43: arista.tag.v1.InterfaceTagStreamRequest.partial_eq_filter:type_name -> arista.tag.v1.InterfaceTag
	43,  // 44: arista.tag.v1.InterfaceTagStreamRequest.time:type_name -> arista.time.TimeBounds
	48,  // 45: arista.tag.v1.InterfaceTagStreamResponse.value:type_name -> arista.tag.v1.InterfaceTag
	41,  // 46: arista.tag.v1.InterfaceTagStreamResponse.time:type_name -> google.protobuf.Timestamp
	44,  // 47: arista.tag.v1.InterfaceTagStreamResponse.type:type_name -> arista.subscriptions.Operation
	49,  // 48: arista.tag.v1.InterfaceTagAssignmentConfigRequest.key:type_name -> arista.tag.v1.InterfaceTagAssignmentKey
	41,  // 49: arista.tag.v1.InterfaceTagAssignmentConfigRequest.time:type_name -> google.protobuf.Timestamp
	50,  // 50: arista.tag.v1.InterfaceTagAssignmentConfigResponse.value:type_name -> arista.tag.v1.InterfaceTagAssignmentConfig
	41,  // 51: arista.tag.v1.InterfaceTagAssignmentConfigResponse.time:type_name -> google.protobuf.Timestamp
	50,  // 52: arista.tag.v1.InterfaceTagAssignmentConfigStreamRequest.partial_eq_filter:type_name -> arista.tag.v1.InterfaceTagAssignmentConfig
	43,  // 53: arista.tag.v1.InterfaceTagAssignmentConfigStreamRequest.time:type_name -> arista.time.TimeBounds
	50,  // 54: arista.tag.v1.InterfaceTagAssignmentConfigStreamResponse.value:type_name -> arista.tag.v1.InterfaceTagAssignmentConfig
	41,  // 55: arista.tag.v1.InterfaceTagAssignmentConfigStreamResponse.time:type_name -> google.protobuf.Timestamp
	44,  // 56: arista.tag.v1.InterfaceTagAssignmentConfigStreamResponse.type:type_name -> arista.subscriptions.Operation
	50,  // 57: arista.tag.v1.InterfaceTagAssignmentConfigSetRequest.value:type_name -> arista.tag.v1.InterfaceTagAssignmentConfig
	50,  // 58: arista.tag.v1.InterfaceTagAssignmentConfigSetResponse.value:type_name -> arista.tag.v1.InterfaceTagAssignmentConfig
	41,  // 59: arista.tag.v1.InterfaceTagAssignmentConfigSetResponse.time:type_name -> google.protobuf.Timestamp
	49,  // 60: arista.tag.v1.InterfaceTagAssignmentConfigDeleteRequest.key:type_name -> arista.tag.v1.InterfaceTagAssignmentKey
	49,  // 61: arista.tag.v1.InterfaceTagAssignmentConfigDeleteResponse.key:type_name -> arista.tag.v1.InterfaceTagAssignmentKey
	41,  // 62: arista.tag.v1.InterfaceTagAssignmentConfigDeleteResponse.time:type_name -> google.protobuf.Timestamp
	40,  // 63: arista.tag.v1.InterfaceTagConfigRequest.key:type_name -> arista.tag.v1.TagKey
	41,  // 64: arista.tag.v1.InterfaceTagConfigRequest.time:type_name -> google.protobuf.Timestamp
	51,  // 65: arista.tag.v1.InterfaceTagConfigResponse.value:type_name -> arista.tag.v1.InterfaceTagConfig
	41,  // 66: arista.tag.v1.InterfaceTagConfigResponse.time:type_name -> google.protobuf.Timestamp
	51,  // 67: arista.tag.v1.InterfaceTagConfigStreamRequest.partial_eq_filter:type_name -> arista.tag.v1.InterfaceTagConfig
	43,  // 68: arista.tag.v1.InterfaceTagConfigStreamRequest.time:type_name -> arista.time.TimeBounds
	51,  // 69: arista.tag.v1.InterfaceTagConfigStreamResponse.value:type_name -> arista.tag.v1.InterfaceTagConfig
	41,  // 70: arista.tag.v1.InterfaceTagConfigStreamResponse.time:type_name -> google.protobuf.Timestamp
	44,  // 71: arista.tag.v1.InterfaceTagConfigStreamResponse.type:type_name -> arista.subscriptions.Operation
	51,  // 72: arista.tag.v1.InterfaceTagConfigSetRequest.value:type_name -> arista.tag.v1.InterfaceTagConfig
	51,  // 73: arista.tag.v1.InterfaceTagConfigSetResponse.value:type_name -> arista.tag.v1.InterfaceTagConfig
	41,  // 74: arista.tag.v1.InterfaceTagConfigSetResponse.time:type_name -> google.protobuf.Timestamp
	40,  // 75: arista.tag.v1.InterfaceTagConfigDeleteRequest.key:type_name -> arista.tag.v1.TagKey
	40,  // 76: arista.tag.v1.InterfaceTagConfigDeleteResponse.key:type_name -> arista.tag.v1.TagKey
	41,  // 77: arista.tag.v1.InterfaceTagConfigDeleteResponse.time:type_name -> google.protobuf.Timestamp
	0,   // 78: arista.tag.v1.DeviceTagService.GetOne:input_type -> arista.tag.v1.DeviceTagRequest
	2,   // 79: arista.tag.v1.DeviceTagService.GetAll:input_type -> arista.tag.v1.DeviceTagStreamRequest
	2,   // 80: arista.tag.v1.DeviceTagService.Subscribe:input_type -> arista.tag.v1.DeviceTagStreamRequest
	4,   // 81: arista.tag.v1.DeviceTagAssignmentConfigService.GetOne:input_type -> arista.tag.v1.DeviceTagAssignmentConfigRequest
	6,   // 82: arista.tag.v1.DeviceTagAssignmentConfigService.GetAll:input_type -> arista.tag.v1.DeviceTagAssignmentConfigStreamRequest
	6,   // 83: arista.tag.v1.DeviceTagAssignmentConfigService.Subscribe:input_type -> arista.tag.v1.DeviceTagAssignmentConfigStreamRequest
	8,   // 84: arista.tag.v1.DeviceTagAssignmentConfigService.Set:input_type -> arista.tag.v1.DeviceTagAssignmentConfigSetRequest
	10,  // 85: arista.tag.v1.DeviceTagAssignmentConfigService.Delete:input_type -> arista.tag.v1.DeviceTagAssignmentConfigDeleteRequest
	12,  // 86: arista.tag.v1.DeviceTagConfigService.GetOne:input_type -> arista.tag.v1.DeviceTagConfigRequest
	14,  // 87: arista.tag.v1.DeviceTagConfigService.GetAll:input_type -> arista.tag.v1.DeviceTagConfigStreamRequest
	14,  // 88: arista.tag.v1.DeviceTagConfigService.Subscribe:input_type -> arista.tag.v1.DeviceTagConfigStreamRequest
	16,  // 89: arista.tag.v1.DeviceTagConfigService.Set:input_type -> arista.tag.v1.DeviceTagConfigSetRequest
	18,  // 90: arista.tag.v1.DeviceTagConfigService.Delete:input_type -> arista.tag.v1.DeviceTagConfigDeleteRequest
	20,  // 91: arista.tag.v1.InterfaceTagService.GetOne:input_type -> arista.tag.v1.InterfaceTagRequest
	22,  // 92: arista.tag.v1.InterfaceTagService.GetAll:input_type -> arista.tag.v1.InterfaceTagStreamRequest
	22,  // 93: arista.tag.v1.InterfaceTagService.Subscribe:input_type -> arista.tag.v1.InterfaceTagStreamRequest
	24,  // 94: arista.tag.v1.InterfaceTagAssignmentConfigService.GetOne:input_type -> arista.tag.v1.InterfaceTagAssignmentConfigRequest
	26,  // 95: arista.tag.v1.InterfaceTagAssignmentConfigService.GetAll:input_type -> arista.tag.v1.InterfaceTagAssignmentConfigStreamRequest
	26,  // 96: arista.tag.v1.InterfaceTagAssignmentConfigService.Subscribe:input_type -> arista.tag.v1.InterfaceTagAssignmentConfigStreamRequest
	28,  // 97: arista.tag.v1.InterfaceTagAssignmentConfigService.Set:input_type -> arista.tag.v1.InterfaceTagAssignmentConfigSetRequest
	30,  // 98: arista.tag.v1.InterfaceTagAssignmentConfigService.Delete:input_type -> arista.tag.v1.InterfaceTagAssignmentConfigDeleteRequest
	32,  // 99: arista.tag.v1.InterfaceTagConfigService.GetOne:input_type -> arista.tag.v1.InterfaceTagConfigRequest
	34,  // 100: arista.tag.v1.InterfaceTagConfigService.GetAll:input_type -> arista.tag.v1.InterfaceTagConfigStreamRequest
	34,  // 101: arista.tag.v1.InterfaceTagConfigService.Subscribe:input_type -> arista.tag.v1.InterfaceTagConfigStreamRequest
	36,  // 102: arista.tag.v1.InterfaceTagConfigService.Set:input_type -> arista.tag.v1.InterfaceTagConfigSetRequest
	38,  // 103: arista.tag.v1.InterfaceTagConfigService.Delete:input_type -> arista.tag.v1.InterfaceTagConfigDeleteRequest
	1,   // 104: arista.tag.v1.DeviceTagService.GetOne:output_type -> arista.tag.v1.DeviceTagResponse
	3,   // 105: arista.tag.v1.DeviceTagService.GetAll:output_type -> arista.tag.v1.DeviceTagStreamResponse
	3,   // 106: arista.tag.v1.DeviceTagService.Subscribe:output_type -> arista.tag.v1.DeviceTagStreamResponse
	5,   // 107: arista.tag.v1.DeviceTagAssignmentConfigService.GetOne:output_type -> arista.tag.v1.DeviceTagAssignmentConfigResponse
	7,   // 108: arista.tag.v1.DeviceTagAssignmentConfigService.GetAll:output_type -> arista.tag.v1.DeviceTagAssignmentConfigStreamResponse
	7,   // 109: arista.tag.v1.DeviceTagAssignmentConfigService.Subscribe:output_type -> arista.tag.v1.DeviceTagAssignmentConfigStreamResponse
	9,   // 110: arista.tag.v1.DeviceTagAssignmentConfigService.Set:output_type -> arista.tag.v1.DeviceTagAssignmentConfigSetResponse
	11,  // 111: arista.tag.v1.DeviceTagAssignmentConfigService.Delete:output_type -> arista.tag.v1.DeviceTagAssignmentConfigDeleteResponse
	13,  // 112: arista.tag.v1.DeviceTagConfigService.GetOne:output_type -> arista.tag.v1.DeviceTagConfigResponse
	15,  // 113: arista.tag.v1.DeviceTagConfigService.GetAll:output_type -> arista.tag.v1.DeviceTagConfigStreamResponse
	15,  // 114: arista.tag.v1.DeviceTagConfigService.Subscribe:output_type -> arista.tag.v1.DeviceTagConfigStreamResponse
	17,  // 115: arista.tag.v1.DeviceTagConfigService.Set:output_type -> arista.tag.v1.DeviceTagConfigSetResponse
	19,  // 116: arista.tag.v1.DeviceTagConfigService.Delete:output_type -> arista.tag.v1.DeviceTagConfigDeleteResponse
	21,  // 117: arista.tag.v1.InterfaceTagService.GetOne:output_type -> arista.tag.v1.InterfaceTagResponse
	23,  // 118: arista.tag.v1.InterfaceTagService.GetAll:output_type -> arista.tag.v1.InterfaceTagStreamResponse
	23,  // 119: arista.tag.v1.InterfaceTagService.Subscribe:output_type -> arista.tag.v1.InterfaceTagStreamResponse
	25,  // 120: arista.tag.v1.InterfaceTagAssignmentConfigService.GetOne:output_type -> arista.tag.v1.InterfaceTagAssignmentConfigResponse
	27,  // 121: arista.tag.v1.InterfaceTagAssignmentConfigService.GetAll:output_type -> arista.tag.v1.InterfaceTagAssignmentConfigStreamResponse
	27,  // 122: arista.tag.v1.InterfaceTagAssignmentConfigService.Subscribe:output_type -> arista.tag.v1.InterfaceTagAssignmentConfigStreamResponse
	29,  // 123: arista.tag.v1.InterfaceTagAssignmentConfigService.Set:output_type -> arista.tag.v1.InterfaceTagAssignmentConfigSetResponse
	31,  // 124: arista.tag.v1.InterfaceTagAssignmentConfigService.Delete:output_type -> arista.tag.v1.InterfaceTagAssignmentConfigDeleteResponse
	33,  // 125: arista.tag.v1.InterfaceTagConfigService.GetOne:output_type -> arista.tag.v1.InterfaceTagConfigResponse
	35,  // 126: arista.tag.v1.InterfaceTagConfigService.GetAll:output_type -> arista.tag.v1.InterfaceTagConfigStreamResponse
	35,  // 127: arista.tag.v1.InterfaceTagConfigService.Subscribe:output_type -> arista.tag.v1.InterfaceTagConfigStreamResponse
	37,  // 128: arista.tag.v1.InterfaceTagConfigService.Set:output_type -> arista.tag.v1.InterfaceTagConfigSetResponse
	39,  // 129: arista.tag.v1.InterfaceTagConfigService.Delete:output_type -> arista.tag.v1.InterfaceTagConfigDeleteResponse
	104, // [104:130] is the sub-list for method output_type
	78,  // [78:104] is the sub-list for method input_type
	78,  // [78:78] is the sub-list for extension type_name
	78,  // [78:78] is the sub-list for extension extendee
	0,   // [0:78] is the sub-list for field type_name
}

func init() { file_arista_tag_v1_services_gen_proto_init() }
func file_arista_tag_v1_services_gen_proto_init() {
	if File_arista_tag_v1_services_gen_proto != nil {
		return
	}
	file_arista_tag_v1_tag_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_arista_tag_v1_services_gen_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceTagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v1_services_gen_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceTagResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v1_services_gen_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceTagStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v1_services_gen_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceTagStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v1_services_gen_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceTagAssignmentConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v1_services_gen_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceTagAssignmentConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v1_services_gen_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceTagAssignmentConfigStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v1_services_gen_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceTagAssignmentConfigStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v1_services_gen_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceTagAssignmentConfigSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v1_services_gen_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceTagAssignmentConfigSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v1_services_gen_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceTagAssignmentConfigDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v1_services_gen_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceTagAssignmentConfigDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v1_services_gen_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceTagConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v1_services_gen_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceTagConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v1_services_gen_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceTagConfigStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v1_services_gen_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceTagConfigStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v1_services_gen_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceTagConfigSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v1_services_gen_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceTagConfigSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v1_services_gen_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceTagConfigDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v1_services_gen_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceTagConfigDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v1_services_gen_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceTagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v1_services_gen_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceTagResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v1_services_gen_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceTagStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v1_services_gen_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceTagStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v1_services_gen_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceTagAssignmentConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v1_services_gen_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceTagAssignmentConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v1_services_gen_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceTagAssignmentConfigStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v1_services_gen_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceTagAssignmentConfigStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v1_services_gen_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceTagAssignmentConfigSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v1_services_gen_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceTagAssignmentConfigSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v1_services_gen_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceTagAssignmentConfigDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v1_services_gen_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceTagAssignmentConfigDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v1_services_gen_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceTagConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v1_services_gen_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceTagConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v1_services_gen_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceTagConfigStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v1_services_gen_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceTagConfigStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v1_services_gen_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceTagConfigSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v1_services_gen_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceTagConfigSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v1_services_gen_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceTagConfigDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_tag_v1_services_gen_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceTagConfigDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_arista_tag_v1_services_gen_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   40,
			NumExtensions: 0,
			NumServices:   6,
		},
		GoTypes:           file_arista_tag_v1_services_gen_proto_goTypes,
		DependencyIndexes: file_arista_tag_v1_services_gen_proto_depIdxs,
		MessageInfos:      file_arista_tag_v1_services_gen_proto_msgTypes,
	}.Build()
	File_arista_tag_v1_services_gen_proto = out.File
	file_arista_tag_v1_services_gen_proto_rawDesc = nil
	file_arista_tag_v1_services_gen_proto_goTypes = nil
	file_arista_tag_v1_services_gen_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DeviceTagServiceClient is the client API for DeviceTagService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeviceTagServiceClient interface {
	// GetOne returns a unary model as specified by the key in the request.
	// The key must be provided and all fields populated (unless otherwise specified).
	GetOne(ctx context.Context, in *DeviceTagRequest, opts ...grpc.CallOption) (*DeviceTagResponse, error)
	// GetAll returns all entities for this model, with optional filtering.
	GetAll(ctx context.Context, in *DeviceTagStreamRequest, opts ...grpc.CallOption) (DeviceTagService_GetAllClient, error)
	// Subscribe first returns all initial state known to the system,
	// then will send deltas as entities are changed.
	Subscribe(ctx context.Context, in *DeviceTagStreamRequest, opts ...grpc.CallOption) (DeviceTagService_SubscribeClient, error)
}

type deviceTagServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceTagServiceClient(cc grpc.ClientConnInterface) DeviceTagServiceClient {
	return &deviceTagServiceClient{cc}
}

func (c *deviceTagServiceClient) GetOne(ctx context.Context, in *DeviceTagRequest, opts ...grpc.CallOption) (*DeviceTagResponse, error) {
	out := new(DeviceTagResponse)
	err := c.cc.Invoke(ctx, "/arista.tag.v1.DeviceTagService/GetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceTagServiceClient) GetAll(ctx context.Context, in *DeviceTagStreamRequest, opts ...grpc.CallOption) (DeviceTagService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DeviceTagService_serviceDesc.Streams[0], "/arista.tag.v1.DeviceTagService/GetAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceTagServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceTagService_GetAllClient interface {
	Recv() (*DeviceTagStreamResponse, error)
	grpc.ClientStream
}

type deviceTagServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *deviceTagServiceGetAllClient) Recv() (*DeviceTagStreamResponse, error) {
	m := new(DeviceTagStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceTagServiceClient) Subscribe(ctx context.Context, in *DeviceTagStreamRequest, opts ...grpc.CallOption) (DeviceTagService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DeviceTagService_serviceDesc.Streams[1], "/arista.tag.v1.DeviceTagService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceTagServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceTagService_SubscribeClient interface {
	Recv() (*DeviceTagStreamResponse, error)
	grpc.ClientStream
}

type deviceTagServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *deviceTagServiceSubscribeClient) Recv() (*DeviceTagStreamResponse, error) {
	m := new(DeviceTagStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DeviceTagServiceServer is the server API for DeviceTagService service.
type DeviceTagServiceServer interface {
	// GetOne returns a unary model as specified by the key in the request.
	// The key must be provided and all fields populated (unless otherwise specified).
	GetOne(context.Context, *DeviceTagRequest) (*DeviceTagResponse, error)
	// GetAll returns all entities for this model, with optional filtering.
	GetAll(*DeviceTagStreamRequest, DeviceTagService_GetAllServer) error
	// Subscribe first returns all initial state known to the system,
	// then will send deltas as entities are changed.
	Subscribe(*DeviceTagStreamRequest, DeviceTagService_SubscribeServer) error
}

// UnimplementedDeviceTagServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDeviceTagServiceServer struct {
}

func (*UnimplementedDeviceTagServiceServer) GetOne(context.Context, *DeviceTagRequest) (*DeviceTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (*UnimplementedDeviceTagServiceServer) GetAll(*DeviceTagStreamRequest, DeviceTagService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (*UnimplementedDeviceTagServiceServer) Subscribe(*DeviceTagStreamRequest, DeviceTagService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}

func RegisterDeviceTagServiceServer(s *grpc.Server, srv DeviceTagServiceServer) {
	s.RegisterService(&_DeviceTagService_serviceDesc, srv)
}

func _DeviceTagService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceTagServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arista.tag.v1.DeviceTagService/GetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceTagServiceServer).GetOne(ctx, req.(*DeviceTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceTagService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceTagStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceTagServiceServer).GetAll(m, &deviceTagServiceGetAllServer{stream})
}

type DeviceTagService_GetAllServer interface {
	Send(*DeviceTagStreamResponse) error
	grpc.ServerStream
}

type deviceTagServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *deviceTagServiceGetAllServer) Send(m *DeviceTagStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DeviceTagService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceTagStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceTagServiceServer).Subscribe(m, &deviceTagServiceSubscribeServer{stream})
}

type DeviceTagService_SubscribeServer interface {
	Send(*DeviceTagStreamResponse) error
	grpc.ServerStream
}

type deviceTagServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *deviceTagServiceSubscribeServer) Send(m *DeviceTagStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _DeviceTagService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "arista.tag.v1.DeviceTagService",
	HandlerType: (*DeviceTagServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _DeviceTagService_GetOne_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAll",
			Handler:       _DeviceTagService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _DeviceTagService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/tag.v1/services.gen.proto",
}

// DeviceTagAssignmentConfigServiceClient is the client API for DeviceTagAssignmentConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeviceTagAssignmentConfigServiceClient interface {
	// GetOne returns a unary model as specified by the key in the request.
	// The key must be provided and all fields populated (unless otherwise specified).
	GetOne(ctx context.Context, in *DeviceTagAssignmentConfigRequest, opts ...grpc.CallOption) (*DeviceTagAssignmentConfigResponse, error)
	// GetAll returns all entities for this model, with optional filtering.
	GetAll(ctx context.Context, in *DeviceTagAssignmentConfigStreamRequest, opts ...grpc.CallOption) (DeviceTagAssignmentConfigService_GetAllClient, error)
	// Subscribe first returns all initial state known to the system,
	// then will send deltas as entities are changed.
	Subscribe(ctx context.Context, in *DeviceTagAssignmentConfigStreamRequest, opts ...grpc.CallOption) (DeviceTagAssignmentConfigService_SubscribeClient, error)
	// Set allows setting values for the entity specified by the key in the request.
	// The key must be provided and all fields set (unless otherwise specified).
	Set(ctx context.Context, in *DeviceTagAssignmentConfigSetRequest, opts ...grpc.CallOption) (*DeviceTagAssignmentConfigSetResponse, error)
	// Delete will remove the entity specified by the key within the request.
	// The key must be provided and all fields populated (unless otherwise specified).
	Delete(ctx context.Context, in *DeviceTagAssignmentConfigDeleteRequest, opts ...grpc.CallOption) (*DeviceTagAssignmentConfigDeleteResponse, error)
}

type deviceTagAssignmentConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceTagAssignmentConfigServiceClient(cc grpc.ClientConnInterface) DeviceTagAssignmentConfigServiceClient {
	return &deviceTagAssignmentConfigServiceClient{cc}
}

func (c *deviceTagAssignmentConfigServiceClient) GetOne(ctx context.Context, in *DeviceTagAssignmentConfigRequest, opts ...grpc.CallOption) (*DeviceTagAssignmentConfigResponse, error) {
	out := new(DeviceTagAssignmentConfigResponse)
	err := c.cc.Invoke(ctx, "/arista.tag.v1.DeviceTagAssignmentConfigService/GetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceTagAssignmentConfigServiceClient) GetAll(ctx context.Context, in *DeviceTagAssignmentConfigStreamRequest, opts ...grpc.CallOption) (DeviceTagAssignmentConfigService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DeviceTagAssignmentConfigService_serviceDesc.Streams[0], "/arista.tag.v1.DeviceTagAssignmentConfigService/GetAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceTagAssignmentConfigServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceTagAssignmentConfigService_GetAllClient interface {
	Recv() (*DeviceTagAssignmentConfigStreamResponse, error)
	grpc.ClientStream
}

type deviceTagAssignmentConfigServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *deviceTagAssignmentConfigServiceGetAllClient) Recv() (*DeviceTagAssignmentConfigStreamResponse, error) {
	m := new(DeviceTagAssignmentConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceTagAssignmentConfigServiceClient) Subscribe(ctx context.Context, in *DeviceTagAssignmentConfigStreamRequest, opts ...grpc.CallOption) (DeviceTagAssignmentConfigService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DeviceTagAssignmentConfigService_serviceDesc.Streams[1], "/arista.tag.v1.DeviceTagAssignmentConfigService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceTagAssignmentConfigServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceTagAssignmentConfigService_SubscribeClient interface {
	Recv() (*DeviceTagAssignmentConfigStreamResponse, error)
	grpc.ClientStream
}

type deviceTagAssignmentConfigServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *deviceTagAssignmentConfigServiceSubscribeClient) Recv() (*DeviceTagAssignmentConfigStreamResponse, error) {
	m := new(DeviceTagAssignmentConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceTagAssignmentConfigServiceClient) Set(ctx context.Context, in *DeviceTagAssignmentConfigSetRequest, opts ...grpc.CallOption) (*DeviceTagAssignmentConfigSetResponse, error) {
	out := new(DeviceTagAssignmentConfigSetResponse)
	err := c.cc.Invoke(ctx, "/arista.tag.v1.DeviceTagAssignmentConfigService/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceTagAssignmentConfigServiceClient) Delete(ctx context.Context, in *DeviceTagAssignmentConfigDeleteRequest, opts ...grpc.CallOption) (*DeviceTagAssignmentConfigDeleteResponse, error) {
	out := new(DeviceTagAssignmentConfigDeleteResponse)
	err := c.cc.Invoke(ctx, "/arista.tag.v1.DeviceTagAssignmentConfigService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceTagAssignmentConfigServiceServer is the server API for DeviceTagAssignmentConfigService service.
type DeviceTagAssignmentConfigServiceServer interface {
	// GetOne returns a unary model as specified by the key in the request.
	// The key must be provided and all fields populated (unless otherwise specified).
	GetOne(context.Context, *DeviceTagAssignmentConfigRequest) (*DeviceTagAssignmentConfigResponse, error)
	// GetAll returns all entities for this model, with optional filtering.
	GetAll(*DeviceTagAssignmentConfigStreamRequest, DeviceTagAssignmentConfigService_GetAllServer) error
	// Subscribe first returns all initial state known to the system,
	// then will send deltas as entities are changed.
	Subscribe(*DeviceTagAssignmentConfigStreamRequest, DeviceTagAssignmentConfigService_SubscribeServer) error
	// Set allows setting values for the entity specified by the key in the request.
	// The key must be provided and all fields set (unless otherwise specified).
	Set(context.Context, *DeviceTagAssignmentConfigSetRequest) (*DeviceTagAssignmentConfigSetResponse, error)
	// Delete will remove the entity specified by the key within the request.
	// The key must be provided and all fields populated (unless otherwise specified).
	Delete(context.Context, *DeviceTagAssignmentConfigDeleteRequest) (*DeviceTagAssignmentConfigDeleteResponse, error)
}

// UnimplementedDeviceTagAssignmentConfigServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDeviceTagAssignmentConfigServiceServer struct {
}

func (*UnimplementedDeviceTagAssignmentConfigServiceServer) GetOne(context.Context, *DeviceTagAssignmentConfigRequest) (*DeviceTagAssignmentConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (*UnimplementedDeviceTagAssignmentConfigServiceServer) GetAll(*DeviceTagAssignmentConfigStreamRequest, DeviceTagAssignmentConfigService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (*UnimplementedDeviceTagAssignmentConfigServiceServer) Subscribe(*DeviceTagAssignmentConfigStreamRequest, DeviceTagAssignmentConfigService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (*UnimplementedDeviceTagAssignmentConfigServiceServer) Set(context.Context, *DeviceTagAssignmentConfigSetRequest) (*DeviceTagAssignmentConfigSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (*UnimplementedDeviceTagAssignmentConfigServiceServer) Delete(context.Context, *DeviceTagAssignmentConfigDeleteRequest) (*DeviceTagAssignmentConfigDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterDeviceTagAssignmentConfigServiceServer(s *grpc.Server, srv DeviceTagAssignmentConfigServiceServer) {
	s.RegisterService(&_DeviceTagAssignmentConfigService_serviceDesc, srv)
}

func _DeviceTagAssignmentConfigService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceTagAssignmentConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceTagAssignmentConfigServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arista.tag.v1.DeviceTagAssignmentConfigService/GetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceTagAssignmentConfigServiceServer).GetOne(ctx, req.(*DeviceTagAssignmentConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceTagAssignmentConfigService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceTagAssignmentConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceTagAssignmentConfigServiceServer).GetAll(m, &deviceTagAssignmentConfigServiceGetAllServer{stream})
}

type DeviceTagAssignmentConfigService_GetAllServer interface {
	Send(*DeviceTagAssignmentConfigStreamResponse) error
	grpc.ServerStream
}

type deviceTagAssignmentConfigServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *deviceTagAssignmentConfigServiceGetAllServer) Send(m *DeviceTagAssignmentConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DeviceTagAssignmentConfigService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceTagAssignmentConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceTagAssignmentConfigServiceServer).Subscribe(m, &deviceTagAssignmentConfigServiceSubscribeServer{stream})
}

type DeviceTagAssignmentConfigService_SubscribeServer interface {
	Send(*DeviceTagAssignmentConfigStreamResponse) error
	grpc.ServerStream
}

type deviceTagAssignmentConfigServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *deviceTagAssignmentConfigServiceSubscribeServer) Send(m *DeviceTagAssignmentConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DeviceTagAssignmentConfigService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceTagAssignmentConfigSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceTagAssignmentConfigServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arista.tag.v1.DeviceTagAssignmentConfigService/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceTagAssignmentConfigServiceServer).Set(ctx, req.(*DeviceTagAssignmentConfigSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceTagAssignmentConfigService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceTagAssignmentConfigDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceTagAssignmentConfigServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arista.tag.v1.DeviceTagAssignmentConfigService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceTagAssignmentConfigServiceServer).Delete(ctx, req.(*DeviceTagAssignmentConfigDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeviceTagAssignmentConfigService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "arista.tag.v1.DeviceTagAssignmentConfigService",
	HandlerType: (*DeviceTagAssignmentConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _DeviceTagAssignmentConfigService_GetOne_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _DeviceTagAssignmentConfigService_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DeviceTagAssignmentConfigService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAll",
			Handler:       _DeviceTagAssignmentConfigService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _DeviceTagAssignmentConfigService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/tag.v1/services.gen.proto",
}

// DeviceTagConfigServiceClient is the client API for DeviceTagConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeviceTagConfigServiceClient interface {
	// GetOne returns a unary model as specified by the key in the request.
	// The key must be provided and all fields populated (unless otherwise specified).
	GetOne(ctx context.Context, in *DeviceTagConfigRequest, opts ...grpc.CallOption) (*DeviceTagConfigResponse, error)
	// GetAll returns all entities for this model, with optional filtering.
	GetAll(ctx context.Context, in *DeviceTagConfigStreamRequest, opts ...grpc.CallOption) (DeviceTagConfigService_GetAllClient, error)
	// Subscribe first returns all initial state known to the system,
	// then will send deltas as entities are changed.
	Subscribe(ctx context.Context, in *DeviceTagConfigStreamRequest, opts ...grpc.CallOption) (DeviceTagConfigService_SubscribeClient, error)
	// Set allows setting values for the entity specified by the key in the request.
	// The key must be provided and all fields set (unless otherwise specified).
	Set(ctx context.Context, in *DeviceTagConfigSetRequest, opts ...grpc.CallOption) (*DeviceTagConfigSetResponse, error)
	// Delete will remove the entity specified by the key within the request.
	// The key must be provided and all fields populated (unless otherwise specified).
	Delete(ctx context.Context, in *DeviceTagConfigDeleteRequest, opts ...grpc.CallOption) (*DeviceTagConfigDeleteResponse, error)
}

type deviceTagConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceTagConfigServiceClient(cc grpc.ClientConnInterface) DeviceTagConfigServiceClient {
	return &deviceTagConfigServiceClient{cc}
}

func (c *deviceTagConfigServiceClient) GetOne(ctx context.Context, in *DeviceTagConfigRequest, opts ...grpc.CallOption) (*DeviceTagConfigResponse, error) {
	out := new(DeviceTagConfigResponse)
	err := c.cc.Invoke(ctx, "/arista.tag.v1.DeviceTagConfigService/GetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceTagConfigServiceClient) GetAll(ctx context.Context, in *DeviceTagConfigStreamRequest, opts ...grpc.CallOption) (DeviceTagConfigService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DeviceTagConfigService_serviceDesc.Streams[0], "/arista.tag.v1.DeviceTagConfigService/GetAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceTagConfigServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceTagConfigService_GetAllClient interface {
	Recv() (*DeviceTagConfigStreamResponse, error)
	grpc.ClientStream
}

type deviceTagConfigServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *deviceTagConfigServiceGetAllClient) Recv() (*DeviceTagConfigStreamResponse, error) {
	m := new(DeviceTagConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceTagConfigServiceClient) Subscribe(ctx context.Context, in *DeviceTagConfigStreamRequest, opts ...grpc.CallOption) (DeviceTagConfigService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DeviceTagConfigService_serviceDesc.Streams[1], "/arista.tag.v1.DeviceTagConfigService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceTagConfigServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceTagConfigService_SubscribeClient interface {
	Recv() (*DeviceTagConfigStreamResponse, error)
	grpc.ClientStream
}

type deviceTagConfigServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *deviceTagConfigServiceSubscribeClient) Recv() (*DeviceTagConfigStreamResponse, error) {
	m := new(DeviceTagConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceTagConfigServiceClient) Set(ctx context.Context, in *DeviceTagConfigSetRequest, opts ...grpc.CallOption) (*DeviceTagConfigSetResponse, error) {
	out := new(DeviceTagConfigSetResponse)
	err := c.cc.Invoke(ctx, "/arista.tag.v1.DeviceTagConfigService/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceTagConfigServiceClient) Delete(ctx context.Context, in *DeviceTagConfigDeleteRequest, opts ...grpc.CallOption) (*DeviceTagConfigDeleteResponse, error) {
	out := new(DeviceTagConfigDeleteResponse)
	err := c.cc.Invoke(ctx, "/arista.tag.v1.DeviceTagConfigService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceTagConfigServiceServer is the server API for DeviceTagConfigService service.
type DeviceTagConfigServiceServer interface {
	// GetOne returns a unary model as specified by the key in the request.
	// The key must be provided and all fields populated (unless otherwise specified).
	GetOne(context.Context, *DeviceTagConfigRequest) (*DeviceTagConfigResponse, error)
	// GetAll returns all entities for this model, with optional filtering.
	GetAll(*DeviceTagConfigStreamRequest, DeviceTagConfigService_GetAllServer) error
	// Subscribe first returns all initial state known to the system,
	// then will send deltas as entities are changed.
	Subscribe(*DeviceTagConfigStreamRequest, DeviceTagConfigService_SubscribeServer) error
	// Set allows setting values for the entity specified by the key in the request.
	// The key must be provided and all fields set (unless otherwise specified).
	Set(context.Context, *DeviceTagConfigSetRequest) (*DeviceTagConfigSetResponse, error)
	// Delete will remove the entity specified by the key within the request.
	// The key must be provided and all fields populated (unless otherwise specified).
	Delete(context.Context, *DeviceTagConfigDeleteRequest) (*DeviceTagConfigDeleteResponse, error)
}

// UnimplementedDeviceTagConfigServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDeviceTagConfigServiceServer struct {
}

func (*UnimplementedDeviceTagConfigServiceServer) GetOne(context.Context, *DeviceTagConfigRequest) (*DeviceTagConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (*UnimplementedDeviceTagConfigServiceServer) GetAll(*DeviceTagConfigStreamRequest, DeviceTagConfigService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (*UnimplementedDeviceTagConfigServiceServer) Subscribe(*DeviceTagConfigStreamRequest, DeviceTagConfigService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (*UnimplementedDeviceTagConfigServiceServer) Set(context.Context, *DeviceTagConfigSetRequest) (*DeviceTagConfigSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (*UnimplementedDeviceTagConfigServiceServer) Delete(context.Context, *DeviceTagConfigDeleteRequest) (*DeviceTagConfigDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterDeviceTagConfigServiceServer(s *grpc.Server, srv DeviceTagConfigServiceServer) {
	s.RegisterService(&_DeviceTagConfigService_serviceDesc, srv)
}

func _DeviceTagConfigService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceTagConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceTagConfigServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arista.tag.v1.DeviceTagConfigService/GetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceTagConfigServiceServer).GetOne(ctx, req.(*DeviceTagConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceTagConfigService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceTagConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceTagConfigServiceServer).GetAll(m, &deviceTagConfigServiceGetAllServer{stream})
}

type DeviceTagConfigService_GetAllServer interface {
	Send(*DeviceTagConfigStreamResponse) error
	grpc.ServerStream
}

type deviceTagConfigServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *deviceTagConfigServiceGetAllServer) Send(m *DeviceTagConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DeviceTagConfigService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceTagConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceTagConfigServiceServer).Subscribe(m, &deviceTagConfigServiceSubscribeServer{stream})
}

type DeviceTagConfigService_SubscribeServer interface {
	Send(*DeviceTagConfigStreamResponse) error
	grpc.ServerStream
}

type deviceTagConfigServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *deviceTagConfigServiceSubscribeServer) Send(m *DeviceTagConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DeviceTagConfigService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceTagConfigSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceTagConfigServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arista.tag.v1.DeviceTagConfigService/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceTagConfigServiceServer).Set(ctx, req.(*DeviceTagConfigSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceTagConfigService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceTagConfigDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceTagConfigServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arista.tag.v1.DeviceTagConfigService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceTagConfigServiceServer).Delete(ctx, req.(*DeviceTagConfigDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeviceTagConfigService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "arista.tag.v1.DeviceTagConfigService",
	HandlerType: (*DeviceTagConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _DeviceTagConfigService_GetOne_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _DeviceTagConfigService_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DeviceTagConfigService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAll",
			Handler:       _DeviceTagConfigService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _DeviceTagConfigService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/tag.v1/services.gen.proto",
}

// InterfaceTagServiceClient is the client API for InterfaceTagService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InterfaceTagServiceClient interface {
	// GetOne returns a unary model as specified by the key in the request.
	// The key must be provided and all fields populated (unless otherwise specified).
	GetOne(ctx context.Context, in *InterfaceTagRequest, opts ...grpc.CallOption) (*InterfaceTagResponse, error)
	// GetAll returns all entities for this model, with optional filtering.
	GetAll(ctx context.Context, in *InterfaceTagStreamRequest, opts ...grpc.CallOption) (InterfaceTagService_GetAllClient, error)
	// Subscribe first returns all initial state known to the system,
	// then will send deltas as entities are changed.
	Subscribe(ctx context.Context, in *InterfaceTagStreamRequest, opts ...grpc.CallOption) (InterfaceTagService_SubscribeClient, error)
}

type interfaceTagServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInterfaceTagServiceClient(cc grpc.ClientConnInterface) InterfaceTagServiceClient {
	return &interfaceTagServiceClient{cc}
}

func (c *interfaceTagServiceClient) GetOne(ctx context.Context, in *InterfaceTagRequest, opts ...grpc.CallOption) (*InterfaceTagResponse, error) {
	out := new(InterfaceTagResponse)
	err := c.cc.Invoke(ctx, "/arista.tag.v1.InterfaceTagService/GetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceTagServiceClient) GetAll(ctx context.Context, in *InterfaceTagStreamRequest, opts ...grpc.CallOption) (InterfaceTagService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &_InterfaceTagService_serviceDesc.Streams[0], "/arista.tag.v1.InterfaceTagService/GetAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &interfaceTagServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InterfaceTagService_GetAllClient interface {
	Recv() (*InterfaceTagStreamResponse, error)
	grpc.ClientStream
}

type interfaceTagServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *interfaceTagServiceGetAllClient) Recv() (*InterfaceTagStreamResponse, error) {
	m := new(InterfaceTagStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *interfaceTagServiceClient) Subscribe(ctx context.Context, in *InterfaceTagStreamRequest, opts ...grpc.CallOption) (InterfaceTagService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_InterfaceTagService_serviceDesc.Streams[1], "/arista.tag.v1.InterfaceTagService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &interfaceTagServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InterfaceTagService_SubscribeClient interface {
	Recv() (*InterfaceTagStreamResponse, error)
	grpc.ClientStream
}

type interfaceTagServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *interfaceTagServiceSubscribeClient) Recv() (*InterfaceTagStreamResponse, error) {
	m := new(InterfaceTagStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// InterfaceTagServiceServer is the server API for InterfaceTagService service.
type InterfaceTagServiceServer interface {
	// GetOne returns a unary model as specified by the key in the request.
	// The key must be provided and all fields populated (unless otherwise specified).
	GetOne(context.Context, *InterfaceTagRequest) (*InterfaceTagResponse, error)
	// GetAll returns all entities for this model, with optional filtering.
	GetAll(*InterfaceTagStreamRequest, InterfaceTagService_GetAllServer) error
	// Subscribe first returns all initial state known to the system,
	// then will send deltas as entities are changed.
	Subscribe(*InterfaceTagStreamRequest, InterfaceTagService_SubscribeServer) error
}

// UnimplementedInterfaceTagServiceServer can be embedded to have forward compatible implementations.
type UnimplementedInterfaceTagServiceServer struct {
}

func (*UnimplementedInterfaceTagServiceServer) GetOne(context.Context, *InterfaceTagRequest) (*InterfaceTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (*UnimplementedInterfaceTagServiceServer) GetAll(*InterfaceTagStreamRequest, InterfaceTagService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (*UnimplementedInterfaceTagServiceServer) Subscribe(*InterfaceTagStreamRequest, InterfaceTagService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}

func RegisterInterfaceTagServiceServer(s *grpc.Server, srv InterfaceTagServiceServer) {
	s.RegisterService(&_InterfaceTagService_serviceDesc, srv)
}

func _InterfaceTagService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceTagServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arista.tag.v1.InterfaceTagService/GetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceTagServiceServer).GetOne(ctx, req.(*InterfaceTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterfaceTagService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InterfaceTagStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InterfaceTagServiceServer).GetAll(m, &interfaceTagServiceGetAllServer{stream})
}

type InterfaceTagService_GetAllServer interface {
	Send(*InterfaceTagStreamResponse) error
	grpc.ServerStream
}

type interfaceTagServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *interfaceTagServiceGetAllServer) Send(m *InterfaceTagStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _InterfaceTagService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InterfaceTagStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InterfaceTagServiceServer).Subscribe(m, &interfaceTagServiceSubscribeServer{stream})
}

type InterfaceTagService_SubscribeServer interface {
	Send(*InterfaceTagStreamResponse) error
	grpc.ServerStream
}

type interfaceTagServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *interfaceTagServiceSubscribeServer) Send(m *InterfaceTagStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _InterfaceTagService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "arista.tag.v1.InterfaceTagService",
	HandlerType: (*InterfaceTagServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _InterfaceTagService_GetOne_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAll",
			Handler:       _InterfaceTagService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _InterfaceTagService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/tag.v1/services.gen.proto",
}

// InterfaceTagAssignmentConfigServiceClient is the client API for InterfaceTagAssignmentConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InterfaceTagAssignmentConfigServiceClient interface {
	// GetOne returns a unary model as specified by the key in the request.
	// The key must be provided and all fields populated (unless otherwise specified).
	GetOne(ctx context.Context, in *InterfaceTagAssignmentConfigRequest, opts ...grpc.CallOption) (*InterfaceTagAssignmentConfigResponse, error)
	// GetAll returns all entities for this model, with optional filtering.
	GetAll(ctx context.Context, in *InterfaceTagAssignmentConfigStreamRequest, opts ...grpc.CallOption) (InterfaceTagAssignmentConfigService_GetAllClient, error)
	// Subscribe first returns all initial state known to the system,
	// then will send deltas as entities are changed.
	Subscribe(ctx context.Context, in *InterfaceTagAssignmentConfigStreamRequest, opts ...grpc.CallOption) (InterfaceTagAssignmentConfigService_SubscribeClient, error)
	// Set allows setting values for the entity specified by the key in the request.
	// The key must be provided and all fields set (unless otherwise specified).
	Set(ctx context.Context, in *InterfaceTagAssignmentConfigSetRequest, opts ...grpc.CallOption) (*InterfaceTagAssignmentConfigSetResponse, error)
	// Delete will remove the entity specified by the key within the request.
	// The key must be provided and all fields populated (unless otherwise specified).
	Delete(ctx context.Context, in *InterfaceTagAssignmentConfigDeleteRequest, opts ...grpc.CallOption) (*InterfaceTagAssignmentConfigDeleteResponse, error)
}

type interfaceTagAssignmentConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInterfaceTagAssignmentConfigServiceClient(cc grpc.ClientConnInterface) InterfaceTagAssignmentConfigServiceClient {
	return &interfaceTagAssignmentConfigServiceClient{cc}
}

func (c *interfaceTagAssignmentConfigServiceClient) GetOne(ctx context.Context, in *InterfaceTagAssignmentConfigRequest, opts ...grpc.CallOption) (*InterfaceTagAssignmentConfigResponse, error) {
	out := new(InterfaceTagAssignmentConfigResponse)
	err := c.cc.Invoke(ctx, "/arista.tag.v1.InterfaceTagAssignmentConfigService/GetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceTagAssignmentConfigServiceClient) GetAll(ctx context.Context, in *InterfaceTagAssignmentConfigStreamRequest, opts ...grpc.CallOption) (InterfaceTagAssignmentConfigService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &_InterfaceTagAssignmentConfigService_serviceDesc.Streams[0], "/arista.tag.v1.InterfaceTagAssignmentConfigService/GetAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &interfaceTagAssignmentConfigServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InterfaceTagAssignmentConfigService_GetAllClient interface {
	Recv() (*InterfaceTagAssignmentConfigStreamResponse, error)
	grpc.ClientStream
}

type interfaceTagAssignmentConfigServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *interfaceTagAssignmentConfigServiceGetAllClient) Recv() (*InterfaceTagAssignmentConfigStreamResponse, error) {
	m := new(InterfaceTagAssignmentConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *interfaceTagAssignmentConfigServiceClient) Subscribe(ctx context.Context, in *InterfaceTagAssignmentConfigStreamRequest, opts ...grpc.CallOption) (InterfaceTagAssignmentConfigService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_InterfaceTagAssignmentConfigService_serviceDesc.Streams[1], "/arista.tag.v1.InterfaceTagAssignmentConfigService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &interfaceTagAssignmentConfigServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InterfaceTagAssignmentConfigService_SubscribeClient interface {
	Recv() (*InterfaceTagAssignmentConfigStreamResponse, error)
	grpc.ClientStream
}

type interfaceTagAssignmentConfigServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *interfaceTagAssignmentConfigServiceSubscribeClient) Recv() (*InterfaceTagAssignmentConfigStreamResponse, error) {
	m := new(InterfaceTagAssignmentConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *interfaceTagAssignmentConfigServiceClient) Set(ctx context.Context, in *InterfaceTagAssignmentConfigSetRequest, opts ...grpc.CallOption) (*InterfaceTagAssignmentConfigSetResponse, error) {
	out := new(InterfaceTagAssignmentConfigSetResponse)
	err := c.cc.Invoke(ctx, "/arista.tag.v1.InterfaceTagAssignmentConfigService/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceTagAssignmentConfigServiceClient) Delete(ctx context.Context, in *InterfaceTagAssignmentConfigDeleteRequest, opts ...grpc.CallOption) (*InterfaceTagAssignmentConfigDeleteResponse, error) {
	out := new(InterfaceTagAssignmentConfigDeleteResponse)
	err := c.cc.Invoke(ctx, "/arista.tag.v1.InterfaceTagAssignmentConfigService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InterfaceTagAssignmentConfigServiceServer is the server API for InterfaceTagAssignmentConfigService service.
type InterfaceTagAssignmentConfigServiceServer interface {
	// GetOne returns a unary model as specified by the key in the request.
	// The key must be provided and all fields populated (unless otherwise specified).
	GetOne(context.Context, *InterfaceTagAssignmentConfigRequest) (*InterfaceTagAssignmentConfigResponse, error)
	// GetAll returns all entities for this model, with optional filtering.
	GetAll(*InterfaceTagAssignmentConfigStreamRequest, InterfaceTagAssignmentConfigService_GetAllServer) error
	// Subscribe first returns all initial state known to the system,
	// then will send deltas as entities are changed.
	Subscribe(*InterfaceTagAssignmentConfigStreamRequest, InterfaceTagAssignmentConfigService_SubscribeServer) error
	// Set allows setting values for the entity specified by the key in the request.
	// The key must be provided and all fields set (unless otherwise specified).
	Set(context.Context, *InterfaceTagAssignmentConfigSetRequest) (*InterfaceTagAssignmentConfigSetResponse, error)
	// Delete will remove the entity specified by the key within the request.
	// The key must be provided and all fields populated (unless otherwise specified).
	Delete(context.Context, *InterfaceTagAssignmentConfigDeleteRequest) (*InterfaceTagAssignmentConfigDeleteResponse, error)
}

// UnimplementedInterfaceTagAssignmentConfigServiceServer can be embedded to have forward compatible implementations.
type UnimplementedInterfaceTagAssignmentConfigServiceServer struct {
}

func (*UnimplementedInterfaceTagAssignmentConfigServiceServer) GetOne(context.Context, *InterfaceTagAssignmentConfigRequest) (*InterfaceTagAssignmentConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (*UnimplementedInterfaceTagAssignmentConfigServiceServer) GetAll(*InterfaceTagAssignmentConfigStreamRequest, InterfaceTagAssignmentConfigService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (*UnimplementedInterfaceTagAssignmentConfigServiceServer) Subscribe(*InterfaceTagAssignmentConfigStreamRequest, InterfaceTagAssignmentConfigService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (*UnimplementedInterfaceTagAssignmentConfigServiceServer) Set(context.Context, *InterfaceTagAssignmentConfigSetRequest) (*InterfaceTagAssignmentConfigSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (*UnimplementedInterfaceTagAssignmentConfigServiceServer) Delete(context.Context, *InterfaceTagAssignmentConfigDeleteRequest) (*InterfaceTagAssignmentConfigDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterInterfaceTagAssignmentConfigServiceServer(s *grpc.Server, srv InterfaceTagAssignmentConfigServiceServer) {
	s.RegisterService(&_InterfaceTagAssignmentConfigService_serviceDesc, srv)
}

func _InterfaceTagAssignmentConfigService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceTagAssignmentConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceTagAssignmentConfigServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arista.tag.v1.InterfaceTagAssignmentConfigService/GetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceTagAssignmentConfigServiceServer).GetOne(ctx, req.(*InterfaceTagAssignmentConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterfaceTagAssignmentConfigService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InterfaceTagAssignmentConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InterfaceTagAssignmentConfigServiceServer).GetAll(m, &interfaceTagAssignmentConfigServiceGetAllServer{stream})
}

type InterfaceTagAssignmentConfigService_GetAllServer interface {
	Send(*InterfaceTagAssignmentConfigStreamResponse) error
	grpc.ServerStream
}

type interfaceTagAssignmentConfigServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *interfaceTagAssignmentConfigServiceGetAllServer) Send(m *InterfaceTagAssignmentConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _InterfaceTagAssignmentConfigService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InterfaceTagAssignmentConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InterfaceTagAssignmentConfigServiceServer).Subscribe(m, &interfaceTagAssignmentConfigServiceSubscribeServer{stream})
}

type InterfaceTagAssignmentConfigService_SubscribeServer interface {
	Send(*InterfaceTagAssignmentConfigStreamResponse) error
	grpc.ServerStream
}

type interfaceTagAssignmentConfigServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *interfaceTagAssignmentConfigServiceSubscribeServer) Send(m *InterfaceTagAssignmentConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _InterfaceTagAssignmentConfigService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceTagAssignmentConfigSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceTagAssignmentConfigServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arista.tag.v1.InterfaceTagAssignmentConfigService/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceTagAssignmentConfigServiceServer).Set(ctx, req.(*InterfaceTagAssignmentConfigSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterfaceTagAssignmentConfigService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceTagAssignmentConfigDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceTagAssignmentConfigServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arista.tag.v1.InterfaceTagAssignmentConfigService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceTagAssignmentConfigServiceServer).Delete(ctx, req.(*InterfaceTagAssignmentConfigDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _InterfaceTagAssignmentConfigService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "arista.tag.v1.InterfaceTagAssignmentConfigService",
	HandlerType: (*InterfaceTagAssignmentConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _InterfaceTagAssignmentConfigService_GetOne_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _InterfaceTagAssignmentConfigService_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _InterfaceTagAssignmentConfigService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAll",
			Handler:       _InterfaceTagAssignmentConfigService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _InterfaceTagAssignmentConfigService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/tag.v1/services.gen.proto",
}

// InterfaceTagConfigServiceClient is the client API for InterfaceTagConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InterfaceTagConfigServiceClient interface {
	// GetOne returns a unary model as specified by the key in the request.
	// The key must be provided and all fields populated (unless otherwise specified).
	GetOne(ctx context.Context, in *InterfaceTagConfigRequest, opts ...grpc.CallOption) (*InterfaceTagConfigResponse, error)
	// GetAll returns all entities for this model, with optional filtering.
	GetAll(ctx context.Context, in *InterfaceTagConfigStreamRequest, opts ...grpc.CallOption) (InterfaceTagConfigService_GetAllClient, error)
	// Subscribe first returns all initial state known to the system,
	// then will send deltas as entities are changed.
	Subscribe(ctx context.Context, in *InterfaceTagConfigStreamRequest, opts ...grpc.CallOption) (InterfaceTagConfigService_SubscribeClient, error)
	// Set allows setting values for the entity specified by the key in the request.
	// The key must be provided and all fields set (unless otherwise specified).
	Set(ctx context.Context, in *InterfaceTagConfigSetRequest, opts ...grpc.CallOption) (*InterfaceTagConfigSetResponse, error)
	// Delete will remove the entity specified by the key within the request.
	// The key must be provided and all fields populated (unless otherwise specified).
	Delete(ctx context.Context, in *InterfaceTagConfigDeleteRequest, opts ...grpc.CallOption) (*InterfaceTagConfigDeleteResponse, error)
}

type interfaceTagConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInterfaceTagConfigServiceClient(cc grpc.ClientConnInterface) InterfaceTagConfigServiceClient {
	return &interfaceTagConfigServiceClient{cc}
}

func (c *interfaceTagConfigServiceClient) GetOne(ctx context.Context, in *InterfaceTagConfigRequest, opts ...grpc.CallOption) (*InterfaceTagConfigResponse, error) {
	out := new(InterfaceTagConfigResponse)
	err := c.cc.Invoke(ctx, "/arista.tag.v1.InterfaceTagConfigService/GetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceTagConfigServiceClient) GetAll(ctx context.Context, in *InterfaceTagConfigStreamRequest, opts ...grpc.CallOption) (InterfaceTagConfigService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &_InterfaceTagConfigService_serviceDesc.Streams[0], "/arista.tag.v1.InterfaceTagConfigService/GetAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &interfaceTagConfigServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InterfaceTagConfigService_GetAllClient interface {
	Recv() (*InterfaceTagConfigStreamResponse, error)
	grpc.ClientStream
}

type interfaceTagConfigServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *interfaceTagConfigServiceGetAllClient) Recv() (*InterfaceTagConfigStreamResponse, error) {
	m := new(InterfaceTagConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *interfaceTagConfigServiceClient) Subscribe(ctx context.Context, in *InterfaceTagConfigStreamRequest, opts ...grpc.CallOption) (InterfaceTagConfigService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_InterfaceTagConfigService_serviceDesc.Streams[1], "/arista.tag.v1.InterfaceTagConfigService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &interfaceTagConfigServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InterfaceTagConfigService_SubscribeClient interface {
	Recv() (*InterfaceTagConfigStreamResponse, error)
	grpc.ClientStream
}

type interfaceTagConfigServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *interfaceTagConfigServiceSubscribeClient) Recv() (*InterfaceTagConfigStreamResponse, error) {
	m := new(InterfaceTagConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *interfaceTagConfigServiceClient) Set(ctx context.Context, in *InterfaceTagConfigSetRequest, opts ...grpc.CallOption) (*InterfaceTagConfigSetResponse, error) {
	out := new(InterfaceTagConfigSetResponse)
	err := c.cc.Invoke(ctx, "/arista.tag.v1.InterfaceTagConfigService/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceTagConfigServiceClient) Delete(ctx context.Context, in *InterfaceTagConfigDeleteRequest, opts ...grpc.CallOption) (*InterfaceTagConfigDeleteResponse, error) {
	out := new(InterfaceTagConfigDeleteResponse)
	err := c.cc.Invoke(ctx, "/arista.tag.v1.InterfaceTagConfigService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InterfaceTagConfigServiceServer is the server API for InterfaceTagConfigService service.
type InterfaceTagConfigServiceServer interface {
	// GetOne returns a unary model as specified by the key in the request.
	// The key must be provided and all fields populated (unless otherwise specified).
	GetOne(context.Context, *InterfaceTagConfigRequest) (*InterfaceTagConfigResponse, error)
	// GetAll returns all entities for this model, with optional filtering.
	GetAll(*InterfaceTagConfigStreamRequest, InterfaceTagConfigService_GetAllServer) error
	// Subscribe first returns all initial state known to the system,
	// then will send deltas as entities are changed.
	Subscribe(*InterfaceTagConfigStreamRequest, InterfaceTagConfigService_SubscribeServer) error
	// Set allows setting values for the entity specified by the key in the request.
	// The key must be provided and all fields set (unless otherwise specified).
	Set(context.Context, *InterfaceTagConfigSetRequest) (*InterfaceTagConfigSetResponse, error)
	// Delete will remove the entity specified by the key within the request.
	// The key must be provided and all fields populated (unless otherwise specified).
	Delete(context.Context, *InterfaceTagConfigDeleteRequest) (*InterfaceTagConfigDeleteResponse, error)
}

// UnimplementedInterfaceTagConfigServiceServer can be embedded to have forward compatible implementations.
type UnimplementedInterfaceTagConfigServiceServer struct {
}

func (*UnimplementedInterfaceTagConfigServiceServer) GetOne(context.Context, *InterfaceTagConfigRequest) (*InterfaceTagConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (*UnimplementedInterfaceTagConfigServiceServer) GetAll(*InterfaceTagConfigStreamRequest, InterfaceTagConfigService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (*UnimplementedInterfaceTagConfigServiceServer) Subscribe(*InterfaceTagConfigStreamRequest, InterfaceTagConfigService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (*UnimplementedInterfaceTagConfigServiceServer) Set(context.Context, *InterfaceTagConfigSetRequest) (*InterfaceTagConfigSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (*UnimplementedInterfaceTagConfigServiceServer) Delete(context.Context, *InterfaceTagConfigDeleteRequest) (*InterfaceTagConfigDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterInterfaceTagConfigServiceServer(s *grpc.Server, srv InterfaceTagConfigServiceServer) {
	s.RegisterService(&_InterfaceTagConfigService_serviceDesc, srv)
}

func _InterfaceTagConfigService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceTagConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceTagConfigServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arista.tag.v1.InterfaceTagConfigService/GetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceTagConfigServiceServer).GetOne(ctx, req.(*InterfaceTagConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterfaceTagConfigService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InterfaceTagConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InterfaceTagConfigServiceServer).GetAll(m, &interfaceTagConfigServiceGetAllServer{stream})
}

type InterfaceTagConfigService_GetAllServer interface {
	Send(*InterfaceTagConfigStreamResponse) error
	grpc.ServerStream
}

type interfaceTagConfigServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *interfaceTagConfigServiceGetAllServer) Send(m *InterfaceTagConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _InterfaceTagConfigService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InterfaceTagConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InterfaceTagConfigServiceServer).Subscribe(m, &interfaceTagConfigServiceSubscribeServer{stream})
}

type InterfaceTagConfigService_SubscribeServer interface {
	Send(*InterfaceTagConfigStreamResponse) error
	grpc.ServerStream
}

type interfaceTagConfigServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *interfaceTagConfigServiceSubscribeServer) Send(m *InterfaceTagConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _InterfaceTagConfigService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceTagConfigSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceTagConfigServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arista.tag.v1.InterfaceTagConfigService/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceTagConfigServiceServer).Set(ctx, req.(*InterfaceTagConfigSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterfaceTagConfigService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceTagConfigDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceTagConfigServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arista.tag.v1.InterfaceTagConfigService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceTagConfigServiceServer).Delete(ctx, req.(*InterfaceTagConfigDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _InterfaceTagConfigService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "arista.tag.v1.InterfaceTagConfigService",
	HandlerType: (*InterfaceTagConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _InterfaceTagConfigService_GetOne_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _InterfaceTagConfigService_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _InterfaceTagConfigService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAll",
			Handler:       _InterfaceTagConfigService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _InterfaceTagConfigService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/tag.v1/services.gen.proto",
}
