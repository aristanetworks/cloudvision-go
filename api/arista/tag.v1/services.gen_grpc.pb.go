// Copyright (c) 2020 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

//
// Code generated by boomtown. DO NOT EDIT.
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: arista/tag.v1/services.gen.proto

package tag

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DeviceTagService_GetOne_FullMethodName    = "/arista.tag.v1.DeviceTagService/GetOne"
	DeviceTagService_GetAll_FullMethodName    = "/arista.tag.v1.DeviceTagService/GetAll"
	DeviceTagService_Subscribe_FullMethodName = "/arista.tag.v1.DeviceTagService/Subscribe"
)

// DeviceTagServiceClient is the client API for DeviceTagService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceTagServiceClient interface {
	GetOne(ctx context.Context, in *DeviceTagRequest, opts ...grpc.CallOption) (*DeviceTagResponse, error)
	GetAll(ctx context.Context, in *DeviceTagStreamRequest, opts ...grpc.CallOption) (DeviceTagService_GetAllClient, error)
	Subscribe(ctx context.Context, in *DeviceTagStreamRequest, opts ...grpc.CallOption) (DeviceTagService_SubscribeClient, error)
}

type deviceTagServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceTagServiceClient(cc grpc.ClientConnInterface) DeviceTagServiceClient {
	return &deviceTagServiceClient{cc}
}

func (c *deviceTagServiceClient) GetOne(ctx context.Context, in *DeviceTagRequest, opts ...grpc.CallOption) (*DeviceTagResponse, error) {
	out := new(DeviceTagResponse)
	err := c.cc.Invoke(ctx, DeviceTagService_GetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceTagServiceClient) GetAll(ctx context.Context, in *DeviceTagStreamRequest, opts ...grpc.CallOption) (DeviceTagService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeviceTagService_ServiceDesc.Streams[0], DeviceTagService_GetAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceTagServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceTagService_GetAllClient interface {
	Recv() (*DeviceTagStreamResponse, error)
	grpc.ClientStream
}

type deviceTagServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *deviceTagServiceGetAllClient) Recv() (*DeviceTagStreamResponse, error) {
	m := new(DeviceTagStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceTagServiceClient) Subscribe(ctx context.Context, in *DeviceTagStreamRequest, opts ...grpc.CallOption) (DeviceTagService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeviceTagService_ServiceDesc.Streams[1], DeviceTagService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceTagServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceTagService_SubscribeClient interface {
	Recv() (*DeviceTagStreamResponse, error)
	grpc.ClientStream
}

type deviceTagServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *deviceTagServiceSubscribeClient) Recv() (*DeviceTagStreamResponse, error) {
	m := new(DeviceTagStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DeviceTagServiceServer is the server API for DeviceTagService service.
// All implementations must embed UnimplementedDeviceTagServiceServer
// for forward compatibility
type DeviceTagServiceServer interface {
	GetOne(context.Context, *DeviceTagRequest) (*DeviceTagResponse, error)
	GetAll(*DeviceTagStreamRequest, DeviceTagService_GetAllServer) error
	Subscribe(*DeviceTagStreamRequest, DeviceTagService_SubscribeServer) error
	mustEmbedUnimplementedDeviceTagServiceServer()
}

// UnimplementedDeviceTagServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceTagServiceServer struct {
}

func (UnimplementedDeviceTagServiceServer) GetOne(context.Context, *DeviceTagRequest) (*DeviceTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedDeviceTagServiceServer) GetAll(*DeviceTagStreamRequest, DeviceTagService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedDeviceTagServiceServer) Subscribe(*DeviceTagStreamRequest, DeviceTagService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedDeviceTagServiceServer) mustEmbedUnimplementedDeviceTagServiceServer() {}

// UnsafeDeviceTagServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceTagServiceServer will
// result in compilation errors.
type UnsafeDeviceTagServiceServer interface {
	mustEmbedUnimplementedDeviceTagServiceServer()
}

func RegisterDeviceTagServiceServer(s grpc.ServiceRegistrar, srv DeviceTagServiceServer) {
	s.RegisterService(&DeviceTagService_ServiceDesc, srv)
}

func _DeviceTagService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceTagServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceTagService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceTagServiceServer).GetOne(ctx, req.(*DeviceTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceTagService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceTagStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceTagServiceServer).GetAll(m, &deviceTagServiceGetAllServer{stream})
}

type DeviceTagService_GetAllServer interface {
	Send(*DeviceTagStreamResponse) error
	grpc.ServerStream
}

type deviceTagServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *deviceTagServiceGetAllServer) Send(m *DeviceTagStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DeviceTagService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceTagStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceTagServiceServer).Subscribe(m, &deviceTagServiceSubscribeServer{stream})
}

type DeviceTagService_SubscribeServer interface {
	Send(*DeviceTagStreamResponse) error
	grpc.ServerStream
}

type deviceTagServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *deviceTagServiceSubscribeServer) Send(m *DeviceTagStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// DeviceTagService_ServiceDesc is the grpc.ServiceDesc for DeviceTagService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceTagService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.tag.v1.DeviceTagService",
	HandlerType: (*DeviceTagServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _DeviceTagService_GetOne_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAll",
			Handler:       _DeviceTagService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _DeviceTagService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/tag.v1/services.gen.proto",
}

const (
	DeviceTagAssignmentConfigService_GetOne_FullMethodName    = "/arista.tag.v1.DeviceTagAssignmentConfigService/GetOne"
	DeviceTagAssignmentConfigService_GetAll_FullMethodName    = "/arista.tag.v1.DeviceTagAssignmentConfigService/GetAll"
	DeviceTagAssignmentConfigService_Subscribe_FullMethodName = "/arista.tag.v1.DeviceTagAssignmentConfigService/Subscribe"
	DeviceTagAssignmentConfigService_Set_FullMethodName       = "/arista.tag.v1.DeviceTagAssignmentConfigService/Set"
	DeviceTagAssignmentConfigService_Delete_FullMethodName    = "/arista.tag.v1.DeviceTagAssignmentConfigService/Delete"
	DeviceTagAssignmentConfigService_DeleteAll_FullMethodName = "/arista.tag.v1.DeviceTagAssignmentConfigService/DeleteAll"
)

// DeviceTagAssignmentConfigServiceClient is the client API for DeviceTagAssignmentConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceTagAssignmentConfigServiceClient interface {
	GetOne(ctx context.Context, in *DeviceTagAssignmentConfigRequest, opts ...grpc.CallOption) (*DeviceTagAssignmentConfigResponse, error)
	GetAll(ctx context.Context, in *DeviceTagAssignmentConfigStreamRequest, opts ...grpc.CallOption) (DeviceTagAssignmentConfigService_GetAllClient, error)
	Subscribe(ctx context.Context, in *DeviceTagAssignmentConfigStreamRequest, opts ...grpc.CallOption) (DeviceTagAssignmentConfigService_SubscribeClient, error)
	Set(ctx context.Context, in *DeviceTagAssignmentConfigSetRequest, opts ...grpc.CallOption) (*DeviceTagAssignmentConfigSetResponse, error)
	Delete(ctx context.Context, in *DeviceTagAssignmentConfigDeleteRequest, opts ...grpc.CallOption) (*DeviceTagAssignmentConfigDeleteResponse, error)
	DeleteAll(ctx context.Context, in *DeviceTagAssignmentConfigDeleteAllRequest, opts ...grpc.CallOption) (DeviceTagAssignmentConfigService_DeleteAllClient, error)
}

type deviceTagAssignmentConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceTagAssignmentConfigServiceClient(cc grpc.ClientConnInterface) DeviceTagAssignmentConfigServiceClient {
	return &deviceTagAssignmentConfigServiceClient{cc}
}

func (c *deviceTagAssignmentConfigServiceClient) GetOne(ctx context.Context, in *DeviceTagAssignmentConfigRequest, opts ...grpc.CallOption) (*DeviceTagAssignmentConfigResponse, error) {
	out := new(DeviceTagAssignmentConfigResponse)
	err := c.cc.Invoke(ctx, DeviceTagAssignmentConfigService_GetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceTagAssignmentConfigServiceClient) GetAll(ctx context.Context, in *DeviceTagAssignmentConfigStreamRequest, opts ...grpc.CallOption) (DeviceTagAssignmentConfigService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeviceTagAssignmentConfigService_ServiceDesc.Streams[0], DeviceTagAssignmentConfigService_GetAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceTagAssignmentConfigServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceTagAssignmentConfigService_GetAllClient interface {
	Recv() (*DeviceTagAssignmentConfigStreamResponse, error)
	grpc.ClientStream
}

type deviceTagAssignmentConfigServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *deviceTagAssignmentConfigServiceGetAllClient) Recv() (*DeviceTagAssignmentConfigStreamResponse, error) {
	m := new(DeviceTagAssignmentConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceTagAssignmentConfigServiceClient) Subscribe(ctx context.Context, in *DeviceTagAssignmentConfigStreamRequest, opts ...grpc.CallOption) (DeviceTagAssignmentConfigService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeviceTagAssignmentConfigService_ServiceDesc.Streams[1], DeviceTagAssignmentConfigService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceTagAssignmentConfigServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceTagAssignmentConfigService_SubscribeClient interface {
	Recv() (*DeviceTagAssignmentConfigStreamResponse, error)
	grpc.ClientStream
}

type deviceTagAssignmentConfigServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *deviceTagAssignmentConfigServiceSubscribeClient) Recv() (*DeviceTagAssignmentConfigStreamResponse, error) {
	m := new(DeviceTagAssignmentConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceTagAssignmentConfigServiceClient) Set(ctx context.Context, in *DeviceTagAssignmentConfigSetRequest, opts ...grpc.CallOption) (*DeviceTagAssignmentConfigSetResponse, error) {
	out := new(DeviceTagAssignmentConfigSetResponse)
	err := c.cc.Invoke(ctx, DeviceTagAssignmentConfigService_Set_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceTagAssignmentConfigServiceClient) Delete(ctx context.Context, in *DeviceTagAssignmentConfigDeleteRequest, opts ...grpc.CallOption) (*DeviceTagAssignmentConfigDeleteResponse, error) {
	out := new(DeviceTagAssignmentConfigDeleteResponse)
	err := c.cc.Invoke(ctx, DeviceTagAssignmentConfigService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceTagAssignmentConfigServiceClient) DeleteAll(ctx context.Context, in *DeviceTagAssignmentConfigDeleteAllRequest, opts ...grpc.CallOption) (DeviceTagAssignmentConfigService_DeleteAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeviceTagAssignmentConfigService_ServiceDesc.Streams[2], DeviceTagAssignmentConfigService_DeleteAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceTagAssignmentConfigServiceDeleteAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceTagAssignmentConfigService_DeleteAllClient interface {
	Recv() (*DeviceTagAssignmentConfigDeleteAllResponse, error)
	grpc.ClientStream
}

type deviceTagAssignmentConfigServiceDeleteAllClient struct {
	grpc.ClientStream
}

func (x *deviceTagAssignmentConfigServiceDeleteAllClient) Recv() (*DeviceTagAssignmentConfigDeleteAllResponse, error) {
	m := new(DeviceTagAssignmentConfigDeleteAllResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DeviceTagAssignmentConfigServiceServer is the server API for DeviceTagAssignmentConfigService service.
// All implementations must embed UnimplementedDeviceTagAssignmentConfigServiceServer
// for forward compatibility
type DeviceTagAssignmentConfigServiceServer interface {
	GetOne(context.Context, *DeviceTagAssignmentConfigRequest) (*DeviceTagAssignmentConfigResponse, error)
	GetAll(*DeviceTagAssignmentConfigStreamRequest, DeviceTagAssignmentConfigService_GetAllServer) error
	Subscribe(*DeviceTagAssignmentConfigStreamRequest, DeviceTagAssignmentConfigService_SubscribeServer) error
	Set(context.Context, *DeviceTagAssignmentConfigSetRequest) (*DeviceTagAssignmentConfigSetResponse, error)
	Delete(context.Context, *DeviceTagAssignmentConfigDeleteRequest) (*DeviceTagAssignmentConfigDeleteResponse, error)
	DeleteAll(*DeviceTagAssignmentConfigDeleteAllRequest, DeviceTagAssignmentConfigService_DeleteAllServer) error
	mustEmbedUnimplementedDeviceTagAssignmentConfigServiceServer()
}

// UnimplementedDeviceTagAssignmentConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceTagAssignmentConfigServiceServer struct {
}

func (UnimplementedDeviceTagAssignmentConfigServiceServer) GetOne(context.Context, *DeviceTagAssignmentConfigRequest) (*DeviceTagAssignmentConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedDeviceTagAssignmentConfigServiceServer) GetAll(*DeviceTagAssignmentConfigStreamRequest, DeviceTagAssignmentConfigService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedDeviceTagAssignmentConfigServiceServer) Subscribe(*DeviceTagAssignmentConfigStreamRequest, DeviceTagAssignmentConfigService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedDeviceTagAssignmentConfigServiceServer) Set(context.Context, *DeviceTagAssignmentConfigSetRequest) (*DeviceTagAssignmentConfigSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedDeviceTagAssignmentConfigServiceServer) Delete(context.Context, *DeviceTagAssignmentConfigDeleteRequest) (*DeviceTagAssignmentConfigDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDeviceTagAssignmentConfigServiceServer) DeleteAll(*DeviceTagAssignmentConfigDeleteAllRequest, DeviceTagAssignmentConfigService_DeleteAllServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteAll not implemented")
}
func (UnimplementedDeviceTagAssignmentConfigServiceServer) mustEmbedUnimplementedDeviceTagAssignmentConfigServiceServer() {
}

// UnsafeDeviceTagAssignmentConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceTagAssignmentConfigServiceServer will
// result in compilation errors.
type UnsafeDeviceTagAssignmentConfigServiceServer interface {
	mustEmbedUnimplementedDeviceTagAssignmentConfigServiceServer()
}

func RegisterDeviceTagAssignmentConfigServiceServer(s grpc.ServiceRegistrar, srv DeviceTagAssignmentConfigServiceServer) {
	s.RegisterService(&DeviceTagAssignmentConfigService_ServiceDesc, srv)
}

func _DeviceTagAssignmentConfigService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceTagAssignmentConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceTagAssignmentConfigServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceTagAssignmentConfigService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceTagAssignmentConfigServiceServer).GetOne(ctx, req.(*DeviceTagAssignmentConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceTagAssignmentConfigService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceTagAssignmentConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceTagAssignmentConfigServiceServer).GetAll(m, &deviceTagAssignmentConfigServiceGetAllServer{stream})
}

type DeviceTagAssignmentConfigService_GetAllServer interface {
	Send(*DeviceTagAssignmentConfigStreamResponse) error
	grpc.ServerStream
}

type deviceTagAssignmentConfigServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *deviceTagAssignmentConfigServiceGetAllServer) Send(m *DeviceTagAssignmentConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DeviceTagAssignmentConfigService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceTagAssignmentConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceTagAssignmentConfigServiceServer).Subscribe(m, &deviceTagAssignmentConfigServiceSubscribeServer{stream})
}

type DeviceTagAssignmentConfigService_SubscribeServer interface {
	Send(*DeviceTagAssignmentConfigStreamResponse) error
	grpc.ServerStream
}

type deviceTagAssignmentConfigServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *deviceTagAssignmentConfigServiceSubscribeServer) Send(m *DeviceTagAssignmentConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DeviceTagAssignmentConfigService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceTagAssignmentConfigSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceTagAssignmentConfigServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceTagAssignmentConfigService_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceTagAssignmentConfigServiceServer).Set(ctx, req.(*DeviceTagAssignmentConfigSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceTagAssignmentConfigService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceTagAssignmentConfigDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceTagAssignmentConfigServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceTagAssignmentConfigService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceTagAssignmentConfigServiceServer).Delete(ctx, req.(*DeviceTagAssignmentConfigDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceTagAssignmentConfigService_DeleteAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceTagAssignmentConfigDeleteAllRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceTagAssignmentConfigServiceServer).DeleteAll(m, &deviceTagAssignmentConfigServiceDeleteAllServer{stream})
}

type DeviceTagAssignmentConfigService_DeleteAllServer interface {
	Send(*DeviceTagAssignmentConfigDeleteAllResponse) error
	grpc.ServerStream
}

type deviceTagAssignmentConfigServiceDeleteAllServer struct {
	grpc.ServerStream
}

func (x *deviceTagAssignmentConfigServiceDeleteAllServer) Send(m *DeviceTagAssignmentConfigDeleteAllResponse) error {
	return x.ServerStream.SendMsg(m)
}

// DeviceTagAssignmentConfigService_ServiceDesc is the grpc.ServiceDesc for DeviceTagAssignmentConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceTagAssignmentConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.tag.v1.DeviceTagAssignmentConfigService",
	HandlerType: (*DeviceTagAssignmentConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _DeviceTagAssignmentConfigService_GetOne_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _DeviceTagAssignmentConfigService_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DeviceTagAssignmentConfigService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAll",
			Handler:       _DeviceTagAssignmentConfigService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _DeviceTagAssignmentConfigService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteAll",
			Handler:       _DeviceTagAssignmentConfigService_DeleteAll_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/tag.v1/services.gen.proto",
}

const (
	DeviceTagConfigService_GetOne_FullMethodName    = "/arista.tag.v1.DeviceTagConfigService/GetOne"
	DeviceTagConfigService_GetAll_FullMethodName    = "/arista.tag.v1.DeviceTagConfigService/GetAll"
	DeviceTagConfigService_Subscribe_FullMethodName = "/arista.tag.v1.DeviceTagConfigService/Subscribe"
	DeviceTagConfigService_Set_FullMethodName       = "/arista.tag.v1.DeviceTagConfigService/Set"
	DeviceTagConfigService_Delete_FullMethodName    = "/arista.tag.v1.DeviceTagConfigService/Delete"
	DeviceTagConfigService_DeleteAll_FullMethodName = "/arista.tag.v1.DeviceTagConfigService/DeleteAll"
)

// DeviceTagConfigServiceClient is the client API for DeviceTagConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceTagConfigServiceClient interface {
	GetOne(ctx context.Context, in *DeviceTagConfigRequest, opts ...grpc.CallOption) (*DeviceTagConfigResponse, error)
	GetAll(ctx context.Context, in *DeviceTagConfigStreamRequest, opts ...grpc.CallOption) (DeviceTagConfigService_GetAllClient, error)
	Subscribe(ctx context.Context, in *DeviceTagConfigStreamRequest, opts ...grpc.CallOption) (DeviceTagConfigService_SubscribeClient, error)
	Set(ctx context.Context, in *DeviceTagConfigSetRequest, opts ...grpc.CallOption) (*DeviceTagConfigSetResponse, error)
	Delete(ctx context.Context, in *DeviceTagConfigDeleteRequest, opts ...grpc.CallOption) (*DeviceTagConfigDeleteResponse, error)
	DeleteAll(ctx context.Context, in *DeviceTagConfigDeleteAllRequest, opts ...grpc.CallOption) (DeviceTagConfigService_DeleteAllClient, error)
}

type deviceTagConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceTagConfigServiceClient(cc grpc.ClientConnInterface) DeviceTagConfigServiceClient {
	return &deviceTagConfigServiceClient{cc}
}

func (c *deviceTagConfigServiceClient) GetOne(ctx context.Context, in *DeviceTagConfigRequest, opts ...grpc.CallOption) (*DeviceTagConfigResponse, error) {
	out := new(DeviceTagConfigResponse)
	err := c.cc.Invoke(ctx, DeviceTagConfigService_GetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceTagConfigServiceClient) GetAll(ctx context.Context, in *DeviceTagConfigStreamRequest, opts ...grpc.CallOption) (DeviceTagConfigService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeviceTagConfigService_ServiceDesc.Streams[0], DeviceTagConfigService_GetAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceTagConfigServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceTagConfigService_GetAllClient interface {
	Recv() (*DeviceTagConfigStreamResponse, error)
	grpc.ClientStream
}

type deviceTagConfigServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *deviceTagConfigServiceGetAllClient) Recv() (*DeviceTagConfigStreamResponse, error) {
	m := new(DeviceTagConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceTagConfigServiceClient) Subscribe(ctx context.Context, in *DeviceTagConfigStreamRequest, opts ...grpc.CallOption) (DeviceTagConfigService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeviceTagConfigService_ServiceDesc.Streams[1], DeviceTagConfigService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceTagConfigServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceTagConfigService_SubscribeClient interface {
	Recv() (*DeviceTagConfigStreamResponse, error)
	grpc.ClientStream
}

type deviceTagConfigServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *deviceTagConfigServiceSubscribeClient) Recv() (*DeviceTagConfigStreamResponse, error) {
	m := new(DeviceTagConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceTagConfigServiceClient) Set(ctx context.Context, in *DeviceTagConfigSetRequest, opts ...grpc.CallOption) (*DeviceTagConfigSetResponse, error) {
	out := new(DeviceTagConfigSetResponse)
	err := c.cc.Invoke(ctx, DeviceTagConfigService_Set_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceTagConfigServiceClient) Delete(ctx context.Context, in *DeviceTagConfigDeleteRequest, opts ...grpc.CallOption) (*DeviceTagConfigDeleteResponse, error) {
	out := new(DeviceTagConfigDeleteResponse)
	err := c.cc.Invoke(ctx, DeviceTagConfigService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceTagConfigServiceClient) DeleteAll(ctx context.Context, in *DeviceTagConfigDeleteAllRequest, opts ...grpc.CallOption) (DeviceTagConfigService_DeleteAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeviceTagConfigService_ServiceDesc.Streams[2], DeviceTagConfigService_DeleteAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceTagConfigServiceDeleteAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceTagConfigService_DeleteAllClient interface {
	Recv() (*DeviceTagConfigDeleteAllResponse, error)
	grpc.ClientStream
}

type deviceTagConfigServiceDeleteAllClient struct {
	grpc.ClientStream
}

func (x *deviceTagConfigServiceDeleteAllClient) Recv() (*DeviceTagConfigDeleteAllResponse, error) {
	m := new(DeviceTagConfigDeleteAllResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DeviceTagConfigServiceServer is the server API for DeviceTagConfigService service.
// All implementations must embed UnimplementedDeviceTagConfigServiceServer
// for forward compatibility
type DeviceTagConfigServiceServer interface {
	GetOne(context.Context, *DeviceTagConfigRequest) (*DeviceTagConfigResponse, error)
	GetAll(*DeviceTagConfigStreamRequest, DeviceTagConfigService_GetAllServer) error
	Subscribe(*DeviceTagConfigStreamRequest, DeviceTagConfigService_SubscribeServer) error
	Set(context.Context, *DeviceTagConfigSetRequest) (*DeviceTagConfigSetResponse, error)
	Delete(context.Context, *DeviceTagConfigDeleteRequest) (*DeviceTagConfigDeleteResponse, error)
	DeleteAll(*DeviceTagConfigDeleteAllRequest, DeviceTagConfigService_DeleteAllServer) error
	mustEmbedUnimplementedDeviceTagConfigServiceServer()
}

// UnimplementedDeviceTagConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceTagConfigServiceServer struct {
}

func (UnimplementedDeviceTagConfigServiceServer) GetOne(context.Context, *DeviceTagConfigRequest) (*DeviceTagConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedDeviceTagConfigServiceServer) GetAll(*DeviceTagConfigStreamRequest, DeviceTagConfigService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedDeviceTagConfigServiceServer) Subscribe(*DeviceTagConfigStreamRequest, DeviceTagConfigService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedDeviceTagConfigServiceServer) Set(context.Context, *DeviceTagConfigSetRequest) (*DeviceTagConfigSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedDeviceTagConfigServiceServer) Delete(context.Context, *DeviceTagConfigDeleteRequest) (*DeviceTagConfigDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDeviceTagConfigServiceServer) DeleteAll(*DeviceTagConfigDeleteAllRequest, DeviceTagConfigService_DeleteAllServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteAll not implemented")
}
func (UnimplementedDeviceTagConfigServiceServer) mustEmbedUnimplementedDeviceTagConfigServiceServer() {
}

// UnsafeDeviceTagConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceTagConfigServiceServer will
// result in compilation errors.
type UnsafeDeviceTagConfigServiceServer interface {
	mustEmbedUnimplementedDeviceTagConfigServiceServer()
}

func RegisterDeviceTagConfigServiceServer(s grpc.ServiceRegistrar, srv DeviceTagConfigServiceServer) {
	s.RegisterService(&DeviceTagConfigService_ServiceDesc, srv)
}

func _DeviceTagConfigService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceTagConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceTagConfigServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceTagConfigService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceTagConfigServiceServer).GetOne(ctx, req.(*DeviceTagConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceTagConfigService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceTagConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceTagConfigServiceServer).GetAll(m, &deviceTagConfigServiceGetAllServer{stream})
}

type DeviceTagConfigService_GetAllServer interface {
	Send(*DeviceTagConfigStreamResponse) error
	grpc.ServerStream
}

type deviceTagConfigServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *deviceTagConfigServiceGetAllServer) Send(m *DeviceTagConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DeviceTagConfigService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceTagConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceTagConfigServiceServer).Subscribe(m, &deviceTagConfigServiceSubscribeServer{stream})
}

type DeviceTagConfigService_SubscribeServer interface {
	Send(*DeviceTagConfigStreamResponse) error
	grpc.ServerStream
}

type deviceTagConfigServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *deviceTagConfigServiceSubscribeServer) Send(m *DeviceTagConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DeviceTagConfigService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceTagConfigSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceTagConfigServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceTagConfigService_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceTagConfigServiceServer).Set(ctx, req.(*DeviceTagConfigSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceTagConfigService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceTagConfigDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceTagConfigServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceTagConfigService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceTagConfigServiceServer).Delete(ctx, req.(*DeviceTagConfigDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceTagConfigService_DeleteAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceTagConfigDeleteAllRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceTagConfigServiceServer).DeleteAll(m, &deviceTagConfigServiceDeleteAllServer{stream})
}

type DeviceTagConfigService_DeleteAllServer interface {
	Send(*DeviceTagConfigDeleteAllResponse) error
	grpc.ServerStream
}

type deviceTagConfigServiceDeleteAllServer struct {
	grpc.ServerStream
}

func (x *deviceTagConfigServiceDeleteAllServer) Send(m *DeviceTagConfigDeleteAllResponse) error {
	return x.ServerStream.SendMsg(m)
}

// DeviceTagConfigService_ServiceDesc is the grpc.ServiceDesc for DeviceTagConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceTagConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.tag.v1.DeviceTagConfigService",
	HandlerType: (*DeviceTagConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _DeviceTagConfigService_GetOne_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _DeviceTagConfigService_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DeviceTagConfigService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAll",
			Handler:       _DeviceTagConfigService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _DeviceTagConfigService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteAll",
			Handler:       _DeviceTagConfigService_DeleteAll_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/tag.v1/services.gen.proto",
}

const (
	InterfaceTagService_GetOne_FullMethodName    = "/arista.tag.v1.InterfaceTagService/GetOne"
	InterfaceTagService_GetAll_FullMethodName    = "/arista.tag.v1.InterfaceTagService/GetAll"
	InterfaceTagService_Subscribe_FullMethodName = "/arista.tag.v1.InterfaceTagService/Subscribe"
)

// InterfaceTagServiceClient is the client API for InterfaceTagService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InterfaceTagServiceClient interface {
	GetOne(ctx context.Context, in *InterfaceTagRequest, opts ...grpc.CallOption) (*InterfaceTagResponse, error)
	GetAll(ctx context.Context, in *InterfaceTagStreamRequest, opts ...grpc.CallOption) (InterfaceTagService_GetAllClient, error)
	Subscribe(ctx context.Context, in *InterfaceTagStreamRequest, opts ...grpc.CallOption) (InterfaceTagService_SubscribeClient, error)
}

type interfaceTagServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInterfaceTagServiceClient(cc grpc.ClientConnInterface) InterfaceTagServiceClient {
	return &interfaceTagServiceClient{cc}
}

func (c *interfaceTagServiceClient) GetOne(ctx context.Context, in *InterfaceTagRequest, opts ...grpc.CallOption) (*InterfaceTagResponse, error) {
	out := new(InterfaceTagResponse)
	err := c.cc.Invoke(ctx, InterfaceTagService_GetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceTagServiceClient) GetAll(ctx context.Context, in *InterfaceTagStreamRequest, opts ...grpc.CallOption) (InterfaceTagService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &InterfaceTagService_ServiceDesc.Streams[0], InterfaceTagService_GetAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &interfaceTagServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InterfaceTagService_GetAllClient interface {
	Recv() (*InterfaceTagStreamResponse, error)
	grpc.ClientStream
}

type interfaceTagServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *interfaceTagServiceGetAllClient) Recv() (*InterfaceTagStreamResponse, error) {
	m := new(InterfaceTagStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *interfaceTagServiceClient) Subscribe(ctx context.Context, in *InterfaceTagStreamRequest, opts ...grpc.CallOption) (InterfaceTagService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &InterfaceTagService_ServiceDesc.Streams[1], InterfaceTagService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &interfaceTagServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InterfaceTagService_SubscribeClient interface {
	Recv() (*InterfaceTagStreamResponse, error)
	grpc.ClientStream
}

type interfaceTagServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *interfaceTagServiceSubscribeClient) Recv() (*InterfaceTagStreamResponse, error) {
	m := new(InterfaceTagStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// InterfaceTagServiceServer is the server API for InterfaceTagService service.
// All implementations must embed UnimplementedInterfaceTagServiceServer
// for forward compatibility
type InterfaceTagServiceServer interface {
	GetOne(context.Context, *InterfaceTagRequest) (*InterfaceTagResponse, error)
	GetAll(*InterfaceTagStreamRequest, InterfaceTagService_GetAllServer) error
	Subscribe(*InterfaceTagStreamRequest, InterfaceTagService_SubscribeServer) error
	mustEmbedUnimplementedInterfaceTagServiceServer()
}

// UnimplementedInterfaceTagServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInterfaceTagServiceServer struct {
}

func (UnimplementedInterfaceTagServiceServer) GetOne(context.Context, *InterfaceTagRequest) (*InterfaceTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedInterfaceTagServiceServer) GetAll(*InterfaceTagStreamRequest, InterfaceTagService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedInterfaceTagServiceServer) Subscribe(*InterfaceTagStreamRequest, InterfaceTagService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedInterfaceTagServiceServer) mustEmbedUnimplementedInterfaceTagServiceServer() {}

// UnsafeInterfaceTagServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InterfaceTagServiceServer will
// result in compilation errors.
type UnsafeInterfaceTagServiceServer interface {
	mustEmbedUnimplementedInterfaceTagServiceServer()
}

func RegisterInterfaceTagServiceServer(s grpc.ServiceRegistrar, srv InterfaceTagServiceServer) {
	s.RegisterService(&InterfaceTagService_ServiceDesc, srv)
}

func _InterfaceTagService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceTagServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterfaceTagService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceTagServiceServer).GetOne(ctx, req.(*InterfaceTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterfaceTagService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InterfaceTagStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InterfaceTagServiceServer).GetAll(m, &interfaceTagServiceGetAllServer{stream})
}

type InterfaceTagService_GetAllServer interface {
	Send(*InterfaceTagStreamResponse) error
	grpc.ServerStream
}

type interfaceTagServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *interfaceTagServiceGetAllServer) Send(m *InterfaceTagStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _InterfaceTagService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InterfaceTagStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InterfaceTagServiceServer).Subscribe(m, &interfaceTagServiceSubscribeServer{stream})
}

type InterfaceTagService_SubscribeServer interface {
	Send(*InterfaceTagStreamResponse) error
	grpc.ServerStream
}

type interfaceTagServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *interfaceTagServiceSubscribeServer) Send(m *InterfaceTagStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// InterfaceTagService_ServiceDesc is the grpc.ServiceDesc for InterfaceTagService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InterfaceTagService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.tag.v1.InterfaceTagService",
	HandlerType: (*InterfaceTagServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _InterfaceTagService_GetOne_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAll",
			Handler:       _InterfaceTagService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _InterfaceTagService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/tag.v1/services.gen.proto",
}

const (
	InterfaceTagAssignmentConfigService_GetOne_FullMethodName    = "/arista.tag.v1.InterfaceTagAssignmentConfigService/GetOne"
	InterfaceTagAssignmentConfigService_GetAll_FullMethodName    = "/arista.tag.v1.InterfaceTagAssignmentConfigService/GetAll"
	InterfaceTagAssignmentConfigService_Subscribe_FullMethodName = "/arista.tag.v1.InterfaceTagAssignmentConfigService/Subscribe"
	InterfaceTagAssignmentConfigService_Set_FullMethodName       = "/arista.tag.v1.InterfaceTagAssignmentConfigService/Set"
	InterfaceTagAssignmentConfigService_Delete_FullMethodName    = "/arista.tag.v1.InterfaceTagAssignmentConfigService/Delete"
	InterfaceTagAssignmentConfigService_DeleteAll_FullMethodName = "/arista.tag.v1.InterfaceTagAssignmentConfigService/DeleteAll"
)

// InterfaceTagAssignmentConfigServiceClient is the client API for InterfaceTagAssignmentConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InterfaceTagAssignmentConfigServiceClient interface {
	GetOne(ctx context.Context, in *InterfaceTagAssignmentConfigRequest, opts ...grpc.CallOption) (*InterfaceTagAssignmentConfigResponse, error)
	GetAll(ctx context.Context, in *InterfaceTagAssignmentConfigStreamRequest, opts ...grpc.CallOption) (InterfaceTagAssignmentConfigService_GetAllClient, error)
	Subscribe(ctx context.Context, in *InterfaceTagAssignmentConfigStreamRequest, opts ...grpc.CallOption) (InterfaceTagAssignmentConfigService_SubscribeClient, error)
	Set(ctx context.Context, in *InterfaceTagAssignmentConfigSetRequest, opts ...grpc.CallOption) (*InterfaceTagAssignmentConfigSetResponse, error)
	Delete(ctx context.Context, in *InterfaceTagAssignmentConfigDeleteRequest, opts ...grpc.CallOption) (*InterfaceTagAssignmentConfigDeleteResponse, error)
	DeleteAll(ctx context.Context, in *InterfaceTagAssignmentConfigDeleteAllRequest, opts ...grpc.CallOption) (InterfaceTagAssignmentConfigService_DeleteAllClient, error)
}

type interfaceTagAssignmentConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInterfaceTagAssignmentConfigServiceClient(cc grpc.ClientConnInterface) InterfaceTagAssignmentConfigServiceClient {
	return &interfaceTagAssignmentConfigServiceClient{cc}
}

func (c *interfaceTagAssignmentConfigServiceClient) GetOne(ctx context.Context, in *InterfaceTagAssignmentConfigRequest, opts ...grpc.CallOption) (*InterfaceTagAssignmentConfigResponse, error) {
	out := new(InterfaceTagAssignmentConfigResponse)
	err := c.cc.Invoke(ctx, InterfaceTagAssignmentConfigService_GetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceTagAssignmentConfigServiceClient) GetAll(ctx context.Context, in *InterfaceTagAssignmentConfigStreamRequest, opts ...grpc.CallOption) (InterfaceTagAssignmentConfigService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &InterfaceTagAssignmentConfigService_ServiceDesc.Streams[0], InterfaceTagAssignmentConfigService_GetAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &interfaceTagAssignmentConfigServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InterfaceTagAssignmentConfigService_GetAllClient interface {
	Recv() (*InterfaceTagAssignmentConfigStreamResponse, error)
	grpc.ClientStream
}

type interfaceTagAssignmentConfigServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *interfaceTagAssignmentConfigServiceGetAllClient) Recv() (*InterfaceTagAssignmentConfigStreamResponse, error) {
	m := new(InterfaceTagAssignmentConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *interfaceTagAssignmentConfigServiceClient) Subscribe(ctx context.Context, in *InterfaceTagAssignmentConfigStreamRequest, opts ...grpc.CallOption) (InterfaceTagAssignmentConfigService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &InterfaceTagAssignmentConfigService_ServiceDesc.Streams[1], InterfaceTagAssignmentConfigService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &interfaceTagAssignmentConfigServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InterfaceTagAssignmentConfigService_SubscribeClient interface {
	Recv() (*InterfaceTagAssignmentConfigStreamResponse, error)
	grpc.ClientStream
}

type interfaceTagAssignmentConfigServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *interfaceTagAssignmentConfigServiceSubscribeClient) Recv() (*InterfaceTagAssignmentConfigStreamResponse, error) {
	m := new(InterfaceTagAssignmentConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *interfaceTagAssignmentConfigServiceClient) Set(ctx context.Context, in *InterfaceTagAssignmentConfigSetRequest, opts ...grpc.CallOption) (*InterfaceTagAssignmentConfigSetResponse, error) {
	out := new(InterfaceTagAssignmentConfigSetResponse)
	err := c.cc.Invoke(ctx, InterfaceTagAssignmentConfigService_Set_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceTagAssignmentConfigServiceClient) Delete(ctx context.Context, in *InterfaceTagAssignmentConfigDeleteRequest, opts ...grpc.CallOption) (*InterfaceTagAssignmentConfigDeleteResponse, error) {
	out := new(InterfaceTagAssignmentConfigDeleteResponse)
	err := c.cc.Invoke(ctx, InterfaceTagAssignmentConfigService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceTagAssignmentConfigServiceClient) DeleteAll(ctx context.Context, in *InterfaceTagAssignmentConfigDeleteAllRequest, opts ...grpc.CallOption) (InterfaceTagAssignmentConfigService_DeleteAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &InterfaceTagAssignmentConfigService_ServiceDesc.Streams[2], InterfaceTagAssignmentConfigService_DeleteAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &interfaceTagAssignmentConfigServiceDeleteAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InterfaceTagAssignmentConfigService_DeleteAllClient interface {
	Recv() (*InterfaceTagAssignmentConfigDeleteAllResponse, error)
	grpc.ClientStream
}

type interfaceTagAssignmentConfigServiceDeleteAllClient struct {
	grpc.ClientStream
}

func (x *interfaceTagAssignmentConfigServiceDeleteAllClient) Recv() (*InterfaceTagAssignmentConfigDeleteAllResponse, error) {
	m := new(InterfaceTagAssignmentConfigDeleteAllResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// InterfaceTagAssignmentConfigServiceServer is the server API for InterfaceTagAssignmentConfigService service.
// All implementations must embed UnimplementedInterfaceTagAssignmentConfigServiceServer
// for forward compatibility
type InterfaceTagAssignmentConfigServiceServer interface {
	GetOne(context.Context, *InterfaceTagAssignmentConfigRequest) (*InterfaceTagAssignmentConfigResponse, error)
	GetAll(*InterfaceTagAssignmentConfigStreamRequest, InterfaceTagAssignmentConfigService_GetAllServer) error
	Subscribe(*InterfaceTagAssignmentConfigStreamRequest, InterfaceTagAssignmentConfigService_SubscribeServer) error
	Set(context.Context, *InterfaceTagAssignmentConfigSetRequest) (*InterfaceTagAssignmentConfigSetResponse, error)
	Delete(context.Context, *InterfaceTagAssignmentConfigDeleteRequest) (*InterfaceTagAssignmentConfigDeleteResponse, error)
	DeleteAll(*InterfaceTagAssignmentConfigDeleteAllRequest, InterfaceTagAssignmentConfigService_DeleteAllServer) error
	mustEmbedUnimplementedInterfaceTagAssignmentConfigServiceServer()
}

// UnimplementedInterfaceTagAssignmentConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInterfaceTagAssignmentConfigServiceServer struct {
}

func (UnimplementedInterfaceTagAssignmentConfigServiceServer) GetOne(context.Context, *InterfaceTagAssignmentConfigRequest) (*InterfaceTagAssignmentConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedInterfaceTagAssignmentConfigServiceServer) GetAll(*InterfaceTagAssignmentConfigStreamRequest, InterfaceTagAssignmentConfigService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedInterfaceTagAssignmentConfigServiceServer) Subscribe(*InterfaceTagAssignmentConfigStreamRequest, InterfaceTagAssignmentConfigService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedInterfaceTagAssignmentConfigServiceServer) Set(context.Context, *InterfaceTagAssignmentConfigSetRequest) (*InterfaceTagAssignmentConfigSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedInterfaceTagAssignmentConfigServiceServer) Delete(context.Context, *InterfaceTagAssignmentConfigDeleteRequest) (*InterfaceTagAssignmentConfigDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedInterfaceTagAssignmentConfigServiceServer) DeleteAll(*InterfaceTagAssignmentConfigDeleteAllRequest, InterfaceTagAssignmentConfigService_DeleteAllServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteAll not implemented")
}
func (UnimplementedInterfaceTagAssignmentConfigServiceServer) mustEmbedUnimplementedInterfaceTagAssignmentConfigServiceServer() {
}

// UnsafeInterfaceTagAssignmentConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InterfaceTagAssignmentConfigServiceServer will
// result in compilation errors.
type UnsafeInterfaceTagAssignmentConfigServiceServer interface {
	mustEmbedUnimplementedInterfaceTagAssignmentConfigServiceServer()
}

func RegisterInterfaceTagAssignmentConfigServiceServer(s grpc.ServiceRegistrar, srv InterfaceTagAssignmentConfigServiceServer) {
	s.RegisterService(&InterfaceTagAssignmentConfigService_ServiceDesc, srv)
}

func _InterfaceTagAssignmentConfigService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceTagAssignmentConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceTagAssignmentConfigServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterfaceTagAssignmentConfigService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceTagAssignmentConfigServiceServer).GetOne(ctx, req.(*InterfaceTagAssignmentConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterfaceTagAssignmentConfigService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InterfaceTagAssignmentConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InterfaceTagAssignmentConfigServiceServer).GetAll(m, &interfaceTagAssignmentConfigServiceGetAllServer{stream})
}

type InterfaceTagAssignmentConfigService_GetAllServer interface {
	Send(*InterfaceTagAssignmentConfigStreamResponse) error
	grpc.ServerStream
}

type interfaceTagAssignmentConfigServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *interfaceTagAssignmentConfigServiceGetAllServer) Send(m *InterfaceTagAssignmentConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _InterfaceTagAssignmentConfigService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InterfaceTagAssignmentConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InterfaceTagAssignmentConfigServiceServer).Subscribe(m, &interfaceTagAssignmentConfigServiceSubscribeServer{stream})
}

type InterfaceTagAssignmentConfigService_SubscribeServer interface {
	Send(*InterfaceTagAssignmentConfigStreamResponse) error
	grpc.ServerStream
}

type interfaceTagAssignmentConfigServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *interfaceTagAssignmentConfigServiceSubscribeServer) Send(m *InterfaceTagAssignmentConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _InterfaceTagAssignmentConfigService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceTagAssignmentConfigSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceTagAssignmentConfigServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterfaceTagAssignmentConfigService_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceTagAssignmentConfigServiceServer).Set(ctx, req.(*InterfaceTagAssignmentConfigSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterfaceTagAssignmentConfigService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceTagAssignmentConfigDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceTagAssignmentConfigServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterfaceTagAssignmentConfigService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceTagAssignmentConfigServiceServer).Delete(ctx, req.(*InterfaceTagAssignmentConfigDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterfaceTagAssignmentConfigService_DeleteAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InterfaceTagAssignmentConfigDeleteAllRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InterfaceTagAssignmentConfigServiceServer).DeleteAll(m, &interfaceTagAssignmentConfigServiceDeleteAllServer{stream})
}

type InterfaceTagAssignmentConfigService_DeleteAllServer interface {
	Send(*InterfaceTagAssignmentConfigDeleteAllResponse) error
	grpc.ServerStream
}

type interfaceTagAssignmentConfigServiceDeleteAllServer struct {
	grpc.ServerStream
}

func (x *interfaceTagAssignmentConfigServiceDeleteAllServer) Send(m *InterfaceTagAssignmentConfigDeleteAllResponse) error {
	return x.ServerStream.SendMsg(m)
}

// InterfaceTagAssignmentConfigService_ServiceDesc is the grpc.ServiceDesc for InterfaceTagAssignmentConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InterfaceTagAssignmentConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.tag.v1.InterfaceTagAssignmentConfigService",
	HandlerType: (*InterfaceTagAssignmentConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _InterfaceTagAssignmentConfigService_GetOne_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _InterfaceTagAssignmentConfigService_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _InterfaceTagAssignmentConfigService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAll",
			Handler:       _InterfaceTagAssignmentConfigService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _InterfaceTagAssignmentConfigService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteAll",
			Handler:       _InterfaceTagAssignmentConfigService_DeleteAll_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/tag.v1/services.gen.proto",
}

const (
	InterfaceTagConfigService_GetOne_FullMethodName    = "/arista.tag.v1.InterfaceTagConfigService/GetOne"
	InterfaceTagConfigService_GetAll_FullMethodName    = "/arista.tag.v1.InterfaceTagConfigService/GetAll"
	InterfaceTagConfigService_Subscribe_FullMethodName = "/arista.tag.v1.InterfaceTagConfigService/Subscribe"
	InterfaceTagConfigService_Set_FullMethodName       = "/arista.tag.v1.InterfaceTagConfigService/Set"
	InterfaceTagConfigService_Delete_FullMethodName    = "/arista.tag.v1.InterfaceTagConfigService/Delete"
	InterfaceTagConfigService_DeleteAll_FullMethodName = "/arista.tag.v1.InterfaceTagConfigService/DeleteAll"
)

// InterfaceTagConfigServiceClient is the client API for InterfaceTagConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InterfaceTagConfigServiceClient interface {
	GetOne(ctx context.Context, in *InterfaceTagConfigRequest, opts ...grpc.CallOption) (*InterfaceTagConfigResponse, error)
	GetAll(ctx context.Context, in *InterfaceTagConfigStreamRequest, opts ...grpc.CallOption) (InterfaceTagConfigService_GetAllClient, error)
	Subscribe(ctx context.Context, in *InterfaceTagConfigStreamRequest, opts ...grpc.CallOption) (InterfaceTagConfigService_SubscribeClient, error)
	Set(ctx context.Context, in *InterfaceTagConfigSetRequest, opts ...grpc.CallOption) (*InterfaceTagConfigSetResponse, error)
	Delete(ctx context.Context, in *InterfaceTagConfigDeleteRequest, opts ...grpc.CallOption) (*InterfaceTagConfigDeleteResponse, error)
	DeleteAll(ctx context.Context, in *InterfaceTagConfigDeleteAllRequest, opts ...grpc.CallOption) (InterfaceTagConfigService_DeleteAllClient, error)
}

type interfaceTagConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInterfaceTagConfigServiceClient(cc grpc.ClientConnInterface) InterfaceTagConfigServiceClient {
	return &interfaceTagConfigServiceClient{cc}
}

func (c *interfaceTagConfigServiceClient) GetOne(ctx context.Context, in *InterfaceTagConfigRequest, opts ...grpc.CallOption) (*InterfaceTagConfigResponse, error) {
	out := new(InterfaceTagConfigResponse)
	err := c.cc.Invoke(ctx, InterfaceTagConfigService_GetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceTagConfigServiceClient) GetAll(ctx context.Context, in *InterfaceTagConfigStreamRequest, opts ...grpc.CallOption) (InterfaceTagConfigService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &InterfaceTagConfigService_ServiceDesc.Streams[0], InterfaceTagConfigService_GetAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &interfaceTagConfigServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InterfaceTagConfigService_GetAllClient interface {
	Recv() (*InterfaceTagConfigStreamResponse, error)
	grpc.ClientStream
}

type interfaceTagConfigServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *interfaceTagConfigServiceGetAllClient) Recv() (*InterfaceTagConfigStreamResponse, error) {
	m := new(InterfaceTagConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *interfaceTagConfigServiceClient) Subscribe(ctx context.Context, in *InterfaceTagConfigStreamRequest, opts ...grpc.CallOption) (InterfaceTagConfigService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &InterfaceTagConfigService_ServiceDesc.Streams[1], InterfaceTagConfigService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &interfaceTagConfigServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InterfaceTagConfigService_SubscribeClient interface {
	Recv() (*InterfaceTagConfigStreamResponse, error)
	grpc.ClientStream
}

type interfaceTagConfigServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *interfaceTagConfigServiceSubscribeClient) Recv() (*InterfaceTagConfigStreamResponse, error) {
	m := new(InterfaceTagConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *interfaceTagConfigServiceClient) Set(ctx context.Context, in *InterfaceTagConfigSetRequest, opts ...grpc.CallOption) (*InterfaceTagConfigSetResponse, error) {
	out := new(InterfaceTagConfigSetResponse)
	err := c.cc.Invoke(ctx, InterfaceTagConfigService_Set_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceTagConfigServiceClient) Delete(ctx context.Context, in *InterfaceTagConfigDeleteRequest, opts ...grpc.CallOption) (*InterfaceTagConfigDeleteResponse, error) {
	out := new(InterfaceTagConfigDeleteResponse)
	err := c.cc.Invoke(ctx, InterfaceTagConfigService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceTagConfigServiceClient) DeleteAll(ctx context.Context, in *InterfaceTagConfigDeleteAllRequest, opts ...grpc.CallOption) (InterfaceTagConfigService_DeleteAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &InterfaceTagConfigService_ServiceDesc.Streams[2], InterfaceTagConfigService_DeleteAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &interfaceTagConfigServiceDeleteAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InterfaceTagConfigService_DeleteAllClient interface {
	Recv() (*InterfaceTagConfigDeleteAllResponse, error)
	grpc.ClientStream
}

type interfaceTagConfigServiceDeleteAllClient struct {
	grpc.ClientStream
}

func (x *interfaceTagConfigServiceDeleteAllClient) Recv() (*InterfaceTagConfigDeleteAllResponse, error) {
	m := new(InterfaceTagConfigDeleteAllResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// InterfaceTagConfigServiceServer is the server API for InterfaceTagConfigService service.
// All implementations must embed UnimplementedInterfaceTagConfigServiceServer
// for forward compatibility
type InterfaceTagConfigServiceServer interface {
	GetOne(context.Context, *InterfaceTagConfigRequest) (*InterfaceTagConfigResponse, error)
	GetAll(*InterfaceTagConfigStreamRequest, InterfaceTagConfigService_GetAllServer) error
	Subscribe(*InterfaceTagConfigStreamRequest, InterfaceTagConfigService_SubscribeServer) error
	Set(context.Context, *InterfaceTagConfigSetRequest) (*InterfaceTagConfigSetResponse, error)
	Delete(context.Context, *InterfaceTagConfigDeleteRequest) (*InterfaceTagConfigDeleteResponse, error)
	DeleteAll(*InterfaceTagConfigDeleteAllRequest, InterfaceTagConfigService_DeleteAllServer) error
	mustEmbedUnimplementedInterfaceTagConfigServiceServer()
}

// UnimplementedInterfaceTagConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInterfaceTagConfigServiceServer struct {
}

func (UnimplementedInterfaceTagConfigServiceServer) GetOne(context.Context, *InterfaceTagConfigRequest) (*InterfaceTagConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedInterfaceTagConfigServiceServer) GetAll(*InterfaceTagConfigStreamRequest, InterfaceTagConfigService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedInterfaceTagConfigServiceServer) Subscribe(*InterfaceTagConfigStreamRequest, InterfaceTagConfigService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedInterfaceTagConfigServiceServer) Set(context.Context, *InterfaceTagConfigSetRequest) (*InterfaceTagConfigSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedInterfaceTagConfigServiceServer) Delete(context.Context, *InterfaceTagConfigDeleteRequest) (*InterfaceTagConfigDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedInterfaceTagConfigServiceServer) DeleteAll(*InterfaceTagConfigDeleteAllRequest, InterfaceTagConfigService_DeleteAllServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteAll not implemented")
}
func (UnimplementedInterfaceTagConfigServiceServer) mustEmbedUnimplementedInterfaceTagConfigServiceServer() {
}

// UnsafeInterfaceTagConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InterfaceTagConfigServiceServer will
// result in compilation errors.
type UnsafeInterfaceTagConfigServiceServer interface {
	mustEmbedUnimplementedInterfaceTagConfigServiceServer()
}

func RegisterInterfaceTagConfigServiceServer(s grpc.ServiceRegistrar, srv InterfaceTagConfigServiceServer) {
	s.RegisterService(&InterfaceTagConfigService_ServiceDesc, srv)
}

func _InterfaceTagConfigService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceTagConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceTagConfigServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterfaceTagConfigService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceTagConfigServiceServer).GetOne(ctx, req.(*InterfaceTagConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterfaceTagConfigService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InterfaceTagConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InterfaceTagConfigServiceServer).GetAll(m, &interfaceTagConfigServiceGetAllServer{stream})
}

type InterfaceTagConfigService_GetAllServer interface {
	Send(*InterfaceTagConfigStreamResponse) error
	grpc.ServerStream
}

type interfaceTagConfigServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *interfaceTagConfigServiceGetAllServer) Send(m *InterfaceTagConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _InterfaceTagConfigService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InterfaceTagConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InterfaceTagConfigServiceServer).Subscribe(m, &interfaceTagConfigServiceSubscribeServer{stream})
}

type InterfaceTagConfigService_SubscribeServer interface {
	Send(*InterfaceTagConfigStreamResponse) error
	grpc.ServerStream
}

type interfaceTagConfigServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *interfaceTagConfigServiceSubscribeServer) Send(m *InterfaceTagConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _InterfaceTagConfigService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceTagConfigSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceTagConfigServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterfaceTagConfigService_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceTagConfigServiceServer).Set(ctx, req.(*InterfaceTagConfigSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterfaceTagConfigService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceTagConfigDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceTagConfigServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterfaceTagConfigService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceTagConfigServiceServer).Delete(ctx, req.(*InterfaceTagConfigDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterfaceTagConfigService_DeleteAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InterfaceTagConfigDeleteAllRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InterfaceTagConfigServiceServer).DeleteAll(m, &interfaceTagConfigServiceDeleteAllServer{stream})
}

type InterfaceTagConfigService_DeleteAllServer interface {
	Send(*InterfaceTagConfigDeleteAllResponse) error
	grpc.ServerStream
}

type interfaceTagConfigServiceDeleteAllServer struct {
	grpc.ServerStream
}

func (x *interfaceTagConfigServiceDeleteAllServer) Send(m *InterfaceTagConfigDeleteAllResponse) error {
	return x.ServerStream.SendMsg(m)
}

// InterfaceTagConfigService_ServiceDesc is the grpc.ServiceDesc for InterfaceTagConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InterfaceTagConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.tag.v1.InterfaceTagConfigService",
	HandlerType: (*InterfaceTagConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _InterfaceTagConfigService_GetOne_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _InterfaceTagConfigService_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _InterfaceTagConfigService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAll",
			Handler:       _InterfaceTagConfigService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _InterfaceTagConfigService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteAll",
			Handler:       _InterfaceTagConfigService_DeleteAll_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/tag.v1/services.gen.proto",
}
