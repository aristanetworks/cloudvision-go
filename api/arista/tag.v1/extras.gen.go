// Copyright (c) 2023 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

//
// Code generated by boomtown. DO NOT EDIT.
//

package tag

import "google.golang.org/grpc"

// Client composes the service clients within the tag package.
// This client can then be composed into a larger hierarchy for more complex clients.
//
// Because method names include the name of the Resource they operate on, the embedded
// clients are unnamed fields to reduce stutter.
//
// Included resources:
//   - DeviceTag
//   - DeviceTagAssignmentConfig
//   - DeviceTagConfig
//   - InterfaceTag
//   - InterfaceTagAssignmentConfig
//   - InterfaceTagConfig
type Client struct {
	DeviceTag                    DeviceTagServiceClient
	DeviceTagAssignmentConfig    DeviceTagAssignmentConfigServiceClient
	DeviceTagConfig              DeviceTagConfigServiceClient
	InterfaceTag                 InterfaceTagServiceClient
	InterfaceTagAssignmentConfig InterfaceTagAssignmentConfigServiceClient
	InterfaceTagConfig           InterfaceTagConfigServiceClient
}

// NewClient creates a new composed-client from the given connection.
func NewClient(conn grpc.ClientConnInterface) Client {
	return Client{
		DeviceTag:                    NewDeviceTagServiceClient(conn),
		DeviceTagAssignmentConfig:    NewDeviceTagAssignmentConfigServiceClient(conn),
		DeviceTagConfig:              NewDeviceTagConfigServiceClient(conn),
		InterfaceTag:                 NewInterfaceTagServiceClient(conn),
		InterfaceTagAssignmentConfig: NewInterfaceTagAssignmentConfigServiceClient(conn),
		InterfaceTagConfig:           NewInterfaceTagConfigServiceClient(conn),
	}
}

// Server aggregates the various server interfaces required by gRPC.
// The included resources are:
//   - DeviceTag
//   - DeviceTagAssignmentConfig
//   - DeviceTagConfig
//   - InterfaceTag
//   - InterfaceTagAssignmentConfig
//   - InterfaceTagConfig
type Server struct {
	DeviceTag                    DeviceTagServiceServer
	DeviceTagAssignmentConfig    DeviceTagAssignmentConfigServiceServer
	DeviceTagConfig              DeviceTagConfigServiceServer
	InterfaceTag                 InterfaceTagServiceServer
	InterfaceTagAssignmentConfig InterfaceTagAssignmentConfigServiceServer
	InterfaceTagConfig           InterfaceTagConfigServiceServer
}

// Register takes the given gRPC Server and registers our services with it.
func (s Server) Register(target *grpc.Server) {
	RegisterDeviceTagServiceServer(target, s.DeviceTag)
	RegisterDeviceTagAssignmentConfigServiceServer(target, s.DeviceTagAssignmentConfig)
	RegisterDeviceTagConfigServiceServer(target, s.DeviceTagConfig)
	RegisterInterfaceTagServiceServer(target, s.InterfaceTag)
	RegisterInterfaceTagAssignmentConfigServiceServer(target, s.InterfaceTagAssignmentConfig)
	RegisterInterfaceTagConfigServiceServer(target, s.InterfaceTagConfig)
}

// RegisterUnimplementeds adds unimplemented servers to the given gRPC Server
func RegisterUnimplementeds(target *grpc.Server) error {
	RegisterDeviceTagServiceServer(target,
		UnimplementedDeviceTagServiceServer{})
	RegisterDeviceTagAssignmentConfigServiceServer(target,
		UnimplementedDeviceTagAssignmentConfigServiceServer{})
	RegisterDeviceTagConfigServiceServer(target,
		UnimplementedDeviceTagConfigServiceServer{})
	RegisterInterfaceTagServiceServer(target,
		UnimplementedInterfaceTagServiceServer{})
	RegisterInterfaceTagAssignmentConfigServiceServer(target,
		UnimplementedInterfaceTagAssignmentConfigServiceServer{})
	RegisterInterfaceTagConfigServiceServer(target,
		UnimplementedInterfaceTagConfigServiceServer{})
	return nil
}

// HasKey returns whether the given DeviceTag has a key provided in the model.
func (d *DeviceTag) HasKey() bool {
	return d.GetKey() != nil
}

// HasKey returns whether the given DeviceTagRequest has a key provided in the request.
func (d *DeviceTagRequest) HasKey() bool {
	return d.GetKey() != nil
}

// HasKey returns whether the given DeviceTagAssignmentConfig has a key provided in the model.
func (d *DeviceTagAssignmentConfig) HasKey() bool {
	return d.GetKey() != nil
}

// HasKey returns whether the given DeviceTagAssignmentConfigRequest has a key provided in the request.
func (d *DeviceTagAssignmentConfigRequest) HasKey() bool {
	return d.GetKey() != nil
}

// HasKey returns whether the given DeviceTagAssignmentConfigSetRequest has a key provided in the request.
func (d *DeviceTagAssignmentConfigSetRequest) HasKey() bool {
	return d.GetValue().HasKey()
}

// HasKey returns whether the given DeviceTagAssignmentConfigDeleteRequest has a key provided in the request.
func (d *DeviceTagAssignmentConfigDeleteRequest) HasKey() bool {
	return d.GetKey() != nil
}

// HasKey returns whether the given DeviceTagConfig has a key provided in the model.
func (d *DeviceTagConfig) HasKey() bool {
	return d.GetKey() != nil
}

// HasKey returns whether the given DeviceTagConfigRequest has a key provided in the request.
func (d *DeviceTagConfigRequest) HasKey() bool {
	return d.GetKey() != nil
}

// HasKey returns whether the given DeviceTagConfigSetRequest has a key provided in the request.
func (d *DeviceTagConfigSetRequest) HasKey() bool {
	return d.GetValue().HasKey()
}

// HasKey returns whether the given DeviceTagConfigDeleteRequest has a key provided in the request.
func (d *DeviceTagConfigDeleteRequest) HasKey() bool {
	return d.GetKey() != nil
}

// HasKey returns whether the given InterfaceTag has a key provided in the model.
func (i *InterfaceTag) HasKey() bool {
	return i.GetKey() != nil
}

// HasKey returns whether the given InterfaceTagRequest has a key provided in the request.
func (i *InterfaceTagRequest) HasKey() bool {
	return i.GetKey() != nil
}

// HasKey returns whether the given InterfaceTagAssignmentConfig has a key provided in the model.
func (i *InterfaceTagAssignmentConfig) HasKey() bool {
	return i.GetKey() != nil
}

// HasKey returns whether the given InterfaceTagAssignmentConfigRequest has a key provided in the request.
func (i *InterfaceTagAssignmentConfigRequest) HasKey() bool {
	return i.GetKey() != nil
}

// HasKey returns whether the given InterfaceTagAssignmentConfigSetRequest has a key provided in the request.
func (i *InterfaceTagAssignmentConfigSetRequest) HasKey() bool {
	return i.GetValue().HasKey()
}

// HasKey returns whether the given InterfaceTagAssignmentConfigDeleteRequest has a key provided in the request.
func (i *InterfaceTagAssignmentConfigDeleteRequest) HasKey() bool {
	return i.GetKey() != nil
}

// HasKey returns whether the given InterfaceTagConfig has a key provided in the model.
func (i *InterfaceTagConfig) HasKey() bool {
	return i.GetKey() != nil
}

// HasKey returns whether the given InterfaceTagConfigRequest has a key provided in the request.
func (i *InterfaceTagConfigRequest) HasKey() bool {
	return i.GetKey() != nil
}

// HasKey returns whether the given InterfaceTagConfigSetRequest has a key provided in the request.
func (i *InterfaceTagConfigSetRequest) HasKey() bool {
	return i.GetValue().HasKey()
}

// HasKey returns whether the given InterfaceTagConfigDeleteRequest has a key provided in the request.
func (i *InterfaceTagConfigDeleteRequest) HasKey() bool {
	return i.GetKey() != nil
}

// PassesPartialEqFilter returns whether this CreatorType matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (c CreatorType) PassesPartialEqFilter(cmp CreatorType) bool {
	if cmp != CreatorType(0) {
		return c == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether the DeviceTagAssignmentKey matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (d *DeviceTagAssignmentKey) PassesPartialEqFilter(cmp *DeviceTagAssignmentKey) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if d == nil {
		return false
	}

	if cmp.Label != nil {
		if d.Label == nil {
			return false
		}
		if d.Label.Value != cmp.Label.Value {
			return false
		}
	}

	if cmp.Value != nil {
		if d.Value == nil {
			return false
		}
		if d.Value.Value != cmp.Value.Value {
			return false
		}
	}

	if cmp.DeviceId != nil {
		if d.DeviceId == nil {
			return false
		}
		if d.DeviceId.Value != cmp.DeviceId.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the InterfaceTagAssignmentKey matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (i *InterfaceTagAssignmentKey) PassesPartialEqFilter(cmp *InterfaceTagAssignmentKey) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if i == nil {
		return false
	}

	if cmp.Label != nil {
		if i.Label == nil {
			return false
		}
		if i.Label.Value != cmp.Label.Value {
			return false
		}
	}

	if cmp.Value != nil {
		if i.Value == nil {
			return false
		}
		if i.Value.Value != cmp.Value.Value {
			return false
		}
	}

	if cmp.DeviceId != nil {
		if i.DeviceId == nil {
			return false
		}
		if i.DeviceId.Value != cmp.DeviceId.Value {
			return false
		}
	}

	if cmp.InterfaceId != nil {
		if i.InterfaceId == nil {
			return false
		}
		if i.InterfaceId.Value != cmp.InterfaceId.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the TagKey matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (t *TagKey) PassesPartialEqFilter(cmp *TagKey) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if t == nil {
		return false
	}

	if cmp.Label != nil {
		if t.Label == nil {
			return false
		}
		if t.Label.Value != cmp.Label.Value {
			return false
		}
	}

	if cmp.Value != nil {
		if t.Value == nil {
			return false
		}
		if t.Value.Value != cmp.Value.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the DeviceTag matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (d *DeviceTag) PassesPartialEqFilter(cmp *DeviceTag) bool {
	// if the resource is nil, there is nothing to send to the client
	if d == nil {
		return false
	}

	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if !d.Key.PassesPartialEqFilter(cmp.Key) {
		return false
	}

	if !d.CreatorType.PassesPartialEqFilter(cmp.CreatorType) {
		return false
	}

	return true
}

// MatchesAnyPartialEqFilter returns whether the receiver matches any filters in the given set.
func (d *DeviceTag) MatchesAnyPartialEqFilter(filters []*DeviceTag) bool {
	if len(filters) == 0 {
		return true
	}

	for _, filt := range filters {
		if d.PassesPartialEqFilter(filt) {
			return true
		}
	}

	return false
}

// PassesPartialEqFilter returns whether the DeviceTagAssignmentConfig matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (d *DeviceTagAssignmentConfig) PassesPartialEqFilter(cmp *DeviceTagAssignmentConfig) bool {
	// if the resource is nil, there is nothing to send to the client
	if d == nil {
		return false
	}

	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if !d.Key.PassesPartialEqFilter(cmp.Key) {
		return false
	}

	return true
}

// MatchesAnyPartialEqFilter returns whether the receiver matches any filters in the given set.
func (d *DeviceTagAssignmentConfig) MatchesAnyPartialEqFilter(filters []*DeviceTagAssignmentConfig) bool {
	if len(filters) == 0 {
		return true
	}

	for _, filt := range filters {
		if d.PassesPartialEqFilter(filt) {
			return true
		}
	}

	return false
}

// PassesPartialEqFilter returns whether the DeviceTagConfig matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (d *DeviceTagConfig) PassesPartialEqFilter(cmp *DeviceTagConfig) bool {
	// if the resource is nil, there is nothing to send to the client
	if d == nil {
		return false
	}

	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if !d.Key.PassesPartialEqFilter(cmp.Key) {
		return false
	}

	return true
}

// MatchesAnyPartialEqFilter returns whether the receiver matches any filters in the given set.
func (d *DeviceTagConfig) MatchesAnyPartialEqFilter(filters []*DeviceTagConfig) bool {
	if len(filters) == 0 {
		return true
	}

	for _, filt := range filters {
		if d.PassesPartialEqFilter(filt) {
			return true
		}
	}

	return false
}

// PassesPartialEqFilter returns whether the InterfaceTag matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (i *InterfaceTag) PassesPartialEqFilter(cmp *InterfaceTag) bool {
	// if the resource is nil, there is nothing to send to the client
	if i == nil {
		return false
	}

	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if !i.Key.PassesPartialEqFilter(cmp.Key) {
		return false
	}

	if !i.CreatorType.PassesPartialEqFilter(cmp.CreatorType) {
		return false
	}

	return true
}

// MatchesAnyPartialEqFilter returns whether the receiver matches any filters in the given set.
func (i *InterfaceTag) MatchesAnyPartialEqFilter(filters []*InterfaceTag) bool {
	if len(filters) == 0 {
		return true
	}

	for _, filt := range filters {
		if i.PassesPartialEqFilter(filt) {
			return true
		}
	}

	return false
}

// PassesPartialEqFilter returns whether the InterfaceTagAssignmentConfig matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (i *InterfaceTagAssignmentConfig) PassesPartialEqFilter(cmp *InterfaceTagAssignmentConfig) bool {
	// if the resource is nil, there is nothing to send to the client
	if i == nil {
		return false
	}

	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if !i.Key.PassesPartialEqFilter(cmp.Key) {
		return false
	}

	return true
}

// MatchesAnyPartialEqFilter returns whether the receiver matches any filters in the given set.
func (i *InterfaceTagAssignmentConfig) MatchesAnyPartialEqFilter(filters []*InterfaceTagAssignmentConfig) bool {
	if len(filters) == 0 {
		return true
	}

	for _, filt := range filters {
		if i.PassesPartialEqFilter(filt) {
			return true
		}
	}

	return false
}

// PassesPartialEqFilter returns whether the InterfaceTagConfig matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (i *InterfaceTagConfig) PassesPartialEqFilter(cmp *InterfaceTagConfig) bool {
	// if the resource is nil, there is nothing to send to the client
	if i == nil {
		return false
	}

	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if !i.Key.PassesPartialEqFilter(cmp.Key) {
		return false
	}

	return true
}

// MatchesAnyPartialEqFilter returns whether the receiver matches any filters in the given set.
func (i *InterfaceTagConfig) MatchesAnyPartialEqFilter(filters []*InterfaceTagConfig) bool {
	if len(filters) == 0 {
		return true
	}

	for _, filt := range filters {
		if i.PassesPartialEqFilter(filt) {
			return true
		}
	}

	return false
}
