// Copyright (c) 2023 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v4.24.4
// source: arista/configlet.v1/configlet.proto

package configlet

import (
	fmp "github.com/aristanetworks/cloudvision-go/api/fmp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// MatchPolicy specifies how the tag query of a configlet assignment
// should be used to resolve devices for its children
type MatchPolicy int32

const (
	MatchPolicy_MATCH_POLICY_UNSPECIFIED MatchPolicy = 0
	// MATCH_POLICY_MATCH_FIRST dictates that matching devices are used only for the first match amongst its children
	MatchPolicy_MATCH_POLICY_MATCH_FIRST MatchPolicy = 1
	// MATCH_POLICY_MATCH_ALL dictates that matching devices are used across all children
	MatchPolicy_MATCH_POLICY_MATCH_ALL MatchPolicy = 2
)

// Enum value maps for MatchPolicy.
var (
	MatchPolicy_name = map[int32]string{
		0: "MATCH_POLICY_UNSPECIFIED",
		1: "MATCH_POLICY_MATCH_FIRST",
		2: "MATCH_POLICY_MATCH_ALL",
	}
	MatchPolicy_value = map[string]int32{
		"MATCH_POLICY_UNSPECIFIED": 0,
		"MATCH_POLICY_MATCH_FIRST": 1,
		"MATCH_POLICY_MATCH_ALL":   2,
	}
)

func (x MatchPolicy) Enum() *MatchPolicy {
	p := new(MatchPolicy)
	*p = x
	return p
}

func (x MatchPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_configlet_v1_configlet_proto_enumTypes[0].Descriptor()
}

func (MatchPolicy) Type() protoreflect.EnumType {
	return &file_arista_configlet_v1_configlet_proto_enumTypes[0]
}

func (x MatchPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchPolicy.Descriptor instead.
func (MatchPolicy) EnumDescriptor() ([]byte, []int) {
	return file_arista_configlet_v1_configlet_proto_rawDescGZIP(), []int{0}
}

// ConfigletKey uniquely identifies a static configlet.
type ConfigletKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// workspace_id identifies the workspace within which the static configlet resides
	// empty string ("") stands for the "mainline".
	WorkspaceId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	// configlet_id is the static configlet ID.
	ConfigletId *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=configlet_id,json=configletId,proto3" json:"configlet_id,omitempty"`
}

func (x *ConfigletKey) Reset() {
	*x = ConfigletKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_configlet_v1_configlet_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigletKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigletKey) ProtoMessage() {}

func (x *ConfigletKey) ProtoReflect() protoreflect.Message {
	mi := &file_arista_configlet_v1_configlet_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigletKey.ProtoReflect.Descriptor instead.
func (*ConfigletKey) Descriptor() ([]byte, []int) {
	return file_arista_configlet_v1_configlet_proto_rawDescGZIP(), []int{0}
}

func (x *ConfigletKey) GetWorkspaceId() *wrapperspb.StringValue {
	if x != nil {
		return x.WorkspaceId
	}
	return nil
}

func (x *ConfigletKey) GetConfigletId() *wrapperspb.StringValue {
	if x != nil {
		return x.ConfigletId
	}
	return nil
}

// Filter is used to filter static configlets.
type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// include_body specifies the static configlet body is to be included.
	IncludeBody *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=include_body,json=includeBody,proto3" json:"include_body,omitempty"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_configlet_v1_configlet_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_arista_configlet_v1_configlet_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_arista_configlet_v1_configlet_proto_rawDescGZIP(), []int{1}
}

func (x *Filter) GetIncludeBody() *wrapperspb.BoolValue {
	if x != nil {
		return x.IncludeBody
	}
	return nil
}

// Configlet is the state of a static configlet in a workspace or mainline.
// Subscribe and GetAll do not return the "body"
// Use GetOne to get the body of individual configlets
type Configlet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key *ConfigletKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// display_name is the display name of the static configlet.
	DisplayName *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// description is the description of the static configlet.
	Description *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// migrated_from is populated with the source configlet name when migrated
	// from network provisioning to studio.
	MigratedFrom *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=migrated_from,json=migratedFrom,proto3" json:"migrated_from,omitempty"`
	// body is the static configlet body.
	Body *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=body,proto3" json:"body,omitempty"`
	// created_at is the time when the Configlet was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// created_by is the user who created the Configlet.
	CreatedBy *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// last_modified_at is the time when the Configlet was last modified.
	LastModifiedAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=last_modified_at,json=lastModifiedAt,proto3" json:"last_modified_at,omitempty"`
	// last_modified_by is the user who last modified the Configlet.
	LastModifiedBy *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=last_modified_by,json=lastModifiedBy,proto3" json:"last_modified_by,omitempty"`
	// digest is the sha256 hash of the configlet body encoded in hexadecimal.
	Digest *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=digest,proto3" json:"digest,omitempty"`
	// size of configlet body in bytes.
	Size *wrapperspb.Int64Value `protobuf:"bytes,11,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *Configlet) Reset() {
	*x = Configlet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_configlet_v1_configlet_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Configlet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Configlet) ProtoMessage() {}

func (x *Configlet) ProtoReflect() protoreflect.Message {
	mi := &file_arista_configlet_v1_configlet_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Configlet.ProtoReflect.Descriptor instead.
func (*Configlet) Descriptor() ([]byte, []int) {
	return file_arista_configlet_v1_configlet_proto_rawDescGZIP(), []int{2}
}

func (x *Configlet) GetKey() *ConfigletKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Configlet) GetDisplayName() *wrapperspb.StringValue {
	if x != nil {
		return x.DisplayName
	}
	return nil
}

func (x *Configlet) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Configlet) GetMigratedFrom() *wrapperspb.StringValue {
	if x != nil {
		return x.MigratedFrom
	}
	return nil
}

func (x *Configlet) GetBody() *wrapperspb.StringValue {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *Configlet) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Configlet) GetCreatedBy() *wrapperspb.StringValue {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *Configlet) GetLastModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastModifiedAt
	}
	return nil
}

func (x *Configlet) GetLastModifiedBy() *wrapperspb.StringValue {
	if x != nil {
		return x.LastModifiedBy
	}
	return nil
}

func (x *Configlet) GetDigest() *wrapperspb.StringValue {
	if x != nil {
		return x.Digest
	}
	return nil
}

func (x *Configlet) GetSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.Size
	}
	return nil
}

// ConfigletConfig updates a static configlet in a workspace.
type ConfigletConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key *ConfigletKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// remove specifies the static configlet is to be removed from the workspace.
	// Other data fields are not allowed when this field is set to true.
	Remove *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=remove,proto3" json:"remove,omitempty"`
	// display_name is the display name of the static configlet.
	DisplayName *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// description is the description of the static configlet.
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// migrated_from is populated with the source configlet name when migrated
	// from network provisioning to studio.
	MigratedFrom *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=migrated_from,json=migratedFrom,proto3" json:"migrated_from,omitempty"`
	// body is the static configlet body.
	Body *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *ConfigletConfig) Reset() {
	*x = ConfigletConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_configlet_v1_configlet_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigletConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigletConfig) ProtoMessage() {}

func (x *ConfigletConfig) ProtoReflect() protoreflect.Message {
	mi := &file_arista_configlet_v1_configlet_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigletConfig.ProtoReflect.Descriptor instead.
func (*ConfigletConfig) Descriptor() ([]byte, []int) {
	return file_arista_configlet_v1_configlet_proto_rawDescGZIP(), []int{3}
}

func (x *ConfigletConfig) GetKey() *ConfigletKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ConfigletConfig) GetRemove() *wrapperspb.BoolValue {
	if x != nil {
		return x.Remove
	}
	return nil
}

func (x *ConfigletConfig) GetDisplayName() *wrapperspb.StringValue {
	if x != nil {
		return x.DisplayName
	}
	return nil
}

func (x *ConfigletConfig) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ConfigletConfig) GetMigratedFrom() *wrapperspb.StringValue {
	if x != nil {
		return x.MigratedFrom
	}
	return nil
}

func (x *ConfigletConfig) GetBody() *wrapperspb.StringValue {
	if x != nil {
		return x.Body
	}
	return nil
}

// ConfigletAssignmentKey uniquely identifies a configlet assignment
type ConfigletAssignmentKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// workspace_id is the unique identifier of the workspace.
	WorkspaceId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	// configlet_assignment_id is the unique identifier of the configlet_assignment.
	ConfigletAssignmentId *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=configlet_assignment_id,json=configletAssignmentId,proto3" json:"configlet_assignment_id,omitempty"`
}

func (x *ConfigletAssignmentKey) Reset() {
	*x = ConfigletAssignmentKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_configlet_v1_configlet_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigletAssignmentKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigletAssignmentKey) ProtoMessage() {}

func (x *ConfigletAssignmentKey) ProtoReflect() protoreflect.Message {
	mi := &file_arista_configlet_v1_configlet_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigletAssignmentKey.ProtoReflect.Descriptor instead.
func (*ConfigletAssignmentKey) Descriptor() ([]byte, []int) {
	return file_arista_configlet_v1_configlet_proto_rawDescGZIP(), []int{4}
}

func (x *ConfigletAssignmentKey) GetWorkspaceId() *wrapperspb.StringValue {
	if x != nil {
		return x.WorkspaceId
	}
	return nil
}

func (x *ConfigletAssignmentKey) GetConfigletAssignmentId() *wrapperspb.StringValue {
	if x != nil {
		return x.ConfigletAssignmentId
	}
	return nil
}

// ConfigletAssignmentConfig are the the inputs to the static configlet studio.
// Each assignment assigns a list of configlets to the devices matching the tag query.
// Individual assignments can have a list of "child" assignments.
// The totality of these assignments form a list of tree hierarchies.
// Using the corresponding GUI workflow should help explain this structure.
// When traversing a tree and assigning static configlets to devices, the following rules
// are applied:
// 1) Tag queries at each level need to resolve to a subset of its parent's queries.
// Devices resolved in child assignments but which do not resolve in that of its parent's
// are skipped.
// 2) Match policy determines how the assignment's devices get divied up amongst its children.
type ConfigletAssignmentConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         *ConfigletAssignmentKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	DisplayName *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// configlet_ids is the list of configlets to be assigned
	ConfigletIds *fmp.RepeatedString `protobuf:"bytes,5,opt,name=configlet_ids,json=configletIds,proto3" json:"configlet_ids,omitempty"`
	// query is a tag query string that conforms to the CloudVision
	// tag query language. E.g., the query, `"datacenter:NYC,SFO AND
	// sflow:enabled"`, matches all devices with sflow enabled in
	// data centers NYC and SFO.
	// malformed queries result in an error
	// tags not matching devices are ignored
	Query *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=query,proto3" json:"query,omitempty"`
	// remove indicates whether to remove (`true`) or add (`false`,
	// unset) the tag assignments involving the studio identified
	// by the key if the encompassing workspace merges. Other data
	// fields are not allowed if this field is set to true.
	Remove *wrapperspb.BoolValue `protobuf:"bytes,7,opt,name=remove,proto3" json:"remove,omitempty"`
	// match_policy is the discriminator for the query field
	MatchPolicy MatchPolicy `protobuf:"varint,8,opt,name=match_policy,json=matchPolicy,proto3,enum=arista.configlet.v1.MatchPolicy" json:"match_policy,omitempty"`
	// list of child assignments
	ChildAssignmentIds *fmp.RepeatedString `protobuf:"bytes,9,opt,name=child_assignment_ids,json=childAssignmentIds,proto3" json:"child_assignment_ids,omitempty"`
}

func (x *ConfigletAssignmentConfig) Reset() {
	*x = ConfigletAssignmentConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_configlet_v1_configlet_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigletAssignmentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigletAssignmentConfig) ProtoMessage() {}

func (x *ConfigletAssignmentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_arista_configlet_v1_configlet_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigletAssignmentConfig.ProtoReflect.Descriptor instead.
func (*ConfigletAssignmentConfig) Descriptor() ([]byte, []int) {
	return file_arista_configlet_v1_configlet_proto_rawDescGZIP(), []int{5}
}

func (x *ConfigletAssignmentConfig) GetKey() *ConfigletAssignmentKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ConfigletAssignmentConfig) GetDisplayName() *wrapperspb.StringValue {
	if x != nil {
		return x.DisplayName
	}
	return nil
}

func (x *ConfigletAssignmentConfig) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ConfigletAssignmentConfig) GetConfigletIds() *fmp.RepeatedString {
	if x != nil {
		return x.ConfigletIds
	}
	return nil
}

func (x *ConfigletAssignmentConfig) GetQuery() *wrapperspb.StringValue {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *ConfigletAssignmentConfig) GetRemove() *wrapperspb.BoolValue {
	if x != nil {
		return x.Remove
	}
	return nil
}

func (x *ConfigletAssignmentConfig) GetMatchPolicy() MatchPolicy {
	if x != nil {
		return x.MatchPolicy
	}
	return MatchPolicy_MATCH_POLICY_UNSPECIFIED
}

func (x *ConfigletAssignmentConfig) GetChildAssignmentIds() *fmp.RepeatedString {
	if x != nil {
		return x.ChildAssignmentIds
	}
	return nil
}

// ConfigletAssignment is the state of this assignment in a workspace/mainline
type ConfigletAssignment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         *ConfigletAssignmentKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	DisplayName *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// configlet_ids is the list of configlets which are assigned
	ConfigletIds *fmp.RepeatedString `protobuf:"bytes,5,opt,name=configlet_ids,json=configletIds,proto3" json:"configlet_ids,omitempty"`
	// query represents the tag query assigned
	Query *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=query,proto3" json:"query,omitempty"`
	// match_policy is the discriminator for the query field
	MatchPolicy MatchPolicy `protobuf:"varint,7,opt,name=match_policy,json=matchPolicy,proto3,enum=arista.configlet.v1.MatchPolicy" json:"match_policy,omitempty"`
	// list of child assignments
	ChildAssignmentIds *fmp.RepeatedString `protobuf:"bytes,8,opt,name=child_assignment_ids,json=childAssignmentIds,proto3" json:"child_assignment_ids,omitempty"`
	// created_at is the time when the ConfigletAssignment was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// created_by is the user who created the ConfigletAssignment.
	CreatedBy *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// last_modified_at is the time when the ConfigletAssignment
	// was last modified.
	LastModifiedAt *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=last_modified_at,json=lastModifiedAt,proto3" json:"last_modified_at,omitempty"`
	// last_modified_by is the user who last modified the ConfigletAssignment.
	LastModifiedBy *wrapperspb.StringValue `protobuf:"bytes,12,opt,name=last_modified_by,json=lastModifiedBy,proto3" json:"last_modified_by,omitempty"`
}

func (x *ConfigletAssignment) Reset() {
	*x = ConfigletAssignment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_configlet_v1_configlet_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigletAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigletAssignment) ProtoMessage() {}

func (x *ConfigletAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_arista_configlet_v1_configlet_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigletAssignment.ProtoReflect.Descriptor instead.
func (*ConfigletAssignment) Descriptor() ([]byte, []int) {
	return file_arista_configlet_v1_configlet_proto_rawDescGZIP(), []int{6}
}

func (x *ConfigletAssignment) GetKey() *ConfigletAssignmentKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ConfigletAssignment) GetDisplayName() *wrapperspb.StringValue {
	if x != nil {
		return x.DisplayName
	}
	return nil
}

func (x *ConfigletAssignment) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ConfigletAssignment) GetConfigletIds() *fmp.RepeatedString {
	if x != nil {
		return x.ConfigletIds
	}
	return nil
}

func (x *ConfigletAssignment) GetQuery() *wrapperspb.StringValue {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *ConfigletAssignment) GetMatchPolicy() MatchPolicy {
	if x != nil {
		return x.MatchPolicy
	}
	return MatchPolicy_MATCH_POLICY_UNSPECIFIED
}

func (x *ConfigletAssignment) GetChildAssignmentIds() *fmp.RepeatedString {
	if x != nil {
		return x.ChildAssignmentIds
	}
	return nil
}

func (x *ConfigletAssignment) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ConfigletAssignment) GetCreatedBy() *wrapperspb.StringValue {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *ConfigletAssignment) GetLastModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastModifiedAt
	}
	return nil
}

func (x *ConfigletAssignment) GetLastModifiedBy() *wrapperspb.StringValue {
	if x != nil {
		return x.LastModifiedBy
	}
	return nil
}

var File_arista_configlet_v1_configlet_proto protoreflect.FileDescriptor

var file_arista_configlet_v1_configlet_proto_rawDesc = []byte{
	0x0a, 0x23, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6c,
	0x65, 0x74, 0x2e, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6c, 0x65, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x6c, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x66, 0x6d, 0x70,
	0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x12, 0x66, 0x6d, 0x70, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x96, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x6c, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x3a, 0x04, 0x80, 0x8e, 0x19, 0x01, 0x22, 0x47,
	0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0c, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x22, 0xab, 0x05, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x6c, 0x65, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x6c, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6c,
	0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0d, 0x6d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0c, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x30,
	0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x44, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e,
	0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x46,
	0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x12, 0x34, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x06, 0xfa,
	0x8d, 0x19, 0x02, 0x72, 0x6f, 0x22, 0xf8, 0x02, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x6c, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x33, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6c, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x6c, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32,
	0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x30, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72, 0x77,
	0x22, 0xb5, 0x01, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6c, 0x65, 0x74, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x0c, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x17,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x3a, 0x04, 0x80, 0x8e, 0x19, 0x01, 0x22, 0x91, 0x04, 0x0a, 0x19, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x6c, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x66, 0x6d, 0x70, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x73,
	0x12, 0x32, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x32, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6c, 0x65,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x45, 0x0a,
	0x14, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6d,
	0x70, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x12, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x73, 0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72, 0x77, 0x22, 0xdd, 0x05, 0x0a,
	0x13, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x6c, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6c, 0x65,
	0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6c, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6d,
	0x70, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x32,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x43, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6c, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x45, 0x0a, 0x14, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x52, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x44, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6c, 0x61,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x46, 0x0a, 0x10,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x42, 0x79, 0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72, 0x6f, 0x2a, 0x65, 0x0a, 0x0b,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1c, 0x0a, 0x18, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f,
	0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x4c,
	0x4c, 0x10, 0x02, 0x42, 0x4c, 0x5a, 0x4a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x6f, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x6c, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x3b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6c, 0x65,
	0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_arista_configlet_v1_configlet_proto_rawDescOnce sync.Once
	file_arista_configlet_v1_configlet_proto_rawDescData = file_arista_configlet_v1_configlet_proto_rawDesc
)

func file_arista_configlet_v1_configlet_proto_rawDescGZIP() []byte {
	file_arista_configlet_v1_configlet_proto_rawDescOnce.Do(func() {
		file_arista_configlet_v1_configlet_proto_rawDescData = protoimpl.X.CompressGZIP(file_arista_configlet_v1_configlet_proto_rawDescData)
	})
	return file_arista_configlet_v1_configlet_proto_rawDescData
}

var file_arista_configlet_v1_configlet_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_arista_configlet_v1_configlet_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_arista_configlet_v1_configlet_proto_goTypes = []interface{}{
	(MatchPolicy)(0),                  // 0: arista.configlet.v1.MatchPolicy
	(*ConfigletKey)(nil),              // 1: arista.configlet.v1.ConfigletKey
	(*Filter)(nil),                    // 2: arista.configlet.v1.Filter
	(*Configlet)(nil),                 // 3: arista.configlet.v1.Configlet
	(*ConfigletConfig)(nil),           // 4: arista.configlet.v1.ConfigletConfig
	(*ConfigletAssignmentKey)(nil),    // 5: arista.configlet.v1.ConfigletAssignmentKey
	(*ConfigletAssignmentConfig)(nil), // 6: arista.configlet.v1.ConfigletAssignmentConfig
	(*ConfigletAssignment)(nil),       // 7: arista.configlet.v1.ConfigletAssignment
	(*wrapperspb.StringValue)(nil),    // 8: google.protobuf.StringValue
	(*wrapperspb.BoolValue)(nil),      // 9: google.protobuf.BoolValue
	(*timestamppb.Timestamp)(nil),     // 10: google.protobuf.Timestamp
	(*wrapperspb.Int64Value)(nil),     // 11: google.protobuf.Int64Value
	(*fmp.RepeatedString)(nil),        // 12: fmp.RepeatedString
}
var file_arista_configlet_v1_configlet_proto_depIdxs = []int32{
	8,  // 0: arista.configlet.v1.ConfigletKey.workspace_id:type_name -> google.protobuf.StringValue
	8,  // 1: arista.configlet.v1.ConfigletKey.configlet_id:type_name -> google.protobuf.StringValue
	9,  // 2: arista.configlet.v1.Filter.include_body:type_name -> google.protobuf.BoolValue
	1,  // 3: arista.configlet.v1.Configlet.key:type_name -> arista.configlet.v1.ConfigletKey
	8,  // 4: arista.configlet.v1.Configlet.display_name:type_name -> google.protobuf.StringValue
	8,  // 5: arista.configlet.v1.Configlet.description:type_name -> google.protobuf.StringValue
	8,  // 6: arista.configlet.v1.Configlet.migrated_from:type_name -> google.protobuf.StringValue
	8,  // 7: arista.configlet.v1.Configlet.body:type_name -> google.protobuf.StringValue
	10, // 8: arista.configlet.v1.Configlet.created_at:type_name -> google.protobuf.Timestamp
	8,  // 9: arista.configlet.v1.Configlet.created_by:type_name -> google.protobuf.StringValue
	10, // 10: arista.configlet.v1.Configlet.last_modified_at:type_name -> google.protobuf.Timestamp
	8,  // 11: arista.configlet.v1.Configlet.last_modified_by:type_name -> google.protobuf.StringValue
	8,  // 12: arista.configlet.v1.Configlet.digest:type_name -> google.protobuf.StringValue
	11, // 13: arista.configlet.v1.Configlet.size:type_name -> google.protobuf.Int64Value
	1,  // 14: arista.configlet.v1.ConfigletConfig.key:type_name -> arista.configlet.v1.ConfigletKey
	9,  // 15: arista.configlet.v1.ConfigletConfig.remove:type_name -> google.protobuf.BoolValue
	8,  // 16: arista.configlet.v1.ConfigletConfig.display_name:type_name -> google.protobuf.StringValue
	8,  // 17: arista.configlet.v1.ConfigletConfig.description:type_name -> google.protobuf.StringValue
	8,  // 18: arista.configlet.v1.ConfigletConfig.migrated_from:type_name -> google.protobuf.StringValue
	8,  // 19: arista.configlet.v1.ConfigletConfig.body:type_name -> google.protobuf.StringValue
	8,  // 20: arista.configlet.v1.ConfigletAssignmentKey.workspace_id:type_name -> google.protobuf.StringValue
	8,  // 21: arista.configlet.v1.ConfigletAssignmentKey.configlet_assignment_id:type_name -> google.protobuf.StringValue
	5,  // 22: arista.configlet.v1.ConfigletAssignmentConfig.key:type_name -> arista.configlet.v1.ConfigletAssignmentKey
	8,  // 23: arista.configlet.v1.ConfigletAssignmentConfig.display_name:type_name -> google.protobuf.StringValue
	8,  // 24: arista.configlet.v1.ConfigletAssignmentConfig.description:type_name -> google.protobuf.StringValue
	12, // 25: arista.configlet.v1.ConfigletAssignmentConfig.configlet_ids:type_name -> fmp.RepeatedString
	8,  // 26: arista.configlet.v1.ConfigletAssignmentConfig.query:type_name -> google.protobuf.StringValue
	9,  // 27: arista.configlet.v1.ConfigletAssignmentConfig.remove:type_name -> google.protobuf.BoolValue
	0,  // 28: arista.configlet.v1.ConfigletAssignmentConfig.match_policy:type_name -> arista.configlet.v1.MatchPolicy
	12, // 29: arista.configlet.v1.ConfigletAssignmentConfig.child_assignment_ids:type_name -> fmp.RepeatedString
	5,  // 30: arista.configlet.v1.ConfigletAssignment.key:type_name -> arista.configlet.v1.ConfigletAssignmentKey
	8,  // 31: arista.configlet.v1.ConfigletAssignment.display_name:type_name -> google.protobuf.StringValue
	8,  // 32: arista.configlet.v1.ConfigletAssignment.description:type_name -> google.protobuf.StringValue
	12, // 33: arista.configlet.v1.ConfigletAssignment.configlet_ids:type_name -> fmp.RepeatedString
	8,  // 34: arista.configlet.v1.ConfigletAssignment.query:type_name -> google.protobuf.StringValue
	0,  // 35: arista.configlet.v1.ConfigletAssignment.match_policy:type_name -> arista.configlet.v1.MatchPolicy
	12, // 36: arista.configlet.v1.ConfigletAssignment.child_assignment_ids:type_name -> fmp.RepeatedString
	10, // 37: arista.configlet.v1.ConfigletAssignment.created_at:type_name -> google.protobuf.Timestamp
	8,  // 38: arista.configlet.v1.ConfigletAssignment.created_by:type_name -> google.protobuf.StringValue
	10, // 39: arista.configlet.v1.ConfigletAssignment.last_modified_at:type_name -> google.protobuf.Timestamp
	8,  // 40: arista.configlet.v1.ConfigletAssignment.last_modified_by:type_name -> google.protobuf.StringValue
	41, // [41:41] is the sub-list for method output_type
	41, // [41:41] is the sub-list for method input_type
	41, // [41:41] is the sub-list for extension type_name
	41, // [41:41] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_arista_configlet_v1_configlet_proto_init() }
func file_arista_configlet_v1_configlet_proto_init() {
	if File_arista_configlet_v1_configlet_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_arista_configlet_v1_configlet_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigletKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_configlet_v1_configlet_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_configlet_v1_configlet_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Configlet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_configlet_v1_configlet_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigletConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_configlet_v1_configlet_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigletAssignmentKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_configlet_v1_configlet_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigletAssignmentConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_configlet_v1_configlet_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigletAssignment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_arista_configlet_v1_configlet_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_arista_configlet_v1_configlet_proto_goTypes,
		DependencyIndexes: file_arista_configlet_v1_configlet_proto_depIdxs,
		EnumInfos:         file_arista_configlet_v1_configlet_proto_enumTypes,
		MessageInfos:      file_arista_configlet_v1_configlet_proto_msgTypes,
	}.Build()
	File_arista_configlet_v1_configlet_proto = out.File
	file_arista_configlet_v1_configlet_proto_rawDesc = nil
	file_arista_configlet_v1_configlet_proto_goTypes = nil
	file_arista_configlet_v1_configlet_proto_depIdxs = nil
}
