// Copyright (c) 2023 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

//
// Code generated by boomtown. DO NOT EDIT.
//

package configlet

import "google.golang.org/grpc"

// Client composes the service clients within the configlet package.
// This client can then be composed into a larger hierarchy for more complex clients.
//
// Because method names include the name of the Resource they operate on, the embedded
// clients are unnamed fields to reduce stutter.
//
// Included resources:
//   - Configlet
//   - ConfigletAssignment
//   - ConfigletAssignmentConfig
//   - ConfigletConfig
type Client struct {
	Configlet                 ConfigletServiceClient
	ConfigletAssignment       ConfigletAssignmentServiceClient
	ConfigletAssignmentConfig ConfigletAssignmentConfigServiceClient
	ConfigletConfig           ConfigletConfigServiceClient
}

// NewClient creates a new composed-client from the given connection.
func NewClient(conn grpc.ClientConnInterface) Client {
	return Client{
		Configlet:                 NewConfigletServiceClient(conn),
		ConfigletAssignment:       NewConfigletAssignmentServiceClient(conn),
		ConfigletAssignmentConfig: NewConfigletAssignmentConfigServiceClient(conn),
		ConfigletConfig:           NewConfigletConfigServiceClient(conn),
	}
}

// Server aggregates the various server interfaces required by gRPC.
// The included resources are:
//   - Configlet
//   - ConfigletAssignment
//   - ConfigletAssignmentConfig
//   - ConfigletConfig
type Server struct {
	Configlet                 ConfigletServiceServer
	ConfigletAssignment       ConfigletAssignmentServiceServer
	ConfigletAssignmentConfig ConfigletAssignmentConfigServiceServer
	ConfigletConfig           ConfigletConfigServiceServer
}

// Register takes the given gRPC Server and registers our services with it.
func (s Server) Register(target *grpc.Server) {
	RegisterConfigletServiceServer(target, s.Configlet)
	RegisterConfigletAssignmentServiceServer(target, s.ConfigletAssignment)
	RegisterConfigletAssignmentConfigServiceServer(target, s.ConfigletAssignmentConfig)
	RegisterConfigletConfigServiceServer(target, s.ConfigletConfig)
}

// RegisterUnimplementeds adds unimplemented servers to the given gRPC Server
func RegisterUnimplementeds(target *grpc.Server) error {
	RegisterConfigletServiceServer(target,
		UnimplementedConfigletServiceServer{})
	RegisterConfigletAssignmentServiceServer(target,
		UnimplementedConfigletAssignmentServiceServer{})
	RegisterConfigletAssignmentConfigServiceServer(target,
		UnimplementedConfigletAssignmentConfigServiceServer{})
	RegisterConfigletConfigServiceServer(target,
		UnimplementedConfigletConfigServiceServer{})
	return nil
}

// HasKey returns whether the given Configlet has a key provided in the model.
func (c *Configlet) HasKey() bool {
	return c.GetKey() != nil
}

// HasKey returns whether the given ConfigletRequest has a key provided in the request.
func (c *ConfigletRequest) HasKey() bool {
	return c.GetKey() != nil
}

// HasKey returns whether the given ConfigletAssignment has a key provided in the model.
func (c *ConfigletAssignment) HasKey() bool {
	return c.GetKey() != nil
}

// HasKey returns whether the given ConfigletAssignmentRequest has a key provided in the request.
func (c *ConfigletAssignmentRequest) HasKey() bool {
	return c.GetKey() != nil
}

// HasKey returns whether the given ConfigletAssignmentConfig has a key provided in the model.
func (c *ConfigletAssignmentConfig) HasKey() bool {
	return c.GetKey() != nil
}

// HasKey returns whether the given ConfigletAssignmentConfigRequest has a key provided in the request.
func (c *ConfigletAssignmentConfigRequest) HasKey() bool {
	return c.GetKey() != nil
}

// HasKey returns whether the given ConfigletAssignmentConfigSetRequest has a key provided in the request.
func (c *ConfigletAssignmentConfigSetRequest) HasKey() bool {
	return c.GetValue().HasKey()
}

// HasKey returns whether the given ConfigletAssignmentConfigDeleteRequest has a key provided in the request.
func (c *ConfigletAssignmentConfigDeleteRequest) HasKey() bool {
	return c.GetKey() != nil
}

// HasKey returns whether the given ConfigletConfig has a key provided in the model.
func (c *ConfigletConfig) HasKey() bool {
	return c.GetKey() != nil
}

// HasKey returns whether the given ConfigletConfigRequest has a key provided in the request.
func (c *ConfigletConfigRequest) HasKey() bool {
	return c.GetKey() != nil
}

// HasKey returns whether the given ConfigletConfigSetRequest has a key provided in the request.
func (c *ConfigletConfigSetRequest) HasKey() bool {
	return c.GetValue().HasKey()
}

// HasKey returns whether the given ConfigletConfigDeleteRequest has a key provided in the request.
func (c *ConfigletConfigDeleteRequest) HasKey() bool {
	return c.GetKey() != nil
}

// PassesPartialEqFilter returns whether this MatchPolicy matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (m MatchPolicy) PassesPartialEqFilter(cmp MatchPolicy) bool {
	if cmp != MatchPolicy(0) {
		return m == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether the Filter matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (f *Filter) PassesPartialEqFilter(cmp *Filter) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if f == nil {
		return false
	}

	if cmp.IncludeBody != nil {
		if f.IncludeBody == nil {
			return false
		}
		if f.IncludeBody.Value != cmp.IncludeBody.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the ConfigletAssignmentKey matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (c *ConfigletAssignmentKey) PassesPartialEqFilter(cmp *ConfigletAssignmentKey) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if c == nil {
		return false
	}

	if cmp.WorkspaceId != nil {
		if c.WorkspaceId == nil {
			return false
		}
		if c.WorkspaceId.Value != cmp.WorkspaceId.Value {
			return false
		}
	}

	if cmp.ConfigletAssignmentId != nil {
		if c.ConfigletAssignmentId == nil {
			return false
		}
		if c.ConfigletAssignmentId.Value != cmp.ConfigletAssignmentId.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the ConfigletKey matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (c *ConfigletKey) PassesPartialEqFilter(cmp *ConfigletKey) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if c == nil {
		return false
	}

	if cmp.WorkspaceId != nil {
		if c.WorkspaceId == nil {
			return false
		}
		if c.WorkspaceId.Value != cmp.WorkspaceId.Value {
			return false
		}
	}

	if cmp.ConfigletId != nil {
		if c.ConfigletId == nil {
			return false
		}
		if c.ConfigletId.Value != cmp.ConfigletId.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the Configlet matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (c *Configlet) PassesPartialEqFilter(cmp *Configlet) bool {
	// if the resource is nil, there is nothing to send to the client
	if c == nil {
		return false
	}

	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if !c.Key.PassesPartialEqFilter(cmp.Key) {
		return false
	}

	if cmp.DisplayName != nil {
		if c.DisplayName == nil {
			return false
		}
		if c.DisplayName.Value != cmp.DisplayName.Value {
			return false
		}
	}

	if cmp.Description != nil {
		if c.Description == nil {
			return false
		}
		if c.Description.Value != cmp.Description.Value {
			return false
		}
	}

	if cmp.MigratedFrom != nil {
		if c.MigratedFrom == nil {
			return false
		}
		if c.MigratedFrom.Value != cmp.MigratedFrom.Value {
			return false
		}
	}

	if cmp.Body != nil {
		if c.Body == nil {
			return false
		}
		if c.Body.Value != cmp.Body.Value {
			return false
		}
	}

	if cmp.CreatedAt != nil {
		if cmp.CreatedAt.Seconds != 0 {
			if c.CreatedAt.Seconds != cmp.CreatedAt.Seconds {
				return false
			}
		}
		if cmp.CreatedAt.Nanos != 0 {
			if c.CreatedAt.Nanos != cmp.CreatedAt.Nanos {
				return false
			}
		}
	}

	if cmp.CreatedBy != nil {
		if c.CreatedBy == nil {
			return false
		}
		if c.CreatedBy.Value != cmp.CreatedBy.Value {
			return false
		}
	}

	if cmp.LastModifiedAt != nil {
		if cmp.LastModifiedAt.Seconds != 0 {
			if c.LastModifiedAt.Seconds != cmp.LastModifiedAt.Seconds {
				return false
			}
		}
		if cmp.LastModifiedAt.Nanos != 0 {
			if c.LastModifiedAt.Nanos != cmp.LastModifiedAt.Nanos {
				return false
			}
		}
	}

	if cmp.LastModifiedBy != nil {
		if c.LastModifiedBy == nil {
			return false
		}
		if c.LastModifiedBy.Value != cmp.LastModifiedBy.Value {
			return false
		}
	}

	return true
}

// MatchesAnyPartialEqFilter returns whether the receiver matches any filters in the given set.
func (c *Configlet) MatchesAnyPartialEqFilter(filters []*Configlet) bool {
	if len(filters) == 0 {
		return true
	}

	for _, filt := range filters {
		if c.PassesPartialEqFilter(filt) {
			return true
		}
	}

	return false
}

// PassesPartialEqFilter returns whether the ConfigletAssignment matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (c *ConfigletAssignment) PassesPartialEqFilter(cmp *ConfigletAssignment) bool {
	// if the resource is nil, there is nothing to send to the client
	if c == nil {
		return false
	}

	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if !c.Key.PassesPartialEqFilter(cmp.Key) {
		return false
	}

	if cmp.DisplayName != nil {
		if c.DisplayName == nil {
			return false
		}
		if c.DisplayName.Value != cmp.DisplayName.Value {
			return false
		}
	}

	if cmp.Description != nil {
		if c.Description == nil {
			return false
		}
		if c.Description.Value != cmp.Description.Value {
			return false
		}
	}

	if !c.ConfigletIds.PassesPartialEqFilter(cmp.ConfigletIds) {
		return false
	}

	if cmp.Query != nil {
		if c.Query == nil {
			return false
		}
		if c.Query.Value != cmp.Query.Value {
			return false
		}
	}

	if !c.MatchPolicy.PassesPartialEqFilter(cmp.MatchPolicy) {
		return false
	}

	if !c.ChildAssignmentIds.PassesPartialEqFilter(cmp.ChildAssignmentIds) {
		return false
	}

	if cmp.CreatedAt != nil {
		if cmp.CreatedAt.Seconds != 0 {
			if c.CreatedAt.Seconds != cmp.CreatedAt.Seconds {
				return false
			}
		}
		if cmp.CreatedAt.Nanos != 0 {
			if c.CreatedAt.Nanos != cmp.CreatedAt.Nanos {
				return false
			}
		}
	}

	if cmp.CreatedBy != nil {
		if c.CreatedBy == nil {
			return false
		}
		if c.CreatedBy.Value != cmp.CreatedBy.Value {
			return false
		}
	}

	if cmp.LastModifiedAt != nil {
		if cmp.LastModifiedAt.Seconds != 0 {
			if c.LastModifiedAt.Seconds != cmp.LastModifiedAt.Seconds {
				return false
			}
		}
		if cmp.LastModifiedAt.Nanos != 0 {
			if c.LastModifiedAt.Nanos != cmp.LastModifiedAt.Nanos {
				return false
			}
		}
	}

	if cmp.LastModifiedBy != nil {
		if c.LastModifiedBy == nil {
			return false
		}
		if c.LastModifiedBy.Value != cmp.LastModifiedBy.Value {
			return false
		}
	}

	return true
}

// MatchesAnyPartialEqFilter returns whether the receiver matches any filters in the given set.
func (c *ConfigletAssignment) MatchesAnyPartialEqFilter(filters []*ConfigletAssignment) bool {
	if len(filters) == 0 {
		return true
	}

	for _, filt := range filters {
		if c.PassesPartialEqFilter(filt) {
			return true
		}
	}

	return false
}

// PassesPartialEqFilter returns whether the ConfigletAssignmentConfig matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (c *ConfigletAssignmentConfig) PassesPartialEqFilter(cmp *ConfigletAssignmentConfig) bool {
	// if the resource is nil, there is nothing to send to the client
	if c == nil {
		return false
	}

	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if !c.Key.PassesPartialEqFilter(cmp.Key) {
		return false
	}

	if cmp.DisplayName != nil {
		if c.DisplayName == nil {
			return false
		}
		if c.DisplayName.Value != cmp.DisplayName.Value {
			return false
		}
	}

	if cmp.Description != nil {
		if c.Description == nil {
			return false
		}
		if c.Description.Value != cmp.Description.Value {
			return false
		}
	}

	if !c.ConfigletIds.PassesPartialEqFilter(cmp.ConfigletIds) {
		return false
	}

	if cmp.Query != nil {
		if c.Query == nil {
			return false
		}
		if c.Query.Value != cmp.Query.Value {
			return false
		}
	}

	if cmp.Remove != nil {
		if c.Remove == nil {
			return false
		}
		if c.Remove.Value != cmp.Remove.Value {
			return false
		}
	}

	if !c.MatchPolicy.PassesPartialEqFilter(cmp.MatchPolicy) {
		return false
	}

	if !c.ChildAssignmentIds.PassesPartialEqFilter(cmp.ChildAssignmentIds) {
		return false
	}

	return true
}

// MatchesAnyPartialEqFilter returns whether the receiver matches any filters in the given set.
func (c *ConfigletAssignmentConfig) MatchesAnyPartialEqFilter(filters []*ConfigletAssignmentConfig) bool {
	if len(filters) == 0 {
		return true
	}

	for _, filt := range filters {
		if c.PassesPartialEqFilter(filt) {
			return true
		}
	}

	return false
}

// PassesPartialEqFilter returns whether the ConfigletConfig matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (c *ConfigletConfig) PassesPartialEqFilter(cmp *ConfigletConfig) bool {
	// if the resource is nil, there is nothing to send to the client
	if c == nil {
		return false
	}

	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if !c.Key.PassesPartialEqFilter(cmp.Key) {
		return false
	}

	if cmp.Remove != nil {
		if c.Remove == nil {
			return false
		}
		if c.Remove.Value != cmp.Remove.Value {
			return false
		}
	}

	if cmp.DisplayName != nil {
		if c.DisplayName == nil {
			return false
		}
		if c.DisplayName.Value != cmp.DisplayName.Value {
			return false
		}
	}

	if cmp.Description != nil {
		if c.Description == nil {
			return false
		}
		if c.Description.Value != cmp.Description.Value {
			return false
		}
	}

	if cmp.MigratedFrom != nil {
		if c.MigratedFrom == nil {
			return false
		}
		if c.MigratedFrom.Value != cmp.MigratedFrom.Value {
			return false
		}
	}

	if cmp.Body != nil {
		if c.Body == nil {
			return false
		}
		if c.Body.Value != cmp.Body.Value {
			return false
		}
	}

	return true
}

// MatchesAnyPartialEqFilter returns whether the receiver matches any filters in the given set.
func (c *ConfigletConfig) MatchesAnyPartialEqFilter(filters []*ConfigletConfig) bool {
	if len(filters) == 0 {
		return true
	}

	for _, filt := range filters {
		if c.PassesPartialEqFilter(filt) {
			return true
		}
	}

	return false
}
