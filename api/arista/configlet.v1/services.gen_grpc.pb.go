// Copyright (c) 2023 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

//
// Code generated by boomtown. DO NOT EDIT.
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: arista/configlet.v1/services.gen.proto

package configlet

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ConfigletService_GetOne_FullMethodName        = "/arista.configlet.v1.ConfigletService/GetOne"
	ConfigletService_GetSome_FullMethodName       = "/arista.configlet.v1.ConfigletService/GetSome"
	ConfigletService_GetAll_FullMethodName        = "/arista.configlet.v1.ConfigletService/GetAll"
	ConfigletService_Subscribe_FullMethodName     = "/arista.configlet.v1.ConfigletService/Subscribe"
	ConfigletService_GetMeta_FullMethodName       = "/arista.configlet.v1.ConfigletService/GetMeta"
	ConfigletService_SubscribeMeta_FullMethodName = "/arista.configlet.v1.ConfigletService/SubscribeMeta"
)

// ConfigletServiceClient is the client API for ConfigletService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigletServiceClient interface {
	GetOne(ctx context.Context, in *ConfigletRequest, opts ...grpc.CallOption) (*ConfigletResponse, error)
	GetSome(ctx context.Context, in *ConfigletSomeRequest, opts ...grpc.CallOption) (ConfigletService_GetSomeClient, error)
	GetAll(ctx context.Context, in *ConfigletStreamRequest, opts ...grpc.CallOption) (ConfigletService_GetAllClient, error)
	Subscribe(ctx context.Context, in *ConfigletStreamRequest, opts ...grpc.CallOption) (ConfigletService_SubscribeClient, error)
	GetMeta(ctx context.Context, in *ConfigletStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error)
	SubscribeMeta(ctx context.Context, in *ConfigletStreamRequest, opts ...grpc.CallOption) (ConfigletService_SubscribeMetaClient, error)
}

type configletServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigletServiceClient(cc grpc.ClientConnInterface) ConfigletServiceClient {
	return &configletServiceClient{cc}
}

func (c *configletServiceClient) GetOne(ctx context.Context, in *ConfigletRequest, opts ...grpc.CallOption) (*ConfigletResponse, error) {
	out := new(ConfigletResponse)
	err := c.cc.Invoke(ctx, ConfigletService_GetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configletServiceClient) GetSome(ctx context.Context, in *ConfigletSomeRequest, opts ...grpc.CallOption) (ConfigletService_GetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConfigletService_ServiceDesc.Streams[0], ConfigletService_GetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &configletServiceGetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigletService_GetSomeClient interface {
	Recv() (*ConfigletSomeResponse, error)
	grpc.ClientStream
}

type configletServiceGetSomeClient struct {
	grpc.ClientStream
}

func (x *configletServiceGetSomeClient) Recv() (*ConfigletSomeResponse, error) {
	m := new(ConfigletSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *configletServiceClient) GetAll(ctx context.Context, in *ConfigletStreamRequest, opts ...grpc.CallOption) (ConfigletService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConfigletService_ServiceDesc.Streams[1], ConfigletService_GetAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &configletServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigletService_GetAllClient interface {
	Recv() (*ConfigletStreamResponse, error)
	grpc.ClientStream
}

type configletServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *configletServiceGetAllClient) Recv() (*ConfigletStreamResponse, error) {
	m := new(ConfigletStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *configletServiceClient) Subscribe(ctx context.Context, in *ConfigletStreamRequest, opts ...grpc.CallOption) (ConfigletService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConfigletService_ServiceDesc.Streams[2], ConfigletService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &configletServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigletService_SubscribeClient interface {
	Recv() (*ConfigletStreamResponse, error)
	grpc.ClientStream
}

type configletServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *configletServiceSubscribeClient) Recv() (*ConfigletStreamResponse, error) {
	m := new(ConfigletStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *configletServiceClient) GetMeta(ctx context.Context, in *ConfigletStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error) {
	out := new(MetaResponse)
	err := c.cc.Invoke(ctx, ConfigletService_GetMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configletServiceClient) SubscribeMeta(ctx context.Context, in *ConfigletStreamRequest, opts ...grpc.CallOption) (ConfigletService_SubscribeMetaClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConfigletService_ServiceDesc.Streams[3], ConfigletService_SubscribeMeta_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &configletServiceSubscribeMetaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigletService_SubscribeMetaClient interface {
	Recv() (*MetaResponse, error)
	grpc.ClientStream
}

type configletServiceSubscribeMetaClient struct {
	grpc.ClientStream
}

func (x *configletServiceSubscribeMetaClient) Recv() (*MetaResponse, error) {
	m := new(MetaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConfigletServiceServer is the server API for ConfigletService service.
// All implementations must embed UnimplementedConfigletServiceServer
// for forward compatibility
type ConfigletServiceServer interface {
	GetOne(context.Context, *ConfigletRequest) (*ConfigletResponse, error)
	GetSome(*ConfigletSomeRequest, ConfigletService_GetSomeServer) error
	GetAll(*ConfigletStreamRequest, ConfigletService_GetAllServer) error
	Subscribe(*ConfigletStreamRequest, ConfigletService_SubscribeServer) error
	GetMeta(context.Context, *ConfigletStreamRequest) (*MetaResponse, error)
	SubscribeMeta(*ConfigletStreamRequest, ConfigletService_SubscribeMetaServer) error
	mustEmbedUnimplementedConfigletServiceServer()
}

// UnimplementedConfigletServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConfigletServiceServer struct {
}

func (UnimplementedConfigletServiceServer) GetOne(context.Context, *ConfigletRequest) (*ConfigletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedConfigletServiceServer) GetSome(*ConfigletSomeRequest, ConfigletService_GetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSome not implemented")
}
func (UnimplementedConfigletServiceServer) GetAll(*ConfigletStreamRequest, ConfigletService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedConfigletServiceServer) Subscribe(*ConfigletStreamRequest, ConfigletService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedConfigletServiceServer) GetMeta(context.Context, *ConfigletStreamRequest) (*MetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeta not implemented")
}
func (UnimplementedConfigletServiceServer) SubscribeMeta(*ConfigletStreamRequest, ConfigletService_SubscribeMetaServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMeta not implemented")
}
func (UnimplementedConfigletServiceServer) mustEmbedUnimplementedConfigletServiceServer() {}

// UnsafeConfigletServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigletServiceServer will
// result in compilation errors.
type UnsafeConfigletServiceServer interface {
	mustEmbedUnimplementedConfigletServiceServer()
}

func RegisterConfigletServiceServer(s grpc.ServiceRegistrar, srv ConfigletServiceServer) {
	s.RegisterService(&ConfigletService_ServiceDesc, srv)
}

func _ConfigletService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigletServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigletService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigletServiceServer).GetOne(ctx, req.(*ConfigletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigletService_GetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConfigletSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigletServiceServer).GetSome(m, &configletServiceGetSomeServer{stream})
}

type ConfigletService_GetSomeServer interface {
	Send(*ConfigletSomeResponse) error
	grpc.ServerStream
}

type configletServiceGetSomeServer struct {
	grpc.ServerStream
}

func (x *configletServiceGetSomeServer) Send(m *ConfigletSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ConfigletService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConfigletStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigletServiceServer).GetAll(m, &configletServiceGetAllServer{stream})
}

type ConfigletService_GetAllServer interface {
	Send(*ConfigletStreamResponse) error
	grpc.ServerStream
}

type configletServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *configletServiceGetAllServer) Send(m *ConfigletStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ConfigletService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConfigletStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigletServiceServer).Subscribe(m, &configletServiceSubscribeServer{stream})
}

type ConfigletService_SubscribeServer interface {
	Send(*ConfigletStreamResponse) error
	grpc.ServerStream
}

type configletServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *configletServiceSubscribeServer) Send(m *ConfigletStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ConfigletService_GetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigletStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigletServiceServer).GetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigletService_GetMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigletServiceServer).GetMeta(ctx, req.(*ConfigletStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigletService_SubscribeMeta_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConfigletStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigletServiceServer).SubscribeMeta(m, &configletServiceSubscribeMetaServer{stream})
}

type ConfigletService_SubscribeMetaServer interface {
	Send(*MetaResponse) error
	grpc.ServerStream
}

type configletServiceSubscribeMetaServer struct {
	grpc.ServerStream
}

func (x *configletServiceSubscribeMetaServer) Send(m *MetaResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ConfigletService_ServiceDesc is the grpc.ServiceDesc for ConfigletService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigletService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.configlet.v1.ConfigletService",
	HandlerType: (*ConfigletServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _ConfigletService_GetOne_Handler,
		},
		{
			MethodName: "GetMeta",
			Handler:    _ConfigletService_GetMeta_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSome",
			Handler:       _ConfigletService_GetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAll",
			Handler:       _ConfigletService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _ConfigletService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeMeta",
			Handler:       _ConfigletService_SubscribeMeta_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/configlet.v1/services.gen.proto",
}

const (
	ConfigletAssignmentService_GetOne_FullMethodName        = "/arista.configlet.v1.ConfigletAssignmentService/GetOne"
	ConfigletAssignmentService_GetSome_FullMethodName       = "/arista.configlet.v1.ConfigletAssignmentService/GetSome"
	ConfigletAssignmentService_GetAll_FullMethodName        = "/arista.configlet.v1.ConfigletAssignmentService/GetAll"
	ConfigletAssignmentService_Subscribe_FullMethodName     = "/arista.configlet.v1.ConfigletAssignmentService/Subscribe"
	ConfigletAssignmentService_GetMeta_FullMethodName       = "/arista.configlet.v1.ConfigletAssignmentService/GetMeta"
	ConfigletAssignmentService_SubscribeMeta_FullMethodName = "/arista.configlet.v1.ConfigletAssignmentService/SubscribeMeta"
)

// ConfigletAssignmentServiceClient is the client API for ConfigletAssignmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigletAssignmentServiceClient interface {
	GetOne(ctx context.Context, in *ConfigletAssignmentRequest, opts ...grpc.CallOption) (*ConfigletAssignmentResponse, error)
	GetSome(ctx context.Context, in *ConfigletAssignmentSomeRequest, opts ...grpc.CallOption) (ConfigletAssignmentService_GetSomeClient, error)
	GetAll(ctx context.Context, in *ConfigletAssignmentStreamRequest, opts ...grpc.CallOption) (ConfigletAssignmentService_GetAllClient, error)
	Subscribe(ctx context.Context, in *ConfigletAssignmentStreamRequest, opts ...grpc.CallOption) (ConfigletAssignmentService_SubscribeClient, error)
	GetMeta(ctx context.Context, in *ConfigletAssignmentStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error)
	SubscribeMeta(ctx context.Context, in *ConfigletAssignmentStreamRequest, opts ...grpc.CallOption) (ConfigletAssignmentService_SubscribeMetaClient, error)
}

type configletAssignmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigletAssignmentServiceClient(cc grpc.ClientConnInterface) ConfigletAssignmentServiceClient {
	return &configletAssignmentServiceClient{cc}
}

func (c *configletAssignmentServiceClient) GetOne(ctx context.Context, in *ConfigletAssignmentRequest, opts ...grpc.CallOption) (*ConfigletAssignmentResponse, error) {
	out := new(ConfigletAssignmentResponse)
	err := c.cc.Invoke(ctx, ConfigletAssignmentService_GetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configletAssignmentServiceClient) GetSome(ctx context.Context, in *ConfigletAssignmentSomeRequest, opts ...grpc.CallOption) (ConfigletAssignmentService_GetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConfigletAssignmentService_ServiceDesc.Streams[0], ConfigletAssignmentService_GetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &configletAssignmentServiceGetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigletAssignmentService_GetSomeClient interface {
	Recv() (*ConfigletAssignmentSomeResponse, error)
	grpc.ClientStream
}

type configletAssignmentServiceGetSomeClient struct {
	grpc.ClientStream
}

func (x *configletAssignmentServiceGetSomeClient) Recv() (*ConfigletAssignmentSomeResponse, error) {
	m := new(ConfigletAssignmentSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *configletAssignmentServiceClient) GetAll(ctx context.Context, in *ConfigletAssignmentStreamRequest, opts ...grpc.CallOption) (ConfigletAssignmentService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConfigletAssignmentService_ServiceDesc.Streams[1], ConfigletAssignmentService_GetAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &configletAssignmentServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigletAssignmentService_GetAllClient interface {
	Recv() (*ConfigletAssignmentStreamResponse, error)
	grpc.ClientStream
}

type configletAssignmentServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *configletAssignmentServiceGetAllClient) Recv() (*ConfigletAssignmentStreamResponse, error) {
	m := new(ConfigletAssignmentStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *configletAssignmentServiceClient) Subscribe(ctx context.Context, in *ConfigletAssignmentStreamRequest, opts ...grpc.CallOption) (ConfigletAssignmentService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConfigletAssignmentService_ServiceDesc.Streams[2], ConfigletAssignmentService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &configletAssignmentServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigletAssignmentService_SubscribeClient interface {
	Recv() (*ConfigletAssignmentStreamResponse, error)
	grpc.ClientStream
}

type configletAssignmentServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *configletAssignmentServiceSubscribeClient) Recv() (*ConfigletAssignmentStreamResponse, error) {
	m := new(ConfigletAssignmentStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *configletAssignmentServiceClient) GetMeta(ctx context.Context, in *ConfigletAssignmentStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error) {
	out := new(MetaResponse)
	err := c.cc.Invoke(ctx, ConfigletAssignmentService_GetMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configletAssignmentServiceClient) SubscribeMeta(ctx context.Context, in *ConfigletAssignmentStreamRequest, opts ...grpc.CallOption) (ConfigletAssignmentService_SubscribeMetaClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConfigletAssignmentService_ServiceDesc.Streams[3], ConfigletAssignmentService_SubscribeMeta_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &configletAssignmentServiceSubscribeMetaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigletAssignmentService_SubscribeMetaClient interface {
	Recv() (*MetaResponse, error)
	grpc.ClientStream
}

type configletAssignmentServiceSubscribeMetaClient struct {
	grpc.ClientStream
}

func (x *configletAssignmentServiceSubscribeMetaClient) Recv() (*MetaResponse, error) {
	m := new(MetaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConfigletAssignmentServiceServer is the server API for ConfigletAssignmentService service.
// All implementations must embed UnimplementedConfigletAssignmentServiceServer
// for forward compatibility
type ConfigletAssignmentServiceServer interface {
	GetOne(context.Context, *ConfigletAssignmentRequest) (*ConfigletAssignmentResponse, error)
	GetSome(*ConfigletAssignmentSomeRequest, ConfigletAssignmentService_GetSomeServer) error
	GetAll(*ConfigletAssignmentStreamRequest, ConfigletAssignmentService_GetAllServer) error
	Subscribe(*ConfigletAssignmentStreamRequest, ConfigletAssignmentService_SubscribeServer) error
	GetMeta(context.Context, *ConfigletAssignmentStreamRequest) (*MetaResponse, error)
	SubscribeMeta(*ConfigletAssignmentStreamRequest, ConfigletAssignmentService_SubscribeMetaServer) error
	mustEmbedUnimplementedConfigletAssignmentServiceServer()
}

// UnimplementedConfigletAssignmentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConfigletAssignmentServiceServer struct {
}

func (UnimplementedConfigletAssignmentServiceServer) GetOne(context.Context, *ConfigletAssignmentRequest) (*ConfigletAssignmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedConfigletAssignmentServiceServer) GetSome(*ConfigletAssignmentSomeRequest, ConfigletAssignmentService_GetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSome not implemented")
}
func (UnimplementedConfigletAssignmentServiceServer) GetAll(*ConfigletAssignmentStreamRequest, ConfigletAssignmentService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedConfigletAssignmentServiceServer) Subscribe(*ConfigletAssignmentStreamRequest, ConfigletAssignmentService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedConfigletAssignmentServiceServer) GetMeta(context.Context, *ConfigletAssignmentStreamRequest) (*MetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeta not implemented")
}
func (UnimplementedConfigletAssignmentServiceServer) SubscribeMeta(*ConfigletAssignmentStreamRequest, ConfigletAssignmentService_SubscribeMetaServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMeta not implemented")
}
func (UnimplementedConfigletAssignmentServiceServer) mustEmbedUnimplementedConfigletAssignmentServiceServer() {
}

// UnsafeConfigletAssignmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigletAssignmentServiceServer will
// result in compilation errors.
type UnsafeConfigletAssignmentServiceServer interface {
	mustEmbedUnimplementedConfigletAssignmentServiceServer()
}

func RegisterConfigletAssignmentServiceServer(s grpc.ServiceRegistrar, srv ConfigletAssignmentServiceServer) {
	s.RegisterService(&ConfigletAssignmentService_ServiceDesc, srv)
}

func _ConfigletAssignmentService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigletAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigletAssignmentServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigletAssignmentService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigletAssignmentServiceServer).GetOne(ctx, req.(*ConfigletAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigletAssignmentService_GetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConfigletAssignmentSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigletAssignmentServiceServer).GetSome(m, &configletAssignmentServiceGetSomeServer{stream})
}

type ConfigletAssignmentService_GetSomeServer interface {
	Send(*ConfigletAssignmentSomeResponse) error
	grpc.ServerStream
}

type configletAssignmentServiceGetSomeServer struct {
	grpc.ServerStream
}

func (x *configletAssignmentServiceGetSomeServer) Send(m *ConfigletAssignmentSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ConfigletAssignmentService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConfigletAssignmentStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigletAssignmentServiceServer).GetAll(m, &configletAssignmentServiceGetAllServer{stream})
}

type ConfigletAssignmentService_GetAllServer interface {
	Send(*ConfigletAssignmentStreamResponse) error
	grpc.ServerStream
}

type configletAssignmentServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *configletAssignmentServiceGetAllServer) Send(m *ConfigletAssignmentStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ConfigletAssignmentService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConfigletAssignmentStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigletAssignmentServiceServer).Subscribe(m, &configletAssignmentServiceSubscribeServer{stream})
}

type ConfigletAssignmentService_SubscribeServer interface {
	Send(*ConfigletAssignmentStreamResponse) error
	grpc.ServerStream
}

type configletAssignmentServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *configletAssignmentServiceSubscribeServer) Send(m *ConfigletAssignmentStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ConfigletAssignmentService_GetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigletAssignmentStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigletAssignmentServiceServer).GetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigletAssignmentService_GetMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigletAssignmentServiceServer).GetMeta(ctx, req.(*ConfigletAssignmentStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigletAssignmentService_SubscribeMeta_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConfigletAssignmentStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigletAssignmentServiceServer).SubscribeMeta(m, &configletAssignmentServiceSubscribeMetaServer{stream})
}

type ConfigletAssignmentService_SubscribeMetaServer interface {
	Send(*MetaResponse) error
	grpc.ServerStream
}

type configletAssignmentServiceSubscribeMetaServer struct {
	grpc.ServerStream
}

func (x *configletAssignmentServiceSubscribeMetaServer) Send(m *MetaResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ConfigletAssignmentService_ServiceDesc is the grpc.ServiceDesc for ConfigletAssignmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigletAssignmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.configlet.v1.ConfigletAssignmentService",
	HandlerType: (*ConfigletAssignmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _ConfigletAssignmentService_GetOne_Handler,
		},
		{
			MethodName: "GetMeta",
			Handler:    _ConfigletAssignmentService_GetMeta_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSome",
			Handler:       _ConfigletAssignmentService_GetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAll",
			Handler:       _ConfigletAssignmentService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _ConfigletAssignmentService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeMeta",
			Handler:       _ConfigletAssignmentService_SubscribeMeta_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/configlet.v1/services.gen.proto",
}

const (
	ConfigletAssignmentConfigService_GetOne_FullMethodName        = "/arista.configlet.v1.ConfigletAssignmentConfigService/GetOne"
	ConfigletAssignmentConfigService_GetSome_FullMethodName       = "/arista.configlet.v1.ConfigletAssignmentConfigService/GetSome"
	ConfigletAssignmentConfigService_GetAll_FullMethodName        = "/arista.configlet.v1.ConfigletAssignmentConfigService/GetAll"
	ConfigletAssignmentConfigService_Subscribe_FullMethodName     = "/arista.configlet.v1.ConfigletAssignmentConfigService/Subscribe"
	ConfigletAssignmentConfigService_GetMeta_FullMethodName       = "/arista.configlet.v1.ConfigletAssignmentConfigService/GetMeta"
	ConfigletAssignmentConfigService_SubscribeMeta_FullMethodName = "/arista.configlet.v1.ConfigletAssignmentConfigService/SubscribeMeta"
	ConfigletAssignmentConfigService_Set_FullMethodName           = "/arista.configlet.v1.ConfigletAssignmentConfigService/Set"
	ConfigletAssignmentConfigService_SetSome_FullMethodName       = "/arista.configlet.v1.ConfigletAssignmentConfigService/SetSome"
	ConfigletAssignmentConfigService_Delete_FullMethodName        = "/arista.configlet.v1.ConfigletAssignmentConfigService/Delete"
	ConfigletAssignmentConfigService_DeleteSome_FullMethodName    = "/arista.configlet.v1.ConfigletAssignmentConfigService/DeleteSome"
	ConfigletAssignmentConfigService_DeleteAll_FullMethodName     = "/arista.configlet.v1.ConfigletAssignmentConfigService/DeleteAll"
)

// ConfigletAssignmentConfigServiceClient is the client API for ConfigletAssignmentConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigletAssignmentConfigServiceClient interface {
	GetOne(ctx context.Context, in *ConfigletAssignmentConfigRequest, opts ...grpc.CallOption) (*ConfigletAssignmentConfigResponse, error)
	GetSome(ctx context.Context, in *ConfigletAssignmentConfigSomeRequest, opts ...grpc.CallOption) (ConfigletAssignmentConfigService_GetSomeClient, error)
	GetAll(ctx context.Context, in *ConfigletAssignmentConfigStreamRequest, opts ...grpc.CallOption) (ConfigletAssignmentConfigService_GetAllClient, error)
	Subscribe(ctx context.Context, in *ConfigletAssignmentConfigStreamRequest, opts ...grpc.CallOption) (ConfigletAssignmentConfigService_SubscribeClient, error)
	GetMeta(ctx context.Context, in *ConfigletAssignmentConfigStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error)
	SubscribeMeta(ctx context.Context, in *ConfigletAssignmentConfigStreamRequest, opts ...grpc.CallOption) (ConfigletAssignmentConfigService_SubscribeMetaClient, error)
	Set(ctx context.Context, in *ConfigletAssignmentConfigSetRequest, opts ...grpc.CallOption) (*ConfigletAssignmentConfigSetResponse, error)
	SetSome(ctx context.Context, in *ConfigletAssignmentConfigSetSomeRequest, opts ...grpc.CallOption) (ConfigletAssignmentConfigService_SetSomeClient, error)
	Delete(ctx context.Context, in *ConfigletAssignmentConfigDeleteRequest, opts ...grpc.CallOption) (*ConfigletAssignmentConfigDeleteResponse, error)
	DeleteSome(ctx context.Context, in *ConfigletAssignmentConfigDeleteSomeRequest, opts ...grpc.CallOption) (ConfigletAssignmentConfigService_DeleteSomeClient, error)
	DeleteAll(ctx context.Context, in *ConfigletAssignmentConfigDeleteAllRequest, opts ...grpc.CallOption) (ConfigletAssignmentConfigService_DeleteAllClient, error)
}

type configletAssignmentConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigletAssignmentConfigServiceClient(cc grpc.ClientConnInterface) ConfigletAssignmentConfigServiceClient {
	return &configletAssignmentConfigServiceClient{cc}
}

func (c *configletAssignmentConfigServiceClient) GetOne(ctx context.Context, in *ConfigletAssignmentConfigRequest, opts ...grpc.CallOption) (*ConfigletAssignmentConfigResponse, error) {
	out := new(ConfigletAssignmentConfigResponse)
	err := c.cc.Invoke(ctx, ConfigletAssignmentConfigService_GetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configletAssignmentConfigServiceClient) GetSome(ctx context.Context, in *ConfigletAssignmentConfigSomeRequest, opts ...grpc.CallOption) (ConfigletAssignmentConfigService_GetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConfigletAssignmentConfigService_ServiceDesc.Streams[0], ConfigletAssignmentConfigService_GetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &configletAssignmentConfigServiceGetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigletAssignmentConfigService_GetSomeClient interface {
	Recv() (*ConfigletAssignmentConfigSomeResponse, error)
	grpc.ClientStream
}

type configletAssignmentConfigServiceGetSomeClient struct {
	grpc.ClientStream
}

func (x *configletAssignmentConfigServiceGetSomeClient) Recv() (*ConfigletAssignmentConfigSomeResponse, error) {
	m := new(ConfigletAssignmentConfigSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *configletAssignmentConfigServiceClient) GetAll(ctx context.Context, in *ConfigletAssignmentConfigStreamRequest, opts ...grpc.CallOption) (ConfigletAssignmentConfigService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConfigletAssignmentConfigService_ServiceDesc.Streams[1], ConfigletAssignmentConfigService_GetAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &configletAssignmentConfigServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigletAssignmentConfigService_GetAllClient interface {
	Recv() (*ConfigletAssignmentConfigStreamResponse, error)
	grpc.ClientStream
}

type configletAssignmentConfigServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *configletAssignmentConfigServiceGetAllClient) Recv() (*ConfigletAssignmentConfigStreamResponse, error) {
	m := new(ConfigletAssignmentConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *configletAssignmentConfigServiceClient) Subscribe(ctx context.Context, in *ConfigletAssignmentConfigStreamRequest, opts ...grpc.CallOption) (ConfigletAssignmentConfigService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConfigletAssignmentConfigService_ServiceDesc.Streams[2], ConfigletAssignmentConfigService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &configletAssignmentConfigServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigletAssignmentConfigService_SubscribeClient interface {
	Recv() (*ConfigletAssignmentConfigStreamResponse, error)
	grpc.ClientStream
}

type configletAssignmentConfigServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *configletAssignmentConfigServiceSubscribeClient) Recv() (*ConfigletAssignmentConfigStreamResponse, error) {
	m := new(ConfigletAssignmentConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *configletAssignmentConfigServiceClient) GetMeta(ctx context.Context, in *ConfigletAssignmentConfigStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error) {
	out := new(MetaResponse)
	err := c.cc.Invoke(ctx, ConfigletAssignmentConfigService_GetMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configletAssignmentConfigServiceClient) SubscribeMeta(ctx context.Context, in *ConfigletAssignmentConfigStreamRequest, opts ...grpc.CallOption) (ConfigletAssignmentConfigService_SubscribeMetaClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConfigletAssignmentConfigService_ServiceDesc.Streams[3], ConfigletAssignmentConfigService_SubscribeMeta_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &configletAssignmentConfigServiceSubscribeMetaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigletAssignmentConfigService_SubscribeMetaClient interface {
	Recv() (*MetaResponse, error)
	grpc.ClientStream
}

type configletAssignmentConfigServiceSubscribeMetaClient struct {
	grpc.ClientStream
}

func (x *configletAssignmentConfigServiceSubscribeMetaClient) Recv() (*MetaResponse, error) {
	m := new(MetaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *configletAssignmentConfigServiceClient) Set(ctx context.Context, in *ConfigletAssignmentConfigSetRequest, opts ...grpc.CallOption) (*ConfigletAssignmentConfigSetResponse, error) {
	out := new(ConfigletAssignmentConfigSetResponse)
	err := c.cc.Invoke(ctx, ConfigletAssignmentConfigService_Set_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configletAssignmentConfigServiceClient) SetSome(ctx context.Context, in *ConfigletAssignmentConfigSetSomeRequest, opts ...grpc.CallOption) (ConfigletAssignmentConfigService_SetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConfigletAssignmentConfigService_ServiceDesc.Streams[4], ConfigletAssignmentConfigService_SetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &configletAssignmentConfigServiceSetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigletAssignmentConfigService_SetSomeClient interface {
	Recv() (*ConfigletAssignmentConfigSetSomeResponse, error)
	grpc.ClientStream
}

type configletAssignmentConfigServiceSetSomeClient struct {
	grpc.ClientStream
}

func (x *configletAssignmentConfigServiceSetSomeClient) Recv() (*ConfigletAssignmentConfigSetSomeResponse, error) {
	m := new(ConfigletAssignmentConfigSetSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *configletAssignmentConfigServiceClient) Delete(ctx context.Context, in *ConfigletAssignmentConfigDeleteRequest, opts ...grpc.CallOption) (*ConfigletAssignmentConfigDeleteResponse, error) {
	out := new(ConfigletAssignmentConfigDeleteResponse)
	err := c.cc.Invoke(ctx, ConfigletAssignmentConfigService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configletAssignmentConfigServiceClient) DeleteSome(ctx context.Context, in *ConfigletAssignmentConfigDeleteSomeRequest, opts ...grpc.CallOption) (ConfigletAssignmentConfigService_DeleteSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConfigletAssignmentConfigService_ServiceDesc.Streams[5], ConfigletAssignmentConfigService_DeleteSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &configletAssignmentConfigServiceDeleteSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigletAssignmentConfigService_DeleteSomeClient interface {
	Recv() (*ConfigletAssignmentConfigDeleteSomeResponse, error)
	grpc.ClientStream
}

type configletAssignmentConfigServiceDeleteSomeClient struct {
	grpc.ClientStream
}

func (x *configletAssignmentConfigServiceDeleteSomeClient) Recv() (*ConfigletAssignmentConfigDeleteSomeResponse, error) {
	m := new(ConfigletAssignmentConfigDeleteSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *configletAssignmentConfigServiceClient) DeleteAll(ctx context.Context, in *ConfigletAssignmentConfigDeleteAllRequest, opts ...grpc.CallOption) (ConfigletAssignmentConfigService_DeleteAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConfigletAssignmentConfigService_ServiceDesc.Streams[6], ConfigletAssignmentConfigService_DeleteAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &configletAssignmentConfigServiceDeleteAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigletAssignmentConfigService_DeleteAllClient interface {
	Recv() (*ConfigletAssignmentConfigDeleteAllResponse, error)
	grpc.ClientStream
}

type configletAssignmentConfigServiceDeleteAllClient struct {
	grpc.ClientStream
}

func (x *configletAssignmentConfigServiceDeleteAllClient) Recv() (*ConfigletAssignmentConfigDeleteAllResponse, error) {
	m := new(ConfigletAssignmentConfigDeleteAllResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConfigletAssignmentConfigServiceServer is the server API for ConfigletAssignmentConfigService service.
// All implementations must embed UnimplementedConfigletAssignmentConfigServiceServer
// for forward compatibility
type ConfigletAssignmentConfigServiceServer interface {
	GetOne(context.Context, *ConfigletAssignmentConfigRequest) (*ConfigletAssignmentConfigResponse, error)
	GetSome(*ConfigletAssignmentConfigSomeRequest, ConfigletAssignmentConfigService_GetSomeServer) error
	GetAll(*ConfigletAssignmentConfigStreamRequest, ConfigletAssignmentConfigService_GetAllServer) error
	Subscribe(*ConfigletAssignmentConfigStreamRequest, ConfigletAssignmentConfigService_SubscribeServer) error
	GetMeta(context.Context, *ConfigletAssignmentConfigStreamRequest) (*MetaResponse, error)
	SubscribeMeta(*ConfigletAssignmentConfigStreamRequest, ConfigletAssignmentConfigService_SubscribeMetaServer) error
	Set(context.Context, *ConfigletAssignmentConfigSetRequest) (*ConfigletAssignmentConfigSetResponse, error)
	SetSome(*ConfigletAssignmentConfigSetSomeRequest, ConfigletAssignmentConfigService_SetSomeServer) error
	Delete(context.Context, *ConfigletAssignmentConfigDeleteRequest) (*ConfigletAssignmentConfigDeleteResponse, error)
	DeleteSome(*ConfigletAssignmentConfigDeleteSomeRequest, ConfigletAssignmentConfigService_DeleteSomeServer) error
	DeleteAll(*ConfigletAssignmentConfigDeleteAllRequest, ConfigletAssignmentConfigService_DeleteAllServer) error
	mustEmbedUnimplementedConfigletAssignmentConfigServiceServer()
}

// UnimplementedConfigletAssignmentConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConfigletAssignmentConfigServiceServer struct {
}

func (UnimplementedConfigletAssignmentConfigServiceServer) GetOne(context.Context, *ConfigletAssignmentConfigRequest) (*ConfigletAssignmentConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedConfigletAssignmentConfigServiceServer) GetSome(*ConfigletAssignmentConfigSomeRequest, ConfigletAssignmentConfigService_GetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSome not implemented")
}
func (UnimplementedConfigletAssignmentConfigServiceServer) GetAll(*ConfigletAssignmentConfigStreamRequest, ConfigletAssignmentConfigService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedConfigletAssignmentConfigServiceServer) Subscribe(*ConfigletAssignmentConfigStreamRequest, ConfigletAssignmentConfigService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedConfigletAssignmentConfigServiceServer) GetMeta(context.Context, *ConfigletAssignmentConfigStreamRequest) (*MetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeta not implemented")
}
func (UnimplementedConfigletAssignmentConfigServiceServer) SubscribeMeta(*ConfigletAssignmentConfigStreamRequest, ConfigletAssignmentConfigService_SubscribeMetaServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMeta not implemented")
}
func (UnimplementedConfigletAssignmentConfigServiceServer) Set(context.Context, *ConfigletAssignmentConfigSetRequest) (*ConfigletAssignmentConfigSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedConfigletAssignmentConfigServiceServer) SetSome(*ConfigletAssignmentConfigSetSomeRequest, ConfigletAssignmentConfigService_SetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method SetSome not implemented")
}
func (UnimplementedConfigletAssignmentConfigServiceServer) Delete(context.Context, *ConfigletAssignmentConfigDeleteRequest) (*ConfigletAssignmentConfigDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedConfigletAssignmentConfigServiceServer) DeleteSome(*ConfigletAssignmentConfigDeleteSomeRequest, ConfigletAssignmentConfigService_DeleteSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteSome not implemented")
}
func (UnimplementedConfigletAssignmentConfigServiceServer) DeleteAll(*ConfigletAssignmentConfigDeleteAllRequest, ConfigletAssignmentConfigService_DeleteAllServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteAll not implemented")
}
func (UnimplementedConfigletAssignmentConfigServiceServer) mustEmbedUnimplementedConfigletAssignmentConfigServiceServer() {
}

// UnsafeConfigletAssignmentConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigletAssignmentConfigServiceServer will
// result in compilation errors.
type UnsafeConfigletAssignmentConfigServiceServer interface {
	mustEmbedUnimplementedConfigletAssignmentConfigServiceServer()
}

func RegisterConfigletAssignmentConfigServiceServer(s grpc.ServiceRegistrar, srv ConfigletAssignmentConfigServiceServer) {
	s.RegisterService(&ConfigletAssignmentConfigService_ServiceDesc, srv)
}

func _ConfigletAssignmentConfigService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigletAssignmentConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigletAssignmentConfigServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigletAssignmentConfigService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigletAssignmentConfigServiceServer).GetOne(ctx, req.(*ConfigletAssignmentConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigletAssignmentConfigService_GetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConfigletAssignmentConfigSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigletAssignmentConfigServiceServer).GetSome(m, &configletAssignmentConfigServiceGetSomeServer{stream})
}

type ConfigletAssignmentConfigService_GetSomeServer interface {
	Send(*ConfigletAssignmentConfigSomeResponse) error
	grpc.ServerStream
}

type configletAssignmentConfigServiceGetSomeServer struct {
	grpc.ServerStream
}

func (x *configletAssignmentConfigServiceGetSomeServer) Send(m *ConfigletAssignmentConfigSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ConfigletAssignmentConfigService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConfigletAssignmentConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigletAssignmentConfigServiceServer).GetAll(m, &configletAssignmentConfigServiceGetAllServer{stream})
}

type ConfigletAssignmentConfigService_GetAllServer interface {
	Send(*ConfigletAssignmentConfigStreamResponse) error
	grpc.ServerStream
}

type configletAssignmentConfigServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *configletAssignmentConfigServiceGetAllServer) Send(m *ConfigletAssignmentConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ConfigletAssignmentConfigService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConfigletAssignmentConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigletAssignmentConfigServiceServer).Subscribe(m, &configletAssignmentConfigServiceSubscribeServer{stream})
}

type ConfigletAssignmentConfigService_SubscribeServer interface {
	Send(*ConfigletAssignmentConfigStreamResponse) error
	grpc.ServerStream
}

type configletAssignmentConfigServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *configletAssignmentConfigServiceSubscribeServer) Send(m *ConfigletAssignmentConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ConfigletAssignmentConfigService_GetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigletAssignmentConfigStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigletAssignmentConfigServiceServer).GetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigletAssignmentConfigService_GetMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigletAssignmentConfigServiceServer).GetMeta(ctx, req.(*ConfigletAssignmentConfigStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigletAssignmentConfigService_SubscribeMeta_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConfigletAssignmentConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigletAssignmentConfigServiceServer).SubscribeMeta(m, &configletAssignmentConfigServiceSubscribeMetaServer{stream})
}

type ConfigletAssignmentConfigService_SubscribeMetaServer interface {
	Send(*MetaResponse) error
	grpc.ServerStream
}

type configletAssignmentConfigServiceSubscribeMetaServer struct {
	grpc.ServerStream
}

func (x *configletAssignmentConfigServiceSubscribeMetaServer) Send(m *MetaResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ConfigletAssignmentConfigService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigletAssignmentConfigSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigletAssignmentConfigServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigletAssignmentConfigService_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigletAssignmentConfigServiceServer).Set(ctx, req.(*ConfigletAssignmentConfigSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigletAssignmentConfigService_SetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConfigletAssignmentConfigSetSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigletAssignmentConfigServiceServer).SetSome(m, &configletAssignmentConfigServiceSetSomeServer{stream})
}

type ConfigletAssignmentConfigService_SetSomeServer interface {
	Send(*ConfigletAssignmentConfigSetSomeResponse) error
	grpc.ServerStream
}

type configletAssignmentConfigServiceSetSomeServer struct {
	grpc.ServerStream
}

func (x *configletAssignmentConfigServiceSetSomeServer) Send(m *ConfigletAssignmentConfigSetSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ConfigletAssignmentConfigService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigletAssignmentConfigDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigletAssignmentConfigServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigletAssignmentConfigService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigletAssignmentConfigServiceServer).Delete(ctx, req.(*ConfigletAssignmentConfigDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigletAssignmentConfigService_DeleteSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConfigletAssignmentConfigDeleteSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigletAssignmentConfigServiceServer).DeleteSome(m, &configletAssignmentConfigServiceDeleteSomeServer{stream})
}

type ConfigletAssignmentConfigService_DeleteSomeServer interface {
	Send(*ConfigletAssignmentConfigDeleteSomeResponse) error
	grpc.ServerStream
}

type configletAssignmentConfigServiceDeleteSomeServer struct {
	grpc.ServerStream
}

func (x *configletAssignmentConfigServiceDeleteSomeServer) Send(m *ConfigletAssignmentConfigDeleteSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ConfigletAssignmentConfigService_DeleteAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConfigletAssignmentConfigDeleteAllRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigletAssignmentConfigServiceServer).DeleteAll(m, &configletAssignmentConfigServiceDeleteAllServer{stream})
}

type ConfigletAssignmentConfigService_DeleteAllServer interface {
	Send(*ConfigletAssignmentConfigDeleteAllResponse) error
	grpc.ServerStream
}

type configletAssignmentConfigServiceDeleteAllServer struct {
	grpc.ServerStream
}

func (x *configletAssignmentConfigServiceDeleteAllServer) Send(m *ConfigletAssignmentConfigDeleteAllResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ConfigletAssignmentConfigService_ServiceDesc is the grpc.ServiceDesc for ConfigletAssignmentConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigletAssignmentConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.configlet.v1.ConfigletAssignmentConfigService",
	HandlerType: (*ConfigletAssignmentConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _ConfigletAssignmentConfigService_GetOne_Handler,
		},
		{
			MethodName: "GetMeta",
			Handler:    _ConfigletAssignmentConfigService_GetMeta_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _ConfigletAssignmentConfigService_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ConfigletAssignmentConfigService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSome",
			Handler:       _ConfigletAssignmentConfigService_GetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAll",
			Handler:       _ConfigletAssignmentConfigService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _ConfigletAssignmentConfigService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeMeta",
			Handler:       _ConfigletAssignmentConfigService_SubscribeMeta_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SetSome",
			Handler:       _ConfigletAssignmentConfigService_SetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteSome",
			Handler:       _ConfigletAssignmentConfigService_DeleteSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteAll",
			Handler:       _ConfigletAssignmentConfigService_DeleteAll_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/configlet.v1/services.gen.proto",
}

const (
	ConfigletConfigService_GetOne_FullMethodName        = "/arista.configlet.v1.ConfigletConfigService/GetOne"
	ConfigletConfigService_GetSome_FullMethodName       = "/arista.configlet.v1.ConfigletConfigService/GetSome"
	ConfigletConfigService_GetAll_FullMethodName        = "/arista.configlet.v1.ConfigletConfigService/GetAll"
	ConfigletConfigService_Subscribe_FullMethodName     = "/arista.configlet.v1.ConfigletConfigService/Subscribe"
	ConfigletConfigService_GetMeta_FullMethodName       = "/arista.configlet.v1.ConfigletConfigService/GetMeta"
	ConfigletConfigService_SubscribeMeta_FullMethodName = "/arista.configlet.v1.ConfigletConfigService/SubscribeMeta"
	ConfigletConfigService_Set_FullMethodName           = "/arista.configlet.v1.ConfigletConfigService/Set"
	ConfigletConfigService_SetSome_FullMethodName       = "/arista.configlet.v1.ConfigletConfigService/SetSome"
	ConfigletConfigService_Delete_FullMethodName        = "/arista.configlet.v1.ConfigletConfigService/Delete"
	ConfigletConfigService_DeleteSome_FullMethodName    = "/arista.configlet.v1.ConfigletConfigService/DeleteSome"
	ConfigletConfigService_DeleteAll_FullMethodName     = "/arista.configlet.v1.ConfigletConfigService/DeleteAll"
)

// ConfigletConfigServiceClient is the client API for ConfigletConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigletConfigServiceClient interface {
	GetOne(ctx context.Context, in *ConfigletConfigRequest, opts ...grpc.CallOption) (*ConfigletConfigResponse, error)
	GetSome(ctx context.Context, in *ConfigletConfigSomeRequest, opts ...grpc.CallOption) (ConfigletConfigService_GetSomeClient, error)
	GetAll(ctx context.Context, in *ConfigletConfigStreamRequest, opts ...grpc.CallOption) (ConfigletConfigService_GetAllClient, error)
	Subscribe(ctx context.Context, in *ConfigletConfigStreamRequest, opts ...grpc.CallOption) (ConfigletConfigService_SubscribeClient, error)
	GetMeta(ctx context.Context, in *ConfigletConfigStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error)
	SubscribeMeta(ctx context.Context, in *ConfigletConfigStreamRequest, opts ...grpc.CallOption) (ConfigletConfigService_SubscribeMetaClient, error)
	Set(ctx context.Context, in *ConfigletConfigSetRequest, opts ...grpc.CallOption) (*ConfigletConfigSetResponse, error)
	SetSome(ctx context.Context, in *ConfigletConfigSetSomeRequest, opts ...grpc.CallOption) (ConfigletConfigService_SetSomeClient, error)
	Delete(ctx context.Context, in *ConfigletConfigDeleteRequest, opts ...grpc.CallOption) (*ConfigletConfigDeleteResponse, error)
	DeleteSome(ctx context.Context, in *ConfigletConfigDeleteSomeRequest, opts ...grpc.CallOption) (ConfigletConfigService_DeleteSomeClient, error)
	DeleteAll(ctx context.Context, in *ConfigletConfigDeleteAllRequest, opts ...grpc.CallOption) (ConfigletConfigService_DeleteAllClient, error)
}

type configletConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigletConfigServiceClient(cc grpc.ClientConnInterface) ConfigletConfigServiceClient {
	return &configletConfigServiceClient{cc}
}

func (c *configletConfigServiceClient) GetOne(ctx context.Context, in *ConfigletConfigRequest, opts ...grpc.CallOption) (*ConfigletConfigResponse, error) {
	out := new(ConfigletConfigResponse)
	err := c.cc.Invoke(ctx, ConfigletConfigService_GetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configletConfigServiceClient) GetSome(ctx context.Context, in *ConfigletConfigSomeRequest, opts ...grpc.CallOption) (ConfigletConfigService_GetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConfigletConfigService_ServiceDesc.Streams[0], ConfigletConfigService_GetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &configletConfigServiceGetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigletConfigService_GetSomeClient interface {
	Recv() (*ConfigletConfigSomeResponse, error)
	grpc.ClientStream
}

type configletConfigServiceGetSomeClient struct {
	grpc.ClientStream
}

func (x *configletConfigServiceGetSomeClient) Recv() (*ConfigletConfigSomeResponse, error) {
	m := new(ConfigletConfigSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *configletConfigServiceClient) GetAll(ctx context.Context, in *ConfigletConfigStreamRequest, opts ...grpc.CallOption) (ConfigletConfigService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConfigletConfigService_ServiceDesc.Streams[1], ConfigletConfigService_GetAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &configletConfigServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigletConfigService_GetAllClient interface {
	Recv() (*ConfigletConfigStreamResponse, error)
	grpc.ClientStream
}

type configletConfigServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *configletConfigServiceGetAllClient) Recv() (*ConfigletConfigStreamResponse, error) {
	m := new(ConfigletConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *configletConfigServiceClient) Subscribe(ctx context.Context, in *ConfigletConfigStreamRequest, opts ...grpc.CallOption) (ConfigletConfigService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConfigletConfigService_ServiceDesc.Streams[2], ConfigletConfigService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &configletConfigServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigletConfigService_SubscribeClient interface {
	Recv() (*ConfigletConfigStreamResponse, error)
	grpc.ClientStream
}

type configletConfigServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *configletConfigServiceSubscribeClient) Recv() (*ConfigletConfigStreamResponse, error) {
	m := new(ConfigletConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *configletConfigServiceClient) GetMeta(ctx context.Context, in *ConfigletConfigStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error) {
	out := new(MetaResponse)
	err := c.cc.Invoke(ctx, ConfigletConfigService_GetMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configletConfigServiceClient) SubscribeMeta(ctx context.Context, in *ConfigletConfigStreamRequest, opts ...grpc.CallOption) (ConfigletConfigService_SubscribeMetaClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConfigletConfigService_ServiceDesc.Streams[3], ConfigletConfigService_SubscribeMeta_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &configletConfigServiceSubscribeMetaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigletConfigService_SubscribeMetaClient interface {
	Recv() (*MetaResponse, error)
	grpc.ClientStream
}

type configletConfigServiceSubscribeMetaClient struct {
	grpc.ClientStream
}

func (x *configletConfigServiceSubscribeMetaClient) Recv() (*MetaResponse, error) {
	m := new(MetaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *configletConfigServiceClient) Set(ctx context.Context, in *ConfigletConfigSetRequest, opts ...grpc.CallOption) (*ConfigletConfigSetResponse, error) {
	out := new(ConfigletConfigSetResponse)
	err := c.cc.Invoke(ctx, ConfigletConfigService_Set_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configletConfigServiceClient) SetSome(ctx context.Context, in *ConfigletConfigSetSomeRequest, opts ...grpc.CallOption) (ConfigletConfigService_SetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConfigletConfigService_ServiceDesc.Streams[4], ConfigletConfigService_SetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &configletConfigServiceSetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigletConfigService_SetSomeClient interface {
	Recv() (*ConfigletConfigSetSomeResponse, error)
	grpc.ClientStream
}

type configletConfigServiceSetSomeClient struct {
	grpc.ClientStream
}

func (x *configletConfigServiceSetSomeClient) Recv() (*ConfigletConfigSetSomeResponse, error) {
	m := new(ConfigletConfigSetSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *configletConfigServiceClient) Delete(ctx context.Context, in *ConfigletConfigDeleteRequest, opts ...grpc.CallOption) (*ConfigletConfigDeleteResponse, error) {
	out := new(ConfigletConfigDeleteResponse)
	err := c.cc.Invoke(ctx, ConfigletConfigService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configletConfigServiceClient) DeleteSome(ctx context.Context, in *ConfigletConfigDeleteSomeRequest, opts ...grpc.CallOption) (ConfigletConfigService_DeleteSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConfigletConfigService_ServiceDesc.Streams[5], ConfigletConfigService_DeleteSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &configletConfigServiceDeleteSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigletConfigService_DeleteSomeClient interface {
	Recv() (*ConfigletConfigDeleteSomeResponse, error)
	grpc.ClientStream
}

type configletConfigServiceDeleteSomeClient struct {
	grpc.ClientStream
}

func (x *configletConfigServiceDeleteSomeClient) Recv() (*ConfigletConfigDeleteSomeResponse, error) {
	m := new(ConfigletConfigDeleteSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *configletConfigServiceClient) DeleteAll(ctx context.Context, in *ConfigletConfigDeleteAllRequest, opts ...grpc.CallOption) (ConfigletConfigService_DeleteAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConfigletConfigService_ServiceDesc.Streams[6], ConfigletConfigService_DeleteAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &configletConfigServiceDeleteAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigletConfigService_DeleteAllClient interface {
	Recv() (*ConfigletConfigDeleteAllResponse, error)
	grpc.ClientStream
}

type configletConfigServiceDeleteAllClient struct {
	grpc.ClientStream
}

func (x *configletConfigServiceDeleteAllClient) Recv() (*ConfigletConfigDeleteAllResponse, error) {
	m := new(ConfigletConfigDeleteAllResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConfigletConfigServiceServer is the server API for ConfigletConfigService service.
// All implementations must embed UnimplementedConfigletConfigServiceServer
// for forward compatibility
type ConfigletConfigServiceServer interface {
	GetOne(context.Context, *ConfigletConfigRequest) (*ConfigletConfigResponse, error)
	GetSome(*ConfigletConfigSomeRequest, ConfigletConfigService_GetSomeServer) error
	GetAll(*ConfigletConfigStreamRequest, ConfigletConfigService_GetAllServer) error
	Subscribe(*ConfigletConfigStreamRequest, ConfigletConfigService_SubscribeServer) error
	GetMeta(context.Context, *ConfigletConfigStreamRequest) (*MetaResponse, error)
	SubscribeMeta(*ConfigletConfigStreamRequest, ConfigletConfigService_SubscribeMetaServer) error
	Set(context.Context, *ConfigletConfigSetRequest) (*ConfigletConfigSetResponse, error)
	SetSome(*ConfigletConfigSetSomeRequest, ConfigletConfigService_SetSomeServer) error
	Delete(context.Context, *ConfigletConfigDeleteRequest) (*ConfigletConfigDeleteResponse, error)
	DeleteSome(*ConfigletConfigDeleteSomeRequest, ConfigletConfigService_DeleteSomeServer) error
	DeleteAll(*ConfigletConfigDeleteAllRequest, ConfigletConfigService_DeleteAllServer) error
	mustEmbedUnimplementedConfigletConfigServiceServer()
}

// UnimplementedConfigletConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConfigletConfigServiceServer struct {
}

func (UnimplementedConfigletConfigServiceServer) GetOne(context.Context, *ConfigletConfigRequest) (*ConfigletConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedConfigletConfigServiceServer) GetSome(*ConfigletConfigSomeRequest, ConfigletConfigService_GetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSome not implemented")
}
func (UnimplementedConfigletConfigServiceServer) GetAll(*ConfigletConfigStreamRequest, ConfigletConfigService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedConfigletConfigServiceServer) Subscribe(*ConfigletConfigStreamRequest, ConfigletConfigService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedConfigletConfigServiceServer) GetMeta(context.Context, *ConfigletConfigStreamRequest) (*MetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeta not implemented")
}
func (UnimplementedConfigletConfigServiceServer) SubscribeMeta(*ConfigletConfigStreamRequest, ConfigletConfigService_SubscribeMetaServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMeta not implemented")
}
func (UnimplementedConfigletConfigServiceServer) Set(context.Context, *ConfigletConfigSetRequest) (*ConfigletConfigSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedConfigletConfigServiceServer) SetSome(*ConfigletConfigSetSomeRequest, ConfigletConfigService_SetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method SetSome not implemented")
}
func (UnimplementedConfigletConfigServiceServer) Delete(context.Context, *ConfigletConfigDeleteRequest) (*ConfigletConfigDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedConfigletConfigServiceServer) DeleteSome(*ConfigletConfigDeleteSomeRequest, ConfigletConfigService_DeleteSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteSome not implemented")
}
func (UnimplementedConfigletConfigServiceServer) DeleteAll(*ConfigletConfigDeleteAllRequest, ConfigletConfigService_DeleteAllServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteAll not implemented")
}
func (UnimplementedConfigletConfigServiceServer) mustEmbedUnimplementedConfigletConfigServiceServer() {
}

// UnsafeConfigletConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigletConfigServiceServer will
// result in compilation errors.
type UnsafeConfigletConfigServiceServer interface {
	mustEmbedUnimplementedConfigletConfigServiceServer()
}

func RegisterConfigletConfigServiceServer(s grpc.ServiceRegistrar, srv ConfigletConfigServiceServer) {
	s.RegisterService(&ConfigletConfigService_ServiceDesc, srv)
}

func _ConfigletConfigService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigletConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigletConfigServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigletConfigService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigletConfigServiceServer).GetOne(ctx, req.(*ConfigletConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigletConfigService_GetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConfigletConfigSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigletConfigServiceServer).GetSome(m, &configletConfigServiceGetSomeServer{stream})
}

type ConfigletConfigService_GetSomeServer interface {
	Send(*ConfigletConfigSomeResponse) error
	grpc.ServerStream
}

type configletConfigServiceGetSomeServer struct {
	grpc.ServerStream
}

func (x *configletConfigServiceGetSomeServer) Send(m *ConfigletConfigSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ConfigletConfigService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConfigletConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigletConfigServiceServer).GetAll(m, &configletConfigServiceGetAllServer{stream})
}

type ConfigletConfigService_GetAllServer interface {
	Send(*ConfigletConfigStreamResponse) error
	grpc.ServerStream
}

type configletConfigServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *configletConfigServiceGetAllServer) Send(m *ConfigletConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ConfigletConfigService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConfigletConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigletConfigServiceServer).Subscribe(m, &configletConfigServiceSubscribeServer{stream})
}

type ConfigletConfigService_SubscribeServer interface {
	Send(*ConfigletConfigStreamResponse) error
	grpc.ServerStream
}

type configletConfigServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *configletConfigServiceSubscribeServer) Send(m *ConfigletConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ConfigletConfigService_GetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigletConfigStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigletConfigServiceServer).GetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigletConfigService_GetMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigletConfigServiceServer).GetMeta(ctx, req.(*ConfigletConfigStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigletConfigService_SubscribeMeta_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConfigletConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigletConfigServiceServer).SubscribeMeta(m, &configletConfigServiceSubscribeMetaServer{stream})
}

type ConfigletConfigService_SubscribeMetaServer interface {
	Send(*MetaResponse) error
	grpc.ServerStream
}

type configletConfigServiceSubscribeMetaServer struct {
	grpc.ServerStream
}

func (x *configletConfigServiceSubscribeMetaServer) Send(m *MetaResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ConfigletConfigService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigletConfigSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigletConfigServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigletConfigService_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigletConfigServiceServer).Set(ctx, req.(*ConfigletConfigSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigletConfigService_SetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConfigletConfigSetSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigletConfigServiceServer).SetSome(m, &configletConfigServiceSetSomeServer{stream})
}

type ConfigletConfigService_SetSomeServer interface {
	Send(*ConfigletConfigSetSomeResponse) error
	grpc.ServerStream
}

type configletConfigServiceSetSomeServer struct {
	grpc.ServerStream
}

func (x *configletConfigServiceSetSomeServer) Send(m *ConfigletConfigSetSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ConfigletConfigService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigletConfigDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigletConfigServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigletConfigService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigletConfigServiceServer).Delete(ctx, req.(*ConfigletConfigDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigletConfigService_DeleteSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConfigletConfigDeleteSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigletConfigServiceServer).DeleteSome(m, &configletConfigServiceDeleteSomeServer{stream})
}

type ConfigletConfigService_DeleteSomeServer interface {
	Send(*ConfigletConfigDeleteSomeResponse) error
	grpc.ServerStream
}

type configletConfigServiceDeleteSomeServer struct {
	grpc.ServerStream
}

func (x *configletConfigServiceDeleteSomeServer) Send(m *ConfigletConfigDeleteSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ConfigletConfigService_DeleteAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConfigletConfigDeleteAllRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigletConfigServiceServer).DeleteAll(m, &configletConfigServiceDeleteAllServer{stream})
}

type ConfigletConfigService_DeleteAllServer interface {
	Send(*ConfigletConfigDeleteAllResponse) error
	grpc.ServerStream
}

type configletConfigServiceDeleteAllServer struct {
	grpc.ServerStream
}

func (x *configletConfigServiceDeleteAllServer) Send(m *ConfigletConfigDeleteAllResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ConfigletConfigService_ServiceDesc is the grpc.ServiceDesc for ConfigletConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigletConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.configlet.v1.ConfigletConfigService",
	HandlerType: (*ConfigletConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _ConfigletConfigService_GetOne_Handler,
		},
		{
			MethodName: "GetMeta",
			Handler:    _ConfigletConfigService_GetMeta_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _ConfigletConfigService_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ConfigletConfigService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSome",
			Handler:       _ConfigletConfigService_GetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAll",
			Handler:       _ConfigletConfigService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _ConfigletConfigService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeMeta",
			Handler:       _ConfigletConfigService_SubscribeMeta_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SetSome",
			Handler:       _ConfigletConfigService_SetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteSome",
			Handler:       _ConfigletConfigService_DeleteSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteAll",
			Handler:       _ConfigletConfigService_DeleteAll_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/configlet.v1/services.gen.proto",
}
