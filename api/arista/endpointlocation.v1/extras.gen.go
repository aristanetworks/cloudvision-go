// Copyright (c) 2024 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

//
// Code generated by boomtown. DO NOT EDIT.
//

package endpointlocation

// HasKey returns whether the given EndpointLocation has a key provided in the model.
func (e *EndpointLocation) HasKey() bool {
	return e.GetKey() != nil
}

// HasKey returns whether the given EndpointLocationRequest has a key provided in the request.
func (e *EndpointLocationRequest) HasKey() bool {
	return e.GetKey() != nil
}

// PassesPartialEqFilter returns whether this DeviceStatus matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (d DeviceStatus) PassesPartialEqFilter(cmp DeviceStatus) bool {
	if cmp != DeviceStatus(0) {
		return d == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether this DeviceType matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (d DeviceType) PassesPartialEqFilter(cmp DeviceType) bool {
	if cmp != DeviceType(0) {
		return d == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether this Explanation matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (e Explanation) PassesPartialEqFilter(cmp Explanation) bool {
	if cmp != Explanation(0) {
		return e == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether this IdentifierSource matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (i IdentifierSource) PassesPartialEqFilter(cmp IdentifierSource) bool {
	if cmp != IdentifierSource(0) {
		return i == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether this IdentifierType matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (i IdentifierType) PassesPartialEqFilter(cmp IdentifierType) bool {
	if cmp != IdentifierType(0) {
		return i == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether this Likelihood matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (l Likelihood) PassesPartialEqFilter(cmp Likelihood) bool {
	if cmp != Likelihood(0) {
		return l == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether this MacType matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (m MacType) PassesPartialEqFilter(cmp MacType) bool {
	if cmp != MacType(0) {
		return m == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether the Device matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (d *Device) PassesPartialEqFilter(cmp *Device) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if d == nil {
		return false
	}
	if !d.IdentifierList.PassesPartialEqFilter(cmp.IdentifierList) {
		return false
	}
	if !d.DeviceType.PassesPartialEqFilter(cmp.DeviceType) {
		return false
	}
	if !d.LocationList.PassesPartialEqFilter(cmp.LocationList) {
		return false
	}
	if !d.DeviceStatus.PassesPartialEqFilter(cmp.DeviceStatus) {
		return false
	}
	if !d.DeviceInfo.PassesPartialEqFilter(cmp.DeviceInfo) {
		return false
	}

	return true
}

// PassesPartialEqFilter returns whether the DeviceInfo matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (d *DeviceInfo) PassesPartialEqFilter(cmp *DeviceInfo) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if d == nil {
		return false
	}

	if cmp.DeviceName != nil {
		if d.DeviceName == nil {
			return false
		}
		if d.DeviceName.Value != cmp.DeviceName.Value {
			return false
		}
	}

	if cmp.Mobile != nil {
		if d.Mobile == nil {
			return false
		}
		if d.Mobile.Value != cmp.Mobile.Value {
			return false
		}
	}

	if cmp.Tablet != nil {
		if d.Tablet == nil {
			return false
		}
		if d.Tablet.Value != cmp.Tablet.Value {
			return false
		}
	}

	if cmp.Score != nil {
		if d.Score == nil {
			return false
		}
		if d.Score.Value != cmp.Score.Value {
			return false
		}
	}

	if cmp.Version != nil {
		if d.Version == nil {
			return false
		}
		if d.Version.Value != cmp.Version.Value {
			return false
		}
	}

	if cmp.MacVendor != nil {
		if d.MacVendor == nil {
			return false
		}
		if d.MacVendor.Value != cmp.MacVendor.Value {
			return false
		}
	}

	if cmp.Classification != nil {
		if d.Classification == nil {
			return false
		}
		if d.Classification.Value != cmp.Classification.Value {
			return false
		}
	}
	if !d.Hierarchy.PassesPartialEqFilter(cmp.Hierarchy) {
		return false
	}

	return true
}

// PassesPartialEqFilter returns whether the DeviceMap matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (d *DeviceMap) PassesPartialEqFilter(cmp *DeviceMap) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if d == nil {
		return false
	}
	if len(cmp.Values) > len(d.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := d.Values[k]
		if !exists || !self.PassesPartialEqFilter(filt) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the ExplanationList matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (e *ExplanationList) PassesPartialEqFilter(cmp *ExplanationList) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if e == nil {
		return false
	}
	if len(e.Values) != len(cmp.Values) {
		return false
	}
	for i, f := range e.Values {
		if !f.PassesPartialEqFilter(cmp.Values[i]) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the Identifier matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (i *Identifier) PassesPartialEqFilter(cmp *Identifier) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if i == nil {
		return false
	}
	if !i.Type.PassesPartialEqFilter(cmp.Type) {
		return false
	}

	if cmp.Value != nil {
		if i.Value == nil {
			return false
		}
		if i.Value.Value != cmp.Value.Value {
			return false
		}
	}
	if !i.SourceList.PassesPartialEqFilter(cmp.SourceList) {
		return false
	}

	return true
}

// PassesPartialEqFilter returns whether the IdentifierList matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (i *IdentifierList) PassesPartialEqFilter(cmp *IdentifierList) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if i == nil {
		return false
	}
	if len(i.Values) != len(cmp.Values) {
		return false
	}
	for i, f := range i.Values {
		if !f.PassesPartialEqFilter(cmp.Values[i]) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the IdentifierSourceList matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (i *IdentifierSourceList) PassesPartialEqFilter(cmp *IdentifierSourceList) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if i == nil {
		return false
	}
	if len(i.Values) != len(cmp.Values) {
		return false
	}
	for i, f := range i.Values {
		if !f.PassesPartialEqFilter(cmp.Values[i]) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the Location matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (l *Location) PassesPartialEqFilter(cmp *Location) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if l == nil {
		return false
	}

	if cmp.DeviceId != nil {
		if l.DeviceId == nil {
			return false
		}
		if l.DeviceId.Value != cmp.DeviceId.Value {
			return false
		}
	}
	if !l.DeviceStatus.PassesPartialEqFilter(cmp.DeviceStatus) {
		return false
	}

	if cmp.Interface != nil {
		if l.Interface == nil {
			return false
		}
		if l.Interface.Value != cmp.Interface.Value {
			return false
		}
	}

	if cmp.VlanId != nil {
		if l.VlanId == nil {
			return false
		}
		if l.VlanId.Value != cmp.VlanId.Value {
			return false
		}
	}

	if cmp.LearnedTime != nil {
		if cmp.LearnedTime.Seconds != 0 {
			if l.LearnedTime.Seconds != cmp.LearnedTime.Seconds {
				return false
			}
		}
		if cmp.LearnedTime.Nanos != 0 {
			if l.LearnedTime.Nanos != cmp.LearnedTime.Nanos {
				return false
			}
		}
	}
	if !l.MacType.PassesPartialEqFilter(cmp.MacType) {
		return false
	}
	if !l.Likelihood.PassesPartialEqFilter(cmp.Likelihood) {
		return false
	}
	if !l.ExplanationList.PassesPartialEqFilter(cmp.ExplanationList) {
		return false
	}
	if !l.IdentifierList.PassesPartialEqFilter(cmp.IdentifierList) {
		return false
	}

	return true
}

// PassesPartialEqFilter returns whether the LocationList matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (l *LocationList) PassesPartialEqFilter(cmp *LocationList) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if l == nil {
		return false
	}
	if len(l.Values) != len(cmp.Values) {
		return false
	}
	for i, f := range l.Values {
		if !f.PassesPartialEqFilter(cmp.Values[i]) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the EndpointLocationKey matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (e *EndpointLocationKey) PassesPartialEqFilter(cmp *EndpointLocationKey) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if e == nil {
		return false
	}

	if cmp.SearchTerm != nil {
		if e.SearchTerm == nil {
			return false
		}
		if e.SearchTerm.Value != cmp.SearchTerm.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the EndpointLocation matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (e *EndpointLocation) PassesPartialEqFilter(cmp *EndpointLocation) bool {
	// if the resource is nil, there is nothing to send to the client
	if e == nil {
		return false
	}

	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if !e.Key.PassesPartialEqFilter(cmp.Key) {
		return false
	}

	if !e.DeviceMap.PassesPartialEqFilter(cmp.DeviceMap) {
		return false
	}

	return true
}

// MatchesAnyPartialEqFilter returns whether the receiver matches any filters in the given set.
func (e *EndpointLocation) MatchesAnyPartialEqFilter(filters []*EndpointLocation) bool {
	if len(filters) == 0 {
		return true
	}

	for _, filt := range filters {
		if e.PassesPartialEqFilter(filt) {
			return true
		}
	}

	return false
}
