// Copyright (c) 2023 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v4.24.4
// source: arista/endpointlocation.v1/endpointlocation.proto

package endpointlocation

import (
	fmp "github.com/aristanetworks/cloudvision-go/api/fmp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// MacType describes how the MAC address was learned on the port location.
type MacType int32

const (
	// MAC_TYPE_UNSPECIFIED is the default unspecified MAC type.
	MacType_MAC_TYPE_UNSPECIFIED MacType = 0
	// MAC_TYPE_LEARNED_DYNAMIC indicates a MAC that is dynamically learned in hardware.
	MacType_MAC_TYPE_LEARNED_DYNAMIC MacType = 1
	// MAC_TYPE_LEARNED_SECURE indicates a MAC that is learned in hardware on a port-security protect interface.
	MacType_MAC_TYPE_LEARNED_SECURE MacType = 2
	// MAC_TYPE_CONFIGURED_DYNAMIC indicates a configured dynamic MAC.
	MacType_MAC_TYPE_CONFIGURED_DYNAMIC MacType = 3
	// MAC_TYPE_CONFIGURED_SECURE indicates a MAC configured on an interface with Port Security: Protect mode enabled
	MacType_MAC_TYPE_CONFIGURED_SECURE MacType = 4
	// MAC_TYPE_CONFIGURED_STATIC indicates a statically configured MAC.
	MacType_MAC_TYPE_CONFIGURED_STATIC MacType = 5
	// MAC_TYPE_PEER_DYNAMIC indicates a dynamically learned MAC discovered via an MLAG peer.
	MacType_MAC_TYPE_PEER_DYNAMIC MacType = 6
	// MAC_TYPE_PEER_STATIC indicates a statically configured MAC discovered via an MLAG peer.
	MacType_MAC_TYPE_PEER_STATIC MacType = 7
	// MAC_TYPE_PEER_SECURE indicates a secure MAC learned from an MLAG peer.
	MacType_MAC_TYPE_PEER_SECURE MacType = 8
	// MAC_TYPE_LEARNED_REMOTE indicates a MAC learned remotely behind a VxLAN VTEP.
	MacType_MAC_TYPE_LEARNED_REMOTE MacType = 9
	// MAC_TYPE_CONFIGURED_REMOTE indicates a MAC configured behind a VxLAN VTEP.
	MacType_MAC_TYPE_CONFIGURED_REMOTE MacType = 10
	// MAC_TYPE_RECEIVED_REMOTE indicates a MAC received from a VxLAN controller.
	MacType_MAC_TYPE_RECEIVED_REMOTE MacType = 11
	// MAC_TYPE_PEER_LEARNED_REMOTE indicates a remote MAC learned on a peer VTEP.
	MacType_MAC_TYPE_PEER_LEARNED_REMOTE MacType = 12
	// MAC_TYPE_PEER_CONFIGURED_REMOTE indicates an MLAG peer configured remote MAC.
	MacType_MAC_TYPE_PEER_CONFIGURED_REMOTE MacType = 13
	// MAC_TYPE_PEER_RECEIVED_REMOTE indicates a remote MAC received from a VxLAN controller by the MLAG peer.
	MacType_MAC_TYPE_PEER_RECEIVED_REMOTE MacType = 14
	// MAC_TYPE_EVPN_DYNAMIC_REMOTE indicates an EVPN dynamic remote MAC.
	MacType_MAC_TYPE_EVPN_DYNAMIC_REMOTE MacType = 15
	// MAC_TYPE_EVPN_CONFIGURED_REMOTE indicates an EVPN configured remote MAC.
	MacType_MAC_TYPE_EVPN_CONFIGURED_REMOTE MacType = 16
	// MAC_TYPE_PEER_EVPN_REMOTE indicates an MLAG peer EVPN remote MAC.
	MacType_MAC_TYPE_PEER_EVPN_REMOTE MacType = 17
	// MAC_TYPE_CONFIGURED_ROUTER indicates a configured MAC used in routing.
	MacType_MAC_TYPE_CONFIGURED_ROUTER MacType = 18
	// MAC_TYPE_PEER_ROUTER indicates an MLAG peer specific router MAC.
	MacType_MAC_TYPE_PEER_ROUTER MacType = 19
	// MAC_TYPE_EVPN_INTF_DYNAMIC indicates a MAC advertised by EVPN when a dynamic MAC is learned on ESI (Ethernet Segment Identifier).
	MacType_MAC_TYPE_EVPN_INTF_DYNAMIC MacType = 20
	// MAC_TYPE_EVPN_INTF_STATIC indicates a MAC configured on EVPN ESI.
	MacType_MAC_TYPE_EVPN_INTF_STATIC MacType = 21
	// MAC_TYPE_AUTHENTICATED indicates a MAC authenticated via 802.1X.
	MacType_MAC_TYPE_AUTHENTICATED MacType = 22
	// MAC_TYPE_PEER_AUTHENTICATED indicates a MAC authenticated by 802.1X and learned on an MLAG peer.
	MacType_MAC_TYPE_PEER_AUTHENTICATED MacType = 23
	// MAC_TYPE_PENDING_SECURE indicates a secure MAC in a pending state.
	MacType_MAC_TYPE_PENDING_SECURE MacType = 24
	// MAC_TYPE_SOFTWARE_LEARNED_DYNAMIC indicates a MAC learned behind VTEP in software in the case of a VxLAN remote MAC.
	MacType_MAC_TYPE_SOFTWARE_LEARNED_DYNAMIC MacType = 25
	// MAC_TYPE_OTHER is used for capturing future MAC types.
	MacType_MAC_TYPE_OTHER MacType = 99999
)

// Enum value maps for MacType.
var (
	MacType_name = map[int32]string{
		0:     "MAC_TYPE_UNSPECIFIED",
		1:     "MAC_TYPE_LEARNED_DYNAMIC",
		2:     "MAC_TYPE_LEARNED_SECURE",
		3:     "MAC_TYPE_CONFIGURED_DYNAMIC",
		4:     "MAC_TYPE_CONFIGURED_SECURE",
		5:     "MAC_TYPE_CONFIGURED_STATIC",
		6:     "MAC_TYPE_PEER_DYNAMIC",
		7:     "MAC_TYPE_PEER_STATIC",
		8:     "MAC_TYPE_PEER_SECURE",
		9:     "MAC_TYPE_LEARNED_REMOTE",
		10:    "MAC_TYPE_CONFIGURED_REMOTE",
		11:    "MAC_TYPE_RECEIVED_REMOTE",
		12:    "MAC_TYPE_PEER_LEARNED_REMOTE",
		13:    "MAC_TYPE_PEER_CONFIGURED_REMOTE",
		14:    "MAC_TYPE_PEER_RECEIVED_REMOTE",
		15:    "MAC_TYPE_EVPN_DYNAMIC_REMOTE",
		16:    "MAC_TYPE_EVPN_CONFIGURED_REMOTE",
		17:    "MAC_TYPE_PEER_EVPN_REMOTE",
		18:    "MAC_TYPE_CONFIGURED_ROUTER",
		19:    "MAC_TYPE_PEER_ROUTER",
		20:    "MAC_TYPE_EVPN_INTF_DYNAMIC",
		21:    "MAC_TYPE_EVPN_INTF_STATIC",
		22:    "MAC_TYPE_AUTHENTICATED",
		23:    "MAC_TYPE_PEER_AUTHENTICATED",
		24:    "MAC_TYPE_PENDING_SECURE",
		25:    "MAC_TYPE_SOFTWARE_LEARNED_DYNAMIC",
		99999: "MAC_TYPE_OTHER",
	}
	MacType_value = map[string]int32{
		"MAC_TYPE_UNSPECIFIED":              0,
		"MAC_TYPE_LEARNED_DYNAMIC":          1,
		"MAC_TYPE_LEARNED_SECURE":           2,
		"MAC_TYPE_CONFIGURED_DYNAMIC":       3,
		"MAC_TYPE_CONFIGURED_SECURE":        4,
		"MAC_TYPE_CONFIGURED_STATIC":        5,
		"MAC_TYPE_PEER_DYNAMIC":             6,
		"MAC_TYPE_PEER_STATIC":              7,
		"MAC_TYPE_PEER_SECURE":              8,
		"MAC_TYPE_LEARNED_REMOTE":           9,
		"MAC_TYPE_CONFIGURED_REMOTE":        10,
		"MAC_TYPE_RECEIVED_REMOTE":          11,
		"MAC_TYPE_PEER_LEARNED_REMOTE":      12,
		"MAC_TYPE_PEER_CONFIGURED_REMOTE":   13,
		"MAC_TYPE_PEER_RECEIVED_REMOTE":     14,
		"MAC_TYPE_EVPN_DYNAMIC_REMOTE":      15,
		"MAC_TYPE_EVPN_CONFIGURED_REMOTE":   16,
		"MAC_TYPE_PEER_EVPN_REMOTE":         17,
		"MAC_TYPE_CONFIGURED_ROUTER":        18,
		"MAC_TYPE_PEER_ROUTER":              19,
		"MAC_TYPE_EVPN_INTF_DYNAMIC":        20,
		"MAC_TYPE_EVPN_INTF_STATIC":         21,
		"MAC_TYPE_AUTHENTICATED":            22,
		"MAC_TYPE_PEER_AUTHENTICATED":       23,
		"MAC_TYPE_PENDING_SECURE":           24,
		"MAC_TYPE_SOFTWARE_LEARNED_DYNAMIC": 25,
		"MAC_TYPE_OTHER":                    99999,
	}
)

func (x MacType) Enum() *MacType {
	p := new(MacType)
	*p = x
	return p
}

func (x MacType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MacType) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_endpointlocation_v1_endpointlocation_proto_enumTypes[0].Descriptor()
}

func (MacType) Type() protoreflect.EnumType {
	return &file_arista_endpointlocation_v1_endpointlocation_proto_enumTypes[0]
}

func (x MacType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MacType.Descriptor instead.
func (MacType) EnumDescriptor() ([]byte, []int) {
	return file_arista_endpointlocation_v1_endpointlocation_proto_rawDescGZIP(), []int{0}
}

// Likelihood indicates a level of confidence.
type Likelihood int32

const (
	// LIKELIHOOD_UNSPECIFIED is the default unspecified likelihood.
	Likelihood_LIKELIHOOD_UNSPECIFIED Likelihood = 0
	// LIKELIHOOD_VERY_LIKELY indicates very high confidence.
	Likelihood_LIKELIHOOD_VERY_LIKELY Likelihood = 1
	// LIKELIHOOD_LIKELY indicates high confidence.
	Likelihood_LIKELIHOOD_LIKELY Likelihood = 2
	// LIKELIHOOD_SOMEWHAT_LIKELY indicates medium confidence.
	Likelihood_LIKELIHOOD_SOMEWHAT_LIKELY Likelihood = 3
	// LIKELIHOOD_LESS_LIKELY indicates low confidence.
	Likelihood_LIKELIHOOD_LESS_LIKELY Likelihood = 4
)

// Enum value maps for Likelihood.
var (
	Likelihood_name = map[int32]string{
		0: "LIKELIHOOD_UNSPECIFIED",
		1: "LIKELIHOOD_VERY_LIKELY",
		2: "LIKELIHOOD_LIKELY",
		3: "LIKELIHOOD_SOMEWHAT_LIKELY",
		4: "LIKELIHOOD_LESS_LIKELY",
	}
	Likelihood_value = map[string]int32{
		"LIKELIHOOD_UNSPECIFIED":     0,
		"LIKELIHOOD_VERY_LIKELY":     1,
		"LIKELIHOOD_LIKELY":          2,
		"LIKELIHOOD_SOMEWHAT_LIKELY": 3,
		"LIKELIHOOD_LESS_LIKELY":     4,
	}
)

func (x Likelihood) Enum() *Likelihood {
	p := new(Likelihood)
	*p = x
	return p
}

func (x Likelihood) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Likelihood) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_endpointlocation_v1_endpointlocation_proto_enumTypes[1].Descriptor()
}

func (Likelihood) Type() protoreflect.EnumType {
	return &file_arista_endpointlocation_v1_endpointlocation_proto_enumTypes[1]
}

func (x Likelihood) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Likelihood.Descriptor instead.
func (Likelihood) EnumDescriptor() ([]byte, []int) {
	return file_arista_endpointlocation_v1_endpointlocation_proto_rawDescGZIP(), []int{1}
}

// IdentifierType defines the set of ways for identifying endpoints.
type IdentifierType int32

const (
	// IDENTIFIER_TYPE_UNSPECIFIED is the default unspecified identifier.
	IdentifierType_IDENTIFIER_TYPE_UNSPECIFIED IdentifierType = 0
	// IDENTIFIER_TYPE_MAC_ADDR indicates a MAC address identifier.
	IdentifierType_IDENTIFIER_TYPE_MAC_ADDR IdentifierType = 1
	// IDENTIFIER_TYPE_IPV4_ADDR indicates an IPv4 address identifier.
	IdentifierType_IDENTIFIER_TYPE_IPV4_ADDR IdentifierType = 2
	// IDENTIFIER_TYPE_IPV6_ADDR indicates an IPv6 address identifier.
	IdentifierType_IDENTIFIER_TYPE_IPV6_ADDR IdentifierType = 3
	// IDENTIFIER_TYPE_INVENTORY_DEVICE_ID indicates an inventory device identifier.
	IdentifierType_IDENTIFIER_TYPE_INVENTORY_DEVICE_ID IdentifierType = 4
	// IDENTIFIER_TYPE_PRIMARY_MANAGEMENT_IP indicates a primary management IP identifier.
	IdentifierType_IDENTIFIER_TYPE_PRIMARY_MANAGEMENT_IP IdentifierType = 5
	// IDENTIFIER_TYPE_HOSTNAME indicates a hostname identifier.
	IdentifierType_IDENTIFIER_TYPE_HOSTNAME IdentifierType = 6
	// IDENTIFIER_TYPE_USERNAME indicates a username identifier.
	IdentifierType_IDENTIFIER_TYPE_USERNAME IdentifierType = 7
	// IDENTIFIER_TYPE_OTHER is used for an unknown identifier.
	IdentifierType_IDENTIFIER_TYPE_OTHER IdentifierType = 99999
)

// Enum value maps for IdentifierType.
var (
	IdentifierType_name = map[int32]string{
		0:     "IDENTIFIER_TYPE_UNSPECIFIED",
		1:     "IDENTIFIER_TYPE_MAC_ADDR",
		2:     "IDENTIFIER_TYPE_IPV4_ADDR",
		3:     "IDENTIFIER_TYPE_IPV6_ADDR",
		4:     "IDENTIFIER_TYPE_INVENTORY_DEVICE_ID",
		5:     "IDENTIFIER_TYPE_PRIMARY_MANAGEMENT_IP",
		6:     "IDENTIFIER_TYPE_HOSTNAME",
		7:     "IDENTIFIER_TYPE_USERNAME",
		99999: "IDENTIFIER_TYPE_OTHER",
	}
	IdentifierType_value = map[string]int32{
		"IDENTIFIER_TYPE_UNSPECIFIED":           0,
		"IDENTIFIER_TYPE_MAC_ADDR":              1,
		"IDENTIFIER_TYPE_IPV4_ADDR":             2,
		"IDENTIFIER_TYPE_IPV6_ADDR":             3,
		"IDENTIFIER_TYPE_INVENTORY_DEVICE_ID":   4,
		"IDENTIFIER_TYPE_PRIMARY_MANAGEMENT_IP": 5,
		"IDENTIFIER_TYPE_HOSTNAME":              6,
		"IDENTIFIER_TYPE_USERNAME":              7,
		"IDENTIFIER_TYPE_OTHER":                 99999,
	}
)

func (x IdentifierType) Enum() *IdentifierType {
	p := new(IdentifierType)
	*p = x
	return p
}

func (x IdentifierType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IdentifierType) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_endpointlocation_v1_endpointlocation_proto_enumTypes[2].Descriptor()
}

func (IdentifierType) Type() protoreflect.EnumType {
	return &file_arista_endpointlocation_v1_endpointlocation_proto_enumTypes[2]
}

func (x IdentifierType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IdentifierType.Descriptor instead.
func (IdentifierType) EnumDescriptor() ([]byte, []int) {
	return file_arista_endpointlocation_v1_endpointlocation_proto_rawDescGZIP(), []int{2}
}

// IdentifierSource defines the set of network protocols and other
// information sources where an identifier was found.
type IdentifierSource int32

const (
	// IDENTIFIER_SOURCE_UNSPECIFIED is the default unspecified identifier source.
	IdentifierSource_IDENTIFIER_SOURCE_UNSPECIFIED IdentifierSource = 0
	// IDENTIFIER_SOURCE_FDB indicates a forwarding table.
	IdentifierSource_IDENTIFIER_SOURCE_FDB IdentifierSource = 1
	// IDENTIFIER_SOURCE_ARP indicates ARP (IPv4).
	IdentifierSource_IDENTIFIER_SOURCE_ARP IdentifierSource = 2
	// IDENTIFIER_SOURCE_NEIGHBOR indicates NDP (IPv6).
	IdentifierSource_IDENTIFIER_SOURCE_NEIGHBOR IdentifierSource = 3
	// IDENTIFIER_SOURCE_DEVICE_INVENTORY indicates that an endpoint is in the
	// CloudVision inventory.
	IdentifierSource_IDENTIFIER_SOURCE_DEVICE_INVENTORY IdentifierSource = 4
	// IDENTIFIER_SOURCE_LLDP indicates LLDP.
	IdentifierSource_IDENTIFIER_SOURCE_LLDP IdentifierSource = 5
	// IDENTIFIER_SOURCE_DHCP indicates DHCP.
	IdentifierSource_IDENTIFIER_SOURCE_DHCP IdentifierSource = 6
	// IDENTIFIER_SOURCE_WIFI indicates a WiFi endpoint that was learned through
	// a wireless manager.
	IdentifierSource_IDENTIFIER_SOURCE_WIFI IdentifierSource = 7
)

// Enum value maps for IdentifierSource.
var (
	IdentifierSource_name = map[int32]string{
		0: "IDENTIFIER_SOURCE_UNSPECIFIED",
		1: "IDENTIFIER_SOURCE_FDB",
		2: "IDENTIFIER_SOURCE_ARP",
		3: "IDENTIFIER_SOURCE_NEIGHBOR",
		4: "IDENTIFIER_SOURCE_DEVICE_INVENTORY",
		5: "IDENTIFIER_SOURCE_LLDP",
		6: "IDENTIFIER_SOURCE_DHCP",
		7: "IDENTIFIER_SOURCE_WIFI",
	}
	IdentifierSource_value = map[string]int32{
		"IDENTIFIER_SOURCE_UNSPECIFIED":      0,
		"IDENTIFIER_SOURCE_FDB":              1,
		"IDENTIFIER_SOURCE_ARP":              2,
		"IDENTIFIER_SOURCE_NEIGHBOR":         3,
		"IDENTIFIER_SOURCE_DEVICE_INVENTORY": 4,
		"IDENTIFIER_SOURCE_LLDP":             5,
		"IDENTIFIER_SOURCE_DHCP":             6,
		"IDENTIFIER_SOURCE_WIFI":             7,
	}
)

func (x IdentifierSource) Enum() *IdentifierSource {
	p := new(IdentifierSource)
	*p = x
	return p
}

func (x IdentifierSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IdentifierSource) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_endpointlocation_v1_endpointlocation_proto_enumTypes[3].Descriptor()
}

func (IdentifierSource) Type() protoreflect.EnumType {
	return &file_arista_endpointlocation_v1_endpointlocation_proto_enumTypes[3]
}

func (x IdentifierSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IdentifierSource.Descriptor instead.
func (IdentifierSource) EnumDescriptor() ([]byte, []int) {
	return file_arista_endpointlocation_v1_endpointlocation_proto_rawDescGZIP(), []int{3}
}

// Explanation defines the set of reasons for why a location has a certain likelihood.
// Some explanations apply to queried endpoints while others apply to queried devices
// in the CloudVision device inventory.
type Explanation int32

const (
	// EXPLANATION_UNSPECIFIED is the default unspecified explanation.
	Explanation_EXPLANATION_UNSPECIFIED Explanation = 0
	// EXPLANATION_DIRECT_CONNECTION indicates a direct connection to the queried
	// endpoint device discovered via LLDP.
	Explanation_EXPLANATION_DIRECT_CONNECTION Explanation = 1
	// EXPLANATION_NON_INVENTORY_CONNECTION indicates a direct connection to at least
	// one non-inventory device (likely discovered via LLDP).
	Explanation_EXPLANATION_NON_INVENTORY_CONNECTION Explanation = 2
	// EXPLANATION_NO_CONNECTION indicates that a location has no direct connection to
	// any known device.
	Explanation_EXPLANATION_NO_CONNECTION Explanation = 3
	// EXPLANATION_INVENTORY_CONNECTION indicates that all of a location's known connections
	// are to devices in the inventory.
	Explanation_EXPLANATION_INVENTORY_CONNECTION Explanation = 4
	// EXPLANATION_OWN_PORT_INVENTORY_DEVICE indicates a location on the queried inventory
	// device itself.
	Explanation_EXPLANATION_OWN_PORT_INVENTORY_DEVICE Explanation = 5
	// EXPLANATION_DIRECT_CONNECTION_INVENTORY_DEVICE indicates a direct connection to the
	// queried inventory device discovered via LLDP.
	Explanation_EXPLANATION_DIRECT_CONNECTION_INVENTORY_DEVICE Explanation = 6
	// EXPLANATION_NO_CONNECTION_INVENTORY_DEVICE indicates that a location has no direct
	// connection to any known device (for queried inventory devices).
	Explanation_EXPLANATION_NO_CONNECTION_INVENTORY_DEVICE Explanation = 7
	// EXPLANATION_OTHER_CONNECTION_INVENTORY_DEVICE indicates that a location only has
	// connections to other devices besides the queried inventory device.
	Explanation_EXPLANATION_OTHER_CONNECTION_INVENTORY_DEVICE Explanation = 8
	// EXPLANATION_VIRTUAL indicates that a location contains a virtual interface.
	Explanation_EXPLANATION_VIRTUAL Explanation = 9
	// EXPLANATION_WIRELESS_CONNECTION indicates a direct connection from a wireless access
	// point in the device inventory to a wireless client.
	Explanation_EXPLANATION_WIRELESS_CONNECTION Explanation = 10
	// EXPLANATION_ACCESS_PORT indicates that a location is an access port.
	Explanation_EXPLANATION_ACCESS_PORT Explanation = 11
)

// Enum value maps for Explanation.
var (
	Explanation_name = map[int32]string{
		0:  "EXPLANATION_UNSPECIFIED",
		1:  "EXPLANATION_DIRECT_CONNECTION",
		2:  "EXPLANATION_NON_INVENTORY_CONNECTION",
		3:  "EXPLANATION_NO_CONNECTION",
		4:  "EXPLANATION_INVENTORY_CONNECTION",
		5:  "EXPLANATION_OWN_PORT_INVENTORY_DEVICE",
		6:  "EXPLANATION_DIRECT_CONNECTION_INVENTORY_DEVICE",
		7:  "EXPLANATION_NO_CONNECTION_INVENTORY_DEVICE",
		8:  "EXPLANATION_OTHER_CONNECTION_INVENTORY_DEVICE",
		9:  "EXPLANATION_VIRTUAL",
		10: "EXPLANATION_WIRELESS_CONNECTION",
		11: "EXPLANATION_ACCESS_PORT",
	}
	Explanation_value = map[string]int32{
		"EXPLANATION_UNSPECIFIED":                        0,
		"EXPLANATION_DIRECT_CONNECTION":                  1,
		"EXPLANATION_NON_INVENTORY_CONNECTION":           2,
		"EXPLANATION_NO_CONNECTION":                      3,
		"EXPLANATION_INVENTORY_CONNECTION":               4,
		"EXPLANATION_OWN_PORT_INVENTORY_DEVICE":          5,
		"EXPLANATION_DIRECT_CONNECTION_INVENTORY_DEVICE": 6,
		"EXPLANATION_NO_CONNECTION_INVENTORY_DEVICE":     7,
		"EXPLANATION_OTHER_CONNECTION_INVENTORY_DEVICE":  8,
		"EXPLANATION_VIRTUAL":                            9,
		"EXPLANATION_WIRELESS_CONNECTION":                10,
		"EXPLANATION_ACCESS_PORT":                        11,
	}
)

func (x Explanation) Enum() *Explanation {
	p := new(Explanation)
	*p = x
	return p
}

func (x Explanation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Explanation) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_endpointlocation_v1_endpointlocation_proto_enumTypes[4].Descriptor()
}

func (Explanation) Type() protoreflect.EnumType {
	return &file_arista_endpointlocation_v1_endpointlocation_proto_enumTypes[4]
}

func (x Explanation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Explanation.Descriptor instead.
func (Explanation) EnumDescriptor() ([]byte, []int) {
	return file_arista_endpointlocation_v1_endpointlocation_proto_rawDescGZIP(), []int{4}
}

// DeviceType defines a broad set of categories for
// all queried devices.
type DeviceType int32

const (
	// DEVICE_TYPE_UNSPECIFIED is the default unspecified device type.
	DeviceType_DEVICE_TYPE_UNSPECIFIED DeviceType = 0
	// DEVICE_TYPE_INVENTORY indicates a device in the CloudVision inventory.
	DeviceType_DEVICE_TYPE_INVENTORY DeviceType = 1
	// DEVICE_TYPE_ENDPOINT indicates a non-WiFi endpoint that does not exist
	// in the CloudVision inventory.
	DeviceType_DEVICE_TYPE_ENDPOINT DeviceType = 2
	// DEVICE_TYPE_WIFI_ENDPOINT indicates a WiFi client/endpoint that does not
	// exist in the CloudVision inventory.
	DeviceType_DEVICE_TYPE_WIFI_ENDPOINT DeviceType = 3
)

// Enum value maps for DeviceType.
var (
	DeviceType_name = map[int32]string{
		0: "DEVICE_TYPE_UNSPECIFIED",
		1: "DEVICE_TYPE_INVENTORY",
		2: "DEVICE_TYPE_ENDPOINT",
		3: "DEVICE_TYPE_WIFI_ENDPOINT",
	}
	DeviceType_value = map[string]int32{
		"DEVICE_TYPE_UNSPECIFIED":   0,
		"DEVICE_TYPE_INVENTORY":     1,
		"DEVICE_TYPE_ENDPOINT":      2,
		"DEVICE_TYPE_WIFI_ENDPOINT": 3,
	}
)

func (x DeviceType) Enum() *DeviceType {
	p := new(DeviceType)
	*p = x
	return p
}

func (x DeviceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceType) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_endpointlocation_v1_endpointlocation_proto_enumTypes[5].Descriptor()
}

func (DeviceType) Type() protoreflect.EnumType {
	return &file_arista_endpointlocation_v1_endpointlocation_proto_enumTypes[5]
}

func (x DeviceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceType.Descriptor instead.
func (DeviceType) EnumDescriptor() ([]byte, []int) {
	return file_arista_endpointlocation_v1_endpointlocation_proto_rawDescGZIP(), []int{5}
}

// DeviceStatus is the network status of a device.
type DeviceStatus int32

const (
	// DEVICE_STATUS_UNSPECIFIED is the default unspecified device status.
	DeviceStatus_DEVICE_STATUS_UNSPECIFIED DeviceStatus = 0
	// DEVICE_STATUS_ACTIVE indicates a device is streaming its telemetry data
	// to CloudVision.
	DeviceStatus_DEVICE_STATUS_ACTIVE DeviceStatus = 1
	// DEVICE_STATUS_INACTIVE indicates a device is either not streaming its
	// telemetry data to CloudVision or has been decommissioned from CloudVision.
	DeviceStatus_DEVICE_STATUS_INACTIVE DeviceStatus = 2
)

// Enum value maps for DeviceStatus.
var (
	DeviceStatus_name = map[int32]string{
		0: "DEVICE_STATUS_UNSPECIFIED",
		1: "DEVICE_STATUS_ACTIVE",
		2: "DEVICE_STATUS_INACTIVE",
	}
	DeviceStatus_value = map[string]int32{
		"DEVICE_STATUS_UNSPECIFIED": 0,
		"DEVICE_STATUS_ACTIVE":      1,
		"DEVICE_STATUS_INACTIVE":    2,
	}
)

func (x DeviceStatus) Enum() *DeviceStatus {
	p := new(DeviceStatus)
	*p = x
	return p
}

func (x DeviceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_endpointlocation_v1_endpointlocation_proto_enumTypes[6].Descriptor()
}

func (DeviceStatus) Type() protoreflect.EnumType {
	return &file_arista_endpointlocation_v1_endpointlocation_proto_enumTypes[6]
}

func (x DeviceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceStatus.Descriptor instead.
func (DeviceStatus) EnumDescriptor() ([]byte, []int) {
	return file_arista_endpointlocation_v1_endpointlocation_proto_rawDescGZIP(), []int{6}
}

// IdentifierSourceList is a list of IdentifierSource.
type IdentifierSourceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values is an unordered list of unique IdentifierSource.
	Values []IdentifierSource `protobuf:"varint,1,rep,packed,name=values,proto3,enum=arista.endpointlocation.v1.IdentifierSource" json:"values,omitempty"`
}

func (x *IdentifierSourceList) Reset() {
	*x = IdentifierSourceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_endpointlocation_v1_endpointlocation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentifierSourceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentifierSourceList) ProtoMessage() {}

func (x *IdentifierSourceList) ProtoReflect() protoreflect.Message {
	mi := &file_arista_endpointlocation_v1_endpointlocation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentifierSourceList.ProtoReflect.Descriptor instead.
func (*IdentifierSourceList) Descriptor() ([]byte, []int) {
	return file_arista_endpointlocation_v1_endpointlocation_proto_rawDescGZIP(), []int{0}
}

func (x *IdentifierSourceList) GetValues() []IdentifierSource {
	if x != nil {
		return x.Values
	}
	return nil
}

// Identifier holds device identification information.
type Identifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type is the identifier type corresponding to value.
	Type IdentifierType `protobuf:"varint,1,opt,name=type,proto3,enum=arista.endpointlocation.v1.IdentifierType" json:"type,omitempty"`
	// value is the string representation of the identifier. Its interpretation
	// depends on type.
	Value *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// source_list is the set of sources where this identifier was discovered.
	SourceList *IdentifierSourceList `protobuf:"bytes,3,opt,name=source_list,json=sourceList,proto3" json:"source_list,omitempty"`
}

func (x *Identifier) Reset() {
	*x = Identifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_endpointlocation_v1_endpointlocation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identifier) ProtoMessage() {}

func (x *Identifier) ProtoReflect() protoreflect.Message {
	mi := &file_arista_endpointlocation_v1_endpointlocation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identifier.ProtoReflect.Descriptor instead.
func (*Identifier) Descriptor() ([]byte, []int) {
	return file_arista_endpointlocation_v1_endpointlocation_proto_rawDescGZIP(), []int{1}
}

func (x *Identifier) GetType() IdentifierType {
	if x != nil {
		return x.Type
	}
	return IdentifierType_IDENTIFIER_TYPE_UNSPECIFIED
}

func (x *Identifier) GetValue() *wrapperspb.StringValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Identifier) GetSourceList() *IdentifierSourceList {
	if x != nil {
		return x.SourceList
	}
	return nil
}

// IdentifierList is a list of Identifier.
type IdentifierList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values is an unordered list of Identifier where each Identifier has a
	// unique type and value combination.
	Values []*Identifier `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *IdentifierList) Reset() {
	*x = IdentifierList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_endpointlocation_v1_endpointlocation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentifierList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentifierList) ProtoMessage() {}

func (x *IdentifierList) ProtoReflect() protoreflect.Message {
	mi := &file_arista_endpointlocation_v1_endpointlocation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentifierList.ProtoReflect.Descriptor instead.
func (*IdentifierList) Descriptor() ([]byte, []int) {
	return file_arista_endpointlocation_v1_endpointlocation_proto_rawDescGZIP(), []int{2}
}

func (x *IdentifierList) GetValues() []*Identifier {
	if x != nil {
		return x.Values
	}
	return nil
}

// ExplanationList is a list of Explanation.
type ExplanationList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values is a list of unique Explanation. Currently, this will
	// always contain one value, but in the future it may contain
	// more.
	Values []Explanation `protobuf:"varint,1,rep,packed,name=values,proto3,enum=arista.endpointlocation.v1.Explanation" json:"values,omitempty"`
}

func (x *ExplanationList) Reset() {
	*x = ExplanationList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_endpointlocation_v1_endpointlocation_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExplanationList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExplanationList) ProtoMessage() {}

func (x *ExplanationList) ProtoReflect() protoreflect.Message {
	mi := &file_arista_endpointlocation_v1_endpointlocation_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExplanationList.ProtoReflect.Descriptor instead.
func (*ExplanationList) Descriptor() ([]byte, []int) {
	return file_arista_endpointlocation_v1_endpointlocation_proto_rawDescGZIP(), []int{3}
}

func (x *ExplanationList) GetValues() []Explanation {
	if x != nil {
		return x.Values
	}
	return nil
}

// Location is a port (device_id, interface, vlan_id) on which
// at least one identifier has been discovered.
type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// device_id identifies the device of the port.
	DeviceId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// device_status is the status of the device identified by device_id.
	DeviceStatus DeviceStatus `protobuf:"varint,2,opt,name=device_status,json=deviceStatus,proto3,enum=arista.endpointlocation.v1.DeviceStatus" json:"device_status,omitempty"`
	// interface is the interface of the port.
	Interface *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=interface,proto3" json:"interface,omitempty"`
	// vlan_id identifies the VLAN of the port.
	VlanId *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
	// learned_time is when the port learned its identifiers.
	LearnedTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=learned_time,json=learnedTime,proto3" json:"learned_time,omitempty"`
	// mac_type is how the port learned its MAC address identifier.
	MacType MacType `protobuf:"varint,6,opt,name=mac_type,json=macType,proto3,enum=arista.endpointlocation.v1.MacType" json:"mac_type,omitempty"`
	// likelihood is the probability level that the port is directly connected
	// to the queried endpoint.
	Likelihood Likelihood `protobuf:"varint,7,opt,name=likelihood,proto3,enum=arista.endpointlocation.v1.Likelihood" json:"likelihood,omitempty"`
	// explanation_list holds the reasons that the port was assigned likelihood.
	ExplanationList *ExplanationList `protobuf:"bytes,8,opt,name=explanation_list,json=explanationList,proto3" json:"explanation_list,omitempty"`
	// identifier_list holds the discovered identifiers of the port.
	IdentifierList *IdentifierList `protobuf:"bytes,9,opt,name=identifier_list,json=identifierList,proto3" json:"identifier_list,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_endpointlocation_v1_endpointlocation_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_arista_endpointlocation_v1_endpointlocation_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_arista_endpointlocation_v1_endpointlocation_proto_rawDescGZIP(), []int{4}
}

func (x *Location) GetDeviceId() *wrapperspb.StringValue {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

func (x *Location) GetDeviceStatus() DeviceStatus {
	if x != nil {
		return x.DeviceStatus
	}
	return DeviceStatus_DEVICE_STATUS_UNSPECIFIED
}

func (x *Location) GetInterface() *wrapperspb.StringValue {
	if x != nil {
		return x.Interface
	}
	return nil
}

func (x *Location) GetVlanId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.VlanId
	}
	return nil
}

func (x *Location) GetLearnedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LearnedTime
	}
	return nil
}

func (x *Location) GetMacType() MacType {
	if x != nil {
		return x.MacType
	}
	return MacType_MAC_TYPE_UNSPECIFIED
}

func (x *Location) GetLikelihood() Likelihood {
	if x != nil {
		return x.Likelihood
	}
	return Likelihood_LIKELIHOOD_UNSPECIFIED
}

func (x *Location) GetExplanationList() *ExplanationList {
	if x != nil {
		return x.ExplanationList
	}
	return nil
}

func (x *Location) GetIdentifierList() *IdentifierList {
	if x != nil {
		return x.IdentifierList
	}
	return nil
}

// LocationList is a list of Location.
type LocationList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values is a list of unique Location.
	Values []*Location `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *LocationList) Reset() {
	*x = LocationList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_endpointlocation_v1_endpointlocation_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationList) ProtoMessage() {}

func (x *LocationList) ProtoReflect() protoreflect.Message {
	mi := &file_arista_endpointlocation_v1_endpointlocation_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationList.ProtoReflect.Descriptor instead.
func (*LocationList) Descriptor() ([]byte, []int) {
	return file_arista_endpointlocation_v1_endpointlocation_proto_rawDescGZIP(), []int{5}
}

func (x *LocationList) GetValues() []*Location {
	if x != nil {
		return x.Values
	}
	return nil
}

// DeviceInfo holds various attributes of a device (typically an endpoint) from Fingerbank.
type DeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// device_name is the name of the device.
	DeviceName *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	// mobile indicates whether the device is a mobile.
	Mobile *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=mobile,proto3" json:"mobile,omitempty"`
	// tablet indicates whether the device is a tablet.
	Tablet *wrapperspb.BoolValue `protobuf:"bytes,3,opt,name=tablet,proto3" json:"tablet,omitempty"`
	// score is a value from 0 to 100 that indicates how confident we are
	// that the device has device_name.
	// Fingerbank API documentation of score: https://api.fingerbank.org/api_doc/2/combinations.html
	Score *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=score,proto3" json:"score,omitempty"`
	// version is the version of device_name.
	Version *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	// mac_vendor is the enterprise that assigns the MAC address of the device.
	MacVendor *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=mac_vendor,json=macVendor,proto3" json:"mac_vendor,omitempty"`
	// classification is the broadest category to which device_name belongs.
	// This is the highest level in hierarchy.
	Classification *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=classification,proto3" json:"classification,omitempty"`
	// hierarchy is a list of categorizations of the device from most broad
	// to most specific. The first element is always classification and the
	// last element is always device_name.
	//
	// For example,
	//
	// ["VoIP Device", "FooInc VoIP", "FooInc PhoneSet IP", "FooInc PhoneSet IP Model123"]
	//
	// In this hierarchy, "VoIP Device" is classification and "FooInc PhoneSet IP Model123"
	// is device_name.
	Hierarchy *fmp.RepeatedString `protobuf:"bytes,8,opt,name=hierarchy,proto3" json:"hierarchy,omitempty"`
}

func (x *DeviceInfo) Reset() {
	*x = DeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_endpointlocation_v1_endpointlocation_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfo) ProtoMessage() {}

func (x *DeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_arista_endpointlocation_v1_endpointlocation_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfo.ProtoReflect.Descriptor instead.
func (*DeviceInfo) Descriptor() ([]byte, []int) {
	return file_arista_endpointlocation_v1_endpointlocation_proto_rawDescGZIP(), []int{6}
}

func (x *DeviceInfo) GetDeviceName() *wrapperspb.StringValue {
	if x != nil {
		return x.DeviceName
	}
	return nil
}

func (x *DeviceInfo) GetMobile() *wrapperspb.BoolValue {
	if x != nil {
		return x.Mobile
	}
	return nil
}

func (x *DeviceInfo) GetTablet() *wrapperspb.BoolValue {
	if x != nil {
		return x.Tablet
	}
	return nil
}

func (x *DeviceInfo) GetScore() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Score
	}
	return nil
}

func (x *DeviceInfo) GetVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *DeviceInfo) GetMacVendor() *wrapperspb.StringValue {
	if x != nil {
		return x.MacVendor
	}
	return nil
}

func (x *DeviceInfo) GetClassification() *wrapperspb.StringValue {
	if x != nil {
		return x.Classification
	}
	return nil
}

func (x *DeviceInfo) GetHierarchy() *fmp.RepeatedString {
	if x != nil {
		return x.Hierarchy
	}
	return nil
}

// Device holds information for a device matching a search term.
type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// identifier_list holds the unique identifiers for the device.
	IdentifierList *IdentifierList `protobuf:"bytes,1,opt,name=identifier_list,json=identifierList,proto3" json:"identifier_list,omitempty"`
	// device_type is the broad category of the device.
	DeviceType DeviceType `protobuf:"varint,2,opt,name=device_type,json=deviceType,proto3,enum=arista.endpointlocation.v1.DeviceType" json:"device_type,omitempty"`
	// location_list is the list of possible locations of the device.
	// It is ordered from most likely to least likely.
	LocationList *LocationList `protobuf:"bytes,3,opt,name=location_list,json=locationList,proto3" json:"location_list,omitempty"`
	// device_status is the network status of the device.
	DeviceStatus DeviceStatus `protobuf:"varint,4,opt,name=device_status,json=deviceStatus,proto3,enum=arista.endpointlocation.v1.DeviceStatus" json:"device_status,omitempty"`
	// device_info holds various attributes of the device.
	DeviceInfo *DeviceInfo `protobuf:"bytes,5,opt,name=device_info,json=deviceInfo,proto3" json:"device_info,omitempty"`
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_endpointlocation_v1_endpointlocation_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_arista_endpointlocation_v1_endpointlocation_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_arista_endpointlocation_v1_endpointlocation_proto_rawDescGZIP(), []int{7}
}

func (x *Device) GetIdentifierList() *IdentifierList {
	if x != nil {
		return x.IdentifierList
	}
	return nil
}

func (x *Device) GetDeviceType() DeviceType {
	if x != nil {
		return x.DeviceType
	}
	return DeviceType_DEVICE_TYPE_UNSPECIFIED
}

func (x *Device) GetLocationList() *LocationList {
	if x != nil {
		return x.LocationList
	}
	return nil
}

func (x *Device) GetDeviceStatus() DeviceStatus {
	if x != nil {
		return x.DeviceStatus
	}
	return DeviceStatus_DEVICE_STATUS_UNSPECIFIED
}

func (x *Device) GetDeviceInfo() *DeviceInfo {
	if x != nil {
		return x.DeviceInfo
	}
	return nil
}

// DeviceMap is a collection of Device.
type DeviceMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values is a map from most specific identifier to Device.
	// The key could be device serial number or MAC address.
	Values map[string]*Device `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DeviceMap) Reset() {
	*x = DeviceMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_endpointlocation_v1_endpointlocation_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceMap) ProtoMessage() {}

func (x *DeviceMap) ProtoReflect() protoreflect.Message {
	mi := &file_arista_endpointlocation_v1_endpointlocation_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceMap.ProtoReflect.Descriptor instead.
func (*DeviceMap) Descriptor() ([]byte, []int) {
	return file_arista_endpointlocation_v1_endpointlocation_proto_rawDescGZIP(), []int{8}
}

func (x *DeviceMap) GetValues() map[string]*Device {
	if x != nil {
		return x.Values
	}
	return nil
}

// EndpointLocationKey holds a search term used to locate an endpoint.
type EndpointLocationKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// search_term is used to match against identifiers on devices.
	// This could be a MAC/IP address, hostname, etc.
	SearchTerm *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=search_term,json=searchTerm,proto3" json:"search_term,omitempty"`
}

func (x *EndpointLocationKey) Reset() {
	*x = EndpointLocationKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_endpointlocation_v1_endpointlocation_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndpointLocationKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointLocationKey) ProtoMessage() {}

func (x *EndpointLocationKey) ProtoReflect() protoreflect.Message {
	mi := &file_arista_endpointlocation_v1_endpointlocation_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointLocationKey.ProtoReflect.Descriptor instead.
func (*EndpointLocationKey) Descriptor() ([]byte, []int) {
	return file_arista_endpointlocation_v1_endpointlocation_proto_rawDescGZIP(), []int{9}
}

func (x *EndpointLocationKey) GetSearchTerm() *wrapperspb.StringValue {
	if x != nil {
		return x.SearchTerm
	}
	return nil
}

// EndpointLocation is the entrypoint to searching for
// endpoints.
type EndpointLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key holds a search term used to locate an endpoint.
	Key *EndpointLocationKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// device_map holds the devices (and their potential locations)
	// that match the search term.
	DeviceMap *DeviceMap `protobuf:"bytes,2,opt,name=device_map,json=deviceMap,proto3" json:"device_map,omitempty"`
}

func (x *EndpointLocation) Reset() {
	*x = EndpointLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_endpointlocation_v1_endpointlocation_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndpointLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointLocation) ProtoMessage() {}

func (x *EndpointLocation) ProtoReflect() protoreflect.Message {
	mi := &file_arista_endpointlocation_v1_endpointlocation_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointLocation.ProtoReflect.Descriptor instead.
func (*EndpointLocation) Descriptor() ([]byte, []int) {
	return file_arista_endpointlocation_v1_endpointlocation_proto_rawDescGZIP(), []int{10}
}

func (x *EndpointLocation) GetKey() *EndpointLocationKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *EndpointLocation) GetDeviceMap() *DeviceMap {
	if x != nil {
		return x.DeviceMap
	}
	return nil
}

var File_arista_endpointlocation_v1_endpointlocation_proto protoreflect.FileDescriptor

var file_arista_endpointlocation_v1_endpointlocation_proto_rawDesc = []byte{
	0x0a, 0x31, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x14, 0x66, 0x6d, 0x70, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x66, 0x6d, 0x70, 0x2f, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5c, 0x0a, 0x14, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x44, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xd3, 0x01, 0x0a, 0x0a, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x51, 0x0a, 0x0b, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x50,
	0x0a, 0x0e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x3e, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x22, 0x52, 0x0a, 0x0f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x22, 0xfb, 0x04, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x39, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x0d,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x3d,
	0x0a, 0x0c, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0b, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a,
	0x08, 0x6d, 0x61, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x63,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a,
	0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x6c, 0x69, 0x68, 0x6f, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x6b, 0x65, 0x6c, 0x69, 0x68, 0x6f, 0x6f, 0x64, 0x52, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x6c,
	0x69, 0x68, 0x6f, 0x6f, 0x64, 0x12, 0x56, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0f, 0x65, 0x78,
	0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x53, 0x0a,
	0x0f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x4c, 0x0a, 0x0c, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x3c, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x22, 0xd5, 0x03, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x3d, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32,
	0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6d, 0x61, 0x63, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12,
	0x44, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x09, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63,
	0x68, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x52,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x68,
	0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x22, 0x8d, 0x03, 0x0a, 0x06, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x53, 0x0a, 0x0f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x4d, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x4d, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x47, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xb5, 0x01, 0x0a, 0x09, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x49, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x1a, 0x5d, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x5a, 0x0a, 0x13, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x54, 0x65, 0x72, 0x6d, 0x3a, 0x04, 0x80, 0x8e, 0x19, 0x01, 0x22, 0xa3, 0x01, 0x0a,
	0x10, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x41, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x44, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x52,
	0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02,
	0x72, 0x6f, 0x2a, 0xc9, 0x06, 0x0a, 0x07, 0x4d, 0x61, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x14, 0x4d, 0x41, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x41, 0x43, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x45, 0x44, 0x5f, 0x44, 0x59, 0x4e,
	0x41, 0x4d, 0x49, 0x43, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x41, 0x43, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x45, 0x44, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52,
	0x45, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x41, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x45, 0x44, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d,
	0x49, 0x43, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x41, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x45, 0x44, 0x5f, 0x53, 0x45, 0x43, 0x55,
	0x52, 0x45, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x41, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x49, 0x43, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x41, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x10, 0x06, 0x12,
	0x18, 0x0a, 0x14, 0x4d, 0x41, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x45, 0x52,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x41, 0x43,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52,
	0x45, 0x10, 0x08, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x41, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4c, 0x45, 0x41, 0x52, 0x4e, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x10, 0x09,
	0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x41, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x55, 0x52, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x10, 0x0a,
	0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x41, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x43,
	0x45, 0x49, 0x56, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x10, 0x0b, 0x12, 0x20,
	0x0a, 0x1c, 0x4d, 0x41, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f,
	0x4c, 0x45, 0x41, 0x52, 0x4e, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x10, 0x0c,
	0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x41, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x45,
	0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x4d,
	0x4f, 0x54, 0x45, 0x10, 0x0d, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x41, 0x43, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x44, 0x5f,
	0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x10, 0x0e, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x41, 0x43, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x56, 0x50, 0x4e, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49,
	0x43, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x10, 0x0f, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x41,
	0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x56, 0x50, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x55, 0x52, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x10, 0x10, 0x12,
	0x1d, 0x0a, 0x19, 0x4d, 0x41, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x45, 0x52,
	0x5f, 0x45, 0x56, 0x50, 0x4e, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x10, 0x11, 0x12, 0x1e,
	0x0a, 0x1a, 0x4d, 0x41, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x55, 0x52, 0x45, 0x44, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x10, 0x12, 0x12, 0x18,
	0x0a, 0x14, 0x4d, 0x41, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f,
	0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x10, 0x13, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x41, 0x43, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x56, 0x50, 0x4e, 0x5f, 0x49, 0x4e, 0x54, 0x46, 0x5f, 0x44,
	0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x10, 0x14, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x41, 0x43, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x56, 0x50, 0x4e, 0x5f, 0x49, 0x4e, 0x54, 0x46, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x15, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x41, 0x43, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x45,
	0x44, 0x10, 0x16, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x41, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x45, 0x45, 0x52, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x17, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x41, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x45, 0x10,
	0x18, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x41, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4f,
	0x46, 0x54, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x45, 0x44, 0x5f, 0x44,
	0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x10, 0x19, 0x12, 0x14, 0x0a, 0x0e, 0x4d, 0x41, 0x43, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x9f, 0x8d, 0x06, 0x2a, 0x97,
	0x01, 0x0a, 0x0a, 0x4c, 0x69, 0x6b, 0x65, 0x6c, 0x69, 0x68, 0x6f, 0x6f, 0x64, 0x12, 0x1a, 0x0a,
	0x16, 0x4c, 0x49, 0x4b, 0x45, 0x4c, 0x49, 0x48, 0x4f, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x49, 0x4b,
	0x45, 0x4c, 0x49, 0x48, 0x4f, 0x4f, 0x44, 0x5f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x4c, 0x49, 0x4b,
	0x45, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x49, 0x4b, 0x45, 0x4c, 0x49, 0x48,
	0x4f, 0x4f, 0x44, 0x5f, 0x4c, 0x49, 0x4b, 0x45, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a,
	0x4c, 0x49, 0x4b, 0x45, 0x4c, 0x49, 0x48, 0x4f, 0x4f, 0x44, 0x5f, 0x53, 0x4f, 0x4d, 0x45, 0x57,
	0x48, 0x41, 0x54, 0x5f, 0x4c, 0x49, 0x4b, 0x45, 0x4c, 0x59, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16,
	0x4c, 0x49, 0x4b, 0x45, 0x4c, 0x49, 0x48, 0x4f, 0x4f, 0x44, 0x5f, 0x4c, 0x45, 0x53, 0x53, 0x5f,
	0x4c, 0x49, 0x4b, 0x45, 0x4c, 0x59, 0x10, 0x04, 0x2a, 0xba, 0x02, 0x0a, 0x0e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x49,
	0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18,
	0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x41, 0x43, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x44,
	0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50,
	0x56, 0x34, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x44, 0x45,
	0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56,
	0x36, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x49, 0x44, 0x45, 0x4e,
	0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x45,
	0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x10,
	0x04, 0x12, 0x29, 0x0a, 0x25, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x4d, 0x41, 0x4e,
	0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x50, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18,
	0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x48, 0x4f, 0x53, 0x54, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x44,
	0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x07, 0x12, 0x1b, 0x0a, 0x15, 0x49, 0x44, 0x45, 0x4e,
	0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0x9f, 0x8d, 0x06, 0x2a, 0x87, 0x02, 0x0a, 0x10, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x44,
	0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x46, 0x44, 0x42, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x44, 0x45, 0x4e,
	0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x52,
	0x50, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45,
	0x52, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f,
	0x52, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45,
	0x52, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x49,
	0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x4c, 0x4c, 0x44, 0x50, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x44, 0x45, 0x4e, 0x54,
	0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x48, 0x43,
	0x50, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45,
	0x52, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x57, 0x49, 0x46, 0x49, 0x10, 0x07, 0x2a,
	0xd9, 0x03, 0x0a, 0x0b, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1b, 0x0a, 0x17, 0x45, 0x58, 0x50, 0x4c, 0x41, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d,
	0x45, 0x58, 0x50, 0x4c, 0x41, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x52, 0x45,
	0x43, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12,
	0x28, 0x0a, 0x24, 0x45, 0x58, 0x50, 0x4c, 0x41, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e,
	0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x58, 0x50,
	0x4c, 0x41, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x58, 0x50, 0x4c,
	0x41, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52,
	0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x29,
	0x0a, 0x25, 0x45, 0x58, 0x50, 0x4c, 0x41, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x57,
	0x4e, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59,
	0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x05, 0x12, 0x32, 0x0a, 0x2e, 0x45, 0x58, 0x50,
	0x4c, 0x41, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e,
	0x54, 0x4f, 0x52, 0x59, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x06, 0x12, 0x2e, 0x0a,
	0x2a, 0x45, 0x58, 0x50, 0x4c, 0x41, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x5f,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e,
	0x54, 0x4f, 0x52, 0x59, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x07, 0x12, 0x31, 0x0a,
	0x2d, 0x45, 0x58, 0x50, 0x4c, 0x41, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e,
	0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x08,
	0x12, 0x17, 0x0a, 0x13, 0x45, 0x58, 0x50, 0x4c, 0x41, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x10, 0x09, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x58, 0x50,
	0x4c, 0x41, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x57, 0x49, 0x52, 0x45, 0x4c, 0x45, 0x53,
	0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0a, 0x12, 0x1b,
	0x0a, 0x17, 0x45, 0x58, 0x50, 0x4c, 0x41, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x0b, 0x2a, 0x7d, 0x0a, 0x0a, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x10,
	0x01, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x49, 0x46, 0x49, 0x5f,
	0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x03, 0x2a, 0x63, 0x0a, 0x0c, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x42,
	0x5a, 0x5a, 0x58, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x3b, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_arista_endpointlocation_v1_endpointlocation_proto_rawDescOnce sync.Once
	file_arista_endpointlocation_v1_endpointlocation_proto_rawDescData = file_arista_endpointlocation_v1_endpointlocation_proto_rawDesc
)

func file_arista_endpointlocation_v1_endpointlocation_proto_rawDescGZIP() []byte {
	file_arista_endpointlocation_v1_endpointlocation_proto_rawDescOnce.Do(func() {
		file_arista_endpointlocation_v1_endpointlocation_proto_rawDescData = protoimpl.X.CompressGZIP(file_arista_endpointlocation_v1_endpointlocation_proto_rawDescData)
	})
	return file_arista_endpointlocation_v1_endpointlocation_proto_rawDescData
}

var file_arista_endpointlocation_v1_endpointlocation_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_arista_endpointlocation_v1_endpointlocation_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_arista_endpointlocation_v1_endpointlocation_proto_goTypes = []interface{}{
	(MacType)(0),                   // 0: arista.endpointlocation.v1.MacType
	(Likelihood)(0),                // 1: arista.endpointlocation.v1.Likelihood
	(IdentifierType)(0),            // 2: arista.endpointlocation.v1.IdentifierType
	(IdentifierSource)(0),          // 3: arista.endpointlocation.v1.IdentifierSource
	(Explanation)(0),               // 4: arista.endpointlocation.v1.Explanation
	(DeviceType)(0),                // 5: arista.endpointlocation.v1.DeviceType
	(DeviceStatus)(0),              // 6: arista.endpointlocation.v1.DeviceStatus
	(*IdentifierSourceList)(nil),   // 7: arista.endpointlocation.v1.IdentifierSourceList
	(*Identifier)(nil),             // 8: arista.endpointlocation.v1.Identifier
	(*IdentifierList)(nil),         // 9: arista.endpointlocation.v1.IdentifierList
	(*ExplanationList)(nil),        // 10: arista.endpointlocation.v1.ExplanationList
	(*Location)(nil),               // 11: arista.endpointlocation.v1.Location
	(*LocationList)(nil),           // 12: arista.endpointlocation.v1.LocationList
	(*DeviceInfo)(nil),             // 13: arista.endpointlocation.v1.DeviceInfo
	(*Device)(nil),                 // 14: arista.endpointlocation.v1.Device
	(*DeviceMap)(nil),              // 15: arista.endpointlocation.v1.DeviceMap
	(*EndpointLocationKey)(nil),    // 16: arista.endpointlocation.v1.EndpointLocationKey
	(*EndpointLocation)(nil),       // 17: arista.endpointlocation.v1.EndpointLocation
	nil,                            // 18: arista.endpointlocation.v1.DeviceMap.ValuesEntry
	(*wrapperspb.StringValue)(nil), // 19: google.protobuf.StringValue
	(*wrapperspb.UInt32Value)(nil), // 20: google.protobuf.UInt32Value
	(*timestamppb.Timestamp)(nil),  // 21: google.protobuf.Timestamp
	(*wrapperspb.BoolValue)(nil),   // 22: google.protobuf.BoolValue
	(*fmp.RepeatedString)(nil),     // 23: fmp.RepeatedString
}
var file_arista_endpointlocation_v1_endpointlocation_proto_depIdxs = []int32{
	3,  // 0: arista.endpointlocation.v1.IdentifierSourceList.values:type_name -> arista.endpointlocation.v1.IdentifierSource
	2,  // 1: arista.endpointlocation.v1.Identifier.type:type_name -> arista.endpointlocation.v1.IdentifierType
	19, // 2: arista.endpointlocation.v1.Identifier.value:type_name -> google.protobuf.StringValue
	7,  // 3: arista.endpointlocation.v1.Identifier.source_list:type_name -> arista.endpointlocation.v1.IdentifierSourceList
	8,  // 4: arista.endpointlocation.v1.IdentifierList.values:type_name -> arista.endpointlocation.v1.Identifier
	4,  // 5: arista.endpointlocation.v1.ExplanationList.values:type_name -> arista.endpointlocation.v1.Explanation
	19, // 6: arista.endpointlocation.v1.Location.device_id:type_name -> google.protobuf.StringValue
	6,  // 7: arista.endpointlocation.v1.Location.device_status:type_name -> arista.endpointlocation.v1.DeviceStatus
	19, // 8: arista.endpointlocation.v1.Location.interface:type_name -> google.protobuf.StringValue
	20, // 9: arista.endpointlocation.v1.Location.vlan_id:type_name -> google.protobuf.UInt32Value
	21, // 10: arista.endpointlocation.v1.Location.learned_time:type_name -> google.protobuf.Timestamp
	0,  // 11: arista.endpointlocation.v1.Location.mac_type:type_name -> arista.endpointlocation.v1.MacType
	1,  // 12: arista.endpointlocation.v1.Location.likelihood:type_name -> arista.endpointlocation.v1.Likelihood
	10, // 13: arista.endpointlocation.v1.Location.explanation_list:type_name -> arista.endpointlocation.v1.ExplanationList
	9,  // 14: arista.endpointlocation.v1.Location.identifier_list:type_name -> arista.endpointlocation.v1.IdentifierList
	11, // 15: arista.endpointlocation.v1.LocationList.values:type_name -> arista.endpointlocation.v1.Location
	19, // 16: arista.endpointlocation.v1.DeviceInfo.device_name:type_name -> google.protobuf.StringValue
	22, // 17: arista.endpointlocation.v1.DeviceInfo.mobile:type_name -> google.protobuf.BoolValue
	22, // 18: arista.endpointlocation.v1.DeviceInfo.tablet:type_name -> google.protobuf.BoolValue
	20, // 19: arista.endpointlocation.v1.DeviceInfo.score:type_name -> google.protobuf.UInt32Value
	19, // 20: arista.endpointlocation.v1.DeviceInfo.version:type_name -> google.protobuf.StringValue
	19, // 21: arista.endpointlocation.v1.DeviceInfo.mac_vendor:type_name -> google.protobuf.StringValue
	19, // 22: arista.endpointlocation.v1.DeviceInfo.classification:type_name -> google.protobuf.StringValue
	23, // 23: arista.endpointlocation.v1.DeviceInfo.hierarchy:type_name -> fmp.RepeatedString
	9,  // 24: arista.endpointlocation.v1.Device.identifier_list:type_name -> arista.endpointlocation.v1.IdentifierList
	5,  // 25: arista.endpointlocation.v1.Device.device_type:type_name -> arista.endpointlocation.v1.DeviceType
	12, // 26: arista.endpointlocation.v1.Device.location_list:type_name -> arista.endpointlocation.v1.LocationList
	6,  // 27: arista.endpointlocation.v1.Device.device_status:type_name -> arista.endpointlocation.v1.DeviceStatus
	13, // 28: arista.endpointlocation.v1.Device.device_info:type_name -> arista.endpointlocation.v1.DeviceInfo
	18, // 29: arista.endpointlocation.v1.DeviceMap.values:type_name -> arista.endpointlocation.v1.DeviceMap.ValuesEntry
	19, // 30: arista.endpointlocation.v1.EndpointLocationKey.search_term:type_name -> google.protobuf.StringValue
	16, // 31: arista.endpointlocation.v1.EndpointLocation.key:type_name -> arista.endpointlocation.v1.EndpointLocationKey
	15, // 32: arista.endpointlocation.v1.EndpointLocation.device_map:type_name -> arista.endpointlocation.v1.DeviceMap
	14, // 33: arista.endpointlocation.v1.DeviceMap.ValuesEntry.value:type_name -> arista.endpointlocation.v1.Device
	34, // [34:34] is the sub-list for method output_type
	34, // [34:34] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_arista_endpointlocation_v1_endpointlocation_proto_init() }
func file_arista_endpointlocation_v1_endpointlocation_proto_init() {
	if File_arista_endpointlocation_v1_endpointlocation_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_arista_endpointlocation_v1_endpointlocation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentifierSourceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_endpointlocation_v1_endpointlocation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_endpointlocation_v1_endpointlocation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentifierList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_endpointlocation_v1_endpointlocation_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExplanationList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_endpointlocation_v1_endpointlocation_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_endpointlocation_v1_endpointlocation_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_endpointlocation_v1_endpointlocation_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_endpointlocation_v1_endpointlocation_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_endpointlocation_v1_endpointlocation_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_endpointlocation_v1_endpointlocation_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndpointLocationKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_endpointlocation_v1_endpointlocation_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndpointLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_arista_endpointlocation_v1_endpointlocation_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_arista_endpointlocation_v1_endpointlocation_proto_goTypes,
		DependencyIndexes: file_arista_endpointlocation_v1_endpointlocation_proto_depIdxs,
		EnumInfos:         file_arista_endpointlocation_v1_endpointlocation_proto_enumTypes,
		MessageInfos:      file_arista_endpointlocation_v1_endpointlocation_proto_msgTypes,
	}.Build()
	File_arista_endpointlocation_v1_endpointlocation_proto = out.File
	file_arista_endpointlocation_v1_endpointlocation_proto_rawDesc = nil
	file_arista_endpointlocation_v1_endpointlocation_proto_goTypes = nil
	file_arista_endpointlocation_v1_endpointlocation_proto_depIdxs = nil
}
