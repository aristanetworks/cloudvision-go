// Copyright (c) 2020 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.0
// 	protoc        v4.24.4
// source: arista/inventory.v1/inventory.proto

package inventory

import (
	fmp "github.com/aristanetworks/cloudvision-go/api/fmp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// StreamingStatus defines the status of telemetry streaming for a device.
type StreamingStatus int32

const (
	StreamingStatus_STREAMING_STATUS_UNSPECIFIED StreamingStatus = 0
	// STREAMING_STATUS_INACTIVE indicates the device is not streaming telemetry.
	StreamingStatus_STREAMING_STATUS_INACTIVE StreamingStatus = 1
	// STREAMING_STATUS_ACTIVE indicates the device is streaming telemetry.
	StreamingStatus_STREAMING_STATUS_ACTIVE StreamingStatus = 2
)

// Enum value maps for StreamingStatus.
var (
	StreamingStatus_name = map[int32]string{
		0: "STREAMING_STATUS_UNSPECIFIED",
		1: "STREAMING_STATUS_INACTIVE",
		2: "STREAMING_STATUS_ACTIVE",
	}
	StreamingStatus_value = map[string]int32{
		"STREAMING_STATUS_UNSPECIFIED": 0,
		"STREAMING_STATUS_INACTIVE":    1,
		"STREAMING_STATUS_ACTIVE":      2,
	}
)

func (x StreamingStatus) Enum() *StreamingStatus {
	p := new(StreamingStatus)
	*p = x
	return p
}

func (x StreamingStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamingStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_inventory_v1_inventory_proto_enumTypes[0].Descriptor()
}

func (StreamingStatus) Type() protoreflect.EnumType {
	return &file_arista_inventory_v1_inventory_proto_enumTypes[0]
}

func (x StreamingStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamingStatus.Descriptor instead.
func (StreamingStatus) EnumDescriptor() ([]byte, []int) {
	return file_arista_inventory_v1_inventory_proto_rawDescGZIP(), []int{0}
}

// OnboardingStatus defines the set of possible states in the onboarding process
// for a device.
type OnboardingStatus int32

const (
	OnboardingStatus_ONBOARDING_STATUS_UNSPECIFIED OnboardingStatus = 0
	// ONBOARDING_STATUS_IN_PROGRESS indicates onboarding is in progress.
	OnboardingStatus_ONBOARDING_STATUS_IN_PROGRESS OnboardingStatus = 1
	// ONBOARDING_STATUS_FAILURE indicates onboarding failed.
	OnboardingStatus_ONBOARDING_STATUS_FAILURE OnboardingStatus = 2
	// ONBOARDING_STATUS_SUCCESS indicates onboarding succeeded.
	OnboardingStatus_ONBOARDING_STATUS_SUCCESS OnboardingStatus = 3
)

// Enum value maps for OnboardingStatus.
var (
	OnboardingStatus_name = map[int32]string{
		0: "ONBOARDING_STATUS_UNSPECIFIED",
		1: "ONBOARDING_STATUS_IN_PROGRESS",
		2: "ONBOARDING_STATUS_FAILURE",
		3: "ONBOARDING_STATUS_SUCCESS",
	}
	OnboardingStatus_value = map[string]int32{
		"ONBOARDING_STATUS_UNSPECIFIED": 0,
		"ONBOARDING_STATUS_IN_PROGRESS": 1,
		"ONBOARDING_STATUS_FAILURE":     2,
		"ONBOARDING_STATUS_SUCCESS":     3,
	}
)

func (x OnboardingStatus) Enum() *OnboardingStatus {
	p := new(OnboardingStatus)
	*p = x
	return p
}

func (x OnboardingStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OnboardingStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_inventory_v1_inventory_proto_enumTypes[1].Descriptor()
}

func (OnboardingStatus) Type() protoreflect.EnumType {
	return &file_arista_inventory_v1_inventory_proto_enumTypes[1]
}

func (x OnboardingStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OnboardingStatus.Descriptor instead.
func (OnboardingStatus) EnumDescriptor() ([]byte, []int) {
	return file_arista_inventory_v1_inventory_proto_rawDescGZIP(), []int{1}
}

// DecommissioningStatus defines the set of possible states in the decommissioning
// process for a device.
type DecommissioningStatus int32

const (
	DecommissioningStatus_DECOMMISSIONING_STATUS_UNSPECIFIED DecommissioningStatus = 0
	// DECOMMISSIONING_STATUS_IN_PROGRESS indicates decommissioning is in progress.
	DecommissioningStatus_DECOMMISSIONING_STATUS_IN_PROGRESS DecommissioningStatus = 1
	// DECOMMISSIONING_STATUS_FAILURE indicates decommissioning failed.
	DecommissioningStatus_DECOMMISSIONING_STATUS_FAILURE DecommissioningStatus = 2
	// DECOMMISSIONING_STATUS_SUCCESS indicates decommissioning succeeded.
	DecommissioningStatus_DECOMMISSIONING_STATUS_SUCCESS DecommissioningStatus = 3
)

// Enum value maps for DecommissioningStatus.
var (
	DecommissioningStatus_name = map[int32]string{
		0: "DECOMMISSIONING_STATUS_UNSPECIFIED",
		1: "DECOMMISSIONING_STATUS_IN_PROGRESS",
		2: "DECOMMISSIONING_STATUS_FAILURE",
		3: "DECOMMISSIONING_STATUS_SUCCESS",
	}
	DecommissioningStatus_value = map[string]int32{
		"DECOMMISSIONING_STATUS_UNSPECIFIED": 0,
		"DECOMMISSIONING_STATUS_IN_PROGRESS": 1,
		"DECOMMISSIONING_STATUS_FAILURE":     2,
		"DECOMMISSIONING_STATUS_SUCCESS":     3,
	}
)

func (x DecommissioningStatus) Enum() *DecommissioningStatus {
	p := new(DecommissioningStatus)
	*p = x
	return p
}

func (x DecommissioningStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DecommissioningStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_inventory_v1_inventory_proto_enumTypes[2].Descriptor()
}

func (DecommissioningStatus) Type() protoreflect.EnumType {
	return &file_arista_inventory_v1_inventory_proto_enumTypes[2]
}

func (x DecommissioningStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DecommissioningStatus.Descriptor instead.
func (DecommissioningStatus) EnumDescriptor() ([]byte, []int) {
	return file_arista_inventory_v1_inventory_proto_rawDescGZIP(), []int{2}
}

// ProvisioningStatus defines the set of possible states in the provisioning
// process for a device.
type ProvisioningStatus int32

const (
	ProvisioningStatus_PROVISIONING_STATUS_UNSPECIFIED ProvisioningStatus = 0
	// PROVISIONING_STATUS_IN_PROGRESS indicates provisioning is in progress.
	ProvisioningStatus_PROVISIONING_STATUS_IN_PROGRESS ProvisioningStatus = 1
	// PROVISIONING_STATUS_FAILURE indicates provisioning failed.
	ProvisioningStatus_PROVISIONING_STATUS_FAILURE ProvisioningStatus = 2
	// PROVISIONING_STATUS_SUCCESS indicates provisioning succeeded.
	ProvisioningStatus_PROVISIONING_STATUS_SUCCESS ProvisioningStatus = 3
)

// Enum value maps for ProvisioningStatus.
var (
	ProvisioningStatus_name = map[int32]string{
		0: "PROVISIONING_STATUS_UNSPECIFIED",
		1: "PROVISIONING_STATUS_IN_PROGRESS",
		2: "PROVISIONING_STATUS_FAILURE",
		3: "PROVISIONING_STATUS_SUCCESS",
	}
	ProvisioningStatus_value = map[string]int32{
		"PROVISIONING_STATUS_UNSPECIFIED": 0,
		"PROVISIONING_STATUS_IN_PROGRESS": 1,
		"PROVISIONING_STATUS_FAILURE":     2,
		"PROVISIONING_STATUS_SUCCESS":     3,
	}
)

func (x ProvisioningStatus) Enum() *ProvisioningStatus {
	p := new(ProvisioningStatus)
	*p = x
	return p
}

func (x ProvisioningStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProvisioningStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_inventory_v1_inventory_proto_enumTypes[3].Descriptor()
}

func (ProvisioningStatus) Type() protoreflect.EnumType {
	return &file_arista_inventory_v1_inventory_proto_enumTypes[3]
}

func (x ProvisioningStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProvisioningStatus.Descriptor instead.
func (ProvisioningStatus) EnumDescriptor() ([]byte, []int) {
	return file_arista_inventory_v1_inventory_proto_rawDescGZIP(), []int{3}
}

// ExtendedAttributes wraps any additional, potentially non-standard, features
// or attributes the device reports.
type ExtendedAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// feature_enabled is a map of feature name to enabled status.
	// If a feature is missing from this map it can be assumed off.
	FeatureEnabled map[string]bool `protobuf:"bytes,1,rep,name=feature_enabled,json=featureEnabled,proto3" json:"feature_enabled,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *ExtendedAttributes) Reset() {
	*x = ExtendedAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_inventory_v1_inventory_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtendedAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtendedAttributes) ProtoMessage() {}

func (x *ExtendedAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_arista_inventory_v1_inventory_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtendedAttributes.ProtoReflect.Descriptor instead.
func (*ExtendedAttributes) Descriptor() ([]byte, []int) {
	return file_arista_inventory_v1_inventory_proto_rawDescGZIP(), []int{0}
}

func (x *ExtendedAttributes) GetFeatureEnabled() map[string]bool {
	if x != nil {
		return x.FeatureEnabled
	}
	return nil
}

// DeviceKey uniquely identifies a single device.
type DeviceKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// device_id is the unique identifier of the device.
	DeviceId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (x *DeviceKey) Reset() {
	*x = DeviceKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_inventory_v1_inventory_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceKey) ProtoMessage() {}

func (x *DeviceKey) ProtoReflect() protoreflect.Message {
	mi := &file_arista_inventory_v1_inventory_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceKey.ProtoReflect.Descriptor instead.
func (*DeviceKey) Descriptor() ([]byte, []int) {
	return file_arista_inventory_v1_inventory_proto_rawDescGZIP(), []int{1}
}

func (x *DeviceKey) GetDeviceId() *wrapperspb.StringValue {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

// DeviceConfiguration holds the device-specific configuration for a third-party
// device, as defined in https://github.com/aristanetworks/cloudvision-go.
type DeviceConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// options is a map from device option to value.
	//
	// E.g., for an SNMP device, this could be the following:
	//
	// "address":   "my_snmp_hostname",
	// "community": "public"
	Options map[string]string `protobuf:"bytes,1,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DeviceConfiguration) Reset() {
	*x = DeviceConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_inventory_v1_inventory_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceConfiguration) ProtoMessage() {}

func (x *DeviceConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_arista_inventory_v1_inventory_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceConfiguration.ProtoReflect.Descriptor instead.
func (*DeviceConfiguration) Descriptor() ([]byte, []int) {
	return file_arista_inventory_v1_inventory_proto_rawDescGZIP(), []int{2}
}

func (x *DeviceConfiguration) GetOptions() map[string]string {
	if x != nil {
		return x.Options
	}
	return nil
}

// UUIDKey is a key that holds a UUID for an onboarding or decommissioning request.
type UUIDKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// request_id should be a UUID for the request.
	RequestId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *UUIDKey) Reset() {
	*x = UUIDKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_inventory_v1_inventory_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UUIDKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UUIDKey) ProtoMessage() {}

func (x *UUIDKey) ProtoReflect() protoreflect.Message {
	mi := &file_arista_inventory_v1_inventory_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UUIDKey.ProtoReflect.Descriptor instead.
func (*UUIDKey) Descriptor() ([]byte, []int) {
	return file_arista_inventory_v1_inventory_proto_rawDescGZIP(), []int{3}
}

func (x *UUIDKey) GetRequestId() *wrapperspb.StringValue {
	if x != nil {
		return x.RequestId
	}
	return nil
}

// DeviceOnboardingConfig describes a device onboarding request. "Onboarding"
// refers to the process of initiating device streaming to CloudVision and
// adding the streaming device to CloudVision's inventory.
//
// The request flow works as follows:
//
//  1. Set on DeviceOnboardingConfig sends an onboarding request with a UUID
//     that the user is responsible for generating.
//  2. Once the server receives the request, it validates and records it.
//  3. Then, the server processes it, initiating the onboarding procedure and
//     tracking the status of the onboarding attempt.
//  4. The user may do a GetOne or Subscribe on DeviceOnboarding using the same
//     UUID to see the status of the request.
type DeviceOnboardingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key identifies the request to onboard the device at hostname_or_ip.
	Key *UUIDKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// hostname_or_ip is a hostname or an IP at which the device can be reached.
	HostnameOrIp *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=hostname_or_ip,json=hostnameOrIp,proto3" json:"hostname_or_ip,omitempty"`
	// device_type describes the method by which to retrieve information for the
	// device. The value should be "eos" for eos devices. For third-party devices,
	// supported values are: "openconfig", "snmp", "cvp", "mwm", and "vCenter".
	DeviceType *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
	// device_config is the configuration for a third-party device.
	DeviceConfig *DeviceConfiguration `protobuf:"bytes,4,opt,name=device_config,json=deviceConfig,proto3" json:"device_config,omitempty"`
}

func (x *DeviceOnboardingConfig) Reset() {
	*x = DeviceOnboardingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_inventory_v1_inventory_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceOnboardingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceOnboardingConfig) ProtoMessage() {}

func (x *DeviceOnboardingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_arista_inventory_v1_inventory_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceOnboardingConfig.ProtoReflect.Descriptor instead.
func (*DeviceOnboardingConfig) Descriptor() ([]byte, []int) {
	return file_arista_inventory_v1_inventory_proto_rawDescGZIP(), []int{4}
}

func (x *DeviceOnboardingConfig) GetKey() *UUIDKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *DeviceOnboardingConfig) GetHostnameOrIp() *wrapperspb.StringValue {
	if x != nil {
		return x.HostnameOrIp
	}
	return nil
}

func (x *DeviceOnboardingConfig) GetDeviceType() *wrapperspb.StringValue {
	if x != nil {
		return x.DeviceType
	}
	return nil
}

func (x *DeviceOnboardingConfig) GetDeviceConfig() *DeviceConfiguration {
	if x != nil {
		return x.DeviceConfig
	}
	return nil
}

// DeviceOnboarding describes the status of an onboarding process.
type DeviceOnboarding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key identifies the request for which to retrieve an onboarding status.
	Key *UUIDKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// device_id is the unique device ID that is discovered via onboarding.
	DeviceId *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// status describes the onboarding status of the device.
	Status OnboardingStatus `protobuf:"varint,3,opt,name=status,proto3,enum=arista.inventory.v1.OnboardingStatus" json:"status,omitempty"`
	// error is the error that caused status to become ONBOARDING_STATUS_FAILURE.
	Error *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	// status_message contains information on the status of the onboarding attempt,
	// if any. This is generally an unstructured log message that is for display
	// purposes only (its structure and contents may change).
	StatusMessage *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
}

func (x *DeviceOnboarding) Reset() {
	*x = DeviceOnboarding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_inventory_v1_inventory_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceOnboarding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceOnboarding) ProtoMessage() {}

func (x *DeviceOnboarding) ProtoReflect() protoreflect.Message {
	mi := &file_arista_inventory_v1_inventory_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceOnboarding.ProtoReflect.Descriptor instead.
func (*DeviceOnboarding) Descriptor() ([]byte, []int) {
	return file_arista_inventory_v1_inventory_proto_rawDescGZIP(), []int{5}
}

func (x *DeviceOnboarding) GetKey() *UUIDKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *DeviceOnboarding) GetDeviceId() *wrapperspb.StringValue {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

func (x *DeviceOnboarding) GetStatus() OnboardingStatus {
	if x != nil {
		return x.Status
	}
	return OnboardingStatus_ONBOARDING_STATUS_UNSPECIFIED
}

func (x *DeviceOnboarding) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *DeviceOnboarding) GetStatusMessage() *wrapperspb.StringValue {
	if x != nil {
		return x.StatusMessage
	}
	return nil
}

// DeviceDecommissioningConfig describes a device decommissioning request.
// "Decommissioning" refers to the process of stopping device streaming to
// CloudVision and removing it from CloudVision's inventory.
//
// The request flow works as follows:
//
//  1. Set on DeviceDecommissioningConfig sends a decommissioning request with
//     a UUID that the user is responsible for generating.
//  2. Once the server receives the request, it validates and records it.
//  3. Then, the server processes it, initiating the decommissioning procedure
//     and tracking the status of the decommissioning attempt.
//  4. The user may do a GetOne or Subscribe on DeviceDecommissioning using the
//     same UUID to see the status of the request.
type DeviceDecommissioningConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key identifies the request to decommission the device.
	Key *UUIDKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// device_id is the unique device ID that was discovered via onboarding.
	DeviceId *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// force is a flag that indicates if the decommission is to be forced.
	// Normally, if there are pending or in-progress tasks associated with the device
	// the decommission would fail. In case of a forced decommission, such blocking
	// tasks would be ignored and decommissioning will be continued.
	Force *wrapperspb.BoolValue `protobuf:"bytes,3,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *DeviceDecommissioningConfig) Reset() {
	*x = DeviceDecommissioningConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_inventory_v1_inventory_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceDecommissioningConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceDecommissioningConfig) ProtoMessage() {}

func (x *DeviceDecommissioningConfig) ProtoReflect() protoreflect.Message {
	mi := &file_arista_inventory_v1_inventory_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceDecommissioningConfig.ProtoReflect.Descriptor instead.
func (*DeviceDecommissioningConfig) Descriptor() ([]byte, []int) {
	return file_arista_inventory_v1_inventory_proto_rawDescGZIP(), []int{6}
}

func (x *DeviceDecommissioningConfig) GetKey() *UUIDKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *DeviceDecommissioningConfig) GetDeviceId() *wrapperspb.StringValue {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

func (x *DeviceDecommissioningConfig) GetForce() *wrapperspb.BoolValue {
	if x != nil {
		return x.Force
	}
	return nil
}

// DeviceOnboarding describes the status of a decommissioning process.
type DeviceDecommissioning struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key identifies the request for which to retrieve a decommissioning status.
	Key *UUIDKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// status describes the decommissioning status of the device.
	Status DecommissioningStatus `protobuf:"varint,2,opt,name=status,proto3,enum=arista.inventory.v1.DecommissioningStatus" json:"status,omitempty"`
	// error is the error that caused status to become DECOMMISSIONING_STATUS_FAILURE.
	Error *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	// status_message contains information on the status of the decommissioning attempt,
	// if any. This is generally an unstructured log message that is for display
	// purposes only (its structure and contents may change).
	StatusMessage *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
}

func (x *DeviceDecommissioning) Reset() {
	*x = DeviceDecommissioning{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_inventory_v1_inventory_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceDecommissioning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceDecommissioning) ProtoMessage() {}

func (x *DeviceDecommissioning) ProtoReflect() protoreflect.Message {
	mi := &file_arista_inventory_v1_inventory_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceDecommissioning.ProtoReflect.Descriptor instead.
func (*DeviceDecommissioning) Descriptor() ([]byte, []int) {
	return file_arista_inventory_v1_inventory_proto_rawDescGZIP(), []int{7}
}

func (x *DeviceDecommissioning) GetKey() *UUIDKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *DeviceDecommissioning) GetStatus() DecommissioningStatus {
	if x != nil {
		return x.Status
	}
	return DecommissioningStatus_DECOMMISSIONING_STATUS_UNSPECIFIED
}

func (x *DeviceDecommissioning) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *DeviceDecommissioning) GetStatusMessage() *wrapperspb.StringValue {
	if x != nil {
		return x.StatusMessage
	}
	return nil
}

// Device describes an onboarded device.
type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key uniquely identifies the device.
	Key *DeviceKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// software_version gives the currently running device software version.
	SoftwareVersion *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=software_version,json=softwareVersion,proto3" json:"software_version,omitempty"`
	// model_name describes the hardware model of this device.
	ModelName *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
	// hardware_revision describes any revisional data to the model name.
	HardwareRevision *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=hardware_revision,json=hardwareRevision,proto3" json:"hardware_revision,omitempty"`
	// fqdn gives the device's fully qualified domain name.
	Fqdn *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=fqdn,proto3" json:"fqdn,omitempty"`
	// hostname is the hostname as reported on the device.
	Hostname *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// domain_name provides the domain name on which the device is registered.
	DomainName *wrapperspb.StringValue `protobuf:"bytes,12,opt,name=domain_name,json=domainName,proto3" json:"domain_name,omitempty"`
	// system_mac_address provides the MAC address of the management port.
	SystemMacAddress *wrapperspb.StringValue `protobuf:"bytes,13,opt,name=system_mac_address,json=systemMacAddress,proto3" json:"system_mac_address,omitempty"`
	// boot_time indicates when the device was last booted.
	BootTime *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=boot_time,json=bootTime,proto3" json:"boot_time,omitempty"`
	// streaming_status is the status of telemetry streaming for this device.
	StreamingStatus StreamingStatus `protobuf:"varint,30,opt,name=streaming_status,json=streamingStatus,proto3,enum=arista.inventory.v1.StreamingStatus" json:"streaming_status,omitempty"`
	// extended_attributes wraps any additional, potentially non-standard, features
	// or attributes that the device reports.
	ExtendedAttributes *ExtendedAttributes `protobuf:"bytes,31,opt,name=extended_attributes,json=extendedAttributes,proto3" json:"extended_attributes,omitempty"`
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_inventory_v1_inventory_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_arista_inventory_v1_inventory_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_arista_inventory_v1_inventory_proto_rawDescGZIP(), []int{8}
}

func (x *Device) GetKey() *DeviceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Device) GetSoftwareVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.SoftwareVersion
	}
	return nil
}

func (x *Device) GetModelName() *wrapperspb.StringValue {
	if x != nil {
		return x.ModelName
	}
	return nil
}

func (x *Device) GetHardwareRevision() *wrapperspb.StringValue {
	if x != nil {
		return x.HardwareRevision
	}
	return nil
}

func (x *Device) GetFqdn() *wrapperspb.StringValue {
	if x != nil {
		return x.Fqdn
	}
	return nil
}

func (x *Device) GetHostname() *wrapperspb.StringValue {
	if x != nil {
		return x.Hostname
	}
	return nil
}

func (x *Device) GetDomainName() *wrapperspb.StringValue {
	if x != nil {
		return x.DomainName
	}
	return nil
}

func (x *Device) GetSystemMacAddress() *wrapperspb.StringValue {
	if x != nil {
		return x.SystemMacAddress
	}
	return nil
}

func (x *Device) GetBootTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BootTime
	}
	return nil
}

func (x *Device) GetStreamingStatus() StreamingStatus {
	if x != nil {
		return x.StreamingStatus
	}
	return StreamingStatus_STREAMING_STATUS_UNSPECIFIED
}

func (x *Device) GetExtendedAttributes() *ExtendedAttributes {
	if x != nil {
		return x.ExtendedAttributes
	}
	return nil
}

// ProvisionedDevice describes the provisioning status of an onboarded device
// if the onboarded device is configured for provisioning.
type ProvisionedDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key uniquely identifies the device.
	Key *DeviceKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// status describes the onboarded device's provisioning status.
	Status ProvisioningStatus `protobuf:"varint,2,opt,name=status,proto3,enum=arista.inventory.v1.ProvisioningStatus" json:"status,omitempty"`
	// error is the error that caused status to become PROVISIONING_STATUS_FAILURE.
	Error *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	// ztp_mode indicates whether the device is in ZTP mode.
	ZtpMode *wrapperspb.BoolValue `protobuf:"bytes,4,opt,name=ztp_mode,json=ztpMode,proto3" json:"ztp_mode,omitempty"`
	// ip_address is the current (post-provisioning) IP address of the device.
	IpAddress *fmp.IPAddress `protobuf:"bytes,5,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	// provisioning_group_name is the name of the group (also known as a container)
	// to which the device belongs. Any provisioning operation performed on this
	// group will also be performed on this device. If the device is not yet provisioned,
	// this will not be set. Once it is provisioned, this will be set to "undefined_container"
	// which indicates that the device does not yet belong to a group. At this point,
	// a user may set it to an existing group.
	ProvisioningGroupName *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=provisioning_group_name,json=provisioningGroupName,proto3" json:"provisioning_group_name,omitempty"`
}

func (x *ProvisionedDevice) Reset() {
	*x = ProvisionedDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_inventory_v1_inventory_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProvisionedDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvisionedDevice) ProtoMessage() {}

func (x *ProvisionedDevice) ProtoReflect() protoreflect.Message {
	mi := &file_arista_inventory_v1_inventory_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvisionedDevice.ProtoReflect.Descriptor instead.
func (*ProvisionedDevice) Descriptor() ([]byte, []int) {
	return file_arista_inventory_v1_inventory_proto_rawDescGZIP(), []int{9}
}

func (x *ProvisionedDevice) GetKey() *DeviceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ProvisionedDevice) GetStatus() ProvisioningStatus {
	if x != nil {
		return x.Status
	}
	return ProvisioningStatus_PROVISIONING_STATUS_UNSPECIFIED
}

func (x *ProvisionedDevice) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ProvisionedDevice) GetZtpMode() *wrapperspb.BoolValue {
	if x != nil {
		return x.ZtpMode
	}
	return nil
}

func (x *ProvisionedDevice) GetIpAddress() *fmp.IPAddress {
	if x != nil {
		return x.IpAddress
	}
	return nil
}

func (x *ProvisionedDevice) GetProvisioningGroupName() *wrapperspb.StringValue {
	if x != nil {
		return x.ProvisioningGroupName
	}
	return nil
}

var File_arista_inventory_v1_inventory_proto protoreflect.FileDescriptor

var file_arista_inventory_v1_inventory_proto_rawDesc = []byte{
	0x0a, 0x23, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x66, 0x6d, 0x70,
	0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0e, 0x66, 0x6d, 0x70, 0x2f, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xbd, 0x01, 0x0a, 0x12, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x64, 0x0a, 0x0f, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0x41,
	0x0a, 0x13, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x4c, 0x0a, 0x09, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x39,
	0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x3a, 0x04, 0x80, 0x8e, 0x19, 0x01, 0x22,
	0xa2, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x4c, 0x0a, 0x07, 0x55, 0x55, 0x49, 0x44, 0x4b, 0x65, 0x79, 0x12,
	0x3b, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x3a, 0x04, 0x80, 0x8e,
	0x19, 0x01, 0x22, 0xa2, 0x02, 0x0a, 0x16, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x6e, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x55, 0x49, 0x44, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x42, 0x0a,
	0x0e, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6f, 0x72, 0x5f, 0x69, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x4f, 0x72, 0x49,
	0x70, 0x12, 0x3d, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x4d, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3a,
	0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72, 0x77, 0x22, 0xbd, 0x02, 0x0a, 0x10, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x55, 0x49, 0x44, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x09,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x0e, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x3a,
	0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72, 0x6f, 0x22, 0xc2, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x4b,
	0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72, 0x77, 0x22, 0x8c, 0x02, 0x0a,
	0x15, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x4b, 0x65,
	0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x43,
	0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72, 0x6f, 0x22, 0xee, 0x05, 0x0a, 0x06,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x47, 0x0a, 0x10, 0x73, 0x6f, 0x66, 0x74,
	0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x3b, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49,
	0x0a, 0x11, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x04, 0x66, 0x71, 0x64,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x66, 0x71, 0x64, 0x6e, 0x12, 0x38, 0x0a, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x68, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x12, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6d,
	0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x37, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x08, 0x62, 0x6f, 0x6f, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x10, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x58, 0x0a, 0x13, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x52, 0x12, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72, 0x6f, 0x22, 0xfe, 0x02, 0x0a,
	0x11, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x30, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x08, 0x7a, 0x74, 0x70,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x7a, 0x74, 0x70, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x2d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x54, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72, 0x6f, 0x2a, 0x6f, 0x0a,
	0x0f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x49, 0x4e, 0x47, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x01, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x2a, 0x96,
	0x01, 0x0a, 0x10, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x1d, 0x4f, 0x4e, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x4f, 0x4e, 0x42, 0x4f, 0x41, 0x52,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50,
	0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x4e, 0x42,
	0x4f, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x4e, 0x42, 0x4f,
	0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x2a, 0xaf, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x45, 0x43,
	0x4f, 0x4d, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10,
	0x01, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x2a, 0xa0, 0x01, 0x0a, 0x12, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x23, 0x0a, 0x1f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x49, 0x4e, 0x47,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49,
	0x4f, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x5f,
	0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x52,
	0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x50,
	0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x42, 0x30, 0x5a, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2f, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x76, 0x31, 0x3b, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_arista_inventory_v1_inventory_proto_rawDescOnce sync.Once
	file_arista_inventory_v1_inventory_proto_rawDescData = file_arista_inventory_v1_inventory_proto_rawDesc
)

func file_arista_inventory_v1_inventory_proto_rawDescGZIP() []byte {
	file_arista_inventory_v1_inventory_proto_rawDescOnce.Do(func() {
		file_arista_inventory_v1_inventory_proto_rawDescData = protoimpl.X.CompressGZIP(file_arista_inventory_v1_inventory_proto_rawDescData)
	})
	return file_arista_inventory_v1_inventory_proto_rawDescData
}

var file_arista_inventory_v1_inventory_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_arista_inventory_v1_inventory_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_arista_inventory_v1_inventory_proto_goTypes = []interface{}{
	(StreamingStatus)(0),                // 0: arista.inventory.v1.StreamingStatus
	(OnboardingStatus)(0),               // 1: arista.inventory.v1.OnboardingStatus
	(DecommissioningStatus)(0),          // 2: arista.inventory.v1.DecommissioningStatus
	(ProvisioningStatus)(0),             // 3: arista.inventory.v1.ProvisioningStatus
	(*ExtendedAttributes)(nil),          // 4: arista.inventory.v1.ExtendedAttributes
	(*DeviceKey)(nil),                   // 5: arista.inventory.v1.DeviceKey
	(*DeviceConfiguration)(nil),         // 6: arista.inventory.v1.DeviceConfiguration
	(*UUIDKey)(nil),                     // 7: arista.inventory.v1.UUIDKey
	(*DeviceOnboardingConfig)(nil),      // 8: arista.inventory.v1.DeviceOnboardingConfig
	(*DeviceOnboarding)(nil),            // 9: arista.inventory.v1.DeviceOnboarding
	(*DeviceDecommissioningConfig)(nil), // 10: arista.inventory.v1.DeviceDecommissioningConfig
	(*DeviceDecommissioning)(nil),       // 11: arista.inventory.v1.DeviceDecommissioning
	(*Device)(nil),                      // 12: arista.inventory.v1.Device
	(*ProvisionedDevice)(nil),           // 13: arista.inventory.v1.ProvisionedDevice
	nil,                                 // 14: arista.inventory.v1.ExtendedAttributes.FeatureEnabledEntry
	nil,                                 // 15: arista.inventory.v1.DeviceConfiguration.OptionsEntry
	(*wrapperspb.StringValue)(nil),      // 16: google.protobuf.StringValue
	(*wrapperspb.BoolValue)(nil),        // 17: google.protobuf.BoolValue
	(*timestamppb.Timestamp)(nil),       // 18: google.protobuf.Timestamp
	(*fmp.IPAddress)(nil),               // 19: fmp.IPAddress
}
var file_arista_inventory_v1_inventory_proto_depIdxs = []int32{
	14, // 0: arista.inventory.v1.ExtendedAttributes.feature_enabled:type_name -> arista.inventory.v1.ExtendedAttributes.FeatureEnabledEntry
	16, // 1: arista.inventory.v1.DeviceKey.device_id:type_name -> google.protobuf.StringValue
	15, // 2: arista.inventory.v1.DeviceConfiguration.options:type_name -> arista.inventory.v1.DeviceConfiguration.OptionsEntry
	16, // 3: arista.inventory.v1.UUIDKey.request_id:type_name -> google.protobuf.StringValue
	7,  // 4: arista.inventory.v1.DeviceOnboardingConfig.key:type_name -> arista.inventory.v1.UUIDKey
	16, // 5: arista.inventory.v1.DeviceOnboardingConfig.hostname_or_ip:type_name -> google.protobuf.StringValue
	16, // 6: arista.inventory.v1.DeviceOnboardingConfig.device_type:type_name -> google.protobuf.StringValue
	6,  // 7: arista.inventory.v1.DeviceOnboardingConfig.device_config:type_name -> arista.inventory.v1.DeviceConfiguration
	7,  // 8: arista.inventory.v1.DeviceOnboarding.key:type_name -> arista.inventory.v1.UUIDKey
	16, // 9: arista.inventory.v1.DeviceOnboarding.device_id:type_name -> google.protobuf.StringValue
	1,  // 10: arista.inventory.v1.DeviceOnboarding.status:type_name -> arista.inventory.v1.OnboardingStatus
	16, // 11: arista.inventory.v1.DeviceOnboarding.error:type_name -> google.protobuf.StringValue
	16, // 12: arista.inventory.v1.DeviceOnboarding.status_message:type_name -> google.protobuf.StringValue
	7,  // 13: arista.inventory.v1.DeviceDecommissioningConfig.key:type_name -> arista.inventory.v1.UUIDKey
	16, // 14: arista.inventory.v1.DeviceDecommissioningConfig.device_id:type_name -> google.protobuf.StringValue
	17, // 15: arista.inventory.v1.DeviceDecommissioningConfig.force:type_name -> google.protobuf.BoolValue
	7,  // 16: arista.inventory.v1.DeviceDecommissioning.key:type_name -> arista.inventory.v1.UUIDKey
	2,  // 17: arista.inventory.v1.DeviceDecommissioning.status:type_name -> arista.inventory.v1.DecommissioningStatus
	16, // 18: arista.inventory.v1.DeviceDecommissioning.error:type_name -> google.protobuf.StringValue
	16, // 19: arista.inventory.v1.DeviceDecommissioning.status_message:type_name -> google.protobuf.StringValue
	5,  // 20: arista.inventory.v1.Device.key:type_name -> arista.inventory.v1.DeviceKey
	16, // 21: arista.inventory.v1.Device.software_version:type_name -> google.protobuf.StringValue
	16, // 22: arista.inventory.v1.Device.model_name:type_name -> google.protobuf.StringValue
	16, // 23: arista.inventory.v1.Device.hardware_revision:type_name -> google.protobuf.StringValue
	16, // 24: arista.inventory.v1.Device.fqdn:type_name -> google.protobuf.StringValue
	16, // 25: arista.inventory.v1.Device.hostname:type_name -> google.protobuf.StringValue
	16, // 26: arista.inventory.v1.Device.domain_name:type_name -> google.protobuf.StringValue
	16, // 27: arista.inventory.v1.Device.system_mac_address:type_name -> google.protobuf.StringValue
	18, // 28: arista.inventory.v1.Device.boot_time:type_name -> google.protobuf.Timestamp
	0,  // 29: arista.inventory.v1.Device.streaming_status:type_name -> arista.inventory.v1.StreamingStatus
	4,  // 30: arista.inventory.v1.Device.extended_attributes:type_name -> arista.inventory.v1.ExtendedAttributes
	5,  // 31: arista.inventory.v1.ProvisionedDevice.key:type_name -> arista.inventory.v1.DeviceKey
	3,  // 32: arista.inventory.v1.ProvisionedDevice.status:type_name -> arista.inventory.v1.ProvisioningStatus
	16, // 33: arista.inventory.v1.ProvisionedDevice.error:type_name -> google.protobuf.StringValue
	17, // 34: arista.inventory.v1.ProvisionedDevice.ztp_mode:type_name -> google.protobuf.BoolValue
	19, // 35: arista.inventory.v1.ProvisionedDevice.ip_address:type_name -> fmp.IPAddress
	16, // 36: arista.inventory.v1.ProvisionedDevice.provisioning_group_name:type_name -> google.protobuf.StringValue
	37, // [37:37] is the sub-list for method output_type
	37, // [37:37] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_arista_inventory_v1_inventory_proto_init() }
func file_arista_inventory_v1_inventory_proto_init() {
	if File_arista_inventory_v1_inventory_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_arista_inventory_v1_inventory_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtendedAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_inventory_v1_inventory_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_inventory_v1_inventory_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_inventory_v1_inventory_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UUIDKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_inventory_v1_inventory_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceOnboardingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_inventory_v1_inventory_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceOnboarding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_inventory_v1_inventory_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceDecommissioningConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_inventory_v1_inventory_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceDecommissioning); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_inventory_v1_inventory_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_inventory_v1_inventory_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvisionedDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_arista_inventory_v1_inventory_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_arista_inventory_v1_inventory_proto_goTypes,
		DependencyIndexes: file_arista_inventory_v1_inventory_proto_depIdxs,
		EnumInfos:         file_arista_inventory_v1_inventory_proto_enumTypes,
		MessageInfos:      file_arista_inventory_v1_inventory_proto_msgTypes,
	}.Build()
	File_arista_inventory_v1_inventory_proto = out.File
	file_arista_inventory_v1_inventory_proto_rawDesc = nil
	file_arista_inventory_v1_inventory_proto_goTypes = nil
	file_arista_inventory_v1_inventory_proto_depIdxs = nil
}
