// Copyright (c) 2023 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

//
// Code generated by boomtown. DO NOT EDIT.
//

package inventory

import "google.golang.org/grpc"

// Client composes the service clients within the inventory package.
// This client can then be composed into a larger hierarchy for more complex clients.
//
// Because method names include the name of the Resource they operate on, the embedded
// clients are unnamed fields to reduce stutter.
//
// Included resources:
//   - Device
//   - DeviceDecommissioning
//   - DeviceDecommissioningConfig
//   - DeviceOnboarding
//   - DeviceOnboardingConfig
//   - ProvisionedDevice
type Client struct {
	Device                      DeviceServiceClient
	DeviceDecommissioning       DeviceDecommissioningServiceClient
	DeviceDecommissioningConfig DeviceDecommissioningConfigServiceClient
	DeviceOnboarding            DeviceOnboardingServiceClient
	DeviceOnboardingConfig      DeviceOnboardingConfigServiceClient
	ProvisionedDevice           ProvisionedDeviceServiceClient
}

// NewClient creates a new composed-client from the given connection.
func NewClient(conn grpc.ClientConnInterface) Client {
	return Client{
		Device:                      NewDeviceServiceClient(conn),
		DeviceDecommissioning:       NewDeviceDecommissioningServiceClient(conn),
		DeviceDecommissioningConfig: NewDeviceDecommissioningConfigServiceClient(conn),
		DeviceOnboarding:            NewDeviceOnboardingServiceClient(conn),
		DeviceOnboardingConfig:      NewDeviceOnboardingConfigServiceClient(conn),
		ProvisionedDevice:           NewProvisionedDeviceServiceClient(conn),
	}
}

// Server aggregates the various server interfaces required by gRPC.
// The included resources are:
//   - Device
//   - DeviceDecommissioning
//   - DeviceDecommissioningConfig
//   - DeviceOnboarding
//   - DeviceOnboardingConfig
//   - ProvisionedDevice
type Server struct {
	Device                      DeviceServiceServer
	DeviceDecommissioning       DeviceDecommissioningServiceServer
	DeviceDecommissioningConfig DeviceDecommissioningConfigServiceServer
	DeviceOnboarding            DeviceOnboardingServiceServer
	DeviceOnboardingConfig      DeviceOnboardingConfigServiceServer
	ProvisionedDevice           ProvisionedDeviceServiceServer
}

// Register takes the given gRPC Server and registers our services with it.
func (s Server) Register(target *grpc.Server) {
	RegisterDeviceServiceServer(target, s.Device)
	RegisterDeviceDecommissioningServiceServer(target, s.DeviceDecommissioning)
	RegisterDeviceDecommissioningConfigServiceServer(target, s.DeviceDecommissioningConfig)
	RegisterDeviceOnboardingServiceServer(target, s.DeviceOnboarding)
	RegisterDeviceOnboardingConfigServiceServer(target, s.DeviceOnboardingConfig)
	RegisterProvisionedDeviceServiceServer(target, s.ProvisionedDevice)
}

// RegisterUnimplementeds adds unimplemented servers to the given gRPC Server
func RegisterUnimplementeds(target *grpc.Server) error {
	RegisterDeviceServiceServer(target,
		UnimplementedDeviceServiceServer{})
	RegisterDeviceDecommissioningServiceServer(target,
		UnimplementedDeviceDecommissioningServiceServer{})
	RegisterDeviceDecommissioningConfigServiceServer(target,
		UnimplementedDeviceDecommissioningConfigServiceServer{})
	RegisterDeviceOnboardingServiceServer(target,
		UnimplementedDeviceOnboardingServiceServer{})
	RegisterDeviceOnboardingConfigServiceServer(target,
		UnimplementedDeviceOnboardingConfigServiceServer{})
	RegisterProvisionedDeviceServiceServer(target,
		UnimplementedProvisionedDeviceServiceServer{})
	return nil
}

// HasKey returns whether the given Device has a key provided in the model.
func (d *Device) HasKey() bool {
	return d.GetKey() != nil
}

// HasKey returns whether the given DeviceRequest has a key provided in the request.
func (d *DeviceRequest) HasKey() bool {
	return d.GetKey() != nil
}

// HasKey returns whether the given DeviceDecommissioning has a key provided in the model.
func (d *DeviceDecommissioning) HasKey() bool {
	return d.GetKey() != nil
}

// HasKey returns whether the given DeviceDecommissioningRequest has a key provided in the request.
func (d *DeviceDecommissioningRequest) HasKey() bool {
	return d.GetKey() != nil
}

// HasKey returns whether the given DeviceDecommissioningConfig has a key provided in the model.
func (d *DeviceDecommissioningConfig) HasKey() bool {
	return d.GetKey() != nil
}

// HasKey returns whether the given DeviceDecommissioningConfigRequest has a key provided in the request.
func (d *DeviceDecommissioningConfigRequest) HasKey() bool {
	return d.GetKey() != nil
}

// HasKey returns whether the given DeviceDecommissioningConfigSetRequest has a key provided in the request.
func (d *DeviceDecommissioningConfigSetRequest) HasKey() bool {
	return d.GetValue().HasKey()
}

// HasKey returns whether the given DeviceDecommissioningConfigDeleteRequest has a key provided in the request.
func (d *DeviceDecommissioningConfigDeleteRequest) HasKey() bool {
	return d.GetKey() != nil
}

// HasKey returns whether the given DeviceOnboarding has a key provided in the model.
func (d *DeviceOnboarding) HasKey() bool {
	return d.GetKey() != nil
}

// HasKey returns whether the given DeviceOnboardingRequest has a key provided in the request.
func (d *DeviceOnboardingRequest) HasKey() bool {
	return d.GetKey() != nil
}

// HasKey returns whether the given DeviceOnboardingConfig has a key provided in the model.
func (d *DeviceOnboardingConfig) HasKey() bool {
	return d.GetKey() != nil
}

// HasKey returns whether the given DeviceOnboardingConfigRequest has a key provided in the request.
func (d *DeviceOnboardingConfigRequest) HasKey() bool {
	return d.GetKey() != nil
}

// HasKey returns whether the given DeviceOnboardingConfigSetRequest has a key provided in the request.
func (d *DeviceOnboardingConfigSetRequest) HasKey() bool {
	return d.GetValue().HasKey()
}

// HasKey returns whether the given DeviceOnboardingConfigDeleteRequest has a key provided in the request.
func (d *DeviceOnboardingConfigDeleteRequest) HasKey() bool {
	return d.GetKey() != nil
}

// HasKey returns whether the given ProvisionedDevice has a key provided in the model.
func (p *ProvisionedDevice) HasKey() bool {
	return p.GetKey() != nil
}

// HasKey returns whether the given ProvisionedDeviceRequest has a key provided in the request.
func (p *ProvisionedDeviceRequest) HasKey() bool {
	return p.GetKey() != nil
}

// PassesPartialEqFilter returns whether this DecommissioningStatus matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (d DecommissioningStatus) PassesPartialEqFilter(cmp DecommissioningStatus) bool {
	if cmp != DecommissioningStatus(0) {
		return d == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether this OnboardingStatus matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (o OnboardingStatus) PassesPartialEqFilter(cmp OnboardingStatus) bool {
	if cmp != OnboardingStatus(0) {
		return o == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether this ProvisioningStatus matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (p ProvisioningStatus) PassesPartialEqFilter(cmp ProvisioningStatus) bool {
	if cmp != ProvisioningStatus(0) {
		return p == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether this StreamingStatus matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (s StreamingStatus) PassesPartialEqFilter(cmp StreamingStatus) bool {
	if cmp != StreamingStatus(0) {
		return s == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether the DeviceConfiguration matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (d *DeviceConfiguration) PassesPartialEqFilter(cmp *DeviceConfiguration) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if d == nil {
		return false
	}
	if len(cmp.Options) > len(d.Options) {
		return false
	}
	for k, filt := range cmp.Options {
		self, exists := d.Options[k]
		if !exists || filt != self {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the ExtendedAttributes matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (e *ExtendedAttributes) PassesPartialEqFilter(cmp *ExtendedAttributes) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if e == nil {
		return false
	}
	if len(cmp.FeatureEnabled) > len(e.FeatureEnabled) {
		return false
	}
	for k, filt := range cmp.FeatureEnabled {
		self, exists := e.FeatureEnabled[k]
		if !exists || filt != self {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the DeviceKey matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (d *DeviceKey) PassesPartialEqFilter(cmp *DeviceKey) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if d == nil {
		return false
	}

	if cmp.DeviceId != nil {
		if d.DeviceId == nil {
			return false
		}
		if d.DeviceId.Value != cmp.DeviceId.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the UUIDKey matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (u *UUIDKey) PassesPartialEqFilter(cmp *UUIDKey) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if u == nil {
		return false
	}

	if cmp.RequestId != nil {
		if u.RequestId == nil {
			return false
		}
		if u.RequestId.Value != cmp.RequestId.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the Device matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (d *Device) PassesPartialEqFilter(cmp *Device) bool {
	// if the resource is nil, there is nothing to send to the client
	if d == nil {
		return false
	}

	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if !d.Key.PassesPartialEqFilter(cmp.Key) {
		return false
	}

	if cmp.SoftwareVersion != nil {
		if d.SoftwareVersion == nil {
			return false
		}
		if d.SoftwareVersion.Value != cmp.SoftwareVersion.Value {
			return false
		}
	}

	if cmp.ModelName != nil {
		if d.ModelName == nil {
			return false
		}
		if d.ModelName.Value != cmp.ModelName.Value {
			return false
		}
	}

	if cmp.HardwareRevision != nil {
		if d.HardwareRevision == nil {
			return false
		}
		if d.HardwareRevision.Value != cmp.HardwareRevision.Value {
			return false
		}
	}

	if cmp.Fqdn != nil {
		if d.Fqdn == nil {
			return false
		}
		if d.Fqdn.Value != cmp.Fqdn.Value {
			return false
		}
	}

	if cmp.Hostname != nil {
		if d.Hostname == nil {
			return false
		}
		if d.Hostname.Value != cmp.Hostname.Value {
			return false
		}
	}

	if cmp.DomainName != nil {
		if d.DomainName == nil {
			return false
		}
		if d.DomainName.Value != cmp.DomainName.Value {
			return false
		}
	}

	if cmp.SystemMacAddress != nil {
		if d.SystemMacAddress == nil {
			return false
		}
		if d.SystemMacAddress.Value != cmp.SystemMacAddress.Value {
			return false
		}
	}

	if cmp.BootTime != nil {
		if cmp.BootTime.Seconds != 0 {
			if d.BootTime.Seconds != cmp.BootTime.Seconds {
				return false
			}
		}
		if cmp.BootTime.Nanos != 0 {
			if d.BootTime.Nanos != cmp.BootTime.Nanos {
				return false
			}
		}
	}

	if !d.StreamingStatus.PassesPartialEqFilter(cmp.StreamingStatus) {
		return false
	}

	if !d.ExtendedAttributes.PassesPartialEqFilter(cmp.ExtendedAttributes) {
		return false
	}

	return true
}

// MatchesAnyPartialEqFilter returns whether the receiver matches any filters in the given set.
func (d *Device) MatchesAnyPartialEqFilter(filters []*Device) bool {
	if len(filters) == 0 {
		return true
	}

	for _, filt := range filters {
		if d.PassesPartialEqFilter(filt) {
			return true
		}
	}

	return false
}

// PassesPartialEqFilter returns whether the DeviceDecommissioning matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (d *DeviceDecommissioning) PassesPartialEqFilter(cmp *DeviceDecommissioning) bool {
	// if the resource is nil, there is nothing to send to the client
	if d == nil {
		return false
	}

	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if !d.Key.PassesPartialEqFilter(cmp.Key) {
		return false
	}

	if !d.Status.PassesPartialEqFilter(cmp.Status) {
		return false
	}

	if cmp.Error != nil {
		if d.Error == nil {
			return false
		}
		if d.Error.Value != cmp.Error.Value {
			return false
		}
	}

	if cmp.StatusMessage != nil {
		if d.StatusMessage == nil {
			return false
		}
		if d.StatusMessage.Value != cmp.StatusMessage.Value {
			return false
		}
	}

	return true
}

// MatchesAnyPartialEqFilter returns whether the receiver matches any filters in the given set.
func (d *DeviceDecommissioning) MatchesAnyPartialEqFilter(filters []*DeviceDecommissioning) bool {
	if len(filters) == 0 {
		return true
	}

	for _, filt := range filters {
		if d.PassesPartialEqFilter(filt) {
			return true
		}
	}

	return false
}

// PassesPartialEqFilter returns whether the DeviceDecommissioningConfig matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (d *DeviceDecommissioningConfig) PassesPartialEqFilter(cmp *DeviceDecommissioningConfig) bool {
	// if the resource is nil, there is nothing to send to the client
	if d == nil {
		return false
	}

	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if !d.Key.PassesPartialEqFilter(cmp.Key) {
		return false
	}

	if cmp.DeviceId != nil {
		if d.DeviceId == nil {
			return false
		}
		if d.DeviceId.Value != cmp.DeviceId.Value {
			return false
		}
	}

	if cmp.Force != nil {
		if d.Force == nil {
			return false
		}
		if d.Force.Value != cmp.Force.Value {
			return false
		}
	}

	return true
}

// MatchesAnyPartialEqFilter returns whether the receiver matches any filters in the given set.
func (d *DeviceDecommissioningConfig) MatchesAnyPartialEqFilter(filters []*DeviceDecommissioningConfig) bool {
	if len(filters) == 0 {
		return true
	}

	for _, filt := range filters {
		if d.PassesPartialEqFilter(filt) {
			return true
		}
	}

	return false
}

// PassesPartialEqFilter returns whether the DeviceOnboarding matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (d *DeviceOnboarding) PassesPartialEqFilter(cmp *DeviceOnboarding) bool {
	// if the resource is nil, there is nothing to send to the client
	if d == nil {
		return false
	}

	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if !d.Key.PassesPartialEqFilter(cmp.Key) {
		return false
	}

	if cmp.DeviceId != nil {
		if d.DeviceId == nil {
			return false
		}
		if d.DeviceId.Value != cmp.DeviceId.Value {
			return false
		}
	}

	if !d.Status.PassesPartialEqFilter(cmp.Status) {
		return false
	}

	if cmp.Error != nil {
		if d.Error == nil {
			return false
		}
		if d.Error.Value != cmp.Error.Value {
			return false
		}
	}

	if cmp.StatusMessage != nil {
		if d.StatusMessage == nil {
			return false
		}
		if d.StatusMessage.Value != cmp.StatusMessage.Value {
			return false
		}
	}

	return true
}

// MatchesAnyPartialEqFilter returns whether the receiver matches any filters in the given set.
func (d *DeviceOnboarding) MatchesAnyPartialEqFilter(filters []*DeviceOnboarding) bool {
	if len(filters) == 0 {
		return true
	}

	for _, filt := range filters {
		if d.PassesPartialEqFilter(filt) {
			return true
		}
	}

	return false
}

// PassesPartialEqFilter returns whether the DeviceOnboardingConfig matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (d *DeviceOnboardingConfig) PassesPartialEqFilter(cmp *DeviceOnboardingConfig) bool {
	// if the resource is nil, there is nothing to send to the client
	if d == nil {
		return false
	}

	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if !d.Key.PassesPartialEqFilter(cmp.Key) {
		return false
	}

	if cmp.HostnameOrIp != nil {
		if d.HostnameOrIp == nil {
			return false
		}
		if d.HostnameOrIp.Value != cmp.HostnameOrIp.Value {
			return false
		}
	}

	if cmp.DeviceType != nil {
		if d.DeviceType == nil {
			return false
		}
		if d.DeviceType.Value != cmp.DeviceType.Value {
			return false
		}
	}

	if !d.DeviceConfig.PassesPartialEqFilter(cmp.DeviceConfig) {
		return false
	}

	return true
}

// MatchesAnyPartialEqFilter returns whether the receiver matches any filters in the given set.
func (d *DeviceOnboardingConfig) MatchesAnyPartialEqFilter(filters []*DeviceOnboardingConfig) bool {
	if len(filters) == 0 {
		return true
	}

	for _, filt := range filters {
		if d.PassesPartialEqFilter(filt) {
			return true
		}
	}

	return false
}

// PassesPartialEqFilter returns whether the ProvisionedDevice matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (p *ProvisionedDevice) PassesPartialEqFilter(cmp *ProvisionedDevice) bool {
	// if the resource is nil, there is nothing to send to the client
	if p == nil {
		return false
	}

	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if !p.Key.PassesPartialEqFilter(cmp.Key) {
		return false
	}

	if !p.Status.PassesPartialEqFilter(cmp.Status) {
		return false
	}

	if cmp.Error != nil {
		if p.Error == nil {
			return false
		}
		if p.Error.Value != cmp.Error.Value {
			return false
		}
	}

	if cmp.ZtpMode != nil {
		if p.ZtpMode == nil {
			return false
		}
		if p.ZtpMode.Value != cmp.ZtpMode.Value {
			return false
		}
	}

	if cmp.IpAddress != nil {
		if p.IpAddress == nil {
			return false
		}
		if p.IpAddress.Value != cmp.IpAddress.Value {
			return false
		}
	}

	if cmp.ProvisioningGroupName != nil {
		if p.ProvisioningGroupName == nil {
			return false
		}
		if p.ProvisioningGroupName.Value != cmp.ProvisioningGroupName.Value {
			return false
		}
	}

	return true
}

// MatchesAnyPartialEqFilter returns whether the receiver matches any filters in the given set.
func (p *ProvisionedDevice) MatchesAnyPartialEqFilter(filters []*ProvisionedDevice) bool {
	if len(filters) == 0 {
		return true
	}

	for _, filt := range filters {
		if p.PassesPartialEqFilter(filt) {
			return true
		}
	}

	return false
}
