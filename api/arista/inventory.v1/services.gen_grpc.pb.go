// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package inventory

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeviceServiceClient is the client API for DeviceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceServiceClient interface {
	GetOne(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*DeviceResponse, error)
	GetAll(ctx context.Context, in *DeviceStreamRequest, opts ...grpc.CallOption) (DeviceService_GetAllClient, error)
	Subscribe(ctx context.Context, in *DeviceStreamRequest, opts ...grpc.CallOption) (DeviceService_SubscribeClient, error)
}

type deviceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceServiceClient(cc grpc.ClientConnInterface) DeviceServiceClient {
	return &deviceServiceClient{cc}
}

func (c *deviceServiceClient) GetOne(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*DeviceResponse, error) {
	out := new(DeviceResponse)
	err := c.cc.Invoke(ctx, "/arista.inventory.v1.DeviceService/GetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) GetAll(ctx context.Context, in *DeviceStreamRequest, opts ...grpc.CallOption) (DeviceService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeviceService_ServiceDesc.Streams[0], "/arista.inventory.v1.DeviceService/GetAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceService_GetAllClient interface {
	Recv() (*DeviceStreamResponse, error)
	grpc.ClientStream
}

type deviceServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *deviceServiceGetAllClient) Recv() (*DeviceStreamResponse, error) {
	m := new(DeviceStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceServiceClient) Subscribe(ctx context.Context, in *DeviceStreamRequest, opts ...grpc.CallOption) (DeviceService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeviceService_ServiceDesc.Streams[1], "/arista.inventory.v1.DeviceService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceService_SubscribeClient interface {
	Recv() (*DeviceStreamResponse, error)
	grpc.ClientStream
}

type deviceServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *deviceServiceSubscribeClient) Recv() (*DeviceStreamResponse, error) {
	m := new(DeviceStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DeviceServiceServer is the server API for DeviceService service.
// All implementations must embed UnimplementedDeviceServiceServer
// for forward compatibility
type DeviceServiceServer interface {
	GetOne(context.Context, *DeviceRequest) (*DeviceResponse, error)
	GetAll(*DeviceStreamRequest, DeviceService_GetAllServer) error
	Subscribe(*DeviceStreamRequest, DeviceService_SubscribeServer) error
	mustEmbedUnimplementedDeviceServiceServer()
}

// UnimplementedDeviceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceServiceServer struct {
}

func (UnimplementedDeviceServiceServer) GetOne(context.Context, *DeviceRequest) (*DeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedDeviceServiceServer) GetAll(*DeviceStreamRequest, DeviceService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedDeviceServiceServer) Subscribe(*DeviceStreamRequest, DeviceService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedDeviceServiceServer) mustEmbedUnimplementedDeviceServiceServer() {}

// UnsafeDeviceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceServiceServer will
// result in compilation errors.
type UnsafeDeviceServiceServer interface {
	mustEmbedUnimplementedDeviceServiceServer()
}

func RegisterDeviceServiceServer(s grpc.ServiceRegistrar, srv DeviceServiceServer) {
	s.RegisterService(&DeviceService_ServiceDesc, srv)
}

func _DeviceService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arista.inventory.v1.DeviceService/GetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetOne(ctx, req.(*DeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceServiceServer).GetAll(m, &deviceServiceGetAllServer{stream})
}

type DeviceService_GetAllServer interface {
	Send(*DeviceStreamResponse) error
	grpc.ServerStream
}

type deviceServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *deviceServiceGetAllServer) Send(m *DeviceStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DeviceService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceServiceServer).Subscribe(m, &deviceServiceSubscribeServer{stream})
}

type DeviceService_SubscribeServer interface {
	Send(*DeviceStreamResponse) error
	grpc.ServerStream
}

type deviceServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *deviceServiceSubscribeServer) Send(m *DeviceStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// DeviceService_ServiceDesc is the grpc.ServiceDesc for DeviceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.inventory.v1.DeviceService",
	HandlerType: (*DeviceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _DeviceService_GetOne_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAll",
			Handler:       _DeviceService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _DeviceService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/inventory.v1/services.gen.proto",
}

// DeviceDecommissioningServiceClient is the client API for DeviceDecommissioningService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceDecommissioningServiceClient interface {
	GetOne(ctx context.Context, in *DeviceDecommissioningRequest, opts ...grpc.CallOption) (*DeviceDecommissioningResponse, error)
	GetAll(ctx context.Context, in *DeviceDecommissioningStreamRequest, opts ...grpc.CallOption) (DeviceDecommissioningService_GetAllClient, error)
	Subscribe(ctx context.Context, in *DeviceDecommissioningStreamRequest, opts ...grpc.CallOption) (DeviceDecommissioningService_SubscribeClient, error)
}

type deviceDecommissioningServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceDecommissioningServiceClient(cc grpc.ClientConnInterface) DeviceDecommissioningServiceClient {
	return &deviceDecommissioningServiceClient{cc}
}

func (c *deviceDecommissioningServiceClient) GetOne(ctx context.Context, in *DeviceDecommissioningRequest, opts ...grpc.CallOption) (*DeviceDecommissioningResponse, error) {
	out := new(DeviceDecommissioningResponse)
	err := c.cc.Invoke(ctx, "/arista.inventory.v1.DeviceDecommissioningService/GetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDecommissioningServiceClient) GetAll(ctx context.Context, in *DeviceDecommissioningStreamRequest, opts ...grpc.CallOption) (DeviceDecommissioningService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeviceDecommissioningService_ServiceDesc.Streams[0], "/arista.inventory.v1.DeviceDecommissioningService/GetAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceDecommissioningServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceDecommissioningService_GetAllClient interface {
	Recv() (*DeviceDecommissioningStreamResponse, error)
	grpc.ClientStream
}

type deviceDecommissioningServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *deviceDecommissioningServiceGetAllClient) Recv() (*DeviceDecommissioningStreamResponse, error) {
	m := new(DeviceDecommissioningStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceDecommissioningServiceClient) Subscribe(ctx context.Context, in *DeviceDecommissioningStreamRequest, opts ...grpc.CallOption) (DeviceDecommissioningService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeviceDecommissioningService_ServiceDesc.Streams[1], "/arista.inventory.v1.DeviceDecommissioningService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceDecommissioningServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceDecommissioningService_SubscribeClient interface {
	Recv() (*DeviceDecommissioningStreamResponse, error)
	grpc.ClientStream
}

type deviceDecommissioningServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *deviceDecommissioningServiceSubscribeClient) Recv() (*DeviceDecommissioningStreamResponse, error) {
	m := new(DeviceDecommissioningStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DeviceDecommissioningServiceServer is the server API for DeviceDecommissioningService service.
// All implementations must embed UnimplementedDeviceDecommissioningServiceServer
// for forward compatibility
type DeviceDecommissioningServiceServer interface {
	GetOne(context.Context, *DeviceDecommissioningRequest) (*DeviceDecommissioningResponse, error)
	GetAll(*DeviceDecommissioningStreamRequest, DeviceDecommissioningService_GetAllServer) error
	Subscribe(*DeviceDecommissioningStreamRequest, DeviceDecommissioningService_SubscribeServer) error
	mustEmbedUnimplementedDeviceDecommissioningServiceServer()
}

// UnimplementedDeviceDecommissioningServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceDecommissioningServiceServer struct {
}

func (UnimplementedDeviceDecommissioningServiceServer) GetOne(context.Context, *DeviceDecommissioningRequest) (*DeviceDecommissioningResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedDeviceDecommissioningServiceServer) GetAll(*DeviceDecommissioningStreamRequest, DeviceDecommissioningService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedDeviceDecommissioningServiceServer) Subscribe(*DeviceDecommissioningStreamRequest, DeviceDecommissioningService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedDeviceDecommissioningServiceServer) mustEmbedUnimplementedDeviceDecommissioningServiceServer() {
}

// UnsafeDeviceDecommissioningServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceDecommissioningServiceServer will
// result in compilation errors.
type UnsafeDeviceDecommissioningServiceServer interface {
	mustEmbedUnimplementedDeviceDecommissioningServiceServer()
}

func RegisterDeviceDecommissioningServiceServer(s grpc.ServiceRegistrar, srv DeviceDecommissioningServiceServer) {
	s.RegisterService(&DeviceDecommissioningService_ServiceDesc, srv)
}

func _DeviceDecommissioningService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceDecommissioningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDecommissioningServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arista.inventory.v1.DeviceDecommissioningService/GetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDecommissioningServiceServer).GetOne(ctx, req.(*DeviceDecommissioningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDecommissioningService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceDecommissioningStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceDecommissioningServiceServer).GetAll(m, &deviceDecommissioningServiceGetAllServer{stream})
}

type DeviceDecommissioningService_GetAllServer interface {
	Send(*DeviceDecommissioningStreamResponse) error
	grpc.ServerStream
}

type deviceDecommissioningServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *deviceDecommissioningServiceGetAllServer) Send(m *DeviceDecommissioningStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DeviceDecommissioningService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceDecommissioningStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceDecommissioningServiceServer).Subscribe(m, &deviceDecommissioningServiceSubscribeServer{stream})
}

type DeviceDecommissioningService_SubscribeServer interface {
	Send(*DeviceDecommissioningStreamResponse) error
	grpc.ServerStream
}

type deviceDecommissioningServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *deviceDecommissioningServiceSubscribeServer) Send(m *DeviceDecommissioningStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// DeviceDecommissioningService_ServiceDesc is the grpc.ServiceDesc for DeviceDecommissioningService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceDecommissioningService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.inventory.v1.DeviceDecommissioningService",
	HandlerType: (*DeviceDecommissioningServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _DeviceDecommissioningService_GetOne_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAll",
			Handler:       _DeviceDecommissioningService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _DeviceDecommissioningService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/inventory.v1/services.gen.proto",
}

// DeviceDecommissioningConfigServiceClient is the client API for DeviceDecommissioningConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceDecommissioningConfigServiceClient interface {
	GetOne(ctx context.Context, in *DeviceDecommissioningConfigRequest, opts ...grpc.CallOption) (*DeviceDecommissioningConfigResponse, error)
	GetAll(ctx context.Context, in *DeviceDecommissioningConfigStreamRequest, opts ...grpc.CallOption) (DeviceDecommissioningConfigService_GetAllClient, error)
	Subscribe(ctx context.Context, in *DeviceDecommissioningConfigStreamRequest, opts ...grpc.CallOption) (DeviceDecommissioningConfigService_SubscribeClient, error)
	Set(ctx context.Context, in *DeviceDecommissioningConfigSetRequest, opts ...grpc.CallOption) (*DeviceDecommissioningConfigSetResponse, error)
	Delete(ctx context.Context, in *DeviceDecommissioningConfigDeleteRequest, opts ...grpc.CallOption) (*DeviceDecommissioningConfigDeleteResponse, error)
	DeleteAll(ctx context.Context, in *DeviceDecommissioningConfigDeleteAllRequest, opts ...grpc.CallOption) (DeviceDecommissioningConfigService_DeleteAllClient, error)
}

type deviceDecommissioningConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceDecommissioningConfigServiceClient(cc grpc.ClientConnInterface) DeviceDecommissioningConfigServiceClient {
	return &deviceDecommissioningConfigServiceClient{cc}
}

func (c *deviceDecommissioningConfigServiceClient) GetOne(ctx context.Context, in *DeviceDecommissioningConfigRequest, opts ...grpc.CallOption) (*DeviceDecommissioningConfigResponse, error) {
	out := new(DeviceDecommissioningConfigResponse)
	err := c.cc.Invoke(ctx, "/arista.inventory.v1.DeviceDecommissioningConfigService/GetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDecommissioningConfigServiceClient) GetAll(ctx context.Context, in *DeviceDecommissioningConfigStreamRequest, opts ...grpc.CallOption) (DeviceDecommissioningConfigService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeviceDecommissioningConfigService_ServiceDesc.Streams[0], "/arista.inventory.v1.DeviceDecommissioningConfigService/GetAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceDecommissioningConfigServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceDecommissioningConfigService_GetAllClient interface {
	Recv() (*DeviceDecommissioningConfigStreamResponse, error)
	grpc.ClientStream
}

type deviceDecommissioningConfigServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *deviceDecommissioningConfigServiceGetAllClient) Recv() (*DeviceDecommissioningConfigStreamResponse, error) {
	m := new(DeviceDecommissioningConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceDecommissioningConfigServiceClient) Subscribe(ctx context.Context, in *DeviceDecommissioningConfigStreamRequest, opts ...grpc.CallOption) (DeviceDecommissioningConfigService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeviceDecommissioningConfigService_ServiceDesc.Streams[1], "/arista.inventory.v1.DeviceDecommissioningConfigService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceDecommissioningConfigServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceDecommissioningConfigService_SubscribeClient interface {
	Recv() (*DeviceDecommissioningConfigStreamResponse, error)
	grpc.ClientStream
}

type deviceDecommissioningConfigServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *deviceDecommissioningConfigServiceSubscribeClient) Recv() (*DeviceDecommissioningConfigStreamResponse, error) {
	m := new(DeviceDecommissioningConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceDecommissioningConfigServiceClient) Set(ctx context.Context, in *DeviceDecommissioningConfigSetRequest, opts ...grpc.CallOption) (*DeviceDecommissioningConfigSetResponse, error) {
	out := new(DeviceDecommissioningConfigSetResponse)
	err := c.cc.Invoke(ctx, "/arista.inventory.v1.DeviceDecommissioningConfigService/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDecommissioningConfigServiceClient) Delete(ctx context.Context, in *DeviceDecommissioningConfigDeleteRequest, opts ...grpc.CallOption) (*DeviceDecommissioningConfigDeleteResponse, error) {
	out := new(DeviceDecommissioningConfigDeleteResponse)
	err := c.cc.Invoke(ctx, "/arista.inventory.v1.DeviceDecommissioningConfigService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDecommissioningConfigServiceClient) DeleteAll(ctx context.Context, in *DeviceDecommissioningConfigDeleteAllRequest, opts ...grpc.CallOption) (DeviceDecommissioningConfigService_DeleteAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeviceDecommissioningConfigService_ServiceDesc.Streams[2], "/arista.inventory.v1.DeviceDecommissioningConfigService/DeleteAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceDecommissioningConfigServiceDeleteAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceDecommissioningConfigService_DeleteAllClient interface {
	Recv() (*DeviceDecommissioningConfigDeleteAllResponse, error)
	grpc.ClientStream
}

type deviceDecommissioningConfigServiceDeleteAllClient struct {
	grpc.ClientStream
}

func (x *deviceDecommissioningConfigServiceDeleteAllClient) Recv() (*DeviceDecommissioningConfigDeleteAllResponse, error) {
	m := new(DeviceDecommissioningConfigDeleteAllResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DeviceDecommissioningConfigServiceServer is the server API for DeviceDecommissioningConfigService service.
// All implementations must embed UnimplementedDeviceDecommissioningConfigServiceServer
// for forward compatibility
type DeviceDecommissioningConfigServiceServer interface {
	GetOne(context.Context, *DeviceDecommissioningConfigRequest) (*DeviceDecommissioningConfigResponse, error)
	GetAll(*DeviceDecommissioningConfigStreamRequest, DeviceDecommissioningConfigService_GetAllServer) error
	Subscribe(*DeviceDecommissioningConfigStreamRequest, DeviceDecommissioningConfigService_SubscribeServer) error
	Set(context.Context, *DeviceDecommissioningConfigSetRequest) (*DeviceDecommissioningConfigSetResponse, error)
	Delete(context.Context, *DeviceDecommissioningConfigDeleteRequest) (*DeviceDecommissioningConfigDeleteResponse, error)
	DeleteAll(*DeviceDecommissioningConfigDeleteAllRequest, DeviceDecommissioningConfigService_DeleteAllServer) error
	mustEmbedUnimplementedDeviceDecommissioningConfigServiceServer()
}

// UnimplementedDeviceDecommissioningConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceDecommissioningConfigServiceServer struct {
}

func (UnimplementedDeviceDecommissioningConfigServiceServer) GetOne(context.Context, *DeviceDecommissioningConfigRequest) (*DeviceDecommissioningConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedDeviceDecommissioningConfigServiceServer) GetAll(*DeviceDecommissioningConfigStreamRequest, DeviceDecommissioningConfigService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedDeviceDecommissioningConfigServiceServer) Subscribe(*DeviceDecommissioningConfigStreamRequest, DeviceDecommissioningConfigService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedDeviceDecommissioningConfigServiceServer) Set(context.Context, *DeviceDecommissioningConfigSetRequest) (*DeviceDecommissioningConfigSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedDeviceDecommissioningConfigServiceServer) Delete(context.Context, *DeviceDecommissioningConfigDeleteRequest) (*DeviceDecommissioningConfigDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDeviceDecommissioningConfigServiceServer) DeleteAll(*DeviceDecommissioningConfigDeleteAllRequest, DeviceDecommissioningConfigService_DeleteAllServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteAll not implemented")
}
func (UnimplementedDeviceDecommissioningConfigServiceServer) mustEmbedUnimplementedDeviceDecommissioningConfigServiceServer() {
}

// UnsafeDeviceDecommissioningConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceDecommissioningConfigServiceServer will
// result in compilation errors.
type UnsafeDeviceDecommissioningConfigServiceServer interface {
	mustEmbedUnimplementedDeviceDecommissioningConfigServiceServer()
}

func RegisterDeviceDecommissioningConfigServiceServer(s grpc.ServiceRegistrar, srv DeviceDecommissioningConfigServiceServer) {
	s.RegisterService(&DeviceDecommissioningConfigService_ServiceDesc, srv)
}

func _DeviceDecommissioningConfigService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceDecommissioningConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDecommissioningConfigServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arista.inventory.v1.DeviceDecommissioningConfigService/GetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDecommissioningConfigServiceServer).GetOne(ctx, req.(*DeviceDecommissioningConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDecommissioningConfigService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceDecommissioningConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceDecommissioningConfigServiceServer).GetAll(m, &deviceDecommissioningConfigServiceGetAllServer{stream})
}

type DeviceDecommissioningConfigService_GetAllServer interface {
	Send(*DeviceDecommissioningConfigStreamResponse) error
	grpc.ServerStream
}

type deviceDecommissioningConfigServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *deviceDecommissioningConfigServiceGetAllServer) Send(m *DeviceDecommissioningConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DeviceDecommissioningConfigService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceDecommissioningConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceDecommissioningConfigServiceServer).Subscribe(m, &deviceDecommissioningConfigServiceSubscribeServer{stream})
}

type DeviceDecommissioningConfigService_SubscribeServer interface {
	Send(*DeviceDecommissioningConfigStreamResponse) error
	grpc.ServerStream
}

type deviceDecommissioningConfigServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *deviceDecommissioningConfigServiceSubscribeServer) Send(m *DeviceDecommissioningConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DeviceDecommissioningConfigService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceDecommissioningConfigSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDecommissioningConfigServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arista.inventory.v1.DeviceDecommissioningConfigService/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDecommissioningConfigServiceServer).Set(ctx, req.(*DeviceDecommissioningConfigSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDecommissioningConfigService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceDecommissioningConfigDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDecommissioningConfigServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arista.inventory.v1.DeviceDecommissioningConfigService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDecommissioningConfigServiceServer).Delete(ctx, req.(*DeviceDecommissioningConfigDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDecommissioningConfigService_DeleteAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceDecommissioningConfigDeleteAllRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceDecommissioningConfigServiceServer).DeleteAll(m, &deviceDecommissioningConfigServiceDeleteAllServer{stream})
}

type DeviceDecommissioningConfigService_DeleteAllServer interface {
	Send(*DeviceDecommissioningConfigDeleteAllResponse) error
	grpc.ServerStream
}

type deviceDecommissioningConfigServiceDeleteAllServer struct {
	grpc.ServerStream
}

func (x *deviceDecommissioningConfigServiceDeleteAllServer) Send(m *DeviceDecommissioningConfigDeleteAllResponse) error {
	return x.ServerStream.SendMsg(m)
}

// DeviceDecommissioningConfigService_ServiceDesc is the grpc.ServiceDesc for DeviceDecommissioningConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceDecommissioningConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.inventory.v1.DeviceDecommissioningConfigService",
	HandlerType: (*DeviceDecommissioningConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _DeviceDecommissioningConfigService_GetOne_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _DeviceDecommissioningConfigService_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DeviceDecommissioningConfigService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAll",
			Handler:       _DeviceDecommissioningConfigService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _DeviceDecommissioningConfigService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteAll",
			Handler:       _DeviceDecommissioningConfigService_DeleteAll_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/inventory.v1/services.gen.proto",
}

// DeviceOnboardingServiceClient is the client API for DeviceOnboardingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceOnboardingServiceClient interface {
	GetOne(ctx context.Context, in *DeviceOnboardingRequest, opts ...grpc.CallOption) (*DeviceOnboardingResponse, error)
	GetAll(ctx context.Context, in *DeviceOnboardingStreamRequest, opts ...grpc.CallOption) (DeviceOnboardingService_GetAllClient, error)
	Subscribe(ctx context.Context, in *DeviceOnboardingStreamRequest, opts ...grpc.CallOption) (DeviceOnboardingService_SubscribeClient, error)
}

type deviceOnboardingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceOnboardingServiceClient(cc grpc.ClientConnInterface) DeviceOnboardingServiceClient {
	return &deviceOnboardingServiceClient{cc}
}

func (c *deviceOnboardingServiceClient) GetOne(ctx context.Context, in *DeviceOnboardingRequest, opts ...grpc.CallOption) (*DeviceOnboardingResponse, error) {
	out := new(DeviceOnboardingResponse)
	err := c.cc.Invoke(ctx, "/arista.inventory.v1.DeviceOnboardingService/GetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceOnboardingServiceClient) GetAll(ctx context.Context, in *DeviceOnboardingStreamRequest, opts ...grpc.CallOption) (DeviceOnboardingService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeviceOnboardingService_ServiceDesc.Streams[0], "/arista.inventory.v1.DeviceOnboardingService/GetAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceOnboardingServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceOnboardingService_GetAllClient interface {
	Recv() (*DeviceOnboardingStreamResponse, error)
	grpc.ClientStream
}

type deviceOnboardingServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *deviceOnboardingServiceGetAllClient) Recv() (*DeviceOnboardingStreamResponse, error) {
	m := new(DeviceOnboardingStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceOnboardingServiceClient) Subscribe(ctx context.Context, in *DeviceOnboardingStreamRequest, opts ...grpc.CallOption) (DeviceOnboardingService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeviceOnboardingService_ServiceDesc.Streams[1], "/arista.inventory.v1.DeviceOnboardingService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceOnboardingServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceOnboardingService_SubscribeClient interface {
	Recv() (*DeviceOnboardingStreamResponse, error)
	grpc.ClientStream
}

type deviceOnboardingServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *deviceOnboardingServiceSubscribeClient) Recv() (*DeviceOnboardingStreamResponse, error) {
	m := new(DeviceOnboardingStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DeviceOnboardingServiceServer is the server API for DeviceOnboardingService service.
// All implementations must embed UnimplementedDeviceOnboardingServiceServer
// for forward compatibility
type DeviceOnboardingServiceServer interface {
	GetOne(context.Context, *DeviceOnboardingRequest) (*DeviceOnboardingResponse, error)
	GetAll(*DeviceOnboardingStreamRequest, DeviceOnboardingService_GetAllServer) error
	Subscribe(*DeviceOnboardingStreamRequest, DeviceOnboardingService_SubscribeServer) error
	mustEmbedUnimplementedDeviceOnboardingServiceServer()
}

// UnimplementedDeviceOnboardingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceOnboardingServiceServer struct {
}

func (UnimplementedDeviceOnboardingServiceServer) GetOne(context.Context, *DeviceOnboardingRequest) (*DeviceOnboardingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedDeviceOnboardingServiceServer) GetAll(*DeviceOnboardingStreamRequest, DeviceOnboardingService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedDeviceOnboardingServiceServer) Subscribe(*DeviceOnboardingStreamRequest, DeviceOnboardingService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedDeviceOnboardingServiceServer) mustEmbedUnimplementedDeviceOnboardingServiceServer() {
}

// UnsafeDeviceOnboardingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceOnboardingServiceServer will
// result in compilation errors.
type UnsafeDeviceOnboardingServiceServer interface {
	mustEmbedUnimplementedDeviceOnboardingServiceServer()
}

func RegisterDeviceOnboardingServiceServer(s grpc.ServiceRegistrar, srv DeviceOnboardingServiceServer) {
	s.RegisterService(&DeviceOnboardingService_ServiceDesc, srv)
}

func _DeviceOnboardingService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceOnboardingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceOnboardingServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arista.inventory.v1.DeviceOnboardingService/GetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceOnboardingServiceServer).GetOne(ctx, req.(*DeviceOnboardingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceOnboardingService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceOnboardingStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceOnboardingServiceServer).GetAll(m, &deviceOnboardingServiceGetAllServer{stream})
}

type DeviceOnboardingService_GetAllServer interface {
	Send(*DeviceOnboardingStreamResponse) error
	grpc.ServerStream
}

type deviceOnboardingServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *deviceOnboardingServiceGetAllServer) Send(m *DeviceOnboardingStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DeviceOnboardingService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceOnboardingStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceOnboardingServiceServer).Subscribe(m, &deviceOnboardingServiceSubscribeServer{stream})
}

type DeviceOnboardingService_SubscribeServer interface {
	Send(*DeviceOnboardingStreamResponse) error
	grpc.ServerStream
}

type deviceOnboardingServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *deviceOnboardingServiceSubscribeServer) Send(m *DeviceOnboardingStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// DeviceOnboardingService_ServiceDesc is the grpc.ServiceDesc for DeviceOnboardingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceOnboardingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.inventory.v1.DeviceOnboardingService",
	HandlerType: (*DeviceOnboardingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _DeviceOnboardingService_GetOne_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAll",
			Handler:       _DeviceOnboardingService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _DeviceOnboardingService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/inventory.v1/services.gen.proto",
}

// DeviceOnboardingConfigServiceClient is the client API for DeviceOnboardingConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceOnboardingConfigServiceClient interface {
	GetOne(ctx context.Context, in *DeviceOnboardingConfigRequest, opts ...grpc.CallOption) (*DeviceOnboardingConfigResponse, error)
	GetAll(ctx context.Context, in *DeviceOnboardingConfigStreamRequest, opts ...grpc.CallOption) (DeviceOnboardingConfigService_GetAllClient, error)
	Subscribe(ctx context.Context, in *DeviceOnboardingConfigStreamRequest, opts ...grpc.CallOption) (DeviceOnboardingConfigService_SubscribeClient, error)
	Set(ctx context.Context, in *DeviceOnboardingConfigSetRequest, opts ...grpc.CallOption) (*DeviceOnboardingConfigSetResponse, error)
	Delete(ctx context.Context, in *DeviceOnboardingConfigDeleteRequest, opts ...grpc.CallOption) (*DeviceOnboardingConfigDeleteResponse, error)
	DeleteAll(ctx context.Context, in *DeviceOnboardingConfigDeleteAllRequest, opts ...grpc.CallOption) (DeviceOnboardingConfigService_DeleteAllClient, error)
}

type deviceOnboardingConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceOnboardingConfigServiceClient(cc grpc.ClientConnInterface) DeviceOnboardingConfigServiceClient {
	return &deviceOnboardingConfigServiceClient{cc}
}

func (c *deviceOnboardingConfigServiceClient) GetOne(ctx context.Context, in *DeviceOnboardingConfigRequest, opts ...grpc.CallOption) (*DeviceOnboardingConfigResponse, error) {
	out := new(DeviceOnboardingConfigResponse)
	err := c.cc.Invoke(ctx, "/arista.inventory.v1.DeviceOnboardingConfigService/GetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceOnboardingConfigServiceClient) GetAll(ctx context.Context, in *DeviceOnboardingConfigStreamRequest, opts ...grpc.CallOption) (DeviceOnboardingConfigService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeviceOnboardingConfigService_ServiceDesc.Streams[0], "/arista.inventory.v1.DeviceOnboardingConfigService/GetAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceOnboardingConfigServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceOnboardingConfigService_GetAllClient interface {
	Recv() (*DeviceOnboardingConfigStreamResponse, error)
	grpc.ClientStream
}

type deviceOnboardingConfigServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *deviceOnboardingConfigServiceGetAllClient) Recv() (*DeviceOnboardingConfigStreamResponse, error) {
	m := new(DeviceOnboardingConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceOnboardingConfigServiceClient) Subscribe(ctx context.Context, in *DeviceOnboardingConfigStreamRequest, opts ...grpc.CallOption) (DeviceOnboardingConfigService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeviceOnboardingConfigService_ServiceDesc.Streams[1], "/arista.inventory.v1.DeviceOnboardingConfigService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceOnboardingConfigServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceOnboardingConfigService_SubscribeClient interface {
	Recv() (*DeviceOnboardingConfigStreamResponse, error)
	grpc.ClientStream
}

type deviceOnboardingConfigServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *deviceOnboardingConfigServiceSubscribeClient) Recv() (*DeviceOnboardingConfigStreamResponse, error) {
	m := new(DeviceOnboardingConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceOnboardingConfigServiceClient) Set(ctx context.Context, in *DeviceOnboardingConfigSetRequest, opts ...grpc.CallOption) (*DeviceOnboardingConfigSetResponse, error) {
	out := new(DeviceOnboardingConfigSetResponse)
	err := c.cc.Invoke(ctx, "/arista.inventory.v1.DeviceOnboardingConfigService/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceOnboardingConfigServiceClient) Delete(ctx context.Context, in *DeviceOnboardingConfigDeleteRequest, opts ...grpc.CallOption) (*DeviceOnboardingConfigDeleteResponse, error) {
	out := new(DeviceOnboardingConfigDeleteResponse)
	err := c.cc.Invoke(ctx, "/arista.inventory.v1.DeviceOnboardingConfigService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceOnboardingConfigServiceClient) DeleteAll(ctx context.Context, in *DeviceOnboardingConfigDeleteAllRequest, opts ...grpc.CallOption) (DeviceOnboardingConfigService_DeleteAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeviceOnboardingConfigService_ServiceDesc.Streams[2], "/arista.inventory.v1.DeviceOnboardingConfigService/DeleteAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceOnboardingConfigServiceDeleteAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceOnboardingConfigService_DeleteAllClient interface {
	Recv() (*DeviceOnboardingConfigDeleteAllResponse, error)
	grpc.ClientStream
}

type deviceOnboardingConfigServiceDeleteAllClient struct {
	grpc.ClientStream
}

func (x *deviceOnboardingConfigServiceDeleteAllClient) Recv() (*DeviceOnboardingConfigDeleteAllResponse, error) {
	m := new(DeviceOnboardingConfigDeleteAllResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DeviceOnboardingConfigServiceServer is the server API for DeviceOnboardingConfigService service.
// All implementations must embed UnimplementedDeviceOnboardingConfigServiceServer
// for forward compatibility
type DeviceOnboardingConfigServiceServer interface {
	GetOne(context.Context, *DeviceOnboardingConfigRequest) (*DeviceOnboardingConfigResponse, error)
	GetAll(*DeviceOnboardingConfigStreamRequest, DeviceOnboardingConfigService_GetAllServer) error
	Subscribe(*DeviceOnboardingConfigStreamRequest, DeviceOnboardingConfigService_SubscribeServer) error
	Set(context.Context, *DeviceOnboardingConfigSetRequest) (*DeviceOnboardingConfigSetResponse, error)
	Delete(context.Context, *DeviceOnboardingConfigDeleteRequest) (*DeviceOnboardingConfigDeleteResponse, error)
	DeleteAll(*DeviceOnboardingConfigDeleteAllRequest, DeviceOnboardingConfigService_DeleteAllServer) error
	mustEmbedUnimplementedDeviceOnboardingConfigServiceServer()
}

// UnimplementedDeviceOnboardingConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceOnboardingConfigServiceServer struct {
}

func (UnimplementedDeviceOnboardingConfigServiceServer) GetOne(context.Context, *DeviceOnboardingConfigRequest) (*DeviceOnboardingConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedDeviceOnboardingConfigServiceServer) GetAll(*DeviceOnboardingConfigStreamRequest, DeviceOnboardingConfigService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedDeviceOnboardingConfigServiceServer) Subscribe(*DeviceOnboardingConfigStreamRequest, DeviceOnboardingConfigService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedDeviceOnboardingConfigServiceServer) Set(context.Context, *DeviceOnboardingConfigSetRequest) (*DeviceOnboardingConfigSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedDeviceOnboardingConfigServiceServer) Delete(context.Context, *DeviceOnboardingConfigDeleteRequest) (*DeviceOnboardingConfigDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDeviceOnboardingConfigServiceServer) DeleteAll(*DeviceOnboardingConfigDeleteAllRequest, DeviceOnboardingConfigService_DeleteAllServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteAll not implemented")
}
func (UnimplementedDeviceOnboardingConfigServiceServer) mustEmbedUnimplementedDeviceOnboardingConfigServiceServer() {
}

// UnsafeDeviceOnboardingConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceOnboardingConfigServiceServer will
// result in compilation errors.
type UnsafeDeviceOnboardingConfigServiceServer interface {
	mustEmbedUnimplementedDeviceOnboardingConfigServiceServer()
}

func RegisterDeviceOnboardingConfigServiceServer(s grpc.ServiceRegistrar, srv DeviceOnboardingConfigServiceServer) {
	s.RegisterService(&DeviceOnboardingConfigService_ServiceDesc, srv)
}

func _DeviceOnboardingConfigService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceOnboardingConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceOnboardingConfigServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arista.inventory.v1.DeviceOnboardingConfigService/GetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceOnboardingConfigServiceServer).GetOne(ctx, req.(*DeviceOnboardingConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceOnboardingConfigService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceOnboardingConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceOnboardingConfigServiceServer).GetAll(m, &deviceOnboardingConfigServiceGetAllServer{stream})
}

type DeviceOnboardingConfigService_GetAllServer interface {
	Send(*DeviceOnboardingConfigStreamResponse) error
	grpc.ServerStream
}

type deviceOnboardingConfigServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *deviceOnboardingConfigServiceGetAllServer) Send(m *DeviceOnboardingConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DeviceOnboardingConfigService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceOnboardingConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceOnboardingConfigServiceServer).Subscribe(m, &deviceOnboardingConfigServiceSubscribeServer{stream})
}

type DeviceOnboardingConfigService_SubscribeServer interface {
	Send(*DeviceOnboardingConfigStreamResponse) error
	grpc.ServerStream
}

type deviceOnboardingConfigServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *deviceOnboardingConfigServiceSubscribeServer) Send(m *DeviceOnboardingConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DeviceOnboardingConfigService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceOnboardingConfigSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceOnboardingConfigServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arista.inventory.v1.DeviceOnboardingConfigService/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceOnboardingConfigServiceServer).Set(ctx, req.(*DeviceOnboardingConfigSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceOnboardingConfigService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceOnboardingConfigDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceOnboardingConfigServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arista.inventory.v1.DeviceOnboardingConfigService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceOnboardingConfigServiceServer).Delete(ctx, req.(*DeviceOnboardingConfigDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceOnboardingConfigService_DeleteAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceOnboardingConfigDeleteAllRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceOnboardingConfigServiceServer).DeleteAll(m, &deviceOnboardingConfigServiceDeleteAllServer{stream})
}

type DeviceOnboardingConfigService_DeleteAllServer interface {
	Send(*DeviceOnboardingConfigDeleteAllResponse) error
	grpc.ServerStream
}

type deviceOnboardingConfigServiceDeleteAllServer struct {
	grpc.ServerStream
}

func (x *deviceOnboardingConfigServiceDeleteAllServer) Send(m *DeviceOnboardingConfigDeleteAllResponse) error {
	return x.ServerStream.SendMsg(m)
}

// DeviceOnboardingConfigService_ServiceDesc is the grpc.ServiceDesc for DeviceOnboardingConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceOnboardingConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.inventory.v1.DeviceOnboardingConfigService",
	HandlerType: (*DeviceOnboardingConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _DeviceOnboardingConfigService_GetOne_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _DeviceOnboardingConfigService_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DeviceOnboardingConfigService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAll",
			Handler:       _DeviceOnboardingConfigService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _DeviceOnboardingConfigService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteAll",
			Handler:       _DeviceOnboardingConfigService_DeleteAll_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/inventory.v1/services.gen.proto",
}

// ProvisionedDeviceServiceClient is the client API for ProvisionedDeviceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProvisionedDeviceServiceClient interface {
	GetOne(ctx context.Context, in *ProvisionedDeviceRequest, opts ...grpc.CallOption) (*ProvisionedDeviceResponse, error)
	GetAll(ctx context.Context, in *ProvisionedDeviceStreamRequest, opts ...grpc.CallOption) (ProvisionedDeviceService_GetAllClient, error)
	Subscribe(ctx context.Context, in *ProvisionedDeviceStreamRequest, opts ...grpc.CallOption) (ProvisionedDeviceService_SubscribeClient, error)
}

type provisionedDeviceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProvisionedDeviceServiceClient(cc grpc.ClientConnInterface) ProvisionedDeviceServiceClient {
	return &provisionedDeviceServiceClient{cc}
}

func (c *provisionedDeviceServiceClient) GetOne(ctx context.Context, in *ProvisionedDeviceRequest, opts ...grpc.CallOption) (*ProvisionedDeviceResponse, error) {
	out := new(ProvisionedDeviceResponse)
	err := c.cc.Invoke(ctx, "/arista.inventory.v1.ProvisionedDeviceService/GetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *provisionedDeviceServiceClient) GetAll(ctx context.Context, in *ProvisionedDeviceStreamRequest, opts ...grpc.CallOption) (ProvisionedDeviceService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProvisionedDeviceService_ServiceDesc.Streams[0], "/arista.inventory.v1.ProvisionedDeviceService/GetAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &provisionedDeviceServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProvisionedDeviceService_GetAllClient interface {
	Recv() (*ProvisionedDeviceStreamResponse, error)
	grpc.ClientStream
}

type provisionedDeviceServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *provisionedDeviceServiceGetAllClient) Recv() (*ProvisionedDeviceStreamResponse, error) {
	m := new(ProvisionedDeviceStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *provisionedDeviceServiceClient) Subscribe(ctx context.Context, in *ProvisionedDeviceStreamRequest, opts ...grpc.CallOption) (ProvisionedDeviceService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProvisionedDeviceService_ServiceDesc.Streams[1], "/arista.inventory.v1.ProvisionedDeviceService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &provisionedDeviceServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProvisionedDeviceService_SubscribeClient interface {
	Recv() (*ProvisionedDeviceStreamResponse, error)
	grpc.ClientStream
}

type provisionedDeviceServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *provisionedDeviceServiceSubscribeClient) Recv() (*ProvisionedDeviceStreamResponse, error) {
	m := new(ProvisionedDeviceStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProvisionedDeviceServiceServer is the server API for ProvisionedDeviceService service.
// All implementations must embed UnimplementedProvisionedDeviceServiceServer
// for forward compatibility
type ProvisionedDeviceServiceServer interface {
	GetOne(context.Context, *ProvisionedDeviceRequest) (*ProvisionedDeviceResponse, error)
	GetAll(*ProvisionedDeviceStreamRequest, ProvisionedDeviceService_GetAllServer) error
	Subscribe(*ProvisionedDeviceStreamRequest, ProvisionedDeviceService_SubscribeServer) error
	mustEmbedUnimplementedProvisionedDeviceServiceServer()
}

// UnimplementedProvisionedDeviceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProvisionedDeviceServiceServer struct {
}

func (UnimplementedProvisionedDeviceServiceServer) GetOne(context.Context, *ProvisionedDeviceRequest) (*ProvisionedDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedProvisionedDeviceServiceServer) GetAll(*ProvisionedDeviceStreamRequest, ProvisionedDeviceService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedProvisionedDeviceServiceServer) Subscribe(*ProvisionedDeviceStreamRequest, ProvisionedDeviceService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedProvisionedDeviceServiceServer) mustEmbedUnimplementedProvisionedDeviceServiceServer() {
}

// UnsafeProvisionedDeviceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProvisionedDeviceServiceServer will
// result in compilation errors.
type UnsafeProvisionedDeviceServiceServer interface {
	mustEmbedUnimplementedProvisionedDeviceServiceServer()
}

func RegisterProvisionedDeviceServiceServer(s grpc.ServiceRegistrar, srv ProvisionedDeviceServiceServer) {
	s.RegisterService(&ProvisionedDeviceService_ServiceDesc, srv)
}

func _ProvisionedDeviceService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvisionedDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisionedDeviceServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arista.inventory.v1.ProvisionedDeviceService/GetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisionedDeviceServiceServer).GetOne(ctx, req.(*ProvisionedDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProvisionedDeviceService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProvisionedDeviceStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProvisionedDeviceServiceServer).GetAll(m, &provisionedDeviceServiceGetAllServer{stream})
}

type ProvisionedDeviceService_GetAllServer interface {
	Send(*ProvisionedDeviceStreamResponse) error
	grpc.ServerStream
}

type provisionedDeviceServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *provisionedDeviceServiceGetAllServer) Send(m *ProvisionedDeviceStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ProvisionedDeviceService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProvisionedDeviceStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProvisionedDeviceServiceServer).Subscribe(m, &provisionedDeviceServiceSubscribeServer{stream})
}

type ProvisionedDeviceService_SubscribeServer interface {
	Send(*ProvisionedDeviceStreamResponse) error
	grpc.ServerStream
}

type provisionedDeviceServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *provisionedDeviceServiceSubscribeServer) Send(m *ProvisionedDeviceStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ProvisionedDeviceService_ServiceDesc is the grpc.ServiceDesc for ProvisionedDeviceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProvisionedDeviceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.inventory.v1.ProvisionedDeviceService",
	HandlerType: (*ProvisionedDeviceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _ProvisionedDeviceService_GetOne_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAll",
			Handler:       _ProvisionedDeviceService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _ProvisionedDeviceService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/inventory.v1/services.gen.proto",
}
