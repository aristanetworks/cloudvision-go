// Copyright (c) 2025 Arista Networks, Inc. All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v4.24.4
// source: arista/auditlog.v1/auditlog.proto

package audit

import (
	fmp "github.com/aristanetworks/cloudvision-go/api/fmp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Severity is the level of criticality of the log.
type Severity int32

const (
	// SEVERITY_UNSPECIFIED severity
	Severity_SEVERITY_UNSPECIFIED Severity = 0
	// SEVERITY_EMERGENCY severity
	Severity_SEVERITY_EMERGENCY Severity = 1
	// SEVERITY_ALERT severity
	Severity_SEVERITY_ALERT Severity = 2
	// SEVERITY_CRITICAL severity
	Severity_SEVERITY_CRITICAL Severity = 3
	// SEVERITY_ERROR severity
	Severity_SEVERITY_ERROR Severity = 4
	// SEVERITY_WARNING severity
	Severity_SEVERITY_WARNING Severity = 5
	// SEVERITY_NOTICE severity
	Severity_SEVERITY_NOTICE Severity = 6
	// SEVERITY_INFO severity
	Severity_SEVERITY_INFO Severity = 7
	// SEVERITY_DEBUG severity
	Severity_SEVERITY_DEBUG Severity = 8
)

// Enum value maps for Severity.
var (
	Severity_name = map[int32]string{
		0: "SEVERITY_UNSPECIFIED",
		1: "SEVERITY_EMERGENCY",
		2: "SEVERITY_ALERT",
		3: "SEVERITY_CRITICAL",
		4: "SEVERITY_ERROR",
		5: "SEVERITY_WARNING",
		6: "SEVERITY_NOTICE",
		7: "SEVERITY_INFO",
		8: "SEVERITY_DEBUG",
	}
	Severity_value = map[string]int32{
		"SEVERITY_UNSPECIFIED": 0,
		"SEVERITY_EMERGENCY":   1,
		"SEVERITY_ALERT":       2,
		"SEVERITY_CRITICAL":    3,
		"SEVERITY_ERROR":       4,
		"SEVERITY_WARNING":     5,
		"SEVERITY_NOTICE":      6,
		"SEVERITY_INFO":        7,
		"SEVERITY_DEBUG":       8,
	}
)

func (x Severity) Enum() *Severity {
	p := new(Severity)
	*p = x
	return p
}

func (x Severity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Severity) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_auditlog_v1_auditlog_proto_enumTypes[0].Descriptor()
}

func (Severity) Type() protoreflect.EnumType {
	return &file_arista_auditlog_v1_auditlog_proto_enumTypes[0]
}

func (x Severity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Severity.Descriptor instead.
func (Severity) EnumDescriptor() ([]byte, []int) {
	return file_arista_auditlog_v1_auditlog_proto_rawDescGZIP(), []int{0}
}

// CategoryType is the type of the category
type CategoryType int32

const (
	// CATEGORY_TYPE_UNSPECIFIED categoryType
	CategoryType_CATEGORY_TYPE_UNSPECIFIED CategoryType = 0
	// CATEGORY_TYPE_INVENTORY categoryType
	// the identifier for this category is the deviceId
	CategoryType_CATEGORY_TYPE_INVENTORY CategoryType = 1
	// CATEGORY_TYPE_CONFIGLET categoryType
	// the identifier for this category is a custom identifier defined by the user.
	CategoryType_CATEGORY_TYPE_CONFIGLET CategoryType = 2
	// CATEGORY_TYPE_IMAGE categoryType
	// the identifier for this category is a custom identifier defined by the user.
	CategoryType_CATEGORY_TYPE_IMAGE CategoryType = 3
	// CATEGORY_TYPE_LABEL categoryType
	// the identifier for this category is a custom identifier defined by the user.
	CategoryType_CATEGORY_TYPE_LABEL CategoryType = 4
	// CATEGORY_TYPE_USER categoryType
	// the identifier for this category is a custom identifier defined by the user.
	CategoryType_CATEGORY_TYPE_USER CategoryType = 5
	// CATEGORY_TYPE_CHANGECONTROL categoryType
	// the identifier for this category is a custom identifier defined by the user.
	CategoryType_CATEGORY_TYPE_CHANGECONTROL CategoryType = 6
	// CATEGORY_TYPE_ROLE categoryType
	// the identifier for this category is a custom identifier defined by the user.
	CategoryType_CATEGORY_TYPE_ROLE CategoryType = 7
	// CATEGORY_TYPE_SNAPSHOT categoryType
	// the identifier for this category is a custom identifier defined by the user.
	CategoryType_CATEGORY_TYPE_SNAPSHOT CategoryType = 8
	// CATEGORY_TYPE_EXECACTION categoryType
	// the identifier for this category is a custom identifier defined by the user.
	CategoryType_CATEGORY_TYPE_EXECACTION CategoryType = 9
	// CATEGORY_TYPE_ACCESSCONTROL categoryType
	// the identifier for this category is a custom identifier defined by the user.
	CategoryType_CATEGORY_TYPE_ACCESSCONTROL CategoryType = 10
)

// Enum value maps for CategoryType.
var (
	CategoryType_name = map[int32]string{
		0:  "CATEGORY_TYPE_UNSPECIFIED",
		1:  "CATEGORY_TYPE_INVENTORY",
		2:  "CATEGORY_TYPE_CONFIGLET",
		3:  "CATEGORY_TYPE_IMAGE",
		4:  "CATEGORY_TYPE_LABEL",
		5:  "CATEGORY_TYPE_USER",
		6:  "CATEGORY_TYPE_CHANGECONTROL",
		7:  "CATEGORY_TYPE_ROLE",
		8:  "CATEGORY_TYPE_SNAPSHOT",
		9:  "CATEGORY_TYPE_EXECACTION",
		10: "CATEGORY_TYPE_ACCESSCONTROL",
	}
	CategoryType_value = map[string]int32{
		"CATEGORY_TYPE_UNSPECIFIED":   0,
		"CATEGORY_TYPE_INVENTORY":     1,
		"CATEGORY_TYPE_CONFIGLET":     2,
		"CATEGORY_TYPE_IMAGE":         3,
		"CATEGORY_TYPE_LABEL":         4,
		"CATEGORY_TYPE_USER":          5,
		"CATEGORY_TYPE_CHANGECONTROL": 6,
		"CATEGORY_TYPE_ROLE":          7,
		"CATEGORY_TYPE_SNAPSHOT":      8,
		"CATEGORY_TYPE_EXECACTION":    9,
		"CATEGORY_TYPE_ACCESSCONTROL": 10,
	}
)

func (x CategoryType) Enum() *CategoryType {
	p := new(CategoryType)
	*p = x
	return p
}

func (x CategoryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CategoryType) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_auditlog_v1_auditlog_proto_enumTypes[1].Descriptor()
}

func (CategoryType) Type() protoreflect.EnumType {
	return &file_arista_auditlog_v1_auditlog_proto_enumTypes[1]
}

func (x CategoryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CategoryType.Descriptor instead.
func (CategoryType) EnumDescriptor() ([]byte, []int) {
	return file_arista_auditlog_v1_auditlog_proto_rawDescGZIP(), []int{1}
}

// Attributes are fields that make up the audit log.
type Attributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// user is the CloudVision user to which the log corresponds to.
	User *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	// timestamp at which the log was generated.
	// eg: 2006-01-02T15:04:05.000Z
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// severity is level of importance or urgency of the audit log message.
	// eg: Debug, Info, Error
	Severity Severity `protobuf:"varint,3,opt,name=severity,proto3,enum=arista.auditlog.v1.Severity" json:"severity,omitempty"`
	// device_name of the device for which audit log is sent.
	DeviceName *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	// service name for which audit log is added.
	// eg: aaa, accesscontrol, inventory
	Service *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=service,proto3" json:"service,omitempty"`
	// message in the audit log.
	// eg: "user logged in"
	Message *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	// tags associated with the audit log.
	// eg: `tags: {mnemonic: DEVICE_PROVISIONING_SUCCESS}`
	Tags *fmp.MapStringString `protobuf:"bytes,7,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *Attributes) Reset() {
	*x = Attributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_auditlog_v1_auditlog_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attributes) ProtoMessage() {}

func (x *Attributes) ProtoReflect() protoreflect.Message {
	mi := &file_arista_auditlog_v1_auditlog_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attributes.ProtoReflect.Descriptor instead.
func (*Attributes) Descriptor() ([]byte, []int) {
	return file_arista_auditlog_v1_auditlog_proto_rawDescGZIP(), []int{0}
}

func (x *Attributes) GetUser() *wrapperspb.StringValue {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Attributes) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Attributes) GetSeverity() Severity {
	if x != nil {
		return x.Severity
	}
	return Severity_SEVERITY_UNSPECIFIED
}

func (x *Attributes) GetDeviceName() *wrapperspb.StringValue {
	if x != nil {
		return x.DeviceName
	}
	return nil
}

func (x *Attributes) GetService() *wrapperspb.StringValue {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *Attributes) GetMessage() *wrapperspb.StringValue {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *Attributes) GetTags() *fmp.MapStringString {
	if x != nil {
		return x.Tags
	}
	return nil
}

// AuditlogKey is the unique key for each message.
type AuditlogKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the unique uuid for an audit log.
	Id *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AuditlogKey) Reset() {
	*x = AuditlogKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_auditlog_v1_auditlog_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditlogKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditlogKey) ProtoMessage() {}

func (x *AuditlogKey) ProtoReflect() protoreflect.Message {
	mi := &file_arista_auditlog_v1_auditlog_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditlogKey.ProtoReflect.Descriptor instead.
func (*AuditlogKey) Descriptor() ([]byte, []int) {
	return file_arista_auditlog_v1_auditlog_proto_rawDescGZIP(), []int{1}
}

func (x *AuditlogKey) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

// Auditlog contains the different fields as well as the formatted log.
type Auditlog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key is the unique key for each message.
	Key *AuditlogKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// attributes are the different fields that make up the audit log.
	Attributes *Attributes `protobuf:"bytes,2,opt,name=attributes,proto3" json:"attributes,omitempty"`
	// log is the formatted log message containing the different attributes
	// including timestamp, serviceName, severity , userName in addition to
	// the message.
	// May 17 12:50:54 host service Message: user logged in, User: abc
	Log *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=log,proto3" json:"log,omitempty"`
}

func (x *Auditlog) Reset() {
	*x = Auditlog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_auditlog_v1_auditlog_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Auditlog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Auditlog) ProtoMessage() {}

func (x *Auditlog) ProtoReflect() protoreflect.Message {
	mi := &file_arista_auditlog_v1_auditlog_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Auditlog.ProtoReflect.Descriptor instead.
func (*Auditlog) Descriptor() ([]byte, []int) {
	return file_arista_auditlog_v1_auditlog_proto_rawDescGZIP(), []int{2}
}

func (x *Auditlog) GetKey() *AuditlogKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Auditlog) GetAttributes() *Attributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Auditlog) GetLog() *wrapperspb.StringValue {
	if x != nil {
		return x.Log
	}
	return nil
}

// Filter are the different filters that can be applied.
type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// category filters based on category of the logs.
	// eg:
	// `{filter:[{category:{custom_type: abc}}]}`
	// filters all logs associated with the service abc.
	Category *Category `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	// queries is the list of strings that should be present in the log.
	// eg: `{filter:[{queries:{values:[abc]}}]}` searches for all
	// logs containing the string abc.
	Queries *fmp.RepeatedString `protobuf:"bytes,2,opt,name=queries,proto3" json:"queries,omitempty"`
	// tags filters based on tags associated with the log.
	// eg: `{filter:[{tags:{values:{id:xyz}}}]}`
	// searches for all logs associates with the tag
	// id:xyz.
	Tags *fmp.MapStringString `protobuf:"bytes,3,opt,name=tags,proto3" json:"tags,omitempty"`
	// severity is level of importance or urgency of the audit log message.
	Severity Severity `protobuf:"varint,4,opt,name=severity,proto3,enum=arista.auditlog.v1.Severity" json:"severity,omitempty"`
	// user filters the audit logs by given username across categories.
	User *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_auditlog_v1_auditlog_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_arista_auditlog_v1_auditlog_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_arista_auditlog_v1_auditlog_proto_rawDescGZIP(), []int{3}
}

func (x *Filter) GetCategory() *Category {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *Filter) GetQueries() *fmp.RepeatedString {
	if x != nil {
		return x.Queries
	}
	return nil
}

func (x *Filter) GetTags() *fmp.MapStringString {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Filter) GetSeverity() Severity {
	if x != nil {
		return x.Severity
	}
	return Severity_SEVERITY_UNSPECIFIED
}

func (x *Filter) GetUser() *wrapperspb.StringValue {
	if x != nil {
		return x.User
	}
	return nil
}

// Category organizes audit logs into different groups using the CategoryType and the identifier
// eg: `filter:[{category:{type:CATEGORY_TYPE_INVENTORY,identifier:abc}}]`
// filters all logs associated with the service "inventory" and device abc
type Category struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type of the category.
	Type CategoryType `protobuf:"varint,1,opt,name=type,proto3,enum=arista.auditlog.v1.CategoryType" json:"type,omitempty"`
	// identifier is the object with which we want to filter the category.
	// eg: fetch all logs from the device with id abc
	// Here the category is inventory and the identifier is abc.
	Identifier *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// custom_type is a custom category that can be created by the user.
	// this is used if none of the existing categories can support the users's usecase.
	CustomType *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=custom_type,json=customType,proto3" json:"custom_type,omitempty"`
}

func (x *Category) Reset() {
	*x = Category{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_auditlog_v1_auditlog_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Category) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Category) ProtoMessage() {}

func (x *Category) ProtoReflect() protoreflect.Message {
	mi := &file_arista_auditlog_v1_auditlog_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Category.ProtoReflect.Descriptor instead.
func (*Category) Descriptor() ([]byte, []int) {
	return file_arista_auditlog_v1_auditlog_proto_rawDescGZIP(), []int{4}
}

func (x *Category) GetType() CategoryType {
	if x != nil {
		return x.Type
	}
	return CategoryType_CATEGORY_TYPE_UNSPECIFIED
}

func (x *Category) GetIdentifier() *wrapperspb.StringValue {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Category) GetCustomType() *wrapperspb.StringValue {
	if x != nil {
		return x.CustomType
	}
	return nil
}

var File_arista_auditlog_v1_auditlog_proto protoreflect.FileDescriptor

var file_arista_auditlog_v1_auditlog_proto_rawDesc = []byte{
	0x0a, 0x21, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x12, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x66, 0x6d, 0x70, 0x2f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12,
	0x66, 0x6d, 0x70, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x8b, 0x03, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x30, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x38, 0x0a,
	0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x36,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x22, 0x41, 0x0a, 0x0b, 0x41, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x4b, 0x65, 0x79, 0x12,
	0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x04, 0x80,
	0x8e, 0x19, 0x01, 0x22, 0xc5, 0x01, 0x0a, 0x08, 0x41, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67,
	0x12, 0x31, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x4b, 0x65, 0x79, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03,
	0x6c, 0x6f, 0x67, 0x3a, 0x16, 0xfa, 0x8d, 0x19, 0x02, 0x72, 0x6f, 0x8a, 0x8e, 0x19, 0x08, 0x5b,
	0x5d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x90, 0x8e, 0x19, 0x01, 0x22, 0x87, 0x02, 0x0a, 0x06,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x2d, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x28, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x66, 0x6d, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0xbd, 0x01, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x2a, 0xcd, 0x01, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x4e,
	0x43, 0x59, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x03, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x10, 0x06, 0x12, 0x11,
	0x0a, 0x0d, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10,
	0x07, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x45,
	0x42, 0x55, 0x47, 0x10, 0x08, 0x2a, 0xc5, 0x02, 0x0a, 0x0c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59,
	0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4c, 0x45, 0x54, 0x10, 0x02, 0x12,
	0x17, 0x0a, 0x13, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10,
	0x04, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x45,
	0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x10, 0x08, 0x12, 0x1c,
	0x0a, 0x18, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x45, 0x58, 0x45, 0x43, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09, 0x12, 0x1f, 0x0a, 0x1b,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x10, 0x0a, 0x42, 0x47, 0x5a,
	0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x3b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_arista_auditlog_v1_auditlog_proto_rawDescOnce sync.Once
	file_arista_auditlog_v1_auditlog_proto_rawDescData = file_arista_auditlog_v1_auditlog_proto_rawDesc
)

func file_arista_auditlog_v1_auditlog_proto_rawDescGZIP() []byte {
	file_arista_auditlog_v1_auditlog_proto_rawDescOnce.Do(func() {
		file_arista_auditlog_v1_auditlog_proto_rawDescData = protoimpl.X.CompressGZIP(file_arista_auditlog_v1_auditlog_proto_rawDescData)
	})
	return file_arista_auditlog_v1_auditlog_proto_rawDescData
}

var file_arista_auditlog_v1_auditlog_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_arista_auditlog_v1_auditlog_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_arista_auditlog_v1_auditlog_proto_goTypes = []interface{}{
	(Severity)(0),                  // 0: arista.auditlog.v1.Severity
	(CategoryType)(0),              // 1: arista.auditlog.v1.CategoryType
	(*Attributes)(nil),             // 2: arista.auditlog.v1.Attributes
	(*AuditlogKey)(nil),            // 3: arista.auditlog.v1.AuditlogKey
	(*Auditlog)(nil),               // 4: arista.auditlog.v1.Auditlog
	(*Filter)(nil),                 // 5: arista.auditlog.v1.Filter
	(*Category)(nil),               // 6: arista.auditlog.v1.Category
	(*wrapperspb.StringValue)(nil), // 7: google.protobuf.StringValue
	(*timestamppb.Timestamp)(nil),  // 8: google.protobuf.Timestamp
	(*fmp.MapStringString)(nil),    // 9: fmp.MapStringString
	(*fmp.RepeatedString)(nil),     // 10: fmp.RepeatedString
}
var file_arista_auditlog_v1_auditlog_proto_depIdxs = []int32{
	7,  // 0: arista.auditlog.v1.Attributes.user:type_name -> google.protobuf.StringValue
	8,  // 1: arista.auditlog.v1.Attributes.timestamp:type_name -> google.protobuf.Timestamp
	0,  // 2: arista.auditlog.v1.Attributes.severity:type_name -> arista.auditlog.v1.Severity
	7,  // 3: arista.auditlog.v1.Attributes.device_name:type_name -> google.protobuf.StringValue
	7,  // 4: arista.auditlog.v1.Attributes.service:type_name -> google.protobuf.StringValue
	7,  // 5: arista.auditlog.v1.Attributes.message:type_name -> google.protobuf.StringValue
	9,  // 6: arista.auditlog.v1.Attributes.tags:type_name -> fmp.MapStringString
	7,  // 7: arista.auditlog.v1.AuditlogKey.id:type_name -> google.protobuf.StringValue
	3,  // 8: arista.auditlog.v1.Auditlog.key:type_name -> arista.auditlog.v1.AuditlogKey
	2,  // 9: arista.auditlog.v1.Auditlog.attributes:type_name -> arista.auditlog.v1.Attributes
	7,  // 10: arista.auditlog.v1.Auditlog.log:type_name -> google.protobuf.StringValue
	6,  // 11: arista.auditlog.v1.Filter.category:type_name -> arista.auditlog.v1.Category
	10, // 12: arista.auditlog.v1.Filter.queries:type_name -> fmp.RepeatedString
	9,  // 13: arista.auditlog.v1.Filter.tags:type_name -> fmp.MapStringString
	0,  // 14: arista.auditlog.v1.Filter.severity:type_name -> arista.auditlog.v1.Severity
	7,  // 15: arista.auditlog.v1.Filter.user:type_name -> google.protobuf.StringValue
	1,  // 16: arista.auditlog.v1.Category.type:type_name -> arista.auditlog.v1.CategoryType
	7,  // 17: arista.auditlog.v1.Category.identifier:type_name -> google.protobuf.StringValue
	7,  // 18: arista.auditlog.v1.Category.custom_type:type_name -> google.protobuf.StringValue
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_arista_auditlog_v1_auditlog_proto_init() }
func file_arista_auditlog_v1_auditlog_proto_init() {
	if File_arista_auditlog_v1_auditlog_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_arista_auditlog_v1_auditlog_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_auditlog_v1_auditlog_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditlogKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_auditlog_v1_auditlog_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Auditlog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_auditlog_v1_auditlog_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_auditlog_v1_auditlog_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Category); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_arista_auditlog_v1_auditlog_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_arista_auditlog_v1_auditlog_proto_goTypes,
		DependencyIndexes: file_arista_auditlog_v1_auditlog_proto_depIdxs,
		EnumInfos:         file_arista_auditlog_v1_auditlog_proto_enumTypes,
		MessageInfos:      file_arista_auditlog_v1_auditlog_proto_msgTypes,
	}.Build()
	File_arista_auditlog_v1_auditlog_proto = out.File
	file_arista_auditlog_v1_auditlog_proto_rawDesc = nil
	file_arista_auditlog_v1_auditlog_proto_goTypes = nil
	file_arista_auditlog_v1_auditlog_proto_depIdxs = nil
}
