// Copyright (c) 2025 Arista Networks, Inc. All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

//
// Code generated by boomtown. DO NOT EDIT.
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: arista/auditlog.v1/services.gen.proto

package audit

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuditlogService_GetOne_FullMethodName        = "/arista.auditlog.v1.AuditlogService/GetOne"
	AuditlogService_GetSome_FullMethodName       = "/arista.auditlog.v1.AuditlogService/GetSome"
	AuditlogService_GetAll_FullMethodName        = "/arista.auditlog.v1.AuditlogService/GetAll"
	AuditlogService_Subscribe_FullMethodName     = "/arista.auditlog.v1.AuditlogService/Subscribe"
	AuditlogService_GetMeta_FullMethodName       = "/arista.auditlog.v1.AuditlogService/GetMeta"
	AuditlogService_SubscribeMeta_FullMethodName = "/arista.auditlog.v1.AuditlogService/SubscribeMeta"
)

// AuditlogServiceClient is the client API for AuditlogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuditlogServiceClient interface {
	GetOne(ctx context.Context, in *AuditlogRequest, opts ...grpc.CallOption) (*AuditlogResponse, error)
	GetSome(ctx context.Context, in *AuditlogSomeRequest, opts ...grpc.CallOption) (AuditlogService_GetSomeClient, error)
	GetAll(ctx context.Context, in *AuditlogStreamRequest, opts ...grpc.CallOption) (AuditlogService_GetAllClient, error)
	Subscribe(ctx context.Context, in *AuditlogStreamRequest, opts ...grpc.CallOption) (AuditlogService_SubscribeClient, error)
	GetMeta(ctx context.Context, in *AuditlogStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error)
	SubscribeMeta(ctx context.Context, in *AuditlogStreamRequest, opts ...grpc.CallOption) (AuditlogService_SubscribeMetaClient, error)
}

type auditlogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuditlogServiceClient(cc grpc.ClientConnInterface) AuditlogServiceClient {
	return &auditlogServiceClient{cc}
}

func (c *auditlogServiceClient) GetOne(ctx context.Context, in *AuditlogRequest, opts ...grpc.CallOption) (*AuditlogResponse, error) {
	out := new(AuditlogResponse)
	err := c.cc.Invoke(ctx, AuditlogService_GetOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditlogServiceClient) GetSome(ctx context.Context, in *AuditlogSomeRequest, opts ...grpc.CallOption) (AuditlogService_GetSomeClient, error) {
	stream, err := c.cc.NewStream(ctx, &AuditlogService_ServiceDesc.Streams[0], AuditlogService_GetSome_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &auditlogServiceGetSomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AuditlogService_GetSomeClient interface {
	Recv() (*AuditlogSomeResponse, error)
	grpc.ClientStream
}

type auditlogServiceGetSomeClient struct {
	grpc.ClientStream
}

func (x *auditlogServiceGetSomeClient) Recv() (*AuditlogSomeResponse, error) {
	m := new(AuditlogSomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *auditlogServiceClient) GetAll(ctx context.Context, in *AuditlogStreamRequest, opts ...grpc.CallOption) (AuditlogService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &AuditlogService_ServiceDesc.Streams[1], AuditlogService_GetAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &auditlogServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AuditlogService_GetAllClient interface {
	Recv() (*AuditlogStreamResponse, error)
	grpc.ClientStream
}

type auditlogServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *auditlogServiceGetAllClient) Recv() (*AuditlogStreamResponse, error) {
	m := new(AuditlogStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *auditlogServiceClient) Subscribe(ctx context.Context, in *AuditlogStreamRequest, opts ...grpc.CallOption) (AuditlogService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &AuditlogService_ServiceDesc.Streams[2], AuditlogService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &auditlogServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AuditlogService_SubscribeClient interface {
	Recv() (*AuditlogStreamResponse, error)
	grpc.ClientStream
}

type auditlogServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *auditlogServiceSubscribeClient) Recv() (*AuditlogStreamResponse, error) {
	m := new(AuditlogStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *auditlogServiceClient) GetMeta(ctx context.Context, in *AuditlogStreamRequest, opts ...grpc.CallOption) (*MetaResponse, error) {
	out := new(MetaResponse)
	err := c.cc.Invoke(ctx, AuditlogService_GetMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditlogServiceClient) SubscribeMeta(ctx context.Context, in *AuditlogStreamRequest, opts ...grpc.CallOption) (AuditlogService_SubscribeMetaClient, error) {
	stream, err := c.cc.NewStream(ctx, &AuditlogService_ServiceDesc.Streams[3], AuditlogService_SubscribeMeta_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &auditlogServiceSubscribeMetaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AuditlogService_SubscribeMetaClient interface {
	Recv() (*MetaResponse, error)
	grpc.ClientStream
}

type auditlogServiceSubscribeMetaClient struct {
	grpc.ClientStream
}

func (x *auditlogServiceSubscribeMetaClient) Recv() (*MetaResponse, error) {
	m := new(MetaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AuditlogServiceServer is the server API for AuditlogService service.
// All implementations must embed UnimplementedAuditlogServiceServer
// for forward compatibility
type AuditlogServiceServer interface {
	GetOne(context.Context, *AuditlogRequest) (*AuditlogResponse, error)
	GetSome(*AuditlogSomeRequest, AuditlogService_GetSomeServer) error
	GetAll(*AuditlogStreamRequest, AuditlogService_GetAllServer) error
	Subscribe(*AuditlogStreamRequest, AuditlogService_SubscribeServer) error
	GetMeta(context.Context, *AuditlogStreamRequest) (*MetaResponse, error)
	SubscribeMeta(*AuditlogStreamRequest, AuditlogService_SubscribeMetaServer) error
	mustEmbedUnimplementedAuditlogServiceServer()
}

// UnimplementedAuditlogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuditlogServiceServer struct {
}

func (UnimplementedAuditlogServiceServer) GetOne(context.Context, *AuditlogRequest) (*AuditlogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedAuditlogServiceServer) GetSome(*AuditlogSomeRequest, AuditlogService_GetSomeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSome not implemented")
}
func (UnimplementedAuditlogServiceServer) GetAll(*AuditlogStreamRequest, AuditlogService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedAuditlogServiceServer) Subscribe(*AuditlogStreamRequest, AuditlogService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedAuditlogServiceServer) GetMeta(context.Context, *AuditlogStreamRequest) (*MetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeta not implemented")
}
func (UnimplementedAuditlogServiceServer) SubscribeMeta(*AuditlogStreamRequest, AuditlogService_SubscribeMetaServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMeta not implemented")
}
func (UnimplementedAuditlogServiceServer) mustEmbedUnimplementedAuditlogServiceServer() {}

// UnsafeAuditlogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuditlogServiceServer will
// result in compilation errors.
type UnsafeAuditlogServiceServer interface {
	mustEmbedUnimplementedAuditlogServiceServer()
}

func RegisterAuditlogServiceServer(s grpc.ServiceRegistrar, srv AuditlogServiceServer) {
	s.RegisterService(&AuditlogService_ServiceDesc, srv)
}

func _AuditlogService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuditlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditlogServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuditlogService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditlogServiceServer).GetOne(ctx, req.(*AuditlogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditlogService_GetSome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AuditlogSomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AuditlogServiceServer).GetSome(m, &auditlogServiceGetSomeServer{stream})
}

type AuditlogService_GetSomeServer interface {
	Send(*AuditlogSomeResponse) error
	grpc.ServerStream
}

type auditlogServiceGetSomeServer struct {
	grpc.ServerStream
}

func (x *auditlogServiceGetSomeServer) Send(m *AuditlogSomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AuditlogService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AuditlogStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AuditlogServiceServer).GetAll(m, &auditlogServiceGetAllServer{stream})
}

type AuditlogService_GetAllServer interface {
	Send(*AuditlogStreamResponse) error
	grpc.ServerStream
}

type auditlogServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *auditlogServiceGetAllServer) Send(m *AuditlogStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AuditlogService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AuditlogStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AuditlogServiceServer).Subscribe(m, &auditlogServiceSubscribeServer{stream})
}

type AuditlogService_SubscribeServer interface {
	Send(*AuditlogStreamResponse) error
	grpc.ServerStream
}

type auditlogServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *auditlogServiceSubscribeServer) Send(m *AuditlogStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AuditlogService_GetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuditlogStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditlogServiceServer).GetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuditlogService_GetMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditlogServiceServer).GetMeta(ctx, req.(*AuditlogStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditlogService_SubscribeMeta_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AuditlogStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AuditlogServiceServer).SubscribeMeta(m, &auditlogServiceSubscribeMetaServer{stream})
}

type AuditlogService_SubscribeMetaServer interface {
	Send(*MetaResponse) error
	grpc.ServerStream
}

type auditlogServiceSubscribeMetaServer struct {
	grpc.ServerStream
}

func (x *auditlogServiceSubscribeMetaServer) Send(m *MetaResponse) error {
	return x.ServerStream.SendMsg(m)
}

// AuditlogService_ServiceDesc is the grpc.ServiceDesc for AuditlogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuditlogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arista.auditlog.v1.AuditlogService",
	HandlerType: (*AuditlogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _AuditlogService_GetOne_Handler,
		},
		{
			MethodName: "GetMeta",
			Handler:    _AuditlogService_GetMeta_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSome",
			Handler:       _AuditlogService_GetSome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAll",
			Handler:       _AuditlogService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _AuditlogService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeMeta",
			Handler:       _AuditlogService_SubscribeMeta_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/auditlog.v1/services.gen.proto",
}
