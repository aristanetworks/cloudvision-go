// Copyright (c) 2023 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

// NOTE: This is a workspace-aware Resource API.
// Please see workspace.v1 for more information.

//
// Code generated by boomtown. DO NOT EDIT.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v4.24.4
// source: arista/studio.v1/services.gen.proto

package studio

import (
	subscriptions "github.com/aristanetworks/cloudvision-go/api/arista/subscriptions"
	time "github.com/aristanetworks/cloudvision-go/api/arista/time"
	fmp "github.com/aristanetworks/cloudvision-go/api/fmp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MetaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time holds the timestamp of the last item included in the metadata calculation.
	Time *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,2,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
	// Count is the number of items present under the conditions of the request.
	Count *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *MetaResponse) Reset() {
	*x = MetaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaResponse) ProtoMessage() {}

func (x *MetaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaResponse.ProtoReflect.Descriptor instead.
func (*MetaResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{0}
}

func (x *MetaResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *MetaResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation(0)
}

func (x *MetaResponse) GetCount() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Count
	}
	return nil
}

type AssignedTagsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a AssignedTags instance to retrieve.
	// This value must be populated.
	Key *StudioKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AssignedTagsRequest) Reset() {
	*x = AssignedTagsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedTagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedTagsRequest) ProtoMessage() {}

func (x *AssignedTagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedTagsRequest.ProtoReflect.Descriptor instead.
func (*AssignedTagsRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{1}
}

func (x *AssignedTagsRequest) GetKey() *StudioKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AssignedTagsRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type AssignedTagsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *AssignedTags `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// AssignedTags instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AssignedTagsResponse) Reset() {
	*x = AssignedTagsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedTagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedTagsResponse) ProtoMessage() {}

func (x *AssignedTagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedTagsResponse.ProtoReflect.Descriptor instead.
func (*AssignedTagsResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{2}
}

func (x *AssignedTagsResponse) GetValue() *AssignedTags {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AssignedTagsResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type AssignedTagsSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*StudioKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AssignedTagsSomeRequest) Reset() {
	*x = AssignedTagsSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedTagsSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedTagsSomeRequest) ProtoMessage() {}

func (x *AssignedTagsSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedTagsSomeRequest.ProtoReflect.Descriptor instead.
func (*AssignedTagsSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{3}
}

func (x *AssignedTagsSomeRequest) GetKeys() []*StudioKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *AssignedTagsSomeRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type AssignedTagsSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *AssignedTags `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// AssignedTags instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AssignedTagsSomeResponse) Reset() {
	*x = AssignedTagsSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedTagsSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedTagsSomeResponse) ProtoMessage() {}

func (x *AssignedTagsSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedTagsSomeResponse.ProtoReflect.Descriptor instead.
func (*AssignedTagsSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{4}
}

func (x *AssignedTagsSomeResponse) GetValue() *AssignedTags {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AssignedTagsSomeResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *AssignedTagsSomeResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type AssignedTagsStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*AssignedTags `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each AssignedTags at end.
	//   - Each AssignedTags response is fully-specified (all fields set).
	//   - start: Returns the state of each AssignedTags at start, followed by updates until now.
	//   - Each AssignedTags response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each AssignedTags at start, followed by updates
	//     until end.
	//   - Each AssignedTags response at start is fully-specified, but updates until end may
	//     be partial.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AssignedTagsStreamRequest) Reset() {
	*x = AssignedTagsStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedTagsStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedTagsStreamRequest) ProtoMessage() {}

func (x *AssignedTagsStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedTagsStreamRequest.ProtoReflect.Descriptor instead.
func (*AssignedTagsStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{5}
}

func (x *AssignedTagsStreamRequest) GetPartialEqFilter() []*AssignedTags {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *AssignedTagsStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type AssignedTagsStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *AssignedTags `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this AssignedTags's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the AssignedTags value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *AssignedTagsStreamResponse) Reset() {
	*x = AssignedTagsStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedTagsStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedTagsStreamResponse) ProtoMessage() {}

func (x *AssignedTagsStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedTagsStreamResponse.ProtoReflect.Descriptor instead.
func (*AssignedTagsStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{6}
}

func (x *AssignedTagsStreamResponse) GetValue() *AssignedTags {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AssignedTagsStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *AssignedTagsStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation(0)
}

type AssignedTagsBatchedStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*AssignedTags `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each AssignedTags at end.
	//   - Each AssignedTags response is fully-specified (all fields set).
	//   - start: Returns the state of each AssignedTags at start, followed by updates until now.
	//   - Each AssignedTags response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each AssignedTags at start, followed by updates
	//     until end.
	//   - Each AssignedTags response at start is fully-specified, but updates until end may
	//     be partial.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	// MaxMessages limits the maximum number of messages that can be contained in one batch.
	// MaxMessages is required to be at least 1.
	// The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
	// INTERNAL_BATCH_LIMIT is set based on the maximum message size.
	MaxMessages *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=max_messages,json=maxMessages,proto3" json:"max_messages,omitempty"`
}

func (x *AssignedTagsBatchedStreamRequest) Reset() {
	*x = AssignedTagsBatchedStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedTagsBatchedStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedTagsBatchedStreamRequest) ProtoMessage() {}

func (x *AssignedTagsBatchedStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedTagsBatchedStreamRequest.ProtoReflect.Descriptor instead.
func (*AssignedTagsBatchedStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{7}
}

func (x *AssignedTagsBatchedStreamRequest) GetPartialEqFilter() []*AssignedTags {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *AssignedTagsBatchedStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *AssignedTagsBatchedStreamRequest) GetMaxMessages() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxMessages
	}
	return nil
}

type AssignedTagsBatchedStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Values are the values deemed relevant to the initiating request.
	// The length of this structure is guaranteed to be between (inclusive) 1 and
	// min(req.max_messages, INTERNAL_BATCH_LIMIT).
	Responses []*AssignedTagsStreamResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *AssignedTagsBatchedStreamResponse) Reset() {
	*x = AssignedTagsBatchedStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedTagsBatchedStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedTagsBatchedStreamResponse) ProtoMessage() {}

func (x *AssignedTagsBatchedStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedTagsBatchedStreamResponse.ProtoReflect.Descriptor instead.
func (*AssignedTagsBatchedStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{8}
}

func (x *AssignedTagsBatchedStreamResponse) GetResponses() []*AssignedTagsStreamResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type AssignedTagsConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a AssignedTagsConfig instance to retrieve.
	// This value must be populated.
	Key *StudioKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AssignedTagsConfigRequest) Reset() {
	*x = AssignedTagsConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedTagsConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedTagsConfigRequest) ProtoMessage() {}

func (x *AssignedTagsConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedTagsConfigRequest.ProtoReflect.Descriptor instead.
func (*AssignedTagsConfigRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{9}
}

func (x *AssignedTagsConfigRequest) GetKey() *StudioKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AssignedTagsConfigRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type AssignedTagsConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *AssignedTagsConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// AssignedTagsConfig instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AssignedTagsConfigResponse) Reset() {
	*x = AssignedTagsConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedTagsConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedTagsConfigResponse) ProtoMessage() {}

func (x *AssignedTagsConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedTagsConfigResponse.ProtoReflect.Descriptor instead.
func (*AssignedTagsConfigResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{10}
}

func (x *AssignedTagsConfigResponse) GetValue() *AssignedTagsConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AssignedTagsConfigResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type AssignedTagsConfigSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*StudioKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AssignedTagsConfigSomeRequest) Reset() {
	*x = AssignedTagsConfigSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedTagsConfigSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedTagsConfigSomeRequest) ProtoMessage() {}

func (x *AssignedTagsConfigSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedTagsConfigSomeRequest.ProtoReflect.Descriptor instead.
func (*AssignedTagsConfigSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{11}
}

func (x *AssignedTagsConfigSomeRequest) GetKeys() []*StudioKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *AssignedTagsConfigSomeRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type AssignedTagsConfigSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *AssignedTagsConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// AssignedTagsConfig instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AssignedTagsConfigSomeResponse) Reset() {
	*x = AssignedTagsConfigSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedTagsConfigSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedTagsConfigSomeResponse) ProtoMessage() {}

func (x *AssignedTagsConfigSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedTagsConfigSomeResponse.ProtoReflect.Descriptor instead.
func (*AssignedTagsConfigSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{12}
}

func (x *AssignedTagsConfigSomeResponse) GetValue() *AssignedTagsConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AssignedTagsConfigSomeResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *AssignedTagsConfigSomeResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type AssignedTagsConfigStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*AssignedTagsConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each AssignedTagsConfig at end.
	//   - Each AssignedTagsConfig response is fully-specified (all fields set).
	//   - start: Returns the state of each AssignedTagsConfig at start, followed by updates until now.
	//   - Each AssignedTagsConfig response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each AssignedTagsConfig at start, followed by updates
	//     until end.
	//   - Each AssignedTagsConfig response at start is fully-specified, but updates until end may
	//     be partial.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AssignedTagsConfigStreamRequest) Reset() {
	*x = AssignedTagsConfigStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedTagsConfigStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedTagsConfigStreamRequest) ProtoMessage() {}

func (x *AssignedTagsConfigStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedTagsConfigStreamRequest.ProtoReflect.Descriptor instead.
func (*AssignedTagsConfigStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{13}
}

func (x *AssignedTagsConfigStreamRequest) GetPartialEqFilter() []*AssignedTagsConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *AssignedTagsConfigStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type AssignedTagsConfigStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *AssignedTagsConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this AssignedTagsConfig's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the AssignedTagsConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *AssignedTagsConfigStreamResponse) Reset() {
	*x = AssignedTagsConfigStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedTagsConfigStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedTagsConfigStreamResponse) ProtoMessage() {}

func (x *AssignedTagsConfigStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedTagsConfigStreamResponse.ProtoReflect.Descriptor instead.
func (*AssignedTagsConfigStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{14}
}

func (x *AssignedTagsConfigStreamResponse) GetValue() *AssignedTagsConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AssignedTagsConfigStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *AssignedTagsConfigStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation(0)
}

type AssignedTagsConfigBatchedStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*AssignedTagsConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each AssignedTagsConfig at end.
	//   - Each AssignedTagsConfig response is fully-specified (all fields set).
	//   - start: Returns the state of each AssignedTagsConfig at start, followed by updates until now.
	//   - Each AssignedTagsConfig response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each AssignedTagsConfig at start, followed by updates
	//     until end.
	//   - Each AssignedTagsConfig response at start is fully-specified, but updates until end may
	//     be partial.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	// MaxMessages limits the maximum number of messages that can be contained in one batch.
	// MaxMessages is required to be at least 1.
	// The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
	// INTERNAL_BATCH_LIMIT is set based on the maximum message size.
	MaxMessages *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=max_messages,json=maxMessages,proto3" json:"max_messages,omitempty"`
}

func (x *AssignedTagsConfigBatchedStreamRequest) Reset() {
	*x = AssignedTagsConfigBatchedStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedTagsConfigBatchedStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedTagsConfigBatchedStreamRequest) ProtoMessage() {}

func (x *AssignedTagsConfigBatchedStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedTagsConfigBatchedStreamRequest.ProtoReflect.Descriptor instead.
func (*AssignedTagsConfigBatchedStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{15}
}

func (x *AssignedTagsConfigBatchedStreamRequest) GetPartialEqFilter() []*AssignedTagsConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *AssignedTagsConfigBatchedStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *AssignedTagsConfigBatchedStreamRequest) GetMaxMessages() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxMessages
	}
	return nil
}

type AssignedTagsConfigBatchedStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Values are the values deemed relevant to the initiating request.
	// The length of this structure is guaranteed to be between (inclusive) 1 and
	// min(req.max_messages, INTERNAL_BATCH_LIMIT).
	Responses []*AssignedTagsConfigStreamResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *AssignedTagsConfigBatchedStreamResponse) Reset() {
	*x = AssignedTagsConfigBatchedStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedTagsConfigBatchedStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedTagsConfigBatchedStreamResponse) ProtoMessage() {}

func (x *AssignedTagsConfigBatchedStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedTagsConfigBatchedStreamResponse.ProtoReflect.Descriptor instead.
func (*AssignedTagsConfigBatchedStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{16}
}

func (x *AssignedTagsConfigBatchedStreamResponse) GetResponses() []*AssignedTagsConfigStreamResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type AssignedTagsConfigSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AssignedTagsConfig carries the value to set into the datastore.
	// See the documentation on the AssignedTagsConfig struct for which fields are required.
	Value *AssignedTagsConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AssignedTagsConfigSetRequest) Reset() {
	*x = AssignedTagsConfigSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedTagsConfigSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedTagsConfigSetRequest) ProtoMessage() {}

func (x *AssignedTagsConfigSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedTagsConfigSetRequest.ProtoReflect.Descriptor instead.
func (*AssignedTagsConfigSetRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{17}
}

func (x *AssignedTagsConfigSetRequest) GetValue() *AssignedTagsConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

type AssignedTagsConfigSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value carries all the values given in the AssignedTagsConfigSetRequest as well
	// as any server-generated values.
	Value *AssignedTagsConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//   - it is after the time the request was received
	//   - a time-ranged query with StartTime==CreatedAt will include this instance.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AssignedTagsConfigSetResponse) Reset() {
	*x = AssignedTagsConfigSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedTagsConfigSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedTagsConfigSetResponse) ProtoMessage() {}

func (x *AssignedTagsConfigSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedTagsConfigSetResponse.ProtoReflect.Descriptor instead.
func (*AssignedTagsConfigSetResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{18}
}

func (x *AssignedTagsConfigSetResponse) GetValue() *AssignedTagsConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AssignedTagsConfigSetResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type AssignedTagsConfigSetSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value contains a list of AssignedTagsConfig values to write.
	// It is possible to provide more values than can fit within either:
	//   - the maxiumum send size of the client
	//   - the maximum receive size of the server
	//
	// If this error occurs you must reduce the number of values sent.
	// See gRPC "maximum message size" documentation for more information.
	Values []*AssignedTagsConfig `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *AssignedTagsConfigSetSomeRequest) Reset() {
	*x = AssignedTagsConfigSetSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedTagsConfigSetSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedTagsConfigSetSomeRequest) ProtoMessage() {}

func (x *AssignedTagsConfigSetSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedTagsConfigSetSomeRequest.ProtoReflect.Descriptor instead.
func (*AssignedTagsConfigSetSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{19}
}

func (x *AssignedTagsConfigSetSomeRequest) GetValues() []*AssignedTagsConfig {
	if x != nil {
		return x.Values
	}
	return nil
}

type AssignedTagsConfigSetSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *StudioKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Error string     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *AssignedTagsConfigSetSomeResponse) Reset() {
	*x = AssignedTagsConfigSetSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedTagsConfigSetSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedTagsConfigSetSomeResponse) ProtoMessage() {}

func (x *AssignedTagsConfigSetSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedTagsConfigSetSomeResponse.ProtoReflect.Descriptor instead.
func (*AssignedTagsConfigSetSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{20}
}

func (x *AssignedTagsConfigSetSomeResponse) GetKey() *StudioKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AssignedTagsConfigSetSomeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type AssignedTagsConfigDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key indicates which AssignedTagsConfig instance to remove.
	// This field must always be set.
	Key *StudioKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *AssignedTagsConfigDeleteRequest) Reset() {
	*x = AssignedTagsConfigDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedTagsConfigDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedTagsConfigDeleteRequest) ProtoMessage() {}

func (x *AssignedTagsConfigDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedTagsConfigDeleteRequest.ProtoReflect.Descriptor instead.
func (*AssignedTagsConfigDeleteRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{21}
}

func (x *AssignedTagsConfigDeleteRequest) GetKey() *StudioKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type AssignedTagsConfigDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key echoes back the key of the deleted AssignedTagsConfig instance.
	Key *StudioKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//   - it is after the time the request was received
	//   - a time-ranged query with StartTime==DeletedAt will not include this instance.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AssignedTagsConfigDeleteResponse) Reset() {
	*x = AssignedTagsConfigDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedTagsConfigDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedTagsConfigDeleteResponse) ProtoMessage() {}

func (x *AssignedTagsConfigDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedTagsConfigDeleteResponse.ProtoReflect.Descriptor instead.
func (*AssignedTagsConfigDeleteResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{22}
}

func (x *AssignedTagsConfigDeleteResponse) GetKey() *StudioKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AssignedTagsConfigDeleteResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type AssignedTagsConfigDeleteSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key contains a list of AssignedTagsConfig keys to delete
	Keys []*StudioKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *AssignedTagsConfigDeleteSomeRequest) Reset() {
	*x = AssignedTagsConfigDeleteSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedTagsConfigDeleteSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedTagsConfigDeleteSomeRequest) ProtoMessage() {}

func (x *AssignedTagsConfigDeleteSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedTagsConfigDeleteSomeRequest.ProtoReflect.Descriptor instead.
func (*AssignedTagsConfigDeleteSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{23}
}

func (x *AssignedTagsConfigDeleteSomeRequest) GetKeys() []*StudioKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

// AssignedTagsConfigDeleteSomeResponse is only sent when there is an error.
type AssignedTagsConfigDeleteSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *StudioKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Error string     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *AssignedTagsConfigDeleteSomeResponse) Reset() {
	*x = AssignedTagsConfigDeleteSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedTagsConfigDeleteSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedTagsConfigDeleteSomeResponse) ProtoMessage() {}

func (x *AssignedTagsConfigDeleteSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedTagsConfigDeleteSomeResponse.ProtoReflect.Descriptor instead.
func (*AssignedTagsConfigDeleteSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{24}
}

func (x *AssignedTagsConfigDeleteSomeResponse) GetKey() *StudioKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AssignedTagsConfigDeleteSomeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type AssignedTagsConfigDeleteAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a DeleteAll.
	// This requires all provided fields to be equal to the response.
	// A filtered DeleteAll will use GetAll with filter to find things to delete.
	PartialEqFilter []*AssignedTagsConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
}

func (x *AssignedTagsConfigDeleteAllRequest) Reset() {
	*x = AssignedTagsConfigDeleteAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedTagsConfigDeleteAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedTagsConfigDeleteAllRequest) ProtoMessage() {}

func (x *AssignedTagsConfigDeleteAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedTagsConfigDeleteAllRequest.ProtoReflect.Descriptor instead.
func (*AssignedTagsConfigDeleteAllRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{25}
}

func (x *AssignedTagsConfigDeleteAllRequest) GetPartialEqFilter() []*AssignedTagsConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

type AssignedTagsConfigDeleteAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This describes the class of delete error.
	// A DeleteAllResponse is only sent when there is an error.
	Type fmp.DeleteError `protobuf:"varint,1,opt,name=type,proto3,enum=fmp.DeleteError" json:"type,omitempty"`
	// This indicates the error message from the delete failure.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// This is the key of the AssignedTagsConfig instance that failed to be deleted.
	Key *StudioKey `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp when the key was being deleted.
	Time *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AssignedTagsConfigDeleteAllResponse) Reset() {
	*x = AssignedTagsConfigDeleteAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedTagsConfigDeleteAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedTagsConfigDeleteAllResponse) ProtoMessage() {}

func (x *AssignedTagsConfigDeleteAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedTagsConfigDeleteAllResponse.ProtoReflect.Descriptor instead.
func (*AssignedTagsConfigDeleteAllResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{26}
}

func (x *AssignedTagsConfigDeleteAllResponse) GetType() fmp.DeleteError {
	if x != nil {
		return x.Type
	}
	return fmp.DeleteError(0)
}

func (x *AssignedTagsConfigDeleteAllResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *AssignedTagsConfigDeleteAllResponse) GetKey() *StudioKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AssignedTagsConfigDeleteAllResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type AutofillActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a AutofillAction instance to retrieve.
	// This value must be populated.
	Key *AutofillActionKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AutofillActionRequest) Reset() {
	*x = AutofillActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillActionRequest) ProtoMessage() {}

func (x *AutofillActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillActionRequest.ProtoReflect.Descriptor instead.
func (*AutofillActionRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{27}
}

func (x *AutofillActionRequest) GetKey() *AutofillActionKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AutofillActionRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type AutofillActionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *AutofillAction `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// AutofillAction instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AutofillActionResponse) Reset() {
	*x = AutofillActionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillActionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillActionResponse) ProtoMessage() {}

func (x *AutofillActionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillActionResponse.ProtoReflect.Descriptor instead.
func (*AutofillActionResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{28}
}

func (x *AutofillActionResponse) GetValue() *AutofillAction {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AutofillActionResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type AutofillActionSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*AutofillActionKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AutofillActionSomeRequest) Reset() {
	*x = AutofillActionSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillActionSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillActionSomeRequest) ProtoMessage() {}

func (x *AutofillActionSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillActionSomeRequest.ProtoReflect.Descriptor instead.
func (*AutofillActionSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{29}
}

func (x *AutofillActionSomeRequest) GetKeys() []*AutofillActionKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *AutofillActionSomeRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type AutofillActionSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *AutofillAction `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// AutofillAction instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AutofillActionSomeResponse) Reset() {
	*x = AutofillActionSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillActionSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillActionSomeResponse) ProtoMessage() {}

func (x *AutofillActionSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillActionSomeResponse.ProtoReflect.Descriptor instead.
func (*AutofillActionSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{30}
}

func (x *AutofillActionSomeResponse) GetValue() *AutofillAction {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AutofillActionSomeResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *AutofillActionSomeResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type AutofillActionStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*AutofillAction `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each AutofillAction at end.
	//   - Each AutofillAction response is fully-specified (all fields set).
	//   - start: Returns the state of each AutofillAction at start, followed by updates until now.
	//   - Each AutofillAction response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each AutofillAction at start, followed by updates
	//     until end.
	//   - Each AutofillAction response at start is fully-specified, but updates until end may
	//     be partial.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AutofillActionStreamRequest) Reset() {
	*x = AutofillActionStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillActionStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillActionStreamRequest) ProtoMessage() {}

func (x *AutofillActionStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillActionStreamRequest.ProtoReflect.Descriptor instead.
func (*AutofillActionStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{31}
}

func (x *AutofillActionStreamRequest) GetPartialEqFilter() []*AutofillAction {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *AutofillActionStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type AutofillActionStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *AutofillAction `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this AutofillAction's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the AutofillAction value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *AutofillActionStreamResponse) Reset() {
	*x = AutofillActionStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillActionStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillActionStreamResponse) ProtoMessage() {}

func (x *AutofillActionStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillActionStreamResponse.ProtoReflect.Descriptor instead.
func (*AutofillActionStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{32}
}

func (x *AutofillActionStreamResponse) GetValue() *AutofillAction {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AutofillActionStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *AutofillActionStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation(0)
}

type AutofillActionBatchedStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*AutofillAction `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each AutofillAction at end.
	//   - Each AutofillAction response is fully-specified (all fields set).
	//   - start: Returns the state of each AutofillAction at start, followed by updates until now.
	//   - Each AutofillAction response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each AutofillAction at start, followed by updates
	//     until end.
	//   - Each AutofillAction response at start is fully-specified, but updates until end may
	//     be partial.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	// MaxMessages limits the maximum number of messages that can be contained in one batch.
	// MaxMessages is required to be at least 1.
	// The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
	// INTERNAL_BATCH_LIMIT is set based on the maximum message size.
	MaxMessages *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=max_messages,json=maxMessages,proto3" json:"max_messages,omitempty"`
}

func (x *AutofillActionBatchedStreamRequest) Reset() {
	*x = AutofillActionBatchedStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillActionBatchedStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillActionBatchedStreamRequest) ProtoMessage() {}

func (x *AutofillActionBatchedStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillActionBatchedStreamRequest.ProtoReflect.Descriptor instead.
func (*AutofillActionBatchedStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{33}
}

func (x *AutofillActionBatchedStreamRequest) GetPartialEqFilter() []*AutofillAction {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *AutofillActionBatchedStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *AutofillActionBatchedStreamRequest) GetMaxMessages() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxMessages
	}
	return nil
}

type AutofillActionBatchedStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Values are the values deemed relevant to the initiating request.
	// The length of this structure is guaranteed to be between (inclusive) 1 and
	// min(req.max_messages, INTERNAL_BATCH_LIMIT).
	Responses []*AutofillActionStreamResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *AutofillActionBatchedStreamResponse) Reset() {
	*x = AutofillActionBatchedStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillActionBatchedStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillActionBatchedStreamResponse) ProtoMessage() {}

func (x *AutofillActionBatchedStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillActionBatchedStreamResponse.ProtoReflect.Descriptor instead.
func (*AutofillActionBatchedStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{34}
}

func (x *AutofillActionBatchedStreamResponse) GetResponses() []*AutofillActionStreamResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type AutofillActionConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a AutofillActionConfig instance to retrieve.
	// This value must be populated.
	Key *AutofillActionKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AutofillActionConfigRequest) Reset() {
	*x = AutofillActionConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillActionConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillActionConfigRequest) ProtoMessage() {}

func (x *AutofillActionConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillActionConfigRequest.ProtoReflect.Descriptor instead.
func (*AutofillActionConfigRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{35}
}

func (x *AutofillActionConfigRequest) GetKey() *AutofillActionKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AutofillActionConfigRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type AutofillActionConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *AutofillActionConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// AutofillActionConfig instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AutofillActionConfigResponse) Reset() {
	*x = AutofillActionConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillActionConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillActionConfigResponse) ProtoMessage() {}

func (x *AutofillActionConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillActionConfigResponse.ProtoReflect.Descriptor instead.
func (*AutofillActionConfigResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{36}
}

func (x *AutofillActionConfigResponse) GetValue() *AutofillActionConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AutofillActionConfigResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type AutofillActionConfigSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*AutofillActionKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AutofillActionConfigSomeRequest) Reset() {
	*x = AutofillActionConfigSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillActionConfigSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillActionConfigSomeRequest) ProtoMessage() {}

func (x *AutofillActionConfigSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillActionConfigSomeRequest.ProtoReflect.Descriptor instead.
func (*AutofillActionConfigSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{37}
}

func (x *AutofillActionConfigSomeRequest) GetKeys() []*AutofillActionKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *AutofillActionConfigSomeRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type AutofillActionConfigSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *AutofillActionConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// AutofillActionConfig instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AutofillActionConfigSomeResponse) Reset() {
	*x = AutofillActionConfigSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillActionConfigSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillActionConfigSomeResponse) ProtoMessage() {}

func (x *AutofillActionConfigSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillActionConfigSomeResponse.ProtoReflect.Descriptor instead.
func (*AutofillActionConfigSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{38}
}

func (x *AutofillActionConfigSomeResponse) GetValue() *AutofillActionConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AutofillActionConfigSomeResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *AutofillActionConfigSomeResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type AutofillActionConfigStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*AutofillActionConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each AutofillActionConfig at end.
	//   - Each AutofillActionConfig response is fully-specified (all fields set).
	//   - start: Returns the state of each AutofillActionConfig at start, followed by updates until now.
	//   - Each AutofillActionConfig response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each AutofillActionConfig at start, followed by updates
	//     until end.
	//   - Each AutofillActionConfig response at start is fully-specified, but updates until end may
	//     be partial.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AutofillActionConfigStreamRequest) Reset() {
	*x = AutofillActionConfigStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillActionConfigStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillActionConfigStreamRequest) ProtoMessage() {}

func (x *AutofillActionConfigStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillActionConfigStreamRequest.ProtoReflect.Descriptor instead.
func (*AutofillActionConfigStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{39}
}

func (x *AutofillActionConfigStreamRequest) GetPartialEqFilter() []*AutofillActionConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *AutofillActionConfigStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type AutofillActionConfigStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *AutofillActionConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this AutofillActionConfig's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the AutofillActionConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *AutofillActionConfigStreamResponse) Reset() {
	*x = AutofillActionConfigStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillActionConfigStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillActionConfigStreamResponse) ProtoMessage() {}

func (x *AutofillActionConfigStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillActionConfigStreamResponse.ProtoReflect.Descriptor instead.
func (*AutofillActionConfigStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{40}
}

func (x *AutofillActionConfigStreamResponse) GetValue() *AutofillActionConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AutofillActionConfigStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *AutofillActionConfigStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation(0)
}

type AutofillActionConfigBatchedStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*AutofillActionConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each AutofillActionConfig at end.
	//   - Each AutofillActionConfig response is fully-specified (all fields set).
	//   - start: Returns the state of each AutofillActionConfig at start, followed by updates until now.
	//   - Each AutofillActionConfig response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each AutofillActionConfig at start, followed by updates
	//     until end.
	//   - Each AutofillActionConfig response at start is fully-specified, but updates until end may
	//     be partial.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	// MaxMessages limits the maximum number of messages that can be contained in one batch.
	// MaxMessages is required to be at least 1.
	// The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
	// INTERNAL_BATCH_LIMIT is set based on the maximum message size.
	MaxMessages *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=max_messages,json=maxMessages,proto3" json:"max_messages,omitempty"`
}

func (x *AutofillActionConfigBatchedStreamRequest) Reset() {
	*x = AutofillActionConfigBatchedStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillActionConfigBatchedStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillActionConfigBatchedStreamRequest) ProtoMessage() {}

func (x *AutofillActionConfigBatchedStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillActionConfigBatchedStreamRequest.ProtoReflect.Descriptor instead.
func (*AutofillActionConfigBatchedStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{41}
}

func (x *AutofillActionConfigBatchedStreamRequest) GetPartialEqFilter() []*AutofillActionConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *AutofillActionConfigBatchedStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *AutofillActionConfigBatchedStreamRequest) GetMaxMessages() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxMessages
	}
	return nil
}

type AutofillActionConfigBatchedStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Values are the values deemed relevant to the initiating request.
	// The length of this structure is guaranteed to be between (inclusive) 1 and
	// min(req.max_messages, INTERNAL_BATCH_LIMIT).
	Responses []*AutofillActionConfigStreamResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *AutofillActionConfigBatchedStreamResponse) Reset() {
	*x = AutofillActionConfigBatchedStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillActionConfigBatchedStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillActionConfigBatchedStreamResponse) ProtoMessage() {}

func (x *AutofillActionConfigBatchedStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillActionConfigBatchedStreamResponse.ProtoReflect.Descriptor instead.
func (*AutofillActionConfigBatchedStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{42}
}

func (x *AutofillActionConfigBatchedStreamResponse) GetResponses() []*AutofillActionConfigStreamResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type AutofillActionConfigSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AutofillActionConfig carries the value to set into the datastore.
	// See the documentation on the AutofillActionConfig struct for which fields are required.
	Value *AutofillActionConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AutofillActionConfigSetRequest) Reset() {
	*x = AutofillActionConfigSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillActionConfigSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillActionConfigSetRequest) ProtoMessage() {}

func (x *AutofillActionConfigSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillActionConfigSetRequest.ProtoReflect.Descriptor instead.
func (*AutofillActionConfigSetRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{43}
}

func (x *AutofillActionConfigSetRequest) GetValue() *AutofillActionConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

type AutofillActionConfigSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value carries all the values given in the AutofillActionConfigSetRequest as well
	// as any server-generated values.
	Value *AutofillActionConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//   - it is after the time the request was received
	//   - a time-ranged query with StartTime==CreatedAt will include this instance.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AutofillActionConfigSetResponse) Reset() {
	*x = AutofillActionConfigSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillActionConfigSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillActionConfigSetResponse) ProtoMessage() {}

func (x *AutofillActionConfigSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillActionConfigSetResponse.ProtoReflect.Descriptor instead.
func (*AutofillActionConfigSetResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{44}
}

func (x *AutofillActionConfigSetResponse) GetValue() *AutofillActionConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AutofillActionConfigSetResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type AutofillActionConfigSetSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value contains a list of AutofillActionConfig values to write.
	// It is possible to provide more values than can fit within either:
	//   - the maxiumum send size of the client
	//   - the maximum receive size of the server
	//
	// If this error occurs you must reduce the number of values sent.
	// See gRPC "maximum message size" documentation for more information.
	Values []*AutofillActionConfig `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *AutofillActionConfigSetSomeRequest) Reset() {
	*x = AutofillActionConfigSetSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillActionConfigSetSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillActionConfigSetSomeRequest) ProtoMessage() {}

func (x *AutofillActionConfigSetSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillActionConfigSetSomeRequest.ProtoReflect.Descriptor instead.
func (*AutofillActionConfigSetSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{45}
}

func (x *AutofillActionConfigSetSomeRequest) GetValues() []*AutofillActionConfig {
	if x != nil {
		return x.Values
	}
	return nil
}

type AutofillActionConfigSetSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *AutofillActionKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Error string             `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *AutofillActionConfigSetSomeResponse) Reset() {
	*x = AutofillActionConfigSetSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillActionConfigSetSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillActionConfigSetSomeResponse) ProtoMessage() {}

func (x *AutofillActionConfigSetSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillActionConfigSetSomeResponse.ProtoReflect.Descriptor instead.
func (*AutofillActionConfigSetSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{46}
}

func (x *AutofillActionConfigSetSomeResponse) GetKey() *AutofillActionKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AutofillActionConfigSetSomeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type AutofillActionConfigDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key indicates which AutofillActionConfig instance to remove.
	// This field must always be set.
	Key *AutofillActionKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *AutofillActionConfigDeleteRequest) Reset() {
	*x = AutofillActionConfigDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillActionConfigDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillActionConfigDeleteRequest) ProtoMessage() {}

func (x *AutofillActionConfigDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillActionConfigDeleteRequest.ProtoReflect.Descriptor instead.
func (*AutofillActionConfigDeleteRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{47}
}

func (x *AutofillActionConfigDeleteRequest) GetKey() *AutofillActionKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type AutofillActionConfigDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key echoes back the key of the deleted AutofillActionConfig instance.
	Key *AutofillActionKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//   - it is after the time the request was received
	//   - a time-ranged query with StartTime==DeletedAt will not include this instance.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AutofillActionConfigDeleteResponse) Reset() {
	*x = AutofillActionConfigDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillActionConfigDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillActionConfigDeleteResponse) ProtoMessage() {}

func (x *AutofillActionConfigDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillActionConfigDeleteResponse.ProtoReflect.Descriptor instead.
func (*AutofillActionConfigDeleteResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{48}
}

func (x *AutofillActionConfigDeleteResponse) GetKey() *AutofillActionKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AutofillActionConfigDeleteResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type AutofillActionConfigDeleteSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key contains a list of AutofillActionConfig keys to delete
	Keys []*AutofillActionKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *AutofillActionConfigDeleteSomeRequest) Reset() {
	*x = AutofillActionConfigDeleteSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillActionConfigDeleteSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillActionConfigDeleteSomeRequest) ProtoMessage() {}

func (x *AutofillActionConfigDeleteSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillActionConfigDeleteSomeRequest.ProtoReflect.Descriptor instead.
func (*AutofillActionConfigDeleteSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{49}
}

func (x *AutofillActionConfigDeleteSomeRequest) GetKeys() []*AutofillActionKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

// AutofillActionConfigDeleteSomeResponse is only sent when there is an error.
type AutofillActionConfigDeleteSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *AutofillActionKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Error string             `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *AutofillActionConfigDeleteSomeResponse) Reset() {
	*x = AutofillActionConfigDeleteSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillActionConfigDeleteSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillActionConfigDeleteSomeResponse) ProtoMessage() {}

func (x *AutofillActionConfigDeleteSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillActionConfigDeleteSomeResponse.ProtoReflect.Descriptor instead.
func (*AutofillActionConfigDeleteSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{50}
}

func (x *AutofillActionConfigDeleteSomeResponse) GetKey() *AutofillActionKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AutofillActionConfigDeleteSomeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type AutofillActionConfigDeleteAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a DeleteAll.
	// This requires all provided fields to be equal to the response.
	// A filtered DeleteAll will use GetAll with filter to find things to delete.
	PartialEqFilter []*AutofillActionConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
}

func (x *AutofillActionConfigDeleteAllRequest) Reset() {
	*x = AutofillActionConfigDeleteAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillActionConfigDeleteAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillActionConfigDeleteAllRequest) ProtoMessage() {}

func (x *AutofillActionConfigDeleteAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillActionConfigDeleteAllRequest.ProtoReflect.Descriptor instead.
func (*AutofillActionConfigDeleteAllRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{51}
}

func (x *AutofillActionConfigDeleteAllRequest) GetPartialEqFilter() []*AutofillActionConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

type AutofillActionConfigDeleteAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This describes the class of delete error.
	// A DeleteAllResponse is only sent when there is an error.
	Type fmp.DeleteError `protobuf:"varint,1,opt,name=type,proto3,enum=fmp.DeleteError" json:"type,omitempty"`
	// This indicates the error message from the delete failure.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// This is the key of the AutofillActionConfig instance that failed to be deleted.
	Key *AutofillActionKey `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp when the key was being deleted.
	Time *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AutofillActionConfigDeleteAllResponse) Reset() {
	*x = AutofillActionConfigDeleteAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillActionConfigDeleteAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillActionConfigDeleteAllResponse) ProtoMessage() {}

func (x *AutofillActionConfigDeleteAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillActionConfigDeleteAllResponse.ProtoReflect.Descriptor instead.
func (*AutofillActionConfigDeleteAllResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{52}
}

func (x *AutofillActionConfigDeleteAllResponse) GetType() fmp.DeleteError {
	if x != nil {
		return x.Type
	}
	return fmp.DeleteError(0)
}

func (x *AutofillActionConfigDeleteAllResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *AutofillActionConfigDeleteAllResponse) GetKey() *AutofillActionKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AutofillActionConfigDeleteAllResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type InputsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a Inputs instance to retrieve.
	// This value must be populated.
	Key *InputsKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *InputsRequest) Reset() {
	*x = InputsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputsRequest) ProtoMessage() {}

func (x *InputsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputsRequest.ProtoReflect.Descriptor instead.
func (*InputsRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{53}
}

func (x *InputsRequest) GetKey() *InputsKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *InputsRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type InputsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *Inputs `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// Inputs instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *InputsResponse) Reset() {
	*x = InputsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputsResponse) ProtoMessage() {}

func (x *InputsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputsResponse.ProtoReflect.Descriptor instead.
func (*InputsResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{54}
}

func (x *InputsResponse) GetValue() *Inputs {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *InputsResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type InputsSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*InputsKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *InputsSomeRequest) Reset() {
	*x = InputsSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputsSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputsSomeRequest) ProtoMessage() {}

func (x *InputsSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputsSomeRequest.ProtoReflect.Descriptor instead.
func (*InputsSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{55}
}

func (x *InputsSomeRequest) GetKeys() []*InputsKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *InputsSomeRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type InputsSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *Inputs `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// Inputs instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *InputsSomeResponse) Reset() {
	*x = InputsSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputsSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputsSomeResponse) ProtoMessage() {}

func (x *InputsSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputsSomeResponse.ProtoReflect.Descriptor instead.
func (*InputsSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{56}
}

func (x *InputsSomeResponse) GetValue() *Inputs {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *InputsSomeResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *InputsSomeResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type InputsStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*Inputs `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each Inputs at end.
	//   - Each Inputs response is fully-specified (all fields set).
	//   - start: Returns the state of each Inputs at start, followed by updates until now.
	//   - Each Inputs response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each Inputs at start, followed by updates
	//     until end.
	//   - Each Inputs response at start is fully-specified, but updates until end may
	//     be partial.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *InputsStreamRequest) Reset() {
	*x = InputsStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputsStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputsStreamRequest) ProtoMessage() {}

func (x *InputsStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputsStreamRequest.ProtoReflect.Descriptor instead.
func (*InputsStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{57}
}

func (x *InputsStreamRequest) GetPartialEqFilter() []*Inputs {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *InputsStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type InputsStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *Inputs `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this Inputs's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the Inputs value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *InputsStreamResponse) Reset() {
	*x = InputsStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputsStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputsStreamResponse) ProtoMessage() {}

func (x *InputsStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputsStreamResponse.ProtoReflect.Descriptor instead.
func (*InputsStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{58}
}

func (x *InputsStreamResponse) GetValue() *Inputs {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *InputsStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *InputsStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation(0)
}

type InputsBatchedStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*Inputs `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each Inputs at end.
	//   - Each Inputs response is fully-specified (all fields set).
	//   - start: Returns the state of each Inputs at start, followed by updates until now.
	//   - Each Inputs response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each Inputs at start, followed by updates
	//     until end.
	//   - Each Inputs response at start is fully-specified, but updates until end may
	//     be partial.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	// MaxMessages limits the maximum number of messages that can be contained in one batch.
	// MaxMessages is required to be at least 1.
	// The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
	// INTERNAL_BATCH_LIMIT is set based on the maximum message size.
	MaxMessages *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=max_messages,json=maxMessages,proto3" json:"max_messages,omitempty"`
}

func (x *InputsBatchedStreamRequest) Reset() {
	*x = InputsBatchedStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputsBatchedStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputsBatchedStreamRequest) ProtoMessage() {}

func (x *InputsBatchedStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputsBatchedStreamRequest.ProtoReflect.Descriptor instead.
func (*InputsBatchedStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{59}
}

func (x *InputsBatchedStreamRequest) GetPartialEqFilter() []*Inputs {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *InputsBatchedStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *InputsBatchedStreamRequest) GetMaxMessages() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxMessages
	}
	return nil
}

type InputsBatchedStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Values are the values deemed relevant to the initiating request.
	// The length of this structure is guaranteed to be between (inclusive) 1 and
	// min(req.max_messages, INTERNAL_BATCH_LIMIT).
	Responses []*InputsStreamResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *InputsBatchedStreamResponse) Reset() {
	*x = InputsBatchedStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputsBatchedStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputsBatchedStreamResponse) ProtoMessage() {}

func (x *InputsBatchedStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputsBatchedStreamResponse.ProtoReflect.Descriptor instead.
func (*InputsBatchedStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{60}
}

func (x *InputsBatchedStreamResponse) GetResponses() []*InputsStreamResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type InputsConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a InputsConfig instance to retrieve.
	// This value must be populated.
	Key *InputsKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *InputsConfigRequest) Reset() {
	*x = InputsConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputsConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputsConfigRequest) ProtoMessage() {}

func (x *InputsConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputsConfigRequest.ProtoReflect.Descriptor instead.
func (*InputsConfigRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{61}
}

func (x *InputsConfigRequest) GetKey() *InputsKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *InputsConfigRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type InputsConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *InputsConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// InputsConfig instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *InputsConfigResponse) Reset() {
	*x = InputsConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputsConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputsConfigResponse) ProtoMessage() {}

func (x *InputsConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputsConfigResponse.ProtoReflect.Descriptor instead.
func (*InputsConfigResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{62}
}

func (x *InputsConfigResponse) GetValue() *InputsConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *InputsConfigResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type InputsConfigSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*InputsKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *InputsConfigSomeRequest) Reset() {
	*x = InputsConfigSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputsConfigSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputsConfigSomeRequest) ProtoMessage() {}

func (x *InputsConfigSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputsConfigSomeRequest.ProtoReflect.Descriptor instead.
func (*InputsConfigSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{63}
}

func (x *InputsConfigSomeRequest) GetKeys() []*InputsKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *InputsConfigSomeRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type InputsConfigSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *InputsConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// InputsConfig instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *InputsConfigSomeResponse) Reset() {
	*x = InputsConfigSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputsConfigSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputsConfigSomeResponse) ProtoMessage() {}

func (x *InputsConfigSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputsConfigSomeResponse.ProtoReflect.Descriptor instead.
func (*InputsConfigSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{64}
}

func (x *InputsConfigSomeResponse) GetValue() *InputsConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *InputsConfigSomeResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *InputsConfigSomeResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type InputsConfigStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*InputsConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each InputsConfig at end.
	//   - Each InputsConfig response is fully-specified (all fields set).
	//   - start: Returns the state of each InputsConfig at start, followed by updates until now.
	//   - Each InputsConfig response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each InputsConfig at start, followed by updates
	//     until end.
	//   - Each InputsConfig response at start is fully-specified, but updates until end may
	//     be partial.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *InputsConfigStreamRequest) Reset() {
	*x = InputsConfigStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputsConfigStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputsConfigStreamRequest) ProtoMessage() {}

func (x *InputsConfigStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputsConfigStreamRequest.ProtoReflect.Descriptor instead.
func (*InputsConfigStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{65}
}

func (x *InputsConfigStreamRequest) GetPartialEqFilter() []*InputsConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *InputsConfigStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type InputsConfigStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *InputsConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this InputsConfig's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the InputsConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *InputsConfigStreamResponse) Reset() {
	*x = InputsConfigStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputsConfigStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputsConfigStreamResponse) ProtoMessage() {}

func (x *InputsConfigStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputsConfigStreamResponse.ProtoReflect.Descriptor instead.
func (*InputsConfigStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{66}
}

func (x *InputsConfigStreamResponse) GetValue() *InputsConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *InputsConfigStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *InputsConfigStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation(0)
}

type InputsConfigBatchedStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*InputsConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each InputsConfig at end.
	//   - Each InputsConfig response is fully-specified (all fields set).
	//   - start: Returns the state of each InputsConfig at start, followed by updates until now.
	//   - Each InputsConfig response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each InputsConfig at start, followed by updates
	//     until end.
	//   - Each InputsConfig response at start is fully-specified, but updates until end may
	//     be partial.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	// MaxMessages limits the maximum number of messages that can be contained in one batch.
	// MaxMessages is required to be at least 1.
	// The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
	// INTERNAL_BATCH_LIMIT is set based on the maximum message size.
	MaxMessages *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=max_messages,json=maxMessages,proto3" json:"max_messages,omitempty"`
}

func (x *InputsConfigBatchedStreamRequest) Reset() {
	*x = InputsConfigBatchedStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputsConfigBatchedStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputsConfigBatchedStreamRequest) ProtoMessage() {}

func (x *InputsConfigBatchedStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputsConfigBatchedStreamRequest.ProtoReflect.Descriptor instead.
func (*InputsConfigBatchedStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{67}
}

func (x *InputsConfigBatchedStreamRequest) GetPartialEqFilter() []*InputsConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *InputsConfigBatchedStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *InputsConfigBatchedStreamRequest) GetMaxMessages() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxMessages
	}
	return nil
}

type InputsConfigBatchedStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Values are the values deemed relevant to the initiating request.
	// The length of this structure is guaranteed to be between (inclusive) 1 and
	// min(req.max_messages, INTERNAL_BATCH_LIMIT).
	Responses []*InputsConfigStreamResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *InputsConfigBatchedStreamResponse) Reset() {
	*x = InputsConfigBatchedStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputsConfigBatchedStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputsConfigBatchedStreamResponse) ProtoMessage() {}

func (x *InputsConfigBatchedStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputsConfigBatchedStreamResponse.ProtoReflect.Descriptor instead.
func (*InputsConfigBatchedStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{68}
}

func (x *InputsConfigBatchedStreamResponse) GetResponses() []*InputsConfigStreamResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type InputsConfigSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// InputsConfig carries the value to set into the datastore.
	// See the documentation on the InputsConfig struct for which fields are required.
	Value *InputsConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *InputsConfigSetRequest) Reset() {
	*x = InputsConfigSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputsConfigSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputsConfigSetRequest) ProtoMessage() {}

func (x *InputsConfigSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputsConfigSetRequest.ProtoReflect.Descriptor instead.
func (*InputsConfigSetRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{69}
}

func (x *InputsConfigSetRequest) GetValue() *InputsConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

type InputsConfigSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value carries all the values given in the InputsConfigSetRequest as well
	// as any server-generated values.
	Value *InputsConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//   - it is after the time the request was received
	//   - a time-ranged query with StartTime==CreatedAt will include this instance.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *InputsConfigSetResponse) Reset() {
	*x = InputsConfigSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputsConfigSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputsConfigSetResponse) ProtoMessage() {}

func (x *InputsConfigSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputsConfigSetResponse.ProtoReflect.Descriptor instead.
func (*InputsConfigSetResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{70}
}

func (x *InputsConfigSetResponse) GetValue() *InputsConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *InputsConfigSetResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type InputsConfigSetSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value contains a list of InputsConfig values to write.
	// It is possible to provide more values than can fit within either:
	//   - the maxiumum send size of the client
	//   - the maximum receive size of the server
	//
	// If this error occurs you must reduce the number of values sent.
	// See gRPC "maximum message size" documentation for more information.
	Values []*InputsConfig `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *InputsConfigSetSomeRequest) Reset() {
	*x = InputsConfigSetSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputsConfigSetSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputsConfigSetSomeRequest) ProtoMessage() {}

func (x *InputsConfigSetSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputsConfigSetSomeRequest.ProtoReflect.Descriptor instead.
func (*InputsConfigSetSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{71}
}

func (x *InputsConfigSetSomeRequest) GetValues() []*InputsConfig {
	if x != nil {
		return x.Values
	}
	return nil
}

type InputsConfigSetSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *InputsKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Error string     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *InputsConfigSetSomeResponse) Reset() {
	*x = InputsConfigSetSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputsConfigSetSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputsConfigSetSomeResponse) ProtoMessage() {}

func (x *InputsConfigSetSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputsConfigSetSomeResponse.ProtoReflect.Descriptor instead.
func (*InputsConfigSetSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{72}
}

func (x *InputsConfigSetSomeResponse) GetKey() *InputsKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *InputsConfigSetSomeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type InputsConfigDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key indicates which InputsConfig instance to remove.
	// This field must always be set.
	Key *InputsKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *InputsConfigDeleteRequest) Reset() {
	*x = InputsConfigDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputsConfigDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputsConfigDeleteRequest) ProtoMessage() {}

func (x *InputsConfigDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputsConfigDeleteRequest.ProtoReflect.Descriptor instead.
func (*InputsConfigDeleteRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{73}
}

func (x *InputsConfigDeleteRequest) GetKey() *InputsKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type InputsConfigDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key echoes back the key of the deleted InputsConfig instance.
	Key *InputsKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//   - it is after the time the request was received
	//   - a time-ranged query with StartTime==DeletedAt will not include this instance.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *InputsConfigDeleteResponse) Reset() {
	*x = InputsConfigDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputsConfigDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputsConfigDeleteResponse) ProtoMessage() {}

func (x *InputsConfigDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputsConfigDeleteResponse.ProtoReflect.Descriptor instead.
func (*InputsConfigDeleteResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{74}
}

func (x *InputsConfigDeleteResponse) GetKey() *InputsKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *InputsConfigDeleteResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type InputsConfigDeleteSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key contains a list of InputsConfig keys to delete
	Keys []*InputsKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *InputsConfigDeleteSomeRequest) Reset() {
	*x = InputsConfigDeleteSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputsConfigDeleteSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputsConfigDeleteSomeRequest) ProtoMessage() {}

func (x *InputsConfigDeleteSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputsConfigDeleteSomeRequest.ProtoReflect.Descriptor instead.
func (*InputsConfigDeleteSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{75}
}

func (x *InputsConfigDeleteSomeRequest) GetKeys() []*InputsKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

// InputsConfigDeleteSomeResponse is only sent when there is an error.
type InputsConfigDeleteSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *InputsKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Error string     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *InputsConfigDeleteSomeResponse) Reset() {
	*x = InputsConfigDeleteSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputsConfigDeleteSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputsConfigDeleteSomeResponse) ProtoMessage() {}

func (x *InputsConfigDeleteSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputsConfigDeleteSomeResponse.ProtoReflect.Descriptor instead.
func (*InputsConfigDeleteSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{76}
}

func (x *InputsConfigDeleteSomeResponse) GetKey() *InputsKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *InputsConfigDeleteSomeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type InputsConfigDeleteAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a DeleteAll.
	// This requires all provided fields to be equal to the response.
	// A filtered DeleteAll will use GetAll with filter to find things to delete.
	PartialEqFilter []*InputsConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
}

func (x *InputsConfigDeleteAllRequest) Reset() {
	*x = InputsConfigDeleteAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputsConfigDeleteAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputsConfigDeleteAllRequest) ProtoMessage() {}

func (x *InputsConfigDeleteAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputsConfigDeleteAllRequest.ProtoReflect.Descriptor instead.
func (*InputsConfigDeleteAllRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{77}
}

func (x *InputsConfigDeleteAllRequest) GetPartialEqFilter() []*InputsConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

type InputsConfigDeleteAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This describes the class of delete error.
	// A DeleteAllResponse is only sent when there is an error.
	Type fmp.DeleteError `protobuf:"varint,1,opt,name=type,proto3,enum=fmp.DeleteError" json:"type,omitempty"`
	// This indicates the error message from the delete failure.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// This is the key of the InputsConfig instance that failed to be deleted.
	Key *InputsKey `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp when the key was being deleted.
	Time *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *InputsConfigDeleteAllResponse) Reset() {
	*x = InputsConfigDeleteAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputsConfigDeleteAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputsConfigDeleteAllResponse) ProtoMessage() {}

func (x *InputsConfigDeleteAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputsConfigDeleteAllResponse.ProtoReflect.Descriptor instead.
func (*InputsConfigDeleteAllResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{78}
}

func (x *InputsConfigDeleteAllResponse) GetType() fmp.DeleteError {
	if x != nil {
		return x.Type
	}
	return fmp.DeleteError(0)
}

func (x *InputsConfigDeleteAllResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *InputsConfigDeleteAllResponse) GetKey() *InputsKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *InputsConfigDeleteAllResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type SecretInputRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a SecretInput instance to retrieve.
	// This value must be populated.
	Key *InputsKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *SecretInputRequest) Reset() {
	*x = SecretInputRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretInputRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretInputRequest) ProtoMessage() {}

func (x *SecretInputRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretInputRequest.ProtoReflect.Descriptor instead.
func (*SecretInputRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{79}
}

func (x *SecretInputRequest) GetKey() *InputsKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *SecretInputRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type SecretInputResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *SecretInput `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// SecretInput instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *SecretInputResponse) Reset() {
	*x = SecretInputResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretInputResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretInputResponse) ProtoMessage() {}

func (x *SecretInputResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretInputResponse.ProtoReflect.Descriptor instead.
func (*SecretInputResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{80}
}

func (x *SecretInputResponse) GetValue() *SecretInput {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *SecretInputResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type SecretInputSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*InputsKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *SecretInputSomeRequest) Reset() {
	*x = SecretInputSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretInputSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretInputSomeRequest) ProtoMessage() {}

func (x *SecretInputSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretInputSomeRequest.ProtoReflect.Descriptor instead.
func (*SecretInputSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{81}
}

func (x *SecretInputSomeRequest) GetKeys() []*InputsKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *SecretInputSomeRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type SecretInputSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *SecretInput `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// SecretInput instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *SecretInputSomeResponse) Reset() {
	*x = SecretInputSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretInputSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretInputSomeResponse) ProtoMessage() {}

func (x *SecretInputSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretInputSomeResponse.ProtoReflect.Descriptor instead.
func (*SecretInputSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{82}
}

func (x *SecretInputSomeResponse) GetValue() *SecretInput {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *SecretInputSomeResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *SecretInputSomeResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type SecretInputStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*SecretInput `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each SecretInput at end.
	//   - Each SecretInput response is fully-specified (all fields set).
	//   - start: Returns the state of each SecretInput at start, followed by updates until now.
	//   - Each SecretInput response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each SecretInput at start, followed by updates
	//     until end.
	//   - Each SecretInput response at start is fully-specified, but updates until end may
	//     be partial.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *SecretInputStreamRequest) Reset() {
	*x = SecretInputStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretInputStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretInputStreamRequest) ProtoMessage() {}

func (x *SecretInputStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretInputStreamRequest.ProtoReflect.Descriptor instead.
func (*SecretInputStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{83}
}

func (x *SecretInputStreamRequest) GetPartialEqFilter() []*SecretInput {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *SecretInputStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type SecretInputStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *SecretInput `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this SecretInput's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the SecretInput value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *SecretInputStreamResponse) Reset() {
	*x = SecretInputStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretInputStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretInputStreamResponse) ProtoMessage() {}

func (x *SecretInputStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretInputStreamResponse.ProtoReflect.Descriptor instead.
func (*SecretInputStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{84}
}

func (x *SecretInputStreamResponse) GetValue() *SecretInput {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *SecretInputStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *SecretInputStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation(0)
}

type SecretInputBatchedStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*SecretInput `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each SecretInput at end.
	//   - Each SecretInput response is fully-specified (all fields set).
	//   - start: Returns the state of each SecretInput at start, followed by updates until now.
	//   - Each SecretInput response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each SecretInput at start, followed by updates
	//     until end.
	//   - Each SecretInput response at start is fully-specified, but updates until end may
	//     be partial.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	// MaxMessages limits the maximum number of messages that can be contained in one batch.
	// MaxMessages is required to be at least 1.
	// The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
	// INTERNAL_BATCH_LIMIT is set based on the maximum message size.
	MaxMessages *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=max_messages,json=maxMessages,proto3" json:"max_messages,omitempty"`
}

func (x *SecretInputBatchedStreamRequest) Reset() {
	*x = SecretInputBatchedStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretInputBatchedStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretInputBatchedStreamRequest) ProtoMessage() {}

func (x *SecretInputBatchedStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretInputBatchedStreamRequest.ProtoReflect.Descriptor instead.
func (*SecretInputBatchedStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{85}
}

func (x *SecretInputBatchedStreamRequest) GetPartialEqFilter() []*SecretInput {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *SecretInputBatchedStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *SecretInputBatchedStreamRequest) GetMaxMessages() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxMessages
	}
	return nil
}

type SecretInputBatchedStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Values are the values deemed relevant to the initiating request.
	// The length of this structure is guaranteed to be between (inclusive) 1 and
	// min(req.max_messages, INTERNAL_BATCH_LIMIT).
	Responses []*SecretInputStreamResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *SecretInputBatchedStreamResponse) Reset() {
	*x = SecretInputBatchedStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretInputBatchedStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretInputBatchedStreamResponse) ProtoMessage() {}

func (x *SecretInputBatchedStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretInputBatchedStreamResponse.ProtoReflect.Descriptor instead.
func (*SecretInputBatchedStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{86}
}

func (x *SecretInputBatchedStreamResponse) GetResponses() []*SecretInputStreamResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type StudioRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a Studio instance to retrieve.
	// This value must be populated.
	Key *StudioKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *StudioRequest) Reset() {
	*x = StudioRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioRequest) ProtoMessage() {}

func (x *StudioRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioRequest.ProtoReflect.Descriptor instead.
func (*StudioRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{87}
}

func (x *StudioRequest) GetKey() *StudioKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *StudioRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type StudioResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *Studio `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// Studio instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *StudioResponse) Reset() {
	*x = StudioResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioResponse) ProtoMessage() {}

func (x *StudioResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioResponse.ProtoReflect.Descriptor instead.
func (*StudioResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{88}
}

func (x *StudioResponse) GetValue() *Studio {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *StudioResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type StudioSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*StudioKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *StudioSomeRequest) Reset() {
	*x = StudioSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioSomeRequest) ProtoMessage() {}

func (x *StudioSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioSomeRequest.ProtoReflect.Descriptor instead.
func (*StudioSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{89}
}

func (x *StudioSomeRequest) GetKeys() []*StudioKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *StudioSomeRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type StudioSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *Studio `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// Studio instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *StudioSomeResponse) Reset() {
	*x = StudioSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioSomeResponse) ProtoMessage() {}

func (x *StudioSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioSomeResponse.ProtoReflect.Descriptor instead.
func (*StudioSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{90}
}

func (x *StudioSomeResponse) GetValue() *Studio {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *StudioSomeResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *StudioSomeResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type StudioStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*Studio `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each Studio at end.
	//   - Each Studio response is fully-specified (all fields set).
	//   - start: Returns the state of each Studio at start, followed by updates until now.
	//   - Each Studio response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each Studio at start, followed by updates
	//     until end.
	//   - Each Studio response at start is fully-specified, but updates until end may
	//     be partial.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *StudioStreamRequest) Reset() {
	*x = StudioStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioStreamRequest) ProtoMessage() {}

func (x *StudioStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioStreamRequest.ProtoReflect.Descriptor instead.
func (*StudioStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{91}
}

func (x *StudioStreamRequest) GetPartialEqFilter() []*Studio {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *StudioStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type StudioStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *Studio `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this Studio's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the Studio value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *StudioStreamResponse) Reset() {
	*x = StudioStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioStreamResponse) ProtoMessage() {}

func (x *StudioStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioStreamResponse.ProtoReflect.Descriptor instead.
func (*StudioStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{92}
}

func (x *StudioStreamResponse) GetValue() *Studio {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *StudioStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *StudioStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation(0)
}

type StudioBatchedStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*Studio `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each Studio at end.
	//   - Each Studio response is fully-specified (all fields set).
	//   - start: Returns the state of each Studio at start, followed by updates until now.
	//   - Each Studio response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each Studio at start, followed by updates
	//     until end.
	//   - Each Studio response at start is fully-specified, but updates until end may
	//     be partial.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	// MaxMessages limits the maximum number of messages that can be contained in one batch.
	// MaxMessages is required to be at least 1.
	// The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
	// INTERNAL_BATCH_LIMIT is set based on the maximum message size.
	MaxMessages *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=max_messages,json=maxMessages,proto3" json:"max_messages,omitempty"`
}

func (x *StudioBatchedStreamRequest) Reset() {
	*x = StudioBatchedStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioBatchedStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioBatchedStreamRequest) ProtoMessage() {}

func (x *StudioBatchedStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioBatchedStreamRequest.ProtoReflect.Descriptor instead.
func (*StudioBatchedStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{93}
}

func (x *StudioBatchedStreamRequest) GetPartialEqFilter() []*Studio {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *StudioBatchedStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *StudioBatchedStreamRequest) GetMaxMessages() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxMessages
	}
	return nil
}

type StudioBatchedStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Values are the values deemed relevant to the initiating request.
	// The length of this structure is guaranteed to be between (inclusive) 1 and
	// min(req.max_messages, INTERNAL_BATCH_LIMIT).
	Responses []*StudioStreamResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *StudioBatchedStreamResponse) Reset() {
	*x = StudioBatchedStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioBatchedStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioBatchedStreamResponse) ProtoMessage() {}

func (x *StudioBatchedStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioBatchedStreamResponse.ProtoReflect.Descriptor instead.
func (*StudioBatchedStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{94}
}

func (x *StudioBatchedStreamResponse) GetResponses() []*StudioStreamResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type StudioConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a StudioConfig instance to retrieve.
	// This value must be populated.
	Key *StudioKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *StudioConfigRequest) Reset() {
	*x = StudioConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioConfigRequest) ProtoMessage() {}

func (x *StudioConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioConfigRequest.ProtoReflect.Descriptor instead.
func (*StudioConfigRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{95}
}

func (x *StudioConfigRequest) GetKey() *StudioKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *StudioConfigRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type StudioConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *StudioConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// StudioConfig instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *StudioConfigResponse) Reset() {
	*x = StudioConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioConfigResponse) ProtoMessage() {}

func (x *StudioConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioConfigResponse.ProtoReflect.Descriptor instead.
func (*StudioConfigResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{96}
}

func (x *StudioConfigResponse) GetValue() *StudioConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *StudioConfigResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type StudioConfigSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*StudioKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *StudioConfigSomeRequest) Reset() {
	*x = StudioConfigSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioConfigSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioConfigSomeRequest) ProtoMessage() {}

func (x *StudioConfigSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioConfigSomeRequest.ProtoReflect.Descriptor instead.
func (*StudioConfigSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{97}
}

func (x *StudioConfigSomeRequest) GetKeys() []*StudioKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *StudioConfigSomeRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type StudioConfigSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *StudioConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// StudioConfig instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *StudioConfigSomeResponse) Reset() {
	*x = StudioConfigSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioConfigSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioConfigSomeResponse) ProtoMessage() {}

func (x *StudioConfigSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioConfigSomeResponse.ProtoReflect.Descriptor instead.
func (*StudioConfigSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{98}
}

func (x *StudioConfigSomeResponse) GetValue() *StudioConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *StudioConfigSomeResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *StudioConfigSomeResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type StudioConfigStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*StudioConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each StudioConfig at end.
	//   - Each StudioConfig response is fully-specified (all fields set).
	//   - start: Returns the state of each StudioConfig at start, followed by updates until now.
	//   - Each StudioConfig response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each StudioConfig at start, followed by updates
	//     until end.
	//   - Each StudioConfig response at start is fully-specified, but updates until end may
	//     be partial.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *StudioConfigStreamRequest) Reset() {
	*x = StudioConfigStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioConfigStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioConfigStreamRequest) ProtoMessage() {}

func (x *StudioConfigStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioConfigStreamRequest.ProtoReflect.Descriptor instead.
func (*StudioConfigStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{99}
}

func (x *StudioConfigStreamRequest) GetPartialEqFilter() []*StudioConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *StudioConfigStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type StudioConfigStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *StudioConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this StudioConfig's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the StudioConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *StudioConfigStreamResponse) Reset() {
	*x = StudioConfigStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioConfigStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioConfigStreamResponse) ProtoMessage() {}

func (x *StudioConfigStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioConfigStreamResponse.ProtoReflect.Descriptor instead.
func (*StudioConfigStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{100}
}

func (x *StudioConfigStreamResponse) GetValue() *StudioConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *StudioConfigStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *StudioConfigStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation(0)
}

type StudioConfigBatchedStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*StudioConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each StudioConfig at end.
	//   - Each StudioConfig response is fully-specified (all fields set).
	//   - start: Returns the state of each StudioConfig at start, followed by updates until now.
	//   - Each StudioConfig response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each StudioConfig at start, followed by updates
	//     until end.
	//   - Each StudioConfig response at start is fully-specified, but updates until end may
	//     be partial.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	// MaxMessages limits the maximum number of messages that can be contained in one batch.
	// MaxMessages is required to be at least 1.
	// The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
	// INTERNAL_BATCH_LIMIT is set based on the maximum message size.
	MaxMessages *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=max_messages,json=maxMessages,proto3" json:"max_messages,omitempty"`
}

func (x *StudioConfigBatchedStreamRequest) Reset() {
	*x = StudioConfigBatchedStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioConfigBatchedStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioConfigBatchedStreamRequest) ProtoMessage() {}

func (x *StudioConfigBatchedStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioConfigBatchedStreamRequest.ProtoReflect.Descriptor instead.
func (*StudioConfigBatchedStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{101}
}

func (x *StudioConfigBatchedStreamRequest) GetPartialEqFilter() []*StudioConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *StudioConfigBatchedStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *StudioConfigBatchedStreamRequest) GetMaxMessages() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxMessages
	}
	return nil
}

type StudioConfigBatchedStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Values are the values deemed relevant to the initiating request.
	// The length of this structure is guaranteed to be between (inclusive) 1 and
	// min(req.max_messages, INTERNAL_BATCH_LIMIT).
	Responses []*StudioConfigStreamResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *StudioConfigBatchedStreamResponse) Reset() {
	*x = StudioConfigBatchedStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioConfigBatchedStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioConfigBatchedStreamResponse) ProtoMessage() {}

func (x *StudioConfigBatchedStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioConfigBatchedStreamResponse.ProtoReflect.Descriptor instead.
func (*StudioConfigBatchedStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{102}
}

func (x *StudioConfigBatchedStreamResponse) GetResponses() []*StudioConfigStreamResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type StudioConfigSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// StudioConfig carries the value to set into the datastore.
	// See the documentation on the StudioConfig struct for which fields are required.
	Value *StudioConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *StudioConfigSetRequest) Reset() {
	*x = StudioConfigSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioConfigSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioConfigSetRequest) ProtoMessage() {}

func (x *StudioConfigSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioConfigSetRequest.ProtoReflect.Descriptor instead.
func (*StudioConfigSetRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{103}
}

func (x *StudioConfigSetRequest) GetValue() *StudioConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

type StudioConfigSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value carries all the values given in the StudioConfigSetRequest as well
	// as any server-generated values.
	Value *StudioConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//   - it is after the time the request was received
	//   - a time-ranged query with StartTime==CreatedAt will include this instance.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *StudioConfigSetResponse) Reset() {
	*x = StudioConfigSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioConfigSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioConfigSetResponse) ProtoMessage() {}

func (x *StudioConfigSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioConfigSetResponse.ProtoReflect.Descriptor instead.
func (*StudioConfigSetResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{104}
}

func (x *StudioConfigSetResponse) GetValue() *StudioConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *StudioConfigSetResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type StudioConfigSetSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value contains a list of StudioConfig values to write.
	// It is possible to provide more values than can fit within either:
	//   - the maxiumum send size of the client
	//   - the maximum receive size of the server
	//
	// If this error occurs you must reduce the number of values sent.
	// See gRPC "maximum message size" documentation for more information.
	Values []*StudioConfig `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *StudioConfigSetSomeRequest) Reset() {
	*x = StudioConfigSetSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioConfigSetSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioConfigSetSomeRequest) ProtoMessage() {}

func (x *StudioConfigSetSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioConfigSetSomeRequest.ProtoReflect.Descriptor instead.
func (*StudioConfigSetSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{105}
}

func (x *StudioConfigSetSomeRequest) GetValues() []*StudioConfig {
	if x != nil {
		return x.Values
	}
	return nil
}

type StudioConfigSetSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *StudioKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Error string     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *StudioConfigSetSomeResponse) Reset() {
	*x = StudioConfigSetSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioConfigSetSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioConfigSetSomeResponse) ProtoMessage() {}

func (x *StudioConfigSetSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioConfigSetSomeResponse.ProtoReflect.Descriptor instead.
func (*StudioConfigSetSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{106}
}

func (x *StudioConfigSetSomeResponse) GetKey() *StudioKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *StudioConfigSetSomeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type StudioConfigDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key indicates which StudioConfig instance to remove.
	// This field must always be set.
	Key *StudioKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *StudioConfigDeleteRequest) Reset() {
	*x = StudioConfigDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioConfigDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioConfigDeleteRequest) ProtoMessage() {}

func (x *StudioConfigDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioConfigDeleteRequest.ProtoReflect.Descriptor instead.
func (*StudioConfigDeleteRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{107}
}

func (x *StudioConfigDeleteRequest) GetKey() *StudioKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type StudioConfigDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key echoes back the key of the deleted StudioConfig instance.
	Key *StudioKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//   - it is after the time the request was received
	//   - a time-ranged query with StartTime==DeletedAt will not include this instance.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *StudioConfigDeleteResponse) Reset() {
	*x = StudioConfigDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioConfigDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioConfigDeleteResponse) ProtoMessage() {}

func (x *StudioConfigDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioConfigDeleteResponse.ProtoReflect.Descriptor instead.
func (*StudioConfigDeleteResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{108}
}

func (x *StudioConfigDeleteResponse) GetKey() *StudioKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *StudioConfigDeleteResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type StudioConfigDeleteSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key contains a list of StudioConfig keys to delete
	Keys []*StudioKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *StudioConfigDeleteSomeRequest) Reset() {
	*x = StudioConfigDeleteSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioConfigDeleteSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioConfigDeleteSomeRequest) ProtoMessage() {}

func (x *StudioConfigDeleteSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioConfigDeleteSomeRequest.ProtoReflect.Descriptor instead.
func (*StudioConfigDeleteSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{109}
}

func (x *StudioConfigDeleteSomeRequest) GetKeys() []*StudioKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

// StudioConfigDeleteSomeResponse is only sent when there is an error.
type StudioConfigDeleteSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *StudioKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Error string     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *StudioConfigDeleteSomeResponse) Reset() {
	*x = StudioConfigDeleteSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioConfigDeleteSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioConfigDeleteSomeResponse) ProtoMessage() {}

func (x *StudioConfigDeleteSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioConfigDeleteSomeResponse.ProtoReflect.Descriptor instead.
func (*StudioConfigDeleteSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{110}
}

func (x *StudioConfigDeleteSomeResponse) GetKey() *StudioKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *StudioConfigDeleteSomeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type StudioConfigDeleteAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a DeleteAll.
	// This requires all provided fields to be equal to the response.
	// A filtered DeleteAll will use GetAll with filter to find things to delete.
	PartialEqFilter []*StudioConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
}

func (x *StudioConfigDeleteAllRequest) Reset() {
	*x = StudioConfigDeleteAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioConfigDeleteAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioConfigDeleteAllRequest) ProtoMessage() {}

func (x *StudioConfigDeleteAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioConfigDeleteAllRequest.ProtoReflect.Descriptor instead.
func (*StudioConfigDeleteAllRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{111}
}

func (x *StudioConfigDeleteAllRequest) GetPartialEqFilter() []*StudioConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

type StudioConfigDeleteAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This describes the class of delete error.
	// A DeleteAllResponse is only sent when there is an error.
	Type fmp.DeleteError `protobuf:"varint,1,opt,name=type,proto3,enum=fmp.DeleteError" json:"type,omitempty"`
	// This indicates the error message from the delete failure.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// This is the key of the StudioConfig instance that failed to be deleted.
	Key *StudioKey `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp when the key was being deleted.
	Time *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *StudioConfigDeleteAllResponse) Reset() {
	*x = StudioConfigDeleteAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioConfigDeleteAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioConfigDeleteAllResponse) ProtoMessage() {}

func (x *StudioConfigDeleteAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioConfigDeleteAllResponse.ProtoReflect.Descriptor instead.
func (*StudioConfigDeleteAllResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{112}
}

func (x *StudioConfigDeleteAllResponse) GetType() fmp.DeleteError {
	if x != nil {
		return x.Type
	}
	return fmp.DeleteError(0)
}

func (x *StudioConfigDeleteAllResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *StudioConfigDeleteAllResponse) GetKey() *StudioKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *StudioConfigDeleteAllResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type StudioSummaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a StudioSummary instance to retrieve.
	// This value must be populated.
	Key *StudioKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *StudioSummaryRequest) Reset() {
	*x = StudioSummaryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioSummaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioSummaryRequest) ProtoMessage() {}

func (x *StudioSummaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioSummaryRequest.ProtoReflect.Descriptor instead.
func (*StudioSummaryRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{113}
}

func (x *StudioSummaryRequest) GetKey() *StudioKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *StudioSummaryRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type StudioSummaryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *StudioSummary `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// StudioSummary instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *StudioSummaryResponse) Reset() {
	*x = StudioSummaryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioSummaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioSummaryResponse) ProtoMessage() {}

func (x *StudioSummaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioSummaryResponse.ProtoReflect.Descriptor instead.
func (*StudioSummaryResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{114}
}

func (x *StudioSummaryResponse) GetValue() *StudioSummary {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *StudioSummaryResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type StudioSummarySomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*StudioKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *StudioSummarySomeRequest) Reset() {
	*x = StudioSummarySomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioSummarySomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioSummarySomeRequest) ProtoMessage() {}

func (x *StudioSummarySomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioSummarySomeRequest.ProtoReflect.Descriptor instead.
func (*StudioSummarySomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{115}
}

func (x *StudioSummarySomeRequest) GetKeys() []*StudioKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *StudioSummarySomeRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type StudioSummarySomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *StudioSummary `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// StudioSummary instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *StudioSummarySomeResponse) Reset() {
	*x = StudioSummarySomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioSummarySomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioSummarySomeResponse) ProtoMessage() {}

func (x *StudioSummarySomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioSummarySomeResponse.ProtoReflect.Descriptor instead.
func (*StudioSummarySomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{116}
}

func (x *StudioSummarySomeResponse) GetValue() *StudioSummary {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *StudioSummarySomeResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *StudioSummarySomeResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type StudioSummaryStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*StudioSummary `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each StudioSummary at end.
	//   - Each StudioSummary response is fully-specified (all fields set).
	//   - start: Returns the state of each StudioSummary at start, followed by updates until now.
	//   - Each StudioSummary response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each StudioSummary at start, followed by updates
	//     until end.
	//   - Each StudioSummary response at start is fully-specified, but updates until end may
	//     be partial.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *StudioSummaryStreamRequest) Reset() {
	*x = StudioSummaryStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioSummaryStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioSummaryStreamRequest) ProtoMessage() {}

func (x *StudioSummaryStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioSummaryStreamRequest.ProtoReflect.Descriptor instead.
func (*StudioSummaryStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{117}
}

func (x *StudioSummaryStreamRequest) GetPartialEqFilter() []*StudioSummary {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *StudioSummaryStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type StudioSummaryStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *StudioSummary `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this StudioSummary's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the StudioSummary value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *StudioSummaryStreamResponse) Reset() {
	*x = StudioSummaryStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioSummaryStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioSummaryStreamResponse) ProtoMessage() {}

func (x *StudioSummaryStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioSummaryStreamResponse.ProtoReflect.Descriptor instead.
func (*StudioSummaryStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{118}
}

func (x *StudioSummaryStreamResponse) GetValue() *StudioSummary {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *StudioSummaryStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *StudioSummaryStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation(0)
}

type StudioSummaryBatchedStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*StudioSummary `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each StudioSummary at end.
	//   - Each StudioSummary response is fully-specified (all fields set).
	//   - start: Returns the state of each StudioSummary at start, followed by updates until now.
	//   - Each StudioSummary response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each StudioSummary at start, followed by updates
	//     until end.
	//   - Each StudioSummary response at start is fully-specified, but updates until end may
	//     be partial.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	// MaxMessages limits the maximum number of messages that can be contained in one batch.
	// MaxMessages is required to be at least 1.
	// The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
	// INTERNAL_BATCH_LIMIT is set based on the maximum message size.
	MaxMessages *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=max_messages,json=maxMessages,proto3" json:"max_messages,omitempty"`
}

func (x *StudioSummaryBatchedStreamRequest) Reset() {
	*x = StudioSummaryBatchedStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioSummaryBatchedStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioSummaryBatchedStreamRequest) ProtoMessage() {}

func (x *StudioSummaryBatchedStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioSummaryBatchedStreamRequest.ProtoReflect.Descriptor instead.
func (*StudioSummaryBatchedStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{119}
}

func (x *StudioSummaryBatchedStreamRequest) GetPartialEqFilter() []*StudioSummary {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *StudioSummaryBatchedStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *StudioSummaryBatchedStreamRequest) GetMaxMessages() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxMessages
	}
	return nil
}

type StudioSummaryBatchedStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Values are the values deemed relevant to the initiating request.
	// The length of this structure is guaranteed to be between (inclusive) 1 and
	// min(req.max_messages, INTERNAL_BATCH_LIMIT).
	Responses []*StudioSummaryStreamResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *StudioSummaryBatchedStreamResponse) Reset() {
	*x = StudioSummaryBatchedStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioSummaryBatchedStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioSummaryBatchedStreamResponse) ProtoMessage() {}

func (x *StudioSummaryBatchedStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioSummaryBatchedStreamResponse.ProtoReflect.Descriptor instead.
func (*StudioSummaryBatchedStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{120}
}

func (x *StudioSummaryBatchedStreamResponse) GetResponses() []*StudioSummaryStreamResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

var File_arista_studio_v1_services_gen_proto protoreflect.FileDescriptor

var file_arista_studio_v1_services_gen_proto_rawDesc = []byte{
	0x0a, 0x23, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x67, 0x65, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x1a, 0x1d, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x66, 0x6d, 0x70, 0x2f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa7, 0x01, 0x0a,
	0x0c, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x74, 0x0a, 0x13, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x7c, 0x0a, 0x14,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54,
	0x61, 0x67, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x7a, 0x0a, 0x17, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x4b, 0x65, 0x79,
	0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x18, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61,
	0x67, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2e, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x94, 0x01,
	0x0a, 0x19, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x11, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45,
	0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x1a, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x54, 0x61, 0x67, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61,
	0x67, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xdc,
	0x01, 0x0a, 0x20, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65,
	0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x52, 0x0f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0c,
	0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x6f, 0x0a,
	0x21, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4a, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x54, 0x61, 0x67, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x7a,
	0x0a, 0x19, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x1a, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x1d, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x4b,
	0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x1e, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x1f,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x50, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xc3,
	0x01, 0x0a, 0x20, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61,
	0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xe8, 0x01, 0x0a, 0x26, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x50, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3f,
	0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22,
	0x7b, 0x0a, 0x27, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x09, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x5a, 0x0a, 0x1c,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x1d, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x60, 0x0a, 0x20, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53,
	0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x68, 0x0a, 0x21, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65,
	0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x50, 0x0a, 0x1f, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61,
	0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x4b, 0x65, 0x79, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x22, 0x81, 0x01, 0x0a, 0x20, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x56, 0x0a, 0x23, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2f, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73,
	0x22, 0x6b, 0x0a, 0x24, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x4b,
	0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x76, 0x0a,
	0x22, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65,
	0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xde, 0x01, 0x0a, 0x23, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x66, 0x6d,
	0x70, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x4b, 0x65,
	0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x7e, 0x0a, 0x15, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69,
	0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x35, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65,
	0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x16, 0x41, 0x75, 0x74, 0x6f, 0x66,
	0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x19, 0x41, 0x75,
	0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73,
	0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x22, 0xb8, 0x01, 0x0a, 0x1a, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x1b,
	0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x11, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69,
	0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xbb, 0x01, 0x0a, 0x1c, 0x41, 0x75, 0x74, 0x6f, 0x66,
	0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69,
	0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xe0, 0x01, 0x0a, 0x22, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x11, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69,
	0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x73, 0x0a, 0x23, 0x41, 0x75, 0x74, 0x6f, 0x66,
	0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c,
	0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x84, 0x01, 0x0a,
	0x1b, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74,
	0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x1c, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x1f, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12,
	0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0xc4, 0x01, 0x0a, 0x20, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x21, 0x41, 0x75, 0x74, 0x6f, 0x66,
	0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x11,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66,
	0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xc7, 0x01,
	0x0a, 0x22, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xec, 0x01, 0x0a, 0x28, 0x41, 0x75, 0x74, 0x6f,
	0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x7f, 0x0a, 0x29, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69,
	0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69,
	0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x5e, 0x0a, 0x1e, 0x41, 0x75, 0x74, 0x6f, 0x66,
	0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f,
	0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x1f, 0x41, 0x75, 0x74, 0x6f,
	0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75,
	0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x64, 0x0a, 0x22, 0x41, 0x75, 0x74,
	0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3e, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22,
	0x72, 0x0a, 0x23, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x5a, 0x0a, 0x21, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22,
	0x8b, 0x01, 0x0a, 0x22, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x60, 0x0a,
	0x25, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22,
	0x75, 0x0a, 0x26, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69,
	0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x7a, 0x0a, 0x24, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69,
	0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52,
	0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74,
	0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x22, 0xe8, 0x01, 0x0a, 0x25, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x66, 0x6d, 0x70,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x6e, 0x0a,
	0x0d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x70, 0x0a,
	0x0e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0x74, 0x0a, 0x11, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x52,
	0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x12, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x22, 0x88, 0x01, 0x0a, 0x13, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x0f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x14,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xd0, 0x01, 0x0a, 0x1a, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x0f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x6d,
	0x61, 0x78, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x63, 0x0a, 0x1b,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x09, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x22, 0x74, 0x0a, 0x13, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x4b,
	0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x7c, 0x0a, 0x14, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x7a, 0x0a, 0x17, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2f, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79,
	0x73, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0xb4, 0x01, 0x0a, 0x18, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x19, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0xb7, 0x01, 0x0a, 0x1a, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xdc, 0x01, 0x0a, 0x20, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a,
	0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x78,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x6f, 0x0a, 0x21, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a,
	0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x4e, 0x0a, 0x16, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x7f, 0x0a, 0x17, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x54, 0x0a, 0x1a, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x22, 0x62, 0x0a, 0x1b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x4a, 0x0a, 0x19, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x22, 0x7b, 0x0a, 0x1a, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x50, 0x0a,
	0x1d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f,
	0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22,
	0x65, 0x0a, 0x1e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x6a, 0x0a, 0x1c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x22, 0xd8, 0x01, 0x0a, 0x1d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2d,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x73, 0x0a,
	0x12, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0x7a, 0x0a, 0x13, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x79,
	0x0a, 0x16, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x6f, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xb2, 0x01, 0x0a, 0x17, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2e,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x92,
	0x01, 0x0a, 0x18, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x11, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x19, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xda, 0x01, 0x0a, 0x1f,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x49, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x78,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x6d, 0x0a, 0x20, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x09,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x6e, 0x0a, 0x0d, 0x53, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x4b,
	0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x70, 0x0a, 0x0e, 0x53, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x74, 0x0a, 0x11, 0x53, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f,
	0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12,
	0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0xa8, 0x01, 0x0a, 0x12, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x13, 0x53,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x44, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x14, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0xd0, 0x01, 0x0a, 0x1a, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x44, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x63, 0x0a, 0x1b, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x74, 0x0a, 0x13, 0x53,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0x7c, 0x0a, 0x14, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0x7a, 0x0a, 0x17, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x6b, 0x65,
	0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x18,
	0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x19, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x4a, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x1a, 0x53, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0xdc, 0x01, 0x0a, 0x20, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x22, 0x6f, 0x0a, 0x21, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x22, 0x4e, 0x0a, 0x16, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x7f, 0x0a, 0x17, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0x54, 0x0a, 0x1a, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x36, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x62, 0x0a, 0x1b, 0x53, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x4a,
	0x0a, 0x19, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x7b, 0x0a, 0x1a, 0x53, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x4b,
	0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x50, 0x0a, 0x1d, 0x53, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x65, 0x0a, 0x1e, 0x53, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0x6a, 0x0a, 0x1c, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x4a, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xd8, 0x01, 0x0a,
	0x1d, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x66,
	0x6d, 0x70, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x4b,
	0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x75, 0x0a, 0x14, 0x53, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x7e,
	0x0a, 0x15, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x7b,
	0x0a, 0x18, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53,
	0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x6b, 0x65,
	0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xb6, 0x01, 0x0a, 0x19,
	0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x6f, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x1a, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65,
	0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52,
	0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xb9, 0x01,
	0x0a, 0x1b, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xde, 0x01, 0x0a, 0x21, 0x53, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x4b, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x6d, 0x61, 0x78,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6d,
	0x61, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x71, 0x0a, 0x22, 0x53, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4b, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x32, 0xd6, 0x06,
	0x0a, 0x13, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x12,
	0x25, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62,
	0x0a, 0x07, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x29, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x54, 0x61, 0x67, 0x73, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x30, 0x01, 0x12, 0x65, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x2b, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x68, 0x0a, 0x09, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54,
	0x61, 0x67, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x30, 0x01, 0x12, 0x56, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x2b,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x0d, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x2b, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x7a, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x32, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x33, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x7d, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x32, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x33, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0xfc, 0x0b, 0x0a, 0x19, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x12, 0x2b,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x07, 0x47, 0x65, 0x74,
	0x53, 0x6f, 0x6d, 0x65, 0x12, 0x2f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x71, 0x0a, 0x06, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x12, 0x31, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54,
	0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x74, 0x0a, 0x09,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x31, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x30, 0x01, 0x12, 0x5c, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x31, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x64, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x12, 0x31, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x66, 0x0a, 0x03, 0x53, 0x65, 0x74, 0x12, 0x2e, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74,
	0x0a, 0x07, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x32, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x30, 0x01, 0x12, 0x6f, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x31,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x32, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7d, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x6f, 0x6d, 0x65, 0x12, 0x35, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54,
	0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x30, 0x01, 0x12, 0x7a, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c,
	0x6c, 0x12, 0x34, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01,
	0x12, 0x86, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x12, 0x38, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61,
	0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x89, 0x01, 0x0a, 0x10, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x38,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0xf5, 0x06, 0x0a, 0x15, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69,
	0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x5b, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x12, 0x27, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74,
	0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x07,
	0x47, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66,
	0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x30, 0x01, 0x12, 0x69, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x2d,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12,
	0x6c, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x2d, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x58, 0x0a,
	0x07, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x2d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f,
	0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x2d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f,
	0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x7e, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x34, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75,
	0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x35, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x81, 0x01, 0x0a, 0x10, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x34,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0xaf, 0x0c,
	0x0a, 0x1b, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x67, 0x0a,
	0x06, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x12, 0x2d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66,
	0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69,
	0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6d,
	0x65, 0x12, 0x31, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x75, 0x0a, 0x06, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x12, 0x33, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74,
	0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30,
	0x01, 0x12, 0x78, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x33,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x5e, 0x0a, 0x07, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x33, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69,
	0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x0d, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x33, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x30, 0x01, 0x12, 0x6a, 0x0a, 0x03, 0x53, 0x65, 0x74, 0x12, 0x30, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75,
	0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x78, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x34, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75,
	0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x35, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x73, 0x0a, 0x06, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x33, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f,
	0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x81,
	0x01, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x37, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69,
	0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x30, 0x01, 0x12, 0x7e, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12,
	0x36, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66,
	0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x30, 0x01, 0x12, 0x8a, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x12, 0x3a, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12,
	0x8d, 0x01, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x12, 0x3a, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x32,
	0xfc, 0x05, 0x0a, 0x0d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x4b, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x12, 0x1f, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56,
	0x0a, 0x07, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x59, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x12, 0x25, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30,
	0x01, 0x12, 0x5c, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x25,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12,
	0x50, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x25, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x58, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x12, 0x25, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x6e, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x2c, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x71, 0x0a, 0x10, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12,
	0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0xe4,
	0x0a, 0x0a, 0x13, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65,
	0x12, 0x25, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x62, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x29, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x30, 0x01, 0x12, 0x65, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x2b, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x68, 0x0a, 0x09, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x30, 0x01, 0x12, 0x56, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12,
	0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x0d,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x2b, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x5a, 0x0a, 0x03,
	0x53, 0x65, 0x74, 0x12, 0x28, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x53,
	0x6f, 0x6d, 0x65, 0x12, 0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x30, 0x01, 0x12, 0x63, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2b, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x2f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x6e, 0x0a, 0x09, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x2e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x7a, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x32, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x33, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x7d, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x32, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0xc7, 0x06, 0x0a, 0x12, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x06,
	0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x12, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x28,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x6f, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x63, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12,
	0x2a, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x66, 0x0a, 0x09, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x2a, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x30, 0x01, 0x12, 0x55, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x2a, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x0d, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x2a, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x78, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x31, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x30, 0x01, 0x12, 0x7b, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x31, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x32,
	0xfc, 0x05, 0x0a, 0x0d, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x4b, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x12, 0x1f, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56,
	0x0a, 0x07, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x59, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x12, 0x25, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30,
	0x01, 0x12, 0x5c, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x25,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12,
	0x50, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x25, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x58, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x12, 0x25, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x6e, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x2c, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x71, 0x0a, 0x10, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12,
	0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0xe4,
	0x0a, 0x0a, 0x13, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65,
	0x12, 0x25, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x62, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x29, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x30, 0x01, 0x12, 0x65, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x2b, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x68, 0x0a, 0x09, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x30, 0x01, 0x12, 0x56, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12,
	0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x0d,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x2b, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x5a, 0x0a, 0x03,
	0x53, 0x65, 0x74, 0x12, 0x28, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x53,
	0x6f, 0x6d, 0x65, 0x12, 0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x30, 0x01, 0x12, 0x63, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2b, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x2f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x6e, 0x0a, 0x09, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x2e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x7a, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x32, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x33, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x7d, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x32, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0xe5, 0x06, 0x0a, 0x14, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x59,
	0x0a, 0x06, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x12, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x07, 0x47, 0x65, 0x74,
	0x53, 0x6f, 0x6d, 0x65, 0x12, 0x2a, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12,
	0x67, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x6a, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x30, 0x01, 0x12, 0x57, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12,
	0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a,
	0x0d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x2c,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x7c,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12,
	0x33, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x7f, 0x0a, 0x10,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x12, 0x33, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x42, 0x46, 0x5a,
	0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x3b, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_arista_studio_v1_services_gen_proto_rawDescOnce sync.Once
	file_arista_studio_v1_services_gen_proto_rawDescData = file_arista_studio_v1_services_gen_proto_rawDesc
)

func file_arista_studio_v1_services_gen_proto_rawDescGZIP() []byte {
	file_arista_studio_v1_services_gen_proto_rawDescOnce.Do(func() {
		file_arista_studio_v1_services_gen_proto_rawDescData = protoimpl.X.CompressGZIP(file_arista_studio_v1_services_gen_proto_rawDescData)
	})
	return file_arista_studio_v1_services_gen_proto_rawDescData
}

var file_arista_studio_v1_services_gen_proto_msgTypes = make([]protoimpl.MessageInfo, 121)
var file_arista_studio_v1_services_gen_proto_goTypes = []interface{}{
	(*MetaResponse)(nil),                              // 0: arista.studio.v1.MetaResponse
	(*AssignedTagsRequest)(nil),                       // 1: arista.studio.v1.AssignedTagsRequest
	(*AssignedTagsResponse)(nil),                      // 2: arista.studio.v1.AssignedTagsResponse
	(*AssignedTagsSomeRequest)(nil),                   // 3: arista.studio.v1.AssignedTagsSomeRequest
	(*AssignedTagsSomeResponse)(nil),                  // 4: arista.studio.v1.AssignedTagsSomeResponse
	(*AssignedTagsStreamRequest)(nil),                 // 5: arista.studio.v1.AssignedTagsStreamRequest
	(*AssignedTagsStreamResponse)(nil),                // 6: arista.studio.v1.AssignedTagsStreamResponse
	(*AssignedTagsBatchedStreamRequest)(nil),          // 7: arista.studio.v1.AssignedTagsBatchedStreamRequest
	(*AssignedTagsBatchedStreamResponse)(nil),         // 8: arista.studio.v1.AssignedTagsBatchedStreamResponse
	(*AssignedTagsConfigRequest)(nil),                 // 9: arista.studio.v1.AssignedTagsConfigRequest
	(*AssignedTagsConfigResponse)(nil),                // 10: arista.studio.v1.AssignedTagsConfigResponse
	(*AssignedTagsConfigSomeRequest)(nil),             // 11: arista.studio.v1.AssignedTagsConfigSomeRequest
	(*AssignedTagsConfigSomeResponse)(nil),            // 12: arista.studio.v1.AssignedTagsConfigSomeResponse
	(*AssignedTagsConfigStreamRequest)(nil),           // 13: arista.studio.v1.AssignedTagsConfigStreamRequest
	(*AssignedTagsConfigStreamResponse)(nil),          // 14: arista.studio.v1.AssignedTagsConfigStreamResponse
	(*AssignedTagsConfigBatchedStreamRequest)(nil),    // 15: arista.studio.v1.AssignedTagsConfigBatchedStreamRequest
	(*AssignedTagsConfigBatchedStreamResponse)(nil),   // 16: arista.studio.v1.AssignedTagsConfigBatchedStreamResponse
	(*AssignedTagsConfigSetRequest)(nil),              // 17: arista.studio.v1.AssignedTagsConfigSetRequest
	(*AssignedTagsConfigSetResponse)(nil),             // 18: arista.studio.v1.AssignedTagsConfigSetResponse
	(*AssignedTagsConfigSetSomeRequest)(nil),          // 19: arista.studio.v1.AssignedTagsConfigSetSomeRequest
	(*AssignedTagsConfigSetSomeResponse)(nil),         // 20: arista.studio.v1.AssignedTagsConfigSetSomeResponse
	(*AssignedTagsConfigDeleteRequest)(nil),           // 21: arista.studio.v1.AssignedTagsConfigDeleteRequest
	(*AssignedTagsConfigDeleteResponse)(nil),          // 22: arista.studio.v1.AssignedTagsConfigDeleteResponse
	(*AssignedTagsConfigDeleteSomeRequest)(nil),       // 23: arista.studio.v1.AssignedTagsConfigDeleteSomeRequest
	(*AssignedTagsConfigDeleteSomeResponse)(nil),      // 24: arista.studio.v1.AssignedTagsConfigDeleteSomeResponse
	(*AssignedTagsConfigDeleteAllRequest)(nil),        // 25: arista.studio.v1.AssignedTagsConfigDeleteAllRequest
	(*AssignedTagsConfigDeleteAllResponse)(nil),       // 26: arista.studio.v1.AssignedTagsConfigDeleteAllResponse
	(*AutofillActionRequest)(nil),                     // 27: arista.studio.v1.AutofillActionRequest
	(*AutofillActionResponse)(nil),                    // 28: arista.studio.v1.AutofillActionResponse
	(*AutofillActionSomeRequest)(nil),                 // 29: arista.studio.v1.AutofillActionSomeRequest
	(*AutofillActionSomeResponse)(nil),                // 30: arista.studio.v1.AutofillActionSomeResponse
	(*AutofillActionStreamRequest)(nil),               // 31: arista.studio.v1.AutofillActionStreamRequest
	(*AutofillActionStreamResponse)(nil),              // 32: arista.studio.v1.AutofillActionStreamResponse
	(*AutofillActionBatchedStreamRequest)(nil),        // 33: arista.studio.v1.AutofillActionBatchedStreamRequest
	(*AutofillActionBatchedStreamResponse)(nil),       // 34: arista.studio.v1.AutofillActionBatchedStreamResponse
	(*AutofillActionConfigRequest)(nil),               // 35: arista.studio.v1.AutofillActionConfigRequest
	(*AutofillActionConfigResponse)(nil),              // 36: arista.studio.v1.AutofillActionConfigResponse
	(*AutofillActionConfigSomeRequest)(nil),           // 37: arista.studio.v1.AutofillActionConfigSomeRequest
	(*AutofillActionConfigSomeResponse)(nil),          // 38: arista.studio.v1.AutofillActionConfigSomeResponse
	(*AutofillActionConfigStreamRequest)(nil),         // 39: arista.studio.v1.AutofillActionConfigStreamRequest
	(*AutofillActionConfigStreamResponse)(nil),        // 40: arista.studio.v1.AutofillActionConfigStreamResponse
	(*AutofillActionConfigBatchedStreamRequest)(nil),  // 41: arista.studio.v1.AutofillActionConfigBatchedStreamRequest
	(*AutofillActionConfigBatchedStreamResponse)(nil), // 42: arista.studio.v1.AutofillActionConfigBatchedStreamResponse
	(*AutofillActionConfigSetRequest)(nil),            // 43: arista.studio.v1.AutofillActionConfigSetRequest
	(*AutofillActionConfigSetResponse)(nil),           // 44: arista.studio.v1.AutofillActionConfigSetResponse
	(*AutofillActionConfigSetSomeRequest)(nil),        // 45: arista.studio.v1.AutofillActionConfigSetSomeRequest
	(*AutofillActionConfigSetSomeResponse)(nil),       // 46: arista.studio.v1.AutofillActionConfigSetSomeResponse
	(*AutofillActionConfigDeleteRequest)(nil),         // 47: arista.studio.v1.AutofillActionConfigDeleteRequest
	(*AutofillActionConfigDeleteResponse)(nil),        // 48: arista.studio.v1.AutofillActionConfigDeleteResponse
	(*AutofillActionConfigDeleteSomeRequest)(nil),     // 49: arista.studio.v1.AutofillActionConfigDeleteSomeRequest
	(*AutofillActionConfigDeleteSomeResponse)(nil),    // 50: arista.studio.v1.AutofillActionConfigDeleteSomeResponse
	(*AutofillActionConfigDeleteAllRequest)(nil),      // 51: arista.studio.v1.AutofillActionConfigDeleteAllRequest
	(*AutofillActionConfigDeleteAllResponse)(nil),     // 52: arista.studio.v1.AutofillActionConfigDeleteAllResponse
	(*InputsRequest)(nil),                             // 53: arista.studio.v1.InputsRequest
	(*InputsResponse)(nil),                            // 54: arista.studio.v1.InputsResponse
	(*InputsSomeRequest)(nil),                         // 55: arista.studio.v1.InputsSomeRequest
	(*InputsSomeResponse)(nil),                        // 56: arista.studio.v1.InputsSomeResponse
	(*InputsStreamRequest)(nil),                       // 57: arista.studio.v1.InputsStreamRequest
	(*InputsStreamResponse)(nil),                      // 58: arista.studio.v1.InputsStreamResponse
	(*InputsBatchedStreamRequest)(nil),                // 59: arista.studio.v1.InputsBatchedStreamRequest
	(*InputsBatchedStreamResponse)(nil),               // 60: arista.studio.v1.InputsBatchedStreamResponse
	(*InputsConfigRequest)(nil),                       // 61: arista.studio.v1.InputsConfigRequest
	(*InputsConfigResponse)(nil),                      // 62: arista.studio.v1.InputsConfigResponse
	(*InputsConfigSomeRequest)(nil),                   // 63: arista.studio.v1.InputsConfigSomeRequest
	(*InputsConfigSomeResponse)(nil),                  // 64: arista.studio.v1.InputsConfigSomeResponse
	(*InputsConfigStreamRequest)(nil),                 // 65: arista.studio.v1.InputsConfigStreamRequest
	(*InputsConfigStreamResponse)(nil),                // 66: arista.studio.v1.InputsConfigStreamResponse
	(*InputsConfigBatchedStreamRequest)(nil),          // 67: arista.studio.v1.InputsConfigBatchedStreamRequest
	(*InputsConfigBatchedStreamResponse)(nil),         // 68: arista.studio.v1.InputsConfigBatchedStreamResponse
	(*InputsConfigSetRequest)(nil),                    // 69: arista.studio.v1.InputsConfigSetRequest
	(*InputsConfigSetResponse)(nil),                   // 70: arista.studio.v1.InputsConfigSetResponse
	(*InputsConfigSetSomeRequest)(nil),                // 71: arista.studio.v1.InputsConfigSetSomeRequest
	(*InputsConfigSetSomeResponse)(nil),               // 72: arista.studio.v1.InputsConfigSetSomeResponse
	(*InputsConfigDeleteRequest)(nil),                 // 73: arista.studio.v1.InputsConfigDeleteRequest
	(*InputsConfigDeleteResponse)(nil),                // 74: arista.studio.v1.InputsConfigDeleteResponse
	(*InputsConfigDeleteSomeRequest)(nil),             // 75: arista.studio.v1.InputsConfigDeleteSomeRequest
	(*InputsConfigDeleteSomeResponse)(nil),            // 76: arista.studio.v1.InputsConfigDeleteSomeResponse
	(*InputsConfigDeleteAllRequest)(nil),              // 77: arista.studio.v1.InputsConfigDeleteAllRequest
	(*InputsConfigDeleteAllResponse)(nil),             // 78: arista.studio.v1.InputsConfigDeleteAllResponse
	(*SecretInputRequest)(nil),                        // 79: arista.studio.v1.SecretInputRequest
	(*SecretInputResponse)(nil),                       // 80: arista.studio.v1.SecretInputResponse
	(*SecretInputSomeRequest)(nil),                    // 81: arista.studio.v1.SecretInputSomeRequest
	(*SecretInputSomeResponse)(nil),                   // 82: arista.studio.v1.SecretInputSomeResponse
	(*SecretInputStreamRequest)(nil),                  // 83: arista.studio.v1.SecretInputStreamRequest
	(*SecretInputStreamResponse)(nil),                 // 84: arista.studio.v1.SecretInputStreamResponse
	(*SecretInputBatchedStreamRequest)(nil),           // 85: arista.studio.v1.SecretInputBatchedStreamRequest
	(*SecretInputBatchedStreamResponse)(nil),          // 86: arista.studio.v1.SecretInputBatchedStreamResponse
	(*StudioRequest)(nil),                             // 87: arista.studio.v1.StudioRequest
	(*StudioResponse)(nil),                            // 88: arista.studio.v1.StudioResponse
	(*StudioSomeRequest)(nil),                         // 89: arista.studio.v1.StudioSomeRequest
	(*StudioSomeResponse)(nil),                        // 90: arista.studio.v1.StudioSomeResponse
	(*StudioStreamRequest)(nil),                       // 91: arista.studio.v1.StudioStreamRequest
	(*StudioStreamResponse)(nil),                      // 92: arista.studio.v1.StudioStreamResponse
	(*StudioBatchedStreamRequest)(nil),                // 93: arista.studio.v1.StudioBatchedStreamRequest
	(*StudioBatchedStreamResponse)(nil),               // 94: arista.studio.v1.StudioBatchedStreamResponse
	(*StudioConfigRequest)(nil),                       // 95: arista.studio.v1.StudioConfigRequest
	(*StudioConfigResponse)(nil),                      // 96: arista.studio.v1.StudioConfigResponse
	(*StudioConfigSomeRequest)(nil),                   // 97: arista.studio.v1.StudioConfigSomeRequest
	(*StudioConfigSomeResponse)(nil),                  // 98: arista.studio.v1.StudioConfigSomeResponse
	(*StudioConfigStreamRequest)(nil),                 // 99: arista.studio.v1.StudioConfigStreamRequest
	(*StudioConfigStreamResponse)(nil),                // 100: arista.studio.v1.StudioConfigStreamResponse
	(*StudioConfigBatchedStreamRequest)(nil),          // 101: arista.studio.v1.StudioConfigBatchedStreamRequest
	(*StudioConfigBatchedStreamResponse)(nil),         // 102: arista.studio.v1.StudioConfigBatchedStreamResponse
	(*StudioConfigSetRequest)(nil),                    // 103: arista.studio.v1.StudioConfigSetRequest
	(*StudioConfigSetResponse)(nil),                   // 104: arista.studio.v1.StudioConfigSetResponse
	(*StudioConfigSetSomeRequest)(nil),                // 105: arista.studio.v1.StudioConfigSetSomeRequest
	(*StudioConfigSetSomeResponse)(nil),               // 106: arista.studio.v1.StudioConfigSetSomeResponse
	(*StudioConfigDeleteRequest)(nil),                 // 107: arista.studio.v1.StudioConfigDeleteRequest
	(*StudioConfigDeleteResponse)(nil),                // 108: arista.studio.v1.StudioConfigDeleteResponse
	(*StudioConfigDeleteSomeRequest)(nil),             // 109: arista.studio.v1.StudioConfigDeleteSomeRequest
	(*StudioConfigDeleteSomeResponse)(nil),            // 110: arista.studio.v1.StudioConfigDeleteSomeResponse
	(*StudioConfigDeleteAllRequest)(nil),              // 111: arista.studio.v1.StudioConfigDeleteAllRequest
	(*StudioConfigDeleteAllResponse)(nil),             // 112: arista.studio.v1.StudioConfigDeleteAllResponse
	(*StudioSummaryRequest)(nil),                      // 113: arista.studio.v1.StudioSummaryRequest
	(*StudioSummaryResponse)(nil),                     // 114: arista.studio.v1.StudioSummaryResponse
	(*StudioSummarySomeRequest)(nil),                  // 115: arista.studio.v1.StudioSummarySomeRequest
	(*StudioSummarySomeResponse)(nil),                 // 116: arista.studio.v1.StudioSummarySomeResponse
	(*StudioSummaryStreamRequest)(nil),                // 117: arista.studio.v1.StudioSummaryStreamRequest
	(*StudioSummaryStreamResponse)(nil),               // 118: arista.studio.v1.StudioSummaryStreamResponse
	(*StudioSummaryBatchedStreamRequest)(nil),         // 119: arista.studio.v1.StudioSummaryBatchedStreamRequest
	(*StudioSummaryBatchedStreamResponse)(nil),        // 120: arista.studio.v1.StudioSummaryBatchedStreamResponse
	(*timestamppb.Timestamp)(nil),                     // 121: google.protobuf.Timestamp
	(subscriptions.Operation)(0),                      // 122: arista.subscriptions.Operation
	(*wrapperspb.UInt32Value)(nil),                    // 123: google.protobuf.UInt32Value
	(*StudioKey)(nil),                                 // 124: arista.studio.v1.StudioKey
	(*AssignedTags)(nil),                              // 125: arista.studio.v1.AssignedTags
	(*wrapperspb.StringValue)(nil),                    // 126: google.protobuf.StringValue
	(*time.TimeBounds)(nil),                           // 127: arista.time.TimeBounds
	(*AssignedTagsConfig)(nil),                        // 128: arista.studio.v1.AssignedTagsConfig
	(fmp.DeleteError)(0),                              // 129: fmp.DeleteError
	(*AutofillActionKey)(nil),                         // 130: arista.studio.v1.AutofillActionKey
	(*AutofillAction)(nil),                            // 131: arista.studio.v1.AutofillAction
	(*AutofillActionConfig)(nil),                      // 132: arista.studio.v1.AutofillActionConfig
	(*InputsKey)(nil),                                 // 133: arista.studio.v1.InputsKey
	(*Inputs)(nil),                                    // 134: arista.studio.v1.Inputs
	(*InputsConfig)(nil),                              // 135: arista.studio.v1.InputsConfig
	(*SecretInput)(nil),                               // 136: arista.studio.v1.SecretInput
	(*Studio)(nil),                                    // 137: arista.studio.v1.Studio
	(*StudioConfig)(nil),                              // 138: arista.studio.v1.StudioConfig
	(*StudioSummary)(nil),                             // 139: arista.studio.v1.StudioSummary
}
var file_arista_studio_v1_services_gen_proto_depIdxs = []int32{
	121, // 0: arista.studio.v1.MetaResponse.time:type_name -> google.protobuf.Timestamp
	122, // 1: arista.studio.v1.MetaResponse.type:type_name -> arista.subscriptions.Operation
	123, // 2: arista.studio.v1.MetaResponse.count:type_name -> google.protobuf.UInt32Value
	124, // 3: arista.studio.v1.AssignedTagsRequest.key:type_name -> arista.studio.v1.StudioKey
	121, // 4: arista.studio.v1.AssignedTagsRequest.time:type_name -> google.protobuf.Timestamp
	125, // 5: arista.studio.v1.AssignedTagsResponse.value:type_name -> arista.studio.v1.AssignedTags
	121, // 6: arista.studio.v1.AssignedTagsResponse.time:type_name -> google.protobuf.Timestamp
	124, // 7: arista.studio.v1.AssignedTagsSomeRequest.keys:type_name -> arista.studio.v1.StudioKey
	121, // 8: arista.studio.v1.AssignedTagsSomeRequest.time:type_name -> google.protobuf.Timestamp
	125, // 9: arista.studio.v1.AssignedTagsSomeResponse.value:type_name -> arista.studio.v1.AssignedTags
	126, // 10: arista.studio.v1.AssignedTagsSomeResponse.error:type_name -> google.protobuf.StringValue
	121, // 11: arista.studio.v1.AssignedTagsSomeResponse.time:type_name -> google.protobuf.Timestamp
	125, // 12: arista.studio.v1.AssignedTagsStreamRequest.partial_eq_filter:type_name -> arista.studio.v1.AssignedTags
	127, // 13: arista.studio.v1.AssignedTagsStreamRequest.time:type_name -> arista.time.TimeBounds
	125, // 14: arista.studio.v1.AssignedTagsStreamResponse.value:type_name -> arista.studio.v1.AssignedTags
	121, // 15: arista.studio.v1.AssignedTagsStreamResponse.time:type_name -> google.protobuf.Timestamp
	122, // 16: arista.studio.v1.AssignedTagsStreamResponse.type:type_name -> arista.subscriptions.Operation
	125, // 17: arista.studio.v1.AssignedTagsBatchedStreamRequest.partial_eq_filter:type_name -> arista.studio.v1.AssignedTags
	127, // 18: arista.studio.v1.AssignedTagsBatchedStreamRequest.time:type_name -> arista.time.TimeBounds
	123, // 19: arista.studio.v1.AssignedTagsBatchedStreamRequest.max_messages:type_name -> google.protobuf.UInt32Value
	6,   // 20: arista.studio.v1.AssignedTagsBatchedStreamResponse.responses:type_name -> arista.studio.v1.AssignedTagsStreamResponse
	124, // 21: arista.studio.v1.AssignedTagsConfigRequest.key:type_name -> arista.studio.v1.StudioKey
	121, // 22: arista.studio.v1.AssignedTagsConfigRequest.time:type_name -> google.protobuf.Timestamp
	128, // 23: arista.studio.v1.AssignedTagsConfigResponse.value:type_name -> arista.studio.v1.AssignedTagsConfig
	121, // 24: arista.studio.v1.AssignedTagsConfigResponse.time:type_name -> google.protobuf.Timestamp
	124, // 25: arista.studio.v1.AssignedTagsConfigSomeRequest.keys:type_name -> arista.studio.v1.StudioKey
	121, // 26: arista.studio.v1.AssignedTagsConfigSomeRequest.time:type_name -> google.protobuf.Timestamp
	128, // 27: arista.studio.v1.AssignedTagsConfigSomeResponse.value:type_name -> arista.studio.v1.AssignedTagsConfig
	126, // 28: arista.studio.v1.AssignedTagsConfigSomeResponse.error:type_name -> google.protobuf.StringValue
	121, // 29: arista.studio.v1.AssignedTagsConfigSomeResponse.time:type_name -> google.protobuf.Timestamp
	128, // 30: arista.studio.v1.AssignedTagsConfigStreamRequest.partial_eq_filter:type_name -> arista.studio.v1.AssignedTagsConfig
	127, // 31: arista.studio.v1.AssignedTagsConfigStreamRequest.time:type_name -> arista.time.TimeBounds
	128, // 32: arista.studio.v1.AssignedTagsConfigStreamResponse.value:type_name -> arista.studio.v1.AssignedTagsConfig
	121, // 33: arista.studio.v1.AssignedTagsConfigStreamResponse.time:type_name -> google.protobuf.Timestamp
	122, // 34: arista.studio.v1.AssignedTagsConfigStreamResponse.type:type_name -> arista.subscriptions.Operation
	128, // 35: arista.studio.v1.AssignedTagsConfigBatchedStreamRequest.partial_eq_filter:type_name -> arista.studio.v1.AssignedTagsConfig
	127, // 36: arista.studio.v1.AssignedTagsConfigBatchedStreamRequest.time:type_name -> arista.time.TimeBounds
	123, // 37: arista.studio.v1.AssignedTagsConfigBatchedStreamRequest.max_messages:type_name -> google.protobuf.UInt32Value
	14,  // 38: arista.studio.v1.AssignedTagsConfigBatchedStreamResponse.responses:type_name -> arista.studio.v1.AssignedTagsConfigStreamResponse
	128, // 39: arista.studio.v1.AssignedTagsConfigSetRequest.value:type_name -> arista.studio.v1.AssignedTagsConfig
	128, // 40: arista.studio.v1.AssignedTagsConfigSetResponse.value:type_name -> arista.studio.v1.AssignedTagsConfig
	121, // 41: arista.studio.v1.AssignedTagsConfigSetResponse.time:type_name -> google.protobuf.Timestamp
	128, // 42: arista.studio.v1.AssignedTagsConfigSetSomeRequest.values:type_name -> arista.studio.v1.AssignedTagsConfig
	124, // 43: arista.studio.v1.AssignedTagsConfigSetSomeResponse.key:type_name -> arista.studio.v1.StudioKey
	124, // 44: arista.studio.v1.AssignedTagsConfigDeleteRequest.key:type_name -> arista.studio.v1.StudioKey
	124, // 45: arista.studio.v1.AssignedTagsConfigDeleteResponse.key:type_name -> arista.studio.v1.StudioKey
	121, // 46: arista.studio.v1.AssignedTagsConfigDeleteResponse.time:type_name -> google.protobuf.Timestamp
	124, // 47: arista.studio.v1.AssignedTagsConfigDeleteSomeRequest.keys:type_name -> arista.studio.v1.StudioKey
	124, // 48: arista.studio.v1.AssignedTagsConfigDeleteSomeResponse.key:type_name -> arista.studio.v1.StudioKey
	128, // 49: arista.studio.v1.AssignedTagsConfigDeleteAllRequest.partial_eq_filter:type_name -> arista.studio.v1.AssignedTagsConfig
	129, // 50: arista.studio.v1.AssignedTagsConfigDeleteAllResponse.type:type_name -> fmp.DeleteError
	126, // 51: arista.studio.v1.AssignedTagsConfigDeleteAllResponse.error:type_name -> google.protobuf.StringValue
	124, // 52: arista.studio.v1.AssignedTagsConfigDeleteAllResponse.key:type_name -> arista.studio.v1.StudioKey
	121, // 53: arista.studio.v1.AssignedTagsConfigDeleteAllResponse.time:type_name -> google.protobuf.Timestamp
	130, // 54: arista.studio.v1.AutofillActionRequest.key:type_name -> arista.studio.v1.AutofillActionKey
	121, // 55: arista.studio.v1.AutofillActionRequest.time:type_name -> google.protobuf.Timestamp
	131, // 56: arista.studio.v1.AutofillActionResponse.value:type_name -> arista.studio.v1.AutofillAction
	121, // 57: arista.studio.v1.AutofillActionResponse.time:type_name -> google.protobuf.Timestamp
	130, // 58: arista.studio.v1.AutofillActionSomeRequest.keys:type_name -> arista.studio.v1.AutofillActionKey
	121, // 59: arista.studio.v1.AutofillActionSomeRequest.time:type_name -> google.protobuf.Timestamp
	131, // 60: arista.studio.v1.AutofillActionSomeResponse.value:type_name -> arista.studio.v1.AutofillAction
	126, // 61: arista.studio.v1.AutofillActionSomeResponse.error:type_name -> google.protobuf.StringValue
	121, // 62: arista.studio.v1.AutofillActionSomeResponse.time:type_name -> google.protobuf.Timestamp
	131, // 63: arista.studio.v1.AutofillActionStreamRequest.partial_eq_filter:type_name -> arista.studio.v1.AutofillAction
	127, // 64: arista.studio.v1.AutofillActionStreamRequest.time:type_name -> arista.time.TimeBounds
	131, // 65: arista.studio.v1.AutofillActionStreamResponse.value:type_name -> arista.studio.v1.AutofillAction
	121, // 66: arista.studio.v1.AutofillActionStreamResponse.time:type_name -> google.protobuf.Timestamp
	122, // 67: arista.studio.v1.AutofillActionStreamResponse.type:type_name -> arista.subscriptions.Operation
	131, // 68: arista.studio.v1.AutofillActionBatchedStreamRequest.partial_eq_filter:type_name -> arista.studio.v1.AutofillAction
	127, // 69: arista.studio.v1.AutofillActionBatchedStreamRequest.time:type_name -> arista.time.TimeBounds
	123, // 70: arista.studio.v1.AutofillActionBatchedStreamRequest.max_messages:type_name -> google.protobuf.UInt32Value
	32,  // 71: arista.studio.v1.AutofillActionBatchedStreamResponse.responses:type_name -> arista.studio.v1.AutofillActionStreamResponse
	130, // 72: arista.studio.v1.AutofillActionConfigRequest.key:type_name -> arista.studio.v1.AutofillActionKey
	121, // 73: arista.studio.v1.AutofillActionConfigRequest.time:type_name -> google.protobuf.Timestamp
	132, // 74: arista.studio.v1.AutofillActionConfigResponse.value:type_name -> arista.studio.v1.AutofillActionConfig
	121, // 75: arista.studio.v1.AutofillActionConfigResponse.time:type_name -> google.protobuf.Timestamp
	130, // 76: arista.studio.v1.AutofillActionConfigSomeRequest.keys:type_name -> arista.studio.v1.AutofillActionKey
	121, // 77: arista.studio.v1.AutofillActionConfigSomeRequest.time:type_name -> google.protobuf.Timestamp
	132, // 78: arista.studio.v1.AutofillActionConfigSomeResponse.value:type_name -> arista.studio.v1.AutofillActionConfig
	126, // 79: arista.studio.v1.AutofillActionConfigSomeResponse.error:type_name -> google.protobuf.StringValue
	121, // 80: arista.studio.v1.AutofillActionConfigSomeResponse.time:type_name -> google.protobuf.Timestamp
	132, // 81: arista.studio.v1.AutofillActionConfigStreamRequest.partial_eq_filter:type_name -> arista.studio.v1.AutofillActionConfig
	127, // 82: arista.studio.v1.AutofillActionConfigStreamRequest.time:type_name -> arista.time.TimeBounds
	132, // 83: arista.studio.v1.AutofillActionConfigStreamResponse.value:type_name -> arista.studio.v1.AutofillActionConfig
	121, // 84: arista.studio.v1.AutofillActionConfigStreamResponse.time:type_name -> google.protobuf.Timestamp
	122, // 85: arista.studio.v1.AutofillActionConfigStreamResponse.type:type_name -> arista.subscriptions.Operation
	132, // 86: arista.studio.v1.AutofillActionConfigBatchedStreamRequest.partial_eq_filter:type_name -> arista.studio.v1.AutofillActionConfig
	127, // 87: arista.studio.v1.AutofillActionConfigBatchedStreamRequest.time:type_name -> arista.time.TimeBounds
	123, // 88: arista.studio.v1.AutofillActionConfigBatchedStreamRequest.max_messages:type_name -> google.protobuf.UInt32Value
	40,  // 89: arista.studio.v1.AutofillActionConfigBatchedStreamResponse.responses:type_name -> arista.studio.v1.AutofillActionConfigStreamResponse
	132, // 90: arista.studio.v1.AutofillActionConfigSetRequest.value:type_name -> arista.studio.v1.AutofillActionConfig
	132, // 91: arista.studio.v1.AutofillActionConfigSetResponse.value:type_name -> arista.studio.v1.AutofillActionConfig
	121, // 92: arista.studio.v1.AutofillActionConfigSetResponse.time:type_name -> google.protobuf.Timestamp
	132, // 93: arista.studio.v1.AutofillActionConfigSetSomeRequest.values:type_name -> arista.studio.v1.AutofillActionConfig
	130, // 94: arista.studio.v1.AutofillActionConfigSetSomeResponse.key:type_name -> arista.studio.v1.AutofillActionKey
	130, // 95: arista.studio.v1.AutofillActionConfigDeleteRequest.key:type_name -> arista.studio.v1.AutofillActionKey
	130, // 96: arista.studio.v1.AutofillActionConfigDeleteResponse.key:type_name -> arista.studio.v1.AutofillActionKey
	121, // 97: arista.studio.v1.AutofillActionConfigDeleteResponse.time:type_name -> google.protobuf.Timestamp
	130, // 98: arista.studio.v1.AutofillActionConfigDeleteSomeRequest.keys:type_name -> arista.studio.v1.AutofillActionKey
	130, // 99: arista.studio.v1.AutofillActionConfigDeleteSomeResponse.key:type_name -> arista.studio.v1.AutofillActionKey
	132, // 100: arista.studio.v1.AutofillActionConfigDeleteAllRequest.partial_eq_filter:type_name -> arista.studio.v1.AutofillActionConfig
	129, // 101: arista.studio.v1.AutofillActionConfigDeleteAllResponse.type:type_name -> fmp.DeleteError
	126, // 102: arista.studio.v1.AutofillActionConfigDeleteAllResponse.error:type_name -> google.protobuf.StringValue
	130, // 103: arista.studio.v1.AutofillActionConfigDeleteAllResponse.key:type_name -> arista.studio.v1.AutofillActionKey
	121, // 104: arista.studio.v1.AutofillActionConfigDeleteAllResponse.time:type_name -> google.protobuf.Timestamp
	133, // 105: arista.studio.v1.InputsRequest.key:type_name -> arista.studio.v1.InputsKey
	121, // 106: arista.studio.v1.InputsRequest.time:type_name -> google.protobuf.Timestamp
	134, // 107: arista.studio.v1.InputsResponse.value:type_name -> arista.studio.v1.Inputs
	121, // 108: arista.studio.v1.InputsResponse.time:type_name -> google.protobuf.Timestamp
	133, // 109: arista.studio.v1.InputsSomeRequest.keys:type_name -> arista.studio.v1.InputsKey
	121, // 110: arista.studio.v1.InputsSomeRequest.time:type_name -> google.protobuf.Timestamp
	134, // 111: arista.studio.v1.InputsSomeResponse.value:type_name -> arista.studio.v1.Inputs
	126, // 112: arista.studio.v1.InputsSomeResponse.error:type_name -> google.protobuf.StringValue
	121, // 113: arista.studio.v1.InputsSomeResponse.time:type_name -> google.protobuf.Timestamp
	134, // 114: arista.studio.v1.InputsStreamRequest.partial_eq_filter:type_name -> arista.studio.v1.Inputs
	127, // 115: arista.studio.v1.InputsStreamRequest.time:type_name -> arista.time.TimeBounds
	134, // 116: arista.studio.v1.InputsStreamResponse.value:type_name -> arista.studio.v1.Inputs
	121, // 117: arista.studio.v1.InputsStreamResponse.time:type_name -> google.protobuf.Timestamp
	122, // 118: arista.studio.v1.InputsStreamResponse.type:type_name -> arista.subscriptions.Operation
	134, // 119: arista.studio.v1.InputsBatchedStreamRequest.partial_eq_filter:type_name -> arista.studio.v1.Inputs
	127, // 120: arista.studio.v1.InputsBatchedStreamRequest.time:type_name -> arista.time.TimeBounds
	123, // 121: arista.studio.v1.InputsBatchedStreamRequest.max_messages:type_name -> google.protobuf.UInt32Value
	58,  // 122: arista.studio.v1.InputsBatchedStreamResponse.responses:type_name -> arista.studio.v1.InputsStreamResponse
	133, // 123: arista.studio.v1.InputsConfigRequest.key:type_name -> arista.studio.v1.InputsKey
	121, // 124: arista.studio.v1.InputsConfigRequest.time:type_name -> google.protobuf.Timestamp
	135, // 125: arista.studio.v1.InputsConfigResponse.value:type_name -> arista.studio.v1.InputsConfig
	121, // 126: arista.studio.v1.InputsConfigResponse.time:type_name -> google.protobuf.Timestamp
	133, // 127: arista.studio.v1.InputsConfigSomeRequest.keys:type_name -> arista.studio.v1.InputsKey
	121, // 128: arista.studio.v1.InputsConfigSomeRequest.time:type_name -> google.protobuf.Timestamp
	135, // 129: arista.studio.v1.InputsConfigSomeResponse.value:type_name -> arista.studio.v1.InputsConfig
	126, // 130: arista.studio.v1.InputsConfigSomeResponse.error:type_name -> google.protobuf.StringValue
	121, // 131: arista.studio.v1.InputsConfigSomeResponse.time:type_name -> google.protobuf.Timestamp
	135, // 132: arista.studio.v1.InputsConfigStreamRequest.partial_eq_filter:type_name -> arista.studio.v1.InputsConfig
	127, // 133: arista.studio.v1.InputsConfigStreamRequest.time:type_name -> arista.time.TimeBounds
	135, // 134: arista.studio.v1.InputsConfigStreamResponse.value:type_name -> arista.studio.v1.InputsConfig
	121, // 135: arista.studio.v1.InputsConfigStreamResponse.time:type_name -> google.protobuf.Timestamp
	122, // 136: arista.studio.v1.InputsConfigStreamResponse.type:type_name -> arista.subscriptions.Operation
	135, // 137: arista.studio.v1.InputsConfigBatchedStreamRequest.partial_eq_filter:type_name -> arista.studio.v1.InputsConfig
	127, // 138: arista.studio.v1.InputsConfigBatchedStreamRequest.time:type_name -> arista.time.TimeBounds
	123, // 139: arista.studio.v1.InputsConfigBatchedStreamRequest.max_messages:type_name -> google.protobuf.UInt32Value
	66,  // 140: arista.studio.v1.InputsConfigBatchedStreamResponse.responses:type_name -> arista.studio.v1.InputsConfigStreamResponse
	135, // 141: arista.studio.v1.InputsConfigSetRequest.value:type_name -> arista.studio.v1.InputsConfig
	135, // 142: arista.studio.v1.InputsConfigSetResponse.value:type_name -> arista.studio.v1.InputsConfig
	121, // 143: arista.studio.v1.InputsConfigSetResponse.time:type_name -> google.protobuf.Timestamp
	135, // 144: arista.studio.v1.InputsConfigSetSomeRequest.values:type_name -> arista.studio.v1.InputsConfig
	133, // 145: arista.studio.v1.InputsConfigSetSomeResponse.key:type_name -> arista.studio.v1.InputsKey
	133, // 146: arista.studio.v1.InputsConfigDeleteRequest.key:type_name -> arista.studio.v1.InputsKey
	133, // 147: arista.studio.v1.InputsConfigDeleteResponse.key:type_name -> arista.studio.v1.InputsKey
	121, // 148: arista.studio.v1.InputsConfigDeleteResponse.time:type_name -> google.protobuf.Timestamp
	133, // 149: arista.studio.v1.InputsConfigDeleteSomeRequest.keys:type_name -> arista.studio.v1.InputsKey
	133, // 150: arista.studio.v1.InputsConfigDeleteSomeResponse.key:type_name -> arista.studio.v1.InputsKey
	135, // 151: arista.studio.v1.InputsConfigDeleteAllRequest.partial_eq_filter:type_name -> arista.studio.v1.InputsConfig
	129, // 152: arista.studio.v1.InputsConfigDeleteAllResponse.type:type_name -> fmp.DeleteError
	126, // 153: arista.studio.v1.InputsConfigDeleteAllResponse.error:type_name -> google.protobuf.StringValue
	133, // 154: arista.studio.v1.InputsConfigDeleteAllResponse.key:type_name -> arista.studio.v1.InputsKey
	121, // 155: arista.studio.v1.InputsConfigDeleteAllResponse.time:type_name -> google.protobuf.Timestamp
	133, // 156: arista.studio.v1.SecretInputRequest.key:type_name -> arista.studio.v1.InputsKey
	121, // 157: arista.studio.v1.SecretInputRequest.time:type_name -> google.protobuf.Timestamp
	136, // 158: arista.studio.v1.SecretInputResponse.value:type_name -> arista.studio.v1.SecretInput
	121, // 159: arista.studio.v1.SecretInputResponse.time:type_name -> google.protobuf.Timestamp
	133, // 160: arista.studio.v1.SecretInputSomeRequest.keys:type_name -> arista.studio.v1.InputsKey
	121, // 161: arista.studio.v1.SecretInputSomeRequest.time:type_name -> google.protobuf.Timestamp
	136, // 162: arista.studio.v1.SecretInputSomeResponse.value:type_name -> arista.studio.v1.SecretInput
	126, // 163: arista.studio.v1.SecretInputSomeResponse.error:type_name -> google.protobuf.StringValue
	121, // 164: arista.studio.v1.SecretInputSomeResponse.time:type_name -> google.protobuf.Timestamp
	136, // 165: arista.studio.v1.SecretInputStreamRequest.partial_eq_filter:type_name -> arista.studio.v1.SecretInput
	127, // 166: arista.studio.v1.SecretInputStreamRequest.time:type_name -> arista.time.TimeBounds
	136, // 167: arista.studio.v1.SecretInputStreamResponse.value:type_name -> arista.studio.v1.SecretInput
	121, // 168: arista.studio.v1.SecretInputStreamResponse.time:type_name -> google.protobuf.Timestamp
	122, // 169: arista.studio.v1.SecretInputStreamResponse.type:type_name -> arista.subscriptions.Operation
	136, // 170: arista.studio.v1.SecretInputBatchedStreamRequest.partial_eq_filter:type_name -> arista.studio.v1.SecretInput
	127, // 171: arista.studio.v1.SecretInputBatchedStreamRequest.time:type_name -> arista.time.TimeBounds
	123, // 172: arista.studio.v1.SecretInputBatchedStreamRequest.max_messages:type_name -> google.protobuf.UInt32Value
	84,  // 173: arista.studio.v1.SecretInputBatchedStreamResponse.responses:type_name -> arista.studio.v1.SecretInputStreamResponse
	124, // 174: arista.studio.v1.StudioRequest.key:type_name -> arista.studio.v1.StudioKey
	121, // 175: arista.studio.v1.StudioRequest.time:type_name -> google.protobuf.Timestamp
	137, // 176: arista.studio.v1.StudioResponse.value:type_name -> arista.studio.v1.Studio
	121, // 177: arista.studio.v1.StudioResponse.time:type_name -> google.protobuf.Timestamp
	124, // 178: arista.studio.v1.StudioSomeRequest.keys:type_name -> arista.studio.v1.StudioKey
	121, // 179: arista.studio.v1.StudioSomeRequest.time:type_name -> google.protobuf.Timestamp
	137, // 180: arista.studio.v1.StudioSomeResponse.value:type_name -> arista.studio.v1.Studio
	126, // 181: arista.studio.v1.StudioSomeResponse.error:type_name -> google.protobuf.StringValue
	121, // 182: arista.studio.v1.StudioSomeResponse.time:type_name -> google.protobuf.Timestamp
	137, // 183: arista.studio.v1.StudioStreamRequest.partial_eq_filter:type_name -> arista.studio.v1.Studio
	127, // 184: arista.studio.v1.StudioStreamRequest.time:type_name -> arista.time.TimeBounds
	137, // 185: arista.studio.v1.StudioStreamResponse.value:type_name -> arista.studio.v1.Studio
	121, // 186: arista.studio.v1.StudioStreamResponse.time:type_name -> google.protobuf.Timestamp
	122, // 187: arista.studio.v1.StudioStreamResponse.type:type_name -> arista.subscriptions.Operation
	137, // 188: arista.studio.v1.StudioBatchedStreamRequest.partial_eq_filter:type_name -> arista.studio.v1.Studio
	127, // 189: arista.studio.v1.StudioBatchedStreamRequest.time:type_name -> arista.time.TimeBounds
	123, // 190: arista.studio.v1.StudioBatchedStreamRequest.max_messages:type_name -> google.protobuf.UInt32Value
	92,  // 191: arista.studio.v1.StudioBatchedStreamResponse.responses:type_name -> arista.studio.v1.StudioStreamResponse
	124, // 192: arista.studio.v1.StudioConfigRequest.key:type_name -> arista.studio.v1.StudioKey
	121, // 193: arista.studio.v1.StudioConfigRequest.time:type_name -> google.protobuf.Timestamp
	138, // 194: arista.studio.v1.StudioConfigResponse.value:type_name -> arista.studio.v1.StudioConfig
	121, // 195: arista.studio.v1.StudioConfigResponse.time:type_name -> google.protobuf.Timestamp
	124, // 196: arista.studio.v1.StudioConfigSomeRequest.keys:type_name -> arista.studio.v1.StudioKey
	121, // 197: arista.studio.v1.StudioConfigSomeRequest.time:type_name -> google.protobuf.Timestamp
	138, // 198: arista.studio.v1.StudioConfigSomeResponse.value:type_name -> arista.studio.v1.StudioConfig
	126, // 199: arista.studio.v1.StudioConfigSomeResponse.error:type_name -> google.protobuf.StringValue
	121, // 200: arista.studio.v1.StudioConfigSomeResponse.time:type_name -> google.protobuf.Timestamp
	138, // 201: arista.studio.v1.StudioConfigStreamRequest.partial_eq_filter:type_name -> arista.studio.v1.StudioConfig
	127, // 202: arista.studio.v1.StudioConfigStreamRequest.time:type_name -> arista.time.TimeBounds
	138, // 203: arista.studio.v1.StudioConfigStreamResponse.value:type_name -> arista.studio.v1.StudioConfig
	121, // 204: arista.studio.v1.StudioConfigStreamResponse.time:type_name -> google.protobuf.Timestamp
	122, // 205: arista.studio.v1.StudioConfigStreamResponse.type:type_name -> arista.subscriptions.Operation
	138, // 206: arista.studio.v1.StudioConfigBatchedStreamRequest.partial_eq_filter:type_name -> arista.studio.v1.StudioConfig
	127, // 207: arista.studio.v1.StudioConfigBatchedStreamRequest.time:type_name -> arista.time.TimeBounds
	123, // 208: arista.studio.v1.StudioConfigBatchedStreamRequest.max_messages:type_name -> google.protobuf.UInt32Value
	100, // 209: arista.studio.v1.StudioConfigBatchedStreamResponse.responses:type_name -> arista.studio.v1.StudioConfigStreamResponse
	138, // 210: arista.studio.v1.StudioConfigSetRequest.value:type_name -> arista.studio.v1.StudioConfig
	138, // 211: arista.studio.v1.StudioConfigSetResponse.value:type_name -> arista.studio.v1.StudioConfig
	121, // 212: arista.studio.v1.StudioConfigSetResponse.time:type_name -> google.protobuf.Timestamp
	138, // 213: arista.studio.v1.StudioConfigSetSomeRequest.values:type_name -> arista.studio.v1.StudioConfig
	124, // 214: arista.studio.v1.StudioConfigSetSomeResponse.key:type_name -> arista.studio.v1.StudioKey
	124, // 215: arista.studio.v1.StudioConfigDeleteRequest.key:type_name -> arista.studio.v1.StudioKey
	124, // 216: arista.studio.v1.StudioConfigDeleteResponse.key:type_name -> arista.studio.v1.StudioKey
	121, // 217: arista.studio.v1.StudioConfigDeleteResponse.time:type_name -> google.protobuf.Timestamp
	124, // 218: arista.studio.v1.StudioConfigDeleteSomeRequest.keys:type_name -> arista.studio.v1.StudioKey
	124, // 219: arista.studio.v1.StudioConfigDeleteSomeResponse.key:type_name -> arista.studio.v1.StudioKey
	138, // 220: arista.studio.v1.StudioConfigDeleteAllRequest.partial_eq_filter:type_name -> arista.studio.v1.StudioConfig
	129, // 221: arista.studio.v1.StudioConfigDeleteAllResponse.type:type_name -> fmp.DeleteError
	126, // 222: arista.studio.v1.StudioConfigDeleteAllResponse.error:type_name -> google.protobuf.StringValue
	124, // 223: arista.studio.v1.StudioConfigDeleteAllResponse.key:type_name -> arista.studio.v1.StudioKey
	121, // 224: arista.studio.v1.StudioConfigDeleteAllResponse.time:type_name -> google.protobuf.Timestamp
	124, // 225: arista.studio.v1.StudioSummaryRequest.key:type_name -> arista.studio.v1.StudioKey
	121, // 226: arista.studio.v1.StudioSummaryRequest.time:type_name -> google.protobuf.Timestamp
	139, // 227: arista.studio.v1.StudioSummaryResponse.value:type_name -> arista.studio.v1.StudioSummary
	121, // 228: arista.studio.v1.StudioSummaryResponse.time:type_name -> google.protobuf.Timestamp
	124, // 229: arista.studio.v1.StudioSummarySomeRequest.keys:type_name -> arista.studio.v1.StudioKey
	121, // 230: arista.studio.v1.StudioSummarySomeRequest.time:type_name -> google.protobuf.Timestamp
	139, // 231: arista.studio.v1.StudioSummarySomeResponse.value:type_name -> arista.studio.v1.StudioSummary
	126, // 232: arista.studio.v1.StudioSummarySomeResponse.error:type_name -> google.protobuf.StringValue
	121, // 233: arista.studio.v1.StudioSummarySomeResponse.time:type_name -> google.protobuf.Timestamp
	139, // 234: arista.studio.v1.StudioSummaryStreamRequest.partial_eq_filter:type_name -> arista.studio.v1.StudioSummary
	127, // 235: arista.studio.v1.StudioSummaryStreamRequest.time:type_name -> arista.time.TimeBounds
	139, // 236: arista.studio.v1.StudioSummaryStreamResponse.value:type_name -> arista.studio.v1.StudioSummary
	121, // 237: arista.studio.v1.StudioSummaryStreamResponse.time:type_name -> google.protobuf.Timestamp
	122, // 238: arista.studio.v1.StudioSummaryStreamResponse.type:type_name -> arista.subscriptions.Operation
	139, // 239: arista.studio.v1.StudioSummaryBatchedStreamRequest.partial_eq_filter:type_name -> arista.studio.v1.StudioSummary
	127, // 240: arista.studio.v1.StudioSummaryBatchedStreamRequest.time:type_name -> arista.time.TimeBounds
	123, // 241: arista.studio.v1.StudioSummaryBatchedStreamRequest.max_messages:type_name -> google.protobuf.UInt32Value
	118, // 242: arista.studio.v1.StudioSummaryBatchedStreamResponse.responses:type_name -> arista.studio.v1.StudioSummaryStreamResponse
	1,   // 243: arista.studio.v1.AssignedTagsService.GetOne:input_type -> arista.studio.v1.AssignedTagsRequest
	3,   // 244: arista.studio.v1.AssignedTagsService.GetSome:input_type -> arista.studio.v1.AssignedTagsSomeRequest
	5,   // 245: arista.studio.v1.AssignedTagsService.GetAll:input_type -> arista.studio.v1.AssignedTagsStreamRequest
	5,   // 246: arista.studio.v1.AssignedTagsService.Subscribe:input_type -> arista.studio.v1.AssignedTagsStreamRequest
	5,   // 247: arista.studio.v1.AssignedTagsService.GetMeta:input_type -> arista.studio.v1.AssignedTagsStreamRequest
	5,   // 248: arista.studio.v1.AssignedTagsService.SubscribeMeta:input_type -> arista.studio.v1.AssignedTagsStreamRequest
	7,   // 249: arista.studio.v1.AssignedTagsService.GetAllBatched:input_type -> arista.studio.v1.AssignedTagsBatchedStreamRequest
	7,   // 250: arista.studio.v1.AssignedTagsService.SubscribeBatched:input_type -> arista.studio.v1.AssignedTagsBatchedStreamRequest
	9,   // 251: arista.studio.v1.AssignedTagsConfigService.GetOne:input_type -> arista.studio.v1.AssignedTagsConfigRequest
	11,  // 252: arista.studio.v1.AssignedTagsConfigService.GetSome:input_type -> arista.studio.v1.AssignedTagsConfigSomeRequest
	13,  // 253: arista.studio.v1.AssignedTagsConfigService.GetAll:input_type -> arista.studio.v1.AssignedTagsConfigStreamRequest
	13,  // 254: arista.studio.v1.AssignedTagsConfigService.Subscribe:input_type -> arista.studio.v1.AssignedTagsConfigStreamRequest
	13,  // 255: arista.studio.v1.AssignedTagsConfigService.GetMeta:input_type -> arista.studio.v1.AssignedTagsConfigStreamRequest
	13,  // 256: arista.studio.v1.AssignedTagsConfigService.SubscribeMeta:input_type -> arista.studio.v1.AssignedTagsConfigStreamRequest
	17,  // 257: arista.studio.v1.AssignedTagsConfigService.Set:input_type -> arista.studio.v1.AssignedTagsConfigSetRequest
	19,  // 258: arista.studio.v1.AssignedTagsConfigService.SetSome:input_type -> arista.studio.v1.AssignedTagsConfigSetSomeRequest
	21,  // 259: arista.studio.v1.AssignedTagsConfigService.Delete:input_type -> arista.studio.v1.AssignedTagsConfigDeleteRequest
	23,  // 260: arista.studio.v1.AssignedTagsConfigService.DeleteSome:input_type -> arista.studio.v1.AssignedTagsConfigDeleteSomeRequest
	25,  // 261: arista.studio.v1.AssignedTagsConfigService.DeleteAll:input_type -> arista.studio.v1.AssignedTagsConfigDeleteAllRequest
	15,  // 262: arista.studio.v1.AssignedTagsConfigService.GetAllBatched:input_type -> arista.studio.v1.AssignedTagsConfigBatchedStreamRequest
	15,  // 263: arista.studio.v1.AssignedTagsConfigService.SubscribeBatched:input_type -> arista.studio.v1.AssignedTagsConfigBatchedStreamRequest
	27,  // 264: arista.studio.v1.AutofillActionService.GetOne:input_type -> arista.studio.v1.AutofillActionRequest
	29,  // 265: arista.studio.v1.AutofillActionService.GetSome:input_type -> arista.studio.v1.AutofillActionSomeRequest
	31,  // 266: arista.studio.v1.AutofillActionService.GetAll:input_type -> arista.studio.v1.AutofillActionStreamRequest
	31,  // 267: arista.studio.v1.AutofillActionService.Subscribe:input_type -> arista.studio.v1.AutofillActionStreamRequest
	31,  // 268: arista.studio.v1.AutofillActionService.GetMeta:input_type -> arista.studio.v1.AutofillActionStreamRequest
	31,  // 269: arista.studio.v1.AutofillActionService.SubscribeMeta:input_type -> arista.studio.v1.AutofillActionStreamRequest
	33,  // 270: arista.studio.v1.AutofillActionService.GetAllBatched:input_type -> arista.studio.v1.AutofillActionBatchedStreamRequest
	33,  // 271: arista.studio.v1.AutofillActionService.SubscribeBatched:input_type -> arista.studio.v1.AutofillActionBatchedStreamRequest
	35,  // 272: arista.studio.v1.AutofillActionConfigService.GetOne:input_type -> arista.studio.v1.AutofillActionConfigRequest
	37,  // 273: arista.studio.v1.AutofillActionConfigService.GetSome:input_type -> arista.studio.v1.AutofillActionConfigSomeRequest
	39,  // 274: arista.studio.v1.AutofillActionConfigService.GetAll:input_type -> arista.studio.v1.AutofillActionConfigStreamRequest
	39,  // 275: arista.studio.v1.AutofillActionConfigService.Subscribe:input_type -> arista.studio.v1.AutofillActionConfigStreamRequest
	39,  // 276: arista.studio.v1.AutofillActionConfigService.GetMeta:input_type -> arista.studio.v1.AutofillActionConfigStreamRequest
	39,  // 277: arista.studio.v1.AutofillActionConfigService.SubscribeMeta:input_type -> arista.studio.v1.AutofillActionConfigStreamRequest
	43,  // 278: arista.studio.v1.AutofillActionConfigService.Set:input_type -> arista.studio.v1.AutofillActionConfigSetRequest
	45,  // 279: arista.studio.v1.AutofillActionConfigService.SetSome:input_type -> arista.studio.v1.AutofillActionConfigSetSomeRequest
	47,  // 280: arista.studio.v1.AutofillActionConfigService.Delete:input_type -> arista.studio.v1.AutofillActionConfigDeleteRequest
	49,  // 281: arista.studio.v1.AutofillActionConfigService.DeleteSome:input_type -> arista.studio.v1.AutofillActionConfigDeleteSomeRequest
	51,  // 282: arista.studio.v1.AutofillActionConfigService.DeleteAll:input_type -> arista.studio.v1.AutofillActionConfigDeleteAllRequest
	41,  // 283: arista.studio.v1.AutofillActionConfigService.GetAllBatched:input_type -> arista.studio.v1.AutofillActionConfigBatchedStreamRequest
	41,  // 284: arista.studio.v1.AutofillActionConfigService.SubscribeBatched:input_type -> arista.studio.v1.AutofillActionConfigBatchedStreamRequest
	53,  // 285: arista.studio.v1.InputsService.GetOne:input_type -> arista.studio.v1.InputsRequest
	55,  // 286: arista.studio.v1.InputsService.GetSome:input_type -> arista.studio.v1.InputsSomeRequest
	57,  // 287: arista.studio.v1.InputsService.GetAll:input_type -> arista.studio.v1.InputsStreamRequest
	57,  // 288: arista.studio.v1.InputsService.Subscribe:input_type -> arista.studio.v1.InputsStreamRequest
	57,  // 289: arista.studio.v1.InputsService.GetMeta:input_type -> arista.studio.v1.InputsStreamRequest
	57,  // 290: arista.studio.v1.InputsService.SubscribeMeta:input_type -> arista.studio.v1.InputsStreamRequest
	59,  // 291: arista.studio.v1.InputsService.GetAllBatched:input_type -> arista.studio.v1.InputsBatchedStreamRequest
	59,  // 292: arista.studio.v1.InputsService.SubscribeBatched:input_type -> arista.studio.v1.InputsBatchedStreamRequest
	61,  // 293: arista.studio.v1.InputsConfigService.GetOne:input_type -> arista.studio.v1.InputsConfigRequest
	63,  // 294: arista.studio.v1.InputsConfigService.GetSome:input_type -> arista.studio.v1.InputsConfigSomeRequest
	65,  // 295: arista.studio.v1.InputsConfigService.GetAll:input_type -> arista.studio.v1.InputsConfigStreamRequest
	65,  // 296: arista.studio.v1.InputsConfigService.Subscribe:input_type -> arista.studio.v1.InputsConfigStreamRequest
	65,  // 297: arista.studio.v1.InputsConfigService.GetMeta:input_type -> arista.studio.v1.InputsConfigStreamRequest
	65,  // 298: arista.studio.v1.InputsConfigService.SubscribeMeta:input_type -> arista.studio.v1.InputsConfigStreamRequest
	69,  // 299: arista.studio.v1.InputsConfigService.Set:input_type -> arista.studio.v1.InputsConfigSetRequest
	71,  // 300: arista.studio.v1.InputsConfigService.SetSome:input_type -> arista.studio.v1.InputsConfigSetSomeRequest
	73,  // 301: arista.studio.v1.InputsConfigService.Delete:input_type -> arista.studio.v1.InputsConfigDeleteRequest
	75,  // 302: arista.studio.v1.InputsConfigService.DeleteSome:input_type -> arista.studio.v1.InputsConfigDeleteSomeRequest
	77,  // 303: arista.studio.v1.InputsConfigService.DeleteAll:input_type -> arista.studio.v1.InputsConfigDeleteAllRequest
	67,  // 304: arista.studio.v1.InputsConfigService.GetAllBatched:input_type -> arista.studio.v1.InputsConfigBatchedStreamRequest
	67,  // 305: arista.studio.v1.InputsConfigService.SubscribeBatched:input_type -> arista.studio.v1.InputsConfigBatchedStreamRequest
	79,  // 306: arista.studio.v1.SecretInputService.GetOne:input_type -> arista.studio.v1.SecretInputRequest
	81,  // 307: arista.studio.v1.SecretInputService.GetSome:input_type -> arista.studio.v1.SecretInputSomeRequest
	83,  // 308: arista.studio.v1.SecretInputService.GetAll:input_type -> arista.studio.v1.SecretInputStreamRequest
	83,  // 309: arista.studio.v1.SecretInputService.Subscribe:input_type -> arista.studio.v1.SecretInputStreamRequest
	83,  // 310: arista.studio.v1.SecretInputService.GetMeta:input_type -> arista.studio.v1.SecretInputStreamRequest
	83,  // 311: arista.studio.v1.SecretInputService.SubscribeMeta:input_type -> arista.studio.v1.SecretInputStreamRequest
	85,  // 312: arista.studio.v1.SecretInputService.GetAllBatched:input_type -> arista.studio.v1.SecretInputBatchedStreamRequest
	85,  // 313: arista.studio.v1.SecretInputService.SubscribeBatched:input_type -> arista.studio.v1.SecretInputBatchedStreamRequest
	87,  // 314: arista.studio.v1.StudioService.GetOne:input_type -> arista.studio.v1.StudioRequest
	89,  // 315: arista.studio.v1.StudioService.GetSome:input_type -> arista.studio.v1.StudioSomeRequest
	91,  // 316: arista.studio.v1.StudioService.GetAll:input_type -> arista.studio.v1.StudioStreamRequest
	91,  // 317: arista.studio.v1.StudioService.Subscribe:input_type -> arista.studio.v1.StudioStreamRequest
	91,  // 318: arista.studio.v1.StudioService.GetMeta:input_type -> arista.studio.v1.StudioStreamRequest
	91,  // 319: arista.studio.v1.StudioService.SubscribeMeta:input_type -> arista.studio.v1.StudioStreamRequest
	93,  // 320: arista.studio.v1.StudioService.GetAllBatched:input_type -> arista.studio.v1.StudioBatchedStreamRequest
	93,  // 321: arista.studio.v1.StudioService.SubscribeBatched:input_type -> arista.studio.v1.StudioBatchedStreamRequest
	95,  // 322: arista.studio.v1.StudioConfigService.GetOne:input_type -> arista.studio.v1.StudioConfigRequest
	97,  // 323: arista.studio.v1.StudioConfigService.GetSome:input_type -> arista.studio.v1.StudioConfigSomeRequest
	99,  // 324: arista.studio.v1.StudioConfigService.GetAll:input_type -> arista.studio.v1.StudioConfigStreamRequest
	99,  // 325: arista.studio.v1.StudioConfigService.Subscribe:input_type -> arista.studio.v1.StudioConfigStreamRequest
	99,  // 326: arista.studio.v1.StudioConfigService.GetMeta:input_type -> arista.studio.v1.StudioConfigStreamRequest
	99,  // 327: arista.studio.v1.StudioConfigService.SubscribeMeta:input_type -> arista.studio.v1.StudioConfigStreamRequest
	103, // 328: arista.studio.v1.StudioConfigService.Set:input_type -> arista.studio.v1.StudioConfigSetRequest
	105, // 329: arista.studio.v1.StudioConfigService.SetSome:input_type -> arista.studio.v1.StudioConfigSetSomeRequest
	107, // 330: arista.studio.v1.StudioConfigService.Delete:input_type -> arista.studio.v1.StudioConfigDeleteRequest
	109, // 331: arista.studio.v1.StudioConfigService.DeleteSome:input_type -> arista.studio.v1.StudioConfigDeleteSomeRequest
	111, // 332: arista.studio.v1.StudioConfigService.DeleteAll:input_type -> arista.studio.v1.StudioConfigDeleteAllRequest
	101, // 333: arista.studio.v1.StudioConfigService.GetAllBatched:input_type -> arista.studio.v1.StudioConfigBatchedStreamRequest
	101, // 334: arista.studio.v1.StudioConfigService.SubscribeBatched:input_type -> arista.studio.v1.StudioConfigBatchedStreamRequest
	113, // 335: arista.studio.v1.StudioSummaryService.GetOne:input_type -> arista.studio.v1.StudioSummaryRequest
	115, // 336: arista.studio.v1.StudioSummaryService.GetSome:input_type -> arista.studio.v1.StudioSummarySomeRequest
	117, // 337: arista.studio.v1.StudioSummaryService.GetAll:input_type -> arista.studio.v1.StudioSummaryStreamRequest
	117, // 338: arista.studio.v1.StudioSummaryService.Subscribe:input_type -> arista.studio.v1.StudioSummaryStreamRequest
	117, // 339: arista.studio.v1.StudioSummaryService.GetMeta:input_type -> arista.studio.v1.StudioSummaryStreamRequest
	117, // 340: arista.studio.v1.StudioSummaryService.SubscribeMeta:input_type -> arista.studio.v1.StudioSummaryStreamRequest
	119, // 341: arista.studio.v1.StudioSummaryService.GetAllBatched:input_type -> arista.studio.v1.StudioSummaryBatchedStreamRequest
	119, // 342: arista.studio.v1.StudioSummaryService.SubscribeBatched:input_type -> arista.studio.v1.StudioSummaryBatchedStreamRequest
	2,   // 343: arista.studio.v1.AssignedTagsService.GetOne:output_type -> arista.studio.v1.AssignedTagsResponse
	4,   // 344: arista.studio.v1.AssignedTagsService.GetSome:output_type -> arista.studio.v1.AssignedTagsSomeResponse
	6,   // 345: arista.studio.v1.AssignedTagsService.GetAll:output_type -> arista.studio.v1.AssignedTagsStreamResponse
	6,   // 346: arista.studio.v1.AssignedTagsService.Subscribe:output_type -> arista.studio.v1.AssignedTagsStreamResponse
	0,   // 347: arista.studio.v1.AssignedTagsService.GetMeta:output_type -> arista.studio.v1.MetaResponse
	0,   // 348: arista.studio.v1.AssignedTagsService.SubscribeMeta:output_type -> arista.studio.v1.MetaResponse
	8,   // 349: arista.studio.v1.AssignedTagsService.GetAllBatched:output_type -> arista.studio.v1.AssignedTagsBatchedStreamResponse
	8,   // 350: arista.studio.v1.AssignedTagsService.SubscribeBatched:output_type -> arista.studio.v1.AssignedTagsBatchedStreamResponse
	10,  // 351: arista.studio.v1.AssignedTagsConfigService.GetOne:output_type -> arista.studio.v1.AssignedTagsConfigResponse
	12,  // 352: arista.studio.v1.AssignedTagsConfigService.GetSome:output_type -> arista.studio.v1.AssignedTagsConfigSomeResponse
	14,  // 353: arista.studio.v1.AssignedTagsConfigService.GetAll:output_type -> arista.studio.v1.AssignedTagsConfigStreamResponse
	14,  // 354: arista.studio.v1.AssignedTagsConfigService.Subscribe:output_type -> arista.studio.v1.AssignedTagsConfigStreamResponse
	0,   // 355: arista.studio.v1.AssignedTagsConfigService.GetMeta:output_type -> arista.studio.v1.MetaResponse
	0,   // 356: arista.studio.v1.AssignedTagsConfigService.SubscribeMeta:output_type -> arista.studio.v1.MetaResponse
	18,  // 357: arista.studio.v1.AssignedTagsConfigService.Set:output_type -> arista.studio.v1.AssignedTagsConfigSetResponse
	20,  // 358: arista.studio.v1.AssignedTagsConfigService.SetSome:output_type -> arista.studio.v1.AssignedTagsConfigSetSomeResponse
	22,  // 359: arista.studio.v1.AssignedTagsConfigService.Delete:output_type -> arista.studio.v1.AssignedTagsConfigDeleteResponse
	24,  // 360: arista.studio.v1.AssignedTagsConfigService.DeleteSome:output_type -> arista.studio.v1.AssignedTagsConfigDeleteSomeResponse
	26,  // 361: arista.studio.v1.AssignedTagsConfigService.DeleteAll:output_type -> arista.studio.v1.AssignedTagsConfigDeleteAllResponse
	16,  // 362: arista.studio.v1.AssignedTagsConfigService.GetAllBatched:output_type -> arista.studio.v1.AssignedTagsConfigBatchedStreamResponse
	16,  // 363: arista.studio.v1.AssignedTagsConfigService.SubscribeBatched:output_type -> arista.studio.v1.AssignedTagsConfigBatchedStreamResponse
	28,  // 364: arista.studio.v1.AutofillActionService.GetOne:output_type -> arista.studio.v1.AutofillActionResponse
	30,  // 365: arista.studio.v1.AutofillActionService.GetSome:output_type -> arista.studio.v1.AutofillActionSomeResponse
	32,  // 366: arista.studio.v1.AutofillActionService.GetAll:output_type -> arista.studio.v1.AutofillActionStreamResponse
	32,  // 367: arista.studio.v1.AutofillActionService.Subscribe:output_type -> arista.studio.v1.AutofillActionStreamResponse
	0,   // 368: arista.studio.v1.AutofillActionService.GetMeta:output_type -> arista.studio.v1.MetaResponse
	0,   // 369: arista.studio.v1.AutofillActionService.SubscribeMeta:output_type -> arista.studio.v1.MetaResponse
	34,  // 370: arista.studio.v1.AutofillActionService.GetAllBatched:output_type -> arista.studio.v1.AutofillActionBatchedStreamResponse
	34,  // 371: arista.studio.v1.AutofillActionService.SubscribeBatched:output_type -> arista.studio.v1.AutofillActionBatchedStreamResponse
	36,  // 372: arista.studio.v1.AutofillActionConfigService.GetOne:output_type -> arista.studio.v1.AutofillActionConfigResponse
	38,  // 373: arista.studio.v1.AutofillActionConfigService.GetSome:output_type -> arista.studio.v1.AutofillActionConfigSomeResponse
	40,  // 374: arista.studio.v1.AutofillActionConfigService.GetAll:output_type -> arista.studio.v1.AutofillActionConfigStreamResponse
	40,  // 375: arista.studio.v1.AutofillActionConfigService.Subscribe:output_type -> arista.studio.v1.AutofillActionConfigStreamResponse
	0,   // 376: arista.studio.v1.AutofillActionConfigService.GetMeta:output_type -> arista.studio.v1.MetaResponse
	0,   // 377: arista.studio.v1.AutofillActionConfigService.SubscribeMeta:output_type -> arista.studio.v1.MetaResponse
	44,  // 378: arista.studio.v1.AutofillActionConfigService.Set:output_type -> arista.studio.v1.AutofillActionConfigSetResponse
	46,  // 379: arista.studio.v1.AutofillActionConfigService.SetSome:output_type -> arista.studio.v1.AutofillActionConfigSetSomeResponse
	48,  // 380: arista.studio.v1.AutofillActionConfigService.Delete:output_type -> arista.studio.v1.AutofillActionConfigDeleteResponse
	50,  // 381: arista.studio.v1.AutofillActionConfigService.DeleteSome:output_type -> arista.studio.v1.AutofillActionConfigDeleteSomeResponse
	52,  // 382: arista.studio.v1.AutofillActionConfigService.DeleteAll:output_type -> arista.studio.v1.AutofillActionConfigDeleteAllResponse
	42,  // 383: arista.studio.v1.AutofillActionConfigService.GetAllBatched:output_type -> arista.studio.v1.AutofillActionConfigBatchedStreamResponse
	42,  // 384: arista.studio.v1.AutofillActionConfigService.SubscribeBatched:output_type -> arista.studio.v1.AutofillActionConfigBatchedStreamResponse
	54,  // 385: arista.studio.v1.InputsService.GetOne:output_type -> arista.studio.v1.InputsResponse
	56,  // 386: arista.studio.v1.InputsService.GetSome:output_type -> arista.studio.v1.InputsSomeResponse
	58,  // 387: arista.studio.v1.InputsService.GetAll:output_type -> arista.studio.v1.InputsStreamResponse
	58,  // 388: arista.studio.v1.InputsService.Subscribe:output_type -> arista.studio.v1.InputsStreamResponse
	0,   // 389: arista.studio.v1.InputsService.GetMeta:output_type -> arista.studio.v1.MetaResponse
	0,   // 390: arista.studio.v1.InputsService.SubscribeMeta:output_type -> arista.studio.v1.MetaResponse
	60,  // 391: arista.studio.v1.InputsService.GetAllBatched:output_type -> arista.studio.v1.InputsBatchedStreamResponse
	60,  // 392: arista.studio.v1.InputsService.SubscribeBatched:output_type -> arista.studio.v1.InputsBatchedStreamResponse
	62,  // 393: arista.studio.v1.InputsConfigService.GetOne:output_type -> arista.studio.v1.InputsConfigResponse
	64,  // 394: arista.studio.v1.InputsConfigService.GetSome:output_type -> arista.studio.v1.InputsConfigSomeResponse
	66,  // 395: arista.studio.v1.InputsConfigService.GetAll:output_type -> arista.studio.v1.InputsConfigStreamResponse
	66,  // 396: arista.studio.v1.InputsConfigService.Subscribe:output_type -> arista.studio.v1.InputsConfigStreamResponse
	0,   // 397: arista.studio.v1.InputsConfigService.GetMeta:output_type -> arista.studio.v1.MetaResponse
	0,   // 398: arista.studio.v1.InputsConfigService.SubscribeMeta:output_type -> arista.studio.v1.MetaResponse
	70,  // 399: arista.studio.v1.InputsConfigService.Set:output_type -> arista.studio.v1.InputsConfigSetResponse
	72,  // 400: arista.studio.v1.InputsConfigService.SetSome:output_type -> arista.studio.v1.InputsConfigSetSomeResponse
	74,  // 401: arista.studio.v1.InputsConfigService.Delete:output_type -> arista.studio.v1.InputsConfigDeleteResponse
	76,  // 402: arista.studio.v1.InputsConfigService.DeleteSome:output_type -> arista.studio.v1.InputsConfigDeleteSomeResponse
	78,  // 403: arista.studio.v1.InputsConfigService.DeleteAll:output_type -> arista.studio.v1.InputsConfigDeleteAllResponse
	68,  // 404: arista.studio.v1.InputsConfigService.GetAllBatched:output_type -> arista.studio.v1.InputsConfigBatchedStreamResponse
	68,  // 405: arista.studio.v1.InputsConfigService.SubscribeBatched:output_type -> arista.studio.v1.InputsConfigBatchedStreamResponse
	80,  // 406: arista.studio.v1.SecretInputService.GetOne:output_type -> arista.studio.v1.SecretInputResponse
	82,  // 407: arista.studio.v1.SecretInputService.GetSome:output_type -> arista.studio.v1.SecretInputSomeResponse
	84,  // 408: arista.studio.v1.SecretInputService.GetAll:output_type -> arista.studio.v1.SecretInputStreamResponse
	84,  // 409: arista.studio.v1.SecretInputService.Subscribe:output_type -> arista.studio.v1.SecretInputStreamResponse
	0,   // 410: arista.studio.v1.SecretInputService.GetMeta:output_type -> arista.studio.v1.MetaResponse
	0,   // 411: arista.studio.v1.SecretInputService.SubscribeMeta:output_type -> arista.studio.v1.MetaResponse
	86,  // 412: arista.studio.v1.SecretInputService.GetAllBatched:output_type -> arista.studio.v1.SecretInputBatchedStreamResponse
	86,  // 413: arista.studio.v1.SecretInputService.SubscribeBatched:output_type -> arista.studio.v1.SecretInputBatchedStreamResponse
	88,  // 414: arista.studio.v1.StudioService.GetOne:output_type -> arista.studio.v1.StudioResponse
	90,  // 415: arista.studio.v1.StudioService.GetSome:output_type -> arista.studio.v1.StudioSomeResponse
	92,  // 416: arista.studio.v1.StudioService.GetAll:output_type -> arista.studio.v1.StudioStreamResponse
	92,  // 417: arista.studio.v1.StudioService.Subscribe:output_type -> arista.studio.v1.StudioStreamResponse
	0,   // 418: arista.studio.v1.StudioService.GetMeta:output_type -> arista.studio.v1.MetaResponse
	0,   // 419: arista.studio.v1.StudioService.SubscribeMeta:output_type -> arista.studio.v1.MetaResponse
	94,  // 420: arista.studio.v1.StudioService.GetAllBatched:output_type -> arista.studio.v1.StudioBatchedStreamResponse
	94,  // 421: arista.studio.v1.StudioService.SubscribeBatched:output_type -> arista.studio.v1.StudioBatchedStreamResponse
	96,  // 422: arista.studio.v1.StudioConfigService.GetOne:output_type -> arista.studio.v1.StudioConfigResponse
	98,  // 423: arista.studio.v1.StudioConfigService.GetSome:output_type -> arista.studio.v1.StudioConfigSomeResponse
	100, // 424: arista.studio.v1.StudioConfigService.GetAll:output_type -> arista.studio.v1.StudioConfigStreamResponse
	100, // 425: arista.studio.v1.StudioConfigService.Subscribe:output_type -> arista.studio.v1.StudioConfigStreamResponse
	0,   // 426: arista.studio.v1.StudioConfigService.GetMeta:output_type -> arista.studio.v1.MetaResponse
	0,   // 427: arista.studio.v1.StudioConfigService.SubscribeMeta:output_type -> arista.studio.v1.MetaResponse
	104, // 428: arista.studio.v1.StudioConfigService.Set:output_type -> arista.studio.v1.StudioConfigSetResponse
	106, // 429: arista.studio.v1.StudioConfigService.SetSome:output_type -> arista.studio.v1.StudioConfigSetSomeResponse
	108, // 430: arista.studio.v1.StudioConfigService.Delete:output_type -> arista.studio.v1.StudioConfigDeleteResponse
	110, // 431: arista.studio.v1.StudioConfigService.DeleteSome:output_type -> arista.studio.v1.StudioConfigDeleteSomeResponse
	112, // 432: arista.studio.v1.StudioConfigService.DeleteAll:output_type -> arista.studio.v1.StudioConfigDeleteAllResponse
	102, // 433: arista.studio.v1.StudioConfigService.GetAllBatched:output_type -> arista.studio.v1.StudioConfigBatchedStreamResponse
	102, // 434: arista.studio.v1.StudioConfigService.SubscribeBatched:output_type -> arista.studio.v1.StudioConfigBatchedStreamResponse
	114, // 435: arista.studio.v1.StudioSummaryService.GetOne:output_type -> arista.studio.v1.StudioSummaryResponse
	116, // 436: arista.studio.v1.StudioSummaryService.GetSome:output_type -> arista.studio.v1.StudioSummarySomeResponse
	118, // 437: arista.studio.v1.StudioSummaryService.GetAll:output_type -> arista.studio.v1.StudioSummaryStreamResponse
	118, // 438: arista.studio.v1.StudioSummaryService.Subscribe:output_type -> arista.studio.v1.StudioSummaryStreamResponse
	0,   // 439: arista.studio.v1.StudioSummaryService.GetMeta:output_type -> arista.studio.v1.MetaResponse
	0,   // 440: arista.studio.v1.StudioSummaryService.SubscribeMeta:output_type -> arista.studio.v1.MetaResponse
	120, // 441: arista.studio.v1.StudioSummaryService.GetAllBatched:output_type -> arista.studio.v1.StudioSummaryBatchedStreamResponse
	120, // 442: arista.studio.v1.StudioSummaryService.SubscribeBatched:output_type -> arista.studio.v1.StudioSummaryBatchedStreamResponse
	343, // [343:443] is the sub-list for method output_type
	243, // [243:343] is the sub-list for method input_type
	243, // [243:243] is the sub-list for extension type_name
	243, // [243:243] is the sub-list for extension extendee
	0,   // [0:243] is the sub-list for field type_name
}

func init() { file_arista_studio_v1_services_gen_proto_init() }
func file_arista_studio_v1_services_gen_proto_init() {
	if File_arista_studio_v1_services_gen_proto != nil {
		return
	}
	file_arista_studio_v1_studio_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_arista_studio_v1_services_gen_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignedTagsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignedTagsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignedTagsSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignedTagsSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignedTagsStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignedTagsStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignedTagsBatchedStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignedTagsBatchedStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignedTagsConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignedTagsConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignedTagsConfigSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignedTagsConfigSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignedTagsConfigStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignedTagsConfigStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignedTagsConfigBatchedStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignedTagsConfigBatchedStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignedTagsConfigSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignedTagsConfigSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignedTagsConfigSetSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignedTagsConfigSetSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignedTagsConfigDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignedTagsConfigDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignedTagsConfigDeleteSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignedTagsConfigDeleteSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignedTagsConfigDeleteAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignedTagsConfigDeleteAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillActionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillActionSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillActionSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillActionStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillActionStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillActionBatchedStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillActionBatchedStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillActionConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillActionConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillActionConfigSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillActionConfigSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillActionConfigStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillActionConfigStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillActionConfigBatchedStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillActionConfigBatchedStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillActionConfigSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillActionConfigSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillActionConfigSetSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillActionConfigSetSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillActionConfigDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillActionConfigDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillActionConfigDeleteSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillActionConfigDeleteSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillActionConfigDeleteAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillActionConfigDeleteAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputsSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputsSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputsStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputsStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputsBatchedStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputsBatchedStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputsConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputsConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputsConfigSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputsConfigSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputsConfigStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputsConfigStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputsConfigBatchedStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputsConfigBatchedStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputsConfigSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputsConfigSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputsConfigSetSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputsConfigSetSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputsConfigDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputsConfigDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputsConfigDeleteSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputsConfigDeleteSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputsConfigDeleteAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputsConfigDeleteAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretInputRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretInputResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretInputSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretInputSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretInputStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretInputStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretInputBatchedStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretInputBatchedStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioBatchedStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioBatchedStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioConfigSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioConfigSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioConfigStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioConfigStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioConfigBatchedStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioConfigBatchedStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioConfigSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioConfigSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioConfigSetSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioConfigSetSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioConfigDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioConfigDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioConfigDeleteSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioConfigDeleteSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioConfigDeleteAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioConfigDeleteAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioSummaryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioSummaryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioSummarySomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioSummarySomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioSummaryStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioSummaryStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioSummaryBatchedStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioSummaryBatchedStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_arista_studio_v1_services_gen_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   121,
			NumExtensions: 0,
			NumServices:   10,
		},
		GoTypes:           file_arista_studio_v1_services_gen_proto_goTypes,
		DependencyIndexes: file_arista_studio_v1_services_gen_proto_depIdxs,
		MessageInfos:      file_arista_studio_v1_services_gen_proto_msgTypes,
	}.Build()
	File_arista_studio_v1_services_gen_proto = out.File
	file_arista_studio_v1_services_gen_proto_rawDesc = nil
	file_arista_studio_v1_services_gen_proto_goTypes = nil
	file_arista_studio_v1_services_gen_proto_depIdxs = nil
}
