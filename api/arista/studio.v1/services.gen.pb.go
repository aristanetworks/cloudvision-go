// Copyright (c) 2020 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

// NOTE: This is a workspace-aware Resource API.
// Please see workspace.v1 for more information.

//
// Code generated by boomtown. DO NOT EDIT.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.7
// source: arista/studio.v1/services.gen.proto

package studio

import (
	subscriptions "github.com/aristanetworks/cloudvision-go/api/arista/subscriptions"
	time "github.com/aristanetworks/cloudvision-go/api/arista/time"
	fmp "github.com/aristanetworks/cloudvision-go/api/fmp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AssignedTagsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a AssignedTags instance to retrieve.
	// This value must be populated.
	Key *StudioKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AssignedTagsRequest) Reset() {
	*x = AssignedTagsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedTagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedTagsRequest) ProtoMessage() {}

func (x *AssignedTagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedTagsRequest.ProtoReflect.Descriptor instead.
func (*AssignedTagsRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{0}
}

func (x *AssignedTagsRequest) GetKey() *StudioKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AssignedTagsRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type AssignedTagsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *AssignedTags `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// AssignedTags instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AssignedTagsResponse) Reset() {
	*x = AssignedTagsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedTagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedTagsResponse) ProtoMessage() {}

func (x *AssignedTagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedTagsResponse.ProtoReflect.Descriptor instead.
func (*AssignedTagsResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{1}
}

func (x *AssignedTagsResponse) GetValue() *AssignedTags {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AssignedTagsResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type AssignedTagsStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*AssignedTags `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each AssignedTags at end.
	//     * Each AssignedTags response is fully-specified (all fields set).
	//   * start: Returns the state of each AssignedTags at start, followed by updates until now.
	//     * Each AssignedTags response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each AssignedTags at start, followed by updates
	//     until end.
	//     * Each AssignedTags response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AssignedTagsStreamRequest) Reset() {
	*x = AssignedTagsStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedTagsStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedTagsStreamRequest) ProtoMessage() {}

func (x *AssignedTagsStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedTagsStreamRequest.ProtoReflect.Descriptor instead.
func (*AssignedTagsStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{2}
}

func (x *AssignedTagsStreamRequest) GetPartialEqFilter() []*AssignedTags {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *AssignedTagsStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type AssignedTagsStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *AssignedTags `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this AssignedTags's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the AssignedTags value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *AssignedTagsStreamResponse) Reset() {
	*x = AssignedTagsStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedTagsStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedTagsStreamResponse) ProtoMessage() {}

func (x *AssignedTagsStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedTagsStreamResponse.ProtoReflect.Descriptor instead.
func (*AssignedTagsStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{3}
}

func (x *AssignedTagsStreamResponse) GetValue() *AssignedTags {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AssignedTagsStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *AssignedTagsStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation_UNSPECIFIED
}

type AssignedTagsConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a AssignedTagsConfig instance to retrieve.
	// This value must be populated.
	Key *StudioKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AssignedTagsConfigRequest) Reset() {
	*x = AssignedTagsConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedTagsConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedTagsConfigRequest) ProtoMessage() {}

func (x *AssignedTagsConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedTagsConfigRequest.ProtoReflect.Descriptor instead.
func (*AssignedTagsConfigRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{4}
}

func (x *AssignedTagsConfigRequest) GetKey() *StudioKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AssignedTagsConfigRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type AssignedTagsConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *AssignedTagsConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// AssignedTagsConfig instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AssignedTagsConfigResponse) Reset() {
	*x = AssignedTagsConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedTagsConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedTagsConfigResponse) ProtoMessage() {}

func (x *AssignedTagsConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedTagsConfigResponse.ProtoReflect.Descriptor instead.
func (*AssignedTagsConfigResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{5}
}

func (x *AssignedTagsConfigResponse) GetValue() *AssignedTagsConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AssignedTagsConfigResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type AssignedTagsConfigStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*AssignedTagsConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each AssignedTagsConfig at end.
	//     * Each AssignedTagsConfig response is fully-specified (all fields set).
	//   * start: Returns the state of each AssignedTagsConfig at start, followed by updates until now.
	//     * Each AssignedTagsConfig response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each AssignedTagsConfig at start, followed by updates
	//     until end.
	//     * Each AssignedTagsConfig response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AssignedTagsConfigStreamRequest) Reset() {
	*x = AssignedTagsConfigStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedTagsConfigStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedTagsConfigStreamRequest) ProtoMessage() {}

func (x *AssignedTagsConfigStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedTagsConfigStreamRequest.ProtoReflect.Descriptor instead.
func (*AssignedTagsConfigStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{6}
}

func (x *AssignedTagsConfigStreamRequest) GetPartialEqFilter() []*AssignedTagsConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *AssignedTagsConfigStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type AssignedTagsConfigStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *AssignedTagsConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this AssignedTagsConfig's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the AssignedTagsConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *AssignedTagsConfigStreamResponse) Reset() {
	*x = AssignedTagsConfigStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedTagsConfigStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedTagsConfigStreamResponse) ProtoMessage() {}

func (x *AssignedTagsConfigStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedTagsConfigStreamResponse.ProtoReflect.Descriptor instead.
func (*AssignedTagsConfigStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{7}
}

func (x *AssignedTagsConfigStreamResponse) GetValue() *AssignedTagsConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AssignedTagsConfigStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *AssignedTagsConfigStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation_UNSPECIFIED
}

type AssignedTagsConfigSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AssignedTagsConfig carries the value to set into the datastore.
	// See the documentation on the AssignedTagsConfig struct for which fields are required.
	Value *AssignedTagsConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AssignedTagsConfigSetRequest) Reset() {
	*x = AssignedTagsConfigSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedTagsConfigSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedTagsConfigSetRequest) ProtoMessage() {}

func (x *AssignedTagsConfigSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedTagsConfigSetRequest.ProtoReflect.Descriptor instead.
func (*AssignedTagsConfigSetRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{8}
}

func (x *AssignedTagsConfigSetRequest) GetValue() *AssignedTagsConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

type AssignedTagsConfigSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value carries all the values given in the AssignedTagsConfigSetRequest as well
	// as any server-generated values.
	Value *AssignedTagsConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==CreatedAt will include this instance.
	//
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AssignedTagsConfigSetResponse) Reset() {
	*x = AssignedTagsConfigSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedTagsConfigSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedTagsConfigSetResponse) ProtoMessage() {}

func (x *AssignedTagsConfigSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedTagsConfigSetResponse.ProtoReflect.Descriptor instead.
func (*AssignedTagsConfigSetResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{9}
}

func (x *AssignedTagsConfigSetResponse) GetValue() *AssignedTagsConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AssignedTagsConfigSetResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type AssignedTagsConfigSetSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value contains a list of AssignedTagsConfig values to write.
	// It is possible to provide more values than can fit within either:
	//     - the maxiumum send size of the client
	//     - the maximum receive size of the server
	// If this error occurs you must reduce the number of values sent.
	// See gRPC "maximum message size" documentation for more information.
	Values []*AssignedTagsConfig `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *AssignedTagsConfigSetSomeRequest) Reset() {
	*x = AssignedTagsConfigSetSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedTagsConfigSetSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedTagsConfigSetSomeRequest) ProtoMessage() {}

func (x *AssignedTagsConfigSetSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedTagsConfigSetSomeRequest.ProtoReflect.Descriptor instead.
func (*AssignedTagsConfigSetSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{10}
}

func (x *AssignedTagsConfigSetSomeRequest) GetValues() []*AssignedTagsConfig {
	if x != nil {
		return x.Values
	}
	return nil
}

type AssignedTagsConfigSetSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *StudioKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Error string     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *AssignedTagsConfigSetSomeResponse) Reset() {
	*x = AssignedTagsConfigSetSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedTagsConfigSetSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedTagsConfigSetSomeResponse) ProtoMessage() {}

func (x *AssignedTagsConfigSetSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedTagsConfigSetSomeResponse.ProtoReflect.Descriptor instead.
func (*AssignedTagsConfigSetSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{11}
}

func (x *AssignedTagsConfigSetSomeResponse) GetKey() *StudioKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AssignedTagsConfigSetSomeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type AssignedTagsConfigDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key indicates which AssignedTagsConfig instance to remove.
	// This field must always be set.
	Key *StudioKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *AssignedTagsConfigDeleteRequest) Reset() {
	*x = AssignedTagsConfigDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedTagsConfigDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedTagsConfigDeleteRequest) ProtoMessage() {}

func (x *AssignedTagsConfigDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedTagsConfigDeleteRequest.ProtoReflect.Descriptor instead.
func (*AssignedTagsConfigDeleteRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{12}
}

func (x *AssignedTagsConfigDeleteRequest) GetKey() *StudioKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type AssignedTagsConfigDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key echoes back the key of the deleted AssignedTagsConfig instance.
	Key *StudioKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==DeletedAt will not include this instance.
	//
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AssignedTagsConfigDeleteResponse) Reset() {
	*x = AssignedTagsConfigDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedTagsConfigDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedTagsConfigDeleteResponse) ProtoMessage() {}

func (x *AssignedTagsConfigDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedTagsConfigDeleteResponse.ProtoReflect.Descriptor instead.
func (*AssignedTagsConfigDeleteResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{13}
}

func (x *AssignedTagsConfigDeleteResponse) GetKey() *StudioKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AssignedTagsConfigDeleteResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type AssignedTagsConfigDeleteAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AssignedTagsConfigDeleteAllRequest) Reset() {
	*x = AssignedTagsConfigDeleteAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedTagsConfigDeleteAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedTagsConfigDeleteAllRequest) ProtoMessage() {}

func (x *AssignedTagsConfigDeleteAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedTagsConfigDeleteAllRequest.ProtoReflect.Descriptor instead.
func (*AssignedTagsConfigDeleteAllRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{14}
}

type AssignedTagsConfigDeleteAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This describes the class of delete error.
	Type fmp.DeleteError `protobuf:"varint,1,opt,name=type,proto3,enum=fmp.DeleteError" json:"type,omitempty"`
	// This indicates the error message from the delete failure.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// This is the key of the AssignedTagsConfig instance that failed to be deleted.
	Key *StudioKey `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp when the key was being deleted.
	Time *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AssignedTagsConfigDeleteAllResponse) Reset() {
	*x = AssignedTagsConfigDeleteAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedTagsConfigDeleteAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedTagsConfigDeleteAllResponse) ProtoMessage() {}

func (x *AssignedTagsConfigDeleteAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedTagsConfigDeleteAllResponse.ProtoReflect.Descriptor instead.
func (*AssignedTagsConfigDeleteAllResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{15}
}

func (x *AssignedTagsConfigDeleteAllResponse) GetType() fmp.DeleteError {
	if x != nil {
		return x.Type
	}
	return fmp.DeleteError_DELETE_ERROR_UNSPECIFIED
}

func (x *AssignedTagsConfigDeleteAllResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *AssignedTagsConfigDeleteAllResponse) GetKey() *StudioKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AssignedTagsConfigDeleteAllResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type AutofillActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a AutofillAction instance to retrieve.
	// This value must be populated.
	Key *AutofillActionKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AutofillActionRequest) Reset() {
	*x = AutofillActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillActionRequest) ProtoMessage() {}

func (x *AutofillActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillActionRequest.ProtoReflect.Descriptor instead.
func (*AutofillActionRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{16}
}

func (x *AutofillActionRequest) GetKey() *AutofillActionKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AutofillActionRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type AutofillActionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *AutofillAction `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// AutofillAction instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AutofillActionResponse) Reset() {
	*x = AutofillActionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillActionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillActionResponse) ProtoMessage() {}

func (x *AutofillActionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillActionResponse.ProtoReflect.Descriptor instead.
func (*AutofillActionResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{17}
}

func (x *AutofillActionResponse) GetValue() *AutofillAction {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AutofillActionResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type AutofillActionStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*AutofillAction `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each AutofillAction at end.
	//     * Each AutofillAction response is fully-specified (all fields set).
	//   * start: Returns the state of each AutofillAction at start, followed by updates until now.
	//     * Each AutofillAction response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each AutofillAction at start, followed by updates
	//     until end.
	//     * Each AutofillAction response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AutofillActionStreamRequest) Reset() {
	*x = AutofillActionStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillActionStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillActionStreamRequest) ProtoMessage() {}

func (x *AutofillActionStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillActionStreamRequest.ProtoReflect.Descriptor instead.
func (*AutofillActionStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{18}
}

func (x *AutofillActionStreamRequest) GetPartialEqFilter() []*AutofillAction {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *AutofillActionStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type AutofillActionStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *AutofillAction `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this AutofillAction's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the AutofillAction value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *AutofillActionStreamResponse) Reset() {
	*x = AutofillActionStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillActionStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillActionStreamResponse) ProtoMessage() {}

func (x *AutofillActionStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillActionStreamResponse.ProtoReflect.Descriptor instead.
func (*AutofillActionStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{19}
}

func (x *AutofillActionStreamResponse) GetValue() *AutofillAction {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AutofillActionStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *AutofillActionStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation_UNSPECIFIED
}

type AutofillActionConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a AutofillActionConfig instance to retrieve.
	// This value must be populated.
	Key *AutofillActionKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AutofillActionConfigRequest) Reset() {
	*x = AutofillActionConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillActionConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillActionConfigRequest) ProtoMessage() {}

func (x *AutofillActionConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillActionConfigRequest.ProtoReflect.Descriptor instead.
func (*AutofillActionConfigRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{20}
}

func (x *AutofillActionConfigRequest) GetKey() *AutofillActionKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AutofillActionConfigRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type AutofillActionConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *AutofillActionConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// AutofillActionConfig instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AutofillActionConfigResponse) Reset() {
	*x = AutofillActionConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillActionConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillActionConfigResponse) ProtoMessage() {}

func (x *AutofillActionConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillActionConfigResponse.ProtoReflect.Descriptor instead.
func (*AutofillActionConfigResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{21}
}

func (x *AutofillActionConfigResponse) GetValue() *AutofillActionConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AutofillActionConfigResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type AutofillActionConfigStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*AutofillActionConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each AutofillActionConfig at end.
	//     * Each AutofillActionConfig response is fully-specified (all fields set).
	//   * start: Returns the state of each AutofillActionConfig at start, followed by updates until now.
	//     * Each AutofillActionConfig response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each AutofillActionConfig at start, followed by updates
	//     until end.
	//     * Each AutofillActionConfig response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AutofillActionConfigStreamRequest) Reset() {
	*x = AutofillActionConfigStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillActionConfigStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillActionConfigStreamRequest) ProtoMessage() {}

func (x *AutofillActionConfigStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillActionConfigStreamRequest.ProtoReflect.Descriptor instead.
func (*AutofillActionConfigStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{22}
}

func (x *AutofillActionConfigStreamRequest) GetPartialEqFilter() []*AutofillActionConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *AutofillActionConfigStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type AutofillActionConfigStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *AutofillActionConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this AutofillActionConfig's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the AutofillActionConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *AutofillActionConfigStreamResponse) Reset() {
	*x = AutofillActionConfigStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillActionConfigStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillActionConfigStreamResponse) ProtoMessage() {}

func (x *AutofillActionConfigStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillActionConfigStreamResponse.ProtoReflect.Descriptor instead.
func (*AutofillActionConfigStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{23}
}

func (x *AutofillActionConfigStreamResponse) GetValue() *AutofillActionConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AutofillActionConfigStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *AutofillActionConfigStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation_UNSPECIFIED
}

type AutofillActionConfigSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AutofillActionConfig carries the value to set into the datastore.
	// See the documentation on the AutofillActionConfig struct for which fields are required.
	Value *AutofillActionConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AutofillActionConfigSetRequest) Reset() {
	*x = AutofillActionConfigSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillActionConfigSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillActionConfigSetRequest) ProtoMessage() {}

func (x *AutofillActionConfigSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillActionConfigSetRequest.ProtoReflect.Descriptor instead.
func (*AutofillActionConfigSetRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{24}
}

func (x *AutofillActionConfigSetRequest) GetValue() *AutofillActionConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

type AutofillActionConfigSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value carries all the values given in the AutofillActionConfigSetRequest as well
	// as any server-generated values.
	Value *AutofillActionConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==CreatedAt will include this instance.
	//
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AutofillActionConfigSetResponse) Reset() {
	*x = AutofillActionConfigSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillActionConfigSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillActionConfigSetResponse) ProtoMessage() {}

func (x *AutofillActionConfigSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillActionConfigSetResponse.ProtoReflect.Descriptor instead.
func (*AutofillActionConfigSetResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{25}
}

func (x *AutofillActionConfigSetResponse) GetValue() *AutofillActionConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AutofillActionConfigSetResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type AutofillActionConfigSetSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value contains a list of AutofillActionConfig values to write.
	// It is possible to provide more values than can fit within either:
	//     - the maxiumum send size of the client
	//     - the maximum receive size of the server
	// If this error occurs you must reduce the number of values sent.
	// See gRPC "maximum message size" documentation for more information.
	Values []*AutofillActionConfig `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *AutofillActionConfigSetSomeRequest) Reset() {
	*x = AutofillActionConfigSetSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillActionConfigSetSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillActionConfigSetSomeRequest) ProtoMessage() {}

func (x *AutofillActionConfigSetSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillActionConfigSetSomeRequest.ProtoReflect.Descriptor instead.
func (*AutofillActionConfigSetSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{26}
}

func (x *AutofillActionConfigSetSomeRequest) GetValues() []*AutofillActionConfig {
	if x != nil {
		return x.Values
	}
	return nil
}

type AutofillActionConfigSetSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *AutofillActionKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Error string             `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *AutofillActionConfigSetSomeResponse) Reset() {
	*x = AutofillActionConfigSetSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillActionConfigSetSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillActionConfigSetSomeResponse) ProtoMessage() {}

func (x *AutofillActionConfigSetSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillActionConfigSetSomeResponse.ProtoReflect.Descriptor instead.
func (*AutofillActionConfigSetSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{27}
}

func (x *AutofillActionConfigSetSomeResponse) GetKey() *AutofillActionKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AutofillActionConfigSetSomeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type AutofillActionConfigDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key indicates which AutofillActionConfig instance to remove.
	// This field must always be set.
	Key *AutofillActionKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *AutofillActionConfigDeleteRequest) Reset() {
	*x = AutofillActionConfigDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillActionConfigDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillActionConfigDeleteRequest) ProtoMessage() {}

func (x *AutofillActionConfigDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillActionConfigDeleteRequest.ProtoReflect.Descriptor instead.
func (*AutofillActionConfigDeleteRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{28}
}

func (x *AutofillActionConfigDeleteRequest) GetKey() *AutofillActionKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type AutofillActionConfigDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key echoes back the key of the deleted AutofillActionConfig instance.
	Key *AutofillActionKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==DeletedAt will not include this instance.
	//
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AutofillActionConfigDeleteResponse) Reset() {
	*x = AutofillActionConfigDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillActionConfigDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillActionConfigDeleteResponse) ProtoMessage() {}

func (x *AutofillActionConfigDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillActionConfigDeleteResponse.ProtoReflect.Descriptor instead.
func (*AutofillActionConfigDeleteResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{29}
}

func (x *AutofillActionConfigDeleteResponse) GetKey() *AutofillActionKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AutofillActionConfigDeleteResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type AutofillActionConfigDeleteAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AutofillActionConfigDeleteAllRequest) Reset() {
	*x = AutofillActionConfigDeleteAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillActionConfigDeleteAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillActionConfigDeleteAllRequest) ProtoMessage() {}

func (x *AutofillActionConfigDeleteAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillActionConfigDeleteAllRequest.ProtoReflect.Descriptor instead.
func (*AutofillActionConfigDeleteAllRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{30}
}

type AutofillActionConfigDeleteAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This describes the class of delete error.
	Type fmp.DeleteError `protobuf:"varint,1,opt,name=type,proto3,enum=fmp.DeleteError" json:"type,omitempty"`
	// This indicates the error message from the delete failure.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// This is the key of the AutofillActionConfig instance that failed to be deleted.
	Key *AutofillActionKey `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp when the key was being deleted.
	Time *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AutofillActionConfigDeleteAllResponse) Reset() {
	*x = AutofillActionConfigDeleteAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillActionConfigDeleteAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillActionConfigDeleteAllResponse) ProtoMessage() {}

func (x *AutofillActionConfigDeleteAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillActionConfigDeleteAllResponse.ProtoReflect.Descriptor instead.
func (*AutofillActionConfigDeleteAllResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{31}
}

func (x *AutofillActionConfigDeleteAllResponse) GetType() fmp.DeleteError {
	if x != nil {
		return x.Type
	}
	return fmp.DeleteError_DELETE_ERROR_UNSPECIFIED
}

func (x *AutofillActionConfigDeleteAllResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *AutofillActionConfigDeleteAllResponse) GetKey() *AutofillActionKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AutofillActionConfigDeleteAllResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type InputsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a Inputs instance to retrieve.
	// This value must be populated.
	Key *InputsKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *InputsRequest) Reset() {
	*x = InputsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputsRequest) ProtoMessage() {}

func (x *InputsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputsRequest.ProtoReflect.Descriptor instead.
func (*InputsRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{32}
}

func (x *InputsRequest) GetKey() *InputsKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *InputsRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type InputsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *Inputs `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// Inputs instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *InputsResponse) Reset() {
	*x = InputsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputsResponse) ProtoMessage() {}

func (x *InputsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputsResponse.ProtoReflect.Descriptor instead.
func (*InputsResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{33}
}

func (x *InputsResponse) GetValue() *Inputs {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *InputsResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type InputsStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*Inputs `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each Inputs at end.
	//     * Each Inputs response is fully-specified (all fields set).
	//   * start: Returns the state of each Inputs at start, followed by updates until now.
	//     * Each Inputs response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each Inputs at start, followed by updates
	//     until end.
	//     * Each Inputs response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *InputsStreamRequest) Reset() {
	*x = InputsStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputsStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputsStreamRequest) ProtoMessage() {}

func (x *InputsStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputsStreamRequest.ProtoReflect.Descriptor instead.
func (*InputsStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{34}
}

func (x *InputsStreamRequest) GetPartialEqFilter() []*Inputs {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *InputsStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type InputsStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *Inputs `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this Inputs's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the Inputs value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *InputsStreamResponse) Reset() {
	*x = InputsStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputsStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputsStreamResponse) ProtoMessage() {}

func (x *InputsStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputsStreamResponse.ProtoReflect.Descriptor instead.
func (*InputsStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{35}
}

func (x *InputsStreamResponse) GetValue() *Inputs {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *InputsStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *InputsStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation_UNSPECIFIED
}

type InputsConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a InputsConfig instance to retrieve.
	// This value must be populated.
	Key *InputsKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *InputsConfigRequest) Reset() {
	*x = InputsConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputsConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputsConfigRequest) ProtoMessage() {}

func (x *InputsConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputsConfigRequest.ProtoReflect.Descriptor instead.
func (*InputsConfigRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{36}
}

func (x *InputsConfigRequest) GetKey() *InputsKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *InputsConfigRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type InputsConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *InputsConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// InputsConfig instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *InputsConfigResponse) Reset() {
	*x = InputsConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputsConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputsConfigResponse) ProtoMessage() {}

func (x *InputsConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputsConfigResponse.ProtoReflect.Descriptor instead.
func (*InputsConfigResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{37}
}

func (x *InputsConfigResponse) GetValue() *InputsConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *InputsConfigResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type InputsConfigStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*InputsConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each InputsConfig at end.
	//     * Each InputsConfig response is fully-specified (all fields set).
	//   * start: Returns the state of each InputsConfig at start, followed by updates until now.
	//     * Each InputsConfig response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each InputsConfig at start, followed by updates
	//     until end.
	//     * Each InputsConfig response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *InputsConfigStreamRequest) Reset() {
	*x = InputsConfigStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputsConfigStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputsConfigStreamRequest) ProtoMessage() {}

func (x *InputsConfigStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputsConfigStreamRequest.ProtoReflect.Descriptor instead.
func (*InputsConfigStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{38}
}

func (x *InputsConfigStreamRequest) GetPartialEqFilter() []*InputsConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *InputsConfigStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type InputsConfigStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *InputsConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this InputsConfig's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the InputsConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *InputsConfigStreamResponse) Reset() {
	*x = InputsConfigStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputsConfigStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputsConfigStreamResponse) ProtoMessage() {}

func (x *InputsConfigStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputsConfigStreamResponse.ProtoReflect.Descriptor instead.
func (*InputsConfigStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{39}
}

func (x *InputsConfigStreamResponse) GetValue() *InputsConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *InputsConfigStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *InputsConfigStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation_UNSPECIFIED
}

type InputsConfigSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// InputsConfig carries the value to set into the datastore.
	// See the documentation on the InputsConfig struct for which fields are required.
	Value *InputsConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *InputsConfigSetRequest) Reset() {
	*x = InputsConfigSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputsConfigSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputsConfigSetRequest) ProtoMessage() {}

func (x *InputsConfigSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputsConfigSetRequest.ProtoReflect.Descriptor instead.
func (*InputsConfigSetRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{40}
}

func (x *InputsConfigSetRequest) GetValue() *InputsConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

type InputsConfigSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value carries all the values given in the InputsConfigSetRequest as well
	// as any server-generated values.
	Value *InputsConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==CreatedAt will include this instance.
	//
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *InputsConfigSetResponse) Reset() {
	*x = InputsConfigSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputsConfigSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputsConfigSetResponse) ProtoMessage() {}

func (x *InputsConfigSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputsConfigSetResponse.ProtoReflect.Descriptor instead.
func (*InputsConfigSetResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{41}
}

func (x *InputsConfigSetResponse) GetValue() *InputsConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *InputsConfigSetResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type InputsConfigSetSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value contains a list of InputsConfig values to write.
	// It is possible to provide more values than can fit within either:
	//     - the maxiumum send size of the client
	//     - the maximum receive size of the server
	// If this error occurs you must reduce the number of values sent.
	// See gRPC "maximum message size" documentation for more information.
	Values []*InputsConfig `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *InputsConfigSetSomeRequest) Reset() {
	*x = InputsConfigSetSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputsConfigSetSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputsConfigSetSomeRequest) ProtoMessage() {}

func (x *InputsConfigSetSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputsConfigSetSomeRequest.ProtoReflect.Descriptor instead.
func (*InputsConfigSetSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{42}
}

func (x *InputsConfigSetSomeRequest) GetValues() []*InputsConfig {
	if x != nil {
		return x.Values
	}
	return nil
}

type InputsConfigSetSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *InputsKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Error string     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *InputsConfigSetSomeResponse) Reset() {
	*x = InputsConfigSetSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputsConfigSetSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputsConfigSetSomeResponse) ProtoMessage() {}

func (x *InputsConfigSetSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputsConfigSetSomeResponse.ProtoReflect.Descriptor instead.
func (*InputsConfigSetSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{43}
}

func (x *InputsConfigSetSomeResponse) GetKey() *InputsKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *InputsConfigSetSomeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type InputsConfigDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key indicates which InputsConfig instance to remove.
	// This field must always be set.
	Key *InputsKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *InputsConfigDeleteRequest) Reset() {
	*x = InputsConfigDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputsConfigDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputsConfigDeleteRequest) ProtoMessage() {}

func (x *InputsConfigDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputsConfigDeleteRequest.ProtoReflect.Descriptor instead.
func (*InputsConfigDeleteRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{44}
}

func (x *InputsConfigDeleteRequest) GetKey() *InputsKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type InputsConfigDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key echoes back the key of the deleted InputsConfig instance.
	Key *InputsKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==DeletedAt will not include this instance.
	//
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *InputsConfigDeleteResponse) Reset() {
	*x = InputsConfigDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputsConfigDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputsConfigDeleteResponse) ProtoMessage() {}

func (x *InputsConfigDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputsConfigDeleteResponse.ProtoReflect.Descriptor instead.
func (*InputsConfigDeleteResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{45}
}

func (x *InputsConfigDeleteResponse) GetKey() *InputsKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *InputsConfigDeleteResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type InputsConfigDeleteAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InputsConfigDeleteAllRequest) Reset() {
	*x = InputsConfigDeleteAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputsConfigDeleteAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputsConfigDeleteAllRequest) ProtoMessage() {}

func (x *InputsConfigDeleteAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputsConfigDeleteAllRequest.ProtoReflect.Descriptor instead.
func (*InputsConfigDeleteAllRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{46}
}

type InputsConfigDeleteAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This describes the class of delete error.
	Type fmp.DeleteError `protobuf:"varint,1,opt,name=type,proto3,enum=fmp.DeleteError" json:"type,omitempty"`
	// This indicates the error message from the delete failure.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// This is the key of the InputsConfig instance that failed to be deleted.
	Key *InputsKey `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp when the key was being deleted.
	Time *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *InputsConfigDeleteAllResponse) Reset() {
	*x = InputsConfigDeleteAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputsConfigDeleteAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputsConfigDeleteAllResponse) ProtoMessage() {}

func (x *InputsConfigDeleteAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputsConfigDeleteAllResponse.ProtoReflect.Descriptor instead.
func (*InputsConfigDeleteAllResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{47}
}

func (x *InputsConfigDeleteAllResponse) GetType() fmp.DeleteError {
	if x != nil {
		return x.Type
	}
	return fmp.DeleteError_DELETE_ERROR_UNSPECIFIED
}

func (x *InputsConfigDeleteAllResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *InputsConfigDeleteAllResponse) GetKey() *InputsKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *InputsConfigDeleteAllResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type SecretInputRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a SecretInput instance to retrieve.
	// This value must be populated.
	Key *InputsKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *SecretInputRequest) Reset() {
	*x = SecretInputRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretInputRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretInputRequest) ProtoMessage() {}

func (x *SecretInputRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretInputRequest.ProtoReflect.Descriptor instead.
func (*SecretInputRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{48}
}

func (x *SecretInputRequest) GetKey() *InputsKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *SecretInputRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type SecretInputResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *SecretInput `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// SecretInput instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *SecretInputResponse) Reset() {
	*x = SecretInputResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretInputResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretInputResponse) ProtoMessage() {}

func (x *SecretInputResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretInputResponse.ProtoReflect.Descriptor instead.
func (*SecretInputResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{49}
}

func (x *SecretInputResponse) GetValue() *SecretInput {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *SecretInputResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type SecretInputStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*SecretInput `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each SecretInput at end.
	//     * Each SecretInput response is fully-specified (all fields set).
	//   * start: Returns the state of each SecretInput at start, followed by updates until now.
	//     * Each SecretInput response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each SecretInput at start, followed by updates
	//     until end.
	//     * Each SecretInput response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *SecretInputStreamRequest) Reset() {
	*x = SecretInputStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretInputStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretInputStreamRequest) ProtoMessage() {}

func (x *SecretInputStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretInputStreamRequest.ProtoReflect.Descriptor instead.
func (*SecretInputStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{50}
}

func (x *SecretInputStreamRequest) GetPartialEqFilter() []*SecretInput {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *SecretInputStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type SecretInputStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *SecretInput `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this SecretInput's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the SecretInput value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *SecretInputStreamResponse) Reset() {
	*x = SecretInputStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretInputStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretInputStreamResponse) ProtoMessage() {}

func (x *SecretInputStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretInputStreamResponse.ProtoReflect.Descriptor instead.
func (*SecretInputStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{51}
}

func (x *SecretInputStreamResponse) GetValue() *SecretInput {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *SecretInputStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *SecretInputStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation_UNSPECIFIED
}

type StudioRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a Studio instance to retrieve.
	// This value must be populated.
	Key *StudioKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *StudioRequest) Reset() {
	*x = StudioRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioRequest) ProtoMessage() {}

func (x *StudioRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioRequest.ProtoReflect.Descriptor instead.
func (*StudioRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{52}
}

func (x *StudioRequest) GetKey() *StudioKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *StudioRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type StudioResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *Studio `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// Studio instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *StudioResponse) Reset() {
	*x = StudioResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioResponse) ProtoMessage() {}

func (x *StudioResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioResponse.ProtoReflect.Descriptor instead.
func (*StudioResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{53}
}

func (x *StudioResponse) GetValue() *Studio {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *StudioResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type StudioStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*Studio `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each Studio at end.
	//     * Each Studio response is fully-specified (all fields set).
	//   * start: Returns the state of each Studio at start, followed by updates until now.
	//     * Each Studio response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each Studio at start, followed by updates
	//     until end.
	//     * Each Studio response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *StudioStreamRequest) Reset() {
	*x = StudioStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioStreamRequest) ProtoMessage() {}

func (x *StudioStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioStreamRequest.ProtoReflect.Descriptor instead.
func (*StudioStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{54}
}

func (x *StudioStreamRequest) GetPartialEqFilter() []*Studio {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *StudioStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type StudioStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *Studio `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this Studio's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the Studio value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *StudioStreamResponse) Reset() {
	*x = StudioStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioStreamResponse) ProtoMessage() {}

func (x *StudioStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioStreamResponse.ProtoReflect.Descriptor instead.
func (*StudioStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{55}
}

func (x *StudioStreamResponse) GetValue() *Studio {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *StudioStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *StudioStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation_UNSPECIFIED
}

type StudioConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a StudioConfig instance to retrieve.
	// This value must be populated.
	Key *StudioKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *StudioConfigRequest) Reset() {
	*x = StudioConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioConfigRequest) ProtoMessage() {}

func (x *StudioConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioConfigRequest.ProtoReflect.Descriptor instead.
func (*StudioConfigRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{56}
}

func (x *StudioConfigRequest) GetKey() *StudioKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *StudioConfigRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type StudioConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *StudioConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// StudioConfig instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *StudioConfigResponse) Reset() {
	*x = StudioConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioConfigResponse) ProtoMessage() {}

func (x *StudioConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioConfigResponse.ProtoReflect.Descriptor instead.
func (*StudioConfigResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{57}
}

func (x *StudioConfigResponse) GetValue() *StudioConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *StudioConfigResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type StudioConfigStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*StudioConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each StudioConfig at end.
	//     * Each StudioConfig response is fully-specified (all fields set).
	//   * start: Returns the state of each StudioConfig at start, followed by updates until now.
	//     * Each StudioConfig response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each StudioConfig at start, followed by updates
	//     until end.
	//     * Each StudioConfig response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *StudioConfigStreamRequest) Reset() {
	*x = StudioConfigStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioConfigStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioConfigStreamRequest) ProtoMessage() {}

func (x *StudioConfigStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioConfigStreamRequest.ProtoReflect.Descriptor instead.
func (*StudioConfigStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{58}
}

func (x *StudioConfigStreamRequest) GetPartialEqFilter() []*StudioConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *StudioConfigStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type StudioConfigStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *StudioConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this StudioConfig's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the StudioConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *StudioConfigStreamResponse) Reset() {
	*x = StudioConfigStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioConfigStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioConfigStreamResponse) ProtoMessage() {}

func (x *StudioConfigStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioConfigStreamResponse.ProtoReflect.Descriptor instead.
func (*StudioConfigStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{59}
}

func (x *StudioConfigStreamResponse) GetValue() *StudioConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *StudioConfigStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *StudioConfigStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation_UNSPECIFIED
}

type StudioConfigSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// StudioConfig carries the value to set into the datastore.
	// See the documentation on the StudioConfig struct for which fields are required.
	Value *StudioConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *StudioConfigSetRequest) Reset() {
	*x = StudioConfigSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioConfigSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioConfigSetRequest) ProtoMessage() {}

func (x *StudioConfigSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioConfigSetRequest.ProtoReflect.Descriptor instead.
func (*StudioConfigSetRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{60}
}

func (x *StudioConfigSetRequest) GetValue() *StudioConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

type StudioConfigSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value carries all the values given in the StudioConfigSetRequest as well
	// as any server-generated values.
	Value *StudioConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==CreatedAt will include this instance.
	//
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *StudioConfigSetResponse) Reset() {
	*x = StudioConfigSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioConfigSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioConfigSetResponse) ProtoMessage() {}

func (x *StudioConfigSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioConfigSetResponse.ProtoReflect.Descriptor instead.
func (*StudioConfigSetResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{61}
}

func (x *StudioConfigSetResponse) GetValue() *StudioConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *StudioConfigSetResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type StudioConfigSetSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value contains a list of StudioConfig values to write.
	// It is possible to provide more values than can fit within either:
	//     - the maxiumum send size of the client
	//     - the maximum receive size of the server
	// If this error occurs you must reduce the number of values sent.
	// See gRPC "maximum message size" documentation for more information.
	Values []*StudioConfig `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *StudioConfigSetSomeRequest) Reset() {
	*x = StudioConfigSetSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioConfigSetSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioConfigSetSomeRequest) ProtoMessage() {}

func (x *StudioConfigSetSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioConfigSetSomeRequest.ProtoReflect.Descriptor instead.
func (*StudioConfigSetSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{62}
}

func (x *StudioConfigSetSomeRequest) GetValues() []*StudioConfig {
	if x != nil {
		return x.Values
	}
	return nil
}

type StudioConfigSetSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *StudioKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Error string     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *StudioConfigSetSomeResponse) Reset() {
	*x = StudioConfigSetSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioConfigSetSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioConfigSetSomeResponse) ProtoMessage() {}

func (x *StudioConfigSetSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioConfigSetSomeResponse.ProtoReflect.Descriptor instead.
func (*StudioConfigSetSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{63}
}

func (x *StudioConfigSetSomeResponse) GetKey() *StudioKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *StudioConfigSetSomeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type StudioConfigDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key indicates which StudioConfig instance to remove.
	// This field must always be set.
	Key *StudioKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *StudioConfigDeleteRequest) Reset() {
	*x = StudioConfigDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioConfigDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioConfigDeleteRequest) ProtoMessage() {}

func (x *StudioConfigDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioConfigDeleteRequest.ProtoReflect.Descriptor instead.
func (*StudioConfigDeleteRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{64}
}

func (x *StudioConfigDeleteRequest) GetKey() *StudioKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type StudioConfigDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key echoes back the key of the deleted StudioConfig instance.
	Key *StudioKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==DeletedAt will not include this instance.
	//
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *StudioConfigDeleteResponse) Reset() {
	*x = StudioConfigDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioConfigDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioConfigDeleteResponse) ProtoMessage() {}

func (x *StudioConfigDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioConfigDeleteResponse.ProtoReflect.Descriptor instead.
func (*StudioConfigDeleteResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{65}
}

func (x *StudioConfigDeleteResponse) GetKey() *StudioKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *StudioConfigDeleteResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type StudioConfigDeleteAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StudioConfigDeleteAllRequest) Reset() {
	*x = StudioConfigDeleteAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioConfigDeleteAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioConfigDeleteAllRequest) ProtoMessage() {}

func (x *StudioConfigDeleteAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioConfigDeleteAllRequest.ProtoReflect.Descriptor instead.
func (*StudioConfigDeleteAllRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{66}
}

type StudioConfigDeleteAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This describes the class of delete error.
	Type fmp.DeleteError `protobuf:"varint,1,opt,name=type,proto3,enum=fmp.DeleteError" json:"type,omitempty"`
	// This indicates the error message from the delete failure.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// This is the key of the StudioConfig instance that failed to be deleted.
	Key *StudioKey `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp when the key was being deleted.
	Time *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *StudioConfigDeleteAllResponse) Reset() {
	*x = StudioConfigDeleteAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioConfigDeleteAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioConfigDeleteAllResponse) ProtoMessage() {}

func (x *StudioConfigDeleteAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioConfigDeleteAllResponse.ProtoReflect.Descriptor instead.
func (*StudioConfigDeleteAllResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{67}
}

func (x *StudioConfigDeleteAllResponse) GetType() fmp.DeleteError {
	if x != nil {
		return x.Type
	}
	return fmp.DeleteError_DELETE_ERROR_UNSPECIFIED
}

func (x *StudioConfigDeleteAllResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *StudioConfigDeleteAllResponse) GetKey() *StudioKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *StudioConfigDeleteAllResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type StudioSummaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a StudioSummary instance to retrieve.
	// This value must be populated.
	Key *StudioKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *StudioSummaryRequest) Reset() {
	*x = StudioSummaryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioSummaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioSummaryRequest) ProtoMessage() {}

func (x *StudioSummaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioSummaryRequest.ProtoReflect.Descriptor instead.
func (*StudioSummaryRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{68}
}

func (x *StudioSummaryRequest) GetKey() *StudioKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *StudioSummaryRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type StudioSummaryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *StudioSummary `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// StudioSummary instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *StudioSummaryResponse) Reset() {
	*x = StudioSummaryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioSummaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioSummaryResponse) ProtoMessage() {}

func (x *StudioSummaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioSummaryResponse.ProtoReflect.Descriptor instead.
func (*StudioSummaryResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{69}
}

func (x *StudioSummaryResponse) GetValue() *StudioSummary {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *StudioSummaryResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type StudioSummaryStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*StudioSummary `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each StudioSummary at end.
	//     * Each StudioSummary response is fully-specified (all fields set).
	//   * start: Returns the state of each StudioSummary at start, followed by updates until now.
	//     * Each StudioSummary response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each StudioSummary at start, followed by updates
	//     until end.
	//     * Each StudioSummary response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *StudioSummaryStreamRequest) Reset() {
	*x = StudioSummaryStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioSummaryStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioSummaryStreamRequest) ProtoMessage() {}

func (x *StudioSummaryStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioSummaryStreamRequest.ProtoReflect.Descriptor instead.
func (*StudioSummaryStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{70}
}

func (x *StudioSummaryStreamRequest) GetPartialEqFilter() []*StudioSummary {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *StudioSummaryStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type StudioSummaryStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *StudioSummary `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this StudioSummary's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the StudioSummary value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *StudioSummaryStreamResponse) Reset() {
	*x = StudioSummaryStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioSummaryStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioSummaryStreamResponse) ProtoMessage() {}

func (x *StudioSummaryStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioSummaryStreamResponse.ProtoReflect.Descriptor instead.
func (*StudioSummaryStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{71}
}

func (x *StudioSummaryStreamResponse) GetValue() *StudioSummary {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *StudioSummaryStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *StudioSummaryStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation_UNSPECIFIED
}

type TopologyInputRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a TopologyInput instance to retrieve.
	// This value must be populated.
	Key *TopologyInputKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TopologyInputRequest) Reset() {
	*x = TopologyInputRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyInputRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyInputRequest) ProtoMessage() {}

func (x *TopologyInputRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyInputRequest.ProtoReflect.Descriptor instead.
func (*TopologyInputRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{72}
}

func (x *TopologyInputRequest) GetKey() *TopologyInputKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TopologyInputRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type TopologyInputResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *TopologyInput `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// TopologyInput instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TopologyInputResponse) Reset() {
	*x = TopologyInputResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyInputResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyInputResponse) ProtoMessage() {}

func (x *TopologyInputResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyInputResponse.ProtoReflect.Descriptor instead.
func (*TopologyInputResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{73}
}

func (x *TopologyInputResponse) GetValue() *TopologyInput {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TopologyInputResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type TopologyInputStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*TopologyInput `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each TopologyInput at end.
	//     * Each TopologyInput response is fully-specified (all fields set).
	//   * start: Returns the state of each TopologyInput at start, followed by updates until now.
	//     * Each TopologyInput response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each TopologyInput at start, followed by updates
	//     until end.
	//     * Each TopologyInput response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TopologyInputStreamRequest) Reset() {
	*x = TopologyInputStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyInputStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyInputStreamRequest) ProtoMessage() {}

func (x *TopologyInputStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyInputStreamRequest.ProtoReflect.Descriptor instead.
func (*TopologyInputStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{74}
}

func (x *TopologyInputStreamRequest) GetPartialEqFilter() []*TopologyInput {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *TopologyInputStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type TopologyInputStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *TopologyInput `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this TopologyInput's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the TopologyInput value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *TopologyInputStreamResponse) Reset() {
	*x = TopologyInputStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyInputStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyInputStreamResponse) ProtoMessage() {}

func (x *TopologyInputStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyInputStreamResponse.ProtoReflect.Descriptor instead.
func (*TopologyInputStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{75}
}

func (x *TopologyInputStreamResponse) GetValue() *TopologyInput {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TopologyInputStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *TopologyInputStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation_UNSPECIFIED
}

type TopologyInputConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a TopologyInputConfig instance to retrieve.
	// This value must be populated.
	Key *TopologyInputKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TopologyInputConfigRequest) Reset() {
	*x = TopologyInputConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyInputConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyInputConfigRequest) ProtoMessage() {}

func (x *TopologyInputConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyInputConfigRequest.ProtoReflect.Descriptor instead.
func (*TopologyInputConfigRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{76}
}

func (x *TopologyInputConfigRequest) GetKey() *TopologyInputKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TopologyInputConfigRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type TopologyInputConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *TopologyInputConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// TopologyInputConfig instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TopologyInputConfigResponse) Reset() {
	*x = TopologyInputConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyInputConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyInputConfigResponse) ProtoMessage() {}

func (x *TopologyInputConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyInputConfigResponse.ProtoReflect.Descriptor instead.
func (*TopologyInputConfigResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{77}
}

func (x *TopologyInputConfigResponse) GetValue() *TopologyInputConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TopologyInputConfigResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type TopologyInputConfigStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*TopologyInputConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each TopologyInputConfig at end.
	//     * Each TopologyInputConfig response is fully-specified (all fields set).
	//   * start: Returns the state of each TopologyInputConfig at start, followed by updates until now.
	//     * Each TopologyInputConfig response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each TopologyInputConfig at start, followed by updates
	//     until end.
	//     * Each TopologyInputConfig response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TopologyInputConfigStreamRequest) Reset() {
	*x = TopologyInputConfigStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyInputConfigStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyInputConfigStreamRequest) ProtoMessage() {}

func (x *TopologyInputConfigStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyInputConfigStreamRequest.ProtoReflect.Descriptor instead.
func (*TopologyInputConfigStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{78}
}

func (x *TopologyInputConfigStreamRequest) GetPartialEqFilter() []*TopologyInputConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *TopologyInputConfigStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type TopologyInputConfigStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *TopologyInputConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this TopologyInputConfig's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the TopologyInputConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *TopologyInputConfigStreamResponse) Reset() {
	*x = TopologyInputConfigStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyInputConfigStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyInputConfigStreamResponse) ProtoMessage() {}

func (x *TopologyInputConfigStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyInputConfigStreamResponse.ProtoReflect.Descriptor instead.
func (*TopologyInputConfigStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{79}
}

func (x *TopologyInputConfigStreamResponse) GetValue() *TopologyInputConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TopologyInputConfigStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *TopologyInputConfigStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation_UNSPECIFIED
}

type TopologyInputConfigSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TopologyInputConfig carries the value to set into the datastore.
	// See the documentation on the TopologyInputConfig struct for which fields are required.
	Value *TopologyInputConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TopologyInputConfigSetRequest) Reset() {
	*x = TopologyInputConfigSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyInputConfigSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyInputConfigSetRequest) ProtoMessage() {}

func (x *TopologyInputConfigSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyInputConfigSetRequest.ProtoReflect.Descriptor instead.
func (*TopologyInputConfigSetRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{80}
}

func (x *TopologyInputConfigSetRequest) GetValue() *TopologyInputConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

type TopologyInputConfigSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value carries all the values given in the TopologyInputConfigSetRequest as well
	// as any server-generated values.
	Value *TopologyInputConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==CreatedAt will include this instance.
	//
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TopologyInputConfigSetResponse) Reset() {
	*x = TopologyInputConfigSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyInputConfigSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyInputConfigSetResponse) ProtoMessage() {}

func (x *TopologyInputConfigSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyInputConfigSetResponse.ProtoReflect.Descriptor instead.
func (*TopologyInputConfigSetResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{81}
}

func (x *TopologyInputConfigSetResponse) GetValue() *TopologyInputConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TopologyInputConfigSetResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type TopologyInputConfigSetSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value contains a list of TopologyInputConfig values to write.
	// It is possible to provide more values than can fit within either:
	//     - the maxiumum send size of the client
	//     - the maximum receive size of the server
	// If this error occurs you must reduce the number of values sent.
	// See gRPC "maximum message size" documentation for more information.
	Values []*TopologyInputConfig `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *TopologyInputConfigSetSomeRequest) Reset() {
	*x = TopologyInputConfigSetSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyInputConfigSetSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyInputConfigSetSomeRequest) ProtoMessage() {}

func (x *TopologyInputConfigSetSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyInputConfigSetSomeRequest.ProtoReflect.Descriptor instead.
func (*TopologyInputConfigSetSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{82}
}

func (x *TopologyInputConfigSetSomeRequest) GetValues() []*TopologyInputConfig {
	if x != nil {
		return x.Values
	}
	return nil
}

type TopologyInputConfigSetSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *TopologyInputKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Error string            `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *TopologyInputConfigSetSomeResponse) Reset() {
	*x = TopologyInputConfigSetSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyInputConfigSetSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyInputConfigSetSomeResponse) ProtoMessage() {}

func (x *TopologyInputConfigSetSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyInputConfigSetSomeResponse.ProtoReflect.Descriptor instead.
func (*TopologyInputConfigSetSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{83}
}

func (x *TopologyInputConfigSetSomeResponse) GetKey() *TopologyInputKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TopologyInputConfigSetSomeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type TopologyInputConfigDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key indicates which TopologyInputConfig instance to remove.
	// This field must always be set.
	Key *TopologyInputKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *TopologyInputConfigDeleteRequest) Reset() {
	*x = TopologyInputConfigDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyInputConfigDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyInputConfigDeleteRequest) ProtoMessage() {}

func (x *TopologyInputConfigDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyInputConfigDeleteRequest.ProtoReflect.Descriptor instead.
func (*TopologyInputConfigDeleteRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{84}
}

func (x *TopologyInputConfigDeleteRequest) GetKey() *TopologyInputKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type TopologyInputConfigDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key echoes back the key of the deleted TopologyInputConfig instance.
	Key *TopologyInputKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==DeletedAt will not include this instance.
	//
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TopologyInputConfigDeleteResponse) Reset() {
	*x = TopologyInputConfigDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyInputConfigDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyInputConfigDeleteResponse) ProtoMessage() {}

func (x *TopologyInputConfigDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyInputConfigDeleteResponse.ProtoReflect.Descriptor instead.
func (*TopologyInputConfigDeleteResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{85}
}

func (x *TopologyInputConfigDeleteResponse) GetKey() *TopologyInputKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TopologyInputConfigDeleteResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type TopologyInputConfigDeleteAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TopologyInputConfigDeleteAllRequest) Reset() {
	*x = TopologyInputConfigDeleteAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyInputConfigDeleteAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyInputConfigDeleteAllRequest) ProtoMessage() {}

func (x *TopologyInputConfigDeleteAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyInputConfigDeleteAllRequest.ProtoReflect.Descriptor instead.
func (*TopologyInputConfigDeleteAllRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{86}
}

type TopologyInputConfigDeleteAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This describes the class of delete error.
	Type fmp.DeleteError `protobuf:"varint,1,opt,name=type,proto3,enum=fmp.DeleteError" json:"type,omitempty"`
	// This indicates the error message from the delete failure.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// This is the key of the TopologyInputConfig instance that failed to be deleted.
	Key *TopologyInputKey `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp when the key was being deleted.
	Time *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TopologyInputConfigDeleteAllResponse) Reset() {
	*x = TopologyInputConfigDeleteAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyInputConfigDeleteAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyInputConfigDeleteAllResponse) ProtoMessage() {}

func (x *TopologyInputConfigDeleteAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyInputConfigDeleteAllResponse.ProtoReflect.Descriptor instead.
func (*TopologyInputConfigDeleteAllResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{87}
}

func (x *TopologyInputConfigDeleteAllResponse) GetType() fmp.DeleteError {
	if x != nil {
		return x.Type
	}
	return fmp.DeleteError_DELETE_ERROR_UNSPECIFIED
}

func (x *TopologyInputConfigDeleteAllResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TopologyInputConfigDeleteAllResponse) GetKey() *TopologyInputKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TopologyInputConfigDeleteAllResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type TopologyUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a TopologyUpdate instance to retrieve.
	// This value must be populated.
	Key *TopologyUpdateKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TopologyUpdateRequest) Reset() {
	*x = TopologyUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyUpdateRequest) ProtoMessage() {}

func (x *TopologyUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyUpdateRequest.ProtoReflect.Descriptor instead.
func (*TopologyUpdateRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{88}
}

func (x *TopologyUpdateRequest) GetKey() *TopologyUpdateKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TopologyUpdateRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type TopologyUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *TopologyUpdate `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// TopologyUpdate instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TopologyUpdateResponse) Reset() {
	*x = TopologyUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyUpdateResponse) ProtoMessage() {}

func (x *TopologyUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyUpdateResponse.ProtoReflect.Descriptor instead.
func (*TopologyUpdateResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{89}
}

func (x *TopologyUpdateResponse) GetValue() *TopologyUpdate {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TopologyUpdateResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type TopologyUpdateStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*TopologyUpdate `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each TopologyUpdate at end.
	//     * Each TopologyUpdate response is fully-specified (all fields set).
	//   * start: Returns the state of each TopologyUpdate at start, followed by updates until now.
	//     * Each TopologyUpdate response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each TopologyUpdate at start, followed by updates
	//     until end.
	//     * Each TopologyUpdate response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TopologyUpdateStreamRequest) Reset() {
	*x = TopologyUpdateStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyUpdateStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyUpdateStreamRequest) ProtoMessage() {}

func (x *TopologyUpdateStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyUpdateStreamRequest.ProtoReflect.Descriptor instead.
func (*TopologyUpdateStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{90}
}

func (x *TopologyUpdateStreamRequest) GetPartialEqFilter() []*TopologyUpdate {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *TopologyUpdateStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type TopologyUpdateStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *TopologyUpdate `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this TopologyUpdate's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the TopologyUpdate value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *TopologyUpdateStreamResponse) Reset() {
	*x = TopologyUpdateStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyUpdateStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyUpdateStreamResponse) ProtoMessage() {}

func (x *TopologyUpdateStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyUpdateStreamResponse.ProtoReflect.Descriptor instead.
func (*TopologyUpdateStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{91}
}

func (x *TopologyUpdateStreamResponse) GetValue() *TopologyUpdate {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TopologyUpdateStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *TopologyUpdateStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation_UNSPECIFIED
}

type TopologyUpdateConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a TopologyUpdateConfig instance to retrieve.
	// This value must be populated.
	Key *TopologyUpdateKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TopologyUpdateConfigRequest) Reset() {
	*x = TopologyUpdateConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyUpdateConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyUpdateConfigRequest) ProtoMessage() {}

func (x *TopologyUpdateConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyUpdateConfigRequest.ProtoReflect.Descriptor instead.
func (*TopologyUpdateConfigRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{92}
}

func (x *TopologyUpdateConfigRequest) GetKey() *TopologyUpdateKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TopologyUpdateConfigRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type TopologyUpdateConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *TopologyUpdateConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// TopologyUpdateConfig instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TopologyUpdateConfigResponse) Reset() {
	*x = TopologyUpdateConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyUpdateConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyUpdateConfigResponse) ProtoMessage() {}

func (x *TopologyUpdateConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyUpdateConfigResponse.ProtoReflect.Descriptor instead.
func (*TopologyUpdateConfigResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{93}
}

func (x *TopologyUpdateConfigResponse) GetValue() *TopologyUpdateConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TopologyUpdateConfigResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type TopologyUpdateConfigStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*TopologyUpdateConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each TopologyUpdateConfig at end.
	//     * Each TopologyUpdateConfig response is fully-specified (all fields set).
	//   * start: Returns the state of each TopologyUpdateConfig at start, followed by updates until now.
	//     * Each TopologyUpdateConfig response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each TopologyUpdateConfig at start, followed by updates
	//     until end.
	//     * Each TopologyUpdateConfig response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TopologyUpdateConfigStreamRequest) Reset() {
	*x = TopologyUpdateConfigStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyUpdateConfigStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyUpdateConfigStreamRequest) ProtoMessage() {}

func (x *TopologyUpdateConfigStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyUpdateConfigStreamRequest.ProtoReflect.Descriptor instead.
func (*TopologyUpdateConfigStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{94}
}

func (x *TopologyUpdateConfigStreamRequest) GetPartialEqFilter() []*TopologyUpdateConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *TopologyUpdateConfigStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type TopologyUpdateConfigStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *TopologyUpdateConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this TopologyUpdateConfig's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the TopologyUpdateConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *TopologyUpdateConfigStreamResponse) Reset() {
	*x = TopologyUpdateConfigStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyUpdateConfigStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyUpdateConfigStreamResponse) ProtoMessage() {}

func (x *TopologyUpdateConfigStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyUpdateConfigStreamResponse.ProtoReflect.Descriptor instead.
func (*TopologyUpdateConfigStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{95}
}

func (x *TopologyUpdateConfigStreamResponse) GetValue() *TopologyUpdateConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TopologyUpdateConfigStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *TopologyUpdateConfigStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation_UNSPECIFIED
}

type TopologyUpdateConfigSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TopologyUpdateConfig carries the value to set into the datastore.
	// See the documentation on the TopologyUpdateConfig struct for which fields are required.
	Value *TopologyUpdateConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TopologyUpdateConfigSetRequest) Reset() {
	*x = TopologyUpdateConfigSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyUpdateConfigSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyUpdateConfigSetRequest) ProtoMessage() {}

func (x *TopologyUpdateConfigSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyUpdateConfigSetRequest.ProtoReflect.Descriptor instead.
func (*TopologyUpdateConfigSetRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{96}
}

func (x *TopologyUpdateConfigSetRequest) GetValue() *TopologyUpdateConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

type TopologyUpdateConfigSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value carries all the values given in the TopologyUpdateConfigSetRequest as well
	// as any server-generated values.
	Value *TopologyUpdateConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==CreatedAt will include this instance.
	//
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TopologyUpdateConfigSetResponse) Reset() {
	*x = TopologyUpdateConfigSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyUpdateConfigSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyUpdateConfigSetResponse) ProtoMessage() {}

func (x *TopologyUpdateConfigSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyUpdateConfigSetResponse.ProtoReflect.Descriptor instead.
func (*TopologyUpdateConfigSetResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{97}
}

func (x *TopologyUpdateConfigSetResponse) GetValue() *TopologyUpdateConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TopologyUpdateConfigSetResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type TopologyUpdateConfigSetSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value contains a list of TopologyUpdateConfig values to write.
	// It is possible to provide more values than can fit within either:
	//     - the maxiumum send size of the client
	//     - the maximum receive size of the server
	// If this error occurs you must reduce the number of values sent.
	// See gRPC "maximum message size" documentation for more information.
	Values []*TopologyUpdateConfig `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *TopologyUpdateConfigSetSomeRequest) Reset() {
	*x = TopologyUpdateConfigSetSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyUpdateConfigSetSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyUpdateConfigSetSomeRequest) ProtoMessage() {}

func (x *TopologyUpdateConfigSetSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyUpdateConfigSetSomeRequest.ProtoReflect.Descriptor instead.
func (*TopologyUpdateConfigSetSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{98}
}

func (x *TopologyUpdateConfigSetSomeRequest) GetValues() []*TopologyUpdateConfig {
	if x != nil {
		return x.Values
	}
	return nil
}

type TopologyUpdateConfigSetSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *TopologyUpdateKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Error string             `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *TopologyUpdateConfigSetSomeResponse) Reset() {
	*x = TopologyUpdateConfigSetSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyUpdateConfigSetSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyUpdateConfigSetSomeResponse) ProtoMessage() {}

func (x *TopologyUpdateConfigSetSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyUpdateConfigSetSomeResponse.ProtoReflect.Descriptor instead.
func (*TopologyUpdateConfigSetSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{99}
}

func (x *TopologyUpdateConfigSetSomeResponse) GetKey() *TopologyUpdateKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TopologyUpdateConfigSetSomeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type TopologyUpdateConfigDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key indicates which TopologyUpdateConfig instance to remove.
	// This field must always be set.
	Key *TopologyUpdateKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *TopologyUpdateConfigDeleteRequest) Reset() {
	*x = TopologyUpdateConfigDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyUpdateConfigDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyUpdateConfigDeleteRequest) ProtoMessage() {}

func (x *TopologyUpdateConfigDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyUpdateConfigDeleteRequest.ProtoReflect.Descriptor instead.
func (*TopologyUpdateConfigDeleteRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{100}
}

func (x *TopologyUpdateConfigDeleteRequest) GetKey() *TopologyUpdateKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type TopologyUpdateConfigDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key echoes back the key of the deleted TopologyUpdateConfig instance.
	Key *TopologyUpdateKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==DeletedAt will not include this instance.
	//
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TopologyUpdateConfigDeleteResponse) Reset() {
	*x = TopologyUpdateConfigDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyUpdateConfigDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyUpdateConfigDeleteResponse) ProtoMessage() {}

func (x *TopologyUpdateConfigDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyUpdateConfigDeleteResponse.ProtoReflect.Descriptor instead.
func (*TopologyUpdateConfigDeleteResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{101}
}

func (x *TopologyUpdateConfigDeleteResponse) GetKey() *TopologyUpdateKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TopologyUpdateConfigDeleteResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type TopologyUpdateConfigDeleteAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TopologyUpdateConfigDeleteAllRequest) Reset() {
	*x = TopologyUpdateConfigDeleteAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyUpdateConfigDeleteAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyUpdateConfigDeleteAllRequest) ProtoMessage() {}

func (x *TopologyUpdateConfigDeleteAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyUpdateConfigDeleteAllRequest.ProtoReflect.Descriptor instead.
func (*TopologyUpdateConfigDeleteAllRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{102}
}

type TopologyUpdateConfigDeleteAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This describes the class of delete error.
	Type fmp.DeleteError `protobuf:"varint,1,opt,name=type,proto3,enum=fmp.DeleteError" json:"type,omitempty"`
	// This indicates the error message from the delete failure.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// This is the key of the TopologyUpdateConfig instance that failed to be deleted.
	Key *TopologyUpdateKey `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp when the key was being deleted.
	Time *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TopologyUpdateConfigDeleteAllResponse) Reset() {
	*x = TopologyUpdateConfigDeleteAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyUpdateConfigDeleteAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyUpdateConfigDeleteAllResponse) ProtoMessage() {}

func (x *TopologyUpdateConfigDeleteAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyUpdateConfigDeleteAllResponse.ProtoReflect.Descriptor instead.
func (*TopologyUpdateConfigDeleteAllResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{103}
}

func (x *TopologyUpdateConfigDeleteAllResponse) GetType() fmp.DeleteError {
	if x != nil {
		return x.Type
	}
	return fmp.DeleteError_DELETE_ERROR_UNSPECIFIED
}

func (x *TopologyUpdateConfigDeleteAllResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TopologyUpdateConfigDeleteAllResponse) GetKey() *TopologyUpdateKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TopologyUpdateConfigDeleteAllResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type TopologyUpdateSyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a TopologyUpdateSync instance to retrieve.
	// This value must be populated.
	Key *WorkspaceKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TopologyUpdateSyncRequest) Reset() {
	*x = TopologyUpdateSyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyUpdateSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyUpdateSyncRequest) ProtoMessage() {}

func (x *TopologyUpdateSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyUpdateSyncRequest.ProtoReflect.Descriptor instead.
func (*TopologyUpdateSyncRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{104}
}

func (x *TopologyUpdateSyncRequest) GetKey() *WorkspaceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TopologyUpdateSyncRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type TopologyUpdateSyncResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *TopologyUpdateSync `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// TopologyUpdateSync instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TopologyUpdateSyncResponse) Reset() {
	*x = TopologyUpdateSyncResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyUpdateSyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyUpdateSyncResponse) ProtoMessage() {}

func (x *TopologyUpdateSyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyUpdateSyncResponse.ProtoReflect.Descriptor instead.
func (*TopologyUpdateSyncResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{105}
}

func (x *TopologyUpdateSyncResponse) GetValue() *TopologyUpdateSync {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TopologyUpdateSyncResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type TopologyUpdateSyncStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*TopologyUpdateSync `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each TopologyUpdateSync at end.
	//     * Each TopologyUpdateSync response is fully-specified (all fields set).
	//   * start: Returns the state of each TopologyUpdateSync at start, followed by updates until now.
	//     * Each TopologyUpdateSync response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each TopologyUpdateSync at start, followed by updates
	//     until end.
	//     * Each TopologyUpdateSync response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TopologyUpdateSyncStreamRequest) Reset() {
	*x = TopologyUpdateSyncStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyUpdateSyncStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyUpdateSyncStreamRequest) ProtoMessage() {}

func (x *TopologyUpdateSyncStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyUpdateSyncStreamRequest.ProtoReflect.Descriptor instead.
func (*TopologyUpdateSyncStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{106}
}

func (x *TopologyUpdateSyncStreamRequest) GetPartialEqFilter() []*TopologyUpdateSync {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *TopologyUpdateSyncStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type TopologyUpdateSyncStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *TopologyUpdateSync `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this TopologyUpdateSync's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the TopologyUpdateSync value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *TopologyUpdateSyncStreamResponse) Reset() {
	*x = TopologyUpdateSyncStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyUpdateSyncStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyUpdateSyncStreamResponse) ProtoMessage() {}

func (x *TopologyUpdateSyncStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyUpdateSyncStreamResponse.ProtoReflect.Descriptor instead.
func (*TopologyUpdateSyncStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{107}
}

func (x *TopologyUpdateSyncStreamResponse) GetValue() *TopologyUpdateSync {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TopologyUpdateSyncStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *TopologyUpdateSyncStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation_UNSPECIFIED
}

type TopologyUpdateSyncConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a TopologyUpdateSyncConfig instance to retrieve.
	// This value must be populated.
	Key *WorkspaceKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TopologyUpdateSyncConfigRequest) Reset() {
	*x = TopologyUpdateSyncConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyUpdateSyncConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyUpdateSyncConfigRequest) ProtoMessage() {}

func (x *TopologyUpdateSyncConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyUpdateSyncConfigRequest.ProtoReflect.Descriptor instead.
func (*TopologyUpdateSyncConfigRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{108}
}

func (x *TopologyUpdateSyncConfigRequest) GetKey() *WorkspaceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TopologyUpdateSyncConfigRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type TopologyUpdateSyncConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *TopologyUpdateSyncConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// TopologyUpdateSyncConfig instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TopologyUpdateSyncConfigResponse) Reset() {
	*x = TopologyUpdateSyncConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyUpdateSyncConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyUpdateSyncConfigResponse) ProtoMessage() {}

func (x *TopologyUpdateSyncConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyUpdateSyncConfigResponse.ProtoReflect.Descriptor instead.
func (*TopologyUpdateSyncConfigResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{109}
}

func (x *TopologyUpdateSyncConfigResponse) GetValue() *TopologyUpdateSyncConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TopologyUpdateSyncConfigResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type TopologyUpdateSyncConfigStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*TopologyUpdateSyncConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each TopologyUpdateSyncConfig at end.
	//     * Each TopologyUpdateSyncConfig response is fully-specified (all fields set).
	//   * start: Returns the state of each TopologyUpdateSyncConfig at start, followed by updates until now.
	//     * Each TopologyUpdateSyncConfig response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each TopologyUpdateSyncConfig at start, followed by updates
	//     until end.
	//     * Each TopologyUpdateSyncConfig response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TopologyUpdateSyncConfigStreamRequest) Reset() {
	*x = TopologyUpdateSyncConfigStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyUpdateSyncConfigStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyUpdateSyncConfigStreamRequest) ProtoMessage() {}

func (x *TopologyUpdateSyncConfigStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyUpdateSyncConfigStreamRequest.ProtoReflect.Descriptor instead.
func (*TopologyUpdateSyncConfigStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{110}
}

func (x *TopologyUpdateSyncConfigStreamRequest) GetPartialEqFilter() []*TopologyUpdateSyncConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *TopologyUpdateSyncConfigStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type TopologyUpdateSyncConfigStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *TopologyUpdateSyncConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this TopologyUpdateSyncConfig's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the TopologyUpdateSyncConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *TopologyUpdateSyncConfigStreamResponse) Reset() {
	*x = TopologyUpdateSyncConfigStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyUpdateSyncConfigStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyUpdateSyncConfigStreamResponse) ProtoMessage() {}

func (x *TopologyUpdateSyncConfigStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyUpdateSyncConfigStreamResponse.ProtoReflect.Descriptor instead.
func (*TopologyUpdateSyncConfigStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{111}
}

func (x *TopologyUpdateSyncConfigStreamResponse) GetValue() *TopologyUpdateSyncConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TopologyUpdateSyncConfigStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *TopologyUpdateSyncConfigStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation_UNSPECIFIED
}

type TopologyUpdateSyncConfigSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TopologyUpdateSyncConfig carries the value to set into the datastore.
	// See the documentation on the TopologyUpdateSyncConfig struct for which fields are required.
	Value *TopologyUpdateSyncConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TopologyUpdateSyncConfigSetRequest) Reset() {
	*x = TopologyUpdateSyncConfigSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyUpdateSyncConfigSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyUpdateSyncConfigSetRequest) ProtoMessage() {}

func (x *TopologyUpdateSyncConfigSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyUpdateSyncConfigSetRequest.ProtoReflect.Descriptor instead.
func (*TopologyUpdateSyncConfigSetRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{112}
}

func (x *TopologyUpdateSyncConfigSetRequest) GetValue() *TopologyUpdateSyncConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

type TopologyUpdateSyncConfigSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value carries all the values given in the TopologyUpdateSyncConfigSetRequest as well
	// as any server-generated values.
	Value *TopologyUpdateSyncConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==CreatedAt will include this instance.
	//
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TopologyUpdateSyncConfigSetResponse) Reset() {
	*x = TopologyUpdateSyncConfigSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyUpdateSyncConfigSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyUpdateSyncConfigSetResponse) ProtoMessage() {}

func (x *TopologyUpdateSyncConfigSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyUpdateSyncConfigSetResponse.ProtoReflect.Descriptor instead.
func (*TopologyUpdateSyncConfigSetResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{113}
}

func (x *TopologyUpdateSyncConfigSetResponse) GetValue() *TopologyUpdateSyncConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TopologyUpdateSyncConfigSetResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type TopologyUpdateSyncConfigSetSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value contains a list of TopologyUpdateSyncConfig values to write.
	// It is possible to provide more values than can fit within either:
	//     - the maxiumum send size of the client
	//     - the maximum receive size of the server
	// If this error occurs you must reduce the number of values sent.
	// See gRPC "maximum message size" documentation for more information.
	Values []*TopologyUpdateSyncConfig `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *TopologyUpdateSyncConfigSetSomeRequest) Reset() {
	*x = TopologyUpdateSyncConfigSetSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyUpdateSyncConfigSetSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyUpdateSyncConfigSetSomeRequest) ProtoMessage() {}

func (x *TopologyUpdateSyncConfigSetSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyUpdateSyncConfigSetSomeRequest.ProtoReflect.Descriptor instead.
func (*TopologyUpdateSyncConfigSetSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{114}
}

func (x *TopologyUpdateSyncConfigSetSomeRequest) GetValues() []*TopologyUpdateSyncConfig {
	if x != nil {
		return x.Values
	}
	return nil
}

type TopologyUpdateSyncConfigSetSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *WorkspaceKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Error string        `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *TopologyUpdateSyncConfigSetSomeResponse) Reset() {
	*x = TopologyUpdateSyncConfigSetSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyUpdateSyncConfigSetSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyUpdateSyncConfigSetSomeResponse) ProtoMessage() {}

func (x *TopologyUpdateSyncConfigSetSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyUpdateSyncConfigSetSomeResponse.ProtoReflect.Descriptor instead.
func (*TopologyUpdateSyncConfigSetSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{115}
}

func (x *TopologyUpdateSyncConfigSetSomeResponse) GetKey() *WorkspaceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TopologyUpdateSyncConfigSetSomeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type TopologyUpdateSyncConfigDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key indicates which TopologyUpdateSyncConfig instance to remove.
	// This field must always be set.
	Key *WorkspaceKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *TopologyUpdateSyncConfigDeleteRequest) Reset() {
	*x = TopologyUpdateSyncConfigDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyUpdateSyncConfigDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyUpdateSyncConfigDeleteRequest) ProtoMessage() {}

func (x *TopologyUpdateSyncConfigDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyUpdateSyncConfigDeleteRequest.ProtoReflect.Descriptor instead.
func (*TopologyUpdateSyncConfigDeleteRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{116}
}

func (x *TopologyUpdateSyncConfigDeleteRequest) GetKey() *WorkspaceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type TopologyUpdateSyncConfigDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key echoes back the key of the deleted TopologyUpdateSyncConfig instance.
	Key *WorkspaceKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==DeletedAt will not include this instance.
	//
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TopologyUpdateSyncConfigDeleteResponse) Reset() {
	*x = TopologyUpdateSyncConfigDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyUpdateSyncConfigDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyUpdateSyncConfigDeleteResponse) ProtoMessage() {}

func (x *TopologyUpdateSyncConfigDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyUpdateSyncConfigDeleteResponse.ProtoReflect.Descriptor instead.
func (*TopologyUpdateSyncConfigDeleteResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{117}
}

func (x *TopologyUpdateSyncConfigDeleteResponse) GetKey() *WorkspaceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TopologyUpdateSyncConfigDeleteResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type TopologyUpdateSyncConfigDeleteAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TopologyUpdateSyncConfigDeleteAllRequest) Reset() {
	*x = TopologyUpdateSyncConfigDeleteAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyUpdateSyncConfigDeleteAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyUpdateSyncConfigDeleteAllRequest) ProtoMessage() {}

func (x *TopologyUpdateSyncConfigDeleteAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyUpdateSyncConfigDeleteAllRequest.ProtoReflect.Descriptor instead.
func (*TopologyUpdateSyncConfigDeleteAllRequest) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{118}
}

type TopologyUpdateSyncConfigDeleteAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This describes the class of delete error.
	Type fmp.DeleteError `protobuf:"varint,1,opt,name=type,proto3,enum=fmp.DeleteError" json:"type,omitempty"`
	// This indicates the error message from the delete failure.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// This is the key of the TopologyUpdateSyncConfig instance that failed to be deleted.
	Key *WorkspaceKey `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp when the key was being deleted.
	Time *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TopologyUpdateSyncConfigDeleteAllResponse) Reset() {
	*x = TopologyUpdateSyncConfigDeleteAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_services_gen_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyUpdateSyncConfigDeleteAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyUpdateSyncConfigDeleteAllResponse) ProtoMessage() {}

func (x *TopologyUpdateSyncConfigDeleteAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_services_gen_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyUpdateSyncConfigDeleteAllResponse.ProtoReflect.Descriptor instead.
func (*TopologyUpdateSyncConfigDeleteAllResponse) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_services_gen_proto_rawDescGZIP(), []int{119}
}

func (x *TopologyUpdateSyncConfigDeleteAllResponse) GetType() fmp.DeleteError {
	if x != nil {
		return x.Type
	}
	return fmp.DeleteError_DELETE_ERROR_UNSPECIFIED
}

func (x *TopologyUpdateSyncConfigDeleteAllResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TopologyUpdateSyncConfigDeleteAllResponse) GetKey() *WorkspaceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TopologyUpdateSyncConfigDeleteAllResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

var File_arista_studio_v1_services_gen_proto protoreflect.FileDescriptor

var file_arista_studio_v1_services_gen_proto_rawDesc = []byte{
	0x0a, 0x23, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x67, 0x65, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x1a, 0x1d, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x66, 0x6d, 0x70, 0x2f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x74, 0x0a, 0x13,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0x7c, 0x0a, 0x14, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61,
	0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x22, 0x94, 0x01, 0x0a, 0x19, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67,
	0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a,
	0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x1a, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x54, 0x61, 0x67, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x7a, 0x0a, 0x19, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x88, 0x01,
	0x0a, 0x1a, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x1f, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x11,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xc3, 0x01, 0x0a, 0x20,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x5a, 0x0a, 0x1c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8b, 0x01,
	0x0a, 0x1d, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x60, 0x0a, 0x20, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3c, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x68, 0x0a,
	0x21, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x50, 0x0a, 0x1f, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x81, 0x01, 0x0a, 0x20, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x24, 0x0a,
	0x22, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0xde, 0x01, 0x0a, 0x23, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x66, 0x6d, 0x70, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x4b, 0x65, 0x79, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0x7e, 0x0a, 0x15, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75,
	0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x16, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x1b, 0x41, 0x75, 0x74, 0x6f,
	0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0xbb, 0x01, 0x0a, 0x1c, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x84, 0x01, 0x0a, 0x1b, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x35, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x1c, 0x41, 0x75, 0x74, 0x6f,
	0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66,
	0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x21, 0x41, 0x75, 0x74, 0x6f, 0x66,
	0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x11,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66,
	0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xc7, 0x01,
	0x0a, 0x22, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x5e, 0x0a, 0x1e, 0x41, 0x75, 0x74, 0x6f, 0x66,
	0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f,
	0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x1f, 0x41, 0x75, 0x74, 0x6f,
	0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75,
	0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x64, 0x0a, 0x22, 0x41, 0x75, 0x74,
	0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3e, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22,
	0x72, 0x0a, 0x23, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x5a, 0x0a, 0x21, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22,
	0x8b, 0x01, 0x0a, 0x22, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x26, 0x0a,
	0x24, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xe8, 0x01, 0x0a, 0x25, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69,
	0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e,
	0x66, 0x6d, 0x70, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69,
	0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x22, 0x6e, 0x0a, 0x0d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x22, 0x70, 0x0a, 0x0e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x13, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x11, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52,
	0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xab, 0x01,
	0x0a, 0x14, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x74, 0x0a, 0x13, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0x7c, 0x0a, 0x14, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0x94, 0x01, 0x0a, 0x19, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a,
	0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x1a, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x4e, 0x0a, 0x16, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x7f, 0x0a, 0x17, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0x54, 0x0a, 0x1a, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x36, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x62, 0x0a, 0x1b, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x4b, 0x65, 0x79,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x4a, 0x0a, 0x19, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x4b,
	0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x7b, 0x0a, 0x1a, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0x1e, 0x0a, 0x1c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0xd8, 0x01, 0x0a, 0x1d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0x73, 0x0a, 0x12, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0x7a, 0x0a, 0x13, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x22, 0x92, 0x01, 0x0a, 0x18, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a,
	0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x19, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x6e, 0x0a,
	0x0d, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x70, 0x0a,
	0x0e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0x88, 0x01, 0x0a, 0x13, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x0f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x14, 0x53,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x74, 0x0a, 0x13, 0x53, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x7c,
	0x0a, 0x14, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x94, 0x01, 0x0a,
	0x19, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x11, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x1a, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x4e, 0x0a,
	0x16, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x7f, 0x0a,
	0x17, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x54,
	0x0a, 0x1a, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65,
	0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x22, 0x62, 0x0a, 0x1b, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x4a, 0x0a, 0x19, 0x53, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x4b, 0x65, 0x79, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x22, 0x7b, 0x0a, 0x1a, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0x1e, 0x0a, 0x1c, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0xd8, 0x01, 0x0a, 0x1d, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2d, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x75, 0x0a, 0x14,
	0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x4b, 0x65, 0x79, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0x7e, 0x0a, 0x15, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x1a, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x4b, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xb9, 0x01, 0x0a,
	0x1b, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x7c, 0x0a, 0x14, 0x54, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x34, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4b, 0x65,
	0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x7e, 0x0a, 0x15, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x1a, 0x54, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0xb9, 0x01, 0x0a, 0x1b, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x1a,
	0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x22, 0x8a, 0x01, 0x0a, 0x1b, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xa2, 0x01,
	0x0a, 0x20, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x51, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0xc5, 0x01, 0x0a, 0x21, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x5c, 0x0a, 0x1d, 0x54, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x1e, 0x54, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x62, 0x0a, 0x21, 0x54, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x70, 0x0a, 0x22,
	0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x34, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x58,
	0x0a, 0x20, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x34, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x89, 0x01, 0x0a, 0x21, 0x54, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0x25, 0x0a, 0x23, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xe6, 0x01, 0x0a, 0x24,
	0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x34,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0x7e, 0x0a, 0x15, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x16, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x1b, 0x54, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0xbb, 0x01, 0x0a, 0x1c, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x84, 0x01, 0x0a, 0x1b, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x35, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x1c, 0x54, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x21, 0x54, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x11,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xc7, 0x01,
	0x0a, 0x22, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x5e, 0x0a, 0x1e, 0x54, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x1f, 0x54, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x64, 0x0a, 0x22, 0x54, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3e, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22,
	0x72, 0x0a, 0x23, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x5a, 0x0a, 0x21, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22,
	0x8b, 0x01, 0x0a, 0x22, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x26, 0x0a,
	0x24, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xe8, 0x01, 0x0a, 0x25, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e,
	0x66, 0x6d, 0x70, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x22, 0x7d, 0x0a, 0x19, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0x88, 0x01, 0x0a, 0x1a, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x79, 0x6e, 0x63, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x1f, 0x54,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e,
	0x63, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50,
	0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x52,
	0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xc3, 0x01,
	0x0a, 0x20, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x1f, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x20, 0x54, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x22, 0xac, 0x01, 0x0a, 0x25, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x11, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0xcf, 0x01, 0x0a, 0x26, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x66, 0x0a, 0x22, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x23, 0x54, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0x6c, 0x0a, 0x26, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x22, 0x71, 0x0a, 0x27, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74,
	0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x59, 0x0a, 0x25, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22,
	0x8a, 0x01, 0x0a, 0x26, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x2a, 0x0a, 0x28,
	0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79,
	0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xe7, 0x01, 0x0a, 0x29, 0x54, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x30, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x32, 0xbf, 0x02, 0x0a, 0x13, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54,
	0x61, 0x67, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x06, 0x47, 0x65,
	0x74, 0x4f, 0x6e, 0x65, 0x12, 0x25, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x2b, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x68, 0x0a, 0x09, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x54, 0x61, 0x67, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x30, 0x01, 0x32, 0xb4, 0x06, 0x0a, 0x19, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x63, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x12, 0x2b, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x12, 0x31, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x74, 0x0a, 0x09, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x31, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01,
	0x12, 0x66, 0x0a, 0x03, 0x53, 0x65, 0x74, 0x12, 0x2e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x53,
	0x6f, 0x6d, 0x65, 0x12, 0x32, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54,
	0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74,
	0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x6f,
	0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x31, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x7a, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x34, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x35, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61,
	0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0xcd, 0x02, 0x0a, 0x15,
	0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5b, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x12,
	0x27, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f,
	0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x69, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x2d, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x6c, 0x0a,
	0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x2d, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75,
	0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74,
	0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0xd2, 0x06, 0x0a, 0x1b,
	0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x67, 0x0a, 0x06, 0x47,
	0x65, 0x74, 0x4f, 0x6e, 0x65, 0x12, 0x2d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x33,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x78, 0x0a, 0x09, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x33, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f,
	0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x6a, 0x0a, 0x03, 0x53, 0x65, 0x74, 0x12, 0x30, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x78, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x34, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x35, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x73, 0x0a, 0x06, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x33, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75,
	0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x7e, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x36, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01,
	0x32, 0x95, 0x02, 0x0a, 0x0d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x4b, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x12, 0x1f, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x59, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x25, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x5c, 0x0a, 0x09, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x25, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0xda, 0x05, 0x0a, 0x13, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x57, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x12, 0x25, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x06, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x12, 0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01,
	0x12, 0x68, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x2b, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x5a, 0x0a, 0x03, 0x53, 0x65,
	0x74, 0x12, 0x28, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d,
	0x65, 0x12, 0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01,
	0x12, 0x63, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2b, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x6c, 0x6c, 0x12, 0x2e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0xb8, 0x02, 0x0a, 0x12, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x06,
	0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x12, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x2a, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x66, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x2a, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01,
	0x32, 0x95, 0x02, 0x0a, 0x0d, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x4b, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x12, 0x1f, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x59, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x25, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x5c, 0x0a, 0x09, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x25, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0xda, 0x05, 0x0a, 0x13, 0x53, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x57, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x12, 0x25, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x06, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x12, 0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01,
	0x12, 0x68, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x2b, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x5a, 0x0a, 0x03, 0x53, 0x65,
	0x74, 0x12, 0x28, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d,
	0x65, 0x12, 0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01,
	0x12, 0x63, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2b, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x6c, 0x6c, 0x12, 0x2e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0xc6, 0x02, 0x0a, 0x14, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x59,
	0x0a, 0x06, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x12, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x06, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x12, 0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x30, 0x01, 0x12, 0x6a, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12,
	0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0xc6,
	0x02, 0x0a, 0x14, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x59, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4f, 0x6e,
	0x65, 0x12, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x67, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x2c, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x6a, 0x0a, 0x09, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0xc3, 0x06, 0x0a, 0x1a, 0x54, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x65, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65,
	0x12, 0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a,
	0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x32, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x30, 0x01, 0x12, 0x76, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12,
	0x32, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x68, 0x0a, 0x03, 0x53, 0x65,
	0x74, 0x12, 0x2f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x30, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x12,
	0x33, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x71, 0x0a, 0x06,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x32, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x7c, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x35, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0xcd, 0x02,
	0x0a, 0x15, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5b, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4f, 0x6e,
	0x65, 0x12, 0x27, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x2d,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12,
	0x6c, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x2d, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0xd2, 0x06,
	0x0a, 0x1b, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x67, 0x0a,
	0x06, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x12, 0x2d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x12, 0x33, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x78, 0x0a,
	0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x33, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x34, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x6a, 0x0a, 0x03, 0x53, 0x65, 0x74, 0x12, 0x30,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x31, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x34,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53,
	0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x73, 0x0a,
	0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x33, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x7e, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12,
	0x36, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x30, 0x01, 0x32, 0xe9, 0x02, 0x0a, 0x19, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x63, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x12, 0x2b, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12,
	0x31, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x32, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x74, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x31, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0x91,
	0x07, 0x0a, 0x1f, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x6f, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x12, 0x31, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79,
	0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x32, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x7d, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x37, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x30, 0x01, 0x12, 0x80, 0x01, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x12, 0x37, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x72, 0x0a, 0x03, 0x53, 0x65, 0x74, 0x12, 0x34, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79,
	0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x35, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x07, 0x53, 0x65,
	0x74, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x38, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x39, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x7b, 0x0a, 0x06,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x37, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x38, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x09, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x3a, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x30, 0x01, 0x42, 0x2a, 0x5a, 0x28, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x3b, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_arista_studio_v1_services_gen_proto_rawDescOnce sync.Once
	file_arista_studio_v1_services_gen_proto_rawDescData = file_arista_studio_v1_services_gen_proto_rawDesc
)

func file_arista_studio_v1_services_gen_proto_rawDescGZIP() []byte {
	file_arista_studio_v1_services_gen_proto_rawDescOnce.Do(func() {
		file_arista_studio_v1_services_gen_proto_rawDescData = protoimpl.X.CompressGZIP(file_arista_studio_v1_services_gen_proto_rawDescData)
	})
	return file_arista_studio_v1_services_gen_proto_rawDescData
}

var file_arista_studio_v1_services_gen_proto_msgTypes = make([]protoimpl.MessageInfo, 120)
var file_arista_studio_v1_services_gen_proto_goTypes = []interface{}{
	(*AssignedTagsRequest)(nil),                       // 0: arista.studio.v1.AssignedTagsRequest
	(*AssignedTagsResponse)(nil),                      // 1: arista.studio.v1.AssignedTagsResponse
	(*AssignedTagsStreamRequest)(nil),                 // 2: arista.studio.v1.AssignedTagsStreamRequest
	(*AssignedTagsStreamResponse)(nil),                // 3: arista.studio.v1.AssignedTagsStreamResponse
	(*AssignedTagsConfigRequest)(nil),                 // 4: arista.studio.v1.AssignedTagsConfigRequest
	(*AssignedTagsConfigResponse)(nil),                // 5: arista.studio.v1.AssignedTagsConfigResponse
	(*AssignedTagsConfigStreamRequest)(nil),           // 6: arista.studio.v1.AssignedTagsConfigStreamRequest
	(*AssignedTagsConfigStreamResponse)(nil),          // 7: arista.studio.v1.AssignedTagsConfigStreamResponse
	(*AssignedTagsConfigSetRequest)(nil),              // 8: arista.studio.v1.AssignedTagsConfigSetRequest
	(*AssignedTagsConfigSetResponse)(nil),             // 9: arista.studio.v1.AssignedTagsConfigSetResponse
	(*AssignedTagsConfigSetSomeRequest)(nil),          // 10: arista.studio.v1.AssignedTagsConfigSetSomeRequest
	(*AssignedTagsConfigSetSomeResponse)(nil),         // 11: arista.studio.v1.AssignedTagsConfigSetSomeResponse
	(*AssignedTagsConfigDeleteRequest)(nil),           // 12: arista.studio.v1.AssignedTagsConfigDeleteRequest
	(*AssignedTagsConfigDeleteResponse)(nil),          // 13: arista.studio.v1.AssignedTagsConfigDeleteResponse
	(*AssignedTagsConfigDeleteAllRequest)(nil),        // 14: arista.studio.v1.AssignedTagsConfigDeleteAllRequest
	(*AssignedTagsConfigDeleteAllResponse)(nil),       // 15: arista.studio.v1.AssignedTagsConfigDeleteAllResponse
	(*AutofillActionRequest)(nil),                     // 16: arista.studio.v1.AutofillActionRequest
	(*AutofillActionResponse)(nil),                    // 17: arista.studio.v1.AutofillActionResponse
	(*AutofillActionStreamRequest)(nil),               // 18: arista.studio.v1.AutofillActionStreamRequest
	(*AutofillActionStreamResponse)(nil),              // 19: arista.studio.v1.AutofillActionStreamResponse
	(*AutofillActionConfigRequest)(nil),               // 20: arista.studio.v1.AutofillActionConfigRequest
	(*AutofillActionConfigResponse)(nil),              // 21: arista.studio.v1.AutofillActionConfigResponse
	(*AutofillActionConfigStreamRequest)(nil),         // 22: arista.studio.v1.AutofillActionConfigStreamRequest
	(*AutofillActionConfigStreamResponse)(nil),        // 23: arista.studio.v1.AutofillActionConfigStreamResponse
	(*AutofillActionConfigSetRequest)(nil),            // 24: arista.studio.v1.AutofillActionConfigSetRequest
	(*AutofillActionConfigSetResponse)(nil),           // 25: arista.studio.v1.AutofillActionConfigSetResponse
	(*AutofillActionConfigSetSomeRequest)(nil),        // 26: arista.studio.v1.AutofillActionConfigSetSomeRequest
	(*AutofillActionConfigSetSomeResponse)(nil),       // 27: arista.studio.v1.AutofillActionConfigSetSomeResponse
	(*AutofillActionConfigDeleteRequest)(nil),         // 28: arista.studio.v1.AutofillActionConfigDeleteRequest
	(*AutofillActionConfigDeleteResponse)(nil),        // 29: arista.studio.v1.AutofillActionConfigDeleteResponse
	(*AutofillActionConfigDeleteAllRequest)(nil),      // 30: arista.studio.v1.AutofillActionConfigDeleteAllRequest
	(*AutofillActionConfigDeleteAllResponse)(nil),     // 31: arista.studio.v1.AutofillActionConfigDeleteAllResponse
	(*InputsRequest)(nil),                             // 32: arista.studio.v1.InputsRequest
	(*InputsResponse)(nil),                            // 33: arista.studio.v1.InputsResponse
	(*InputsStreamRequest)(nil),                       // 34: arista.studio.v1.InputsStreamRequest
	(*InputsStreamResponse)(nil),                      // 35: arista.studio.v1.InputsStreamResponse
	(*InputsConfigRequest)(nil),                       // 36: arista.studio.v1.InputsConfigRequest
	(*InputsConfigResponse)(nil),                      // 37: arista.studio.v1.InputsConfigResponse
	(*InputsConfigStreamRequest)(nil),                 // 38: arista.studio.v1.InputsConfigStreamRequest
	(*InputsConfigStreamResponse)(nil),                // 39: arista.studio.v1.InputsConfigStreamResponse
	(*InputsConfigSetRequest)(nil),                    // 40: arista.studio.v1.InputsConfigSetRequest
	(*InputsConfigSetResponse)(nil),                   // 41: arista.studio.v1.InputsConfigSetResponse
	(*InputsConfigSetSomeRequest)(nil),                // 42: arista.studio.v1.InputsConfigSetSomeRequest
	(*InputsConfigSetSomeResponse)(nil),               // 43: arista.studio.v1.InputsConfigSetSomeResponse
	(*InputsConfigDeleteRequest)(nil),                 // 44: arista.studio.v1.InputsConfigDeleteRequest
	(*InputsConfigDeleteResponse)(nil),                // 45: arista.studio.v1.InputsConfigDeleteResponse
	(*InputsConfigDeleteAllRequest)(nil),              // 46: arista.studio.v1.InputsConfigDeleteAllRequest
	(*InputsConfigDeleteAllResponse)(nil),             // 47: arista.studio.v1.InputsConfigDeleteAllResponse
	(*SecretInputRequest)(nil),                        // 48: arista.studio.v1.SecretInputRequest
	(*SecretInputResponse)(nil),                       // 49: arista.studio.v1.SecretInputResponse
	(*SecretInputStreamRequest)(nil),                  // 50: arista.studio.v1.SecretInputStreamRequest
	(*SecretInputStreamResponse)(nil),                 // 51: arista.studio.v1.SecretInputStreamResponse
	(*StudioRequest)(nil),                             // 52: arista.studio.v1.StudioRequest
	(*StudioResponse)(nil),                            // 53: arista.studio.v1.StudioResponse
	(*StudioStreamRequest)(nil),                       // 54: arista.studio.v1.StudioStreamRequest
	(*StudioStreamResponse)(nil),                      // 55: arista.studio.v1.StudioStreamResponse
	(*StudioConfigRequest)(nil),                       // 56: arista.studio.v1.StudioConfigRequest
	(*StudioConfigResponse)(nil),                      // 57: arista.studio.v1.StudioConfigResponse
	(*StudioConfigStreamRequest)(nil),                 // 58: arista.studio.v1.StudioConfigStreamRequest
	(*StudioConfigStreamResponse)(nil),                // 59: arista.studio.v1.StudioConfigStreamResponse
	(*StudioConfigSetRequest)(nil),                    // 60: arista.studio.v1.StudioConfigSetRequest
	(*StudioConfigSetResponse)(nil),                   // 61: arista.studio.v1.StudioConfigSetResponse
	(*StudioConfigSetSomeRequest)(nil),                // 62: arista.studio.v1.StudioConfigSetSomeRequest
	(*StudioConfigSetSomeResponse)(nil),               // 63: arista.studio.v1.StudioConfigSetSomeResponse
	(*StudioConfigDeleteRequest)(nil),                 // 64: arista.studio.v1.StudioConfigDeleteRequest
	(*StudioConfigDeleteResponse)(nil),                // 65: arista.studio.v1.StudioConfigDeleteResponse
	(*StudioConfigDeleteAllRequest)(nil),              // 66: arista.studio.v1.StudioConfigDeleteAllRequest
	(*StudioConfigDeleteAllResponse)(nil),             // 67: arista.studio.v1.StudioConfigDeleteAllResponse
	(*StudioSummaryRequest)(nil),                      // 68: arista.studio.v1.StudioSummaryRequest
	(*StudioSummaryResponse)(nil),                     // 69: arista.studio.v1.StudioSummaryResponse
	(*StudioSummaryStreamRequest)(nil),                // 70: arista.studio.v1.StudioSummaryStreamRequest
	(*StudioSummaryStreamResponse)(nil),               // 71: arista.studio.v1.StudioSummaryStreamResponse
	(*TopologyInputRequest)(nil),                      // 72: arista.studio.v1.TopologyInputRequest
	(*TopologyInputResponse)(nil),                     // 73: arista.studio.v1.TopologyInputResponse
	(*TopologyInputStreamRequest)(nil),                // 74: arista.studio.v1.TopologyInputStreamRequest
	(*TopologyInputStreamResponse)(nil),               // 75: arista.studio.v1.TopologyInputStreamResponse
	(*TopologyInputConfigRequest)(nil),                // 76: arista.studio.v1.TopologyInputConfigRequest
	(*TopologyInputConfigResponse)(nil),               // 77: arista.studio.v1.TopologyInputConfigResponse
	(*TopologyInputConfigStreamRequest)(nil),          // 78: arista.studio.v1.TopologyInputConfigStreamRequest
	(*TopologyInputConfigStreamResponse)(nil),         // 79: arista.studio.v1.TopologyInputConfigStreamResponse
	(*TopologyInputConfigSetRequest)(nil),             // 80: arista.studio.v1.TopologyInputConfigSetRequest
	(*TopologyInputConfigSetResponse)(nil),            // 81: arista.studio.v1.TopologyInputConfigSetResponse
	(*TopologyInputConfigSetSomeRequest)(nil),         // 82: arista.studio.v1.TopologyInputConfigSetSomeRequest
	(*TopologyInputConfigSetSomeResponse)(nil),        // 83: arista.studio.v1.TopologyInputConfigSetSomeResponse
	(*TopologyInputConfigDeleteRequest)(nil),          // 84: arista.studio.v1.TopologyInputConfigDeleteRequest
	(*TopologyInputConfigDeleteResponse)(nil),         // 85: arista.studio.v1.TopologyInputConfigDeleteResponse
	(*TopologyInputConfigDeleteAllRequest)(nil),       // 86: arista.studio.v1.TopologyInputConfigDeleteAllRequest
	(*TopologyInputConfigDeleteAllResponse)(nil),      // 87: arista.studio.v1.TopologyInputConfigDeleteAllResponse
	(*TopologyUpdateRequest)(nil),                     // 88: arista.studio.v1.TopologyUpdateRequest
	(*TopologyUpdateResponse)(nil),                    // 89: arista.studio.v1.TopologyUpdateResponse
	(*TopologyUpdateStreamRequest)(nil),               // 90: arista.studio.v1.TopologyUpdateStreamRequest
	(*TopologyUpdateStreamResponse)(nil),              // 91: arista.studio.v1.TopologyUpdateStreamResponse
	(*TopologyUpdateConfigRequest)(nil),               // 92: arista.studio.v1.TopologyUpdateConfigRequest
	(*TopologyUpdateConfigResponse)(nil),              // 93: arista.studio.v1.TopologyUpdateConfigResponse
	(*TopologyUpdateConfigStreamRequest)(nil),         // 94: arista.studio.v1.TopologyUpdateConfigStreamRequest
	(*TopologyUpdateConfigStreamResponse)(nil),        // 95: arista.studio.v1.TopologyUpdateConfigStreamResponse
	(*TopologyUpdateConfigSetRequest)(nil),            // 96: arista.studio.v1.TopologyUpdateConfigSetRequest
	(*TopologyUpdateConfigSetResponse)(nil),           // 97: arista.studio.v1.TopologyUpdateConfigSetResponse
	(*TopologyUpdateConfigSetSomeRequest)(nil),        // 98: arista.studio.v1.TopologyUpdateConfigSetSomeRequest
	(*TopologyUpdateConfigSetSomeResponse)(nil),       // 99: arista.studio.v1.TopologyUpdateConfigSetSomeResponse
	(*TopologyUpdateConfigDeleteRequest)(nil),         // 100: arista.studio.v1.TopologyUpdateConfigDeleteRequest
	(*TopologyUpdateConfigDeleteResponse)(nil),        // 101: arista.studio.v1.TopologyUpdateConfigDeleteResponse
	(*TopologyUpdateConfigDeleteAllRequest)(nil),      // 102: arista.studio.v1.TopologyUpdateConfigDeleteAllRequest
	(*TopologyUpdateConfigDeleteAllResponse)(nil),     // 103: arista.studio.v1.TopologyUpdateConfigDeleteAllResponse
	(*TopologyUpdateSyncRequest)(nil),                 // 104: arista.studio.v1.TopologyUpdateSyncRequest
	(*TopologyUpdateSyncResponse)(nil),                // 105: arista.studio.v1.TopologyUpdateSyncResponse
	(*TopologyUpdateSyncStreamRequest)(nil),           // 106: arista.studio.v1.TopologyUpdateSyncStreamRequest
	(*TopologyUpdateSyncStreamResponse)(nil),          // 107: arista.studio.v1.TopologyUpdateSyncStreamResponse
	(*TopologyUpdateSyncConfigRequest)(nil),           // 108: arista.studio.v1.TopologyUpdateSyncConfigRequest
	(*TopologyUpdateSyncConfigResponse)(nil),          // 109: arista.studio.v1.TopologyUpdateSyncConfigResponse
	(*TopologyUpdateSyncConfigStreamRequest)(nil),     // 110: arista.studio.v1.TopologyUpdateSyncConfigStreamRequest
	(*TopologyUpdateSyncConfigStreamResponse)(nil),    // 111: arista.studio.v1.TopologyUpdateSyncConfigStreamResponse
	(*TopologyUpdateSyncConfigSetRequest)(nil),        // 112: arista.studio.v1.TopologyUpdateSyncConfigSetRequest
	(*TopologyUpdateSyncConfigSetResponse)(nil),       // 113: arista.studio.v1.TopologyUpdateSyncConfigSetResponse
	(*TopologyUpdateSyncConfigSetSomeRequest)(nil),    // 114: arista.studio.v1.TopologyUpdateSyncConfigSetSomeRequest
	(*TopologyUpdateSyncConfigSetSomeResponse)(nil),   // 115: arista.studio.v1.TopologyUpdateSyncConfigSetSomeResponse
	(*TopologyUpdateSyncConfigDeleteRequest)(nil),     // 116: arista.studio.v1.TopologyUpdateSyncConfigDeleteRequest
	(*TopologyUpdateSyncConfigDeleteResponse)(nil),    // 117: arista.studio.v1.TopologyUpdateSyncConfigDeleteResponse
	(*TopologyUpdateSyncConfigDeleteAllRequest)(nil),  // 118: arista.studio.v1.TopologyUpdateSyncConfigDeleteAllRequest
	(*TopologyUpdateSyncConfigDeleteAllResponse)(nil), // 119: arista.studio.v1.TopologyUpdateSyncConfigDeleteAllResponse
	(*StudioKey)(nil),                                 // 120: arista.studio.v1.StudioKey
	(*timestamppb.Timestamp)(nil),                     // 121: google.protobuf.Timestamp
	(*AssignedTags)(nil),                              // 122: arista.studio.v1.AssignedTags
	(*time.TimeBounds)(nil),                           // 123: arista.time.TimeBounds
	(subscriptions.Operation)(0),                      // 124: arista.subscriptions.Operation
	(*AssignedTagsConfig)(nil),                        // 125: arista.studio.v1.AssignedTagsConfig
	(fmp.DeleteError)(0),                              // 126: fmp.DeleteError
	(*wrapperspb.StringValue)(nil),                    // 127: google.protobuf.StringValue
	(*AutofillActionKey)(nil),                         // 128: arista.studio.v1.AutofillActionKey
	(*AutofillAction)(nil),                            // 129: arista.studio.v1.AutofillAction
	(*AutofillActionConfig)(nil),                      // 130: arista.studio.v1.AutofillActionConfig
	(*InputsKey)(nil),                                 // 131: arista.studio.v1.InputsKey
	(*Inputs)(nil),                                    // 132: arista.studio.v1.Inputs
	(*InputsConfig)(nil),                              // 133: arista.studio.v1.InputsConfig
	(*SecretInput)(nil),                               // 134: arista.studio.v1.SecretInput
	(*Studio)(nil),                                    // 135: arista.studio.v1.Studio
	(*StudioConfig)(nil),                              // 136: arista.studio.v1.StudioConfig
	(*StudioSummary)(nil),                             // 137: arista.studio.v1.StudioSummary
	(*TopologyInputKey)(nil),                          // 138: arista.studio.v1.TopologyInputKey
	(*TopologyInput)(nil),                             // 139: arista.studio.v1.TopologyInput
	(*TopologyInputConfig)(nil),                       // 140: arista.studio.v1.TopologyInputConfig
	(*TopologyUpdateKey)(nil),                         // 141: arista.studio.v1.TopologyUpdateKey
	(*TopologyUpdate)(nil),                            // 142: arista.studio.v1.TopologyUpdate
	(*TopologyUpdateConfig)(nil),                      // 143: arista.studio.v1.TopologyUpdateConfig
	(*WorkspaceKey)(nil),                              // 144: arista.studio.v1.WorkspaceKey
	(*TopologyUpdateSync)(nil),                        // 145: arista.studio.v1.TopologyUpdateSync
	(*TopologyUpdateSyncConfig)(nil),                  // 146: arista.studio.v1.TopologyUpdateSyncConfig
}
var file_arista_studio_v1_services_gen_proto_depIdxs = []int32{
	120, // 0: arista.studio.v1.AssignedTagsRequest.key:type_name -> arista.studio.v1.StudioKey
	121, // 1: arista.studio.v1.AssignedTagsRequest.time:type_name -> google.protobuf.Timestamp
	122, // 2: arista.studio.v1.AssignedTagsResponse.value:type_name -> arista.studio.v1.AssignedTags
	121, // 3: arista.studio.v1.AssignedTagsResponse.time:type_name -> google.protobuf.Timestamp
	122, // 4: arista.studio.v1.AssignedTagsStreamRequest.partial_eq_filter:type_name -> arista.studio.v1.AssignedTags
	123, // 5: arista.studio.v1.AssignedTagsStreamRequest.time:type_name -> arista.time.TimeBounds
	122, // 6: arista.studio.v1.AssignedTagsStreamResponse.value:type_name -> arista.studio.v1.AssignedTags
	121, // 7: arista.studio.v1.AssignedTagsStreamResponse.time:type_name -> google.protobuf.Timestamp
	124, // 8: arista.studio.v1.AssignedTagsStreamResponse.type:type_name -> arista.subscriptions.Operation
	120, // 9: arista.studio.v1.AssignedTagsConfigRequest.key:type_name -> arista.studio.v1.StudioKey
	121, // 10: arista.studio.v1.AssignedTagsConfigRequest.time:type_name -> google.protobuf.Timestamp
	125, // 11: arista.studio.v1.AssignedTagsConfigResponse.value:type_name -> arista.studio.v1.AssignedTagsConfig
	121, // 12: arista.studio.v1.AssignedTagsConfigResponse.time:type_name -> google.protobuf.Timestamp
	125, // 13: arista.studio.v1.AssignedTagsConfigStreamRequest.partial_eq_filter:type_name -> arista.studio.v1.AssignedTagsConfig
	123, // 14: arista.studio.v1.AssignedTagsConfigStreamRequest.time:type_name -> arista.time.TimeBounds
	125, // 15: arista.studio.v1.AssignedTagsConfigStreamResponse.value:type_name -> arista.studio.v1.AssignedTagsConfig
	121, // 16: arista.studio.v1.AssignedTagsConfigStreamResponse.time:type_name -> google.protobuf.Timestamp
	124, // 17: arista.studio.v1.AssignedTagsConfigStreamResponse.type:type_name -> arista.subscriptions.Operation
	125, // 18: arista.studio.v1.AssignedTagsConfigSetRequest.value:type_name -> arista.studio.v1.AssignedTagsConfig
	125, // 19: arista.studio.v1.AssignedTagsConfigSetResponse.value:type_name -> arista.studio.v1.AssignedTagsConfig
	121, // 20: arista.studio.v1.AssignedTagsConfigSetResponse.time:type_name -> google.protobuf.Timestamp
	125, // 21: arista.studio.v1.AssignedTagsConfigSetSomeRequest.values:type_name -> arista.studio.v1.AssignedTagsConfig
	120, // 22: arista.studio.v1.AssignedTagsConfigSetSomeResponse.key:type_name -> arista.studio.v1.StudioKey
	120, // 23: arista.studio.v1.AssignedTagsConfigDeleteRequest.key:type_name -> arista.studio.v1.StudioKey
	120, // 24: arista.studio.v1.AssignedTagsConfigDeleteResponse.key:type_name -> arista.studio.v1.StudioKey
	121, // 25: arista.studio.v1.AssignedTagsConfigDeleteResponse.time:type_name -> google.protobuf.Timestamp
	126, // 26: arista.studio.v1.AssignedTagsConfigDeleteAllResponse.type:type_name -> fmp.DeleteError
	127, // 27: arista.studio.v1.AssignedTagsConfigDeleteAllResponse.error:type_name -> google.protobuf.StringValue
	120, // 28: arista.studio.v1.AssignedTagsConfigDeleteAllResponse.key:type_name -> arista.studio.v1.StudioKey
	121, // 29: arista.studio.v1.AssignedTagsConfigDeleteAllResponse.time:type_name -> google.protobuf.Timestamp
	128, // 30: arista.studio.v1.AutofillActionRequest.key:type_name -> arista.studio.v1.AutofillActionKey
	121, // 31: arista.studio.v1.AutofillActionRequest.time:type_name -> google.protobuf.Timestamp
	129, // 32: arista.studio.v1.AutofillActionResponse.value:type_name -> arista.studio.v1.AutofillAction
	121, // 33: arista.studio.v1.AutofillActionResponse.time:type_name -> google.protobuf.Timestamp
	129, // 34: arista.studio.v1.AutofillActionStreamRequest.partial_eq_filter:type_name -> arista.studio.v1.AutofillAction
	123, // 35: arista.studio.v1.AutofillActionStreamRequest.time:type_name -> arista.time.TimeBounds
	129, // 36: arista.studio.v1.AutofillActionStreamResponse.value:type_name -> arista.studio.v1.AutofillAction
	121, // 37: arista.studio.v1.AutofillActionStreamResponse.time:type_name -> google.protobuf.Timestamp
	124, // 38: arista.studio.v1.AutofillActionStreamResponse.type:type_name -> arista.subscriptions.Operation
	128, // 39: arista.studio.v1.AutofillActionConfigRequest.key:type_name -> arista.studio.v1.AutofillActionKey
	121, // 40: arista.studio.v1.AutofillActionConfigRequest.time:type_name -> google.protobuf.Timestamp
	130, // 41: arista.studio.v1.AutofillActionConfigResponse.value:type_name -> arista.studio.v1.AutofillActionConfig
	121, // 42: arista.studio.v1.AutofillActionConfigResponse.time:type_name -> google.protobuf.Timestamp
	130, // 43: arista.studio.v1.AutofillActionConfigStreamRequest.partial_eq_filter:type_name -> arista.studio.v1.AutofillActionConfig
	123, // 44: arista.studio.v1.AutofillActionConfigStreamRequest.time:type_name -> arista.time.TimeBounds
	130, // 45: arista.studio.v1.AutofillActionConfigStreamResponse.value:type_name -> arista.studio.v1.AutofillActionConfig
	121, // 46: arista.studio.v1.AutofillActionConfigStreamResponse.time:type_name -> google.protobuf.Timestamp
	124, // 47: arista.studio.v1.AutofillActionConfigStreamResponse.type:type_name -> arista.subscriptions.Operation
	130, // 48: arista.studio.v1.AutofillActionConfigSetRequest.value:type_name -> arista.studio.v1.AutofillActionConfig
	130, // 49: arista.studio.v1.AutofillActionConfigSetResponse.value:type_name -> arista.studio.v1.AutofillActionConfig
	121, // 50: arista.studio.v1.AutofillActionConfigSetResponse.time:type_name -> google.protobuf.Timestamp
	130, // 51: arista.studio.v1.AutofillActionConfigSetSomeRequest.values:type_name -> arista.studio.v1.AutofillActionConfig
	128, // 52: arista.studio.v1.AutofillActionConfigSetSomeResponse.key:type_name -> arista.studio.v1.AutofillActionKey
	128, // 53: arista.studio.v1.AutofillActionConfigDeleteRequest.key:type_name -> arista.studio.v1.AutofillActionKey
	128, // 54: arista.studio.v1.AutofillActionConfigDeleteResponse.key:type_name -> arista.studio.v1.AutofillActionKey
	121, // 55: arista.studio.v1.AutofillActionConfigDeleteResponse.time:type_name -> google.protobuf.Timestamp
	126, // 56: arista.studio.v1.AutofillActionConfigDeleteAllResponse.type:type_name -> fmp.DeleteError
	127, // 57: arista.studio.v1.AutofillActionConfigDeleteAllResponse.error:type_name -> google.protobuf.StringValue
	128, // 58: arista.studio.v1.AutofillActionConfigDeleteAllResponse.key:type_name -> arista.studio.v1.AutofillActionKey
	121, // 59: arista.studio.v1.AutofillActionConfigDeleteAllResponse.time:type_name -> google.protobuf.Timestamp
	131, // 60: arista.studio.v1.InputsRequest.key:type_name -> arista.studio.v1.InputsKey
	121, // 61: arista.studio.v1.InputsRequest.time:type_name -> google.protobuf.Timestamp
	132, // 62: arista.studio.v1.InputsResponse.value:type_name -> arista.studio.v1.Inputs
	121, // 63: arista.studio.v1.InputsResponse.time:type_name -> google.protobuf.Timestamp
	132, // 64: arista.studio.v1.InputsStreamRequest.partial_eq_filter:type_name -> arista.studio.v1.Inputs
	123, // 65: arista.studio.v1.InputsStreamRequest.time:type_name -> arista.time.TimeBounds
	132, // 66: arista.studio.v1.InputsStreamResponse.value:type_name -> arista.studio.v1.Inputs
	121, // 67: arista.studio.v1.InputsStreamResponse.time:type_name -> google.protobuf.Timestamp
	124, // 68: arista.studio.v1.InputsStreamResponse.type:type_name -> arista.subscriptions.Operation
	131, // 69: arista.studio.v1.InputsConfigRequest.key:type_name -> arista.studio.v1.InputsKey
	121, // 70: arista.studio.v1.InputsConfigRequest.time:type_name -> google.protobuf.Timestamp
	133, // 71: arista.studio.v1.InputsConfigResponse.value:type_name -> arista.studio.v1.InputsConfig
	121, // 72: arista.studio.v1.InputsConfigResponse.time:type_name -> google.protobuf.Timestamp
	133, // 73: arista.studio.v1.InputsConfigStreamRequest.partial_eq_filter:type_name -> arista.studio.v1.InputsConfig
	123, // 74: arista.studio.v1.InputsConfigStreamRequest.time:type_name -> arista.time.TimeBounds
	133, // 75: arista.studio.v1.InputsConfigStreamResponse.value:type_name -> arista.studio.v1.InputsConfig
	121, // 76: arista.studio.v1.InputsConfigStreamResponse.time:type_name -> google.protobuf.Timestamp
	124, // 77: arista.studio.v1.InputsConfigStreamResponse.type:type_name -> arista.subscriptions.Operation
	133, // 78: arista.studio.v1.InputsConfigSetRequest.value:type_name -> arista.studio.v1.InputsConfig
	133, // 79: arista.studio.v1.InputsConfigSetResponse.value:type_name -> arista.studio.v1.InputsConfig
	121, // 80: arista.studio.v1.InputsConfigSetResponse.time:type_name -> google.protobuf.Timestamp
	133, // 81: arista.studio.v1.InputsConfigSetSomeRequest.values:type_name -> arista.studio.v1.InputsConfig
	131, // 82: arista.studio.v1.InputsConfigSetSomeResponse.key:type_name -> arista.studio.v1.InputsKey
	131, // 83: arista.studio.v1.InputsConfigDeleteRequest.key:type_name -> arista.studio.v1.InputsKey
	131, // 84: arista.studio.v1.InputsConfigDeleteResponse.key:type_name -> arista.studio.v1.InputsKey
	121, // 85: arista.studio.v1.InputsConfigDeleteResponse.time:type_name -> google.protobuf.Timestamp
	126, // 86: arista.studio.v1.InputsConfigDeleteAllResponse.type:type_name -> fmp.DeleteError
	127, // 87: arista.studio.v1.InputsConfigDeleteAllResponse.error:type_name -> google.protobuf.StringValue
	131, // 88: arista.studio.v1.InputsConfigDeleteAllResponse.key:type_name -> arista.studio.v1.InputsKey
	121, // 89: arista.studio.v1.InputsConfigDeleteAllResponse.time:type_name -> google.protobuf.Timestamp
	131, // 90: arista.studio.v1.SecretInputRequest.key:type_name -> arista.studio.v1.InputsKey
	121, // 91: arista.studio.v1.SecretInputRequest.time:type_name -> google.protobuf.Timestamp
	134, // 92: arista.studio.v1.SecretInputResponse.value:type_name -> arista.studio.v1.SecretInput
	121, // 93: arista.studio.v1.SecretInputResponse.time:type_name -> google.protobuf.Timestamp
	134, // 94: arista.studio.v1.SecretInputStreamRequest.partial_eq_filter:type_name -> arista.studio.v1.SecretInput
	123, // 95: arista.studio.v1.SecretInputStreamRequest.time:type_name -> arista.time.TimeBounds
	134, // 96: arista.studio.v1.SecretInputStreamResponse.value:type_name -> arista.studio.v1.SecretInput
	121, // 97: arista.studio.v1.SecretInputStreamResponse.time:type_name -> google.protobuf.Timestamp
	124, // 98: arista.studio.v1.SecretInputStreamResponse.type:type_name -> arista.subscriptions.Operation
	120, // 99: arista.studio.v1.StudioRequest.key:type_name -> arista.studio.v1.StudioKey
	121, // 100: arista.studio.v1.StudioRequest.time:type_name -> google.protobuf.Timestamp
	135, // 101: arista.studio.v1.StudioResponse.value:type_name -> arista.studio.v1.Studio
	121, // 102: arista.studio.v1.StudioResponse.time:type_name -> google.protobuf.Timestamp
	135, // 103: arista.studio.v1.StudioStreamRequest.partial_eq_filter:type_name -> arista.studio.v1.Studio
	123, // 104: arista.studio.v1.StudioStreamRequest.time:type_name -> arista.time.TimeBounds
	135, // 105: arista.studio.v1.StudioStreamResponse.value:type_name -> arista.studio.v1.Studio
	121, // 106: arista.studio.v1.StudioStreamResponse.time:type_name -> google.protobuf.Timestamp
	124, // 107: arista.studio.v1.StudioStreamResponse.type:type_name -> arista.subscriptions.Operation
	120, // 108: arista.studio.v1.StudioConfigRequest.key:type_name -> arista.studio.v1.StudioKey
	121, // 109: arista.studio.v1.StudioConfigRequest.time:type_name -> google.protobuf.Timestamp
	136, // 110: arista.studio.v1.StudioConfigResponse.value:type_name -> arista.studio.v1.StudioConfig
	121, // 111: arista.studio.v1.StudioConfigResponse.time:type_name -> google.protobuf.Timestamp
	136, // 112: arista.studio.v1.StudioConfigStreamRequest.partial_eq_filter:type_name -> arista.studio.v1.StudioConfig
	123, // 113: arista.studio.v1.StudioConfigStreamRequest.time:type_name -> arista.time.TimeBounds
	136, // 114: arista.studio.v1.StudioConfigStreamResponse.value:type_name -> arista.studio.v1.StudioConfig
	121, // 115: arista.studio.v1.StudioConfigStreamResponse.time:type_name -> google.protobuf.Timestamp
	124, // 116: arista.studio.v1.StudioConfigStreamResponse.type:type_name -> arista.subscriptions.Operation
	136, // 117: arista.studio.v1.StudioConfigSetRequest.value:type_name -> arista.studio.v1.StudioConfig
	136, // 118: arista.studio.v1.StudioConfigSetResponse.value:type_name -> arista.studio.v1.StudioConfig
	121, // 119: arista.studio.v1.StudioConfigSetResponse.time:type_name -> google.protobuf.Timestamp
	136, // 120: arista.studio.v1.StudioConfigSetSomeRequest.values:type_name -> arista.studio.v1.StudioConfig
	120, // 121: arista.studio.v1.StudioConfigSetSomeResponse.key:type_name -> arista.studio.v1.StudioKey
	120, // 122: arista.studio.v1.StudioConfigDeleteRequest.key:type_name -> arista.studio.v1.StudioKey
	120, // 123: arista.studio.v1.StudioConfigDeleteResponse.key:type_name -> arista.studio.v1.StudioKey
	121, // 124: arista.studio.v1.StudioConfigDeleteResponse.time:type_name -> google.protobuf.Timestamp
	126, // 125: arista.studio.v1.StudioConfigDeleteAllResponse.type:type_name -> fmp.DeleteError
	127, // 126: arista.studio.v1.StudioConfigDeleteAllResponse.error:type_name -> google.protobuf.StringValue
	120, // 127: arista.studio.v1.StudioConfigDeleteAllResponse.key:type_name -> arista.studio.v1.StudioKey
	121, // 128: arista.studio.v1.StudioConfigDeleteAllResponse.time:type_name -> google.protobuf.Timestamp
	120, // 129: arista.studio.v1.StudioSummaryRequest.key:type_name -> arista.studio.v1.StudioKey
	121, // 130: arista.studio.v1.StudioSummaryRequest.time:type_name -> google.protobuf.Timestamp
	137, // 131: arista.studio.v1.StudioSummaryResponse.value:type_name -> arista.studio.v1.StudioSummary
	121, // 132: arista.studio.v1.StudioSummaryResponse.time:type_name -> google.protobuf.Timestamp
	137, // 133: arista.studio.v1.StudioSummaryStreamRequest.partial_eq_filter:type_name -> arista.studio.v1.StudioSummary
	123, // 134: arista.studio.v1.StudioSummaryStreamRequest.time:type_name -> arista.time.TimeBounds
	137, // 135: arista.studio.v1.StudioSummaryStreamResponse.value:type_name -> arista.studio.v1.StudioSummary
	121, // 136: arista.studio.v1.StudioSummaryStreamResponse.time:type_name -> google.protobuf.Timestamp
	124, // 137: arista.studio.v1.StudioSummaryStreamResponse.type:type_name -> arista.subscriptions.Operation
	138, // 138: arista.studio.v1.TopologyInputRequest.key:type_name -> arista.studio.v1.TopologyInputKey
	121, // 139: arista.studio.v1.TopologyInputRequest.time:type_name -> google.protobuf.Timestamp
	139, // 140: arista.studio.v1.TopologyInputResponse.value:type_name -> arista.studio.v1.TopologyInput
	121, // 141: arista.studio.v1.TopologyInputResponse.time:type_name -> google.protobuf.Timestamp
	139, // 142: arista.studio.v1.TopologyInputStreamRequest.partial_eq_filter:type_name -> arista.studio.v1.TopologyInput
	123, // 143: arista.studio.v1.TopologyInputStreamRequest.time:type_name -> arista.time.TimeBounds
	139, // 144: arista.studio.v1.TopologyInputStreamResponse.value:type_name -> arista.studio.v1.TopologyInput
	121, // 145: arista.studio.v1.TopologyInputStreamResponse.time:type_name -> google.protobuf.Timestamp
	124, // 146: arista.studio.v1.TopologyInputStreamResponse.type:type_name -> arista.subscriptions.Operation
	138, // 147: arista.studio.v1.TopologyInputConfigRequest.key:type_name -> arista.studio.v1.TopologyInputKey
	121, // 148: arista.studio.v1.TopologyInputConfigRequest.time:type_name -> google.protobuf.Timestamp
	140, // 149: arista.studio.v1.TopologyInputConfigResponse.value:type_name -> arista.studio.v1.TopologyInputConfig
	121, // 150: arista.studio.v1.TopologyInputConfigResponse.time:type_name -> google.protobuf.Timestamp
	140, // 151: arista.studio.v1.TopologyInputConfigStreamRequest.partial_eq_filter:type_name -> arista.studio.v1.TopologyInputConfig
	123, // 152: arista.studio.v1.TopologyInputConfigStreamRequest.time:type_name -> arista.time.TimeBounds
	140, // 153: arista.studio.v1.TopologyInputConfigStreamResponse.value:type_name -> arista.studio.v1.TopologyInputConfig
	121, // 154: arista.studio.v1.TopologyInputConfigStreamResponse.time:type_name -> google.protobuf.Timestamp
	124, // 155: arista.studio.v1.TopologyInputConfigStreamResponse.type:type_name -> arista.subscriptions.Operation
	140, // 156: arista.studio.v1.TopologyInputConfigSetRequest.value:type_name -> arista.studio.v1.TopologyInputConfig
	140, // 157: arista.studio.v1.TopologyInputConfigSetResponse.value:type_name -> arista.studio.v1.TopologyInputConfig
	121, // 158: arista.studio.v1.TopologyInputConfigSetResponse.time:type_name -> google.protobuf.Timestamp
	140, // 159: arista.studio.v1.TopologyInputConfigSetSomeRequest.values:type_name -> arista.studio.v1.TopologyInputConfig
	138, // 160: arista.studio.v1.TopologyInputConfigSetSomeResponse.key:type_name -> arista.studio.v1.TopologyInputKey
	138, // 161: arista.studio.v1.TopologyInputConfigDeleteRequest.key:type_name -> arista.studio.v1.TopologyInputKey
	138, // 162: arista.studio.v1.TopologyInputConfigDeleteResponse.key:type_name -> arista.studio.v1.TopologyInputKey
	121, // 163: arista.studio.v1.TopologyInputConfigDeleteResponse.time:type_name -> google.protobuf.Timestamp
	126, // 164: arista.studio.v1.TopologyInputConfigDeleteAllResponse.type:type_name -> fmp.DeleteError
	127, // 165: arista.studio.v1.TopologyInputConfigDeleteAllResponse.error:type_name -> google.protobuf.StringValue
	138, // 166: arista.studio.v1.TopologyInputConfigDeleteAllResponse.key:type_name -> arista.studio.v1.TopologyInputKey
	121, // 167: arista.studio.v1.TopologyInputConfigDeleteAllResponse.time:type_name -> google.protobuf.Timestamp
	141, // 168: arista.studio.v1.TopologyUpdateRequest.key:type_name -> arista.studio.v1.TopologyUpdateKey
	121, // 169: arista.studio.v1.TopologyUpdateRequest.time:type_name -> google.protobuf.Timestamp
	142, // 170: arista.studio.v1.TopologyUpdateResponse.value:type_name -> arista.studio.v1.TopologyUpdate
	121, // 171: arista.studio.v1.TopologyUpdateResponse.time:type_name -> google.protobuf.Timestamp
	142, // 172: arista.studio.v1.TopologyUpdateStreamRequest.partial_eq_filter:type_name -> arista.studio.v1.TopologyUpdate
	123, // 173: arista.studio.v1.TopologyUpdateStreamRequest.time:type_name -> arista.time.TimeBounds
	142, // 174: arista.studio.v1.TopologyUpdateStreamResponse.value:type_name -> arista.studio.v1.TopologyUpdate
	121, // 175: arista.studio.v1.TopologyUpdateStreamResponse.time:type_name -> google.protobuf.Timestamp
	124, // 176: arista.studio.v1.TopologyUpdateStreamResponse.type:type_name -> arista.subscriptions.Operation
	141, // 177: arista.studio.v1.TopologyUpdateConfigRequest.key:type_name -> arista.studio.v1.TopologyUpdateKey
	121, // 178: arista.studio.v1.TopologyUpdateConfigRequest.time:type_name -> google.protobuf.Timestamp
	143, // 179: arista.studio.v1.TopologyUpdateConfigResponse.value:type_name -> arista.studio.v1.TopologyUpdateConfig
	121, // 180: arista.studio.v1.TopologyUpdateConfigResponse.time:type_name -> google.protobuf.Timestamp
	143, // 181: arista.studio.v1.TopologyUpdateConfigStreamRequest.partial_eq_filter:type_name -> arista.studio.v1.TopologyUpdateConfig
	123, // 182: arista.studio.v1.TopologyUpdateConfigStreamRequest.time:type_name -> arista.time.TimeBounds
	143, // 183: arista.studio.v1.TopologyUpdateConfigStreamResponse.value:type_name -> arista.studio.v1.TopologyUpdateConfig
	121, // 184: arista.studio.v1.TopologyUpdateConfigStreamResponse.time:type_name -> google.protobuf.Timestamp
	124, // 185: arista.studio.v1.TopologyUpdateConfigStreamResponse.type:type_name -> arista.subscriptions.Operation
	143, // 186: arista.studio.v1.TopologyUpdateConfigSetRequest.value:type_name -> arista.studio.v1.TopologyUpdateConfig
	143, // 187: arista.studio.v1.TopologyUpdateConfigSetResponse.value:type_name -> arista.studio.v1.TopologyUpdateConfig
	121, // 188: arista.studio.v1.TopologyUpdateConfigSetResponse.time:type_name -> google.protobuf.Timestamp
	143, // 189: arista.studio.v1.TopologyUpdateConfigSetSomeRequest.values:type_name -> arista.studio.v1.TopologyUpdateConfig
	141, // 190: arista.studio.v1.TopologyUpdateConfigSetSomeResponse.key:type_name -> arista.studio.v1.TopologyUpdateKey
	141, // 191: arista.studio.v1.TopologyUpdateConfigDeleteRequest.key:type_name -> arista.studio.v1.TopologyUpdateKey
	141, // 192: arista.studio.v1.TopologyUpdateConfigDeleteResponse.key:type_name -> arista.studio.v1.TopologyUpdateKey
	121, // 193: arista.studio.v1.TopologyUpdateConfigDeleteResponse.time:type_name -> google.protobuf.Timestamp
	126, // 194: arista.studio.v1.TopologyUpdateConfigDeleteAllResponse.type:type_name -> fmp.DeleteError
	127, // 195: arista.studio.v1.TopologyUpdateConfigDeleteAllResponse.error:type_name -> google.protobuf.StringValue
	141, // 196: arista.studio.v1.TopologyUpdateConfigDeleteAllResponse.key:type_name -> arista.studio.v1.TopologyUpdateKey
	121, // 197: arista.studio.v1.TopologyUpdateConfigDeleteAllResponse.time:type_name -> google.protobuf.Timestamp
	144, // 198: arista.studio.v1.TopologyUpdateSyncRequest.key:type_name -> arista.studio.v1.WorkspaceKey
	121, // 199: arista.studio.v1.TopologyUpdateSyncRequest.time:type_name -> google.protobuf.Timestamp
	145, // 200: arista.studio.v1.TopologyUpdateSyncResponse.value:type_name -> arista.studio.v1.TopologyUpdateSync
	121, // 201: arista.studio.v1.TopologyUpdateSyncResponse.time:type_name -> google.protobuf.Timestamp
	145, // 202: arista.studio.v1.TopologyUpdateSyncStreamRequest.partial_eq_filter:type_name -> arista.studio.v1.TopologyUpdateSync
	123, // 203: arista.studio.v1.TopologyUpdateSyncStreamRequest.time:type_name -> arista.time.TimeBounds
	145, // 204: arista.studio.v1.TopologyUpdateSyncStreamResponse.value:type_name -> arista.studio.v1.TopologyUpdateSync
	121, // 205: arista.studio.v1.TopologyUpdateSyncStreamResponse.time:type_name -> google.protobuf.Timestamp
	124, // 206: arista.studio.v1.TopologyUpdateSyncStreamResponse.type:type_name -> arista.subscriptions.Operation
	144, // 207: arista.studio.v1.TopologyUpdateSyncConfigRequest.key:type_name -> arista.studio.v1.WorkspaceKey
	121, // 208: arista.studio.v1.TopologyUpdateSyncConfigRequest.time:type_name -> google.protobuf.Timestamp
	146, // 209: arista.studio.v1.TopologyUpdateSyncConfigResponse.value:type_name -> arista.studio.v1.TopologyUpdateSyncConfig
	121, // 210: arista.studio.v1.TopologyUpdateSyncConfigResponse.time:type_name -> google.protobuf.Timestamp
	146, // 211: arista.studio.v1.TopologyUpdateSyncConfigStreamRequest.partial_eq_filter:type_name -> arista.studio.v1.TopologyUpdateSyncConfig
	123, // 212: arista.studio.v1.TopologyUpdateSyncConfigStreamRequest.time:type_name -> arista.time.TimeBounds
	146, // 213: arista.studio.v1.TopologyUpdateSyncConfigStreamResponse.value:type_name -> arista.studio.v1.TopologyUpdateSyncConfig
	121, // 214: arista.studio.v1.TopologyUpdateSyncConfigStreamResponse.time:type_name -> google.protobuf.Timestamp
	124, // 215: arista.studio.v1.TopologyUpdateSyncConfigStreamResponse.type:type_name -> arista.subscriptions.Operation
	146, // 216: arista.studio.v1.TopologyUpdateSyncConfigSetRequest.value:type_name -> arista.studio.v1.TopologyUpdateSyncConfig
	146, // 217: arista.studio.v1.TopologyUpdateSyncConfigSetResponse.value:type_name -> arista.studio.v1.TopologyUpdateSyncConfig
	121, // 218: arista.studio.v1.TopologyUpdateSyncConfigSetResponse.time:type_name -> google.protobuf.Timestamp
	146, // 219: arista.studio.v1.TopologyUpdateSyncConfigSetSomeRequest.values:type_name -> arista.studio.v1.TopologyUpdateSyncConfig
	144, // 220: arista.studio.v1.TopologyUpdateSyncConfigSetSomeResponse.key:type_name -> arista.studio.v1.WorkspaceKey
	144, // 221: arista.studio.v1.TopologyUpdateSyncConfigDeleteRequest.key:type_name -> arista.studio.v1.WorkspaceKey
	144, // 222: arista.studio.v1.TopologyUpdateSyncConfigDeleteResponse.key:type_name -> arista.studio.v1.WorkspaceKey
	121, // 223: arista.studio.v1.TopologyUpdateSyncConfigDeleteResponse.time:type_name -> google.protobuf.Timestamp
	126, // 224: arista.studio.v1.TopologyUpdateSyncConfigDeleteAllResponse.type:type_name -> fmp.DeleteError
	127, // 225: arista.studio.v1.TopologyUpdateSyncConfigDeleteAllResponse.error:type_name -> google.protobuf.StringValue
	144, // 226: arista.studio.v1.TopologyUpdateSyncConfigDeleteAllResponse.key:type_name -> arista.studio.v1.WorkspaceKey
	121, // 227: arista.studio.v1.TopologyUpdateSyncConfigDeleteAllResponse.time:type_name -> google.protobuf.Timestamp
	0,   // 228: arista.studio.v1.AssignedTagsService.GetOne:input_type -> arista.studio.v1.AssignedTagsRequest
	2,   // 229: arista.studio.v1.AssignedTagsService.GetAll:input_type -> arista.studio.v1.AssignedTagsStreamRequest
	2,   // 230: arista.studio.v1.AssignedTagsService.Subscribe:input_type -> arista.studio.v1.AssignedTagsStreamRequest
	4,   // 231: arista.studio.v1.AssignedTagsConfigService.GetOne:input_type -> arista.studio.v1.AssignedTagsConfigRequest
	6,   // 232: arista.studio.v1.AssignedTagsConfigService.GetAll:input_type -> arista.studio.v1.AssignedTagsConfigStreamRequest
	6,   // 233: arista.studio.v1.AssignedTagsConfigService.Subscribe:input_type -> arista.studio.v1.AssignedTagsConfigStreamRequest
	8,   // 234: arista.studio.v1.AssignedTagsConfigService.Set:input_type -> arista.studio.v1.AssignedTagsConfigSetRequest
	10,  // 235: arista.studio.v1.AssignedTagsConfigService.SetSome:input_type -> arista.studio.v1.AssignedTagsConfigSetSomeRequest
	12,  // 236: arista.studio.v1.AssignedTagsConfigService.Delete:input_type -> arista.studio.v1.AssignedTagsConfigDeleteRequest
	14,  // 237: arista.studio.v1.AssignedTagsConfigService.DeleteAll:input_type -> arista.studio.v1.AssignedTagsConfigDeleteAllRequest
	16,  // 238: arista.studio.v1.AutofillActionService.GetOne:input_type -> arista.studio.v1.AutofillActionRequest
	18,  // 239: arista.studio.v1.AutofillActionService.GetAll:input_type -> arista.studio.v1.AutofillActionStreamRequest
	18,  // 240: arista.studio.v1.AutofillActionService.Subscribe:input_type -> arista.studio.v1.AutofillActionStreamRequest
	20,  // 241: arista.studio.v1.AutofillActionConfigService.GetOne:input_type -> arista.studio.v1.AutofillActionConfigRequest
	22,  // 242: arista.studio.v1.AutofillActionConfigService.GetAll:input_type -> arista.studio.v1.AutofillActionConfigStreamRequest
	22,  // 243: arista.studio.v1.AutofillActionConfigService.Subscribe:input_type -> arista.studio.v1.AutofillActionConfigStreamRequest
	24,  // 244: arista.studio.v1.AutofillActionConfigService.Set:input_type -> arista.studio.v1.AutofillActionConfigSetRequest
	26,  // 245: arista.studio.v1.AutofillActionConfigService.SetSome:input_type -> arista.studio.v1.AutofillActionConfigSetSomeRequest
	28,  // 246: arista.studio.v1.AutofillActionConfigService.Delete:input_type -> arista.studio.v1.AutofillActionConfigDeleteRequest
	30,  // 247: arista.studio.v1.AutofillActionConfigService.DeleteAll:input_type -> arista.studio.v1.AutofillActionConfigDeleteAllRequest
	32,  // 248: arista.studio.v1.InputsService.GetOne:input_type -> arista.studio.v1.InputsRequest
	34,  // 249: arista.studio.v1.InputsService.GetAll:input_type -> arista.studio.v1.InputsStreamRequest
	34,  // 250: arista.studio.v1.InputsService.Subscribe:input_type -> arista.studio.v1.InputsStreamRequest
	36,  // 251: arista.studio.v1.InputsConfigService.GetOne:input_type -> arista.studio.v1.InputsConfigRequest
	38,  // 252: arista.studio.v1.InputsConfigService.GetAll:input_type -> arista.studio.v1.InputsConfigStreamRequest
	38,  // 253: arista.studio.v1.InputsConfigService.Subscribe:input_type -> arista.studio.v1.InputsConfigStreamRequest
	40,  // 254: arista.studio.v1.InputsConfigService.Set:input_type -> arista.studio.v1.InputsConfigSetRequest
	42,  // 255: arista.studio.v1.InputsConfigService.SetSome:input_type -> arista.studio.v1.InputsConfigSetSomeRequest
	44,  // 256: arista.studio.v1.InputsConfigService.Delete:input_type -> arista.studio.v1.InputsConfigDeleteRequest
	46,  // 257: arista.studio.v1.InputsConfigService.DeleteAll:input_type -> arista.studio.v1.InputsConfigDeleteAllRequest
	48,  // 258: arista.studio.v1.SecretInputService.GetOne:input_type -> arista.studio.v1.SecretInputRequest
	50,  // 259: arista.studio.v1.SecretInputService.GetAll:input_type -> arista.studio.v1.SecretInputStreamRequest
	50,  // 260: arista.studio.v1.SecretInputService.Subscribe:input_type -> arista.studio.v1.SecretInputStreamRequest
	52,  // 261: arista.studio.v1.StudioService.GetOne:input_type -> arista.studio.v1.StudioRequest
	54,  // 262: arista.studio.v1.StudioService.GetAll:input_type -> arista.studio.v1.StudioStreamRequest
	54,  // 263: arista.studio.v1.StudioService.Subscribe:input_type -> arista.studio.v1.StudioStreamRequest
	56,  // 264: arista.studio.v1.StudioConfigService.GetOne:input_type -> arista.studio.v1.StudioConfigRequest
	58,  // 265: arista.studio.v1.StudioConfigService.GetAll:input_type -> arista.studio.v1.StudioConfigStreamRequest
	58,  // 266: arista.studio.v1.StudioConfigService.Subscribe:input_type -> arista.studio.v1.StudioConfigStreamRequest
	60,  // 267: arista.studio.v1.StudioConfigService.Set:input_type -> arista.studio.v1.StudioConfigSetRequest
	62,  // 268: arista.studio.v1.StudioConfigService.SetSome:input_type -> arista.studio.v1.StudioConfigSetSomeRequest
	64,  // 269: arista.studio.v1.StudioConfigService.Delete:input_type -> arista.studio.v1.StudioConfigDeleteRequest
	66,  // 270: arista.studio.v1.StudioConfigService.DeleteAll:input_type -> arista.studio.v1.StudioConfigDeleteAllRequest
	68,  // 271: arista.studio.v1.StudioSummaryService.GetOne:input_type -> arista.studio.v1.StudioSummaryRequest
	70,  // 272: arista.studio.v1.StudioSummaryService.GetAll:input_type -> arista.studio.v1.StudioSummaryStreamRequest
	70,  // 273: arista.studio.v1.StudioSummaryService.Subscribe:input_type -> arista.studio.v1.StudioSummaryStreamRequest
	72,  // 274: arista.studio.v1.TopologyInputService.GetOne:input_type -> arista.studio.v1.TopologyInputRequest
	74,  // 275: arista.studio.v1.TopologyInputService.GetAll:input_type -> arista.studio.v1.TopologyInputStreamRequest
	74,  // 276: arista.studio.v1.TopologyInputService.Subscribe:input_type -> arista.studio.v1.TopologyInputStreamRequest
	76,  // 277: arista.studio.v1.TopologyInputConfigService.GetOne:input_type -> arista.studio.v1.TopologyInputConfigRequest
	78,  // 278: arista.studio.v1.TopologyInputConfigService.GetAll:input_type -> arista.studio.v1.TopologyInputConfigStreamRequest
	78,  // 279: arista.studio.v1.TopologyInputConfigService.Subscribe:input_type -> arista.studio.v1.TopologyInputConfigStreamRequest
	80,  // 280: arista.studio.v1.TopologyInputConfigService.Set:input_type -> arista.studio.v1.TopologyInputConfigSetRequest
	82,  // 281: arista.studio.v1.TopologyInputConfigService.SetSome:input_type -> arista.studio.v1.TopologyInputConfigSetSomeRequest
	84,  // 282: arista.studio.v1.TopologyInputConfigService.Delete:input_type -> arista.studio.v1.TopologyInputConfigDeleteRequest
	86,  // 283: arista.studio.v1.TopologyInputConfigService.DeleteAll:input_type -> arista.studio.v1.TopologyInputConfigDeleteAllRequest
	88,  // 284: arista.studio.v1.TopologyUpdateService.GetOne:input_type -> arista.studio.v1.TopologyUpdateRequest
	90,  // 285: arista.studio.v1.TopologyUpdateService.GetAll:input_type -> arista.studio.v1.TopologyUpdateStreamRequest
	90,  // 286: arista.studio.v1.TopologyUpdateService.Subscribe:input_type -> arista.studio.v1.TopologyUpdateStreamRequest
	92,  // 287: arista.studio.v1.TopologyUpdateConfigService.GetOne:input_type -> arista.studio.v1.TopologyUpdateConfigRequest
	94,  // 288: arista.studio.v1.TopologyUpdateConfigService.GetAll:input_type -> arista.studio.v1.TopologyUpdateConfigStreamRequest
	94,  // 289: arista.studio.v1.TopologyUpdateConfigService.Subscribe:input_type -> arista.studio.v1.TopologyUpdateConfigStreamRequest
	96,  // 290: arista.studio.v1.TopologyUpdateConfigService.Set:input_type -> arista.studio.v1.TopologyUpdateConfigSetRequest
	98,  // 291: arista.studio.v1.TopologyUpdateConfigService.SetSome:input_type -> arista.studio.v1.TopologyUpdateConfigSetSomeRequest
	100, // 292: arista.studio.v1.TopologyUpdateConfigService.Delete:input_type -> arista.studio.v1.TopologyUpdateConfigDeleteRequest
	102, // 293: arista.studio.v1.TopologyUpdateConfigService.DeleteAll:input_type -> arista.studio.v1.TopologyUpdateConfigDeleteAllRequest
	104, // 294: arista.studio.v1.TopologyUpdateSyncService.GetOne:input_type -> arista.studio.v1.TopologyUpdateSyncRequest
	106, // 295: arista.studio.v1.TopologyUpdateSyncService.GetAll:input_type -> arista.studio.v1.TopologyUpdateSyncStreamRequest
	106, // 296: arista.studio.v1.TopologyUpdateSyncService.Subscribe:input_type -> arista.studio.v1.TopologyUpdateSyncStreamRequest
	108, // 297: arista.studio.v1.TopologyUpdateSyncConfigService.GetOne:input_type -> arista.studio.v1.TopologyUpdateSyncConfigRequest
	110, // 298: arista.studio.v1.TopologyUpdateSyncConfigService.GetAll:input_type -> arista.studio.v1.TopologyUpdateSyncConfigStreamRequest
	110, // 299: arista.studio.v1.TopologyUpdateSyncConfigService.Subscribe:input_type -> arista.studio.v1.TopologyUpdateSyncConfigStreamRequest
	112, // 300: arista.studio.v1.TopologyUpdateSyncConfigService.Set:input_type -> arista.studio.v1.TopologyUpdateSyncConfigSetRequest
	114, // 301: arista.studio.v1.TopologyUpdateSyncConfigService.SetSome:input_type -> arista.studio.v1.TopologyUpdateSyncConfigSetSomeRequest
	116, // 302: arista.studio.v1.TopologyUpdateSyncConfigService.Delete:input_type -> arista.studio.v1.TopologyUpdateSyncConfigDeleteRequest
	118, // 303: arista.studio.v1.TopologyUpdateSyncConfigService.DeleteAll:input_type -> arista.studio.v1.TopologyUpdateSyncConfigDeleteAllRequest
	1,   // 304: arista.studio.v1.AssignedTagsService.GetOne:output_type -> arista.studio.v1.AssignedTagsResponse
	3,   // 305: arista.studio.v1.AssignedTagsService.GetAll:output_type -> arista.studio.v1.AssignedTagsStreamResponse
	3,   // 306: arista.studio.v1.AssignedTagsService.Subscribe:output_type -> arista.studio.v1.AssignedTagsStreamResponse
	5,   // 307: arista.studio.v1.AssignedTagsConfigService.GetOne:output_type -> arista.studio.v1.AssignedTagsConfigResponse
	7,   // 308: arista.studio.v1.AssignedTagsConfigService.GetAll:output_type -> arista.studio.v1.AssignedTagsConfigStreamResponse
	7,   // 309: arista.studio.v1.AssignedTagsConfigService.Subscribe:output_type -> arista.studio.v1.AssignedTagsConfigStreamResponse
	9,   // 310: arista.studio.v1.AssignedTagsConfigService.Set:output_type -> arista.studio.v1.AssignedTagsConfigSetResponse
	11,  // 311: arista.studio.v1.AssignedTagsConfigService.SetSome:output_type -> arista.studio.v1.AssignedTagsConfigSetSomeResponse
	13,  // 312: arista.studio.v1.AssignedTagsConfigService.Delete:output_type -> arista.studio.v1.AssignedTagsConfigDeleteResponse
	15,  // 313: arista.studio.v1.AssignedTagsConfigService.DeleteAll:output_type -> arista.studio.v1.AssignedTagsConfigDeleteAllResponse
	17,  // 314: arista.studio.v1.AutofillActionService.GetOne:output_type -> arista.studio.v1.AutofillActionResponse
	19,  // 315: arista.studio.v1.AutofillActionService.GetAll:output_type -> arista.studio.v1.AutofillActionStreamResponse
	19,  // 316: arista.studio.v1.AutofillActionService.Subscribe:output_type -> arista.studio.v1.AutofillActionStreamResponse
	21,  // 317: arista.studio.v1.AutofillActionConfigService.GetOne:output_type -> arista.studio.v1.AutofillActionConfigResponse
	23,  // 318: arista.studio.v1.AutofillActionConfigService.GetAll:output_type -> arista.studio.v1.AutofillActionConfigStreamResponse
	23,  // 319: arista.studio.v1.AutofillActionConfigService.Subscribe:output_type -> arista.studio.v1.AutofillActionConfigStreamResponse
	25,  // 320: arista.studio.v1.AutofillActionConfigService.Set:output_type -> arista.studio.v1.AutofillActionConfigSetResponse
	27,  // 321: arista.studio.v1.AutofillActionConfigService.SetSome:output_type -> arista.studio.v1.AutofillActionConfigSetSomeResponse
	29,  // 322: arista.studio.v1.AutofillActionConfigService.Delete:output_type -> arista.studio.v1.AutofillActionConfigDeleteResponse
	31,  // 323: arista.studio.v1.AutofillActionConfigService.DeleteAll:output_type -> arista.studio.v1.AutofillActionConfigDeleteAllResponse
	33,  // 324: arista.studio.v1.InputsService.GetOne:output_type -> arista.studio.v1.InputsResponse
	35,  // 325: arista.studio.v1.InputsService.GetAll:output_type -> arista.studio.v1.InputsStreamResponse
	35,  // 326: arista.studio.v1.InputsService.Subscribe:output_type -> arista.studio.v1.InputsStreamResponse
	37,  // 327: arista.studio.v1.InputsConfigService.GetOne:output_type -> arista.studio.v1.InputsConfigResponse
	39,  // 328: arista.studio.v1.InputsConfigService.GetAll:output_type -> arista.studio.v1.InputsConfigStreamResponse
	39,  // 329: arista.studio.v1.InputsConfigService.Subscribe:output_type -> arista.studio.v1.InputsConfigStreamResponse
	41,  // 330: arista.studio.v1.InputsConfigService.Set:output_type -> arista.studio.v1.InputsConfigSetResponse
	43,  // 331: arista.studio.v1.InputsConfigService.SetSome:output_type -> arista.studio.v1.InputsConfigSetSomeResponse
	45,  // 332: arista.studio.v1.InputsConfigService.Delete:output_type -> arista.studio.v1.InputsConfigDeleteResponse
	47,  // 333: arista.studio.v1.InputsConfigService.DeleteAll:output_type -> arista.studio.v1.InputsConfigDeleteAllResponse
	49,  // 334: arista.studio.v1.SecretInputService.GetOne:output_type -> arista.studio.v1.SecretInputResponse
	51,  // 335: arista.studio.v1.SecretInputService.GetAll:output_type -> arista.studio.v1.SecretInputStreamResponse
	51,  // 336: arista.studio.v1.SecretInputService.Subscribe:output_type -> arista.studio.v1.SecretInputStreamResponse
	53,  // 337: arista.studio.v1.StudioService.GetOne:output_type -> arista.studio.v1.StudioResponse
	55,  // 338: arista.studio.v1.StudioService.GetAll:output_type -> arista.studio.v1.StudioStreamResponse
	55,  // 339: arista.studio.v1.StudioService.Subscribe:output_type -> arista.studio.v1.StudioStreamResponse
	57,  // 340: arista.studio.v1.StudioConfigService.GetOne:output_type -> arista.studio.v1.StudioConfigResponse
	59,  // 341: arista.studio.v1.StudioConfigService.GetAll:output_type -> arista.studio.v1.StudioConfigStreamResponse
	59,  // 342: arista.studio.v1.StudioConfigService.Subscribe:output_type -> arista.studio.v1.StudioConfigStreamResponse
	61,  // 343: arista.studio.v1.StudioConfigService.Set:output_type -> arista.studio.v1.StudioConfigSetResponse
	63,  // 344: arista.studio.v1.StudioConfigService.SetSome:output_type -> arista.studio.v1.StudioConfigSetSomeResponse
	65,  // 345: arista.studio.v1.StudioConfigService.Delete:output_type -> arista.studio.v1.StudioConfigDeleteResponse
	67,  // 346: arista.studio.v1.StudioConfigService.DeleteAll:output_type -> arista.studio.v1.StudioConfigDeleteAllResponse
	69,  // 347: arista.studio.v1.StudioSummaryService.GetOne:output_type -> arista.studio.v1.StudioSummaryResponse
	71,  // 348: arista.studio.v1.StudioSummaryService.GetAll:output_type -> arista.studio.v1.StudioSummaryStreamResponse
	71,  // 349: arista.studio.v1.StudioSummaryService.Subscribe:output_type -> arista.studio.v1.StudioSummaryStreamResponse
	73,  // 350: arista.studio.v1.TopologyInputService.GetOne:output_type -> arista.studio.v1.TopologyInputResponse
	75,  // 351: arista.studio.v1.TopologyInputService.GetAll:output_type -> arista.studio.v1.TopologyInputStreamResponse
	75,  // 352: arista.studio.v1.TopologyInputService.Subscribe:output_type -> arista.studio.v1.TopologyInputStreamResponse
	77,  // 353: arista.studio.v1.TopologyInputConfigService.GetOne:output_type -> arista.studio.v1.TopologyInputConfigResponse
	79,  // 354: arista.studio.v1.TopologyInputConfigService.GetAll:output_type -> arista.studio.v1.TopologyInputConfigStreamResponse
	79,  // 355: arista.studio.v1.TopologyInputConfigService.Subscribe:output_type -> arista.studio.v1.TopologyInputConfigStreamResponse
	81,  // 356: arista.studio.v1.TopologyInputConfigService.Set:output_type -> arista.studio.v1.TopologyInputConfigSetResponse
	83,  // 357: arista.studio.v1.TopologyInputConfigService.SetSome:output_type -> arista.studio.v1.TopologyInputConfigSetSomeResponse
	85,  // 358: arista.studio.v1.TopologyInputConfigService.Delete:output_type -> arista.studio.v1.TopologyInputConfigDeleteResponse
	87,  // 359: arista.studio.v1.TopologyInputConfigService.DeleteAll:output_type -> arista.studio.v1.TopologyInputConfigDeleteAllResponse
	89,  // 360: arista.studio.v1.TopologyUpdateService.GetOne:output_type -> arista.studio.v1.TopologyUpdateResponse
	91,  // 361: arista.studio.v1.TopologyUpdateService.GetAll:output_type -> arista.studio.v1.TopologyUpdateStreamResponse
	91,  // 362: arista.studio.v1.TopologyUpdateService.Subscribe:output_type -> arista.studio.v1.TopologyUpdateStreamResponse
	93,  // 363: arista.studio.v1.TopologyUpdateConfigService.GetOne:output_type -> arista.studio.v1.TopologyUpdateConfigResponse
	95,  // 364: arista.studio.v1.TopologyUpdateConfigService.GetAll:output_type -> arista.studio.v1.TopologyUpdateConfigStreamResponse
	95,  // 365: arista.studio.v1.TopologyUpdateConfigService.Subscribe:output_type -> arista.studio.v1.TopologyUpdateConfigStreamResponse
	97,  // 366: arista.studio.v1.TopologyUpdateConfigService.Set:output_type -> arista.studio.v1.TopologyUpdateConfigSetResponse
	99,  // 367: arista.studio.v1.TopologyUpdateConfigService.SetSome:output_type -> arista.studio.v1.TopologyUpdateConfigSetSomeResponse
	101, // 368: arista.studio.v1.TopologyUpdateConfigService.Delete:output_type -> arista.studio.v1.TopologyUpdateConfigDeleteResponse
	103, // 369: arista.studio.v1.TopologyUpdateConfigService.DeleteAll:output_type -> arista.studio.v1.TopologyUpdateConfigDeleteAllResponse
	105, // 370: arista.studio.v1.TopologyUpdateSyncService.GetOne:output_type -> arista.studio.v1.TopologyUpdateSyncResponse
	107, // 371: arista.studio.v1.TopologyUpdateSyncService.GetAll:output_type -> arista.studio.v1.TopologyUpdateSyncStreamResponse
	107, // 372: arista.studio.v1.TopologyUpdateSyncService.Subscribe:output_type -> arista.studio.v1.TopologyUpdateSyncStreamResponse
	109, // 373: arista.studio.v1.TopologyUpdateSyncConfigService.GetOne:output_type -> arista.studio.v1.TopologyUpdateSyncConfigResponse
	111, // 374: arista.studio.v1.TopologyUpdateSyncConfigService.GetAll:output_type -> arista.studio.v1.TopologyUpdateSyncConfigStreamResponse
	111, // 375: arista.studio.v1.TopologyUpdateSyncConfigService.Subscribe:output_type -> arista.studio.v1.TopologyUpdateSyncConfigStreamResponse
	113, // 376: arista.studio.v1.TopologyUpdateSyncConfigService.Set:output_type -> arista.studio.v1.TopologyUpdateSyncConfigSetResponse
	115, // 377: arista.studio.v1.TopologyUpdateSyncConfigService.SetSome:output_type -> arista.studio.v1.TopologyUpdateSyncConfigSetSomeResponse
	117, // 378: arista.studio.v1.TopologyUpdateSyncConfigService.Delete:output_type -> arista.studio.v1.TopologyUpdateSyncConfigDeleteResponse
	119, // 379: arista.studio.v1.TopologyUpdateSyncConfigService.DeleteAll:output_type -> arista.studio.v1.TopologyUpdateSyncConfigDeleteAllResponse
	304, // [304:380] is the sub-list for method output_type
	228, // [228:304] is the sub-list for method input_type
	228, // [228:228] is the sub-list for extension type_name
	228, // [228:228] is the sub-list for extension extendee
	0,   // [0:228] is the sub-list for field type_name
}

func init() { file_arista_studio_v1_services_gen_proto_init() }
func file_arista_studio_v1_services_gen_proto_init() {
	if File_arista_studio_v1_services_gen_proto != nil {
		return
	}
	file_arista_studio_v1_studio_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_arista_studio_v1_services_gen_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignedTagsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignedTagsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignedTagsStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignedTagsStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignedTagsConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignedTagsConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignedTagsConfigStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignedTagsConfigStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignedTagsConfigSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignedTagsConfigSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignedTagsConfigSetSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignedTagsConfigSetSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignedTagsConfigDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignedTagsConfigDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignedTagsConfigDeleteAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignedTagsConfigDeleteAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillActionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillActionStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillActionStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillActionConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillActionConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillActionConfigStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillActionConfigStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillActionConfigSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillActionConfigSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillActionConfigSetSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillActionConfigSetSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillActionConfigDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillActionConfigDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillActionConfigDeleteAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillActionConfigDeleteAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputsStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputsStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputsConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputsConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputsConfigStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputsConfigStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputsConfigSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputsConfigSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputsConfigSetSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputsConfigSetSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputsConfigDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputsConfigDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputsConfigDeleteAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputsConfigDeleteAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretInputRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretInputResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretInputStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretInputStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioConfigStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioConfigStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioConfigSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioConfigSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioConfigSetSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioConfigSetSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioConfigDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioConfigDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioConfigDeleteAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioConfigDeleteAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioSummaryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioSummaryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioSummaryStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioSummaryStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyInputRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyInputResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyInputStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyInputStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyInputConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyInputConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyInputConfigStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyInputConfigStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyInputConfigSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyInputConfigSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyInputConfigSetSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyInputConfigSetSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyInputConfigDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyInputConfigDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyInputConfigDeleteAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyInputConfigDeleteAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyUpdateStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyUpdateStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyUpdateConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyUpdateConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyUpdateConfigStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyUpdateConfigStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyUpdateConfigSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyUpdateConfigSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyUpdateConfigSetSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyUpdateConfigSetSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyUpdateConfigDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyUpdateConfigDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyUpdateConfigDeleteAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyUpdateConfigDeleteAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyUpdateSyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyUpdateSyncResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyUpdateSyncStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyUpdateSyncStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyUpdateSyncConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyUpdateSyncConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyUpdateSyncConfigStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyUpdateSyncConfigStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyUpdateSyncConfigSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyUpdateSyncConfigSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyUpdateSyncConfigSetSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyUpdateSyncConfigSetSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyUpdateSyncConfigDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyUpdateSyncConfigDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyUpdateSyncConfigDeleteAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_services_gen_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyUpdateSyncConfigDeleteAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_arista_studio_v1_services_gen_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   120,
			NumExtensions: 0,
			NumServices:   16,
		},
		GoTypes:           file_arista_studio_v1_services_gen_proto_goTypes,
		DependencyIndexes: file_arista_studio_v1_services_gen_proto_depIdxs,
		MessageInfos:      file_arista_studio_v1_services_gen_proto_msgTypes,
	}.Build()
	File_arista_studio_v1_services_gen_proto = out.File
	file_arista_studio_v1_services_gen_proto_rawDesc = nil
	file_arista_studio_v1_services_gen_proto_goTypes = nil
	file_arista_studio_v1_services_gen_proto_depIdxs = nil
}
