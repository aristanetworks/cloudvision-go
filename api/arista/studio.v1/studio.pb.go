// Copyright (c) 2020 Arista Networks, Inc.  All rights reserved.
// Arista Networks, Inc. Confidential and Proprietary.
// Subject to Arista Networks, Inc.'s EULA.
// FOR INTERNAL USE ONLY. NOT FOR DISTRIBUTION.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: arista/studio.v1/studio.proto

package studio

import (
	workspace_v1 "github.com/aristanetworks/cloudvision-go/api/arista/workspace.v1"
	fmp "github.com/aristanetworks/cloudvision-go/api/fmp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TemplateType int32

const (
	TemplateType_TEMPLATE_TYPE_UNSPECIFIED TemplateType = 0
	TemplateType_TEMPLATE_TYPE_MAKO        TemplateType = 1
	TemplateType_TEMPLATE_TYPE_JINJA       TemplateType = 2
	TemplateType_TEMPLATE_TYPE_GO          TemplateType = 3
)

// Enum value maps for TemplateType.
var (
	TemplateType_name = map[int32]string{
		0: "TEMPLATE_TYPE_UNSPECIFIED",
		1: "TEMPLATE_TYPE_MAKO",
		2: "TEMPLATE_TYPE_JINJA",
		3: "TEMPLATE_TYPE_GO",
	}
	TemplateType_value = map[string]int32{
		"TEMPLATE_TYPE_UNSPECIFIED": 0,
		"TEMPLATE_TYPE_MAKO":        1,
		"TEMPLATE_TYPE_JINJA":       2,
		"TEMPLATE_TYPE_GO":          3,
	}
)

func (x TemplateType) Enum() *TemplateType {
	p := new(TemplateType)
	*p = x
	return p
}

func (x TemplateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TemplateType) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_studio_v1_studio_proto_enumTypes[0].Descriptor()
}

func (TemplateType) Type() protoreflect.EnumType {
	return &file_arista_studio_v1_studio_proto_enumTypes[0]
}

func (x TemplateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TemplateType.Descriptor instead.
func (TemplateType) EnumDescriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{0}
}

type InputFieldType int32

const (
	InputFieldType_INPUT_FIELD_TYPE_UNSPECIFIED InputFieldType = 0
	InputFieldType_INPUT_FIELD_TYPE_BOOLEAN     InputFieldType = 1
	InputFieldType_INPUT_FIELD_TYPE_INTEGER     InputFieldType = 2
	InputFieldType_INPUT_FIELD_TYPE_FLOAT       InputFieldType = 3
	InputFieldType_INPUT_FIELD_TYPE_STRING      InputFieldType = 4
	InputFieldType_INPUT_FIELD_TYPE_GROUP       InputFieldType = 5
	InputFieldType_INPUT_FIELD_TYPE_COLLECTION  InputFieldType = 6
	InputFieldType_INPUT_FIELD_TYPE_RESOLVER    InputFieldType = 7
)

// Enum value maps for InputFieldType.
var (
	InputFieldType_name = map[int32]string{
		0: "INPUT_FIELD_TYPE_UNSPECIFIED",
		1: "INPUT_FIELD_TYPE_BOOLEAN",
		2: "INPUT_FIELD_TYPE_INTEGER",
		3: "INPUT_FIELD_TYPE_FLOAT",
		4: "INPUT_FIELD_TYPE_STRING",
		5: "INPUT_FIELD_TYPE_GROUP",
		6: "INPUT_FIELD_TYPE_COLLECTION",
		7: "INPUT_FIELD_TYPE_RESOLVER",
	}
	InputFieldType_value = map[string]int32{
		"INPUT_FIELD_TYPE_UNSPECIFIED": 0,
		"INPUT_FIELD_TYPE_BOOLEAN":     1,
		"INPUT_FIELD_TYPE_INTEGER":     2,
		"INPUT_FIELD_TYPE_FLOAT":       3,
		"INPUT_FIELD_TYPE_STRING":      4,
		"INPUT_FIELD_TYPE_GROUP":       5,
		"INPUT_FIELD_TYPE_COLLECTION":  6,
		"INPUT_FIELD_TYPE_RESOLVER":    7,
	}
)

func (x InputFieldType) Enum() *InputFieldType {
	p := new(InputFieldType)
	*p = x
	return p
}

func (x InputFieldType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InputFieldType) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_studio_v1_studio_proto_enumTypes[1].Descriptor()
}

func (InputFieldType) Type() protoreflect.EnumType {
	return &file_arista_studio_v1_studio_proto_enumTypes[1]
}

func (x InputFieldType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InputFieldType.Descriptor instead.
func (InputFieldType) EnumDescriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{1}
}

type ResolverFieldInputMode int32

const (
	ResolverFieldInputMode_RESOLVER_FIELD_INPUT_MODE_UNSPECIFIED          ResolverFieldInputMode = 0
	ResolverFieldInputMode_RESOLVER_FIELD_INPUT_MODE_SINGLE_DEVICE_TAG    ResolverFieldInputMode = 1
	ResolverFieldInputMode_RESOLVER_FIELD_INPUT_MODE_SINGLE_INTERFACE_TAG ResolverFieldInputMode = 2
	ResolverFieldInputMode_RESOLVER_FIELD_INPUT_MODE_MULTI_DEVICE_TAG     ResolverFieldInputMode = 3
	ResolverFieldInputMode_RESOLVER_FIELD_INPUT_MODE_MULTI_INTERFACE_TAG  ResolverFieldInputMode = 4
)

// Enum value maps for ResolverFieldInputMode.
var (
	ResolverFieldInputMode_name = map[int32]string{
		0: "RESOLVER_FIELD_INPUT_MODE_UNSPECIFIED",
		1: "RESOLVER_FIELD_INPUT_MODE_SINGLE_DEVICE_TAG",
		2: "RESOLVER_FIELD_INPUT_MODE_SINGLE_INTERFACE_TAG",
		3: "RESOLVER_FIELD_INPUT_MODE_MULTI_DEVICE_TAG",
		4: "RESOLVER_FIELD_INPUT_MODE_MULTI_INTERFACE_TAG",
	}
	ResolverFieldInputMode_value = map[string]int32{
		"RESOLVER_FIELD_INPUT_MODE_UNSPECIFIED":          0,
		"RESOLVER_FIELD_INPUT_MODE_SINGLE_DEVICE_TAG":    1,
		"RESOLVER_FIELD_INPUT_MODE_SINGLE_INTERFACE_TAG": 2,
		"RESOLVER_FIELD_INPUT_MODE_MULTI_DEVICE_TAG":     3,
		"RESOLVER_FIELD_INPUT_MODE_MULTI_INTERFACE_TAG":  4,
	}
)

func (x ResolverFieldInputMode) Enum() *ResolverFieldInputMode {
	p := new(ResolverFieldInputMode)
	*p = x
	return p
}

func (x ResolverFieldInputMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResolverFieldInputMode) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_studio_v1_studio_proto_enumTypes[2].Descriptor()
}

func (ResolverFieldInputMode) Type() protoreflect.EnumType {
	return &file_arista_studio_v1_studio_proto_enumTypes[2]
}

func (x ResolverFieldInputMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResolverFieldInputMode.Descriptor instead.
func (ResolverFieldInputMode) EnumDescriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{2}
}

type ResolverFieldDisplayMode int32

const (
	ResolverFieldDisplayMode_RESOLVER_FIELD_DISPLAY_MODE_UNSPECIFIED ResolverFieldDisplayMode = 0
	ResolverFieldDisplayMode_RESOLVER_FIELD_DISPLAY_MODE_ALL         ResolverFieldDisplayMode = 1
	ResolverFieldDisplayMode_RESOLVER_FIELD_DISPLAY_MODE_SPARSE      ResolverFieldDisplayMode = 2
)

// Enum value maps for ResolverFieldDisplayMode.
var (
	ResolverFieldDisplayMode_name = map[int32]string{
		0: "RESOLVER_FIELD_DISPLAY_MODE_UNSPECIFIED",
		1: "RESOLVER_FIELD_DISPLAY_MODE_ALL",
		2: "RESOLVER_FIELD_DISPLAY_MODE_SPARSE",
	}
	ResolverFieldDisplayMode_value = map[string]int32{
		"RESOLVER_FIELD_DISPLAY_MODE_UNSPECIFIED": 0,
		"RESOLVER_FIELD_DISPLAY_MODE_ALL":         1,
		"RESOLVER_FIELD_DISPLAY_MODE_SPARSE":      2,
	}
)

func (x ResolverFieldDisplayMode) Enum() *ResolverFieldDisplayMode {
	p := new(ResolverFieldDisplayMode)
	*p = x
	return p
}

func (x ResolverFieldDisplayMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResolverFieldDisplayMode) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_studio_v1_studio_proto_enumTypes[3].Descriptor()
}

func (ResolverFieldDisplayMode) Type() protoreflect.EnumType {
	return &file_arista_studio_v1_studio_proto_enumTypes[3]
}

func (x ResolverFieldDisplayMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResolverFieldDisplayMode.Descriptor instead.
func (ResolverFieldDisplayMode) EnumDescriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{3}
}

// Studio key
type StudioKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// studio_id is the unique identifier of the studio
	StudioId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=studio_id,json=studioId,proto3" json:"studio_id,omitempty"`
	// workspace_id is the unique identifier of the workspace
	// empty string ("") stands for the "mainline"
	WorkspaceId *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *StudioKey) Reset() {
	*x = StudioKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioKey) ProtoMessage() {}

func (x *StudioKey) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioKey.ProtoReflect.Descriptor instead.
func (*StudioKey) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{0}
}

func (x *StudioKey) GetStudioId() *wrapperspb.StringValue {
	if x != nil {
		return x.StudioId
	}
	return nil
}

func (x *StudioKey) GetWorkspaceId() *wrapperspb.StringValue {
	if x != nil {
		return x.WorkspaceId
	}
	return nil
}

// Studio configuration
type StudioConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key *StudioKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// remove specifies that the resource identified by the key is to be removed from mainline
	// Other data fields are not allowed when this field is set to true
	Remove *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=remove,proto3" json:"remove,omitempty"`
	// Changes to the below data fields in a workspace are applied on top of
	// mainline content at the time the workspace was created
	DisplayName *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Template    *Template               `protobuf:"bytes,5,opt,name=template,proto3" json:"template,omitempty"`
	InputSchema *InputSchema            `protobuf:"bytes,6,opt,name=input_schema,json=inputSchema,proto3" json:"input_schema,omitempty"`
}

func (x *StudioConfig) Reset() {
	*x = StudioConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioConfig) ProtoMessage() {}

func (x *StudioConfig) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioConfig.ProtoReflect.Descriptor instead.
func (*StudioConfig) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{1}
}

func (x *StudioConfig) GetKey() *StudioKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *StudioConfig) GetRemove() *wrapperspb.BoolValue {
	if x != nil {
		return x.Remove
	}
	return nil
}

func (x *StudioConfig) GetDisplayName() *wrapperspb.StringValue {
	if x != nil {
		return x.DisplayName
	}
	return nil
}

func (x *StudioConfig) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *StudioConfig) GetTemplate() *Template {
	if x != nil {
		return x.Template
	}
	return nil
}

func (x *StudioConfig) GetInputSchema() *InputSchema {
	if x != nil {
		return x.InputSchema
	}
	return nil
}

// Studio state
type Studio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key            *StudioKey              `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	CreatedAt      *timestamppb.Timestamp  `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	CreatedBy      *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	LastModifiedAt *timestamppb.Timestamp  `protobuf:"bytes,4,opt,name=last_modified_at,json=lastModifiedAt,proto3" json:"last_modified_at,omitempty"`
	LastModifiedBy *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=last_modified_by,json=lastModifiedBy,proto3" json:"last_modified_by,omitempty"`
	// Below are config fields, with workspace changes applied on top of mainline
	// Note that this resource will be present in a workspace only if the studio is modified
	// (via the StudioConfig resource)
	DisplayName            *wrapperspb.StringValue              `protobuf:"bytes,6,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Description            *wrapperspb.StringValue              `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	Template               *Template                            `protobuf:"bytes,8,opt,name=template,proto3" json:"template,omitempty"`
	InputSchema            *InputSchema                         `protobuf:"bytes,9,opt,name=input_schema,json=inputSchema,proto3" json:"input_schema,omitempty"`
	InputValidationResults *workspace_v1.InputValidationResults `protobuf:"bytes,10,opt,name=input_validation_results,json=inputValidationResults,proto3" json:"input_validation_results,omitempty"`
}

func (x *Studio) Reset() {
	*x = Studio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Studio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Studio) ProtoMessage() {}

func (x *Studio) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Studio.ProtoReflect.Descriptor instead.
func (*Studio) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{2}
}

func (x *Studio) GetKey() *StudioKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Studio) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Studio) GetCreatedBy() *wrapperspb.StringValue {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *Studio) GetLastModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastModifiedAt
	}
	return nil
}

func (x *Studio) GetLastModifiedBy() *wrapperspb.StringValue {
	if x != nil {
		return x.LastModifiedBy
	}
	return nil
}

func (x *Studio) GetDisplayName() *wrapperspb.StringValue {
	if x != nil {
		return x.DisplayName
	}
	return nil
}

func (x *Studio) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Studio) GetTemplate() *Template {
	if x != nil {
		return x.Template
	}
	return nil
}

func (x *Studio) GetInputSchema() *InputSchema {
	if x != nil {
		return x.InputSchema
	}
	return nil
}

func (x *Studio) GetInputValidationResults() *workspace_v1.InputValidationResults {
	if x != nil {
		return x.InputValidationResults
	}
	return nil
}

// AssignedTagsConfig is the configuration to assign a studio to the set of devices matching a tag query
type AssignedTagsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key *StudioKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// remove specifies that the resource identified by the key is to be removed from mainline
	// Other data fields are not allowed when this field is set to true
	Remove *wrapperspb.BoolValue   `protobuf:"bytes,2,opt,name=remove,proto3" json:"remove,omitempty"`
	Query  *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *AssignedTagsConfig) Reset() {
	*x = AssignedTagsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedTagsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedTagsConfig) ProtoMessage() {}

func (x *AssignedTagsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedTagsConfig.ProtoReflect.Descriptor instead.
func (*AssignedTagsConfig) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{3}
}

func (x *AssignedTagsConfig) GetKey() *StudioKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AssignedTagsConfig) GetRemove() *wrapperspb.BoolValue {
	if x != nil {
		return x.Remove
	}
	return nil
}

func (x *AssignedTagsConfig) GetQuery() *wrapperspb.StringValue {
	if x != nil {
		return x.Query
	}
	return nil
}

// AssignedTags is the state of studio assignment
type AssignedTags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key            *StudioKey              `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	CreatedAt      *timestamppb.Timestamp  `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	CreatedBy      *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	LastModifiedAt *timestamppb.Timestamp  `protobuf:"bytes,4,opt,name=last_modified_at,json=lastModifiedAt,proto3" json:"last_modified_at,omitempty"`
	LastModifiedBy *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=last_modified_by,json=lastModifiedBy,proto3" json:"last_modified_by,omitempty"`
	Query          *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *AssignedTags) Reset() {
	*x = AssignedTags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedTags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedTags) ProtoMessage() {}

func (x *AssignedTags) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedTags.ProtoReflect.Descriptor instead.
func (*AssignedTags) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{4}
}

func (x *AssignedTags) GetKey() *StudioKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AssignedTags) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AssignedTags) GetCreatedBy() *wrapperspb.StringValue {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *AssignedTags) GetLastModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastModifiedAt
	}
	return nil
}

func (x *AssignedTags) GetLastModifiedBy() *wrapperspb.StringValue {
	if x != nil {
		return x.LastModifiedBy
	}
	return nil
}

func (x *AssignedTags) GetQuery() *wrapperspb.StringValue {
	if x != nil {
		return x.Query
	}
	return nil
}

// Inputskey is the key of the InputsConfig and Inputs resources
type InputsKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// studio_id is the unique identifier of the studio
	StudioId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=studio_id,json=studioId,proto3" json:"studio_id,omitempty"`
	// workspace_id is the unique identifier of the workspace
	// empty string ("") stands for the "mainline"
	WorkspaceId *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	// path is the sequence of elements that uniquely identify an input field
	// empty sequence stands for the "root", or the entire set of inputs
	Path *fmp.RepeatedString `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *InputsKey) Reset() {
	*x = InputsKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputsKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputsKey) ProtoMessage() {}

func (x *InputsKey) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputsKey.ProtoReflect.Descriptor instead.
func (*InputsKey) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{5}
}

func (x *InputsKey) GetStudioId() *wrapperspb.StringValue {
	if x != nil {
		return x.StudioId
	}
	return nil
}

func (x *InputsKey) GetWorkspaceId() *wrapperspb.StringValue {
	if x != nil {
		return x.WorkspaceId
	}
	return nil
}

func (x *InputsKey) GetPath() *fmp.RepeatedString {
	if x != nil {
		return x.Path
	}
	return nil
}

// InputsConfig provides values to the input fields of a studio
type InputsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key *InputsKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// remove specifies that the resource identified by the key is to be removed from mainline
	// Other data fields are not allowed when this field is set to true
	Remove *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=remove,proto3" json:"remove,omitempty"`
	// inputs is the value of the input field as a JSON string. It can be the value for a
	// simple or complex input field
	Inputs *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=inputs,proto3" json:"inputs,omitempty"`
}

func (x *InputsConfig) Reset() {
	*x = InputsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputsConfig) ProtoMessage() {}

func (x *InputsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputsConfig.ProtoReflect.Descriptor instead.
func (*InputsConfig) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{6}
}

func (x *InputsConfig) GetKey() *InputsKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *InputsConfig) GetRemove() *wrapperspb.BoolValue {
	if x != nil {
		return x.Remove
	}
	return nil
}

func (x *InputsConfig) GetInputs() *wrapperspb.StringValue {
	if x != nil {
		return x.Inputs
	}
	return nil
}

// Inputs is the state of inputs to a studio
type Inputs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key            *InputsKey              `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	CreatedAt      *timestamppb.Timestamp  `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	CreatedBy      *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	LastModifiedAt *timestamppb.Timestamp  `protobuf:"bytes,4,opt,name=last_modified_at,json=lastModifiedAt,proto3" json:"last_modified_at,omitempty"`
	LastModifiedBy *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=last_modified_by,json=lastModifiedBy,proto3" json:"last_modified_by,omitempty"`
	// inputs is the entire set of inputs, a single JSON string starting with root.
	// This is the result of applying workspace-specific InputsConfig changes on top of mainline.
	Inputs *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=inputs,proto3" json:"inputs,omitempty"`
}

func (x *Inputs) Reset() {
	*x = Inputs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Inputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Inputs) ProtoMessage() {}

func (x *Inputs) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Inputs.ProtoReflect.Descriptor instead.
func (*Inputs) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{7}
}

func (x *Inputs) GetKey() *InputsKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Inputs) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Inputs) GetCreatedBy() *wrapperspb.StringValue {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *Inputs) GetLastModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastModifiedAt
	}
	return nil
}

func (x *Inputs) GetLastModifiedBy() *wrapperspb.StringValue {
	if x != nil {
		return x.LastModifiedBy
	}
	return nil
}

func (x *Inputs) GetInputs() *wrapperspb.StringValue {
	if x != nil {
		return x.Inputs
	}
	return nil
}

// Template of the studio, with its type
type Template struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type TemplateType            `protobuf:"varint,1,opt,name=type,proto3,enum=arista.studio.v1.TemplateType" json:"type,omitempty"`
	Body *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *Template) Reset() {
	*x = Template{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Template) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Template) ProtoMessage() {}

func (x *Template) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Template.ProtoReflect.Descriptor instead.
func (*Template) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{8}
}

func (x *Template) GetType() TemplateType {
	if x != nil {
		return x.Type
	}
	return TemplateType_TEMPLATE_TYPE_UNSPECIFIED
}

func (x *Template) GetBody() *wrapperspb.StringValue {
	if x != nil {
		return x.Body
	}
	return nil
}

type BooleanInputFieldProps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// default_value represents the default value of the boolean input field (optional)
	DefaultValue *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"` // optional
}

func (x *BooleanInputFieldProps) Reset() {
	*x = BooleanInputFieldProps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BooleanInputFieldProps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BooleanInputFieldProps) ProtoMessage() {}

func (x *BooleanInputFieldProps) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BooleanInputFieldProps.ProtoReflect.Descriptor instead.
func (*BooleanInputFieldProps) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{9}
}

func (x *BooleanInputFieldProps) GetDefaultValue() *wrapperspb.BoolValue {
	if x != nil {
		return x.DefaultValue
	}
	return nil
}

type IntegerInputFieldProps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// default_value represents the default value of the integer input field (optional)
	DefaultValue *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"` // optional
	// static_options represents the list of valid integer values (optional)
	StaticOptions *fmp.RepeatedInt64 `protobuf:"bytes,2,opt,name=static_options,json=staticOptions,proto3" json:"static_options,omitempty"` // optional
	// dynamic_options contains a pointer expression that reference an input field with a collection of
	// integer input values which will be used as a list of valid values (optional)
	DynamicOptions *fmp.RepeatedString `protobuf:"bytes,4,opt,name=dynamic_options,json=dynamicOptions,proto3" json:"dynamic_options,omitempty"` // optional
	// range represents the range constraint imposed on the integer value; eg. "-10..10", "min..10", "-10..max" (optional)
	Range *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=range,proto3" json:"range,omitempty"` // optional
}

func (x *IntegerInputFieldProps) Reset() {
	*x = IntegerInputFieldProps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegerInputFieldProps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegerInputFieldProps) ProtoMessage() {}

func (x *IntegerInputFieldProps) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegerInputFieldProps.ProtoReflect.Descriptor instead.
func (*IntegerInputFieldProps) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{10}
}

func (x *IntegerInputFieldProps) GetDefaultValue() *wrapperspb.Int64Value {
	if x != nil {
		return x.DefaultValue
	}
	return nil
}

func (x *IntegerInputFieldProps) GetStaticOptions() *fmp.RepeatedInt64 {
	if x != nil {
		return x.StaticOptions
	}
	return nil
}

func (x *IntegerInputFieldProps) GetDynamicOptions() *fmp.RepeatedString {
	if x != nil {
		return x.DynamicOptions
	}
	return nil
}

func (x *IntegerInputFieldProps) GetRange() *wrapperspb.StringValue {
	if x != nil {
		return x.Range
	}
	return nil
}

type FloatInputFieldProps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// default_value represents the default value of the float input field (optional)
	DefaultValue *wrapperspb.FloatValue `protobuf:"bytes,2,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"` // optional
	// static_options represents the list of valid float values (optional)
	StaticOptions *fmp.RepeatedFloat `protobuf:"bytes,3,opt,name=static_options,json=staticOptions,proto3" json:"static_options,omitempty"` // optional
	// dynamic_options contains a pointer expression that reference an input field with a collection of
	// float input values which will be used as a list of valid values (optional)
	DynamicOptions *fmp.RepeatedString `protobuf:"bytes,4,opt,name=dynamic_options,json=dynamicOptions,proto3" json:"dynamic_options,omitempty"` // optional
}

func (x *FloatInputFieldProps) Reset() {
	*x = FloatInputFieldProps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatInputFieldProps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatInputFieldProps) ProtoMessage() {}

func (x *FloatInputFieldProps) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatInputFieldProps.ProtoReflect.Descriptor instead.
func (*FloatInputFieldProps) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{11}
}

func (x *FloatInputFieldProps) GetDefaultValue() *wrapperspb.FloatValue {
	if x != nil {
		return x.DefaultValue
	}
	return nil
}

func (x *FloatInputFieldProps) GetStaticOptions() *fmp.RepeatedFloat {
	if x != nil {
		return x.StaticOptions
	}
	return nil
}

func (x *FloatInputFieldProps) GetDynamicOptions() *fmp.RepeatedString {
	if x != nil {
		return x.DynamicOptions
	}
	return nil
}

type StringInputFieldProps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// default_value represents the default value of the string input field (optional)
	DefaultValue *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"` // optional
	// static_options represents the list of valid string values (optional)
	StaticOptions *fmp.RepeatedString `protobuf:"bytes,3,opt,name=static_options,json=staticOptions,proto3" json:"static_options,omitempty"` // optional
	// dynamic_options contains a pointer expression that reference an input field with a collection of
	// string input values which will be used as a list of valid values (optional)
	DynamicOptions *fmp.RepeatedString `protobuf:"bytes,4,opt,name=dynamic_options,json=dynamicOptions,proto3" json:"dynamic_options,omitempty"` // optional
	// length represents the length constraint imposed on the string value; eg. "5..10", "min..10", "5..max" (optional)
	Length *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=length,proto3" json:"length,omitempty"` // optional
	// pattern represents the regexp-based pattern constraint imposed on the string value; eg. "^[0-9a-fA-F]*$" (optional)
	Pattern *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=pattern,proto3" json:"pattern,omitempty"` // optional
	// format represents the format imposed on string value; supported formats: "ip", "ipv6", "mac" (optional)
	Format *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=format,proto3" json:"format,omitempty"` // optional
}

func (x *StringInputFieldProps) Reset() {
	*x = StringInputFieldProps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringInputFieldProps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringInputFieldProps) ProtoMessage() {}

func (x *StringInputFieldProps) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringInputFieldProps.ProtoReflect.Descriptor instead.
func (*StringInputFieldProps) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{12}
}

func (x *StringInputFieldProps) GetDefaultValue() *wrapperspb.StringValue {
	if x != nil {
		return x.DefaultValue
	}
	return nil
}

func (x *StringInputFieldProps) GetStaticOptions() *fmp.RepeatedString {
	if x != nil {
		return x.StaticOptions
	}
	return nil
}

func (x *StringInputFieldProps) GetDynamicOptions() *fmp.RepeatedString {
	if x != nil {
		return x.DynamicOptions
	}
	return nil
}

func (x *StringInputFieldProps) GetLength() *wrapperspb.StringValue {
	if x != nil {
		return x.Length
	}
	return nil
}

func (x *StringInputFieldProps) GetPattern() *wrapperspb.StringValue {
	if x != nil {
		return x.Pattern
	}
	return nil
}

func (x *StringInputFieldProps) GetFormat() *wrapperspb.StringValue {
	if x != nil {
		return x.Format
	}
	return nil
}

type GroupInputFieldProps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// members represents all the fields in the group input field
	Members *fmp.RepeatedString `protobuf:"bytes,1,opt,name=members,proto3" json:"members,omitempty"` // required
}

func (x *GroupInputFieldProps) Reset() {
	*x = GroupInputFieldProps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupInputFieldProps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupInputFieldProps) ProtoMessage() {}

func (x *GroupInputFieldProps) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupInputFieldProps.ProtoReflect.Descriptor instead.
func (*GroupInputFieldProps) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{13}
}

func (x *GroupInputFieldProps) GetMembers() *fmp.RepeatedString {
	if x != nil {
		return x.Members
	}
	return nil
}

type CollectionInputFieldProps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// base_field_id represent the ID of the collection input field's base field
	BaseFieldId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=base_field_id,json=baseFieldId,proto3" json:"base_field_id,omitempty"` // required
	// key specifies a key in the collection that identifies each element
	//
	// It only supports the group base field type `INPUT_FIELD_TYPE_GROUP`. The key field specified the ID of the
	// group member and each element of the collection can be uniquely identified by the key.
	//
	// If the type of the base field is:
	// - `INPUT_FIELD_TYPE_GROUP`: the value of specified by the key field will used as the collection element's key.
	// The key field specifies the ID of the group member, the group member type must be one of the following field types:
	//    `INPUT_FIELD_TYPE_INTEGER`, `INPUT_FIELD_TYPE_FLOAT`, `INPUT_FIELD_TYPE_STRING`.
	Key *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"` // optional
}

func (x *CollectionInputFieldProps) Reset() {
	*x = CollectionInputFieldProps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionInputFieldProps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionInputFieldProps) ProtoMessage() {}

func (x *CollectionInputFieldProps) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionInputFieldProps.ProtoReflect.Descriptor instead.
func (*CollectionInputFieldProps) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{14}
}

func (x *CollectionInputFieldProps) GetBaseFieldId() *wrapperspb.StringValue {
	if x != nil {
		return x.BaseFieldId
	}
	return nil
}

func (x *CollectionInputFieldProps) GetKey() *wrapperspb.StringValue {
	if x != nil {
		return x.Key
	}
	return nil
}

type ResolverInputFieldProps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// base_field_id represent the ID of the resolver input field's base field
	BaseFieldId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=base_field_id,json=baseFieldId,proto3" json:"base_field_id,omitempty"` // required
	// display_mode represents the resolver input field's display mode
	DisplayMode ResolverFieldDisplayMode `protobuf:"varint,2,opt,name=display_mode,json=displayMode,proto3,enum=arista.studio.v1.ResolverFieldDisplayMode" json:"display_mode,omitempty"` // required
	// input_mode represents the resolver input field's input mode
	InputMode ResolverFieldInputMode `protobuf:"varint,3,opt,name=input_mode,json=inputMode,proto3,enum=arista.studio.v1.ResolverFieldInputMode" json:"input_mode,omitempty"` // required
	// input_tag_label represents the tag label to allow in tag inputs (optional)
	InputTagLabel *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=input_tag_label,json=inputTagLabel,proto3" json:"input_tag_label,omitempty"` // optional
	// tag_filter_query specifies the tags that can be used in a resolver
	TagFilterQuery *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=tag_filter_query,json=tagFilterQuery,proto3" json:"tag_filter_query,omitempty"` // optional
}

func (x *ResolverInputFieldProps) Reset() {
	*x = ResolverInputFieldProps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolverInputFieldProps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolverInputFieldProps) ProtoMessage() {}

func (x *ResolverInputFieldProps) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolverInputFieldProps.ProtoReflect.Descriptor instead.
func (*ResolverInputFieldProps) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{15}
}

func (x *ResolverInputFieldProps) GetBaseFieldId() *wrapperspb.StringValue {
	if x != nil {
		return x.BaseFieldId
	}
	return nil
}

func (x *ResolverInputFieldProps) GetDisplayMode() ResolverFieldDisplayMode {
	if x != nil {
		return x.DisplayMode
	}
	return ResolverFieldDisplayMode_RESOLVER_FIELD_DISPLAY_MODE_UNSPECIFIED
}

func (x *ResolverInputFieldProps) GetInputMode() ResolverFieldInputMode {
	if x != nil {
		return x.InputMode
	}
	return ResolverFieldInputMode_RESOLVER_FIELD_INPUT_MODE_UNSPECIFIED
}

func (x *ResolverInputFieldProps) GetInputTagLabel() *wrapperspb.StringValue {
	if x != nil {
		return x.InputTagLabel
	}
	return nil
}

func (x *ResolverInputFieldProps) GetTagFilterQuery() *wrapperspb.StringValue {
	if x != nil {
		return x.TagFilterQuery
	}
	return nil
}

type InputField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id represents the ID of the input field, which should be unique within the input schema resource
	Id *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // required
	// type represents the type of the input field
	Type InputFieldType `protobuf:"varint,2,opt,name=type,proto3,enum=arista.studio.v1.InputFieldType" json:"type,omitempty"` // required
	// type represents the variable name use to reference the value of the input field
	Name *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"` // required
	// label represents the label of the input field
	Label *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty"` // required
	// description represents the description of the input field (optional)
	Description *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"` // optional
	// required indicates whether the input field requires a value, defaults to `false` if unset (optional)
	Required *wrapperspb.BoolValue `protobuf:"bytes,6,opt,name=required,proto3" json:"required,omitempty"` // optional
	// boolean_props contains properties for input fields of INPUT_FIELD_TYPE_BOOLEAN type (optional)
	BooleanProps *BooleanInputFieldProps `protobuf:"bytes,7,opt,name=boolean_props,json=booleanProps,proto3" json:"boolean_props,omitempty"` // optional
	// integer_props contains properties for input fields of INPUT_FIELD_TYPE_INTEGER type (optional)
	IntegerProps *IntegerInputFieldProps `protobuf:"bytes,8,opt,name=integer_props,json=integerProps,proto3" json:"integer_props,omitempty"` // optional
	// float_props contains properties for input fields of INPUT_FIELD_TYPE_FLOAT type (optional)
	FloatProps *FloatInputFieldProps `protobuf:"bytes,9,opt,name=float_props,json=floatProps,proto3" json:"float_props,omitempty"` // optional
	// string_props contains properties for input fields of INPUT_FIELD_TYPE_STRING type (optional)
	StringProps *StringInputFieldProps `protobuf:"bytes,10,opt,name=string_props,json=stringProps,proto3" json:"string_props,omitempty"` // optional
	// group_props contains properties for input fields of INPUT_FIELD_TYPE_GROUP type (optional)
	GroupProps *GroupInputFieldProps `protobuf:"bytes,11,opt,name=group_props,json=groupProps,proto3" json:"group_props,omitempty"` // optional
	// collection_props contains properties for input fields of INPUT_FIELD_TYPE_COLLECTION type (optional)
	CollectionProps *CollectionInputFieldProps `protobuf:"bytes,12,opt,name=collection_props,json=collectionProps,proto3" json:"collection_props,omitempty"` // optional
	// resolver_props contains properties for input fields of INPUT_FIELD_TYPE_RESOLVER type (optional)
	ResolverProps *ResolverInputFieldProps `protobuf:"bytes,13,opt,name=resolver_props,json=resolverProps,proto3" json:"resolver_props,omitempty"` // optional
	// auto_fill_action_id represents the link between the field and the autofill script that provides a value for it (optional)
	AutoFillActionId *wrapperspb.StringValue `protobuf:"bytes,14,opt,name=auto_fill_action_id,json=autoFillActionId,proto3" json:"auto_fill_action_id,omitempty"` // optional
}

func (x *InputField) Reset() {
	*x = InputField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputField) ProtoMessage() {}

func (x *InputField) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputField.ProtoReflect.Descriptor instead.
func (*InputField) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{16}
}

func (x *InputField) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *InputField) GetType() InputFieldType {
	if x != nil {
		return x.Type
	}
	return InputFieldType_INPUT_FIELD_TYPE_UNSPECIFIED
}

func (x *InputField) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *InputField) GetLabel() *wrapperspb.StringValue {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *InputField) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *InputField) GetRequired() *wrapperspb.BoolValue {
	if x != nil {
		return x.Required
	}
	return nil
}

func (x *InputField) GetBooleanProps() *BooleanInputFieldProps {
	if x != nil {
		return x.BooleanProps
	}
	return nil
}

func (x *InputField) GetIntegerProps() *IntegerInputFieldProps {
	if x != nil {
		return x.IntegerProps
	}
	return nil
}

func (x *InputField) GetFloatProps() *FloatInputFieldProps {
	if x != nil {
		return x.FloatProps
	}
	return nil
}

func (x *InputField) GetStringProps() *StringInputFieldProps {
	if x != nil {
		return x.StringProps
	}
	return nil
}

func (x *InputField) GetGroupProps() *GroupInputFieldProps {
	if x != nil {
		return x.GroupProps
	}
	return nil
}

func (x *InputField) GetCollectionProps() *CollectionInputFieldProps {
	if x != nil {
		return x.CollectionProps
	}
	return nil
}

func (x *InputField) GetResolverProps() *ResolverInputFieldProps {
	if x != nil {
		return x.ResolverProps
	}
	return nil
}

func (x *InputField) GetAutoFillActionId() *wrapperspb.StringValue {
	if x != nil {
		return x.AutoFillActionId
	}
	return nil
}

type InputFields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values contains all input field configuration, mapped by each input field's respective field ID
	Values map[string]*InputField `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // required
}

func (x *InputFields) Reset() {
	*x = InputFields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputFields) ProtoMessage() {}

func (x *InputFields) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputFields.ProtoReflect.Descriptor instead.
func (*InputFields) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{17}
}

func (x *InputFields) GetValues() map[string]*InputField {
	if x != nil {
		return x.Values
	}
	return nil
}

// Layout specifies the display properties input fields
type Layout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"` // json string
}

func (x *Layout) Reset() {
	*x = Layout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Layout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Layout) ProtoMessage() {}

func (x *Layout) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Layout.ProtoReflect.Descriptor instead.
func (*Layout) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{18}
}

func (x *Layout) GetValue() *wrapperspb.StringValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// InputSchema specifies the input schema definition of a studio, consisting of a set of input fields,
// and optionally their layout information
type InputSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields *InputFields `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
	Layout *Layout      `protobuf:"bytes,2,opt,name=layout,proto3" json:"layout,omitempty"`
}

func (x *InputSchema) Reset() {
	*x = InputSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputSchema) ProtoMessage() {}

func (x *InputSchema) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputSchema.ProtoReflect.Descriptor instead.
func (*InputSchema) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{19}
}

func (x *InputSchema) GetFields() *InputFields {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *InputSchema) GetLayout() *Layout {
	if x != nil {
		return x.Layout
	}
	return nil
}

var File_arista_studio_v1_studio_proto protoreflect.FileDescriptor

var file_arista_studio_v1_studio_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x10, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x1a, 0x23, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x66, 0x6d, 0x70, 0x2f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x66, 0x6d,
	0x70, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x8d, 0x01, 0x0a, 0x09, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x4b, 0x65, 0x79, 0x12,
	0x39, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0c, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x3a, 0x04, 0x80, 0x8e, 0x19,
	0x01, 0x22, 0xf4, 0x02, 0x0a, 0x0c, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x32, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x40,
	0x0a, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72, 0x77, 0x22, 0xa7, 0x05, 0x0a, 0x06, 0x53, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x44, 0x0a, 0x10, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x46, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x12, 0x3f, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x08, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x12, 0x40, 0x0a, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x12, 0x65, 0x0a, 0x18, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x52, 0x16, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02,
	0x72, 0x6f, 0x22, 0xb3, 0x01, 0x0a, 0x12, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54,
	0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x32, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72, 0x77, 0x22, 0xff, 0x02, 0x0a, 0x0c, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x12, 0x44, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x46, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e,
	0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x12, 0x32,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72, 0x6f, 0x22, 0xb6, 0x01, 0x0a, 0x09, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x3a, 0x04, 0x80,
	0x8e, 0x19, 0x01, 0x22, 0xaf, 0x01, 0x0a, 0x0c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x3a, 0x06, 0xfa,
	0x8d, 0x19, 0x02, 0x72, 0x77, 0x22, 0xfb, 0x02, 0x0a, 0x06, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x44, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6c,
	0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x46, 0x0a,
	0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x42, 0x79, 0x12, 0x34, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x3a, 0x06, 0xfa, 0x8d, 0x19,
	0x02, 0x72, 0x6f, 0x22, 0x70, 0x0a, 0x08, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12,
	0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x59, 0x0a, 0x16, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12,
	0x3f, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x87, 0x02, 0x0a, 0x16, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a,
	0x0e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x52, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x0f, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xd1, 0x01, 0x0a, 0x14, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72,
	0x6f, 0x70, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x66, 0x6d, 0x70, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x3c, 0x0a, 0x0f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6d, 0x70, 0x2e,
	0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0e,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xf8,
	0x02, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x41, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x0f, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x36, 0x0a, 0x07, 0x70,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x12, 0x34, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x45, 0x0a, 0x14, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x70,
	0x73, 0x12, 0x2d, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x22, 0x8d, 0x01, 0x0a, 0x19, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x40,
	0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64,
	0x12, 0x2e, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x22, 0x81, 0x03, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x40, 0x0a, 0x0d,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x4d,
	0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a,
	0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x28, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f,
	0x74, 0x61, 0x67, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x54, 0x61, 0x67, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x46, 0x0a, 0x10,
	0x74, 0x61, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x74, 0x61, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x22, 0xc1, 0x07, 0x0a, 0x0a, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x3e, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a,
	0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x4d, 0x0a, 0x0d, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x5f, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x50,
	0x72, 0x6f, 0x70, 0x73, 0x12, 0x4d, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x50, 0x72, 0x6f, 0x70, 0x73, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x70, 0x73, 0x12, 0x47, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x73,
	0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x4a, 0x0a, 0x0c,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x52, 0x0b, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x47, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x50, 0x72, 0x6f, 0x70, 0x73, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x70,
	0x73, 0x12, 0x56, 0x0a, 0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x52, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x50, 0x0a, 0x0e, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x52, 0x0d, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x4b, 0x0a, 0x13, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xa9, 0x01, 0x0a, 0x0b, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x41, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x57, 0x0a, 0x0b, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x3c, 0x0a, 0x06, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x32,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x76, 0x0a, 0x0b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x12, 0x35, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x52, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2a, 0x74, 0x0a, 0x0c, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x45,
	0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x45, 0x4d,
	0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x4b, 0x4f, 0x10,
	0x01, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4a, 0x49, 0x4e, 0x4a, 0x41, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x45,
	0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x4f, 0x10, 0x03,
	0x2a, 0x83, 0x02, 0x0a, 0x0e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x46,
	0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41,
	0x4e, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45, 0x52, 0x10,
	0x02, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x03, 0x12, 0x1b, 0x0a,
	0x17, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e,
	0x50, 0x55, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4e, 0x50, 0x55, 0x54,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f,
	0x4c, 0x56, 0x45, 0x52, 0x10, 0x07, 0x2a, 0x8b, 0x02, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x29, 0x0a, 0x25, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x52, 0x5f, 0x46, 0x49,
	0x45, 0x4c, 0x44, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2f, 0x0a, 0x2b,
	0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x49,
	0x4e, 0x50, 0x55, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45,
	0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x41, 0x47, 0x10, 0x01, 0x12, 0x32, 0x0a,
	0x2e, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f,
	0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c,
	0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x41, 0x47, 0x10,
	0x02, 0x12, 0x2e, 0x0a, 0x2a, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x52, 0x5f, 0x46, 0x49,
	0x45, 0x4c, 0x44, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4d,
	0x55, 0x4c, 0x54, 0x49, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x41, 0x47, 0x10,
	0x03, 0x12, 0x31, 0x0a, 0x2d, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x52, 0x5f, 0x46, 0x49,
	0x45, 0x4c, 0x44, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4d,
	0x55, 0x4c, 0x54, 0x49, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54,
	0x41, 0x47, 0x10, 0x04, 0x2a, 0x94, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x52, 0x5f, 0x46, 0x49,
	0x45, 0x4c, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x23,
	0x0a, 0x1f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x4c,
	0x4c, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x52, 0x5f,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x53, 0x50, 0x41, 0x52, 0x53, 0x45, 0x10, 0x02, 0x42, 0x41, 0x5a, 0x28, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x3b, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0xba, 0x9a, 0x19, 0x13, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x2d, 0x6b, 0x65, 0x79, 0x2d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_arista_studio_v1_studio_proto_rawDescOnce sync.Once
	file_arista_studio_v1_studio_proto_rawDescData = file_arista_studio_v1_studio_proto_rawDesc
)

func file_arista_studio_v1_studio_proto_rawDescGZIP() []byte {
	file_arista_studio_v1_studio_proto_rawDescOnce.Do(func() {
		file_arista_studio_v1_studio_proto_rawDescData = protoimpl.X.CompressGZIP(file_arista_studio_v1_studio_proto_rawDescData)
	})
	return file_arista_studio_v1_studio_proto_rawDescData
}

var file_arista_studio_v1_studio_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_arista_studio_v1_studio_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_arista_studio_v1_studio_proto_goTypes = []interface{}{
	(TemplateType)(0),                           // 0: arista.studio.v1.TemplateType
	(InputFieldType)(0),                         // 1: arista.studio.v1.InputFieldType
	(ResolverFieldInputMode)(0),                 // 2: arista.studio.v1.ResolverFieldInputMode
	(ResolverFieldDisplayMode)(0),               // 3: arista.studio.v1.ResolverFieldDisplayMode
	(*StudioKey)(nil),                           // 4: arista.studio.v1.StudioKey
	(*StudioConfig)(nil),                        // 5: arista.studio.v1.StudioConfig
	(*Studio)(nil),                              // 6: arista.studio.v1.Studio
	(*AssignedTagsConfig)(nil),                  // 7: arista.studio.v1.AssignedTagsConfig
	(*AssignedTags)(nil),                        // 8: arista.studio.v1.AssignedTags
	(*InputsKey)(nil),                           // 9: arista.studio.v1.InputsKey
	(*InputsConfig)(nil),                        // 10: arista.studio.v1.InputsConfig
	(*Inputs)(nil),                              // 11: arista.studio.v1.Inputs
	(*Template)(nil),                            // 12: arista.studio.v1.Template
	(*BooleanInputFieldProps)(nil),              // 13: arista.studio.v1.BooleanInputFieldProps
	(*IntegerInputFieldProps)(nil),              // 14: arista.studio.v1.IntegerInputFieldProps
	(*FloatInputFieldProps)(nil),                // 15: arista.studio.v1.FloatInputFieldProps
	(*StringInputFieldProps)(nil),               // 16: arista.studio.v1.StringInputFieldProps
	(*GroupInputFieldProps)(nil),                // 17: arista.studio.v1.GroupInputFieldProps
	(*CollectionInputFieldProps)(nil),           // 18: arista.studio.v1.CollectionInputFieldProps
	(*ResolverInputFieldProps)(nil),             // 19: arista.studio.v1.ResolverInputFieldProps
	(*InputField)(nil),                          // 20: arista.studio.v1.InputField
	(*InputFields)(nil),                         // 21: arista.studio.v1.InputFields
	(*Layout)(nil),                              // 22: arista.studio.v1.Layout
	(*InputSchema)(nil),                         // 23: arista.studio.v1.InputSchema
	nil,                                         // 24: arista.studio.v1.InputFields.ValuesEntry
	(*wrapperspb.StringValue)(nil),              // 25: google.protobuf.StringValue
	(*wrapperspb.BoolValue)(nil),                // 26: google.protobuf.BoolValue
	(*timestamppb.Timestamp)(nil),               // 27: google.protobuf.Timestamp
	(*workspace_v1.InputValidationResults)(nil), // 28: arista.workspace.v1.InputValidationResults
	(*fmp.RepeatedString)(nil),                  // 29: fmp.RepeatedString
	(*wrapperspb.Int64Value)(nil),               // 30: google.protobuf.Int64Value
	(*fmp.RepeatedInt64)(nil),                   // 31: fmp.RepeatedInt64
	(*wrapperspb.FloatValue)(nil),               // 32: google.protobuf.FloatValue
	(*fmp.RepeatedFloat)(nil),                   // 33: fmp.RepeatedFloat
}
var file_arista_studio_v1_studio_proto_depIdxs = []int32{
	25, // 0: arista.studio.v1.StudioKey.studio_id:type_name -> google.protobuf.StringValue
	25, // 1: arista.studio.v1.StudioKey.workspace_id:type_name -> google.protobuf.StringValue
	4,  // 2: arista.studio.v1.StudioConfig.key:type_name -> arista.studio.v1.StudioKey
	26, // 3: arista.studio.v1.StudioConfig.remove:type_name -> google.protobuf.BoolValue
	25, // 4: arista.studio.v1.StudioConfig.display_name:type_name -> google.protobuf.StringValue
	25, // 5: arista.studio.v1.StudioConfig.description:type_name -> google.protobuf.StringValue
	12, // 6: arista.studio.v1.StudioConfig.template:type_name -> arista.studio.v1.Template
	23, // 7: arista.studio.v1.StudioConfig.input_schema:type_name -> arista.studio.v1.InputSchema
	4,  // 8: arista.studio.v1.Studio.key:type_name -> arista.studio.v1.StudioKey
	27, // 9: arista.studio.v1.Studio.created_at:type_name -> google.protobuf.Timestamp
	25, // 10: arista.studio.v1.Studio.created_by:type_name -> google.protobuf.StringValue
	27, // 11: arista.studio.v1.Studio.last_modified_at:type_name -> google.protobuf.Timestamp
	25, // 12: arista.studio.v1.Studio.last_modified_by:type_name -> google.protobuf.StringValue
	25, // 13: arista.studio.v1.Studio.display_name:type_name -> google.protobuf.StringValue
	25, // 14: arista.studio.v1.Studio.description:type_name -> google.protobuf.StringValue
	12, // 15: arista.studio.v1.Studio.template:type_name -> arista.studio.v1.Template
	23, // 16: arista.studio.v1.Studio.input_schema:type_name -> arista.studio.v1.InputSchema
	28, // 17: arista.studio.v1.Studio.input_validation_results:type_name -> arista.workspace.v1.InputValidationResults
	4,  // 18: arista.studio.v1.AssignedTagsConfig.key:type_name -> arista.studio.v1.StudioKey
	26, // 19: arista.studio.v1.AssignedTagsConfig.remove:type_name -> google.protobuf.BoolValue
	25, // 20: arista.studio.v1.AssignedTagsConfig.query:type_name -> google.protobuf.StringValue
	4,  // 21: arista.studio.v1.AssignedTags.key:type_name -> arista.studio.v1.StudioKey
	27, // 22: arista.studio.v1.AssignedTags.created_at:type_name -> google.protobuf.Timestamp
	25, // 23: arista.studio.v1.AssignedTags.created_by:type_name -> google.protobuf.StringValue
	27, // 24: arista.studio.v1.AssignedTags.last_modified_at:type_name -> google.protobuf.Timestamp
	25, // 25: arista.studio.v1.AssignedTags.last_modified_by:type_name -> google.protobuf.StringValue
	25, // 26: arista.studio.v1.AssignedTags.query:type_name -> google.protobuf.StringValue
	25, // 27: arista.studio.v1.InputsKey.studio_id:type_name -> google.protobuf.StringValue
	25, // 28: arista.studio.v1.InputsKey.workspace_id:type_name -> google.protobuf.StringValue
	29, // 29: arista.studio.v1.InputsKey.path:type_name -> fmp.RepeatedString
	9,  // 30: arista.studio.v1.InputsConfig.key:type_name -> arista.studio.v1.InputsKey
	26, // 31: arista.studio.v1.InputsConfig.remove:type_name -> google.protobuf.BoolValue
	25, // 32: arista.studio.v1.InputsConfig.inputs:type_name -> google.protobuf.StringValue
	9,  // 33: arista.studio.v1.Inputs.key:type_name -> arista.studio.v1.InputsKey
	27, // 34: arista.studio.v1.Inputs.created_at:type_name -> google.protobuf.Timestamp
	25, // 35: arista.studio.v1.Inputs.created_by:type_name -> google.protobuf.StringValue
	27, // 36: arista.studio.v1.Inputs.last_modified_at:type_name -> google.protobuf.Timestamp
	25, // 37: arista.studio.v1.Inputs.last_modified_by:type_name -> google.protobuf.StringValue
	25, // 38: arista.studio.v1.Inputs.inputs:type_name -> google.protobuf.StringValue
	0,  // 39: arista.studio.v1.Template.type:type_name -> arista.studio.v1.TemplateType
	25, // 40: arista.studio.v1.Template.body:type_name -> google.protobuf.StringValue
	26, // 41: arista.studio.v1.BooleanInputFieldProps.default_value:type_name -> google.protobuf.BoolValue
	30, // 42: arista.studio.v1.IntegerInputFieldProps.default_value:type_name -> google.protobuf.Int64Value
	31, // 43: arista.studio.v1.IntegerInputFieldProps.static_options:type_name -> fmp.RepeatedInt64
	29, // 44: arista.studio.v1.IntegerInputFieldProps.dynamic_options:type_name -> fmp.RepeatedString
	25, // 45: arista.studio.v1.IntegerInputFieldProps.range:type_name -> google.protobuf.StringValue
	32, // 46: arista.studio.v1.FloatInputFieldProps.default_value:type_name -> google.protobuf.FloatValue
	33, // 47: arista.studio.v1.FloatInputFieldProps.static_options:type_name -> fmp.RepeatedFloat
	29, // 48: arista.studio.v1.FloatInputFieldProps.dynamic_options:type_name -> fmp.RepeatedString
	25, // 49: arista.studio.v1.StringInputFieldProps.default_value:type_name -> google.protobuf.StringValue
	29, // 50: arista.studio.v1.StringInputFieldProps.static_options:type_name -> fmp.RepeatedString
	29, // 51: arista.studio.v1.StringInputFieldProps.dynamic_options:type_name -> fmp.RepeatedString
	25, // 52: arista.studio.v1.StringInputFieldProps.length:type_name -> google.protobuf.StringValue
	25, // 53: arista.studio.v1.StringInputFieldProps.pattern:type_name -> google.protobuf.StringValue
	25, // 54: arista.studio.v1.StringInputFieldProps.format:type_name -> google.protobuf.StringValue
	29, // 55: arista.studio.v1.GroupInputFieldProps.members:type_name -> fmp.RepeatedString
	25, // 56: arista.studio.v1.CollectionInputFieldProps.base_field_id:type_name -> google.protobuf.StringValue
	25, // 57: arista.studio.v1.CollectionInputFieldProps.key:type_name -> google.protobuf.StringValue
	25, // 58: arista.studio.v1.ResolverInputFieldProps.base_field_id:type_name -> google.protobuf.StringValue
	3,  // 59: arista.studio.v1.ResolverInputFieldProps.display_mode:type_name -> arista.studio.v1.ResolverFieldDisplayMode
	2,  // 60: arista.studio.v1.ResolverInputFieldProps.input_mode:type_name -> arista.studio.v1.ResolverFieldInputMode
	25, // 61: arista.studio.v1.ResolverInputFieldProps.input_tag_label:type_name -> google.protobuf.StringValue
	25, // 62: arista.studio.v1.ResolverInputFieldProps.tag_filter_query:type_name -> google.protobuf.StringValue
	25, // 63: arista.studio.v1.InputField.id:type_name -> google.protobuf.StringValue
	1,  // 64: arista.studio.v1.InputField.type:type_name -> arista.studio.v1.InputFieldType
	25, // 65: arista.studio.v1.InputField.name:type_name -> google.protobuf.StringValue
	25, // 66: arista.studio.v1.InputField.label:type_name -> google.protobuf.StringValue
	25, // 67: arista.studio.v1.InputField.description:type_name -> google.protobuf.StringValue
	26, // 68: arista.studio.v1.InputField.required:type_name -> google.protobuf.BoolValue
	13, // 69: arista.studio.v1.InputField.boolean_props:type_name -> arista.studio.v1.BooleanInputFieldProps
	14, // 70: arista.studio.v1.InputField.integer_props:type_name -> arista.studio.v1.IntegerInputFieldProps
	15, // 71: arista.studio.v1.InputField.float_props:type_name -> arista.studio.v1.FloatInputFieldProps
	16, // 72: arista.studio.v1.InputField.string_props:type_name -> arista.studio.v1.StringInputFieldProps
	17, // 73: arista.studio.v1.InputField.group_props:type_name -> arista.studio.v1.GroupInputFieldProps
	18, // 74: arista.studio.v1.InputField.collection_props:type_name -> arista.studio.v1.CollectionInputFieldProps
	19, // 75: arista.studio.v1.InputField.resolver_props:type_name -> arista.studio.v1.ResolverInputFieldProps
	25, // 76: arista.studio.v1.InputField.auto_fill_action_id:type_name -> google.protobuf.StringValue
	24, // 77: arista.studio.v1.InputFields.values:type_name -> arista.studio.v1.InputFields.ValuesEntry
	25, // 78: arista.studio.v1.Layout.value:type_name -> google.protobuf.StringValue
	21, // 79: arista.studio.v1.InputSchema.fields:type_name -> arista.studio.v1.InputFields
	22, // 80: arista.studio.v1.InputSchema.layout:type_name -> arista.studio.v1.Layout
	20, // 81: arista.studio.v1.InputFields.ValuesEntry.value:type_name -> arista.studio.v1.InputField
	82, // [82:82] is the sub-list for method output_type
	82, // [82:82] is the sub-list for method input_type
	82, // [82:82] is the sub-list for extension type_name
	82, // [82:82] is the sub-list for extension extendee
	0,  // [0:82] is the sub-list for field type_name
}

func init() { file_arista_studio_v1_studio_proto_init() }
func file_arista_studio_v1_studio_proto_init() {
	if File_arista_studio_v1_studio_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_arista_studio_v1_studio_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Studio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignedTagsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignedTags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputsKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Inputs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Template); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BooleanInputFieldProps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntegerInputFieldProps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatInputFieldProps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringInputFieldProps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupInputFieldProps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionInputFieldProps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolverInputFieldProps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputFields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Layout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_arista_studio_v1_studio_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_arista_studio_v1_studio_proto_goTypes,
		DependencyIndexes: file_arista_studio_v1_studio_proto_depIdxs,
		EnumInfos:         file_arista_studio_v1_studio_proto_enumTypes,
		MessageInfos:      file_arista_studio_v1_studio_proto_msgTypes,
	}.Build()
	File_arista_studio_v1_studio_proto = out.File
	file_arista_studio_v1_studio_proto_rawDesc = nil
	file_arista_studio_v1_studio_proto_goTypes = nil
	file_arista_studio_v1_studio_proto_depIdxs = nil
}
