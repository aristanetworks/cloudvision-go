// Copyright (c) 2020 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

// NOTE: This is a workspace-aware Resource API.
// Please see workspace.v1 for more information.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.7
// source: arista/studio.v1/studio.proto

package studio

import (
	fmp "github.com/aristanetworks/cloudvision-go/api/fmp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TemplateType defines the set of supported languages that can
// be used in studio templates.
type TemplateType int32

const (
	TemplateType_TEMPLATE_TYPE_UNSPECIFIED TemplateType = 0
	// TEMPLATE_TYPE_MAKO is the Mako templating language for Python.
	// More information: https://www.makotemplates.org
	TemplateType_TEMPLATE_TYPE_MAKO TemplateType = 1
	// TEMPLATE_TYPE_JINJA is the Jinja templating language for Python.
	// More information: https://palletsprojects.com/p/jinja
	TemplateType_TEMPLATE_TYPE_JINJA TemplateType = 2
	// TEMPLATE_TYPE_GO is the Go templating language.
	// More information: https://pkg.go.dev/text/template
	//
	// NOTE: Not all template functions are supported for this type.
	TemplateType_TEMPLATE_TYPE_GO TemplateType = 3
)

// Enum value maps for TemplateType.
var (
	TemplateType_name = map[int32]string{
		0: "TEMPLATE_TYPE_UNSPECIFIED",
		1: "TEMPLATE_TYPE_MAKO",
		2: "TEMPLATE_TYPE_JINJA",
		3: "TEMPLATE_TYPE_GO",
	}
	TemplateType_value = map[string]int32{
		"TEMPLATE_TYPE_UNSPECIFIED": 0,
		"TEMPLATE_TYPE_MAKO":        1,
		"TEMPLATE_TYPE_JINJA":       2,
		"TEMPLATE_TYPE_GO":          3,
	}
)

func (x TemplateType) Enum() *TemplateType {
	p := new(TemplateType)
	*p = x
	return p
}

func (x TemplateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TemplateType) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_studio_v1_studio_proto_enumTypes[0].Descriptor()
}

func (TemplateType) Type() protoreflect.EnumType {
	return &file_arista_studio_v1_studio_proto_enumTypes[0]
}

func (x TemplateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TemplateType.Descriptor instead.
func (TemplateType) EnumDescriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{0}
}

// InputFieldType defines the set of possible data types for
// values that can be input into a studio.
type InputFieldType int32

const (
	InputFieldType_INPUT_FIELD_TYPE_UNSPECIFIED InputFieldType = 0
	// INPUT_FIELD_TYPE_BOOLEAN is the data type for a boolean value.
	InputFieldType_INPUT_FIELD_TYPE_BOOLEAN InputFieldType = 1
	// INPUT_FIELD_TYPE_INTEGER is the data type for an integer value.
	InputFieldType_INPUT_FIELD_TYPE_INTEGER InputFieldType = 2
	// INPUT_FIELD_TYPE_FLOAT is the data type for a float value.
	InputFieldType_INPUT_FIELD_TYPE_FLOAT InputFieldType = 3
	// INPUT_FIELD_TYPE_STRING is the data type for a string value.
	InputFieldType_INPUT_FIELD_TYPE_STRING InputFieldType = 4
	// INPUT_FIELD_TYPE_GROUP is the data type for an unordered group of
	// inputs of any type. This type is used in cases where inputs are
	// required to be consolidated into an object for use in the template
	// or to attach multiple inputs under a resolver or collection.
	InputFieldType_INPUT_FIELD_TYPE_GROUP InputFieldType = 5
	// INPUT_FIELD_TYPE_COLLECTION is the data type for an ordered collection
	// of inputs of the same type. This type is used in cases where multiple
	// input values of the same type should be given for a field, and where
	// ordering matters.
	InputFieldType_INPUT_FIELD_TYPE_COLLECTION InputFieldType = 6
	// INPUT_FIELD_TYPE_RESOLVER is the data type for an input that allows
	// its member input to be assigned based on a tag query match. This
	// type is used in cases where the input value is conditional on a
	// device or a group of devices. The query is resolved at run-time
	// and each affected device is given the value that corresponds to
	// the tag it is assigned to.
	InputFieldType_INPUT_FIELD_TYPE_RESOLVER InputFieldType = 7
	// INPUT_FIELD_TYPE_TAG_MATCHER is the data type for an input that allows
	// an unordered set of devices or interfaces to be selected. The set of
	// devices or interfaces that are to be selected are specified by a tag
	// query, resolved at run-time.
	InputFieldType_INPUT_FIELD_TYPE_TAG_MATCHER InputFieldType = 8
)

// Enum value maps for InputFieldType.
var (
	InputFieldType_name = map[int32]string{
		0: "INPUT_FIELD_TYPE_UNSPECIFIED",
		1: "INPUT_FIELD_TYPE_BOOLEAN",
		2: "INPUT_FIELD_TYPE_INTEGER",
		3: "INPUT_FIELD_TYPE_FLOAT",
		4: "INPUT_FIELD_TYPE_STRING",
		5: "INPUT_FIELD_TYPE_GROUP",
		6: "INPUT_FIELD_TYPE_COLLECTION",
		7: "INPUT_FIELD_TYPE_RESOLVER",
		8: "INPUT_FIELD_TYPE_TAG_MATCHER",
	}
	InputFieldType_value = map[string]int32{
		"INPUT_FIELD_TYPE_UNSPECIFIED": 0,
		"INPUT_FIELD_TYPE_BOOLEAN":     1,
		"INPUT_FIELD_TYPE_INTEGER":     2,
		"INPUT_FIELD_TYPE_FLOAT":       3,
		"INPUT_FIELD_TYPE_STRING":      4,
		"INPUT_FIELD_TYPE_GROUP":       5,
		"INPUT_FIELD_TYPE_COLLECTION":  6,
		"INPUT_FIELD_TYPE_RESOLVER":    7,
		"INPUT_FIELD_TYPE_TAG_MATCHER": 8,
	}
)

func (x InputFieldType) Enum() *InputFieldType {
	p := new(InputFieldType)
	*p = x
	return p
}

func (x InputFieldType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InputFieldType) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_studio_v1_studio_proto_enumTypes[1].Descriptor()
}

func (InputFieldType) Type() protoreflect.EnumType {
	return &file_arista_studio_v1_studio_proto_enumTypes[1]
}

func (x InputFieldType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InputFieldType.Descriptor instead.
func (InputFieldType) EnumDescriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{1}
}

// ResolverFieldInputMode defines the set of ways a resolver tag query
// can be specified in a studio.
type ResolverFieldInputMode int32

const (
	ResolverFieldInputMode_RESOLVER_FIELD_INPUT_MODE_UNSPECIFIED ResolverFieldInputMode = 0
	// RESOLVER_FIELD_INPUT_MODE_SINGLE_DEVICE_TAG allows devices to be
	// selected based on a single tag label.
	ResolverFieldInputMode_RESOLVER_FIELD_INPUT_MODE_SINGLE_DEVICE_TAG ResolverFieldInputMode = 1
	// RESOLVER_FIELD_INPUT_MODE_SINGLE_INTERFACE_TAG allows interfaces
	// to be selected based on a single tag label.
	ResolverFieldInputMode_RESOLVER_FIELD_INPUT_MODE_SINGLE_INTERFACE_TAG ResolverFieldInputMode = 2
	// RESOLVER_FIELD_INPUT_MODE_MULTI_DEVICE_TAG allows devices to be
	// selected based on any tag label.
	ResolverFieldInputMode_RESOLVER_FIELD_INPUT_MODE_MULTI_DEVICE_TAG ResolverFieldInputMode = 3
	// RESOLVER_FIELD_INPUT_MODE_MULTI_INTERFACE_TAG allows interfaces
	// to be selected based on any tag label.
	ResolverFieldInputMode_RESOLVER_FIELD_INPUT_MODE_MULTI_INTERFACE_TAG ResolverFieldInputMode = 4
)

// Enum value maps for ResolverFieldInputMode.
var (
	ResolverFieldInputMode_name = map[int32]string{
		0: "RESOLVER_FIELD_INPUT_MODE_UNSPECIFIED",
		1: "RESOLVER_FIELD_INPUT_MODE_SINGLE_DEVICE_TAG",
		2: "RESOLVER_FIELD_INPUT_MODE_SINGLE_INTERFACE_TAG",
		3: "RESOLVER_FIELD_INPUT_MODE_MULTI_DEVICE_TAG",
		4: "RESOLVER_FIELD_INPUT_MODE_MULTI_INTERFACE_TAG",
	}
	ResolverFieldInputMode_value = map[string]int32{
		"RESOLVER_FIELD_INPUT_MODE_UNSPECIFIED":          0,
		"RESOLVER_FIELD_INPUT_MODE_SINGLE_DEVICE_TAG":    1,
		"RESOLVER_FIELD_INPUT_MODE_SINGLE_INTERFACE_TAG": 2,
		"RESOLVER_FIELD_INPUT_MODE_MULTI_DEVICE_TAG":     3,
		"RESOLVER_FIELD_INPUT_MODE_MULTI_INTERFACE_TAG":  4,
	}
)

func (x ResolverFieldInputMode) Enum() *ResolverFieldInputMode {
	p := new(ResolverFieldInputMode)
	*p = x
	return p
}

func (x ResolverFieldInputMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResolverFieldInputMode) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_studio_v1_studio_proto_enumTypes[2].Descriptor()
}

func (ResolverFieldInputMode) Type() protoreflect.EnumType {
	return &file_arista_studio_v1_studio_proto_enumTypes[2]
}

func (x ResolverFieldInputMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResolverFieldInputMode.Descriptor instead.
func (ResolverFieldInputMode) EnumDescriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{2}
}

// ResolverFieldDisplayMode defines the set of ways in which the matching
// devices or interfaces should be displayed on the UI.
type ResolverFieldDisplayMode int32

const (
	ResolverFieldDisplayMode_RESOLVER_FIELD_DISPLAY_MODE_UNSPECIFIED ResolverFieldDisplayMode = 0
	// RESOLVER_FIELD_DISPLAY_MODE_ALL instructs the UI to show all
	// matching devices or interfaces, including ones that have no
	// inputs.
	ResolverFieldDisplayMode_RESOLVER_FIELD_DISPLAY_MODE_ALL ResolverFieldDisplayMode = 1
	// RESOLVER_FIELD_DISPLAY_MODE_SPARSE instructs the UI to show
	// only matching devices or interfaces that have inputs.
	ResolverFieldDisplayMode_RESOLVER_FIELD_DISPLAY_MODE_SPARSE ResolverFieldDisplayMode = 2
)

// Enum value maps for ResolverFieldDisplayMode.
var (
	ResolverFieldDisplayMode_name = map[int32]string{
		0: "RESOLVER_FIELD_DISPLAY_MODE_UNSPECIFIED",
		1: "RESOLVER_FIELD_DISPLAY_MODE_ALL",
		2: "RESOLVER_FIELD_DISPLAY_MODE_SPARSE",
	}
	ResolverFieldDisplayMode_value = map[string]int32{
		"RESOLVER_FIELD_DISPLAY_MODE_UNSPECIFIED": 0,
		"RESOLVER_FIELD_DISPLAY_MODE_ALL":         1,
		"RESOLVER_FIELD_DISPLAY_MODE_SPARSE":      2,
	}
)

func (x ResolverFieldDisplayMode) Enum() *ResolverFieldDisplayMode {
	p := new(ResolverFieldDisplayMode)
	*p = x
	return p
}

func (x ResolverFieldDisplayMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResolverFieldDisplayMode) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_studio_v1_studio_proto_enumTypes[3].Descriptor()
}

func (ResolverFieldDisplayMode) Type() protoreflect.EnumType {
	return &file_arista_studio_v1_studio_proto_enumTypes[3]
}

func (x ResolverFieldDisplayMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResolverFieldDisplayMode.Descriptor instead.
func (ResolverFieldDisplayMode) EnumDescriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{3}
}

// TagMatcherFieldMode defines the set of ways a tag query for matching
// device or interfaces can be specified in a studio.
type TagMatcherFieldMode int32

const (
	TagMatcherFieldMode_TAG_MATCHER_FIELD_MODE_UNSPECIFIED TagMatcherFieldMode = 0
	// TAG_MATCHER_FIELD_MODE_SINGLE_DEVICE_TAG allows devices to be
	// selected based on a single tag label.
	TagMatcherFieldMode_TAG_MATCHER_FIELD_MODE_SINGLE_DEVICE_TAG TagMatcherFieldMode = 1
	// TAG_MATCHER_FIELD_MODE_SINGLE_INTERFACE_TAG allows interfaces
	// to be selected based on a single tag label.
	TagMatcherFieldMode_TAG_MATCHER_FIELD_MODE_SINGLE_INTERFACE_TAG TagMatcherFieldMode = 2
	// TAG_MATCHER_FIELD_MODE_MULTI_DEVICE_TAG allows devices to be
	// selected based on any tag label.
	TagMatcherFieldMode_TAG_MATCHER_FIELD_MODE_MULTI_DEVICE_TAG TagMatcherFieldMode = 3
	// TAG_MATCHER_FIELD_MODE_MULTI_INTERFACE_TAG allows interfaces
	// to be selected based on any tag label.
	TagMatcherFieldMode_TAG_MATCHER_FIELD_MODE_MULTI_INTERFACE_TAG TagMatcherFieldMode = 4
)

// Enum value maps for TagMatcherFieldMode.
var (
	TagMatcherFieldMode_name = map[int32]string{
		0: "TAG_MATCHER_FIELD_MODE_UNSPECIFIED",
		1: "TAG_MATCHER_FIELD_MODE_SINGLE_DEVICE_TAG",
		2: "TAG_MATCHER_FIELD_MODE_SINGLE_INTERFACE_TAG",
		3: "TAG_MATCHER_FIELD_MODE_MULTI_DEVICE_TAG",
		4: "TAG_MATCHER_FIELD_MODE_MULTI_INTERFACE_TAG",
	}
	TagMatcherFieldMode_value = map[string]int32{
		"TAG_MATCHER_FIELD_MODE_UNSPECIFIED":          0,
		"TAG_MATCHER_FIELD_MODE_SINGLE_DEVICE_TAG":    1,
		"TAG_MATCHER_FIELD_MODE_SINGLE_INTERFACE_TAG": 2,
		"TAG_MATCHER_FIELD_MODE_MULTI_DEVICE_TAG":     3,
		"TAG_MATCHER_FIELD_MODE_MULTI_INTERFACE_TAG":  4,
	}
)

func (x TagMatcherFieldMode) Enum() *TagMatcherFieldMode {
	p := new(TagMatcherFieldMode)
	*p = x
	return p
}

func (x TagMatcherFieldMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TagMatcherFieldMode) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_studio_v1_studio_proto_enumTypes[4].Descriptor()
}

func (TagMatcherFieldMode) Type() protoreflect.EnumType {
	return &file_arista_studio_v1_studio_proto_enumTypes[4]
}

func (x TagMatcherFieldMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TagMatcherFieldMode.Descriptor instead.
func (TagMatcherFieldMode) EnumDescriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{4}
}

// TopologyElememt defines the fundamental types of elements in topology.
type TopologyElement int32

const (
	TopologyElement_TOPOLOGY_ELEMENT_UNSPECIFIED TopologyElement = 0
	// TOPOLOGY_ELEMENT_DEVICE indicates a device.
	TopologyElement_TOPOLOGY_ELEMENT_DEVICE TopologyElement = 1
	// TOPOLOGY_ELEMENT_INTERFACE indicates an interface.
	TopologyElement_TOPOLOGY_ELEMENT_INTERFACE TopologyElement = 2
	// TOPOLOGY_ELEMENT_CONNECTION indicates a connection.
	TopologyElement_TOPOLOGY_ELEMENT_CONNECTION TopologyElement = 3
)

// Enum value maps for TopologyElement.
var (
	TopologyElement_name = map[int32]string{
		0: "TOPOLOGY_ELEMENT_UNSPECIFIED",
		1: "TOPOLOGY_ELEMENT_DEVICE",
		2: "TOPOLOGY_ELEMENT_INTERFACE",
		3: "TOPOLOGY_ELEMENT_CONNECTION",
	}
	TopologyElement_value = map[string]int32{
		"TOPOLOGY_ELEMENT_UNSPECIFIED": 0,
		"TOPOLOGY_ELEMENT_DEVICE":      1,
		"TOPOLOGY_ELEMENT_INTERFACE":   2,
		"TOPOLOGY_ELEMENT_CONNECTION":  3,
	}
)

func (x TopologyElement) Enum() *TopologyElement {
	p := new(TopologyElement)
	*p = x
	return p
}

func (x TopologyElement) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TopologyElement) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_studio_v1_studio_proto_enumTypes[5].Descriptor()
}

func (TopologyElement) Type() protoreflect.EnumType {
	return &file_arista_studio_v1_studio_proto_enumTypes[5]
}

func (x TopologyElement) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TopologyElement.Descriptor instead.
func (TopologyElement) EnumDescriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{5}
}

// TopologyOperation defines the operations that may be performed on the topology.
type TopologyOperation int32

const (
	TopologyOperation_TOPOLOGY_OPERATION_UNSPECIFIED TopologyOperation = 0
	// TOPOLOGY_OPERATION_ADDED indicates addition of a TopologyElement.
	TopologyOperation_TOPOLOGY_OPERATION_ADDED TopologyOperation = 1
	// TOPOLOGY_OPERATION_MODIFIED indicates modification of a TopologyElement.
	TopologyOperation_TOPOLOGY_OPERATION_MODIFIED TopologyOperation = 2
	// TOPOLOGY_OPERATION_REMOVED indicates removal of a TopologyElement.
	TopologyOperation_TOPOLOGY_OPERATION_REMOVED TopologyOperation = 3
)

// Enum value maps for TopologyOperation.
var (
	TopologyOperation_name = map[int32]string{
		0: "TOPOLOGY_OPERATION_UNSPECIFIED",
		1: "TOPOLOGY_OPERATION_ADDED",
		2: "TOPOLOGY_OPERATION_MODIFIED",
		3: "TOPOLOGY_OPERATION_REMOVED",
	}
	TopologyOperation_value = map[string]int32{
		"TOPOLOGY_OPERATION_UNSPECIFIED": 0,
		"TOPOLOGY_OPERATION_ADDED":       1,
		"TOPOLOGY_OPERATION_MODIFIED":    2,
		"TOPOLOGY_OPERATION_REMOVED":     3,
	}
)

func (x TopologyOperation) Enum() *TopologyOperation {
	p := new(TopologyOperation)
	*p = x
	return p
}

func (x TopologyOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TopologyOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_studio_v1_studio_proto_enumTypes[6].Descriptor()
}

func (TopologyOperation) Type() protoreflect.EnumType {
	return &file_arista_studio_v1_studio_proto_enumTypes[6]
}

func (x TopologyOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TopologyOperation.Descriptor instead.
func (TopologyOperation) EnumDescriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{6}
}

// TopologyUpdateStatus defines the set of statuses that apply to individual topology updates.
type TopologyUpdateStatus int32

const (
	TopologyUpdateStatus_TOPOLOGY_UPDATE_STATUS_UNSPECIFIED TopologyUpdateStatus = 0
	// TOPOLOGY_UPDATE_STATUS_NEW indicates the update is new.
	TopologyUpdateStatus_TOPOLOGY_UPDATE_STATUS_NEW TopologyUpdateStatus = 1
	// TOPOLOGY_UPDATE_STATUS_ACCEPTED indicates the update is accepted.
	TopologyUpdateStatus_TOPOLOGY_UPDATE_STATUS_ACCEPTED TopologyUpdateStatus = 2
	// TOPOLOGY_UPDATE_STATUS_IGNORED indicates the update is ignored.
	TopologyUpdateStatus_TOPOLOGY_UPDATE_STATUS_IGNORED TopologyUpdateStatus = 3
)

// Enum value maps for TopologyUpdateStatus.
var (
	TopologyUpdateStatus_name = map[int32]string{
		0: "TOPOLOGY_UPDATE_STATUS_UNSPECIFIED",
		1: "TOPOLOGY_UPDATE_STATUS_NEW",
		2: "TOPOLOGY_UPDATE_STATUS_ACCEPTED",
		3: "TOPOLOGY_UPDATE_STATUS_IGNORED",
	}
	TopologyUpdateStatus_value = map[string]int32{
		"TOPOLOGY_UPDATE_STATUS_UNSPECIFIED": 0,
		"TOPOLOGY_UPDATE_STATUS_NEW":         1,
		"TOPOLOGY_UPDATE_STATUS_ACCEPTED":    2,
		"TOPOLOGY_UPDATE_STATUS_IGNORED":     3,
	}
)

func (x TopologyUpdateStatus) Enum() *TopologyUpdateStatus {
	p := new(TopologyUpdateStatus)
	*p = x
	return p
}

func (x TopologyUpdateStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TopologyUpdateStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_studio_v1_studio_proto_enumTypes[7].Descriptor()
}

func (TopologyUpdateStatus) Type() protoreflect.EnumType {
	return &file_arista_studio_v1_studio_proto_enumTypes[7]
}

func (x TopologyUpdateStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TopologyUpdateStatus.Descriptor instead.
func (TopologyUpdateStatus) EnumDescriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{7}
}

// AutofillProviderType describes the set of possible provided argument types.
type AutofillProviderType int32

const (
	AutofillProviderType_AUTOFILL_PROVIDER_TYPE_UNSPECIFIED AutofillProviderType = 0
	// AUTOFILL_PROVIDER_TYPE_USER_SPECIFIED is when an argument is to be
	// provided at runtime by the user.
	AutofillProviderType_AUTOFILL_PROVIDER_TYPE_USER_SPECIFIED AutofillProviderType = 1
	// AUTOFILL_PROVIDER_TYPE_PREDEFINED is when an argument has a predefined value.
	AutofillProviderType_AUTOFILL_PROVIDER_TYPE_PREDEFINED AutofillProviderType = 2
	// AUTOFILL_PROVIDER_TYPE_LINKED is when an argument is linked to another studio input field.
	AutofillProviderType_AUTOFILL_PROVIDER_TYPE_LINKED AutofillProviderType = 3
)

// Enum value maps for AutofillProviderType.
var (
	AutofillProviderType_name = map[int32]string{
		0: "AUTOFILL_PROVIDER_TYPE_UNSPECIFIED",
		1: "AUTOFILL_PROVIDER_TYPE_USER_SPECIFIED",
		2: "AUTOFILL_PROVIDER_TYPE_PREDEFINED",
		3: "AUTOFILL_PROVIDER_TYPE_LINKED",
	}
	AutofillProviderType_value = map[string]int32{
		"AUTOFILL_PROVIDER_TYPE_UNSPECIFIED":    0,
		"AUTOFILL_PROVIDER_TYPE_USER_SPECIFIED": 1,
		"AUTOFILL_PROVIDER_TYPE_PREDEFINED":     2,
		"AUTOFILL_PROVIDER_TYPE_LINKED":         3,
	}
)

func (x AutofillProviderType) Enum() *AutofillProviderType {
	p := new(AutofillProviderType)
	*p = x
	return p
}

func (x AutofillProviderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AutofillProviderType) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_studio_v1_studio_proto_enumTypes[8].Descriptor()
}

func (AutofillProviderType) Type() protoreflect.EnumType {
	return &file_arista_studio_v1_studio_proto_enumTypes[8]
}

func (x AutofillProviderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AutofillProviderType.Descriptor instead.
func (AutofillProviderType) EnumDescriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{8}
}

// StudioKey uniquely identifies a studio.
type StudioKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// studio_id uniquely identifies the studio in the workspace indicated
	// by `workspace_id`.
	StudioId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=studio_id,json=studioId,proto3" json:"studio_id,omitempty"`
	// workspace_id identifies the workspace within which the studio resides.
	WorkspaceId *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *StudioKey) Reset() {
	*x = StudioKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioKey) ProtoMessage() {}

func (x *StudioKey) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioKey.ProtoReflect.Descriptor instead.
func (*StudioKey) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{0}
}

func (x *StudioKey) GetStudioId() *wrapperspb.StringValue {
	if x != nil {
		return x.StudioId
	}
	return nil
}

func (x *StudioKey) GetWorkspaceId() *wrapperspb.StringValue {
	if x != nil {
		return x.WorkspaceId
	}
	return nil
}

// StudioConfig holds a configuration for a studio.
//
// Changes to fields other than `key` and `remove` are applied to
// a copy of the mainline.
type StudioConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key uniquely identifies the studio.
	Key *StudioKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// remove indicates whether to remove (`true`) or add (`false`,
	// unset) the studio identified by the key if the encompassing
	// workspace merges. Other data fields are not allowed if this
	// field is set to true.
	Remove *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=remove,proto3" json:"remove,omitempty"`
	// display_name is the name of this studio as displayed on the UI.
	DisplayName *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// description is a brief description of the studio.
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// template is a script that builds the device configuration from the
	// inputs that are described by `input_schema`.
	Template *Template `protobuf:"bytes,5,opt,name=template,proto3" json:"template,omitempty"`
	// input_schema is the schema for the studio inputs that are processed
	// by `template`.
	InputSchema *InputSchema `protobuf:"bytes,6,opt,name=input_schema,json=inputSchema,proto3" json:"input_schema,omitempty"`
}

func (x *StudioConfig) Reset() {
	*x = StudioConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioConfig) ProtoMessage() {}

func (x *StudioConfig) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioConfig.ProtoReflect.Descriptor instead.
func (*StudioConfig) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{1}
}

func (x *StudioConfig) GetKey() *StudioKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *StudioConfig) GetRemove() *wrapperspb.BoolValue {
	if x != nil {
		return x.Remove
	}
	return nil
}

func (x *StudioConfig) GetDisplayName() *wrapperspb.StringValue {
	if x != nil {
		return x.DisplayName
	}
	return nil
}

func (x *StudioConfig) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *StudioConfig) GetTemplate() *Template {
	if x != nil {
		return x.Template
	}
	return nil
}

func (x *StudioConfig) GetInputSchema() *InputSchema {
	if x != nil {
		return x.InputSchema
	}
	return nil
}

// StudioSummary holds basic information about a studio.
type StudioSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key uniquely identifies the studio.
	Key *StudioKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// display_name is the name of this studio as displayed on the UI.
	DisplayName *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// description is a brief description of the studio.
	Description *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// immutable indicates if read-write studio management
	// access over a given studio is granted or not.
	// If studio is immutable, its display name, description,
	// schema and template cannot be modified.
	Immutable *wrapperspb.BoolValue `protobuf:"bytes,4,opt,name=immutable,proto3" json:"immutable,omitempty"`
}

func (x *StudioSummary) Reset() {
	*x = StudioSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioSummary) ProtoMessage() {}

func (x *StudioSummary) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioSummary.ProtoReflect.Descriptor instead.
func (*StudioSummary) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{2}
}

func (x *StudioSummary) GetKey() *StudioKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *StudioSummary) GetDisplayName() *wrapperspb.StringValue {
	if x != nil {
		return x.DisplayName
	}
	return nil
}

func (x *StudioSummary) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *StudioSummary) GetImmutable() *wrapperspb.BoolValue {
	if x != nil {
		return x.Immutable
	}
	return nil
}

// Studio holds the active state for a studio.
type Studio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key uniquely identifies the studio.
	Key *StudioKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// created_at is the time at which the studio was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// created_by is the name of the user that created the studio.
	CreatedBy *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// last_modified_at is the time at which the studio was last modified.
	LastModifiedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=last_modified_at,json=lastModifiedAt,proto3" json:"last_modified_at,omitempty"`
	// last_modified_by is the name of the user that last modified the studio.
	LastModifiedBy *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=last_modified_by,json=lastModifiedBy,proto3" json:"last_modified_by,omitempty"`
	// display_name is the name of this studio as displayed on the UI.
	DisplayName *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// description is a brief description of the studio.
	Description *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	// template is a script that builds the device configuration from the
	// inputs that are described by `input_schema`.
	Template *Template `protobuf:"bytes,8,opt,name=template,proto3" json:"template,omitempty"`
	// input_schema is the schema for the studio inputs that are processed
	// by `template`.
	InputSchema *InputSchema `protobuf:"bytes,9,opt,name=input_schema,json=inputSchema,proto3" json:"input_schema,omitempty"`
}

func (x *Studio) Reset() {
	*x = Studio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Studio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Studio) ProtoMessage() {}

func (x *Studio) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Studio.ProtoReflect.Descriptor instead.
func (*Studio) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{3}
}

func (x *Studio) GetKey() *StudioKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Studio) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Studio) GetCreatedBy() *wrapperspb.StringValue {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *Studio) GetLastModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastModifiedAt
	}
	return nil
}

func (x *Studio) GetLastModifiedBy() *wrapperspb.StringValue {
	if x != nil {
		return x.LastModifiedBy
	}
	return nil
}

func (x *Studio) GetDisplayName() *wrapperspb.StringValue {
	if x != nil {
		return x.DisplayName
	}
	return nil
}

func (x *Studio) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Studio) GetTemplate() *Template {
	if x != nil {
		return x.Template
	}
	return nil
}

func (x *Studio) GetInputSchema() *InputSchema {
	if x != nil {
		return x.InputSchema
	}
	return nil
}

// AssignedTagsConfig holds a configuration to assign a studio to a set of devices
// matching a tag query.
type AssignedTagsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key uniquely identifies the studio to which to assign devices.
	Key *StudioKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// remove indicates whether to remove (`true`) or add (`false`,
	// unset) the tag assignments involving the studio identified
	// by the key if the encompassing workspace merges. Other data
	// fields are not allowed if this field is set to true.
	Remove *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=remove,proto3" json:"remove,omitempty"`
	// query is a tag query string that conforms to the CloudVision
	// tag query language. E.g., the query, `"datacenter:NYC,SFO AND
	// sflow:enabled"`, matches all devices with sflow enabled in
	// data centers NYC and SFO.
	Query *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *AssignedTagsConfig) Reset() {
	*x = AssignedTagsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedTagsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedTagsConfig) ProtoMessage() {}

func (x *AssignedTagsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedTagsConfig.ProtoReflect.Descriptor instead.
func (*AssignedTagsConfig) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{4}
}

func (x *AssignedTagsConfig) GetKey() *StudioKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AssignedTagsConfig) GetRemove() *wrapperspb.BoolValue {
	if x != nil {
		return x.Remove
	}
	return nil
}

func (x *AssignedTagsConfig) GetQuery() *wrapperspb.StringValue {
	if x != nil {
		return x.Query
	}
	return nil
}

// AssignedTags can be used to retrieve additional metadata about a
// studio's `AssignedTagsConfig`.
type AssignedTags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key uniquely identifies the studio to which devices were assigned.
	Key *StudioKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// created_at is the time at which the assignment was first created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// created_by is the name of the user that created the assignment.
	CreatedBy *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// last_modified_at is the time at which the assignment was last modified.
	LastModifiedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=last_modified_at,json=lastModifiedAt,proto3" json:"last_modified_at,omitempty"`
	// last_modified_by is the name of the user that last modified the assignment.
	LastModifiedBy *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=last_modified_by,json=lastModifiedBy,proto3" json:"last_modified_by,omitempty"`
	// query is a tag query string that conforms to the CloudVision
	// tag query language. See `AssignedTagsConfig`.
	Query *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *AssignedTags) Reset() {
	*x = AssignedTags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedTags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedTags) ProtoMessage() {}

func (x *AssignedTags) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedTags.ProtoReflect.Descriptor instead.
func (*AssignedTags) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{5}
}

func (x *AssignedTags) GetKey() *StudioKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AssignedTags) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AssignedTags) GetCreatedBy() *wrapperspb.StringValue {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *AssignedTags) GetLastModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastModifiedAt
	}
	return nil
}

func (x *AssignedTags) GetLastModifiedBy() *wrapperspb.StringValue {
	if x != nil {
		return x.LastModifiedBy
	}
	return nil
}

func (x *AssignedTags) GetQuery() *wrapperspb.StringValue {
	if x != nil {
		return x.Query
	}
	return nil
}

// InputsKey identifies a set of inputs for a particular studio.
type InputsKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// studio_id uniquely identifies the studio in the workspace indicated
	// by `workspace_id`.
	StudioId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=studio_id,json=studioId,proto3" json:"studio_id,omitempty"`
	// workspace_id uniquely identifies the workspace in which the studio resides.
	WorkspaceId *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	// path is the sequence of elements that uniquely identify an input field.
	// An empty path (`[]`) stands for the root of the inputs, or the entire
	// set of inputs for the studio.
	//
	// The members of a group are referenced by field name. E.g., for a group
	// A with a member B, the path to B would be `["A", "B"]`.
	//
	// The members of a collection or resolver are referenced by an integer
	// string. E.g., for a collection A with three members, the path to the
	// second member would be `["A", "1"]`.
	Path *fmp.RepeatedString `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *InputsKey) Reset() {
	*x = InputsKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputsKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputsKey) ProtoMessage() {}

func (x *InputsKey) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputsKey.ProtoReflect.Descriptor instead.
func (*InputsKey) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{6}
}

func (x *InputsKey) GetStudioId() *wrapperspb.StringValue {
	if x != nil {
		return x.StudioId
	}
	return nil
}

func (x *InputsKey) GetWorkspaceId() *wrapperspb.StringValue {
	if x != nil {
		return x.WorkspaceId
	}
	return nil
}

func (x *InputsKey) GetPath() *fmp.RepeatedString {
	if x != nil {
		return x.Path
	}
	return nil
}

// InputsConfig is used to input values into a studio.
//
// NOTE: Setting an input at a higher path overwrite any prior
// `Set`s at lower paths. E.g.,
//
// 1. Set `["A", "X"]` to `"foo"`
// 2. Set `["A", "Y"]` to `"bar"`
// 3. Set `["A"]` to `{"X": "bar"}`
//
// The resulting inputs would be:
// ```
// { "A": { "X": "bar" } }
// ```
type InputsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key uniquely identifies the set of inputs for the studio (at some path).
	Key *InputsKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// remove indicates whether to remove (`true`) or add (`false`,
	// unset) the inputs identified by the key if the encompassing
	// workspace merges. Other data fields are not allowed if this
	// field is set to true.
	Remove *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=remove,proto3" json:"remove,omitempty"`
	// inputs is the value of the input field at the path as a
	// JSON string. It can be the value for a simple or complex
	// input field.
	//
	// Simple types (booleans, integers, floats, strings) map to
	// their JSON equivalents.
	//
	// Complex types map to either arrays or objects:
	//
	// * The group field type maps to a JSON object, where keys
	//   are group members.
	//
	// * The collection field type maps to a JSON array.
	//
	// * The resolver field type maps to a JSON array, where each
	//   element is an object of the form:
	//   ```
	//   {
	//	"tags":   { "query": <query> },
	//	"inputs": <input>
	//   }
	//   ```
	//   Above, `<input>` is the value of the base field of the resolver.
	//   E.g., if the base field is a group with one string member `"A"`,
	//   the resolver inputs would be specified as:
	//   ```
	//   "inputs": { "A": <value> }
	//   ```
	Inputs *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=inputs,proto3" json:"inputs,omitempty"`
}

func (x *InputsConfig) Reset() {
	*x = InputsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputsConfig) ProtoMessage() {}

func (x *InputsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputsConfig.ProtoReflect.Descriptor instead.
func (*InputsConfig) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{7}
}

func (x *InputsConfig) GetKey() *InputsKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *InputsConfig) GetRemove() *wrapperspb.BoolValue {
	if x != nil {
		return x.Remove
	}
	return nil
}

func (x *InputsConfig) GetInputs() *wrapperspb.StringValue {
	if x != nil {
		return x.Inputs
	}
	return nil
}

// Inputs is used to retrieve the existing inputs to a studio.
type Inputs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key uniquely identifies the set of inputs for the studio (at some path).
	Key *InputsKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// created_at is the time at which the inputs were first set.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// created_by is the name of the user that first set the inputs.
	CreatedBy *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// last_modified_at is the time at which the inputs were last modified.
	LastModifiedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=last_modified_at,json=lastModifiedAt,proto3" json:"last_modified_at,omitempty"`
	// last_modified_by is the name of the user that last modified the inputs.
	LastModifiedBy *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=last_modified_by,json=lastModifiedBy,proto3" json:"last_modified_by,omitempty"`
	// inputs is the value of the input field at the path as a JSON string.
	//
	// NOTE: For `GetAll` and `Subscribe`, if the JSON is too large, it will
	// be split across multiple messages such that each is less than the Resource
	// API message size limit (1MB).
	Inputs *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=inputs,proto3" json:"inputs,omitempty"`
}

func (x *Inputs) Reset() {
	*x = Inputs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Inputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Inputs) ProtoMessage() {}

func (x *Inputs) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Inputs.ProtoReflect.Descriptor instead.
func (*Inputs) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{8}
}

func (x *Inputs) GetKey() *InputsKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Inputs) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Inputs) GetCreatedBy() *wrapperspb.StringValue {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *Inputs) GetLastModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastModifiedAt
	}
	return nil
}

func (x *Inputs) GetLastModifiedBy() *wrapperspb.StringValue {
	if x != nil {
		return x.LastModifiedBy
	}
	return nil
}

func (x *Inputs) GetInputs() *wrapperspb.StringValue {
	if x != nil {
		return x.Inputs
	}
	return nil
}

// Template defines a template for a studio.
type Template struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type specifies the language that this template uses.
	Type TemplateType `protobuf:"varint,1,opt,name=type,proto3,enum=arista.studio.v1.TemplateType" json:"type,omitempty"`
	// body contains the actual source code of the template.
	Body *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *Template) Reset() {
	*x = Template{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Template) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Template) ProtoMessage() {}

func (x *Template) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Template.ProtoReflect.Descriptor instead.
func (*Template) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{9}
}

func (x *Template) GetType() TemplateType {
	if x != nil {
		return x.Type
	}
	return TemplateType_TEMPLATE_TYPE_UNSPECIFIED
}

func (x *Template) GetBody() *wrapperspb.StringValue {
	if x != nil {
		return x.Body
	}
	return nil
}

// BooleanInputFieldProps defines the set of properties for a single
// boolean field in a studio input schema.
type BooleanInputFieldProps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// default_value is the default value of the boolean.
	DefaultValue *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
}

func (x *BooleanInputFieldProps) Reset() {
	*x = BooleanInputFieldProps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BooleanInputFieldProps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BooleanInputFieldProps) ProtoMessage() {}

func (x *BooleanInputFieldProps) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BooleanInputFieldProps.ProtoReflect.Descriptor instead.
func (*BooleanInputFieldProps) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{10}
}

func (x *BooleanInputFieldProps) GetDefaultValue() *wrapperspb.BoolValue {
	if x != nil {
		return x.DefaultValue
	}
	return nil
}

// IntegerInputFieldProps defines the set of properties for a single
// integer field in a studio input schema.
type IntegerInputFieldProps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// default_value is the default value of the integer.
	DefaultValue *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	// static_options defines the set of possible values for the integer.
	StaticOptions *fmp.RepeatedInt64 `protobuf:"bytes,2,opt,name=static_options,json=staticOptions,proto3" json:"static_options,omitempty"`
	// range imposes a range (inclusive) on the value of the integer.
	// This should be of the form `"<min>..<max>"`. E.g., `"-10..10"`
	// means the integer can be anything in between and including `-10`
	// and `10`.
	Range *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=range,proto3" json:"range,omitempty"`
	// dynamic_options defines the set of possible values for the integer
	// based on the possible values for other integers in the schema.
	// Each field should be referenced by a JSON object of the form
	// `{ "fieldId": <field_id> }`.
	//
	// E.g,
	// ```
	// [
	//   { "fieldId": "vlanFieldID" },
	//   { "fieldId": "vniFieldID" }
	// ]
	// ```
	// Here, the possible values for the integers identified by
	// `"vlanFieldID"` and `"vniFieldID"` are used as the possible
	// values for this integer.
	DynamicOptions *fmp.RepeatedString `protobuf:"bytes,4,opt,name=dynamic_options,json=dynamicOptions,proto3" json:"dynamic_options,omitempty"`
	// extra_values_allowed allows adding values to the field in
	// addition to what's allowed by static_options/dynamic_options.
	ExtraValuesAllowed *wrapperspb.BoolValue `protobuf:"bytes,5,opt,name=extra_values_allowed,json=extraValuesAllowed,proto3" json:"extra_values_allowed,omitempty"`
}

func (x *IntegerInputFieldProps) Reset() {
	*x = IntegerInputFieldProps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegerInputFieldProps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegerInputFieldProps) ProtoMessage() {}

func (x *IntegerInputFieldProps) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegerInputFieldProps.ProtoReflect.Descriptor instead.
func (*IntegerInputFieldProps) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{11}
}

func (x *IntegerInputFieldProps) GetDefaultValue() *wrapperspb.Int64Value {
	if x != nil {
		return x.DefaultValue
	}
	return nil
}

func (x *IntegerInputFieldProps) GetStaticOptions() *fmp.RepeatedInt64 {
	if x != nil {
		return x.StaticOptions
	}
	return nil
}

func (x *IntegerInputFieldProps) GetRange() *wrapperspb.StringValue {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *IntegerInputFieldProps) GetDynamicOptions() *fmp.RepeatedString {
	if x != nil {
		return x.DynamicOptions
	}
	return nil
}

func (x *IntegerInputFieldProps) GetExtraValuesAllowed() *wrapperspb.BoolValue {
	if x != nil {
		return x.ExtraValuesAllowed
	}
	return nil
}

// FloatInputFieldProps defines the set of properties for a single
// float field in a studio input schema.
type FloatInputFieldProps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// default_value is the default value of the float.
	DefaultValue *wrapperspb.FloatValue `protobuf:"bytes,2,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	// static_options defines the set of possible values for the float.
	StaticOptions *fmp.RepeatedFloat `protobuf:"bytes,3,opt,name=static_options,json=staticOptions,proto3" json:"static_options,omitempty"`
	// dynamic_options defines the set of possible values for the float
	// based on the possible values for other floats in the schema.
	// Each field should be referenced by a JSON object of the form
	// `{ "fieldId": <field_id> }`.
	//
	// E.g,
	// ```
	// [
	//   { "fieldId": "floatField1ID" },
	//   { "fieldId": "floatField2ID" }
	// ]
	// ```
	// Here, the possible values for the floats identified by
	// `"floatField1ID"` and `"floatField2ID"` are used as the
	// possible values for this float.
	DynamicOptions *fmp.RepeatedString `protobuf:"bytes,4,opt,name=dynamic_options,json=dynamicOptions,proto3" json:"dynamic_options,omitempty"`
	// extra_values_allowed allows adding values to the field in
	// addition to what's allowed by static_options/dynamic_options.
	ExtraValuesAllowed *wrapperspb.BoolValue `protobuf:"bytes,5,opt,name=extra_values_allowed,json=extraValuesAllowed,proto3" json:"extra_values_allowed,omitempty"`
}

func (x *FloatInputFieldProps) Reset() {
	*x = FloatInputFieldProps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatInputFieldProps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatInputFieldProps) ProtoMessage() {}

func (x *FloatInputFieldProps) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatInputFieldProps.ProtoReflect.Descriptor instead.
func (*FloatInputFieldProps) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{12}
}

func (x *FloatInputFieldProps) GetDefaultValue() *wrapperspb.FloatValue {
	if x != nil {
		return x.DefaultValue
	}
	return nil
}

func (x *FloatInputFieldProps) GetStaticOptions() *fmp.RepeatedFloat {
	if x != nil {
		return x.StaticOptions
	}
	return nil
}

func (x *FloatInputFieldProps) GetDynamicOptions() *fmp.RepeatedString {
	if x != nil {
		return x.DynamicOptions
	}
	return nil
}

func (x *FloatInputFieldProps) GetExtraValuesAllowed() *wrapperspb.BoolValue {
	if x != nil {
		return x.ExtraValuesAllowed
	}
	return nil
}

// StringInputFieldProps defines the set of properties for a single
// string field in a studio input schema.
type StringInputFieldProps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// default_value is the default value of the string.
	DefaultValue *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	// static_options defines the set of possible values for the string.
	StaticOptions *fmp.RepeatedString `protobuf:"bytes,3,opt,name=static_options,json=staticOptions,proto3" json:"static_options,omitempty"`
	// dynamic_options defines the set of possible values for the string
	// based on the possible values for other strings in the schema.
	// Each field should be referenced by a JSON object of the form
	// `{ "fieldId": <field_id> }`.
	//
	// E.g,
	// ```
	// [
	//   { "fieldId": "deviceFieldID" },
	//   { "fieldId": "ipFieldID" }
	// ]
	// ```
	// Here, the possible values for the strings identified by
	// `"deviceFieldID"` and `"ipFieldID"` are used as the possible
	// values for this string.
	DynamicOptions *fmp.RepeatedString `protobuf:"bytes,4,opt,name=dynamic_options,json=dynamicOptions,proto3" json:"dynamic_options,omitempty"`
	// length imposes a length range (inclusive) on the value of the
	// string. The should be of the form `"<min>..<max>"`. E.g.,
	// `"3..7"` means the value of the string can be three to seven
	// characters long.
	Length *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=length,proto3" json:"length,omitempty"`
	// pattern imposes a regular expression matching constraint on
	// the value of the string. This should be a Google RE2-compliant
	// regular expression (https://github.com/google/re2/wiki/Syntax).
	Pattern *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=pattern,proto3" json:"pattern,omitempty"`
	// format imposes a well-known format on the value of the string.
	// The supported formats are:
	//
	// * `"ip"`: an IPv4 or IPv6 address
	// * `"ipv4"`: an IPv4 address
	// * `"ipv6"`: an IPv6 address
	// * `"mac"`: a MAC address
	// * `"cidr"`: an IPv4 or IPv6 address in CIDR notation (e.g. 10.1.1.1/24, 2001:db8:a0b::1/32)
	// * `"cidrv4"`: an IPv4 address in CIDR notation (e.g. 10.1.1.1/24)
	// * `"cidrv6"`: an IPv6 address in CIDR notation (e.g. 2001:db8:a0b::1/32)
	// * `"url"`: a URL (e.g., http://www.google.com)
	Format *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=format,proto3" json:"format,omitempty"`
	// is_secret specifies whether the string is a secret and its
	// value should be masked. E.g., if this is set to `true` and
	// the value of the string is `"secret-value-1"`, it will be
	// masked as `"**********"`.
	IsSecret *wrapperspb.BoolValue `protobuf:"bytes,8,opt,name=is_secret,json=isSecret,proto3" json:"is_secret,omitempty"`
	// extra_values_allowed allows adding values to the field in
	// addition to what's allowed by static_options/dynamic_options.
	ExtraValuesAllowed *wrapperspb.BoolValue `protobuf:"bytes,9,opt,name=extra_values_allowed,json=extraValuesAllowed,proto3" json:"extra_values_allowed,omitempty"`
}

func (x *StringInputFieldProps) Reset() {
	*x = StringInputFieldProps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringInputFieldProps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringInputFieldProps) ProtoMessage() {}

func (x *StringInputFieldProps) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringInputFieldProps.ProtoReflect.Descriptor instead.
func (*StringInputFieldProps) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{13}
}

func (x *StringInputFieldProps) GetDefaultValue() *wrapperspb.StringValue {
	if x != nil {
		return x.DefaultValue
	}
	return nil
}

func (x *StringInputFieldProps) GetStaticOptions() *fmp.RepeatedString {
	if x != nil {
		return x.StaticOptions
	}
	return nil
}

func (x *StringInputFieldProps) GetDynamicOptions() *fmp.RepeatedString {
	if x != nil {
		return x.DynamicOptions
	}
	return nil
}

func (x *StringInputFieldProps) GetLength() *wrapperspb.StringValue {
	if x != nil {
		return x.Length
	}
	return nil
}

func (x *StringInputFieldProps) GetPattern() *wrapperspb.StringValue {
	if x != nil {
		return x.Pattern
	}
	return nil
}

func (x *StringInputFieldProps) GetFormat() *wrapperspb.StringValue {
	if x != nil {
		return x.Format
	}
	return nil
}

func (x *StringInputFieldProps) GetIsSecret() *wrapperspb.BoolValue {
	if x != nil {
		return x.IsSecret
	}
	return nil
}

func (x *StringInputFieldProps) GetExtraValuesAllowed() *wrapperspb.BoolValue {
	if x != nil {
		return x.ExtraValuesAllowed
	}
	return nil
}

// GroupInputFieldProps defines the set of properties for a single
// group field in a studio input schema.
type GroupInputFieldProps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// members (required) identifies the member fields of the group
	// as defined in the schema.
	Members *fmp.RepeatedString `protobuf:"bytes,1,opt,name=members,proto3" json:"members,omitempty"`
}

func (x *GroupInputFieldProps) Reset() {
	*x = GroupInputFieldProps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupInputFieldProps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupInputFieldProps) ProtoMessage() {}

func (x *GroupInputFieldProps) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupInputFieldProps.ProtoReflect.Descriptor instead.
func (*GroupInputFieldProps) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{14}
}

func (x *GroupInputFieldProps) GetMembers() *fmp.RepeatedString {
	if x != nil {
		return x.Members
	}
	return nil
}

// CollectionInputFieldProps defines the set of properties for a single
// collection field in a studio input schema.
type CollectionInputFieldProps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// base_field_id (required) identifies the field in the schema
	// that should be used as the type for each element in the
	// collection.
	BaseFieldId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=base_field_id,json=baseFieldId,proto3" json:"base_field_id,omitempty"`
	// key can be used when `base_field_id` references a group field,
	// and it identifies the field in that group that should be used
	// as the key for each element in the collection. This is used
	// for display purposes only.
	Key *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *CollectionInputFieldProps) Reset() {
	*x = CollectionInputFieldProps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionInputFieldProps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionInputFieldProps) ProtoMessage() {}

func (x *CollectionInputFieldProps) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionInputFieldProps.ProtoReflect.Descriptor instead.
func (*CollectionInputFieldProps) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{15}
}

func (x *CollectionInputFieldProps) GetBaseFieldId() *wrapperspb.StringValue {
	if x != nil {
		return x.BaseFieldId
	}
	return nil
}

func (x *CollectionInputFieldProps) GetKey() *wrapperspb.StringValue {
	if x != nil {
		return x.Key
	}
	return nil
}

// ResolverInputFieldProps defines the set of properties for a single
// resolver field in a studio input schema.
type ResolverInputFieldProps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// base_field_id (required) identifies the field in the schema
	// to which the resolver query maps.
	BaseFieldId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=base_field_id,json=baseFieldId,proto3" json:"base_field_id,omitempty"`
	// display_mode (required) is the display mode of the resolver.
	DisplayMode ResolverFieldDisplayMode `protobuf:"varint,2,opt,name=display_mode,json=displayMode,proto3,enum=arista.studio.v1.ResolverFieldDisplayMode" json:"display_mode,omitempty"`
	// input_mode (required) is the input mode of the resolver.
	InputMode ResolverFieldInputMode `protobuf:"varint,3,opt,name=input_mode,json=inputMode,proto3,enum=arista.studio.v1.ResolverFieldInputMode" json:"input_mode,omitempty"`
	// input_tag_label can be used when `input_mode` is one of
	// `RESOLVER_FIELD_INPUT_MODE_SINGLE_*_TAG` and it specifies
	// the tag label must be used in the resolver query.
	InputTagLabel *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=input_tag_label,json=inputTagLabel,proto3" json:"input_tag_label,omitempty"`
	// tag_filter_query limits the set of elements that the
	// resolver query can return. E.g., `"device:D1,D2"` will
	// constrain results to the devices D1 and D2.
	TagFilterQuery *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=tag_filter_query,json=tagFilterQuery,proto3" json:"tag_filter_query,omitempty"`
}

func (x *ResolverInputFieldProps) Reset() {
	*x = ResolverInputFieldProps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolverInputFieldProps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolverInputFieldProps) ProtoMessage() {}

func (x *ResolverInputFieldProps) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolverInputFieldProps.ProtoReflect.Descriptor instead.
func (*ResolverInputFieldProps) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{16}
}

func (x *ResolverInputFieldProps) GetBaseFieldId() *wrapperspb.StringValue {
	if x != nil {
		return x.BaseFieldId
	}
	return nil
}

func (x *ResolverInputFieldProps) GetDisplayMode() ResolverFieldDisplayMode {
	if x != nil {
		return x.DisplayMode
	}
	return ResolverFieldDisplayMode_RESOLVER_FIELD_DISPLAY_MODE_UNSPECIFIED
}

func (x *ResolverInputFieldProps) GetInputMode() ResolverFieldInputMode {
	if x != nil {
		return x.InputMode
	}
	return ResolverFieldInputMode_RESOLVER_FIELD_INPUT_MODE_UNSPECIFIED
}

func (x *ResolverInputFieldProps) GetInputTagLabel() *wrapperspb.StringValue {
	if x != nil {
		return x.InputTagLabel
	}
	return nil
}

func (x *ResolverInputFieldProps) GetTagFilterQuery() *wrapperspb.StringValue {
	if x != nil {
		return x.TagFilterQuery
	}
	return nil
}

// TagMatcherInputFieldProps defines the set of properties for a single
// selector field in a studio input schema.
type TagMatcherInputFieldProps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tag_matcher_mode (required) is the tag mode of the matcher.
	TagMatcherMode TagMatcherFieldMode `protobuf:"varint,1,opt,name=tag_matcher_mode,json=tagMatcherMode,proto3,enum=arista.studio.v1.TagMatcherFieldMode" json:"tag_matcher_mode,omitempty"`
	// tag_matcher_label can be used when `tag_matcher_mode` is one of
	// `TAG_MATCHER_FIELD_MODE_SINGLE_*_TAG` and it specifies
	// the tag label which must be used in the match query.
	TagMatcherLabel *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=tag_matcher_label,json=tagMatcherLabel,proto3" json:"tag_matcher_label,omitempty"`
	// tag_filter_query limits the set of devices that the
	// match query can return. E.g., `"device:D1,D2"` will
	// constrain results to the devices D1 and D2.
	TagFilterQuery *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=tag_filter_query,json=tagFilterQuery,proto3" json:"tag_filter_query,omitempty"`
	// resolver_filtering_allowed indicates whether results of the
	// match query be filtered based on what any parent resolvers
	// allow. This is `true` by default.
	ResolverFilteringAllowed *wrapperspb.BoolValue `protobuf:"bytes,4,opt,name=resolver_filtering_allowed,json=resolverFilteringAllowed,proto3" json:"resolver_filtering_allowed,omitempty"`
}

func (x *TagMatcherInputFieldProps) Reset() {
	*x = TagMatcherInputFieldProps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagMatcherInputFieldProps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagMatcherInputFieldProps) ProtoMessage() {}

func (x *TagMatcherInputFieldProps) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagMatcherInputFieldProps.ProtoReflect.Descriptor instead.
func (*TagMatcherInputFieldProps) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{17}
}

func (x *TagMatcherInputFieldProps) GetTagMatcherMode() TagMatcherFieldMode {
	if x != nil {
		return x.TagMatcherMode
	}
	return TagMatcherFieldMode_TAG_MATCHER_FIELD_MODE_UNSPECIFIED
}

func (x *TagMatcherInputFieldProps) GetTagMatcherLabel() *wrapperspb.StringValue {
	if x != nil {
		return x.TagMatcherLabel
	}
	return nil
}

func (x *TagMatcherInputFieldProps) GetTagFilterQuery() *wrapperspb.StringValue {
	if x != nil {
		return x.TagFilterQuery
	}
	return nil
}

func (x *TagMatcherInputFieldProps) GetResolverFilteringAllowed() *wrapperspb.BoolValue {
	if x != nil {
		return x.ResolverFilteringAllowed
	}
	return nil
}

// InputField defines the set of properties for a single field in a
// studio input schema.
type InputField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id (required) uniquely identifies the field within the schema.
	Id *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// type (required) specifies the type for the field.
	Type InputFieldType `protobuf:"varint,2,opt,name=type,proto3,enum=arista.studio.v1.InputFieldType" json:"type,omitempty"`
	// name (required) is the variable name by which the field can be
	// referenced in the template for the studio.
	Name *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// label (required) is the label of the field as displayed on the UI.
	Label *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty"`
	// description is a short description of the field.
	Description *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// required indicates whether the field always requires a value. This
	// is `false` by default.
	Required *wrapperspb.BoolValue `protobuf:"bytes,6,opt,name=required,proto3" json:"required,omitempty"`
	// boolean_props defines properties for the field if it is of type
	// `INPUT_FIELD_TYPE_BOOLEAN`.
	BooleanProps *BooleanInputFieldProps `protobuf:"bytes,7,opt,name=boolean_props,json=booleanProps,proto3" json:"boolean_props,omitempty"`
	// integer_props defines properties for the field if it is of type
	// `INPUT_FIELD_TYPE_INTEGER`.
	IntegerProps *IntegerInputFieldProps `protobuf:"bytes,8,opt,name=integer_props,json=integerProps,proto3" json:"integer_props,omitempty"`
	// float_props defines properties for the field if it is of type
	// `INPUT_FIELD_TYPE_FLOAT`.
	FloatProps *FloatInputFieldProps `protobuf:"bytes,9,opt,name=float_props,json=floatProps,proto3" json:"float_props,omitempty"`
	// string_props defines properties for the field if it is of type
	// `INPUT_FIELD_TYPE_STRING`.
	StringProps *StringInputFieldProps `protobuf:"bytes,10,opt,name=string_props,json=stringProps,proto3" json:"string_props,omitempty"`
	// group_props defines properties for the field if it is of type
	// `INPUT_FIELD_TYPE_GROUP`.
	GroupProps *GroupInputFieldProps `protobuf:"bytes,11,opt,name=group_props,json=groupProps,proto3" json:"group_props,omitempty"`
	// collection_props defines properties for the field if it is of type
	// `INPUT_FIELD_TYPE_COLLECTION`.
	CollectionProps *CollectionInputFieldProps `protobuf:"bytes,12,opt,name=collection_props,json=collectionProps,proto3" json:"collection_props,omitempty"`
	// resolver_props defines properties for the field if it is of type
	// `INPUT_FIELD_TYPE_RESOLVER`.
	ResolverProps *ResolverInputFieldProps `protobuf:"bytes,13,opt,name=resolver_props,json=resolverProps,proto3" json:"resolver_props,omitempty"`
	// auto_fill_action_id identifies the autofill action that can be
	// used to automatically populate the value of this field on the
	// UI.
	AutoFillActionId *wrapperspb.StringValue `protobuf:"bytes,14,opt,name=auto_fill_action_id,json=autoFillActionId,proto3" json:"auto_fill_action_id,omitempty"`
	// tag_matcher_props defines properties for the field if it is of type
	// `INPUT_FIELD_TYPE_TAG_MATCHER`.
	TagMatcherProps *TagMatcherInputFieldProps `protobuf:"bytes,15,opt,name=tag_matcher_props,json=tagMatcherProps,proto3" json:"tag_matcher_props,omitempty"`
}

func (x *InputField) Reset() {
	*x = InputField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputField) ProtoMessage() {}

func (x *InputField) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputField.ProtoReflect.Descriptor instead.
func (*InputField) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{18}
}

func (x *InputField) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *InputField) GetType() InputFieldType {
	if x != nil {
		return x.Type
	}
	return InputFieldType_INPUT_FIELD_TYPE_UNSPECIFIED
}

func (x *InputField) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *InputField) GetLabel() *wrapperspb.StringValue {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *InputField) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *InputField) GetRequired() *wrapperspb.BoolValue {
	if x != nil {
		return x.Required
	}
	return nil
}

func (x *InputField) GetBooleanProps() *BooleanInputFieldProps {
	if x != nil {
		return x.BooleanProps
	}
	return nil
}

func (x *InputField) GetIntegerProps() *IntegerInputFieldProps {
	if x != nil {
		return x.IntegerProps
	}
	return nil
}

func (x *InputField) GetFloatProps() *FloatInputFieldProps {
	if x != nil {
		return x.FloatProps
	}
	return nil
}

func (x *InputField) GetStringProps() *StringInputFieldProps {
	if x != nil {
		return x.StringProps
	}
	return nil
}

func (x *InputField) GetGroupProps() *GroupInputFieldProps {
	if x != nil {
		return x.GroupProps
	}
	return nil
}

func (x *InputField) GetCollectionProps() *CollectionInputFieldProps {
	if x != nil {
		return x.CollectionProps
	}
	return nil
}

func (x *InputField) GetResolverProps() *ResolverInputFieldProps {
	if x != nil {
		return x.ResolverProps
	}
	return nil
}

func (x *InputField) GetAutoFillActionId() *wrapperspb.StringValue {
	if x != nil {
		return x.AutoFillActionId
	}
	return nil
}

func (x *InputField) GetTagMatcherProps() *TagMatcherInputFieldProps {
	if x != nil {
		return x.TagMatcherProps
	}
	return nil
}

// InputFields is a collection of `InputField`.
type InputFields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values (required) is a map from input field ID to `InputField`.
	Values map[string]*InputField `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *InputFields) Reset() {
	*x = InputFields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputFields) ProtoMessage() {}

func (x *InputFields) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputFields.ProtoReflect.Descriptor instead.
func (*InputFields) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{19}
}

func (x *InputFields) GetValues() map[string]*InputField {
	if x != nil {
		return x.Values
	}
	return nil
}

// Layout specifies the display properties for input fields. This
// is intended for UI usage only.
type Layout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value is a JSON object containing the layout config.
	Value *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Layout) Reset() {
	*x = Layout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Layout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Layout) ProtoMessage() {}

func (x *Layout) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Layout.ProtoReflect.Descriptor instead.
func (*Layout) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{20}
}

func (x *Layout) GetValue() *wrapperspb.StringValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// InputSchema defines an input schema for a studio, which determines
// the values that can be input into the studio.
type InputSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// fields (required) are the set of fields that make up the schema.
	Fields *InputFields `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
	// layout (UI only) defines the display properties for `fields`.
	Layout *Layout `protobuf:"bytes,2,opt,name=layout,proto3" json:"layout,omitempty"`
}

func (x *InputSchema) Reset() {
	*x = InputSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputSchema) ProtoMessage() {}

func (x *InputSchema) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputSchema.ProtoReflect.Descriptor instead.
func (*InputSchema) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{21}
}

func (x *InputSchema) GetFields() *InputFields {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *InputSchema) GetLayout() *Layout {
	if x != nil {
		return x.Layout
	}
	return nil
}

// SecretInput can be used to retrieve the unmasked value of
// a secret in a studio.
type SecretInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key identifies the secret in the studio inputs.
	Key *InputsKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// plain_text is the unmasked value of the secret.
	PlainText *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=plain_text,json=plainText,proto3" json:"plain_text,omitempty"`
}

func (x *SecretInput) Reset() {
	*x = SecretInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretInput) ProtoMessage() {}

func (x *SecretInput) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretInput.ProtoReflect.Descriptor instead.
func (*SecretInput) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{22}
}

func (x *SecretInput) GetKey() *InputsKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *SecretInput) GetPlainText() *wrapperspb.StringValue {
	if x != nil {
		return x.PlainText
	}
	return nil
}

// DeviceInfo contains device properties.
type DeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// device_id identifies the device uniquely.
	DeviceId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// model_name indicates the model of the device.
	ModelName *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
	// mac_address indicates the MAC address of the device.
	MacAddress *fmp.MACAddress `protobuf:"bytes,3,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	// hostname indicates the hostname of the device.
	Hostname *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// interfaces_infos contains a list of the device's interfaces.
	InterfaceInfos *InterfaceInfos `protobuf:"bytes,5,opt,name=interface_infos,json=interfaceInfos,proto3" json:"interface_infos,omitempty"`
}

func (x *DeviceInfo) Reset() {
	*x = DeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfo) ProtoMessage() {}

func (x *DeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfo.ProtoReflect.Descriptor instead.
func (*DeviceInfo) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{23}
}

func (x *DeviceInfo) GetDeviceId() *wrapperspb.StringValue {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

func (x *DeviceInfo) GetModelName() *wrapperspb.StringValue {
	if x != nil {
		return x.ModelName
	}
	return nil
}

func (x *DeviceInfo) GetMacAddress() *fmp.MACAddress {
	if x != nil {
		return x.MacAddress
	}
	return nil
}

func (x *DeviceInfo) GetHostname() *wrapperspb.StringValue {
	if x != nil {
		return x.Hostname
	}
	return nil
}

func (x *DeviceInfo) GetInterfaceInfos() *InterfaceInfos {
	if x != nil {
		return x.InterfaceInfos
	}
	return nil
}

// InterfaceInfo contains interface properties.
type InterfaceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of an interface.
	Name *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// neighbor_device_id indicates the device ID of the neighbor to which
	// this interface is connected.
	NeighborDeviceId *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=neighbor_device_id,json=neighborDeviceId,proto3" json:"neighbor_device_id,omitempty"`
	// neighbor_device_name indicates the interface on the neighbor to which
	// this interface is connected.
	NeighborInterfaceName *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=neighbor_interface_name,json=neighborInterfaceName,proto3" json:"neighbor_interface_name,omitempty"`
	// topology_operation indicates the type of operation to the interface.
	TopologyOperation TopologyOperation `protobuf:"varint,4,opt,name=topology_operation,json=topologyOperation,proto3,enum=arista.studio.v1.TopologyOperation" json:"topology_operation,omitempty"`
}

func (x *InterfaceInfo) Reset() {
	*x = InterfaceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceInfo) ProtoMessage() {}

func (x *InterfaceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceInfo.ProtoReflect.Descriptor instead.
func (*InterfaceInfo) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{24}
}

func (x *InterfaceInfo) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *InterfaceInfo) GetNeighborDeviceId() *wrapperspb.StringValue {
	if x != nil {
		return x.NeighborDeviceId
	}
	return nil
}

func (x *InterfaceInfo) GetNeighborInterfaceName() *wrapperspb.StringValue {
	if x != nil {
		return x.NeighborInterfaceName
	}
	return nil
}

func (x *InterfaceInfo) GetTopologyOperation() TopologyOperation {
	if x != nil {
		return x.TopologyOperation
	}
	return TopologyOperation_TOPOLOGY_OPERATION_UNSPECIFIED
}

// InterfaceInfos is a list of InterfaceInfo.
type InterfaceInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values is a list of InterfaceInfo.
	Values []*InterfaceInfo `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *InterfaceInfos) Reset() {
	*x = InterfaceInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceInfos) ProtoMessage() {}

func (x *InterfaceInfos) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceInfos.ProtoReflect.Descriptor instead.
func (*InterfaceInfos) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{25}
}

func (x *InterfaceInfos) GetValues() []*InterfaceInfo {
	if x != nil {
		return x.Values
	}
	return nil
}

// TopologyInputKey is the set of inputs that uniquely identify
// the device for a workspace.
type TopologyInputKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// workspace_id identifies the workspace uniquely.
	WorkspaceId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	// device_id identifies the device uniquely.
	DeviceId *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (x *TopologyInputKey) Reset() {
	*x = TopologyInputKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyInputKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyInputKey) ProtoMessage() {}

func (x *TopologyInputKey) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyInputKey.ProtoReflect.Descriptor instead.
func (*TopologyInputKey) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{26}
}

func (x *TopologyInputKey) GetWorkspaceId() *wrapperspb.StringValue {
	if x != nil {
		return x.WorkspaceId
	}
	return nil
}

func (x *TopologyInputKey) GetDeviceId() *wrapperspb.StringValue {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

// TopologyInputConfig is the desired topology input for a device.
type TopologyInputConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key uniquely identifies the device ID for a given workspace.
	Key *TopologyInputKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// device_info contains device properties.
	DeviceInfo *DeviceInfo `protobuf:"bytes,2,opt,name=device_info,json=deviceInfo,proto3" json:"device_info,omitempty"`
}

func (x *TopologyInputConfig) Reset() {
	*x = TopologyInputConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyInputConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyInputConfig) ProtoMessage() {}

func (x *TopologyInputConfig) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyInputConfig.ProtoReflect.Descriptor instead.
func (*TopologyInputConfig) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{27}
}

func (x *TopologyInputConfig) GetKey() *TopologyInputKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TopologyInputConfig) GetDeviceInfo() *DeviceInfo {
	if x != nil {
		return x.DeviceInfo
	}
	return nil
}

// TopologyInput is the state of a mainline and accepted topology inputs.
type TopologyInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key uniquely identifies the device in a given workspace.
	Key *TopologyInputKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// device_info contains device properties.
	DeviceInfo *DeviceInfo `protobuf:"bytes,2,opt,name=device_info,json=deviceInfo,proto3" json:"device_info,omitempty"`
}

func (x *TopologyInput) Reset() {
	*x = TopologyInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyInput) ProtoMessage() {}

func (x *TopologyInput) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyInput.ProtoReflect.Descriptor instead.
func (*TopologyInput) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{28}
}

func (x *TopologyInput) GetKey() *TopologyInputKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TopologyInput) GetDeviceInfo() *DeviceInfo {
	if x != nil {
		return x.DeviceInfo
	}
	return nil
}

// TopologyUpdateKey uniquely identifies a workspace topology update.
type TopologyUpdateKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// workspace_id identifies the workspace uniquely.
	WorkspaceId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	// update_id identifies the update uniquely.
	UpdateId *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=update_id,json=updateId,proto3" json:"update_id,omitempty"`
}

func (x *TopologyUpdateKey) Reset() {
	*x = TopologyUpdateKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyUpdateKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyUpdateKey) ProtoMessage() {}

func (x *TopologyUpdateKey) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyUpdateKey.ProtoReflect.Descriptor instead.
func (*TopologyUpdateKey) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{29}
}

func (x *TopologyUpdateKey) GetWorkspaceId() *wrapperspb.StringValue {
	if x != nil {
		return x.WorkspaceId
	}
	return nil
}

func (x *TopologyUpdateKey) GetUpdateId() *wrapperspb.StringValue {
	if x != nil {
		return x.UpdateId
	}
	return nil
}

// TopologyUpdateConfig contains the acceptance status of a TopologyUpdate.
type TopologyUpdateConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key uniquely identifies the update.
	Key *TopologyUpdateKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// status indicates the status of the topology update.
	Status TopologyUpdateStatus `protobuf:"varint,2,opt,name=status,proto3,enum=arista.studio.v1.TopologyUpdateStatus" json:"status,omitempty"`
}

func (x *TopologyUpdateConfig) Reset() {
	*x = TopologyUpdateConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyUpdateConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyUpdateConfig) ProtoMessage() {}

func (x *TopologyUpdateConfig) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyUpdateConfig.ProtoReflect.Descriptor instead.
func (*TopologyUpdateConfig) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{30}
}

func (x *TopologyUpdateConfig) GetKey() *TopologyUpdateKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TopologyUpdateConfig) GetStatus() TopologyUpdateStatus {
	if x != nil {
		return x.Status
	}
	return TopologyUpdateStatus_TOPOLOGY_UPDATE_STATUS_UNSPECIFIED
}

// TopologyUpdate represents an update on to the workspace.
type TopologyUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key uniquely identifies the update.
	Key *TopologyUpdateKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// topology_element indicates the type of a network element.
	TopologyElement TopologyElement `protobuf:"varint,2,opt,name=topology_element,json=topologyElement,proto3,enum=arista.studio.v1.TopologyElement" json:"topology_element,omitempty"`
	// topology_operation indicates the type of operation on the topology update.
	TopologyOperation TopologyOperation `protobuf:"varint,3,opt,name=topology_operation,json=topologyOperation,proto3,enum=arista.studio.v1.TopologyOperation" json:"topology_operation,omitempty"`
	// status indicates the status of the topology update.
	Status TopologyUpdateStatus `protobuf:"varint,4,opt,name=status,proto3,enum=arista.studio.v1.TopologyUpdateStatus" json:"status,omitempty"`
	// description describes the topology update in short.
	Description *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *TopologyUpdate) Reset() {
	*x = TopologyUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyUpdate) ProtoMessage() {}

func (x *TopologyUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyUpdate.ProtoReflect.Descriptor instead.
func (*TopologyUpdate) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{31}
}

func (x *TopologyUpdate) GetKey() *TopologyUpdateKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TopologyUpdate) GetTopologyElement() TopologyElement {
	if x != nil {
		return x.TopologyElement
	}
	return TopologyElement_TOPOLOGY_ELEMENT_UNSPECIFIED
}

func (x *TopologyUpdate) GetTopologyOperation() TopologyOperation {
	if x != nil {
		return x.TopologyOperation
	}
	return TopologyOperation_TOPOLOGY_OPERATION_UNSPECIFIED
}

func (x *TopologyUpdate) GetStatus() TopologyUpdateStatus {
	if x != nil {
		return x.Status
	}
	return TopologyUpdateStatus_TOPOLOGY_UPDATE_STATUS_UNSPECIFIED
}

func (x *TopologyUpdate) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

// WorkspaceKey uniquely identifies the workspace.
type WorkspaceKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// workspace_id identifies the workspace uniquely.
	WorkspaceId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *WorkspaceKey) Reset() {
	*x = WorkspaceKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceKey) ProtoMessage() {}

func (x *WorkspaceKey) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceKey.ProtoReflect.Descriptor instead.
func (*WorkspaceKey) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{32}
}

func (x *WorkspaceKey) GetWorkspaceId() *wrapperspb.StringValue {
	if x != nil {
		return x.WorkspaceId
	}
	return nil
}

// TopologyUpdateSyncConfig model represents a point in time all updates
// are to be accepted.
type TopologyUpdateSyncConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key uniquely identifies the workspace.
	Key *WorkspaceKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// sync_time indicates the desired synchronization time with the live topology.
	// If the sync_time indicated in the config takes effect without error,
	// it will appear in the state model, and then all updates that occurred up to
	// and including the timestamp in the state model will be accepted.
	SyncTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=sync_time,json=syncTime,proto3" json:"sync_time,omitempty"`
}

func (x *TopologyUpdateSyncConfig) Reset() {
	*x = TopologyUpdateSyncConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyUpdateSyncConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyUpdateSyncConfig) ProtoMessage() {}

func (x *TopologyUpdateSyncConfig) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyUpdateSyncConfig.ProtoReflect.Descriptor instead.
func (*TopologyUpdateSyncConfig) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{33}
}

func (x *TopologyUpdateSyncConfig) GetKey() *WorkspaceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TopologyUpdateSyncConfig) GetSyncTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SyncTime
	}
	return nil
}

// TopologyUpdateSync model represents the state of topology updates,
// which consists of the time up to which updates are accepted.
type TopologyUpdateSync struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key uniquely identifies the workspace.
	Key *WorkspaceKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// sync_time indicates the time up to which the live topology is synchronized.
	// All updates that happened up to this timestamp will be accepted.
	SyncTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=sync_time,json=syncTime,proto3" json:"sync_time,omitempty"`
}

func (x *TopologyUpdateSync) Reset() {
	*x = TopologyUpdateSync{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyUpdateSync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyUpdateSync) ProtoMessage() {}

func (x *TopologyUpdateSync) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyUpdateSync.ProtoReflect.Descriptor instead.
func (*TopologyUpdateSync) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{34}
}

func (x *TopologyUpdateSync) GetKey() *WorkspaceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TopologyUpdateSync) GetSyncTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SyncTime
	}
	return nil
}

// AutofillActionKey identifies an autofill action.
type AutofillActionKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// studio_id uniquely identifies the studio in the workspace indicated
	// by `workspace_id`.
	StudioId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=studio_id,json=studioId,proto3" json:"studio_id,omitempty"`
	// workspace_id uniquely identifies the workspace in which the studio resides.
	WorkspaceId *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	// input_field_id uniquely identifies the input field within the schema associated
	// with the action indicated by `action_id`.
	InputFieldId *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=input_field_id,json=inputFieldId,proto3" json:"input_field_id,omitempty"`
}

func (x *AutofillActionKey) Reset() {
	*x = AutofillActionKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillActionKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillActionKey) ProtoMessage() {}

func (x *AutofillActionKey) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillActionKey.ProtoReflect.Descriptor instead.
func (*AutofillActionKey) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{35}
}

func (x *AutofillActionKey) GetStudioId() *wrapperspb.StringValue {
	if x != nil {
		return x.StudioId
	}
	return nil
}

func (x *AutofillActionKey) GetWorkspaceId() *wrapperspb.StringValue {
	if x != nil {
		return x.WorkspaceId
	}
	return nil
}

func (x *AutofillActionKey) GetInputFieldId() *wrapperspb.StringValue {
	if x != nil {
		return x.InputFieldId
	}
	return nil
}

// AutofillActionConfig contains configuration information for an autofill action.
type AutofillActionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key uniquely identifies the action-to-studio association.
	Key *AutofillActionKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// remove indicates whether to remove (`true`) or add (`false`, unset)
	// the autofill action configuration identified by the key if the encompassing
	// workspace merges. Other data fields are not allowed if this field is set to true.
	Remove *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=remove,proto3" json:"remove,omitempty"`
	// action_id uniquely identifies the autofill action associated with the input field.
	ActionId *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
	// description is an optional field to describe the autofill action that will be
	// displayed in a tooltip in the UI when the user hovers over the button to run
	// the autofill action.
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// argument_providers is an optional field that specifies how dynamic arguments are
	// to be provided to the autofill action when executed. If an argument is omitted
	// from the provider map, it will not be defined in the arguments passed to the scripts.
	// If the entire field is omitted, no additional argument values will be passed to the
	// script beyond any statically defined arguments and the system-provided arguments
	// which are always set in an autofill action execution context (namely InputPath,
	// StudioId, and WorkspaceId).
	ArgumentProviders *AutofillArgumentProviders `protobuf:"bytes,5,opt,name=argument_providers,json=argumentProviders,proto3" json:"argument_providers,omitempty"`
}

func (x *AutofillActionConfig) Reset() {
	*x = AutofillActionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillActionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillActionConfig) ProtoMessage() {}

func (x *AutofillActionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillActionConfig.ProtoReflect.Descriptor instead.
func (*AutofillActionConfig) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{36}
}

func (x *AutofillActionConfig) GetKey() *AutofillActionKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AutofillActionConfig) GetRemove() *wrapperspb.BoolValue {
	if x != nil {
		return x.Remove
	}
	return nil
}

func (x *AutofillActionConfig) GetActionId() *wrapperspb.StringValue {
	if x != nil {
		return x.ActionId
	}
	return nil
}

func (x *AutofillActionConfig) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *AutofillActionConfig) GetArgumentProviders() *AutofillArgumentProviders {
	if x != nil {
		return x.ArgumentProviders
	}
	return nil
}

// AutofillAction can be used to retrieve additional metadata about an autofill action.
type AutofillAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key uniquely identifies the action-to-studio association.
	Key *AutofillActionKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// created_at is the time at which the inputs were first set.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// created_by is the name of the user that first set the inputs.
	CreatedBy *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// last_modified_at is the time at which the inputs were last modified.
	LastModifiedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=last_modified_at,json=lastModifiedAt,proto3" json:"last_modified_at,omitempty"`
	// last_modified_by is the name of the user that last modified the inputs.
	LastModifiedBy *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=last_modified_by,json=lastModifiedBy,proto3" json:"last_modified_by,omitempty"`
	// action_id uniquely identifies the autofill action associated with the input field.
	ActionId *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
	// description is an optional field to describe the autofill action that will be
	// displayed in a tooltip in the UI when the user hovers over the button to run
	// the autofill action.
	Description *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	// argument_providers is an optional field that specifies how dynamic arguments are
	// to be provided to the autofill action when executed. If an argument is omitted
	// from the provider map, it will not be defined in the arguments passed to the scripts.
	// If the entire field is omitted, no additional argument values will be passed to the
	// script beyond any statically defined arguments and the system-provided arguments
	// which are always set in an autofill action execution context (namely InputPath,
	// StudioID, and WorkspaceID).
	ArgumentProviders *AutofillArgumentProviders `protobuf:"bytes,8,opt,name=argument_providers,json=argumentProviders,proto3" json:"argument_providers,omitempty"`
}

func (x *AutofillAction) Reset() {
	*x = AutofillAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillAction) ProtoMessage() {}

func (x *AutofillAction) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillAction.ProtoReflect.Descriptor instead.
func (*AutofillAction) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{37}
}

func (x *AutofillAction) GetKey() *AutofillActionKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AutofillAction) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AutofillAction) GetCreatedBy() *wrapperspb.StringValue {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *AutofillAction) GetLastModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastModifiedAt
	}
	return nil
}

func (x *AutofillAction) GetLastModifiedBy() *wrapperspb.StringValue {
	if x != nil {
		return x.LastModifiedBy
	}
	return nil
}

func (x *AutofillAction) GetActionId() *wrapperspb.StringValue {
	if x != nil {
		return x.ActionId
	}
	return nil
}

func (x *AutofillAction) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *AutofillAction) GetArgumentProviders() *AutofillArgumentProviders {
	if x != nil {
		return x.ArgumentProviders
	}
	return nil
}

// AutofillArgumentProviders is a map of dynamic argument name to argument provider information.
type AutofillArgumentProviders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values map[string]*AutofillArgumentProvider `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AutofillArgumentProviders) Reset() {
	*x = AutofillArgumentProviders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillArgumentProviders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillArgumentProviders) ProtoMessage() {}

func (x *AutofillArgumentProviders) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillArgumentProviders.ProtoReflect.Descriptor instead.
func (*AutofillArgumentProviders) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{38}
}

func (x *AutofillArgumentProviders) GetValues() map[string]*AutofillArgumentProvider {
	if x != nil {
		return x.Values
	}
	return nil
}

// AutofillArgumentProvider describes a particular dynamic argument's type
// and value (if applicable).
type AutofillArgumentProvider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type is the type of argument provider, describing how it is to be
	// handled when the associated action is called.
	Type AutofillProviderType `protobuf:"varint,1,opt,name=type,proto3,enum=arista.studio.v1.AutofillProviderType" json:"type,omitempty"`
	// value is the value of the argument, if provided.
	// When the provider type is PROVIDER_TYPE_USER_SPECIFIED, the field may be nil. If non-nil,
	// the field contains a default value for the user input.
	// When the provider type is PROVIDER_TYPE_PREDEFINED, the field contains the predefined
	// value.
	// When the provider type is PROVIDER_TYPE_LINKED, the field contains the linked input
	// field's ID.
	Value *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AutofillArgumentProvider) Reset() {
	*x = AutofillArgumentProvider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_studio_v1_studio_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillArgumentProvider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillArgumentProvider) ProtoMessage() {}

func (x *AutofillArgumentProvider) ProtoReflect() protoreflect.Message {
	mi := &file_arista_studio_v1_studio_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillArgumentProvider.ProtoReflect.Descriptor instead.
func (*AutofillArgumentProvider) Descriptor() ([]byte, []int) {
	return file_arista_studio_v1_studio_proto_rawDescGZIP(), []int{39}
}

func (x *AutofillArgumentProvider) GetType() AutofillProviderType {
	if x != nil {
		return x.Type
	}
	return AutofillProviderType_AUTOFILL_PROVIDER_TYPE_UNSPECIFIED
}

func (x *AutofillArgumentProvider) GetValue() *wrapperspb.StringValue {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_arista_studio_v1_studio_proto protoreflect.FileDescriptor

var file_arista_studio_v1_studio_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x10, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x1a, 0x14, 0x66, 0x6d, 0x70, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x66, 0x6d, 0x70, 0x2f, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x66, 0x6d, 0x70,
	0x2f, 0x79, 0x61, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8d, 0x01, 0x0a,
	0x09, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x4b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x09, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x3a, 0x04, 0x80, 0x8e, 0x19, 0x01, 0x22, 0xf4, 0x02, 0x0a,
	0x0c, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2d, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x06,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x12, 0x3f, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x36, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x0b,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x3a, 0x06, 0xfa, 0x8d, 0x19,
	0x02, 0x72, 0x77, 0x22, 0x81, 0x02, 0x0a, 0x0d, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x4b, 0x65, 0x79, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x3a,
	0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72, 0x6f, 0x22, 0xc6, 0x04, 0x0a, 0x06, 0x53, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x44, 0x0a, 0x10, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x46, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x12, 0x3f, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x12, 0x40, 0x0a, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72, 0x6f, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x0b,
	0x22, 0xb3, 0x01, 0x0a, 0x12, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x4b, 0x65,
	0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x3a, 0x06,
	0xfa, 0x8d, 0x19, 0x02, 0x72, 0x77, 0x22, 0xff, 0x02, 0x0a, 0x0c, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x4b, 0x65,
	0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x44,
	0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x46, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x6c, 0x61,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x12, 0x32, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72, 0x6f, 0x22, 0xb6, 0x01, 0x0a, 0x09, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x49,
	0x64, 0x12, 0x3f, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x3a, 0x04, 0x80, 0x8e, 0x19,
	0x01, 0x22, 0xaf, 0x01, 0x0a, 0x0c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x32, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x3a, 0x06, 0xfa, 0x8d, 0x19,
	0x02, 0x72, 0x77, 0x22, 0xfb, 0x02, 0x0a, 0x06, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x2d,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x44, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6c, 0x61, 0x73,
	0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x46, 0x0a, 0x10, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x42, 0x79, 0x12, 0x34, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72,
	0x6f, 0x22, 0x70, 0x0a, 0x08, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x30, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x22, 0x59, 0x0a, 0x16, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x3f, 0x0a,
	0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd5,
	0x02, 0x0a, 0x16, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x0e, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x0f, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4c, 0x0a, 0x14, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x12, 0x65, 0x78, 0x74, 0x72, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x22, 0x9f, 0x02, 0x0a, 0x14, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12,
	0x40, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x39, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x6d, 0x70, 0x2e,
	0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x52, 0x0d, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x0f,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x52, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4c, 0x0a, 0x14, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x65, 0x78, 0x74, 0x72, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x22, 0xff, 0x03, 0x0a, 0x15, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x6f,
	0x70, 0x73, 0x12, 0x41, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x66, 0x6d, 0x70, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x3c, 0x0a, 0x0f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6d, 0x70,
	0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x0e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x34, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x34, 0x0a,
	0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x08, 0x69, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x4c, 0x0a, 0x14,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x65, 0x78, 0x74, 0x72, 0x61, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x22, 0x45, 0x0a, 0x14, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x6f,
	0x70, 0x73, 0x12, 0x2d, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x22, 0x8d, 0x01, 0x0a, 0x19, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12,
	0x40, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x22, 0x81, 0x03, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x40, 0x0a,
	0x0d, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x12,
	0x4d, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x47,
	0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x28, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x61, 0x67, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x46, 0x0a,
	0x10, 0x74, 0x61, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x74, 0x61, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0xd8, 0x02, 0x0a, 0x19, 0x54, 0x61, 0x67, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72,
	0x6f, 0x70, 0x73, 0x12, 0x4f, 0x0a, 0x10, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x61, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0e, 0x74, 0x61, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x11, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x74,
	0x61, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x46,
	0x0a, 0x10, 0x74, 0x61, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x74, 0x61, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x58, 0x0a, 0x1a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x18, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x22, 0x9a, 0x08, 0x0a, 0x0a, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x08, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x12, 0x4d, 0x0a, 0x0d, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x6f,
	0x70, 0x73, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x73,
	0x12, 0x4d, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x70,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x70,
	0x73, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12,
	0x47, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x52, 0x0a, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x4a, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x6f, 0x70, 0x73, 0x12, 0x47, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x70,
	0x73, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x56, 0x0a,
	0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x70,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50,
	0x72, 0x6f, 0x70, 0x73, 0x52, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x50, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x72, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x4b, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x6f, 0x5f,
	0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x11, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x52, 0x0f, 0x74, 0x61,
	0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x22, 0xa9, 0x01,
	0x0a, 0x0b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x41, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x1a, 0x57, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3c, 0x0a, 0x06, 0x4c, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x76, 0x0a, 0x0b, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x35, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x30, 0x0a,
	0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x22,
	0x81, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3b,
	0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x3a, 0x06, 0xfa, 0x8d, 0x19,
	0x02, 0x72, 0x6f, 0x22, 0xbb, 0x02, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x39, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3b, 0x0a,
	0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x0b, 0x6d, 0x61,
	0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x4d, 0x41, 0x43, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x38, 0x0a, 0x08,
	0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x22, 0xb7, 0x02, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x12, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x10, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x54, 0x0a, 0x17, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x15, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x12, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x49, 0x0a, 0x0e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x37, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x94, 0x01, 0x0a, 0x10, 0x54, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x0c, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x09,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x3a, 0x04, 0x80, 0x8e, 0x19, 0x01, 0x22, 0x92, 0x01,
	0x0a, 0x13, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x34, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x0b, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02,
	0x72, 0x77, 0x22, 0x8c, 0x01, 0x0a, 0x0d, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x34, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x0b, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72,
	0x6f, 0x22, 0x95, 0x01, 0x0a, 0x11, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x64, 0x3a, 0x04, 0x80, 0x8e, 0x19, 0x01, 0x22, 0x95, 0x01, 0x0a, 0x14, 0x54, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x35, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72,
	0x77, 0x22, 0xf1, 0x02, 0x0a, 0x0e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4c, 0x0a, 0x10, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x12, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x06, 0xfa,
	0x8d, 0x19, 0x02, 0x72, 0x6f, 0x22, 0x55, 0x0a, 0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x3a, 0x04, 0x80, 0x8e, 0x19, 0x01, 0x22, 0x8d, 0x01, 0x0a,
	0x18, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x09, 0x73,
	0x79, 0x6e, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x73, 0x79, 0x6e, 0x63,
	0x54, 0x69, 0x6d, 0x65, 0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72, 0x77, 0x22, 0x87, 0x01, 0x0a,
	0x12, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x79, 0x6e, 0x63, 0x12, 0x30, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x3a, 0x06,
	0xfa, 0x8d, 0x19, 0x02, 0x72, 0x6f, 0x22, 0xd9, 0x01, 0x0a, 0x11, 0x41, 0x75, 0x74, 0x6f, 0x66,
	0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x09,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0e, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x3a, 0x04, 0x80, 0x8e,
	0x19, 0x01, 0x22, 0xe0, 0x02, 0x0a, 0x14, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x35, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f,
	0x66, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x32, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x5a, 0x0a, 0x12, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x52, 0x11, 0x61, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x3a, 0x06, 0xfa,
	0x8d, 0x19, 0x02, 0x72, 0x77, 0x22, 0xac, 0x04, 0x0a, 0x0e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69,
	0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x44, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6c,
	0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x46, 0x0a,
	0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x42, 0x79, 0x12, 0x39, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x5a, 0x0a, 0x12, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x52, 0x11, 0x61, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x3a, 0x06, 0xfa, 0x8d,
	0x19, 0x02, 0x72, 0x6f, 0x22, 0xd3, 0x01, 0x0a, 0x19, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c,
	0x6c, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x4f, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x1a, 0x65, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8a, 0x01, 0x0a, 0x18, 0x41,
	0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2a, 0x74, 0x0a, 0x0c, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x45, 0x4d, 0x50, 0x4c,
	0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41,
	0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x4b, 0x4f, 0x10, 0x01, 0x12, 0x17,
	0x0a, 0x13, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4a, 0x49, 0x4e, 0x4a, 0x41, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x45, 0x4d, 0x50, 0x4c,
	0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x4f, 0x10, 0x03, 0x2a, 0xa5, 0x02,
	0x0a, 0x0e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x10, 0x01,
	0x12, 0x1c, 0x0a, 0x18, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45, 0x52, 0x10, 0x02, 0x12, 0x1a,
	0x0a, 0x16, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e,
	0x50, 0x55, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x50, 0x55, 0x54,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x46, 0x49,
	0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45,
	0x52, 0x10, 0x07, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x45, 0x52, 0x10, 0x08, 0x2a, 0x8b, 0x02, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x29, 0x0a, 0x25, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2f, 0x0a, 0x2b, 0x52,
	0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x49, 0x4e,
	0x50, 0x55, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x41, 0x47, 0x10, 0x01, 0x12, 0x32, 0x0a, 0x2e,
	0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x49,
	0x4e, 0x50, 0x55, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x41, 0x47, 0x10, 0x02,
	0x12, 0x2e, 0x0a, 0x2a, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x55,
	0x4c, 0x54, 0x49, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x41, 0x47, 0x10, 0x03,
	0x12, 0x31, 0x0a, 0x2d, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x55,
	0x4c, 0x54, 0x49, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x41,
	0x47, 0x10, 0x04, 0x2a, 0x94, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x2b, 0x0a, 0x27, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x23, 0x0a,
	0x1f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x4c, 0x4c,
	0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x52, 0x5f, 0x46,
	0x49, 0x45, 0x4c, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x53, 0x50, 0x41, 0x52, 0x53, 0x45, 0x10, 0x02, 0x2a, 0xf9, 0x01, 0x0a, 0x13, 0x54,
	0x61, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x26, 0x0a, 0x22, 0x54, 0x41, 0x47, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x45,
	0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x54, 0x41,
	0x47, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x54, 0x41, 0x47, 0x10, 0x01, 0x12, 0x2f, 0x0a, 0x2b, 0x54, 0x41, 0x47, 0x5f,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x5f, 0x54, 0x41, 0x47, 0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x54, 0x41, 0x47,
	0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x54, 0x41, 0x47, 0x10, 0x03, 0x12, 0x2e, 0x0a, 0x2a, 0x54, 0x41, 0x47, 0x5f, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x5f, 0x54, 0x41, 0x47, 0x10, 0x04, 0x2a, 0x91, 0x01, 0x0a, 0x0f, 0x54, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x4f,
	0x50, 0x4f, 0x4c, 0x4f, 0x47, 0x59, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17,
	0x54, 0x4f, 0x50, 0x4f, 0x4c, 0x4f, 0x47, 0x59, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x4f, 0x50,
	0x4f, 0x4c, 0x4f, 0x47, 0x59, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x4f, 0x50,
	0x4f, 0x4c, 0x4f, 0x47, 0x59, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x2a, 0x96, 0x01, 0x0a, 0x11, 0x54,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x22, 0x0a, 0x1e, 0x54, 0x4f, 0x50, 0x4f, 0x4c, 0x4f, 0x47, 0x59, 0x5f, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x4f, 0x50, 0x4f, 0x4c, 0x4f, 0x47, 0x59,
	0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x44, 0x44, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x4f, 0x50, 0x4f, 0x4c, 0x4f, 0x47, 0x59, 0x5f, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x4f, 0x50, 0x4f, 0x4c, 0x4f, 0x47, 0x59, 0x5f,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45,
	0x44, 0x10, 0x03, 0x2a, 0xa7, 0x01, 0x0a, 0x14, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x22,
	0x54, 0x4f, 0x50, 0x4f, 0x4c, 0x4f, 0x47, 0x59, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x4f, 0x50, 0x4f, 0x4c, 0x4f, 0x47, 0x59,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e,
	0x45, 0x57, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x4f, 0x50, 0x4f, 0x4c, 0x4f, 0x47, 0x59,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41,
	0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x4f, 0x50,
	0x4f, 0x4c, 0x4f, 0x47, 0x59, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x03, 0x2a, 0xb3, 0x01,
	0x0a, 0x14, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x55, 0x54, 0x4f, 0x46, 0x49,
	0x4c, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x29,
	0x0a, 0x25, 0x41, 0x55, 0x54, 0x4f, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49,
	0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x55, 0x54,
	0x4f, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x21, 0x0a, 0x1d, 0x41, 0x55, 0x54, 0x4f, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x50, 0x52, 0x4f,
	0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x45,
	0x44, 0x10, 0x03, 0x42, 0x41, 0x5a, 0x28, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x3b, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0xba,
	0x9a, 0x19, 0x13, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x6b, 0x65, 0x79, 0x2d,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_arista_studio_v1_studio_proto_rawDescOnce sync.Once
	file_arista_studio_v1_studio_proto_rawDescData = file_arista_studio_v1_studio_proto_rawDesc
)

func file_arista_studio_v1_studio_proto_rawDescGZIP() []byte {
	file_arista_studio_v1_studio_proto_rawDescOnce.Do(func() {
		file_arista_studio_v1_studio_proto_rawDescData = protoimpl.X.CompressGZIP(file_arista_studio_v1_studio_proto_rawDescData)
	})
	return file_arista_studio_v1_studio_proto_rawDescData
}

var file_arista_studio_v1_studio_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_arista_studio_v1_studio_proto_msgTypes = make([]protoimpl.MessageInfo, 42)
var file_arista_studio_v1_studio_proto_goTypes = []interface{}{
	(TemplateType)(0),                 // 0: arista.studio.v1.TemplateType
	(InputFieldType)(0),               // 1: arista.studio.v1.InputFieldType
	(ResolverFieldInputMode)(0),       // 2: arista.studio.v1.ResolverFieldInputMode
	(ResolverFieldDisplayMode)(0),     // 3: arista.studio.v1.ResolverFieldDisplayMode
	(TagMatcherFieldMode)(0),          // 4: arista.studio.v1.TagMatcherFieldMode
	(TopologyElement)(0),              // 5: arista.studio.v1.TopologyElement
	(TopologyOperation)(0),            // 6: arista.studio.v1.TopologyOperation
	(TopologyUpdateStatus)(0),         // 7: arista.studio.v1.TopologyUpdateStatus
	(AutofillProviderType)(0),         // 8: arista.studio.v1.AutofillProviderType
	(*StudioKey)(nil),                 // 9: arista.studio.v1.StudioKey
	(*StudioConfig)(nil),              // 10: arista.studio.v1.StudioConfig
	(*StudioSummary)(nil),             // 11: arista.studio.v1.StudioSummary
	(*Studio)(nil),                    // 12: arista.studio.v1.Studio
	(*AssignedTagsConfig)(nil),        // 13: arista.studio.v1.AssignedTagsConfig
	(*AssignedTags)(nil),              // 14: arista.studio.v1.AssignedTags
	(*InputsKey)(nil),                 // 15: arista.studio.v1.InputsKey
	(*InputsConfig)(nil),              // 16: arista.studio.v1.InputsConfig
	(*Inputs)(nil),                    // 17: arista.studio.v1.Inputs
	(*Template)(nil),                  // 18: arista.studio.v1.Template
	(*BooleanInputFieldProps)(nil),    // 19: arista.studio.v1.BooleanInputFieldProps
	(*IntegerInputFieldProps)(nil),    // 20: arista.studio.v1.IntegerInputFieldProps
	(*FloatInputFieldProps)(nil),      // 21: arista.studio.v1.FloatInputFieldProps
	(*StringInputFieldProps)(nil),     // 22: arista.studio.v1.StringInputFieldProps
	(*GroupInputFieldProps)(nil),      // 23: arista.studio.v1.GroupInputFieldProps
	(*CollectionInputFieldProps)(nil), // 24: arista.studio.v1.CollectionInputFieldProps
	(*ResolverInputFieldProps)(nil),   // 25: arista.studio.v1.ResolverInputFieldProps
	(*TagMatcherInputFieldProps)(nil), // 26: arista.studio.v1.TagMatcherInputFieldProps
	(*InputField)(nil),                // 27: arista.studio.v1.InputField
	(*InputFields)(nil),               // 28: arista.studio.v1.InputFields
	(*Layout)(nil),                    // 29: arista.studio.v1.Layout
	(*InputSchema)(nil),               // 30: arista.studio.v1.InputSchema
	(*SecretInput)(nil),               // 31: arista.studio.v1.SecretInput
	(*DeviceInfo)(nil),                // 32: arista.studio.v1.DeviceInfo
	(*InterfaceInfo)(nil),             // 33: arista.studio.v1.InterfaceInfo
	(*InterfaceInfos)(nil),            // 34: arista.studio.v1.InterfaceInfos
	(*TopologyInputKey)(nil),          // 35: arista.studio.v1.TopologyInputKey
	(*TopologyInputConfig)(nil),       // 36: arista.studio.v1.TopologyInputConfig
	(*TopologyInput)(nil),             // 37: arista.studio.v1.TopologyInput
	(*TopologyUpdateKey)(nil),         // 38: arista.studio.v1.TopologyUpdateKey
	(*TopologyUpdateConfig)(nil),      // 39: arista.studio.v1.TopologyUpdateConfig
	(*TopologyUpdate)(nil),            // 40: arista.studio.v1.TopologyUpdate
	(*WorkspaceKey)(nil),              // 41: arista.studio.v1.WorkspaceKey
	(*TopologyUpdateSyncConfig)(nil),  // 42: arista.studio.v1.TopologyUpdateSyncConfig
	(*TopologyUpdateSync)(nil),        // 43: arista.studio.v1.TopologyUpdateSync
	(*AutofillActionKey)(nil),         // 44: arista.studio.v1.AutofillActionKey
	(*AutofillActionConfig)(nil),      // 45: arista.studio.v1.AutofillActionConfig
	(*AutofillAction)(nil),            // 46: arista.studio.v1.AutofillAction
	(*AutofillArgumentProviders)(nil), // 47: arista.studio.v1.AutofillArgumentProviders
	(*AutofillArgumentProvider)(nil),  // 48: arista.studio.v1.AutofillArgumentProvider
	nil,                               // 49: arista.studio.v1.InputFields.ValuesEntry
	nil,                               // 50: arista.studio.v1.AutofillArgumentProviders.ValuesEntry
	(*wrapperspb.StringValue)(nil),    // 51: google.protobuf.StringValue
	(*wrapperspb.BoolValue)(nil),      // 52: google.protobuf.BoolValue
	(*timestamppb.Timestamp)(nil),     // 53: google.protobuf.Timestamp
	(*fmp.RepeatedString)(nil),        // 54: fmp.RepeatedString
	(*wrapperspb.Int64Value)(nil),     // 55: google.protobuf.Int64Value
	(*fmp.RepeatedInt64)(nil),         // 56: fmp.RepeatedInt64
	(*wrapperspb.FloatValue)(nil),     // 57: google.protobuf.FloatValue
	(*fmp.RepeatedFloat)(nil),         // 58: fmp.RepeatedFloat
	(*fmp.MACAddress)(nil),            // 59: fmp.MACAddress
}
var file_arista_studio_v1_studio_proto_depIdxs = []int32{
	51,  // 0: arista.studio.v1.StudioKey.studio_id:type_name -> google.protobuf.StringValue
	51,  // 1: arista.studio.v1.StudioKey.workspace_id:type_name -> google.protobuf.StringValue
	9,   // 2: arista.studio.v1.StudioConfig.key:type_name -> arista.studio.v1.StudioKey
	52,  // 3: arista.studio.v1.StudioConfig.remove:type_name -> google.protobuf.BoolValue
	51,  // 4: arista.studio.v1.StudioConfig.display_name:type_name -> google.protobuf.StringValue
	51,  // 5: arista.studio.v1.StudioConfig.description:type_name -> google.protobuf.StringValue
	18,  // 6: arista.studio.v1.StudioConfig.template:type_name -> arista.studio.v1.Template
	30,  // 7: arista.studio.v1.StudioConfig.input_schema:type_name -> arista.studio.v1.InputSchema
	9,   // 8: arista.studio.v1.StudioSummary.key:type_name -> arista.studio.v1.StudioKey
	51,  // 9: arista.studio.v1.StudioSummary.display_name:type_name -> google.protobuf.StringValue
	51,  // 10: arista.studio.v1.StudioSummary.description:type_name -> google.protobuf.StringValue
	52,  // 11: arista.studio.v1.StudioSummary.immutable:type_name -> google.protobuf.BoolValue
	9,   // 12: arista.studio.v1.Studio.key:type_name -> arista.studio.v1.StudioKey
	53,  // 13: arista.studio.v1.Studio.created_at:type_name -> google.protobuf.Timestamp
	51,  // 14: arista.studio.v1.Studio.created_by:type_name -> google.protobuf.StringValue
	53,  // 15: arista.studio.v1.Studio.last_modified_at:type_name -> google.protobuf.Timestamp
	51,  // 16: arista.studio.v1.Studio.last_modified_by:type_name -> google.protobuf.StringValue
	51,  // 17: arista.studio.v1.Studio.display_name:type_name -> google.protobuf.StringValue
	51,  // 18: arista.studio.v1.Studio.description:type_name -> google.protobuf.StringValue
	18,  // 19: arista.studio.v1.Studio.template:type_name -> arista.studio.v1.Template
	30,  // 20: arista.studio.v1.Studio.input_schema:type_name -> arista.studio.v1.InputSchema
	9,   // 21: arista.studio.v1.AssignedTagsConfig.key:type_name -> arista.studio.v1.StudioKey
	52,  // 22: arista.studio.v1.AssignedTagsConfig.remove:type_name -> google.protobuf.BoolValue
	51,  // 23: arista.studio.v1.AssignedTagsConfig.query:type_name -> google.protobuf.StringValue
	9,   // 24: arista.studio.v1.AssignedTags.key:type_name -> arista.studio.v1.StudioKey
	53,  // 25: arista.studio.v1.AssignedTags.created_at:type_name -> google.protobuf.Timestamp
	51,  // 26: arista.studio.v1.AssignedTags.created_by:type_name -> google.protobuf.StringValue
	53,  // 27: arista.studio.v1.AssignedTags.last_modified_at:type_name -> google.protobuf.Timestamp
	51,  // 28: arista.studio.v1.AssignedTags.last_modified_by:type_name -> google.protobuf.StringValue
	51,  // 29: arista.studio.v1.AssignedTags.query:type_name -> google.protobuf.StringValue
	51,  // 30: arista.studio.v1.InputsKey.studio_id:type_name -> google.protobuf.StringValue
	51,  // 31: arista.studio.v1.InputsKey.workspace_id:type_name -> google.protobuf.StringValue
	54,  // 32: arista.studio.v1.InputsKey.path:type_name -> fmp.RepeatedString
	15,  // 33: arista.studio.v1.InputsConfig.key:type_name -> arista.studio.v1.InputsKey
	52,  // 34: arista.studio.v1.InputsConfig.remove:type_name -> google.protobuf.BoolValue
	51,  // 35: arista.studio.v1.InputsConfig.inputs:type_name -> google.protobuf.StringValue
	15,  // 36: arista.studio.v1.Inputs.key:type_name -> arista.studio.v1.InputsKey
	53,  // 37: arista.studio.v1.Inputs.created_at:type_name -> google.protobuf.Timestamp
	51,  // 38: arista.studio.v1.Inputs.created_by:type_name -> google.protobuf.StringValue
	53,  // 39: arista.studio.v1.Inputs.last_modified_at:type_name -> google.protobuf.Timestamp
	51,  // 40: arista.studio.v1.Inputs.last_modified_by:type_name -> google.protobuf.StringValue
	51,  // 41: arista.studio.v1.Inputs.inputs:type_name -> google.protobuf.StringValue
	0,   // 42: arista.studio.v1.Template.type:type_name -> arista.studio.v1.TemplateType
	51,  // 43: arista.studio.v1.Template.body:type_name -> google.protobuf.StringValue
	52,  // 44: arista.studio.v1.BooleanInputFieldProps.default_value:type_name -> google.protobuf.BoolValue
	55,  // 45: arista.studio.v1.IntegerInputFieldProps.default_value:type_name -> google.protobuf.Int64Value
	56,  // 46: arista.studio.v1.IntegerInputFieldProps.static_options:type_name -> fmp.RepeatedInt64
	51,  // 47: arista.studio.v1.IntegerInputFieldProps.range:type_name -> google.protobuf.StringValue
	54,  // 48: arista.studio.v1.IntegerInputFieldProps.dynamic_options:type_name -> fmp.RepeatedString
	52,  // 49: arista.studio.v1.IntegerInputFieldProps.extra_values_allowed:type_name -> google.protobuf.BoolValue
	57,  // 50: arista.studio.v1.FloatInputFieldProps.default_value:type_name -> google.protobuf.FloatValue
	58,  // 51: arista.studio.v1.FloatInputFieldProps.static_options:type_name -> fmp.RepeatedFloat
	54,  // 52: arista.studio.v1.FloatInputFieldProps.dynamic_options:type_name -> fmp.RepeatedString
	52,  // 53: arista.studio.v1.FloatInputFieldProps.extra_values_allowed:type_name -> google.protobuf.BoolValue
	51,  // 54: arista.studio.v1.StringInputFieldProps.default_value:type_name -> google.protobuf.StringValue
	54,  // 55: arista.studio.v1.StringInputFieldProps.static_options:type_name -> fmp.RepeatedString
	54,  // 56: arista.studio.v1.StringInputFieldProps.dynamic_options:type_name -> fmp.RepeatedString
	51,  // 57: arista.studio.v1.StringInputFieldProps.length:type_name -> google.protobuf.StringValue
	51,  // 58: arista.studio.v1.StringInputFieldProps.pattern:type_name -> google.protobuf.StringValue
	51,  // 59: arista.studio.v1.StringInputFieldProps.format:type_name -> google.protobuf.StringValue
	52,  // 60: arista.studio.v1.StringInputFieldProps.is_secret:type_name -> google.protobuf.BoolValue
	52,  // 61: arista.studio.v1.StringInputFieldProps.extra_values_allowed:type_name -> google.protobuf.BoolValue
	54,  // 62: arista.studio.v1.GroupInputFieldProps.members:type_name -> fmp.RepeatedString
	51,  // 63: arista.studio.v1.CollectionInputFieldProps.base_field_id:type_name -> google.protobuf.StringValue
	51,  // 64: arista.studio.v1.CollectionInputFieldProps.key:type_name -> google.protobuf.StringValue
	51,  // 65: arista.studio.v1.ResolverInputFieldProps.base_field_id:type_name -> google.protobuf.StringValue
	3,   // 66: arista.studio.v1.ResolverInputFieldProps.display_mode:type_name -> arista.studio.v1.ResolverFieldDisplayMode
	2,   // 67: arista.studio.v1.ResolverInputFieldProps.input_mode:type_name -> arista.studio.v1.ResolverFieldInputMode
	51,  // 68: arista.studio.v1.ResolverInputFieldProps.input_tag_label:type_name -> google.protobuf.StringValue
	51,  // 69: arista.studio.v1.ResolverInputFieldProps.tag_filter_query:type_name -> google.protobuf.StringValue
	4,   // 70: arista.studio.v1.TagMatcherInputFieldProps.tag_matcher_mode:type_name -> arista.studio.v1.TagMatcherFieldMode
	51,  // 71: arista.studio.v1.TagMatcherInputFieldProps.tag_matcher_label:type_name -> google.protobuf.StringValue
	51,  // 72: arista.studio.v1.TagMatcherInputFieldProps.tag_filter_query:type_name -> google.protobuf.StringValue
	52,  // 73: arista.studio.v1.TagMatcherInputFieldProps.resolver_filtering_allowed:type_name -> google.protobuf.BoolValue
	51,  // 74: arista.studio.v1.InputField.id:type_name -> google.protobuf.StringValue
	1,   // 75: arista.studio.v1.InputField.type:type_name -> arista.studio.v1.InputFieldType
	51,  // 76: arista.studio.v1.InputField.name:type_name -> google.protobuf.StringValue
	51,  // 77: arista.studio.v1.InputField.label:type_name -> google.protobuf.StringValue
	51,  // 78: arista.studio.v1.InputField.description:type_name -> google.protobuf.StringValue
	52,  // 79: arista.studio.v1.InputField.required:type_name -> google.protobuf.BoolValue
	19,  // 80: arista.studio.v1.InputField.boolean_props:type_name -> arista.studio.v1.BooleanInputFieldProps
	20,  // 81: arista.studio.v1.InputField.integer_props:type_name -> arista.studio.v1.IntegerInputFieldProps
	21,  // 82: arista.studio.v1.InputField.float_props:type_name -> arista.studio.v1.FloatInputFieldProps
	22,  // 83: arista.studio.v1.InputField.string_props:type_name -> arista.studio.v1.StringInputFieldProps
	23,  // 84: arista.studio.v1.InputField.group_props:type_name -> arista.studio.v1.GroupInputFieldProps
	24,  // 85: arista.studio.v1.InputField.collection_props:type_name -> arista.studio.v1.CollectionInputFieldProps
	25,  // 86: arista.studio.v1.InputField.resolver_props:type_name -> arista.studio.v1.ResolverInputFieldProps
	51,  // 87: arista.studio.v1.InputField.auto_fill_action_id:type_name -> google.protobuf.StringValue
	26,  // 88: arista.studio.v1.InputField.tag_matcher_props:type_name -> arista.studio.v1.TagMatcherInputFieldProps
	49,  // 89: arista.studio.v1.InputFields.values:type_name -> arista.studio.v1.InputFields.ValuesEntry
	51,  // 90: arista.studio.v1.Layout.value:type_name -> google.protobuf.StringValue
	28,  // 91: arista.studio.v1.InputSchema.fields:type_name -> arista.studio.v1.InputFields
	29,  // 92: arista.studio.v1.InputSchema.layout:type_name -> arista.studio.v1.Layout
	15,  // 93: arista.studio.v1.SecretInput.key:type_name -> arista.studio.v1.InputsKey
	51,  // 94: arista.studio.v1.SecretInput.plain_text:type_name -> google.protobuf.StringValue
	51,  // 95: arista.studio.v1.DeviceInfo.device_id:type_name -> google.protobuf.StringValue
	51,  // 96: arista.studio.v1.DeviceInfo.model_name:type_name -> google.protobuf.StringValue
	59,  // 97: arista.studio.v1.DeviceInfo.mac_address:type_name -> fmp.MACAddress
	51,  // 98: arista.studio.v1.DeviceInfo.hostname:type_name -> google.protobuf.StringValue
	34,  // 99: arista.studio.v1.DeviceInfo.interface_infos:type_name -> arista.studio.v1.InterfaceInfos
	51,  // 100: arista.studio.v1.InterfaceInfo.name:type_name -> google.protobuf.StringValue
	51,  // 101: arista.studio.v1.InterfaceInfo.neighbor_device_id:type_name -> google.protobuf.StringValue
	51,  // 102: arista.studio.v1.InterfaceInfo.neighbor_interface_name:type_name -> google.protobuf.StringValue
	6,   // 103: arista.studio.v1.InterfaceInfo.topology_operation:type_name -> arista.studio.v1.TopologyOperation
	33,  // 104: arista.studio.v1.InterfaceInfos.values:type_name -> arista.studio.v1.InterfaceInfo
	51,  // 105: arista.studio.v1.TopologyInputKey.workspace_id:type_name -> google.protobuf.StringValue
	51,  // 106: arista.studio.v1.TopologyInputKey.device_id:type_name -> google.protobuf.StringValue
	35,  // 107: arista.studio.v1.TopologyInputConfig.key:type_name -> arista.studio.v1.TopologyInputKey
	32,  // 108: arista.studio.v1.TopologyInputConfig.device_info:type_name -> arista.studio.v1.DeviceInfo
	35,  // 109: arista.studio.v1.TopologyInput.key:type_name -> arista.studio.v1.TopologyInputKey
	32,  // 110: arista.studio.v1.TopologyInput.device_info:type_name -> arista.studio.v1.DeviceInfo
	51,  // 111: arista.studio.v1.TopologyUpdateKey.workspace_id:type_name -> google.protobuf.StringValue
	51,  // 112: arista.studio.v1.TopologyUpdateKey.update_id:type_name -> google.protobuf.StringValue
	38,  // 113: arista.studio.v1.TopologyUpdateConfig.key:type_name -> arista.studio.v1.TopologyUpdateKey
	7,   // 114: arista.studio.v1.TopologyUpdateConfig.status:type_name -> arista.studio.v1.TopologyUpdateStatus
	38,  // 115: arista.studio.v1.TopologyUpdate.key:type_name -> arista.studio.v1.TopologyUpdateKey
	5,   // 116: arista.studio.v1.TopologyUpdate.topology_element:type_name -> arista.studio.v1.TopologyElement
	6,   // 117: arista.studio.v1.TopologyUpdate.topology_operation:type_name -> arista.studio.v1.TopologyOperation
	7,   // 118: arista.studio.v1.TopologyUpdate.status:type_name -> arista.studio.v1.TopologyUpdateStatus
	51,  // 119: arista.studio.v1.TopologyUpdate.description:type_name -> google.protobuf.StringValue
	51,  // 120: arista.studio.v1.WorkspaceKey.workspace_id:type_name -> google.protobuf.StringValue
	41,  // 121: arista.studio.v1.TopologyUpdateSyncConfig.key:type_name -> arista.studio.v1.WorkspaceKey
	53,  // 122: arista.studio.v1.TopologyUpdateSyncConfig.sync_time:type_name -> google.protobuf.Timestamp
	41,  // 123: arista.studio.v1.TopologyUpdateSync.key:type_name -> arista.studio.v1.WorkspaceKey
	53,  // 124: arista.studio.v1.TopologyUpdateSync.sync_time:type_name -> google.protobuf.Timestamp
	51,  // 125: arista.studio.v1.AutofillActionKey.studio_id:type_name -> google.protobuf.StringValue
	51,  // 126: arista.studio.v1.AutofillActionKey.workspace_id:type_name -> google.protobuf.StringValue
	51,  // 127: arista.studio.v1.AutofillActionKey.input_field_id:type_name -> google.protobuf.StringValue
	44,  // 128: arista.studio.v1.AutofillActionConfig.key:type_name -> arista.studio.v1.AutofillActionKey
	52,  // 129: arista.studio.v1.AutofillActionConfig.remove:type_name -> google.protobuf.BoolValue
	51,  // 130: arista.studio.v1.AutofillActionConfig.action_id:type_name -> google.protobuf.StringValue
	51,  // 131: arista.studio.v1.AutofillActionConfig.description:type_name -> google.protobuf.StringValue
	47,  // 132: arista.studio.v1.AutofillActionConfig.argument_providers:type_name -> arista.studio.v1.AutofillArgumentProviders
	44,  // 133: arista.studio.v1.AutofillAction.key:type_name -> arista.studio.v1.AutofillActionKey
	53,  // 134: arista.studio.v1.AutofillAction.created_at:type_name -> google.protobuf.Timestamp
	51,  // 135: arista.studio.v1.AutofillAction.created_by:type_name -> google.protobuf.StringValue
	53,  // 136: arista.studio.v1.AutofillAction.last_modified_at:type_name -> google.protobuf.Timestamp
	51,  // 137: arista.studio.v1.AutofillAction.last_modified_by:type_name -> google.protobuf.StringValue
	51,  // 138: arista.studio.v1.AutofillAction.action_id:type_name -> google.protobuf.StringValue
	51,  // 139: arista.studio.v1.AutofillAction.description:type_name -> google.protobuf.StringValue
	47,  // 140: arista.studio.v1.AutofillAction.argument_providers:type_name -> arista.studio.v1.AutofillArgumentProviders
	50,  // 141: arista.studio.v1.AutofillArgumentProviders.values:type_name -> arista.studio.v1.AutofillArgumentProviders.ValuesEntry
	8,   // 142: arista.studio.v1.AutofillArgumentProvider.type:type_name -> arista.studio.v1.AutofillProviderType
	51,  // 143: arista.studio.v1.AutofillArgumentProvider.value:type_name -> google.protobuf.StringValue
	27,  // 144: arista.studio.v1.InputFields.ValuesEntry.value:type_name -> arista.studio.v1.InputField
	48,  // 145: arista.studio.v1.AutofillArgumentProviders.ValuesEntry.value:type_name -> arista.studio.v1.AutofillArgumentProvider
	146, // [146:146] is the sub-list for method output_type
	146, // [146:146] is the sub-list for method input_type
	146, // [146:146] is the sub-list for extension type_name
	146, // [146:146] is the sub-list for extension extendee
	0,   // [0:146] is the sub-list for field type_name
}

func init() { file_arista_studio_v1_studio_proto_init() }
func file_arista_studio_v1_studio_proto_init() {
	if File_arista_studio_v1_studio_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_arista_studio_v1_studio_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Studio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignedTagsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignedTags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputsKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Inputs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Template); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BooleanInputFieldProps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntegerInputFieldProps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatInputFieldProps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringInputFieldProps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupInputFieldProps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionInputFieldProps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolverInputFieldProps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagMatcherInputFieldProps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputFields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Layout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyInputKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyInputConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyUpdateKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyUpdateConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyUpdateSyncConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyUpdateSync); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillActionKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillActionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillArgumentProviders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_studio_v1_studio_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillArgumentProvider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_arista_studio_v1_studio_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   42,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_arista_studio_v1_studio_proto_goTypes,
		DependencyIndexes: file_arista_studio_v1_studio_proto_depIdxs,
		EnumInfos:         file_arista_studio_v1_studio_proto_enumTypes,
		MessageInfos:      file_arista_studio_v1_studio_proto_msgTypes,
	}.Build()
	File_arista_studio_v1_studio_proto = out.File
	file_arista_studio_v1_studio_proto_rawDesc = nil
	file_arista_studio_v1_studio_proto_goTypes = nil
	file_arista_studio_v1_studio_proto_depIdxs = nil
}
