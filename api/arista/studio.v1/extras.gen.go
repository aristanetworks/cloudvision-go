// Copyright (c) 2024 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

//
// Code generated by boomtown. DO NOT EDIT.
//

package studio

import "google.golang.org/grpc"

// Client composes the service clients within the studio package.
// This client can then be composed into a larger hierarchy for more complex clients.
//
// Because method names include the name of the Resource they operate on, the embedded
// clients are unnamed fields to reduce stutter.
//
// Included resources:
//   - AssignedTags
//   - AssignedTagsConfig
//   - AutofillAction
//   - AutofillActionConfig
//   - Inputs
//   - InputsConfig
//   - SecretInput
//   - Studio
//   - StudioConfig
//   - StudioSummary
type Client struct {
	AssignedTags         AssignedTagsServiceClient
	AssignedTagsConfig   AssignedTagsConfigServiceClient
	AutofillAction       AutofillActionServiceClient
	AutofillActionConfig AutofillActionConfigServiceClient
	Inputs               InputsServiceClient
	InputsConfig         InputsConfigServiceClient
	SecretInput          SecretInputServiceClient
	Studio               StudioServiceClient
	StudioConfig         StudioConfigServiceClient
	StudioSummary        StudioSummaryServiceClient
}

// NewClient creates a new composed-client from the given connection.
func NewClient(conn grpc.ClientConnInterface) Client {
	return Client{
		AssignedTags:         NewAssignedTagsServiceClient(conn),
		AssignedTagsConfig:   NewAssignedTagsConfigServiceClient(conn),
		AutofillAction:       NewAutofillActionServiceClient(conn),
		AutofillActionConfig: NewAutofillActionConfigServiceClient(conn),
		Inputs:               NewInputsServiceClient(conn),
		InputsConfig:         NewInputsConfigServiceClient(conn),
		SecretInput:          NewSecretInputServiceClient(conn),
		Studio:               NewStudioServiceClient(conn),
		StudioConfig:         NewStudioConfigServiceClient(conn),
		StudioSummary:        NewStudioSummaryServiceClient(conn),
	}
}

// Server aggregates the various server interfaces required by gRPC.
// The included resources are:
//   - AssignedTags
//   - AssignedTagsConfig
//   - AutofillAction
//   - AutofillActionConfig
//   - Inputs
//   - InputsConfig
//   - SecretInput
//   - Studio
//   - StudioConfig
//   - StudioSummary
type Server struct {
	AssignedTags         AssignedTagsServiceServer
	AssignedTagsConfig   AssignedTagsConfigServiceServer
	AutofillAction       AutofillActionServiceServer
	AutofillActionConfig AutofillActionConfigServiceServer
	Inputs               InputsServiceServer
	InputsConfig         InputsConfigServiceServer
	SecretInput          SecretInputServiceServer
	Studio               StudioServiceServer
	StudioConfig         StudioConfigServiceServer
	StudioSummary        StudioSummaryServiceServer
}

// Register takes the given gRPC Server and registers our services with it.
func (s Server) Register(target *grpc.Server) {
	RegisterAssignedTagsServiceServer(target, s.AssignedTags)
	RegisterAssignedTagsConfigServiceServer(target, s.AssignedTagsConfig)
	RegisterAutofillActionServiceServer(target, s.AutofillAction)
	RegisterAutofillActionConfigServiceServer(target, s.AutofillActionConfig)
	RegisterInputsServiceServer(target, s.Inputs)
	RegisterInputsConfigServiceServer(target, s.InputsConfig)
	RegisterSecretInputServiceServer(target, s.SecretInput)
	RegisterStudioServiceServer(target, s.Studio)
	RegisterStudioConfigServiceServer(target, s.StudioConfig)
	RegisterStudioSummaryServiceServer(target, s.StudioSummary)
}

// RegisterUnimplementeds adds unimplemented servers to the given gRPC Server
func RegisterUnimplementeds(target *grpc.Server) error {
	RegisterAssignedTagsServiceServer(target,
		UnimplementedAssignedTagsServiceServer{})
	RegisterAssignedTagsConfigServiceServer(target,
		UnimplementedAssignedTagsConfigServiceServer{})
	RegisterAutofillActionServiceServer(target,
		UnimplementedAutofillActionServiceServer{})
	RegisterAutofillActionConfigServiceServer(target,
		UnimplementedAutofillActionConfigServiceServer{})
	RegisterInputsServiceServer(target,
		UnimplementedInputsServiceServer{})
	RegisterInputsConfigServiceServer(target,
		UnimplementedInputsConfigServiceServer{})
	RegisterSecretInputServiceServer(target,
		UnimplementedSecretInputServiceServer{})
	RegisterStudioServiceServer(target,
		UnimplementedStudioServiceServer{})
	RegisterStudioConfigServiceServer(target,
		UnimplementedStudioConfigServiceServer{})
	RegisterStudioSummaryServiceServer(target,
		UnimplementedStudioSummaryServiceServer{})
	return nil
}

// HasKey returns whether the given AssignedTags has a key provided in the model.
func (a *AssignedTags) HasKey() bool {
	return a.GetKey() != nil
}

// HasKey returns whether the given AssignedTagsRequest has a key provided in the request.
func (a *AssignedTagsRequest) HasKey() bool {
	return a.GetKey() != nil
}

// HasKey returns whether the given AssignedTagsConfig has a key provided in the model.
func (a *AssignedTagsConfig) HasKey() bool {
	return a.GetKey() != nil
}

// HasKey returns whether the given AssignedTagsConfigRequest has a key provided in the request.
func (a *AssignedTagsConfigRequest) HasKey() bool {
	return a.GetKey() != nil
}

// HasKey returns whether the given AssignedTagsConfigSetRequest has a key provided in the request.
func (a *AssignedTagsConfigSetRequest) HasKey() bool {
	return a.GetValue().HasKey()
}

// HasKey returns whether the given AssignedTagsConfigDeleteRequest has a key provided in the request.
func (a *AssignedTagsConfigDeleteRequest) HasKey() bool {
	return a.GetKey() != nil
}

// HasKey returns whether the given AutofillAction has a key provided in the model.
func (a *AutofillAction) HasKey() bool {
	return a.GetKey() != nil
}

// HasKey returns whether the given AutofillActionRequest has a key provided in the request.
func (a *AutofillActionRequest) HasKey() bool {
	return a.GetKey() != nil
}

// HasKey returns whether the given AutofillActionConfig has a key provided in the model.
func (a *AutofillActionConfig) HasKey() bool {
	return a.GetKey() != nil
}

// HasKey returns whether the given AutofillActionConfigRequest has a key provided in the request.
func (a *AutofillActionConfigRequest) HasKey() bool {
	return a.GetKey() != nil
}

// HasKey returns whether the given AutofillActionConfigSetRequest has a key provided in the request.
func (a *AutofillActionConfigSetRequest) HasKey() bool {
	return a.GetValue().HasKey()
}

// HasKey returns whether the given AutofillActionConfigDeleteRequest has a key provided in the request.
func (a *AutofillActionConfigDeleteRequest) HasKey() bool {
	return a.GetKey() != nil
}

// HasKey returns whether the given Inputs has a key provided in the model.
func (i *Inputs) HasKey() bool {
	return i.GetKey() != nil
}

// HasKey returns whether the given InputsRequest has a key provided in the request.
func (i *InputsRequest) HasKey() bool {
	return i.GetKey() != nil
}

// HasKey returns whether the given InputsConfig has a key provided in the model.
func (i *InputsConfig) HasKey() bool {
	return i.GetKey() != nil
}

// HasKey returns whether the given InputsConfigRequest has a key provided in the request.
func (i *InputsConfigRequest) HasKey() bool {
	return i.GetKey() != nil
}

// HasKey returns whether the given InputsConfigSetRequest has a key provided in the request.
func (i *InputsConfigSetRequest) HasKey() bool {
	return i.GetValue().HasKey()
}

// HasKey returns whether the given InputsConfigDeleteRequest has a key provided in the request.
func (i *InputsConfigDeleteRequest) HasKey() bool {
	return i.GetKey() != nil
}

// HasKey returns whether the given SecretInput has a key provided in the model.
func (s *SecretInput) HasKey() bool {
	return s.GetKey() != nil
}

// HasKey returns whether the given SecretInputRequest has a key provided in the request.
func (s *SecretInputRequest) HasKey() bool {
	return s.GetKey() != nil
}

// HasKey returns whether the given Studio has a key provided in the model.
func (s *Studio) HasKey() bool {
	return s.GetKey() != nil
}

// HasKey returns whether the given StudioRequest has a key provided in the request.
func (s *StudioRequest) HasKey() bool {
	return s.GetKey() != nil
}

// HasKey returns whether the given StudioConfig has a key provided in the model.
func (s *StudioConfig) HasKey() bool {
	return s.GetKey() != nil
}

// HasKey returns whether the given StudioConfigRequest has a key provided in the request.
func (s *StudioConfigRequest) HasKey() bool {
	return s.GetKey() != nil
}

// HasKey returns whether the given StudioConfigSetRequest has a key provided in the request.
func (s *StudioConfigSetRequest) HasKey() bool {
	return s.GetValue().HasKey()
}

// HasKey returns whether the given StudioConfigDeleteRequest has a key provided in the request.
func (s *StudioConfigDeleteRequest) HasKey() bool {
	return s.GetKey() != nil
}

// HasKey returns whether the given StudioSummary has a key provided in the model.
func (s *StudioSummary) HasKey() bool {
	return s.GetKey() != nil
}

// HasKey returns whether the given StudioSummaryRequest has a key provided in the request.
func (s *StudioSummaryRequest) HasKey() bool {
	return s.GetKey() != nil
}

// PassesPartialEqFilter returns whether this AutofillProviderType matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (a AutofillProviderType) PassesPartialEqFilter(cmp AutofillProviderType) bool {
	if cmp != AutofillProviderType(0) {
		return a == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether this EntityType matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (e EntityType) PassesPartialEqFilter(cmp EntityType) bool {
	if cmp != EntityType(0) {
		return e == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether this InputFieldType matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (i InputFieldType) PassesPartialEqFilter(cmp InputFieldType) bool {
	if cmp != InputFieldType(0) {
		return i == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether this ResolverFieldDisplayMode matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (r ResolverFieldDisplayMode) PassesPartialEqFilter(cmp ResolverFieldDisplayMode) bool {
	if cmp != ResolverFieldDisplayMode(0) {
		return r == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether this ResolverFieldInputMode matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (r ResolverFieldInputMode) PassesPartialEqFilter(cmp ResolverFieldInputMode) bool {
	if cmp != ResolverFieldInputMode(0) {
		return r == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether this TagMatcherFieldMode matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (t TagMatcherFieldMode) PassesPartialEqFilter(cmp TagMatcherFieldMode) bool {
	if cmp != TagMatcherFieldMode(0) {
		return t == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether this TemplateType matches the comparison. If the given
// argument is unitialized, it is considered a match.
func (t TemplateType) PassesPartialEqFilter(cmp TemplateType) bool {
	if cmp != TemplateType(0) {
		return t == cmp
	}
	return true
}

// PassesPartialEqFilter returns whether the AutofillArgumentProvider matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (a *AutofillArgumentProvider) PassesPartialEqFilter(cmp *AutofillArgumentProvider) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if a == nil {
		return false
	}
	if !a.Type.PassesPartialEqFilter(cmp.Type) {
		return false
	}

	if cmp.Value != nil {
		if a.Value == nil {
			return false
		}
		if a.Value.Value != cmp.Value.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the AutofillArgumentProviders matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (a *AutofillArgumentProviders) PassesPartialEqFilter(cmp *AutofillArgumentProviders) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if a == nil {
		return false
	}
	if len(cmp.Values) > len(a.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := a.Values[k]
		if !exists || !self.PassesPartialEqFilter(filt) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the BooleanInputFieldProps matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (b *BooleanInputFieldProps) PassesPartialEqFilter(cmp *BooleanInputFieldProps) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if b == nil {
		return false
	}

	if cmp.DefaultValue != nil {
		if b.DefaultValue == nil {
			return false
		}
		if b.DefaultValue.Value != cmp.DefaultValue.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the CollectionInputFieldProps matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (c *CollectionInputFieldProps) PassesPartialEqFilter(cmp *CollectionInputFieldProps) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if c == nil {
		return false
	}

	if cmp.BaseFieldId != nil {
		if c.BaseFieldId == nil {
			return false
		}
		if c.BaseFieldId.Value != cmp.BaseFieldId.Value {
			return false
		}
	}

	if cmp.Key != nil {
		if c.Key == nil {
			return false
		}
		if c.Key.Value != cmp.Key.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the Entities matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (e *Entities) PassesPartialEqFilter(cmp *Entities) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if e == nil {
		return false
	}
	if len(cmp.Values) > len(e.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := e.Values[k]
		if !exists || !self.PassesPartialEqFilter(filt) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the Entity matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (e *Entity) PassesPartialEqFilter(cmp *Entity) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if e == nil {
		return false
	}
	if !e.EntityType.PassesPartialEqFilter(cmp.EntityType) {
		return false
	}

	if cmp.LastModifiedAt != nil {
		if cmp.LastModifiedAt.Seconds != 0 {
			if e.LastModifiedAt.Seconds != cmp.LastModifiedAt.Seconds {
				return false
			}
		}
		if cmp.LastModifiedAt.Nanos != 0 {
			if e.LastModifiedAt.Nanos != cmp.LastModifiedAt.Nanos {
				return false
			}
		}
	}

	if cmp.LastModifiedBy != nil {
		if e.LastModifiedBy == nil {
			return false
		}
		if e.LastModifiedBy.Value != cmp.LastModifiedBy.Value {
			return false
		}
	}

	if cmp.Removed != nil {
		if e.Removed == nil {
			return false
		}
		if e.Removed.Value != cmp.Removed.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the FloatInputFieldProps matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (f *FloatInputFieldProps) PassesPartialEqFilter(cmp *FloatInputFieldProps) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if f == nil {
		return false
	}

	if cmp.DefaultValue != nil {
		if f.DefaultValue == nil {
			return false
		}
		if f.DefaultValue.Value != cmp.DefaultValue.Value {
			return false
		}
	}
	if !f.StaticOptions.PassesPartialEqFilter(cmp.StaticOptions) {
		return false
	}
	if !f.DynamicOptions.PassesPartialEqFilter(cmp.DynamicOptions) {
		return false
	}

	if cmp.ExtraValuesAllowed != nil {
		if f.ExtraValuesAllowed == nil {
			return false
		}
		if f.ExtraValuesAllowed.Value != cmp.ExtraValuesAllowed.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the GroupInputFieldProps matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (g *GroupInputFieldProps) PassesPartialEqFilter(cmp *GroupInputFieldProps) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if g == nil {
		return false
	}
	if !g.Members.PassesPartialEqFilter(cmp.Members) {
		return false
	}

	return true
}

// PassesPartialEqFilter returns whether the InputField matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (i *InputField) PassesPartialEqFilter(cmp *InputField) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if i == nil {
		return false
	}

	if cmp.Id != nil {
		if i.Id == nil {
			return false
		}
		if i.Id.Value != cmp.Id.Value {
			return false
		}
	}
	if !i.Type.PassesPartialEqFilter(cmp.Type) {
		return false
	}

	if cmp.Name != nil {
		if i.Name == nil {
			return false
		}
		if i.Name.Value != cmp.Name.Value {
			return false
		}
	}

	if cmp.Label != nil {
		if i.Label == nil {
			return false
		}
		if i.Label.Value != cmp.Label.Value {
			return false
		}
	}

	if cmp.Description != nil {
		if i.Description == nil {
			return false
		}
		if i.Description.Value != cmp.Description.Value {
			return false
		}
	}

	if cmp.Required != nil {
		if i.Required == nil {
			return false
		}
		if i.Required.Value != cmp.Required.Value {
			return false
		}
	}
	if !i.BooleanProps.PassesPartialEqFilter(cmp.BooleanProps) {
		return false
	}
	if !i.IntegerProps.PassesPartialEqFilter(cmp.IntegerProps) {
		return false
	}
	if !i.FloatProps.PassesPartialEqFilter(cmp.FloatProps) {
		return false
	}
	if !i.StringProps.PassesPartialEqFilter(cmp.StringProps) {
		return false
	}
	if !i.GroupProps.PassesPartialEqFilter(cmp.GroupProps) {
		return false
	}
	if !i.CollectionProps.PassesPartialEqFilter(cmp.CollectionProps) {
		return false
	}
	if !i.ResolverProps.PassesPartialEqFilter(cmp.ResolverProps) {
		return false
	}

	if cmp.AutoFillActionId != nil {
		if i.AutoFillActionId == nil {
			return false
		}
		if i.AutoFillActionId.Value != cmp.AutoFillActionId.Value {
			return false
		}
	}
	if !i.TagMatcherProps.PassesPartialEqFilter(cmp.TagMatcherProps) {
		return false
	}

	return true
}

// PassesPartialEqFilter returns whether the InputFields matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (i *InputFields) PassesPartialEqFilter(cmp *InputFields) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if i == nil {
		return false
	}
	if len(cmp.Values) > len(i.Values) {
		return false
	}
	for k, filt := range cmp.Values {
		self, exists := i.Values[k]
		if !exists || !self.PassesPartialEqFilter(filt) {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the InputSchema matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (i *InputSchema) PassesPartialEqFilter(cmp *InputSchema) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if i == nil {
		return false
	}
	if !i.Fields.PassesPartialEqFilter(cmp.Fields) {
		return false
	}
	if !i.Layout.PassesPartialEqFilter(cmp.Layout) {
		return false
	}

	return true
}

// PassesPartialEqFilter returns whether the IntegerInputFieldProps matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (i *IntegerInputFieldProps) PassesPartialEqFilter(cmp *IntegerInputFieldProps) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if i == nil {
		return false
	}

	if cmp.DefaultValue != nil {
		if i.DefaultValue == nil {
			return false
		}
		if i.DefaultValue.Value != cmp.DefaultValue.Value {
			return false
		}
	}
	if !i.StaticOptions.PassesPartialEqFilter(cmp.StaticOptions) {
		return false
	}

	if cmp.Range != nil {
		if i.Range == nil {
			return false
		}
		if i.Range.Value != cmp.Range.Value {
			return false
		}
	}
	if !i.DynamicOptions.PassesPartialEqFilter(cmp.DynamicOptions) {
		return false
	}

	if cmp.ExtraValuesAllowed != nil {
		if i.ExtraValuesAllowed == nil {
			return false
		}
		if i.ExtraValuesAllowed.Value != cmp.ExtraValuesAllowed.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the Layout matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (l *Layout) PassesPartialEqFilter(cmp *Layout) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if l == nil {
		return false
	}

	if cmp.Value != nil {
		if l.Value == nil {
			return false
		}
		if l.Value.Value != cmp.Value.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the ResolverInputFieldProps matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (r *ResolverInputFieldProps) PassesPartialEqFilter(cmp *ResolverInputFieldProps) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if r == nil {
		return false
	}

	if cmp.BaseFieldId != nil {
		if r.BaseFieldId == nil {
			return false
		}
		if r.BaseFieldId.Value != cmp.BaseFieldId.Value {
			return false
		}
	}
	if !r.DisplayMode.PassesPartialEqFilter(cmp.DisplayMode) {
		return false
	}
	if !r.InputMode.PassesPartialEqFilter(cmp.InputMode) {
		return false
	}

	if cmp.InputTagLabel != nil {
		if r.InputTagLabel == nil {
			return false
		}
		if r.InputTagLabel.Value != cmp.InputTagLabel.Value {
			return false
		}
	}

	if cmp.TagFilterQuery != nil {
		if r.TagFilterQuery == nil {
			return false
		}
		if r.TagFilterQuery.Value != cmp.TagFilterQuery.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the StringInputFieldProps matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (s *StringInputFieldProps) PassesPartialEqFilter(cmp *StringInputFieldProps) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if s == nil {
		return false
	}

	if cmp.DefaultValue != nil {
		if s.DefaultValue == nil {
			return false
		}
		if s.DefaultValue.Value != cmp.DefaultValue.Value {
			return false
		}
	}
	if !s.StaticOptions.PassesPartialEqFilter(cmp.StaticOptions) {
		return false
	}
	if !s.DynamicOptions.PassesPartialEqFilter(cmp.DynamicOptions) {
		return false
	}

	if cmp.Length != nil {
		if s.Length == nil {
			return false
		}
		if s.Length.Value != cmp.Length.Value {
			return false
		}
	}

	if cmp.Pattern != nil {
		if s.Pattern == nil {
			return false
		}
		if s.Pattern.Value != cmp.Pattern.Value {
			return false
		}
	}

	if cmp.Format != nil {
		if s.Format == nil {
			return false
		}
		if s.Format.Value != cmp.Format.Value {
			return false
		}
	}

	if cmp.IsSecret != nil {
		if s.IsSecret == nil {
			return false
		}
		if s.IsSecret.Value != cmp.IsSecret.Value {
			return false
		}
	}

	if cmp.ExtraValuesAllowed != nil {
		if s.ExtraValuesAllowed == nil {
			return false
		}
		if s.ExtraValuesAllowed.Value != cmp.ExtraValuesAllowed.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the TagMatcherInputFieldProps matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (t *TagMatcherInputFieldProps) PassesPartialEqFilter(cmp *TagMatcherInputFieldProps) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if t == nil {
		return false
	}
	if !t.TagMatcherMode.PassesPartialEqFilter(cmp.TagMatcherMode) {
		return false
	}

	if cmp.TagMatcherLabel != nil {
		if t.TagMatcherLabel == nil {
			return false
		}
		if t.TagMatcherLabel.Value != cmp.TagMatcherLabel.Value {
			return false
		}
	}

	if cmp.TagFilterQuery != nil {
		if t.TagFilterQuery == nil {
			return false
		}
		if t.TagFilterQuery.Value != cmp.TagFilterQuery.Value {
			return false
		}
	}

	if cmp.ResolverFilteringAllowed != nil {
		if t.ResolverFilteringAllowed == nil {
			return false
		}
		if t.ResolverFilteringAllowed.Value != cmp.ResolverFilteringAllowed.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the Template matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (t *Template) PassesPartialEqFilter(cmp *Template) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if t == nil {
		return false
	}
	if !t.Type.PassesPartialEqFilter(cmp.Type) {
		return false
	}

	if cmp.Body != nil {
		if t.Body == nil {
			return false
		}
		if t.Body.Value != cmp.Body.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the AutofillActionKey matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (a *AutofillActionKey) PassesPartialEqFilter(cmp *AutofillActionKey) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if a == nil {
		return false
	}

	if cmp.StudioId != nil {
		if a.StudioId == nil {
			return false
		}
		if a.StudioId.Value != cmp.StudioId.Value {
			return false
		}
	}

	if cmp.WorkspaceId != nil {
		if a.WorkspaceId == nil {
			return false
		}
		if a.WorkspaceId.Value != cmp.WorkspaceId.Value {
			return false
		}
	}

	if cmp.InputFieldId != nil {
		if a.InputFieldId == nil {
			return false
		}
		if a.InputFieldId.Value != cmp.InputFieldId.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the InputsKey matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (i *InputsKey) PassesPartialEqFilter(cmp *InputsKey) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if i == nil {
		return false
	}

	if cmp.StudioId != nil {
		if i.StudioId == nil {
			return false
		}
		if i.StudioId.Value != cmp.StudioId.Value {
			return false
		}
	}

	if cmp.WorkspaceId != nil {
		if i.WorkspaceId == nil {
			return false
		}
		if i.WorkspaceId.Value != cmp.WorkspaceId.Value {
			return false
		}
	}
	if !i.Path.PassesPartialEqFilter(cmp.Path) {
		return false
	}

	return true
}

// PassesPartialEqFilter returns whether the StudioKey matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (s *StudioKey) PassesPartialEqFilter(cmp *StudioKey) bool {
	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if s == nil {
		return false
	}

	if cmp.StudioId != nil {
		if s.StudioId == nil {
			return false
		}
		if s.StudioId.Value != cmp.StudioId.Value {
			return false
		}
	}

	if cmp.WorkspaceId != nil {
		if s.WorkspaceId == nil {
			return false
		}
		if s.WorkspaceId.Value != cmp.WorkspaceId.Value {
			return false
		}
	}

	return true
}

// PassesPartialEqFilter returns whether the AssignedTags matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (a *AssignedTags) PassesPartialEqFilter(cmp *AssignedTags) bool {
	// if the resource is nil, there is nothing to send to the client
	if a == nil {
		return false
	}

	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if !a.Key.PassesPartialEqFilter(cmp.Key) {
		return false
	}

	if cmp.CreatedAt != nil {
		if cmp.CreatedAt.Seconds != 0 {
			if a.CreatedAt.Seconds != cmp.CreatedAt.Seconds {
				return false
			}
		}
		if cmp.CreatedAt.Nanos != 0 {
			if a.CreatedAt.Nanos != cmp.CreatedAt.Nanos {
				return false
			}
		}
	}

	if cmp.CreatedBy != nil {
		if a.CreatedBy == nil {
			return false
		}
		if a.CreatedBy.Value != cmp.CreatedBy.Value {
			return false
		}
	}

	if cmp.LastModifiedAt != nil {
		if cmp.LastModifiedAt.Seconds != 0 {
			if a.LastModifiedAt.Seconds != cmp.LastModifiedAt.Seconds {
				return false
			}
		}
		if cmp.LastModifiedAt.Nanos != 0 {
			if a.LastModifiedAt.Nanos != cmp.LastModifiedAt.Nanos {
				return false
			}
		}
	}

	if cmp.LastModifiedBy != nil {
		if a.LastModifiedBy == nil {
			return false
		}
		if a.LastModifiedBy.Value != cmp.LastModifiedBy.Value {
			return false
		}
	}

	if cmp.Query != nil {
		if a.Query == nil {
			return false
		}
		if a.Query.Value != cmp.Query.Value {
			return false
		}
	}

	return true
}

// MatchesAnyPartialEqFilter returns whether the receiver matches any filters in the given set.
func (a *AssignedTags) MatchesAnyPartialEqFilter(filters []*AssignedTags) bool {
	if len(filters) == 0 {
		return true
	}

	for _, filt := range filters {
		if a.PassesPartialEqFilter(filt) {
			return true
		}
	}

	return false
}

// PassesPartialEqFilter returns whether the AssignedTagsConfig matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (a *AssignedTagsConfig) PassesPartialEqFilter(cmp *AssignedTagsConfig) bool {
	// if the resource is nil, there is nothing to send to the client
	if a == nil {
		return false
	}

	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if !a.Key.PassesPartialEqFilter(cmp.Key) {
		return false
	}

	if cmp.Remove != nil {
		if a.Remove == nil {
			return false
		}
		if a.Remove.Value != cmp.Remove.Value {
			return false
		}
	}

	if cmp.Query != nil {
		if a.Query == nil {
			return false
		}
		if a.Query.Value != cmp.Query.Value {
			return false
		}
	}

	return true
}

// MatchesAnyPartialEqFilter returns whether the receiver matches any filters in the given set.
func (a *AssignedTagsConfig) MatchesAnyPartialEqFilter(filters []*AssignedTagsConfig) bool {
	if len(filters) == 0 {
		return true
	}

	for _, filt := range filters {
		if a.PassesPartialEqFilter(filt) {
			return true
		}
	}

	return false
}

// PassesPartialEqFilter returns whether the AutofillAction matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (a *AutofillAction) PassesPartialEqFilter(cmp *AutofillAction) bool {
	// if the resource is nil, there is nothing to send to the client
	if a == nil {
		return false
	}

	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if !a.Key.PassesPartialEqFilter(cmp.Key) {
		return false
	}

	if cmp.CreatedAt != nil {
		if cmp.CreatedAt.Seconds != 0 {
			if a.CreatedAt.Seconds != cmp.CreatedAt.Seconds {
				return false
			}
		}
		if cmp.CreatedAt.Nanos != 0 {
			if a.CreatedAt.Nanos != cmp.CreatedAt.Nanos {
				return false
			}
		}
	}

	if cmp.CreatedBy != nil {
		if a.CreatedBy == nil {
			return false
		}
		if a.CreatedBy.Value != cmp.CreatedBy.Value {
			return false
		}
	}

	if cmp.LastModifiedAt != nil {
		if cmp.LastModifiedAt.Seconds != 0 {
			if a.LastModifiedAt.Seconds != cmp.LastModifiedAt.Seconds {
				return false
			}
		}
		if cmp.LastModifiedAt.Nanos != 0 {
			if a.LastModifiedAt.Nanos != cmp.LastModifiedAt.Nanos {
				return false
			}
		}
	}

	if cmp.LastModifiedBy != nil {
		if a.LastModifiedBy == nil {
			return false
		}
		if a.LastModifiedBy.Value != cmp.LastModifiedBy.Value {
			return false
		}
	}

	if cmp.ActionId != nil {
		if a.ActionId == nil {
			return false
		}
		if a.ActionId.Value != cmp.ActionId.Value {
			return false
		}
	}

	if cmp.Description != nil {
		if a.Description == nil {
			return false
		}
		if a.Description.Value != cmp.Description.Value {
			return false
		}
	}

	if !a.ArgumentProviders.PassesPartialEqFilter(cmp.ArgumentProviders) {
		return false
	}

	return true
}

// MatchesAnyPartialEqFilter returns whether the receiver matches any filters in the given set.
func (a *AutofillAction) MatchesAnyPartialEqFilter(filters []*AutofillAction) bool {
	if len(filters) == 0 {
		return true
	}

	for _, filt := range filters {
		if a.PassesPartialEqFilter(filt) {
			return true
		}
	}

	return false
}

// PassesPartialEqFilter returns whether the AutofillActionConfig matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (a *AutofillActionConfig) PassesPartialEqFilter(cmp *AutofillActionConfig) bool {
	// if the resource is nil, there is nothing to send to the client
	if a == nil {
		return false
	}

	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if !a.Key.PassesPartialEqFilter(cmp.Key) {
		return false
	}

	if cmp.Remove != nil {
		if a.Remove == nil {
			return false
		}
		if a.Remove.Value != cmp.Remove.Value {
			return false
		}
	}

	if cmp.ActionId != nil {
		if a.ActionId == nil {
			return false
		}
		if a.ActionId.Value != cmp.ActionId.Value {
			return false
		}
	}

	if cmp.Description != nil {
		if a.Description == nil {
			return false
		}
		if a.Description.Value != cmp.Description.Value {
			return false
		}
	}

	if !a.ArgumentProviders.PassesPartialEqFilter(cmp.ArgumentProviders) {
		return false
	}

	return true
}

// MatchesAnyPartialEqFilter returns whether the receiver matches any filters in the given set.
func (a *AutofillActionConfig) MatchesAnyPartialEqFilter(filters []*AutofillActionConfig) bool {
	if len(filters) == 0 {
		return true
	}

	for _, filt := range filters {
		if a.PassesPartialEqFilter(filt) {
			return true
		}
	}

	return false
}

// PassesPartialEqFilter returns whether the Inputs matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (i *Inputs) PassesPartialEqFilter(cmp *Inputs) bool {
	// if the resource is nil, there is nothing to send to the client
	if i == nil {
		return false
	}

	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if !i.Key.PassesPartialEqFilter(cmp.Key) {
		return false
	}

	if cmp.CreatedAt != nil {
		if cmp.CreatedAt.Seconds != 0 {
			if i.CreatedAt.Seconds != cmp.CreatedAt.Seconds {
				return false
			}
		}
		if cmp.CreatedAt.Nanos != 0 {
			if i.CreatedAt.Nanos != cmp.CreatedAt.Nanos {
				return false
			}
		}
	}

	if cmp.CreatedBy != nil {
		if i.CreatedBy == nil {
			return false
		}
		if i.CreatedBy.Value != cmp.CreatedBy.Value {
			return false
		}
	}

	if cmp.LastModifiedAt != nil {
		if cmp.LastModifiedAt.Seconds != 0 {
			if i.LastModifiedAt.Seconds != cmp.LastModifiedAt.Seconds {
				return false
			}
		}
		if cmp.LastModifiedAt.Nanos != 0 {
			if i.LastModifiedAt.Nanos != cmp.LastModifiedAt.Nanos {
				return false
			}
		}
	}

	if cmp.LastModifiedBy != nil {
		if i.LastModifiedBy == nil {
			return false
		}
		if i.LastModifiedBy.Value != cmp.LastModifiedBy.Value {
			return false
		}
	}

	if cmp.Inputs != nil {
		if i.Inputs == nil {
			return false
		}
		if i.Inputs.Value != cmp.Inputs.Value {
			return false
		}
	}

	return true
}

// MatchesAnyPartialEqFilter returns whether the receiver matches any filters in the given set.
func (i *Inputs) MatchesAnyPartialEqFilter(filters []*Inputs) bool {
	if len(filters) == 0 {
		return true
	}

	for _, filt := range filters {
		if i.PassesPartialEqFilter(filt) {
			return true
		}
	}

	return false
}

// PassesPartialEqFilter returns whether the InputsConfig matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (i *InputsConfig) PassesPartialEqFilter(cmp *InputsConfig) bool {
	// if the resource is nil, there is nothing to send to the client
	if i == nil {
		return false
	}

	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if !i.Key.PassesPartialEqFilter(cmp.Key) {
		return false
	}

	if cmp.Remove != nil {
		if i.Remove == nil {
			return false
		}
		if i.Remove.Value != cmp.Remove.Value {
			return false
		}
	}

	if cmp.Inputs != nil {
		if i.Inputs == nil {
			return false
		}
		if i.Inputs.Value != cmp.Inputs.Value {
			return false
		}
	}

	return true
}

// MatchesAnyPartialEqFilter returns whether the receiver matches any filters in the given set.
func (i *InputsConfig) MatchesAnyPartialEqFilter(filters []*InputsConfig) bool {
	if len(filters) == 0 {
		return true
	}

	for _, filt := range filters {
		if i.PassesPartialEqFilter(filt) {
			return true
		}
	}

	return false
}

// PassesPartialEqFilter returns whether the SecretInput matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (s *SecretInput) PassesPartialEqFilter(cmp *SecretInput) bool {
	// if the resource is nil, there is nothing to send to the client
	if s == nil {
		return false
	}

	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if !s.Key.PassesPartialEqFilter(cmp.Key) {
		return false
	}

	if cmp.PlainText != nil {
		if s.PlainText == nil {
			return false
		}
		if s.PlainText.Value != cmp.PlainText.Value {
			return false
		}
	}

	return true
}

// MatchesAnyPartialEqFilter returns whether the receiver matches any filters in the given set.
func (s *SecretInput) MatchesAnyPartialEqFilter(filters []*SecretInput) bool {
	if len(filters) == 0 {
		return true
	}

	for _, filt := range filters {
		if s.PassesPartialEqFilter(filt) {
			return true
		}
	}

	return false
}

// PassesPartialEqFilter returns whether the Studio matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (s *Studio) PassesPartialEqFilter(cmp *Studio) bool {
	// if the resource is nil, there is nothing to send to the client
	if s == nil {
		return false
	}

	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if !s.Key.PassesPartialEqFilter(cmp.Key) {
		return false
	}

	if cmp.CreatedAt != nil {
		if cmp.CreatedAt.Seconds != 0 {
			if s.CreatedAt.Seconds != cmp.CreatedAt.Seconds {
				return false
			}
		}
		if cmp.CreatedAt.Nanos != 0 {
			if s.CreatedAt.Nanos != cmp.CreatedAt.Nanos {
				return false
			}
		}
	}

	if cmp.CreatedBy != nil {
		if s.CreatedBy == nil {
			return false
		}
		if s.CreatedBy.Value != cmp.CreatedBy.Value {
			return false
		}
	}

	if cmp.LastModifiedAt != nil {
		if cmp.LastModifiedAt.Seconds != 0 {
			if s.LastModifiedAt.Seconds != cmp.LastModifiedAt.Seconds {
				return false
			}
		}
		if cmp.LastModifiedAt.Nanos != 0 {
			if s.LastModifiedAt.Nanos != cmp.LastModifiedAt.Nanos {
				return false
			}
		}
	}

	if cmp.LastModifiedBy != nil {
		if s.LastModifiedBy == nil {
			return false
		}
		if s.LastModifiedBy.Value != cmp.LastModifiedBy.Value {
			return false
		}
	}

	if cmp.DisplayName != nil {
		if s.DisplayName == nil {
			return false
		}
		if s.DisplayName.Value != cmp.DisplayName.Value {
			return false
		}
	}

	if cmp.Description != nil {
		if s.Description == nil {
			return false
		}
		if s.Description.Value != cmp.Description.Value {
			return false
		}
	}

	if !s.Template.PassesPartialEqFilter(cmp.Template) {
		return false
	}

	if !s.InputSchema.PassesPartialEqFilter(cmp.InputSchema) {
		return false
	}

	if cmp.FromPackage != nil {
		if s.FromPackage == nil {
			return false
		}
		if s.FromPackage.Value != cmp.FromPackage.Value {
			return false
		}
	}

	return true
}

// MatchesAnyPartialEqFilter returns whether the receiver matches any filters in the given set.
func (s *Studio) MatchesAnyPartialEqFilter(filters []*Studio) bool {
	if len(filters) == 0 {
		return true
	}

	for _, filt := range filters {
		if s.PassesPartialEqFilter(filt) {
			return true
		}
	}

	return false
}

// PassesPartialEqFilter returns whether the StudioConfig matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (s *StudioConfig) PassesPartialEqFilter(cmp *StudioConfig) bool {
	// if the resource is nil, there is nothing to send to the client
	if s == nil {
		return false
	}

	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if !s.Key.PassesPartialEqFilter(cmp.Key) {
		return false
	}

	if cmp.Remove != nil {
		if s.Remove == nil {
			return false
		}
		if s.Remove.Value != cmp.Remove.Value {
			return false
		}
	}

	if cmp.DisplayName != nil {
		if s.DisplayName == nil {
			return false
		}
		if s.DisplayName.Value != cmp.DisplayName.Value {
			return false
		}
	}

	if cmp.Description != nil {
		if s.Description == nil {
			return false
		}
		if s.Description.Value != cmp.Description.Value {
			return false
		}
	}

	if !s.Template.PassesPartialEqFilter(cmp.Template) {
		return false
	}

	if !s.InputSchema.PassesPartialEqFilter(cmp.InputSchema) {
		return false
	}

	return true
}

// MatchesAnyPartialEqFilter returns whether the receiver matches any filters in the given set.
func (s *StudioConfig) MatchesAnyPartialEqFilter(filters []*StudioConfig) bool {
	if len(filters) == 0 {
		return true
	}

	for _, filt := range filters {
		if s.PassesPartialEqFilter(filt) {
			return true
		}
	}

	return false
}

// PassesPartialEqFilter returns whether the StudioSummary matches the passed in filter.
// On a nil comparison, we consider it a pass. Otherwise, all set (non-nil, initialized)
// fields are expected to match their "sibling" field in the comparison. Any non-matching
// value is considered a mismatch of the filter.
func (s *StudioSummary) PassesPartialEqFilter(cmp *StudioSummary) bool {
	// if the resource is nil, there is nothing to send to the client
	if s == nil {
		return false
	}

	// gave nothing to filter on, consider it passing
	if cmp == nil {
		return true
	}

	if !s.Key.PassesPartialEqFilter(cmp.Key) {
		return false
	}

	if cmp.DisplayName != nil {
		if s.DisplayName == nil {
			return false
		}
		if s.DisplayName.Value != cmp.DisplayName.Value {
			return false
		}
	}

	if cmp.Description != nil {
		if s.Description == nil {
			return false
		}
		if s.Description.Value != cmp.Description.Value {
			return false
		}
	}

	if cmp.Immutable != nil {
		if s.Immutable == nil {
			return false
		}
		if s.Immutable.Value != cmp.Immutable.Value {
			return false
		}
	}

	if !s.Entities.PassesPartialEqFilter(cmp.Entities) {
		return false
	}

	if cmp.InUse != nil {
		if s.InUse == nil {
			return false
		}
		if s.InUse.Value != cmp.InUse.Value {
			return false
		}
	}

	return true
}

// MatchesAnyPartialEqFilter returns whether the receiver matches any filters in the given set.
func (s *StudioSummary) MatchesAnyPartialEqFilter(filters []*StudioSummary) bool {
	if len(filters) == 0 {
		return true
	}

	for _, filt := range filters {
		if s.PassesPartialEqFilter(filt) {
			return true
		}
	}

	return false
}
