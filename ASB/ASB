#!/usr/bin/env python
# Copyright (c) 2016 Arista Networks, Inc.  All rights reserved.
# Arista Networks, Inc. Confidential and Proprietary.

# Executable for ASB to ease manual run of ASB instead of copy pasting very long
# commands.

import argparse
import subprocess
import shlex

# ----------------------------------------------------------------------------------
# Constants
# ----------------------------------------------------------------------------------

# For test mode, send emails to ren@
TEST_EMAIL = "ren@arista.com"
DEFAULT_EMAIL = "twieland@arista.com"


# ----------------------------------------------------------------------------------
# Main
# ----------------------------------------------------------------------------------

def main():
   parser = argparse.ArgumentParser( description=( 
                            """
ASB (Automatic Server Provision) using Ansible Pull

By default, ASB runs in test mode. Test mode *WILL* make changes. The only
difference between test mode and production mode is that test mode will
run experimental version of ASB. Test mode does not mean it is a dry run.
""" ) )
   parser.add_argument( "--bypass", action="store_true", default=False,
                        help=( "Option to bypass mandatory 20min wait period - by"
                           " default automatic runs of ASB will wait 20mins before"
                           " taking over control. Enabled by default in test mode." 
                           ) )
   parser.add_argument( "--test", action="store_true", default=False, 
                        help=( "Enable test mode. Sends email to test email "
                               "at 'ren@arista.com' and automatically enables "
                               "bypass mode." ) )

   args = parser.parse_args()

   testmode = args.test
   bypass = True if testmode else args.bypass
   email = TEST_EMAIL if testmode else DEFAULT_EMAIL

   # Full required command parts
   cmd = []

   # 1.FLock to avoid running multiple ASB instances
   cmd.append( "flock -xn --timeout 7200 /tmp/ASB.lck" )

   # 2. XXX: this is a convenient hack to get around authentication errors
   cmd.append( "env GIT_SSL_NO_VERIFY=true" )

   # 3. Ansible command options
   ansible_options = []

   #     3.a Ansible git repo
   ansible_options.append( "--url=%s" % 
      ( "https://gitlab.aristanetworks.com/ren/ASB.git" if
        testmode else "http://gerrit.sjc.aristanetworks.com/ardc-config" ) )

   #     3.b Directory to pull to
   ansible_options.append( "--directory=/root/.ansible/pull" )

   #     3.c Ansible playbook to run
   ansible_options.append( "ASB/ASB.yml" )

   #     3.d Ansible inventory
   ansible_options.append( "--inventory=localhost," )

   # Full git command
   cmd.append( "ansible-pull %s" % " ".join( ansible_options ) )

   # 4. Optional command parts 
   options = []
   if testmode:
      options.append( "TESTMODE=true" )
   if bypass:
      options.append( "BYPASS=true" )
   if email:
      options.append( "EMAIL=%s" % email )
   if len( options ) > 0:
      cmd.append( "--extra-vars \"%s\"" % " ".join( options ) )

   subprocess.call( shlex.split( " ".join( cmd ) ) )


if __name__ == "__main__":
   main()
