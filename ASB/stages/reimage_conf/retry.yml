---
- name: "Query for the number of retries remaining for this host."
  shell: "{{ ASB_DB_REIMG_RETRY_CHECK }}"
  register: retryCount

- name: "If unable to get retry count, create it as a server property on mysql."
  shell: "{{ ASB_DB_REIMG_RETRY_CREATE }}"
  when: retryCount.stdout | default( "" ) == ""

- name: "Query again for the number of retries remaining for this host."
  shell: "{{ ASB_DB_REIMG_RETRY_CHECK }}"
  register: retryCount

# Need to use "stdout_lines[0]" beacuse there can be duplicate server property
# with the same server name, domain, and property name.
# We can switch to "stdout" once a key is created for that table.
- name: "Get the number of retries remaining for this host."
  set_fact:
      RETRY_COUNT: "{{ retryCount.stdout_lines[0] | int }}"
  when: retryCount is defined

- name: "No more retry remaining, set status to HELP_ME and let a human take a look."
  command: "{{ASB_DB_UPDATE_HELP}}"
  when: RETRY_COUNT | int <= 0

- name: "Clean up the record of retry count on mysql."
  shell: "{{ ASB_DB_REIMG_RETRY_DELETE }}"
  when: RETRY_COUNT | int <= 0

- fail: msg="Machine exhausts all retry attempts, aborting."
  when: RETRY_COUNT | int <= 0

- name: "Reset datacenter.servers status to reimage_sanity for retry."
  command: "{{ASB_DB_UPDATE_REIMG_SANITY}}"

- name: "Decrement the number of retries remaining."
  shell: "{{ ASB_DB_REIMG_RETRY_DECREMENT }}"
...
