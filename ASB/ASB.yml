---
- name: "Automatic Server Bringup (ASB)"
  hosts: all
  become: yes
  become_user: root
  pre_tasks:
      # -----------------------------------------------------------------------------
      # 1. If we're good to go (no conflicting Ansible processes), then gather more
      #    information to see how to proceed with setting up this machine.

      - name: "Starting ASB on this machine"
        debug: msg="{{ ansible_hostname }}.{{ ansible_domain }}"

      - name: "Fetch server record from datacenter.servers DB"
        command: "{{ASB_DB_QUERY}}"
        register: machineInfo

      - name: "If there is no server record for this machine, don't proceed"
        assert: { that: machineInfo is defined and machineInfo.stdout != "" }

      - name: "Try to gather information about this machine"
        set_fact:
            STATUS: "{{machineInfo.stdout.split('\t')[0]}}"
            ROLE_NAME: "{{machineInfo.stdout.split('\t')[1]}}"
        when: machineInfo is defined

      # -----------------------------------------------------------------------------
      # 2. Decide whether we should automatically set up this machine.

      - name: "Check minimal required information (status, role) for setup are found"
        assert: { that: STATUS is defined and ROLE_NAME is defined }

      - name: "Current status"
        debug: msg="[{{ansible_hostname}}] status-'{{STATUS}}', role-'{{ROLE_NAME}}'"

      # -----------------------------------------------------------------------------
      # 3. If this machine is good to go, retrieve installation commands
      
      - name: "Query for number of physical disks for this host"
        command: "{{ASB_PROP_QUERY}}"
        register: numDisks

      - name: "Get number of physical disks this host has"
        set_fact:
            DISK_NUM: "{{numDisks.stdout}}" 
        when: numDisks is defined

      - name: "Query installation commands for this server type"
        command: "{{ASB_CMDS_QUERY}}"
        register: cmdInfo

      - name: "Get installation commands"
        set_fact:
            DISK_CMD: "{{cmdInfo.stdout.split('\t')[0]}}"
            SW_CMD: "{{cmdInfo.stdout.split('\t')[1]}}"
        when: cmdInfo is defined


     # ------------------------------------------------------------------------------
     # 4. Apply appropriate server type based on role type of this server.

  roles:
      - { role: atest,     when: ROLE_NAME == 'atest' }
      - { role: build,     when: ROLE_NAME == 'build' }
      - { role: user,      when: ROLE_NAME == 'user'  }
      - { role: stest,     when: ROLE_NAME == 'stest' }
      - { role: atestveos, when: ROLE_NAME == 'atestveos' }
      - { role: scylla,    when: ROLE_NAME == 'scylla' }
      - { role: qworker,   when: ROLE_NAME == 'qworker' }
      - { role: dworker,   when: ROLE_NAME == 'dworker' }
      # --- WIP ---
      #- { role: dist,     when: ROLE_NAME == 'dist' }
...
