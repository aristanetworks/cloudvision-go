// Copyright (c) 2021 Arista Networks, Inc.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: redirector.proto

package gen

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// AddAssignmentRequest is used to create a mapping from a systemID to a region, if none is given it
// creates a default assignment
type AddAssignmentRequest struct {
	SystemID             string   `protobuf:"bytes,1,opt,name=systemID,proto3" json:"systemID,omitempty"`
	Region               string   `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddAssignmentRequest) Reset()         { *m = AddAssignmentRequest{} }
func (m *AddAssignmentRequest) String() string { return proto.CompactTextString(m) }
func (*AddAssignmentRequest) ProtoMessage()    {}
func (*AddAssignmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6b62f76d2931d6, []int{0}
}

func (m *AddAssignmentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddAssignmentRequest.Unmarshal(m, b)
}
func (m *AddAssignmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddAssignmentRequest.Marshal(b, m, deterministic)
}
func (m *AddAssignmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddAssignmentRequest.Merge(m, src)
}
func (m *AddAssignmentRequest) XXX_Size() int {
	return xxx_messageInfo_AddAssignmentRequest.Size(m)
}
func (m *AddAssignmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddAssignmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddAssignmentRequest proto.InternalMessageInfo

func (m *AddAssignmentRequest) GetSystemID() string {
	if m != nil {
		return m.SystemID
	}
	return ""
}

func (m *AddAssignmentRequest) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

// DeleteAssignmentRequest deletes the assignment for a given systemID, if none is specified it
// deletes the default
type DeleteAssignmentRequest struct {
	SystemID             string   `protobuf:"bytes,1,opt,name=systemID,proto3" json:"systemID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteAssignmentRequest) Reset()         { *m = DeleteAssignmentRequest{} }
func (m *DeleteAssignmentRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteAssignmentRequest) ProtoMessage()    {}
func (*DeleteAssignmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6b62f76d2931d6, []int{1}
}

func (m *DeleteAssignmentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteAssignmentRequest.Unmarshal(m, b)
}
func (m *DeleteAssignmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteAssignmentRequest.Marshal(b, m, deterministic)
}
func (m *DeleteAssignmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteAssignmentRequest.Merge(m, src)
}
func (m *DeleteAssignmentRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteAssignmentRequest.Size(m)
}
func (m *DeleteAssignmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteAssignmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteAssignmentRequest proto.InternalMessageInfo

func (m *DeleteAssignmentRequest) GetSystemID() string {
	if m != nil {
		return m.SystemID
	}
	return ""
}

// GetAssignmentsRequest gets all the assignments in a region, if no region is specified it
// returns the assignments in all regions
type GetAssignmentsRequest struct {
	Region               string   `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAssignmentsRequest) Reset()         { *m = GetAssignmentsRequest{} }
func (m *GetAssignmentsRequest) String() string { return proto.CompactTextString(m) }
func (*GetAssignmentsRequest) ProtoMessage()    {}
func (*GetAssignmentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6b62f76d2931d6, []int{2}
}

func (m *GetAssignmentsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAssignmentsRequest.Unmarshal(m, b)
}
func (m *GetAssignmentsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAssignmentsRequest.Marshal(b, m, deterministic)
}
func (m *GetAssignmentsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAssignmentsRequest.Merge(m, src)
}
func (m *GetAssignmentsRequest) XXX_Size() int {
	return xxx_messageInfo_GetAssignmentsRequest.Size(m)
}
func (m *GetAssignmentsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAssignmentsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAssignmentsRequest proto.InternalMessageInfo

func (m *GetAssignmentsRequest) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

// An assignment has an optional systemID and an associated list of clusters, joined by a "/". Each
// cluster is made of a list of hosts separated by ","
type Assignment struct {
	SystemID             string   `protobuf:"bytes,1,opt,name=systemID,proto3" json:"systemID,omitempty"`
	Clusters             string   `protobuf:"bytes,2,opt,name=clusters,proto3" json:"clusters,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Assignment) Reset()         { *m = Assignment{} }
func (m *Assignment) String() string { return proto.CompactTextString(m) }
func (*Assignment) ProtoMessage()    {}
func (*Assignment) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6b62f76d2931d6, []int{3}
}

func (m *Assignment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Assignment.Unmarshal(m, b)
}
func (m *Assignment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Assignment.Marshal(b, m, deterministic)
}
func (m *Assignment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Assignment.Merge(m, src)
}
func (m *Assignment) XXX_Size() int {
	return xxx_messageInfo_Assignment.Size(m)
}
func (m *Assignment) XXX_DiscardUnknown() {
	xxx_messageInfo_Assignment.DiscardUnknown(m)
}

var xxx_messageInfo_Assignment proto.InternalMessageInfo

func (m *Assignment) GetSystemID() string {
	if m != nil {
		return m.SystemID
	}
	return ""
}

func (m *Assignment) GetClusters() string {
	if m != nil {
		return m.Clusters
	}
	return ""
}

type GetAssignmentsResponse struct {
	// All of the assignments in the region
	Assignments          []*Assignment `protobuf:"bytes,1,rep,name=assignments,proto3" json:"assignments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetAssignmentsResponse) Reset()         { *m = GetAssignmentsResponse{} }
func (m *GetAssignmentsResponse) String() string { return proto.CompactTextString(m) }
func (*GetAssignmentsResponse) ProtoMessage()    {}
func (*GetAssignmentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6b62f76d2931d6, []int{4}
}

func (m *GetAssignmentsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAssignmentsResponse.Unmarshal(m, b)
}
func (m *GetAssignmentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAssignmentsResponse.Marshal(b, m, deterministic)
}
func (m *GetAssignmentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAssignmentsResponse.Merge(m, src)
}
func (m *GetAssignmentsResponse) XXX_Size() int {
	return xxx_messageInfo_GetAssignmentsResponse.Size(m)
}
func (m *GetAssignmentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAssignmentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAssignmentsResponse proto.InternalMessageInfo

func (m *GetAssignmentsResponse) GetAssignments() []*Assignment {
	if m != nil {
		return m.Assignments
	}
	return nil
}

// GetAssignmentRequest gets the assignment for a switch, if no systemID is given it tries to get
// the default assignment.
type GetAssignmentRequest struct {
	SystemID             string   `protobuf:"bytes,1,opt,name=systemID,proto3" json:"systemID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAssignmentRequest) Reset()         { *m = GetAssignmentRequest{} }
func (m *GetAssignmentRequest) String() string { return proto.CompactTextString(m) }
func (*GetAssignmentRequest) ProtoMessage()    {}
func (*GetAssignmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6b62f76d2931d6, []int{5}
}

func (m *GetAssignmentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAssignmentRequest.Unmarshal(m, b)
}
func (m *GetAssignmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAssignmentRequest.Marshal(b, m, deterministic)
}
func (m *GetAssignmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAssignmentRequest.Merge(m, src)
}
func (m *GetAssignmentRequest) XXX_Size() int {
	return xxx_messageInfo_GetAssignmentRequest.Size(m)
}
func (m *GetAssignmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAssignmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAssignmentRequest proto.InternalMessageInfo

func (m *GetAssignmentRequest) GetSystemID() string {
	if m != nil {
		return m.SystemID
	}
	return ""
}

type GetAssignmentResponse struct {
	// The assignment for the specified switch, or the default assignment if one wasn't found
	Assignment           *Assignment `protobuf:"bytes,1,opt,name=assignment,proto3" json:"assignment,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetAssignmentResponse) Reset()         { *m = GetAssignmentResponse{} }
func (m *GetAssignmentResponse) String() string { return proto.CompactTextString(m) }
func (*GetAssignmentResponse) ProtoMessage()    {}
func (*GetAssignmentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6b62f76d2931d6, []int{6}
}

func (m *GetAssignmentResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAssignmentResponse.Unmarshal(m, b)
}
func (m *GetAssignmentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAssignmentResponse.Marshal(b, m, deterministic)
}
func (m *GetAssignmentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAssignmentResponse.Merge(m, src)
}
func (m *GetAssignmentResponse) XXX_Size() int {
	return xxx_messageInfo_GetAssignmentResponse.Size(m)
}
func (m *GetAssignmentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAssignmentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAssignmentResponse proto.InternalMessageInfo

func (m *GetAssignmentResponse) GetAssignment() *Assignment {
	if m != nil {
		return m.Assignment
	}
	return nil
}

func init() {
	proto.RegisterType((*AddAssignmentRequest)(nil), "AddAssignmentRequest")
	proto.RegisterType((*DeleteAssignmentRequest)(nil), "DeleteAssignmentRequest")
	proto.RegisterType((*GetAssignmentsRequest)(nil), "GetAssignmentsRequest")
	proto.RegisterType((*Assignment)(nil), "Assignment")
	proto.RegisterType((*GetAssignmentsResponse)(nil), "GetAssignmentsResponse")
	proto.RegisterType((*GetAssignmentRequest)(nil), "GetAssignmentRequest")
	proto.RegisterType((*GetAssignmentResponse)(nil), "GetAssignmentResponse")
}

func init() {
	proto.RegisterFile("redirector.proto", fileDescriptor_db6b62f76d2931d6)
}

var fileDescriptor_db6b62f76d2931d6 = []byte{
	// 313 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x4d, 0x4b, 0xc3, 0x40,
	0x10, 0x25, 0x2d, 0x96, 0x3a, 0xa5, 0x52, 0x96, 0x36, 0x0d, 0xeb, 0xa5, 0xe4, 0x54, 0x10, 0xa7,
	0x10, 0xf1, 0x5a, 0x88, 0x44, 0x8a, 0x1e, 0x73, 0xf4, 0x66, 0x9b, 0x31, 0x04, 0x92, 0x6c, 0xdc,
	0xdd, 0x1c, 0xfa, 0x43, 0xfc, 0xbf, 0x62, 0xda, 0xe6, 0x8b, 0x44, 0xf4, 0xf8, 0xf6, 0xed, 0xbc,
	0x37, 0x33, 0x6f, 0x60, 0x26, 0x29, 0x88, 0x24, 0x1d, 0xb4, 0x90, 0x98, 0x49, 0xa1, 0x05, 0xbf,
	0x0d, 0x85, 0x08, 0x63, 0xda, 0x14, 0x68, 0x9f, 0x7f, 0x6c, 0x28, 0xc9, 0xf4, 0xf1, 0x44, 0xda,
	0xaf, 0x30, 0x77, 0x83, 0xc0, 0x55, 0x2a, 0x0a, 0xd3, 0x84, 0x52, 0xed, 0xd3, 0x67, 0x4e, 0x4a,
	0x33, 0x0e, 0x63, 0x75, 0x54, 0x9a, 0x92, 0x17, 0xcf, 0x32, 0x56, 0xc6, 0xfa, 0xda, 0x2f, 0x31,
	0x33, 0x61, 0x24, 0x29, 0x8c, 0x44, 0x6a, 0x0d, 0x0a, 0xe6, 0x8c, 0xec, 0x47, 0x58, 0x7a, 0x14,
	0x93, 0xa6, 0x7f, 0xc9, 0xd9, 0x1b, 0x58, 0xec, 0x48, 0x57, 0x35, 0xea, 0x52, 0x54, 0xf9, 0x18,
	0x0d, 0x1f, 0x0f, 0xa0, 0xfa, 0xfd, 0x6b, 0xa7, 0x1c, 0xc6, 0x87, 0x38, 0x57, 0x9a, 0xa4, 0x3a,
	0xf7, 0x5a, 0x62, 0x7b, 0x07, 0x66, 0xdb, 0x56, 0x65, 0x22, 0x55, 0xc4, 0xee, 0x61, 0xf2, 0x5e,
	0x3d, 0x5b, 0xc6, 0x6a, 0xb8, 0x9e, 0x38, 0x13, 0xac, 0x4d, 0x55, 0xe7, 0x6d, 0x07, 0xe6, 0x0d,
	0xa1, 0xbf, 0xcc, 0xec, 0xb5, 0x66, 0x2e, 0xbd, 0xef, 0x00, 0x2a, 0xed, 0xa2, 0xac, 0x65, 0x5d,
	0xa3, 0x9d, 0xaf, 0x01, 0x80, 0x5f, 0xc6, 0xcd, 0xb6, 0x30, 0x6d, 0x64, 0xc9, 0x16, 0xd8, 0x95,
	0x2d, 0x37, 0xf1, 0x74, 0x11, 0x78, 0xb9, 0x08, 0x7c, 0xfe, 0xb9, 0x08, 0xe6, 0xc1, 0xac, 0x9d,
	0x1f, 0xb3, 0xb0, 0x27, 0xd2, 0x5e, 0x15, 0x17, 0x6e, 0x9a, 0x7b, 0x65, 0x26, 0x76, 0xe6, 0xcb,
	0x97, 0xd8, 0x13, 0xc0, 0x16, 0xa6, 0x0d, 0x86, 0x2d, 0xb0, 0x6b, 0xc3, 0xdc, 0xc4, 0xce, 0x25,
	0x3e, 0x5d, 0xbd, 0x0d, 0x43, 0x4a, 0xf7, 0xa3, 0xa2, 0xb3, 0x87, 0xef, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x3f, 0xdd, 0x4a, 0x64, 0x13, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RedirectorClient is the client API for Redirector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RedirectorClient interface {
	// AddAssignment creates an assignment, either as a default or for a given switch.
	AddAssignment(ctx context.Context, in *AddAssignmentRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// DeleteAssignment deletes either the default assignment or a switch's assignment.
	DeleteAssignment(ctx context.Context, in *DeleteAssignmentRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// GetAssignments gets all the assignments for a given region, or all assignments if the region
	// is empty.
	GetAssignments(ctx context.Context, in *GetAssignmentsRequest, opts ...grpc.CallOption) (*GetAssignmentsResponse, error)
	// GetAssignment gets the assignments for a specific switch, if no assignments exist for that ID
	// or no ID is given then it returns a default assignment if one exists.
	GetAssignment(ctx context.Context, in *GetAssignmentRequest, opts ...grpc.CallOption) (*GetAssignmentResponse, error)
}

type redirectorClient struct {
	cc grpc.ClientConnInterface
}

func NewRedirectorClient(cc grpc.ClientConnInterface) RedirectorClient {
	return &redirectorClient{cc}
}

func (c *redirectorClient) AddAssignment(ctx context.Context, in *AddAssignmentRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/Redirector/AddAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redirectorClient) DeleteAssignment(ctx context.Context, in *DeleteAssignmentRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/Redirector/DeleteAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redirectorClient) GetAssignments(ctx context.Context, in *GetAssignmentsRequest, opts ...grpc.CallOption) (*GetAssignmentsResponse, error) {
	out := new(GetAssignmentsResponse)
	err := c.cc.Invoke(ctx, "/Redirector/GetAssignments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redirectorClient) GetAssignment(ctx context.Context, in *GetAssignmentRequest, opts ...grpc.CallOption) (*GetAssignmentResponse, error) {
	out := new(GetAssignmentResponse)
	err := c.cc.Invoke(ctx, "/Redirector/GetAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RedirectorServer is the server API for Redirector service.
type RedirectorServer interface {
	// AddAssignment creates an assignment, either as a default or for a given switch.
	AddAssignment(context.Context, *AddAssignmentRequest) (*empty.Empty, error)
	// DeleteAssignment deletes either the default assignment or a switch's assignment.
	DeleteAssignment(context.Context, *DeleteAssignmentRequest) (*empty.Empty, error)
	// GetAssignments gets all the assignments for a given region, or all assignments if the region
	// is empty.
	GetAssignments(context.Context, *GetAssignmentsRequest) (*GetAssignmentsResponse, error)
	// GetAssignment gets the assignments for a specific switch, if no assignments exist for that ID
	// or no ID is given then it returns a default assignment if one exists.
	GetAssignment(context.Context, *GetAssignmentRequest) (*GetAssignmentResponse, error)
}

// UnimplementedRedirectorServer can be embedded to have forward compatible implementations.
type UnimplementedRedirectorServer struct {
}

func (*UnimplementedRedirectorServer) AddAssignment(ctx context.Context, req *AddAssignmentRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAssignment not implemented")
}
func (*UnimplementedRedirectorServer) DeleteAssignment(ctx context.Context, req *DeleteAssignmentRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAssignment not implemented")
}
func (*UnimplementedRedirectorServer) GetAssignments(ctx context.Context, req *GetAssignmentsRequest) (*GetAssignmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssignments not implemented")
}
func (*UnimplementedRedirectorServer) GetAssignment(ctx context.Context, req *GetAssignmentRequest) (*GetAssignmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssignment not implemented")
}

func RegisterRedirectorServer(s *grpc.Server, srv RedirectorServer) {
	s.RegisterService(&_Redirector_serviceDesc, srv)
}

func _Redirector_AddAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedirectorServer).AddAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Redirector/AddAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedirectorServer).AddAssignment(ctx, req.(*AddAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Redirector_DeleteAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedirectorServer).DeleteAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Redirector/DeleteAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedirectorServer).DeleteAssignment(ctx, req.(*DeleteAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Redirector_GetAssignments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssignmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedirectorServer).GetAssignments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Redirector/GetAssignments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedirectorServer).GetAssignments(ctx, req.(*GetAssignmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Redirector_GetAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedirectorServer).GetAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Redirector/GetAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedirectorServer).GetAssignment(ctx, req.(*GetAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Redirector_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Redirector",
	HandlerType: (*RedirectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddAssignment",
			Handler:    _Redirector_AddAssignment_Handler,
		},
		{
			MethodName: "DeleteAssignment",
			Handler:    _Redirector_DeleteAssignment_Handler,
		},
		{
			MethodName: "GetAssignments",
			Handler:    _Redirector_GetAssignments_Handler,
		},
		{
			MethodName: "GetAssignment",
			Handler:    _Redirector_GetAssignment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "redirector.proto",
}
