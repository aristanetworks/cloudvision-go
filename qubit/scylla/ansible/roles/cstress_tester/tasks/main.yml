---
# Run a cstress test
#
- name: "Create directory for cstress test logs"
  file: path={{ REMOTE_TEST_DIR }} state=directory

# attempting to read partitions that haven't been written fails the test
- name: "Find maximum partitions written"
  shell: "grep 'Total partitions' {{ WRITE_TEST_LOG }} | awk '{print($4)}'"
  register: partitions_written
  when: " TEST_MODE == 'read' "

- name: "Set partition count to be read"
  set_fact: "TOTAL_READ_PARTITIONS={{ partitions_written.stdout }}"
  when: " TEST_MODE == 'read' "

# cannot set TEST_ITERATIONS with min value, need to use a different variable
# ansible gotcha?
- name: "Use min of TEST_ITERATIONS or TOTAL_READ_PARTITIONS as TEST_ITERATIONS for read"
  set_fact: ITERATIONS="{{ [ TOTAL_READ_PARTITIONS|int, TEST_ITERATIONS|int ] | min }}"
  when: " TEST_MODE == 'read' "

- name: "Use TEST_ITERATIONS as ITERATIONS for write"
  set_fact: ITERATIONS={{ TEST_ITERATIONS }}
  when: " TEST_MODE == 'write' "

# setup the iteration range based on load server index
- set_fact: index="{{play_hosts.index( inventory_hostname ) }}"
- set_fact: begin_iteration="{{ 1 + (ITERATIONS|int) * (index|int) }}"
- set_fact: end_iteration="{{ (ITERATIONS|int) * (1 + (index|int)) }}"

# enable tracing and debug to catch information useful for postmortem
# drop keyspace seems to take lot of time causing cqlsh timeouts
# we use large timeout value in /etc/cqlshrc
- name: "Drop keyspace before write"
  shell: "cqlsh --cqlshrc=/etc/cqlshrc --debug {{ CONTACT_POINT }} -u {{ SCYLLA_ROOT_USER }} -p {{ SCYLLA_ROOT_PASSWORD }} -e \"TRACING ON; DROP KEYSPACE IF EXISTS {{ PERFTEST_KEYSPACE }}\" > {{ LOGFILE }}.drop"
  when: " TEST_MODE == 'write' "

# cqlsh returns only after the keyspace operation has caused the schema
# change to be reflected on all nodes. There is no need to wait.

- name: "Setup CMD for write"
  set_fact: CMD="{{ WRITE_CMD }}"
  when: " TEST_MODE == 'write' "

- name: "Setup CMD for reads"
  set_fact: CMD="{{ READ_CMD }}"
  when: " TEST_MODE == 'read' "

# refer to Scylla github issue # 420
# use 1 thread and 1 request to create the table
# use a temporary .create suffixed logfile only for
# debugging issues with create command. We cannot use
# the same logfile has the actual write/read command
# since stats are pulled from it
- name: "Create the table"
  shell: "{{ CREATE_CMD }} > {{ LOGFILE }}.create"
  when: " TEST_MODE == 'write' "

- name: "Log test command"
  shell: "echo \"CMD: {{ CMD }}\" > {{ LOGFILE }}"

- name: "Log test start time"
  shell: "echo \"CMD_START: `date +%F_%T`\" >> {{ LOGFILE }}"

- name: "Execute the command"
  shell: "{{ CMD }} >> {{ LOGFILE }}"

- name: "Log test stop time"
  shell: "echo \"CMD_STOP: `date +%F_%T`\" >> {{ LOGFILE }}"

- name: "Find test logs"
  shell: "find {{ REMOTE_TEST_DIR }} -type f -name \"*.log\";"
  register: logfiles

- name: "Fetch test logs"
  fetch: src={{ item }} dest="{{ LOCAL_TEST_DIR}}/" flat=yes
  with_items: "{{ logfiles.stdout_lines }}"
  when: logfiles | succeeded
...
