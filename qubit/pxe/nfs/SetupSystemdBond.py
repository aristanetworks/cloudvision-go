#!/usr/bin/python

"""
# Copyright (c) 2016 Arista Networks, Inc.  All rights reserved.
# Arista Networks, Inc. Confidential and Proprietary.

SetupSystemdBond.py  [-d] <MAC address>

Defines a bond0 device that is made up of all the attached ethernet devices.
Creates files
   /etc/systemd/network/
      10.bond0.link
      10.bond0.netdev
      10.bond0Slaves.network
      10.bond0Dhcp.network
   /etc/modprobe.d/bonding.conf
Or, if "-d" is provided, creates them under '/tmp/etc'.
You will also need to delete any pre-existing files of the form:
   /etc/sysconfig/network-scripts/ifcfg-bond*
   /etc/sysconfig/network-scripts/ifcfg-eno*
Tested on Fedora 21 MySQL boxes.
"""

import errno
import os
import sys

class BondConfig( object ):
   def __init__( self, rootDir="/tmp", generatorName="SetupSystemdBond.py" ):
      """
      By default, writes files under /tmp.
      Pass in "/" if you want them written there.
      """
      self.rootDir = rootDir
      self.generatorName = generatorName
      self.systemdNetworkDir = os.path.join( self.rootDir, "etc/systemd/network" )
      self.modprobDir = os.path.join( self.rootDir, "etc/modprobe.d" )

      self.mkdir_p( self.systemdNetworkDir )
      self.mkdir_p( self.modprobDir )

   def mkdir_p( self, path ):
      try:
         os.makedirs( path )
      except OSError as e:
         if e.errno == errno.EEXIST and os.path.isdir( path ):
            pass
         else:
            raise

   def genBondLinkFile( self, bondNum, hwAddress ):
      """
      We need the MAC address assigned to the bond0 interface to be
      stable, because the dhcp server has static IP <-> MAC mapping.
      The bond driver will take on the MAC address of the first bond
      slave interface that is added.  But systemd-networkd doesn't have
      a clean way to specify the order in with interfaces are brought
      up and added to the bond.

      Explicitly specify the MAC address of the bond0 interface using
      a systemd.link file.
      """
      filename = os.path.join( self.systemdNetworkDir,
                               "10.bond%d.link" % ( bondNum, ) )
      with open( filename, "w" ) as f:
         print >> f, "# Generated by " + self.generatorName
         print >> f, "[Match]"
         print >> f, "Type=bond"
         print >> f, ""
         print >> f, "[Link]"
         print >> f, "MACAddress=%s" % ( hwAddress, )

   def genBondNetdevFile( self, bondNum ):
      """
      We need to specify the bonding parameters or it won't talk to
      our switches.

      There are "two" features that cause problems with this goal.  First,
      the kernel automatically creates bond0 with Mode=balance-rr when
      the bonding driver is loaded.  Second, systemd as a policy does not
      over write existing network configs.

      So even though we have a bond0.netdev file, it never takes affect.
      (See bug https://bugs.freedesktop.org/show_bug.cgi?id=82956")

      The workaround is to pass "max_bond=0" to the bonding driver when
      it is loaded.  This prevents the automatic creation of bond0.
      """

      filename = os.path.join( self.systemdNetworkDir,
                               "10.bond%d.netdev" % ( bondNum, ) )
      with open( filename, "w" ) as f:
         print >> f, "# Generated by " + self.generatorName
         print >> f, "[NetDev]"
         print >> f, "Name=bond%d" % ( bondNum, )
         print >> f, "Kind=bond"
         print >> f, ""
         print >> f, "[Bond]"
         print >> f, "Mode=802.3ad"
         print >> f, "TransmitHashPolicy=layer3+4"
         print >> f, "MIIMonitorSec=1"

      filename = os.path.join( self.modprobDir, "bonding.conf" )
      with open( filename, "w" ) as f:
         print >> f, "# Generated by " + self.generatorName
         print >> f, "# https://bugs.freedesktop.org/show_bug.cgi?id=82956"
         print >> f, "options bonding max_bonds=0"


   def genBondSlavesFile( self, bondNum ):
      """
      We want to add physical network interfaces to the bond. The main
      problem is that we don't know all the names of the interfaces.
      My work around this is to specify Path="pci-*", which should
      ignore bond, and other virtual types of interfaces.

      If we want to support more than one bond interface, we will need
      to provide a way to specify which interfaces goes into which bond.
      For now just assert.
      """

      assert bondNum == 0

      filename = os.path.join( self.systemdNetworkDir,
                               "10.bond%dSlaves.network" % ( bondNum, ) )
      with open( filename, "w" ) as f:
         print >> f, "# Generated by " + self.generatorName
         print >> f, "[Match]"
         print >> f, "# Put pci attached net interfaces into bond%d" % ( bondNum, )
         print >> f, "Path=pci-*"
         print >> f, ""
         print >> f, "[Network]"
         print >> f, "Bond=bond%d" % ( bondNum, )

   def genBondDhcp( self, bondNum ):
      """
      Configure the bond interface with DHCP.
      """

      filename = os.path.join( self.systemdNetworkDir,
                               "10.bond%dDhcp.network" % ( bondNum, ) )
      with open( filename, "w" ) as f:
         print >> f, "# Generated by " + self.generatorName

         print >> f, "[Match]"
         print >> f, "Name=bond%d" % ( bondNum, )
         print >> f, ""
         print >> f, "[Network]"
         print >> f, "DHCP=both"

   def genBond( self, bondNum, hwAddress ):
      self.genBondLinkFile( bondNum, hwAddress )
      self.genBondNetdevFile( bondNum )
      self.genBondSlavesFile( bondNum )
      self.genBondDhcp( bondNum )

def main():
   rootDir = '/'
   if len(sys.argv) > 1 and sys.argv[1] == '-d':
      rootDir = '/tmp'
      del sys.argv[1]
   # Insist on a MAC address being passed in, eg "00:25:90:d9:e5:9e"
   if len( sys.argv ) != 2:
      print "TRY: SetupSystemdBond.py [-d]  <hwAddress>"
      sys.exit( 1 )

   generatorName = os.path.basename( sys.argv[0] )
   hwAddress = sys.argv[1]
   bondConfig = BondConfig( rootDir, generatorName )
   bondConfig.genBond( 0, hwAddress )

if __name__ == "__main__":
   main()
