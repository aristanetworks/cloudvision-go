#jinja2: lstrip_blocks: True, trim_blocks: True
#cloud-config

# File automatically generated by ansible
# WARNING: the ansible playbook in the ardc-config repo is now generating those
# files automatically. See the README.md in ardc-config.git/ops/ansible for more information

coreos:
  units:
    - name: docker.service
      drop-ins:
        - name: 50-options.conf
          content: |
            {% macro docker_ir() %}{% include "common/files/docker.50-options.conf" %}{% endmacro %}{{ docker_ir() | indent(12, True) }}
    - name: ansible-metadata.service
      command: start
      content: |
        [Unit]
        Description=Metadata agent to create short hostname env var file
        Requires=network-online.target systemd-resolved.service
        After=network-online.target systemd-resolved.service
        [Service]
        Type=oneshot
        Environment=OUTPUT=/run/coreos/shorthostname
        ExecStart=/usr/bin/bash -c 'echo "SHORTHOSTNAME=$(hostname -s)" > ${OUTPUT}'
    - name: ansible-install.service
      command: start
      content: |
        [Unit]
        Description=Run ansible to provision the machine
        ConditionPathExists=!/home/core/.ansible-installed
        Requires=network-online.target ansible-metadata.service
        After=network-online.target ansible-metadata.service
        Wants=data2.mount data3.mount data4.mount data5.mount data6.mount data7.mount data8.mount
        After=data2.mount data3.mount data4.mount data5.mount data6.mount data7.mount data8.mount
        [Service]
        Type=oneshot
        EnvironmentFile=/run/coreos/shorthostname
        Environment=UUIDFILE=/tmp/rkt-uuid-ansible-install
        ExecStartPre=/usr/bin/rkt --insecure-options=image,http fetch docker://registry.docker.sjc.aristanetworks.com:5000/k8s/install
        ExecStartPre=/usr/bin/mkdir -p /tmp/ansibleinstall
        ExecStartPre=/usr/bin/chmod 777 /tmp/ansibleinstall
        ExecStart=/usr/bin/rkt run docker://registry.docker.sjc.aristanetworks.com:5000/k8s/install \
                    --name=ansible-install \
                    --uuid-file-save=${UUIDFILE} \
                    --volume ansibleinstall,kind=host,source=/tmp/ansibleinstall \
                    --mount volume=ansibleinstall,target=/ansibleinstall \
                    --net=host \
                    --dns=host \
                    --hostname=${SHORTHOSTNAME} \
                    --exec bash \
                    -- -c "git clone --depth 1 http://gerrit/ardc-config && cd ardc-config/ops/ansible && ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -v playbook.yml -l $(hostname -s) > /ansibleinstall/ansible-playbook-$(date '+%F-%H-%M-%S').logs 2>&1"
        ExecStartPost=-/usr/bin/rkt rm --uuid-file=${UUIDFILE}
        ExecStartPost=/usr/bin/touch /home/core/.ansible-installed
    - name: data2.mount
      command: start
      content: |
        [Mount]
        What=LABEL=DISK2
        Where=/data2
        Type=ext4
        Options=nofail
        TimeoutSec=10
    - name: data3.mount
      command: start
      content: |
        [Mount]
        What=LABEL=DISK3
        Where=/data3
        Type=ext4
        Options=nofail
        TimeoutSec=10
    - name: data4.mount
      command: start
      content: |
        [Mount]
        What=LABEL=DISK4
        Where=/data4
        Type=ext4
        Options=nofail
        TimeoutSec=10
    - name: data5.mount
      command: start
      content: |
        [Mount]
        What=LABEL=DISK5
        Where=/data5
        Type=ext4
        Options=nofail
        TimeoutSec=10
    - name: data6.mount
      command: start
      content: |
        [Mount]
        What=LABEL=DISK6
        Where=/data6
        Type=ext4
        Options=nofail
        TimeoutSec=10
    - name: data7.mount
      command: start
      content: |
        [Mount]
        What=LABEL=DISK7
        Where=/data7
        Type=ext4
        Options=nofail
        TimeoutSec=10
    - name: data8.mount
      command: start
      content: |
        [Mount]
        What=LABEL=DISK8
        Where=/data8
        Type=ext4
        Options=nofail
        TimeoutSec=10
  {% if hostvars[item]['ETCD2'] %}
    - name: etcd2.service
      command: start
  etcd2:
    name: {{ hostvars[item]['etcd2_name'] }}
    initial-cluster: {{ etcd2_endpoint_cluster | join(",") }}
    advertise-client-urls: http://{{ hostvars[item]['ansible_host'] }}:2379
    initial-advertise-peer-urls: http://{{ hostvars[item]['ansible_host'] }}:2380
    listen-client-urls: http://0.0.0.0:2379
    listen-peer-urls: http://0.0.0.0:2380
    cors: "*"
  {% endif %}
  update:
    reboot-strategy: off

ssh_authorized_keys:
  {% for key in hostvars[item]['ssh_keys'] %}
  - {{ key }}
  {% endfor %}
