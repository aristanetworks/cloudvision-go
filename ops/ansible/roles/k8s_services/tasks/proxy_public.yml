# Copyright (c) 2017 Arista Networks, Inc.  All rights reserved.
# Arista Networks, Inc. Confidential and Proprietary.
# Subject to Arista Networks, Inc.'s EULA.
# FOR INTERNAL USE ONLY. NOT FOR DISTRIBUTION.

---

# https proxy. Exposes port 443 only.
- name: Add nghttpx public and private https config
  with_dict: "{{ services }}"
  kubernetes:
    api_endpoint: 127.0.0.1:8001
    state: apply
    insecure: true
    inline_data: |
      #jinja2: block_start_string: '[%', block_end_string: '%]', variable_start_string: '[[', variable_end_string: ']]'
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: nghttpx-conf-https-[[ item.key ]]
      data:
        nghttpx.conf.tmpl: |
          # Copyright (c) 2017 Arista Networks, Inc.  All rights reserved.
          # Arista Networks, Inc. Confidential and Proprietary.
          # Subject to Arista Networks, Inc.'s EULA.
          # FOR INTERNAL USE ONLY. NOT FOR DISTRIBUTION.

          no-via=yes
          add-x-forwarded-for=yes
          server-name=Arista

          # frontend HTTPS
          # TODO: Bind to the correct interface
          frontend=*,443

          # frontend HTTP for nghttpx api access
          # Must ALWAYS be a unix socket local to the pod. NEVER expose.
          # Disabled for now
          # frontend=unix:/var/sharepod/nghttpxapi/socket.sock,80;no-tls;api

          # Let's use ingest cert for now as default cert
          # TODO: Change to www as default cert probably
          private-key-file=/etc/letsencrypt/live/ingest/privkey.pem
          certificate-file=/etc/letsencrypt/live/ingest/fullchain.pem

          # Catch-all backend
          ###################
          backend=127.0.0.1,8080

          # TODO
          # Must define a HTTP/1.1 service answering Let's Encrypt challenges: '<host>,<port>'

          # Exposed GRPC and HTTP services
          ################################
      [% for name in item.value %]
          # Service [[name]]
          {{- if exists "/endpoints/default/[[name]]"}}
          subcert=/etc/letsencrypt/live/[[name]]/privkey.pem:/etc/letsencrypt/live/[[name]]/fullchain.pem
              {{- range $i, $subset := (json (getv "/endpoints/default/[[name]]")).subsets }}
              {{- range $j, $addr := $subset.addresses }}
              {{- range $k, $port := $subset.ports }}
          backend={{$addr.ip}},{{.port}};[[name]].[[k8s_domain]][% if item.value[name] == "grpc" %];proto=h2[% endif %]
              {{- end }}
              {{- end }}
              {{- end }}
          {{- end }}
      [% endfor %]

- name: deploy public and private proxy2 daemonset for https
  with_dict: "{{ services }}"
  kubernetes:
    api_endpoint: 127.0.0.1:8001
    insecure: true
    state: apply
    inline_data: |
      apiVersion: extensions/v1beta1
      kind: DaemonSet
      metadata:
        name: proxy2-{{ item.key }}
      spec:
        selector:
          matchLabels:
            app: proxy2-{{ item.key }}
        template:
          metadata:
            name: proxy2-{{ item.key }}
            # annotations:
            #   TODO: enable some kind of metric to monitor nghttpx
            #   prometheus.io/scrape: "true"
            #   prometheus.io/port: "9201"
            labels:
              app: proxy2-{{ item.key }}
          spec:
            nodeSelector:
              proxy: {{ item.key }}
      {% if item.key == "public" or cluster_name in ['dev', 'staging'] %}
            hostNetwork: true
      {% endif %}
            containers:
            - name: proxy2
              image: {{ registry_hostname }}k8s/proxy2
              imagePullPolicy: Always
              args:
                - -backend
                - kubernetes
              ports:
                - name: https
                  containerPort: 443
              volumeMounts:
              - name: nghttpx-conf-https-{{ item.key }}
                mountPath: /etc/confd/templates/nghttpx.conf.tmpl
                subPath: nghttpx.conf.tmpl
      {% for name in item.value %}
              - name: lecert-{{ name }}
                mountPath: /etc/letsencrypt/live/{{ name }}
      {% endfor %}
            - name: catchall-service
              image: nginx:1.13.5
              volumeMounts:
              - name: nginx-catchall-config
                mountPath: /etc/nginx/nginx.conf
                subPath: nginx.conf
            volumes:
            - name: nginx-catchall-config
              configMap:
                name: nginx-catchall-config
            - name: nghttpx-conf-https-{{ item.key }}
              configMap:
                name: nghttpx-conf-https-{{ item.key }}
      {% for name in item.value %}
            - name: lecert-{{ name }}
              secret:
                secretName: lecert-{{ name }}.{{ k8s_domain }}
      {% endfor %}
