# Copyright (c) 2017 Arista Networks, Inc.  All rights reserved.
# Arista Networks, Inc. Confidential and Proprietary.
# Subject to Arista Networks, Inc.'s EULA.
# FOR INTERNAL USE ONLY. NOT FOR DISTRIBUTION.

---

- name: create security code
  local_action: shell uuidgen | cut -c1-8
  register: format_code

- name: ask user for the code
  pause:
    prompt: "Namenode Format will destroy ALL the cluster data. Please enter the code '{{format_code.stdout}}' to validate the action. Press Ctrl+c and then \"a\" to abort"
  register: user_input

- name: Format zkfc
  when: "user_input.user_input == format_code.stdout"
  local_action: >
    command
    kubectl run zkfc-format
    --attach --rm --restart=Never --record=true
    --image=registry.docker.sjc.aristanetworks.com:5000/aeris/k8s-hadoop
    --overrides
    '{ "apiVersion": "v1", "spec":
      {
        "nodeSelector": { "kubernetes.io/hostname": "{{ groups.namenodes[0] }}" },
        "containers": [ {
          "name": "zkfc-format",
          "image": "registry.docker.sjc.aristanetworks.com:5000/aeris/k8s-hadoop",
          "imagePullPolicy": "Always",
          "env": [ {"name": "HADOOP_LOGFILE", "value": "zkfcformat.log" } ],
          "args": ["./bin/hdfs", "zkfc", "-Ddfs.ha.namenode.id=nn0", "-formatZK", "-force"],
          "volumeMounts": [
            { "mountPath": "/logs", "name": "logs" } ] } ],
        "volumes": [
          { "name": "logs", "hostPath": { "path": "{{ hostvars[groups.namenodes[0]]['hadoop_namenode_dirs'][0] }}/logs" } } ] } }'
  register: formatzkfc

- name: Check output of the format zkfc
  when: "user_input.user_input == format_code.stdout"
  pause:
    prompt: "Press Enter to resume. Press Ctrl+c and then \"a\" to abort.\nBootstrap standby result:\nSTDOUT: {{ formatzkfc.stdout }}\nSTDERR: {{ formatzkfc.stderr }}"

- name: Format namenode
  when: "user_input.user_input == format_code.stdout"
  local_action: >
    command
    kubectl run namenode-format
    --attach --rm --restart=Never --record=true
    --image=registry.docker.sjc.aristanetworks.com:5000/aeris/k8s-hadoop
    --overrides
    '{ "apiVersion": "v1", "spec":
      {
        "nodeSelector": { "kubernetes.io/hostname": "{{ groups.namenodes[0] }}" },
        "containers": [ {
          "name": "namenode-format",
          "image": "registry.docker.sjc.aristanetworks.com:5000/aeris/k8s-hadoop",
          "imagePullPolicy": "Always",
          "env": [ {"name": "HADOOP_LOGFILE", "value": "namenodeformat.log" } ],
          "args": ["./bin/hdfs", "namenode", "-Ddfs.ha.namenode.id=nn0", "-format", "-force"],
          "volumeMounts": [
            { "mountPath": "/logs", "name": "logs" },
            { "mountPath": "/data1", "name": "data1" },
            { "mountPath": "/data2", "name": "data2" }
            ] } ],
        "volumes": [
          { "name": "logs", "hostPath": { "path": "{{ hostvars[groups.namenodes[0]]['hadoop_namenode_dirs'][0] }}/logs" } },
          { "name": "data1", "hostPath": { "path": "{{ hostvars[groups.namenodes[0]]['hadoop_namenode_dirs'][0] }}/data" } },
          { "name": "data2", "hostPath": { "path": "{{ hostvars[groups.namenodes[0]]['hadoop_namenode_dirs'][1] }}/data" } }
        ] } }'
  register: namenodeformat

- name: Check output of the namenode format init phase
  when: "user_input.user_input == format_code.stdout"
  pause:
    prompt: "Press Enter to resume. Press Ctrl+c and then \"a\" to abort.\nNamenode format result:\nSTDOUT: {{ namenodeformat.stdout }}\nSTDERR: {{ namenodeformat.stderr }}"

- name: Bootstrap standby
  when: "user_input.user_input == format_code.stdout"
  local_action: >
    command
    kubectl run namenode-bootstrap
    --attach --rm --restart=Never --record=true
    --image=registry.docker.sjc.aristanetworks.com:5000/aeris/k8s-hadoop
    --overrides
    '{ "apiVersion": "v1", "spec":
      {
        "nodeSelector": { "kubernetes.io/hostname": "{{ groups.namenodes[1] }}" },
        "containers": [ {
          "name": "namenode-bootstrap",
          "image": "registry.docker.sjc.aristanetworks.com:5000/aeris/k8s-hadoop",
          "imagePullPolicy": "Always",
          "env": [ {"name": "HADOOP_LOGFILE", "value": "namenodebootstrap.log" } ],
          "args": ["./bin/hdfs", "namenode", "-Ddfs.ha.namenode.id=nn1", "-bootstrapStandby"],
          "volumeMounts": [
            { "mountPath": "/logs", "name": "logs" },
            { "mountPath": "/data1", "name": "data1" },
            { "mountPath": "/data2", "name": "data2" }
            ] } ],
        "volumes": [
          { "name": "logs", "hostPath": { "path": "{{ hostvars[groups.namenodes[1]]['hadoop_namenode_dirs'][0] }}/logs" } },
          { "name": "data1", "hostPath": { "path": "{{ hostvars[groups.namenodes[1]]['hadoop_namenode_dirs'][0] }}/data" } },
          { "name": "data2", "hostPath": { "path": "{{ hostvars[groups.namenodes[1]]['hadoop_namenode_dirs'][1] }}/data" } }
        ] } }'



  register: bootstrapstandby

- name: Check output of the bootstrap standby
  when: "user_input.user_input == format_code.stdout"
  pause:
    prompt: "Press Enter to resume. Press Ctrl+c and then \"a\" to abort.\nBootstrap standby result:\nSTDOUT: {{ bootstrapstandby.stdout }}\nSTDERR: {{ bootstrapstandby.stderr }}"

- pause:
    prompt: "Namenode format has been skipped (or you entered the wrong code). Press ENTER to resume. Press Ctrl+c and then \"a\" to abort"
  when: "user_input.user_input != format_code.stdout"
